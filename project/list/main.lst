# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              // v-Forth 1.6 NextZXOS version
   7  0000              // build 20210425
   8  0000              //
   9  0000              //
  10  0000              //  NextZXOS version
  11  0000              //  ______________________________________________________________________
  12  0000              //
  13  0000              //  This work is available as-is with no whatsoever warranty.
  14  0000              //  Copying, modifying and distributing this software is allowed
  15  0000              //  provided that the copyright notice is kept.
  16  0000              //  ______________________________________________________________________
  17  0000              //
  18  0000              //  by Matteo Vitturi, 1990-2021
  19  0000              //
  20  0000              //  https://sites.google.com/view/vforth/vforth15-next
  21  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  22  0000              //
  23  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  24  0000              //  Each line of this source list mustn't exceed 80 bytes.
  25  0000              //  Z80N (ZX Spectrum Next) extension is available.
  26  0000              //
  27  0000              //  This list has been tested using the following configuration:
  28  0000              //      - CSpect emulator V.2.12.30
  29  0000              //  ______________________________________________________________________
  30  0000              //
  31  0000              //  Z80 Registers usage map
  32  0000              //
  33  0000              //  AF
  34  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  35  0000              //  DE - Top of Stack element. The second from top is pointed by SP
  36  0000              //  HL - Working
  37  0000              //
  38  0000              //  AF'- Sometime used for backup purpose
  39  0000              //  BC'- Not used
  40  0000              //  DE'- Not used
  41  0000              //  HL'- Not used: (saved at startup)
  42  0000              //
  43  0000              //  SP - Calculator Stack Pointer
  44  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  45  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  46  0000              //
  47  0000              //  ______________________________________________________________________
  48  0000              //
  49  0000              //  _________________
  50  0000              //
  51  0000              //  FORTH DEFINITIONS
  52  0000              //  _________________
  53  0000
  54  0000                              OPT     --zxnext
  55  0000              //  ______________________________________________________________________
  56  0000              //
  57  0000              // this controls some debugging code in L0.asm
  58  0000              //  0 for final binary release.
  59  0000              //  1 for debugging with Visual Studio Code and DeZog
  60  0000              // -1 for for binary comparison with Forth generated code.
  61  0000              DEBUGGING       equ     -1
  62  0000              //
  63  0000              //  ______________________________________________________________________
  64  0000
  65  0000                              if ( -1 == DEBUGGING )
  66  0000              ORIGIN          equ     $6380                   // for binary comparison
  67  0000                              endif
  68  0000              //  ______________________________________________________________________
  69  0000
  70  0000                              if (  0 == DEBUGGING )
  71  0000 ~            ORIGIN          equ     $6400                   // binary
  72  0000                              endif
  73  0000              //  ______________________________________________________________________
  74  0000
  75  0000                              if (  1 == DEBUGGING )
  76  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  77  0000                              endif
  78  0000              //  ______________________________________________________________________
  79  0000
  80  0000                              DEVICE  ZXSPECTRUMNEXT
  81  0000
  82  0000                              ORG     ORIGIN
  83  6380
  84  6380                              if ( -1 == DEBUGGING )
  85  6380 00 00 00...                  ds 128                            // for binary comparison
  86  6384                              endif
  87  6400
  88  6400              //  ______________________________________________________________________
  89  6400              //
  90  6400              //  Naming convention for Label vs Forth correspondance
  91  6400              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  92  6400              //    - Leading "0" is converted into "Z_"
  93  6400              //    - Leading "(" is converted into "C_", closing bracket is omitted
  94  6400              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  95  6400              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  96  6400              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  97  6400              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  98  6400              //    - Greater-Than sign ">" in _GREATER or TO_ depending
  99  6400              //    - Equal sign "=" is converted in EQUAL
 100  6400              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 101  6400              //    - Asterisk sign "*" is converted in _MUL or STAR
 102  6400              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 103  6400              //    - Exclamation mark "!" is converted in STORE
 104  6400              //    - At-Sign "@" is converted in FETCH
 105  6400              //    - Words that collides with Assembler are normally suffixed with "_OP"
 106  6400
 107  6400                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
   1+ 6400              //  ______________________________________________________________________
   2+ 6400              //
   3+ 6400              //  system.asm
   4+ 6400              //  ______________________________________________________________________
   5+ 6400
   6+ 6400              // Registers:
   7+ 6400              //
   8+ 6400              //      BC: Instruction Pointer
   9+ 6400              //      DE:
  10+ 6400              //      HL: W register
  11+ 6400              //      SP: Calc stack Pointer
  12+ 6400              //      IX: Inner-Interpreter Address
  13+ 6400
  14+ 6400              //  ______________________________________________________________________
  15+ 6400              //
  16+ 6400              // ZX-Spectrum standard system variables
  17+ 6400              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6400              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6400              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6400              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6400
  22+ 6400              //  ______________________________________________________________________
  23+ 6400              //
  24+ 6400              // Flag constants
  25+ 6400              TRUE_FLAG       equ     $FFFF
  26+ 6400              FALSE_FLAG      equ     $0000
  27+ 6400
  28+ 6400              //  ______________________________________________________________________
  29+ 6400              //
  30+ 6400              // Ascii char constants
  31+ 6400              NUL_CHAR        equ     $00
  32+ 6400              COMMA_CHAR      equ     $06
  33+ 6400              BACKSPACE_CHAR  equ     $08
  34+ 6400              CR_CHAR         equ     $0D
  35+ 6400              BLANK_CHAR      equ     $20
  36+ 6400              QUOTE_CHAR      equ     "'"
  37+ 6400              DQUOTE_CHAR     equ     '"'
  38+ 6400              UNDERSCORE_CHAR equ     $5F
  39+ 6400              SOLIDBLOCK_CHAR equ     $8F
  40+ 6400              HALFBLOCK_CHAR  equ     $8C
  41+ 6400              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6400              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6400
  44+ 6400
  45+ 6400              //  ______________________________________________________________________
  46+ 6400              //
  47+ 6400
  48+ 6400                              // emulate something like:  ld hl,rp
  49+ 6400              ldhlrp          macro
  50+ 6400 ~                            ld      hl,(RP_Pointer)
  51+ 6400                              endm
  52+ 6400
  53+ 6400                              // emulate something like:  ld rp,hl
  54+ 6400              ldrphl          macro
  55+ 6400 ~                            ld      (RP_Pointer),hl
  56+ 6400                              endm
  57+ 6400
  58+ 6400              //  ______________________________________________________________________
  59+ 6400              //
  60+ 6400              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6400              next            macro
  62+ 6400 ~                            jp      (ix)
  63+ 6400                              endm
  64+ 6400
  65+ 6400              psh1            macro
  66+ 6400 ~                            push    hl
  67+ 6400 ~                            jp      (ix)
  68+ 6400                              endm
  69+ 6400
  70+ 6400              psh2            macro
  71+ 6400 ~                            push    de
  72+ 6400 ~                            push    hl
  73+ 6400 ~                            jp      (ix)
  74+ 6400                              endm
  75+ 6400
  76+ 6400              //  ______________________________________________________________________
  77+ 6400              //
  78+ 6400              // Bit constants in length-byte
  79+ 6400
  80+ 6400              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6400              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6400              END_BIT         equ     %10000000               // $80
  83+ 6400
  84+ 6400
  85+ 6400              //  ______________________________________________________________________
  86+ 6400              //
  87+ 6400              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6400              //  pointers
  89+ 6400              temp_NFA        defl    0
  90+ 6400              last_NFA        defl    0
  91+ 6400              len_NFA         defl    0
  92+ 6400
  93+ 6400              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6400              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6400              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6400
  97+ 6400              //  ______________________________________________________________________
  98+ 6400              //
  99+ 6400              //  Create a new "low-level" definition
 100+ 6400              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6400              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6400              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6400              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6400              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6400              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6400              //  This macro acts much like the standard Forth definition CREATE
 107+ 6400
 108+ 6400              New_Def         macro   label, namec, runcode, bits
 109+ 6400 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6400 ~
 111+ 6400 ~                            // dummy db directives used to calculate length of namec
 112+ 6400 ~                            db      namec
 113+ 6400 ~            len_NFA         defl    $ - temp_NFA
 114+ 6400 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6400 ~
 116+ 6400 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6400 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6400 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6400 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6400 ~
 121+ 6400 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6400 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6400 ~                            dw      runcode ; ok        // for primitive definitions  actual code
 124+ 6400 ~                            else
 125+ 6400 ~                            dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6400 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6400 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6400 ~
 129+ 6400 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6400                              endm
 131+ 6400
 132+ 6400              //  ______________________________________________________________________
 133+ 6400              //
 134+ 6400              // Create a "constant"
 135+ 6400              // The constant value is compiled in first PFA cell
 136+ 6400              Constant_Def    macro   label, namec, constant_value
 137+ 6400 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6400 ~                            dw      constant_value
 139+ 6400                              endm
 140+ 6400
 141+ 6400              //  ______________________________________________________________________
 142+ 6400              //
 143+ 6400              // Create a "variable"
 144+ 6400              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6400              // this allow creation of "variables" which content is  of any length
 146+ 6400              Variable_Def    macro   label, namec, initial_value
 147+ 6400 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6400 ~                            dw      initial_value
 149+ 6400                              endm
 150+ 6400
 151+ 6400              //  ______________________________________________________________________
 152+ 6400              //
 153+ 6400              // Create a "user"
 154+ 6400              // It uses a single byte as offset to calculate the address of the variable
 155+ 6400              User_Def        macro   label, namec, offset_value
 156+ 6400 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6400 ~                            db      offset_value
 158+ 6400                              endm
 159+ 6400
 160+ 6400              //  ______________________________________________________________________
 161+ 6400              //
 162+ 6400              // Create a "colon-definition"
 163+ 6400              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6400              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6400              Colon_Def       macro   label, namec, bits
 166+ 6400 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6400                              endm
 168+ 6400
 169+ 6400              //  ______________________________________________________________________
 170+ 6400              //
 171+ 6400
 172+ 6400              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6400              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6400              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6400              USER_system:    equ     $D188               // User variables zone.
 176+ 6400              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6400              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6400
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
 108  6400                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
   1+ 6400              //  ______________________________________________________________________
   2+ 6400              //
   3+ 6400              //  L0.asm
   4+ 6400              //
   5+ 6400              //  Origin-Area and Level-0 definitions
   6+ 6400              //  ______________________________________________________________________
   7+ 6400
   8+ 6400
   9+ 6400              Cold_origin:
  10+ 6400 A7                           and     a
  11+ 6401 C3 23 79                     jp      ColdRoutine
  12+ 6404              Warm_origin:
  13+ 6404 37                           scf
  14+ 6405 C3 23 79                     jp      WarmRoutine
  15+ 6408
  16+ 6408              // +008
  17+ 6408 E8 D0        SP_Basic:       dw      $D0E8               // These are bits with some "standard" meaning... 0101
  18+ 640A
  19+ 640A              // +00A
  20+ 640A 00 0E                        dw      $0E00
  21+ 640C
  22+ 640C              // +00C
  23+ 640C 33 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 640E
  25+ 640E              // +00E
  26+ 640E 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6410
  28+ 6410              // +010
  29+ 6410 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6412
  31+ 6412              // +012
  32+ 6412 E8 D0        S0_origin:      dw      S0_system
  33+ 6414 88 D1        R0_origin:      dw      R0_system
  34+ 6416 E8 D0        TIB_origin:     dw      TIB_system
  35+ 6418 1F 00        WIDTH_origin:   dw      31
  36+ 641A 01 00        WARNING_origin: dw      1
  37+ 641C 58 87        FENCE_origin:   dw      Fence_Word
  38+ 641E 58 87        DP_origin       dw      Fence_Word
  39+ 6420 31 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6422 E4 D1                        dw      FIRST_system
  41+ 6424 00 E0                        dw      LIMIT_system
  42+ 6426
  43+ 6426              // +026
  44+ 6426 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 6427 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 6428 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 6429 00                           db      0
  48+ 642A
  49+ 642A              // +02A
  50+ 642A 00 00        IX_Echo:        dw      0                   // Echo IX after NextOS call
  51+ 642C
  52+ 642C              // +02C
  53+ 642C 00 00        SP_Saved:       dw      0                   // Saved SP dufing NextOS call
  54+ 642E
  55+ 642E              // +02E
  56+ 642E 88 D1        USER_Pointer:   dw      USER_system
  57+ 6430
  58+ 6430              // +030
  59+ 6430 88 D1        RP_Pointer:     dw      R0_system
  60+ 6432
  61+ 6432              // +32
  62+ 6432              // SP_Basic        dw      0
  63+ 6432
  64+ 6432
  65+ 6432              //  ______________________________________________________________________
  66+ 6432
  67+ 6432              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6432              // instead of their equivalent long sequences.
  69+ 6432
  70+ 6432              //  ______________________________________________________________________
  71+ 6432
  72+ 6432              // address for "next" - inner interpreter
  73+ 6432              // This address must always be pointed by IX
  74+ 6432              // "next" macro simply does a  jp(ix)  instruction
  75+ 6432
  76+ 6432 D5           Psh2_Ptr:       push    de
  77+ 6433 E5           Psh1_Ptr:       push    hl
  78+ 6434
  79+ 6434              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6434
  81+ 6434                              if ( 1 == DEBUGGING )
  82+ 6434 ~                            ld      hl, Next_Breakpoint_1
  83+ 6434 ~                            and     a
  84+ 6434 ~                            sbc     hl, bc
  85+ 6434 ~                            jr      nz, Next_Continue
  86+ 6434 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6434                              endif
  88+ 6434
  89+ 6434              Next_Continue:
  90+ 6434 0A                           ld      a, (bc)
  91+ 6435 03                           inc     bc
  92+ 6436 6F                           ld      l, a
  93+ 6437 0A                           ld      a, (bc)
  94+ 6438 03                           inc     bc
  95+ 6439 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 643A
  97+ 643A              // Execute xt i.e. CFA held in HL
  98+ 643A              Exec_Ptr:
  99+ 643A 5E                           ld      e, (hl)
 100+ 643B 23                           inc     hl
 101+ 643C 56                           ld      d, (hl)
 102+ 643D EB                           ex      de, hl
 103+ 643E E9                           jp      (hl)                // and jump to it
 104+ 643F                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 643F
 106+ 643F              //  ______________________________________________________________________
 107+ 643F              //
 108+ 643F              // lit          -- x
 109+ 643F              // puts on top of stack the value of the following word.
 110+ 643F              // it is compiled in colon definition before a literal number
 111+ 643F
 112+ 643F                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 643F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 643F             >
 112+ 643F             >                // dummy db directives used to calculate length of namec
 112+ 643F 4C 49 54    >                db      "LIT"
 112+ 6442             >len_NFA         defl    $ - temp_NFA
 112+ 6442             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 643F             >
 112+ 643F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 6440 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 6443             >                org     $-1                 // alter last byte of Name just above to set
 112+ 6442 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 6443             >
 112+ 6443 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 6445             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 6445 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 112+ 6445             >                else
 112+ 6445 47 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 112+ 6447             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 6447             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 6447             >
 112+ 6447             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 6447
 114+ 6447 0A                           ld      a, (bc)
 115+ 6448 03                           inc     bc
 116+ 6449 6F                           ld      l, a
 117+ 644A 0A                           ld      a, (bc)
 118+ 644B 03                           inc     bc
 119+ 644C 67                           ld      h, a
 120+ 644D                              psh1
 120+ 644D E5          >                push    hl
 120+ 644E DD E9       >                jp      (ix)
 121+ 6450
 122+ 6450              //  ______________________________________________________________________
 123+ 6450              //
 124+ 6450              // execute      i*x xt -- j*x
 125+ 6450              // execution token. usually xt is given by CFA
 126+ 6450
 127+ 6450                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 6450             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6450             >
 127+ 6450             >                // dummy db directives used to calculate length of namec
 127+ 6450 45 58 45 43 >                db      "EXECUTE"
 127+ 6454 55 54 45    >
 127+ 6457             >len_NFA         defl    $ - temp_NFA
 127+ 6457             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6450             >
 127+ 6450 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6451 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 6455 55 54 45    >
 127+ 6458             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6457 C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 6458             >
 127+ 6458 3F 64       >                dw      last_NFA            // Link to previous definition Name
 127+ 645A             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 645A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 127+ 645A             >                else
 127+ 645A 5C 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 645C             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 645C             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 645C             >
 127+ 645C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 645C E1                           pop     hl
 129+ 645D 18 DB                        jr      Exec_Ptr
 130+ 645F
 131+ 645F
 132+ 645F              //  ______________________________________________________________________
 133+ 645F              //
 134+ 645F              // branch       --
 135+ 645F              // unconditional branch in colon definition using the following cell as an offset from current IP value
 136+ 645F              // compiled by ELSE, AGAIN and some other immediate words
 137+ 645F
 138+ 645F                              New_Def BRANCH, "BRANCH", is_code, is_normal
 138+ 645F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ 645F             >
 138+ 645F             >                // dummy db directives used to calculate length of namec
 138+ 645F 42 52 41 4E >                db      "BRANCH"
 138+ 6463 43 48       >
 138+ 6465             >len_NFA         defl    $ - temp_NFA
 138+ 6465             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ 645F             >
 138+ 645F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ 6460 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 138+ 6464 43 48       >
 138+ 6466             >                org     $-1                 // alter last byte of Name just above to set
 138+ 6465 C8          >                db      {b $} | END_BIT     // msb as name end
 138+ 6466             >
 138+ 6466 50 64       >                dw      last_NFA            // Link to previous definition Name
 138+ 6468             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 6468 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 138+ 6468             >                else
 138+ 6468 6A 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 138+ 646A             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 646A             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 646A             >
 138+ 646A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 646A              Branch_Ptr:
 140+ 646A 60                           ld      h, b
 141+ 646B 69                           ld      l, c
 142+ 646C 5E                           ld      e, (hl)
 143+ 646D 23                           inc     hl
 144+ 646E 56                           ld      d, (hl)
 145+ 646F 2B                           dec     hl                  // offset is calculated from current IP
 146+ 6470 19                           add     hl, de
 147+ 6471 4D                           ld      c, l
 148+ 6472 44                           ld      b, h
 149+ 6473                              next
 149+ 6473 DD E9       >                jp      (ix)
 150+ 6475
 151+ 6475
 152+ 6475              //  ______________________________________________________________________
 153+ 6475              //
 154+ 6475              // 0branch      f --
 155+ 6475              // conditional branch if the top-of-stack is ZERO or FALSE.
 156+ 6475              // compiled by IF, UNTIL and some other immediate words
 157+ 6475
 158+ 6475                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 158+ 6475             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6475             >
 158+ 6475             >                // dummy db directives used to calculate length of namec
 158+ 6475 30 42 52 41 >                db      "0BRANCH"
 158+ 6479 4E 43 48    >
 158+ 647C             >len_NFA         defl    $ - temp_NFA
 158+ 647C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6475             >
 158+ 6475 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6476 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 158+ 647A 4E 43 48    >
 158+ 647D             >                org     $-1                 // alter last byte of Name just above to set
 158+ 647C C8          >                db      {b $} | END_BIT     // msb as name end
 158+ 647D             >
 158+ 647D 5F 64       >                dw      last_NFA            // Link to previous definition Name
 158+ 647F             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 647F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 158+ 647F             >                else
 158+ 647F 81 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6481             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6481             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6481             >
 158+ 6481             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6481              ZBranch_Ptr:
 160+ 6481 E1                           pop     hl
 161+ 6482 7D                           ld      a, l
 162+ 6483 B4                           or      h
 163+ 6484 CA 6A 64                     jp      z, Branch_Ptr
 164+ 6487 03                           inc     bc                  // if not branch, skip offset cell.
 165+ 6488 03                           inc     bc
 166+ 6489                              next
 166+ 6489 DD E9       >                jp      (ix)
 167+ 648B
 168+ 648B              //  ______________________________________________________________________
 169+ 648B              //
 170+ 648B              // (loop)       --
 171+ 648B              // compiled by +LOOP. it uses the top two values of return-stack to
 172+ 648B              // keep track of index and limit
 173+ 648B                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 173+ 648B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 648B             >
 173+ 648B             >                // dummy db directives used to calculate length of namec
 173+ 648B 28 4C 4F 4F >                db      "(LOOP)"
 173+ 648F 50 29       >
 173+ 6491             >len_NFA         defl    $ - temp_NFA
 173+ 6491             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 648B             >
 173+ 648B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 648C 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 173+ 6490 50 29       >
 173+ 6492             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6491 A9          >                db      {b $} | END_BIT     // msb as name end
 173+ 6492             >
 173+ 6492 75 64       >                dw      last_NFA            // Link to previous definition Name
 173+ 6494             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6494 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 173+ 6494             >                else
 173+ 6494 96 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6496             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6496             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6496             >
 173+ 6496             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6496
 175+ 6496
 176+ 6496 11 01 00                     ld      de, 1               // bc contains increment of 1
 177+ 6499
 178+ 6499
 179+ 6499
 180+ 6499
 181+ 6499
 182+ 6499
 183+ 6499
 184+ 6499
 185+ 6499              Loop_Ptr:
 186+ 6499                              ldhlrp                      // ld hl,rp macro 30h +Origin
 186+ 6499 2A 30 64    >                ld      hl,(RP_Pointer)
 187+ 649C 7E                           ld      a, (hl)             // hl points to loop-index, add increment de to it.
 188+ 649D 83                           add     e
 189+ 649E 77                           ld      (hl), a
 190+ 649F 5F                           ld      e, a
 191+ 64A0 23                           inc     hl
 192+ 64A1 7E                           ld      a, (hl)
 193+ 64A2 8A                           adc     d
 194+ 64A3 77                           ld      (hl),a
 195+ 64A4 23                           inc     hl                  // hl now points to loop-limit
 196+ 64A5 CB 7A                        bit     7, d                // keep increment-sign just before overwriting d
 197+ 64A7 57                           ld      d, a
 198+ 64A8 20 07                        jr      nz, Loop_NegativeIncrement
 199+ 64AA
 200+ 64AA 7B                               ld      a, e
 201+ 64AB 96                               sub     (hl)
 202+ 64AC 7A                               ld      a, d
 203+ 64AD 23                               inc     hl
 204+ 64AE 9E                               sbc     (hl)
 205+ 64AF 18 05                        jr      Loop_Endif              // else
 206+ 64B1              Loop_NegativeIncrement:
 207+ 64B1 7E                               ld      a, (hl)
 208+ 64B2 93                               sub     e
 209+ 64B3 23                               inc     hl
 210+ 64B4 7E                               ld      a, (hl)
 211+ 64B5 9A                               sbc     d
 212+ 64B6              Loop_Endif:
 213+ 64B6
 214+ 64B6 FA 6A 64                     jp      m, Branch_Ptr       // perform branch consuming following cell
 215+ 64B9
 216+ 64B9 23                           inc     hl
 217+ 64BA                              ldrphl                      // ld rp,hl macro 30h +Origin
 217+ 64BA 22 30 64    >                ld      (RP_Pointer),hl
 218+ 64BD
 219+ 64BD 03                           inc     bc                  // skip branch-style offset
 220+ 64BE 03                           inc     bc
 221+ 64BF                              next
 221+ 64BF DD E9       >                jp      (ix)
 222+ 64C1
 223+ 64C1              //  ______________________________________________________________________
 224+ 64C1              //
 225+ 64C1              // (+loop)       n --
 226+ 64C1              // same as (LOOP) but index is incremented by n (instead of just 1)
 227+ 64C1              // compiled by +LOOP.
 228+ 64C1                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 228+ 64C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 228+ 64C1             >
 228+ 64C1             >                // dummy db directives used to calculate length of namec
 228+ 64C1 28 2B 4C 4F >                db      "(+LOOP)"
 228+ 64C5 4F 50 29    >
 228+ 64C8             >len_NFA         defl    $ - temp_NFA
 228+ 64C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 228+ 64C1             >
 228+ 64C1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 228+ 64C2 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 228+ 64C6 4F 50 29    >
 228+ 64C9             >                org     $-1                 // alter last byte of Name just above to set
 228+ 64C8 A9          >                db      {b $} | END_BIT     // msb as name end
 228+ 64C9             >
 228+ 64C9 8B 64       >                dw      last_NFA            // Link to previous definition Name
 228+ 64CB             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 228+ 64CB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 228+ 64CB             >                else
 228+ 64CB CD 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 228+ 64CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 228+ 64CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 228+ 64CD             >
 228+ 64CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 229+ 64CD D1                           pop     de
 230+ 64CE C3 99 64                     jp      Loop_Ptr
 231+ 64D1
 232+ 64D1              //  ______________________________________________________________________
 233+ 64D1              //
 234+ 64D1              // (?do)        lim ind --
 235+ 64D1              // compiled by ?DO to make a loop checking for lim == ind first
 236+ 64D1              // at run-time (?DO) must be followed by a BRANCH offset
 237+ 64D1              // used to skip the loop if lim == ind
 238+ 64D1                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 238+ 64D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 238+ 64D1             >
 238+ 64D1             >                // dummy db directives used to calculate length of namec
 238+ 64D1 28 3F 44 4F >                db      "(?DO)"
 238+ 64D5 29          >
 238+ 64D6             >len_NFA         defl    $ - temp_NFA
 238+ 64D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 238+ 64D1             >
 238+ 64D1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 238+ 64D2 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 238+ 64D6 29          >
 238+ 64D7             >                org     $-1                 // alter last byte of Name just above to set
 238+ 64D6 A9          >                db      {b $} | END_BIT     // msb as name end
 238+ 64D7             >
 238+ 64D7 C1 64       >                dw      last_NFA            // Link to previous definition Name
 238+ 64D9             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 238+ 64D9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 238+ 64D9             >                else
 238+ 64D9 DB 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 238+ 64DB             >                endif           ; ok        // for other definitions it "points" the correct handler
 238+ 64DB             >                // Use of "; ok" to suppress "warning[fwdref]"
 238+ 64DB             >
 238+ 64DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 239+ 64DB D1                           pop     de                  // de has the index
 240+ 64DC E1                           pop     hl                  // hl has the limit
 241+ 64DD E5                           push    hl
 242+ 64DE D5                           push    de
 243+ 64DF A7                           and     a                   // reset carry flag
 244+ 64E0 ED 52                        sbc     hl, de              // compute limit - index
 245+ 64E2 20 05                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 246+ 64E4 D1                               pop     de
 247+ 64E5 E1                               pop     hl
 248+ 64E6
 249+ 64E6 C3 6A 64                         jp      Branch_Ptr          // perform branch consuming following cell
 250+ 64E9              Do_Ptr:
 251+ 64E9                              ldhlrp                      // prepare RP
 251+ 64E9 2A 30 64    >                ld      hl,(RP_Pointer)
 252+ 64EC 2B                           dec     hl
 253+ 64ED 2B                           dec     hl
 254+ 64EE 2B                           dec     hl
 255+ 64EF 2B                           dec     hl
 256+ 64F0                              ldrphl
 256+ 64F0 22 30 64    >                ld      (RP_Pointer),hl
 257+ 64F3
 258+ 64F3                              // store index as top RP
 259+ 64F3 D1                           pop     de
 260+ 64F4 73                           ld      (hl), e
 261+ 64F5 23                           inc     hl
 262+ 64F6 72                           ld      (hl), d
 263+ 64F7 23                           inc     hl
 264+ 64F8                              // stores lim as second from top RP
 265+ 64F8 D1                           pop     de
 266+ 64F9 73                           ld      (hl), e
 267+ 64FA 23                           inc     hl
 268+ 64FB 72                           ld      (hl), d
 269+ 64FC
 270+ 64FC                              // skip branch-style offseet
 271+ 64FC 03                           inc     bc
 272+ 64FD 03                           inc     bc
 273+ 64FE                              next
 273+ 64FE DD E9       >                jp      (ix)
 274+ 6500
 275+ 6500              //  ______________________________________________________________________
 276+ 6500              //
 277+ 6500              // (do)        lim ind --
 278+ 6500              // compiled by DO to make a loop checking for lim == ind first
 279+ 6500              // this is a simpler version of (?DO)
 280+ 6500                              New_Def C_DO, "(DO)", is_code, is_normal
 280+ 6500             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 280+ 6500             >
 280+ 6500             >                // dummy db directives used to calculate length of namec
 280+ 6500 28 44 4F 29 >                db      "(DO)"
 280+ 6504             >len_NFA         defl    $ - temp_NFA
 280+ 6504             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 280+ 6500             >
 280+ 6500 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 280+ 6501 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 280+ 6505             >                org     $-1                 // alter last byte of Name just above to set
 280+ 6504 A9          >                db      {b $} | END_BIT     // msb as name end
 280+ 6505             >
 280+ 6505 D1 64       >                dw      last_NFA            // Link to previous definition Name
 280+ 6507             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 280+ 6507 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 280+ 6507             >                else
 280+ 6507 09 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 280+ 6509             >                endif           ; ok        // for other definitions it "points" the correct handler
 280+ 6509             >                // Use of "; ok" to suppress "warning[fwdref]"
 280+ 6509             >
 280+ 6509             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 281+ 6509 0B                           dec     bc                  // prepare IP beforehand
 282+ 650A 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 283+ 650B C3 E9 64                     jp      Do_Ptr
 284+ 650E
 285+ 650E              //  ______________________________________________________________________
 286+ 650E              //
 287+ 650E              // i            -- n
 288+ 650E              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 289+ 650E              // the current value of the index-loop
 290+ 650E                              New_Def I, "I", is_code, is_normal
 290+ 650E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 650E             >
 290+ 650E             >                // dummy db directives used to calculate length of namec
 290+ 650E 49          >                db      "I"
 290+ 650F             >len_NFA         defl    $ - temp_NFA
 290+ 650F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 650E             >
 290+ 650E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 650F 49          >                db      "I"               // name string in 7-bit ascii, but
 290+ 6510             >                org     $-1                 // alter last byte of Name just above to set
 290+ 650F C9          >                db      {b $} | END_BIT     // msb as name end
 290+ 6510             >
 290+ 6510 00 65       >                dw      last_NFA            // Link to previous definition Name
 290+ 6512             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 6512 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 290+ 6512             >                else
 290+ 6512 14 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 6514             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 6514             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 6514             >
 290+ 6514             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 6514              I_Ptr:
 292+ 6514
 293+ 6514                              ldhlrp
 293+ 6514 2A 30 64    >                ld      hl,(RP_Pointer)
 294+ 6517 5E                           ld      e, (hl)
 295+ 6518 23                           inc     hl
 296+ 6519 56                           ld      d, (hl)
 297+ 651A D5                           push    de
 298+ 651B                              next
 298+ 651B DD E9       >                jp      (ix)
 299+ 651D
 300+ 651D              //  ______________________________________________________________________
 301+ 651D              //
 302+ 651D              // digit        c n -- u 1  |  0
 303+ 651D              // convert a character c using base n
 304+ 651D              // returns a unsigned number and a true flag
 305+ 651D              // or just a false flag if the conversion fails
 306+ 651D                              New_Def DIGIT, "DIGIT", is_code, is_normal
 306+ 651D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 306+ 651D             >
 306+ 651D             >                // dummy db directives used to calculate length of namec
 306+ 651D 44 49 47 49 >                db      "DIGIT"
 306+ 6521 54          >
 306+ 6522             >len_NFA         defl    $ - temp_NFA
 306+ 6522             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 306+ 651D             >
 306+ 651D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 306+ 651E 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 306+ 6522 54          >
 306+ 6523             >                org     $-1                 // alter last byte of Name just above to set
 306+ 6522 D4          >                db      {b $} | END_BIT     // msb as name end
 306+ 6523             >
 306+ 6523 0E 65       >                dw      last_NFA            // Link to previous definition Name
 306+ 6525             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 306+ 6525 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 306+ 6525             >                else
 306+ 6525 27 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 306+ 6527             >                endif           ; ok        // for other definitions it "points" the correct handler
 306+ 6527             >                // Use of "; ok" to suppress "warning[fwdref]"
 306+ 6527             >
 306+ 6527             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 307+ 6527 E1                           pop     hl                  // l has the base
 308+ 6528 D1                           pop     de                  // e has the digit
 309+ 6529 7B                           ld      a, e
 310+ 652A FE 60                        cp      $60                 // check if lowercase
 311+ 652C 38 02                        jr      c, Digit_Uppercase
 312+ 652E D6 20                            sub     $20                 // quick'n'dirty uppercase
 313+ 6530              Digit_Uppercase:
 314+ 6530 D6 30                        sub     $30
 315+ 6532 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 316+ 6534 FE 0A                            cp      $0A
 317+ 6536 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 318+ 6538 D6 07                                sub     7                   // try hex and subtract 7
 319+ 653A FE 0A                                cp      $0A
 320+ 653C 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 321+ 653E
 322+ 653E              Digit_Decimal:
 323+ 653E                              // compare digit
 324+ 653E BD                           cp      l                   // compare with base
 325+ 653F
 326+ 653F 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 327+ 6541 5F                               ld      e, a                // digit is returned as second from TOS
 328+ 6542 21 01 00                         ld      hl, 1
 329+ 6545
 330+ 6545                                  psh2
 330+ 6545 D5          >                push    de
 330+ 6546 E5          >                push    hl
 330+ 6547 DD E9       >                jp      (ix)
 331+ 6549              Digit_Fail:
 332+ 6549 21 00 00                     ld      hl, 0
 333+ 654C                              psh1
 333+ 654C E5          >                push    hl
 333+ 654D DD E9       >                jp      (ix)
 334+ 654F
 335+ 654F              //  ______________________________________________________________________
 336+ 654F              //
 337+ 654F              //  parametric uppercase routine
 338+ 654F              //  depending on the following op-code the routine can be by-passed
 339+ 654F              //  changing the behaviour of some callers.
 340+ 654F              //  If it is "ret" then the system is Case-Sensitive
 341+ 654F              //  If it is "Nop" then the system is Case-Insensitive
 342+ 654F              //  Only A register is touched.
 343+ 654F 00           Case_Sensitive: nop                         // Default is case-insensitive.
 344+ 6550              Case_Upper:
 345+ 6550 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 346+ 6552 D8                           ret     c                   // no change if A < "a"
 347+ 6553 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 348+ 6555 D0                           ret     nc                  // no change if A > "z"
 349+ 6556 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 350+ 6558 C9                           ret
 351+ 6559
 352+ 6559              //  ______________________________________________________________________
 353+ 6559              //
 354+ 6559              //  caseon      --
 355+ 6559              // set system case-sensitivity on
 356+ 6559              // it patches a RET/NOP at the beginning of the uppercase-routine
 357+ 6559                              New_Def CASEON, "CASEON", is_code, is_normal
 357+ 6559             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ 6559             >
 357+ 6559             >                // dummy db directives used to calculate length of namec
 357+ 6559 43 41 53 45 >                db      "CASEON"
 357+ 655D 4F 4E       >
 357+ 655F             >len_NFA         defl    $ - temp_NFA
 357+ 655F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ 6559             >
 357+ 6559 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ 655A 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 357+ 655E 4F 4E       >
 357+ 6560             >                org     $-1                 // alter last byte of Name just above to set
 357+ 655F CE          >                db      {b $} | END_BIT     // msb as name end
 357+ 6560             >
 357+ 6560 1D 65       >                dw      last_NFA            // Link to previous definition Name
 357+ 6562             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 6562 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 357+ 6562             >                else
 357+ 6562 64 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 357+ 6564             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 6564             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 6564             >
 357+ 6564             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 6564 3E C9                        ld      a, $C9              // "ret"
 359+ 6566 32 4F 65                     ld      (Case_Sensitive), a
 360+ 6569                              next
 360+ 6569 DD E9       >                jp      (ix)
 361+ 656B
 362+ 656B              //  ______________________________________________________________________
 363+ 656B              //
 364+ 656B              //  caseoff     --
 365+ 656B              // set system case-sensitivity on
 366+ 656B              // it patches a RET/NOP at the beginning of the uppercase-routine
 367+ 656B                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 367+ 656B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 367+ 656B             >
 367+ 656B             >                // dummy db directives used to calculate length of namec
 367+ 656B 43 41 53 45 >                db      "CASEOFF"
 367+ 656F 4F 46 46    >
 367+ 6572             >len_NFA         defl    $ - temp_NFA
 367+ 6572             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 367+ 656B             >
 367+ 656B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 367+ 656C 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 367+ 6570 4F 46 46    >
 367+ 6573             >                org     $-1                 // alter last byte of Name just above to set
 367+ 6572 C6          >                db      {b $} | END_BIT     // msb as name end
 367+ 6573             >
 367+ 6573 59 65       >                dw      last_NFA            // Link to previous definition Name
 367+ 6575             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 367+ 6575 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 367+ 6575             >                else
 367+ 6575 77 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 367+ 6577             >                endif           ; ok        // for other definitions it "points" the correct handler
 367+ 6577             >                // Use of "; ok" to suppress "warning[fwdref]"
 367+ 6577             >
 367+ 6577             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 368+ 6577 3E 00                        ld      a, $00              // "nop"
 369+ 6579 32 4F 65                     ld      (Case_Sensitive), a
 370+ 657C                              next
 370+ 657C DD E9       >                jp      (ix)
 371+ 657E
 372+ 657E              //  ______________________________________________________________________
 373+ 657E              //
 374+ 657E              //  upper       c1 -- c1 | c2
 375+ 657E              // character on top of stack is forced to Uppercase.
 376+ 657E                              New_Def UPPER, "UPPER", is_code, is_normal
 376+ 657E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 376+ 657E             >
 376+ 657E             >                // dummy db directives used to calculate length of namec
 376+ 657E 55 50 50 45 >                db      "UPPER"
 376+ 6582 52          >
 376+ 6583             >len_NFA         defl    $ - temp_NFA
 376+ 6583             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 376+ 657E             >
 376+ 657E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 376+ 657F 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 376+ 6583 52          >
 376+ 6584             >                org     $-1                 // alter last byte of Name just above to set
 376+ 6583 D2          >                db      {b $} | END_BIT     // msb as name end
 376+ 6584             >
 376+ 6584 6B 65       >                dw      last_NFA            // Link to previous definition Name
 376+ 6586             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 376+ 6586 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 376+ 6586             >                else
 376+ 6586 88 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 376+ 6588             >                endif           ; ok        // for other definitions it "points" the correct handler
 376+ 6588             >                // Use of "; ok" to suppress "warning[fwdref]"
 376+ 6588             >
 376+ 6588             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 377+ 6588 E1                           pop     hl
 378+ 6589 7D                           ld      a, l
 379+ 658A CD 50 65                     call    Case_Upper
 380+ 658D 6F                           ld      l, a
 381+ 658E
 382+ 658E                              psh1
 382+ 658E E5          >                push    hl
 382+ 658F DD E9       >                jp      (ix)
 383+ 6591
 384+ 6591              //  ______________________________________________________________________
 385+ 6591              //
 386+ 6591              // (find)       addr voc -- addr 0 | cfa b 1
 387+ 6591              // vocabulary search,
 388+ 6591              // - voc is starting word's NFA
 389+ 6591              // - addr is the string to be searched for
 390+ 6591              // On success, it returns the CFA of found word, the first NFA byte
 391+ 6591              // (which contains length and some flags) and a true flag.
 392+ 6591              // On fail, a false flag  (no more: leaves addr unchanged)
 393+ 6591                              New_Def C_FIND, "(FIND)", is_code, is_normal
 393+ 6591             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 6591             >
 393+ 6591             >                // dummy db directives used to calculate length of namec
 393+ 6591 28 46 49 4E >                db      "(FIND)"
 393+ 6595 44 29       >
 393+ 6597             >len_NFA         defl    $ - temp_NFA
 393+ 6597             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 6591             >
 393+ 6591 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 6592 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 393+ 6596 44 29       >
 393+ 6598             >                org     $-1                 // alter last byte of Name just above to set
 393+ 6597 A9          >                db      {b $} | END_BIT     // msb as name end
 393+ 6598             >
 393+ 6598 7E 65       >                dw      last_NFA            // Link to previous definition Name
 393+ 659A             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 659A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 393+ 659A             >                else
 393+ 659A 9C 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 659C             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 659C             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 659C             >
 393+ 659C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 659C                                                              // de has dictionary pointer
 395+ 659C D1                               pop     de
 396+ 659D              Find_VocabularyLoop:
 397+ 659D E1                               pop     hl                  // string pointer to search for
 398+ 659E E5                               push    hl                  // keep it on stack too for the end.
 399+ 659F 1A                               ld      a, (de)             // save NFA length byte
 400+ 65A0 08                               ex      af,af'              // for later use (!)
 401+ 65A1 1A                               ld      a, (de)             // reload NFA length byte
 402+ 65A2 AE                               xor     (hl)                // check if same length
 403+ 65A3 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 404+ 65A5                                  // word an text haven't the same length, skip to next vocabulary entry
 405+ 65A5 20 2C                            jr      nz, Find_DifferentLenght
 406+ 65A7
 407+ 65A7              Find_ThisWord:  // begin loop
 408+ 65A7 23                                   inc     hl
 409+ 65A8 13                                   inc     de
 410+ 65A9 1A                                   ld      a, (de)
 411+ 65AA                                      // case insensitive option - begin
 412+ 65AA C5                                   push    bc
 413+ 65AB E6 80                                and     $80                 // split A in msb and the rest
 414+ 65AD 47                                   ld      b, a
 415+ 65AE 1A                                   ld      a, (de)
 416+ 65AF E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 417+ 65B1 CD 4F 65                             call    Case_Sensitive      // uppercase routine
 418+ 65B4 4F                                   ld      c, a
 419+ 65B5 7E                                   ld      a, (hl)
 420+ 65B6 CD 4F 65                             call    Case_Sensitive      // uppercase routine
 421+ 65B9 A9                                   xor     c
 422+ 65BA A8                                   xor     b
 423+ 65BB C1                                   pop     bc
 424+ 65BC                                      // case insensitive option - end
 425+ 65BC 87                                   add     a                   // ignore msb during compare
 426+ 65BD 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 427+ 65BF
 428+ 65BF                                  // loop back until last byte msb is found set
 429+ 65BF                                  // that bit marks the ending char of this word
 430+ 65BF 30 E6                            jr      nc, Find_ThisWord
 431+ 65C1
 432+ 65C1                                  // match found !
 433+ 65C1 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 434+ 65C4 19                                   add     hl, de
 435+ 65C5 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 436+ 65C6 08                                   ex      af, af'             // retrieve NFA byte (!)
 437+ 65C7 5F                                   ld      e, a
 438+ 65C8 16 00                                ld      d, 0
 439+ 65CA
 440+ 65CA
 441+ 65CA 21 01 00                             ld      hl, 1
 442+ 65CD                                      psh2
 442+ 65CD D5          >                push    de
 442+ 65CE E5          >                push    hl
 442+ 65CF DD E9       >                jp      (ix)
 443+ 65D1
 444+ 65D1              Find_DidntMatch: // didn't match (*)
 445+ 65D1 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 446+ 65D3
 447+ 65D3              Find_DifferentLenght:
 448+ 65D3                              // consume chars until the end of the word
 449+ 65D3                              // that is last byte msb is found set
 450+ 65D3 13                               inc     de
 451+ 65D4 1A                               ld      a, (de)
 452+ 65D5 87                               add     a, a
 453+ 65D6 30 FB                        jr      nc, Find_DifferentLenght
 454+ 65D8
 455+ 65D8              Find_WordEnd:   // word-end  found (**)
 456+ 65D8                              // take LFA and use it
 457+ 65D8 13                           inc     de
 458+ 65D9 EB                           ex      de, hl
 459+ 65DA 5E                           ld      e, (hl)
 460+ 65DB 23                           inc     hl
 461+ 65DC 56                           ld      d, (hl)
 462+ 65DD 7A                           ld      a, d
 463+ 65DE B3                           or      e
 464+ 65DF
 465+ 65DF                          // loop until end of vocabulary
 466+ 65DF 20 BC                    jr      nz, Find_VocabularyLoop
 467+ 65E1
 468+ 65E1 E1                       pop     hl              // with this, it leaves addr unchanged
 469+ 65E2 21 00 00                 ld      hl, FALSE_FLAG
 470+ 65E5
 471+ 65E5                          psh1
 471+ 65E5 E5          >                push    hl
 471+ 65E6 DD E9       >                jp      (ix)
 472+ 65E8
 473+ 65E8              //  ______________________________________________________________________
 474+ 65E8              //
 475+ 65E8              // enclose      a c -- a  n1 n2 n3
 476+ 65E8              // starting from a, using delimiter c, determines the offsets:
 477+ 65E8              //   n1   the first character non-delimiter
 478+ 65E8              //   n2   the first delimiter after the text
 479+ 65E8              //   n3   the first character non enclosed.
 480+ 65E8              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 481+ 65E8              // an uncoditional delimiter.
 482+ 65E8              // Examples:
 483+ 65E8              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 484+ 65E8              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 485+ 65E8              // iii:	c  c  'nul'          -- 2  3  2
 486+ 65E8                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 486+ 65E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 486+ 65E8             >
 486+ 65E8             >                // dummy db directives used to calculate length of namec
 486+ 65E8 45 4E 43 4C >                db      "ENCLOSE"
 486+ 65EC 4F 53 45    >
 486+ 65EF             >len_NFA         defl    $ - temp_NFA
 486+ 65EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 486+ 65E8             >
 486+ 65E8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 486+ 65E9 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 486+ 65ED 4F 53 45    >
 486+ 65F0             >                org     $-1                 // alter last byte of Name just above to set
 486+ 65EF C5          >                db      {b $} | END_BIT     // msb as name end
 486+ 65F0             >
 486+ 65F0 91 65       >                dw      last_NFA            // Link to previous definition Name
 486+ 65F2             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 486+ 65F2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 486+ 65F2             >                else
 486+ 65F2 F4 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 486+ 65F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 486+ 65F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 486+ 65F4             >
 486+ 65F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 487+ 65F4 D1                           pop     de                  //  e has the character
 488+ 65F5 E1                           pop     hl                  // hl has the string address
 489+ 65F6 E5                           push    hl
 490+ 65F7 7B                           ld      a, e
 491+ 65F8 11 FF FF                     ld      de, -1              // let's start from -1
 492+ 65FB 2B                           dec     hl
 493+ 65FC              Enclose_NonDelimiter:
 494+ 65FC                              // find first non delimiter
 495+ 65FC 23                               inc     hl
 496+ 65FD 13                               inc     de
 497+ 65FE BE                               cp      (hl)
 498+ 65FF 28 FB                        jr      z, Enclose_NonDelimiter
 499+ 6601 D5                           push    de
 500+ 6602
 501+ 6602 C5                           push    bc                  // save Instruction Pointer
 502+ 6603
 503+ 6603 4F                           ld      c, a                // save char
 504+ 6604 7E                           ld      a, (hl)
 505+ 6605 A7                           and     a                   // stop if 0x00
 506+ 6606 20 07                        jr      nz, Enclose_NextChar
 507+ 6608
 508+ 6608                              /// case iii. no more character in string
 509+ 6608 C1                               pop     bc                  // restore Instruction Pointer
 510+ 6609 13                               inc     de
 511+ 660A D5                               push    de
 512+ 660B 1B                               dec     de
 513+ 660C D5                               push    de
 514+ 660D                                  next
 514+ 660D DD E9       >                jp      (ix)
 515+ 660F              Enclose_NextChar:
 516+ 660F 79                               ld      a, c
 517+ 6610 23                               inc     hl
 518+ 6611 13                               inc     de
 519+ 6612 BE                               cp      (hl)
 520+ 6613 20 06                            jr      nz, Enclose_NonSeparator
 521+ 6615
 522+ 6615                                      // case i. first non enclosed
 523+ 6615 C1                                   pop     bc                  // restore Instruction Pointer
 524+ 6616 D5                                   push    de
 525+ 6617 13                                   inc     de
 526+ 6618 D5                                   push    de
 527+ 6619                                      next
 527+ 6619 DD E9       >                jp      (ix)
 528+ 661B              Enclose_NonSeparator:
 529+ 661B 7E                               ld      a, (hl)
 530+ 661C A7                               and     a
 531+ 661D 20 F0                        jr      nz, Enclose_NextChar
 532+ 661F
 533+ 661F                              // case ii. separator & terminator
 534+ 661F C1                           pop     bc                  // restore Instruction Pointer
 535+ 6620 D5                           push    de
 536+ 6621 D5                           push    de
 537+ 6622                              next
 537+ 6622 DD E9       >                jp      (ix)
 538+ 6624
 539+ 6624              //  ______________________________________________________________________
 540+ 6624              //
 541+ 6624              // (compare)    a1 a2 n -- b
 542+ 6624              // this word performs a lexicographic compare of n bytes of text at address a1
 543+ 6624              // with n bytes of text at address a2. It returns numeric a value:
 544+ 6624              //  0 : if strings are equal
 545+ 6624              // +1 : if string at a1 greater than string at a2
 546+ 6624              // -1 : if string at a1 less than string at a2
 547+ 6624              // strings can be 256 bytes in length at most.
 548+ 6624                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 548+ 6624             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 548+ 6624             >
 548+ 6624             >                // dummy db directives used to calculate length of namec
 548+ 6624 28 43 4F 4D >                db      "(COMPARE)"
 548+ 6628 50 41 52 45 >
 548+ 662C 29          >
 548+ 662D             >len_NFA         defl    $ - temp_NFA
 548+ 662D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 548+ 6624             >
 548+ 6624 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 548+ 6625 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 548+ 6629 50 41 52 45 >
 548+ 662D 29          >
 548+ 662E             >                org     $-1                 // alter last byte of Name just above to set
 548+ 662D A9          >                db      {b $} | END_BIT     // msb as name end
 548+ 662E             >
 548+ 662E E8 65       >                dw      last_NFA            // Link to previous definition Name
 548+ 6630             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 548+ 6630 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 548+ 6630             >                else
 548+ 6630 32 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 548+ 6632             >                endif           ; ok        // for other definitions it "points" the correct handler
 548+ 6632             >                // Use of "; ok" to suppress "warning[fwdref]"
 548+ 6632             >
 548+ 6632             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 549+ 6632 E1                           pop     hl                  // Number of bytes
 550+ 6633 7D                           ld      a, l
 551+ 6634 E1                           pop     hl                  // hl points string a2
 552+ 6635 D1                           pop     de                  // hl points string a1
 553+ 6636 C5                           push    bc                  // Instruction pointer on stack
 554+ 6637 47                           ld      b, a
 555+ 6638              C_Compare_Loop:
 556+ 6638 7E                               ld      a, (hl)
 557+ 6639 CD 4F 65                         call    Case_Sensitive
 558+ 663C 4F                               ld      c, a
 559+ 663D 1A                               ld      a, (de)
 560+ 663E CD 4F 65                         call    Case_Sensitive
 561+ 6641 B9                               cp      c
 562+ 6642 13                               inc     de
 563+ 6643 23                               inc     hl
 564+ 6644 28 0E                            jr      z, C_Compare_Equal
 565+ 6646 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 566+ 6648 21 01 00                                 ld      hl, 1               // a1 gt a2
 567+ 664B 18 03                                jr      C_Compare_Then      // Else
 568+ 664D              C_Compare_NotLessThan:
 569+ 664D 21 FF FF                                 ld      hl, -1              // a1 lt a2
 570+ 6650              C_Compare_Then:                                 // Endif
 571+ 6650 C1                                   pop     bc              // restore Instruction Pointer
 572+ 6651
 573+ 6651                                      psh1
 573+ 6651 E5          >                push    hl
 573+ 6652 DD E9       >                jp      (ix)
 574+ 6654
 575+ 6654              C_Compare_Equal:
 576+ 6654 10 E2                        djnz    C_Compare_Loop
 577+ 6656 21 00 00                     ld      hl, 0               // a1 eq a2
 578+ 6659 C1                           pop     bc                  // restore Instruction Pointer
 579+ 665A
 580+ 665A                              psh1
 580+ 665A E5          >                push    hl
 580+ 665B DD E9       >                jp      (ix)
 581+ 665D
 582+ 665D              //  ______________________________________________________________________
 583+ 665D              //
 584+ 665D              // emitc        c --
 585+ 665D              // low level emit, calls ROM routine at #10 to send a character to
 586+ 665D              // the the current channel (see SELECT to change stream-channel)
 587+ 665D                              New_Def EMITC, "EMITC", is_code, is_normal
 587+ 665D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 587+ 665D             >
 587+ 665D             >                // dummy db directives used to calculate length of namec
 587+ 665D 45 4D 49 54 >                db      "EMITC"
 587+ 6661 43          >
 587+ 6662             >len_NFA         defl    $ - temp_NFA
 587+ 6662             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 587+ 665D             >
 587+ 665D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 587+ 665E 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 587+ 6662 43          >
 587+ 6663             >                org     $-1                 // alter last byte of Name just above to set
 587+ 6662 C3          >                db      {b $} | END_BIT     // msb as name end
 587+ 6663             >
 587+ 6663 24 66       >                dw      last_NFA            // Link to previous definition Name
 587+ 6665             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 587+ 6665 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 587+ 6665             >                else
 587+ 6665 67 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 587+ 6667             >                endif           ; ok        // for other definitions it "points" the correct handler
 587+ 6667             >                // Use of "; ok" to suppress "warning[fwdref]"
 587+ 6667             >
 587+ 6667             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 588+ 6667 E1                           pop     hl
 589+ 6668 7D                           ld      a, l
 590+ 6669              Emitc_Ptr:
 591+ 6669 C5                           push    bc
 592+ 666A DD E5                        push    ix
 593+ 666C D7                           rst     $10
 594+ 666D DD E1                        pop     ix
 595+ 666F C1                           pop     bc
 596+ 6670 3E FF                        ld      a, 255            // max possible
 597+ 6672 32 8C 5C                     ld      (SCR_CT), a
 598+ 6675
 599+ 6675                              next
 599+ 6675 DD E9       >                jp      (ix)
 600+ 6677
 601+ 6677              Emitc_Vec:
 602+ 6677 BC 66                        dw      C_Emit_Printable  // comma
 603+ 6679 C2 66                        dw      C_Emit_Bel        // bel
 604+ 667B BC 66                        dw      C_Emit_Printable  // bs
 605+ 667D D7 66                        dw      C_Emit_Tab        // tab
 606+ 667F BC 66                        dw      C_Emit_Printable  // cr
 607+ 6681 DD 66                        dw      C_Emit_NL         // lf (unix newline)
 608+ 6683 BC 66                        dw      C_Emit_Printable  // blank
 609+ 6685 BC 66                        dw      C_Emit_Printable  // blank
 610+ 6687
 611+ 6687              Emit_Selector_Start:
 612+ 6687 06                           db      $06                 // comma
 613+ 6688 07                           db      $07                 // bel
 614+ 6689 08                           db      $08                 // bs
 615+ 668A 09                           db      $09                 // tab
 616+ 668B 0D                           db      $0D                 // cr
 617+ 668C 0A                           db      $0A                 // lf (unix newline)
 618+ 668D 20                           db      $20
 619+ 668E              Emit_Selector_End:
 620+ 668E 20                           db      $20
 621+ 668F
 622+ 668F              //  ______________________________________________________________________
 623+ 668F              //
 624+ 668F              // (?emit)      c1 -- c2 | c1
 625+ 668F              // decode a character to be sent via EMIT
 626+ 668F              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 627+ 668F              // the routine should resolve anything and convert the character anyway.
 628+ 668F                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 628+ 668F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 628+ 668F             >
 628+ 668F             >                // dummy db directives used to calculate length of namec
 628+ 668F 28 3F 45 4D >                db      "(?EMIT)"
 628+ 6693 49 54 29    >
 628+ 6696             >len_NFA         defl    $ - temp_NFA
 628+ 6696             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 628+ 668F             >
 628+ 668F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 628+ 6690 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 628+ 6694 49 54 29    >
 628+ 6697             >                org     $-1                 // alter last byte of Name just above to set
 628+ 6696 A9          >                db      {b $} | END_BIT     // msb as name end
 628+ 6697             >
 628+ 6697 5D 66       >                dw      last_NFA            // Link to previous definition Name
 628+ 6699             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 628+ 6699 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 628+ 6699             >                else
 628+ 6699 9B 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 628+ 669B             >                endif           ; ok        // for other definitions it "points" the correct handler
 628+ 669B             >                // Use of "; ok" to suppress "warning[fwdref]"
 628+ 669B             >
 628+ 669B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 629+ 669B D1                           pop     de
 630+ 669C 7B                           ld      a, e                //  de has c1
 631+ 669D E6 7F                        and     $7F                 // 7-bit ascii only
 632+ 669F C5                           push    bc                  // save Instruction Pointer
 633+ 66A0 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 634+ 66A3 21 8E 66                     ld      hl, Emit_Selector_End
 635+ 66A6 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 636+ 66A8 20 0B                        jr      nz, C_Emit_Not_Found
 637+ 66AA                                  // Found then decode it
 638+ 66AA 21 77 66                         ld      hl, Emitc_Vec
 639+ 66AD 09                               add     hl, bc
 640+ 66AE 09                               add     hl, bc
 641+ 66AF 5E                               ld      e, (hl)
 642+ 66B0 23                               inc     hl
 643+ 66B1 56                               ld      d, (hl)
 644+ 66B2 EB                               ex      de, hl
 645+ 66B3 C1                               pop     bc                  // restore Instruction Pointer
 646+ 66B4 E9                               jp      (hl)                // one of the following labels
 647+ 66B5              C_Emit_Not_Found:
 648+ 66B5 C1                           pop     bc                  // restore Instruction Pointer
 649+ 66B6 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 650+ 66B8 30 02                        jr      nc, C_Emit_Printable
 651+ 66BA 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 652+ 66BC              C_Emit_Printable:
 653+ 66BC 6F                           ld      l, a
 654+ 66BD 26 00                        ld      h, 0
 655+ 66BF
 656+ 66BF                              psh1
 656+ 66BF E5          >                push    hl
 656+ 66C0 DD E9       >                jp      (ix)
 657+ 66C2
 658+ 66C2              C_Emit_Bel:
 659+ 66C2 C5                           push    bc                  // save Instruction Pointer
 660+ 66C3 11 00 01                     ld      de, $0100
 661+ 66C6 21 00 02                     ld      hl, $0200
 662+ 66C9 DD E5                        push    ix                  // save Next Pointer
 663+ 66CB CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 664+ 66CE DD E1                        pop     ix                  // restore Next Pointer
 665+ 66D0 C1                           pop     bc                  // restore Instruction Pointer
 666+ 66D1 21 00 00                     ld      hl, NUL_CHAR
 667+ 66D4
 668+ 66D4                              psh1
 668+ 66D4 E5          >                push    hl
 668+ 66D5 DD E9       >                jp      (ix)
 669+ 66D7
 670+ 66D7 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 671+ 66DA
 672+ 66DA                              psh1
 672+ 66DA E5          >                push    hl
 672+ 66DB DD E9       >                jp      (ix)
 673+ 66DD
 674+ 66DD 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 675+ 66E0
 676+ 66E0                              psh1
 676+ 66E0 E5          >                push    hl
 676+ 66E1 DD E9       >                jp      (ix)
 677+ 66E3
 678+ 66E3              //  ______________________________________________________________________
 679+ 66E3
 680+ 66E3              Key_Table:
 681+ 66E3 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 682+ 66E4 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 683+ 66E5 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 684+ 66E6 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 685+ 66E7 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 686+ 66E8 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 687+ 66E9 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 688+ 66EA AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 689+ 66EB C7                           db      $C7                 //  8: <=
 690+ 66EC C8                           db      $C8                 //  9: >=
 691+ 66ED C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 692+ 66EE              Key_MapTo:
 693+ 66EE 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 694+ 66EF 20                           db      $20                 //  9: not used
 695+ 66F0 20                           db      $20                 //  8: not used
 696+ 66F1 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 697+ 66F2 5D                           db      $5D                 //  6: SYMBOL+U : ]
 698+ 66F3 5B                           db      $5B                 //  5: SYMBOL+Y : [
 699+ 66F4 7D                           db      $7D                 //  4: SYMBOL+G : }
 700+ 66F5 7B                           db      $7B                 //  3: SYMBOL+F : {
 701+ 66F6 5C                           db      $5C                 //  2: SYMBOl+D : //
 702+ 66F7 7C                           db      $7C                 //  1: SYMBOL+S : |
 703+ 66F8 7E                           db      $7E                 //  0: SYMBOL+A : ~
 704+ 66F9
 705+ 66F9              //  ______________________________________________________________________
 706+ 66F9              //
 707+ 66F9              // key          -- c
 708+ 66F9              // wait for a keypress
 709+ 66F9              // This definition need Standard ROM Interrupt to be served
 710+ 66F9
 711+ 66F9                              New_Def KEY, "KEY", is_code, is_normal
 711+ 66F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 711+ 66F9             >
 711+ 66F9             >                // dummy db directives used to calculate length of namec
 711+ 66F9 4B 45 59    >                db      "KEY"
 711+ 66FC             >len_NFA         defl    $ - temp_NFA
 711+ 66FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 711+ 66F9             >
 711+ 66F9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 711+ 66FA 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 711+ 66FD             >                org     $-1                 // alter last byte of Name just above to set
 711+ 66FC D9          >                db      {b $} | END_BIT     // msb as name end
 711+ 66FD             >
 711+ 66FD 8F 66       >                dw      last_NFA            // Link to previous definition Name
 711+ 66FF             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 711+ 66FF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 711+ 66FF             >                else
 711+ 66FF 01 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 711+ 6701             >                endif           ; ok        // for other definitions it "points" the correct handler
 711+ 6701             >                // Use of "; ok" to suppress "warning[fwdref]"
 711+ 6701             >
 711+ 6701             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 712+ 6701
 713+ 6701 C5                           push    bc                  // save Instruction Pointer
 714+ 6702 DD E5                        push    ix
 715+ 6704
 716+ 6704 ED 73 2C 64                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 717+ 6708 31 FE 63                     ld      sp, Cold_origin - 2 // maybe $4000 in the future...
 718+ 670B FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 719+ 670F
 720+ 670F              Key_Wait:
 721+ 670F 76                               halt
 722+ 6710 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 723+ 6712 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 724+ 6715
 725+ 6715                                  // software-flash: flips face every 320 ms
 726+ 6715 3E 20                            ld      a, $20              // Timing based
 727+ 6717 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 728+ 671A
 729+ 671A 3A 26 64                         ld      a, (Block_Face)     // see origin.asm
 730+ 671D 20 0C                            jr      nz, Key_Cursor
 731+ 671F 3A 27 64                             ld      a, (Half_Face)      // see origin.asm
 732+ 6722 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 733+ 6726 28 03                                jr      z, Key_Cursor
 734+ 6728 3A 28 64                                 ld      a, (Underscore_Face) // see origin
 735+ 672B              Key_Cursor:
 736+ 672B D7                               rst     $10
 737+ 672C 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 738+ 672E D7                               rst     $10
 739+ 672F
 740+ 672F FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 741+ 6733 28 DA                        jr      z, Key_Wait
 742+ 6735
 743+ 6735 76                           halt    // this is to sync flashing cursor.
 744+ 6736
 745+ 6736 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 746+ 6738 D7                           rst     $10
 747+ 6739 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 748+ 673B D7                           rst     $10
 749+ 673C 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 750+ 673F
 751+ 673F                              // decode character from above table
 752+ 673F 21 E3 66                     ld      hl, Key_Table
 753+ 6742 01 0B 00                     ld      bc, $000B
 754+ 6745 ED B1                        cpir
 755+ 6747 20 05                        jr      nz, Key_DontMap
 756+ 6749 21 EE 66                         ld      hl, Key_MapTo
 757+ 674C 09                               add     hl, bc
 758+ 674D 7E                               ld      a, (hl)
 759+ 674E FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 760+ 6750 20 09                        jr      nz, Key_NoCapsLock
 761+ 6752 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 762+ 6755 7E                               ld      a, (hl)
 763+ 6756 EE 08                            xor     $08
 764+ 6758 77                               ld      (hl), a
 765+ 6759 3E 00                            ld      a, NUL_CHAR
 766+ 675B 6F           Key_NoCapsLock: ld      l, a
 767+ 675C 26 00                        ld      h, 0                // Prepare TOS
 768+ 675E
 769+ 675E 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 770+ 6761 1F                           rra
 771+ 6762 1F                           rra
 772+ 6763 1F                           rra
 773+ 6764 F6 18                        or      $18                 // quick'n'dirty click
 774+ 6766 D3 FE                        out     ($fe), a
 775+ 6768 06 00                        ld      b, 0
 776+ 676A 10 FE                        djnz    $                   // wait loop
 777+ 676C EE 18                        xor     $18
 778+ 676E D3 FE                        out     ($fe), a
 779+ 6770
 780+ 6770 ED 7B 2C 64                  ld      sp, (SP_Saved)
 781+ 6774
 782+ 6774 DD E1                        pop     ix
 783+ 6776 C1                           pop     bc                  // Restore Instruction Pointer
 784+ 6777
 785+ 6777                              psh1
 785+ 6777 E5          >                push    hl
 785+ 6778 DD E9       >                jp      (ix)
 786+ 677A
 787+ 677A              //  ______________________________________________________________________
 788+ 677A              //
 789+ 677A              // ?terminal    -- FALSE | TRUE
 790+ 677A              // test for BREAK keypress
 791+ 677A                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 791+ 677A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 791+ 677A             >
 791+ 677A             >                // dummy db directives used to calculate length of namec
 791+ 677A 3F 54 45 52 >                db      "?TERMINAL"
 791+ 677E 4D 49 4E 41 >
 791+ 6782 4C          >
 791+ 6783             >len_NFA         defl    $ - temp_NFA
 791+ 6783             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 791+ 677A             >
 791+ 677A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 791+ 677B 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 791+ 677F 4D 49 4E 41 >
 791+ 6783 4C          >
 791+ 6784             >                org     $-1                 // alter last byte of Name just above to set
 791+ 6783 CC          >                db      {b $} | END_BIT     // msb as name end
 791+ 6784             >
 791+ 6784 F9 66       >                dw      last_NFA            // Link to previous definition Name
 791+ 6786             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 791+ 6786 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 791+ 6786             >                else
 791+ 6786 88 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 791+ 6788             >                endif           ; ok        // for other definitions it "points" the correct handler
 791+ 6788             >                // Use of "; ok" to suppress "warning[fwdref]"
 791+ 6788             >
 791+ 6788             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 792+ 6788 21 00 00                     ld      hl, 0
 793+ 678B ED 73 2C 64                  ld      (SP_Saved), sp
 794+ 678F 31 FE 63                     ld      sp, Cold_origin - 2
 795+ 6792 CD 54 1F                     call    $1F54
 796+ 6795 ED 7B 2C 64                  ld      sp, (SP_Saved)
 797+ 6799
 798+ 6799 38 01                        jr      c, QTerminal_NoBreak
 799+ 679B 2C                               inc     l                  // quick TRUE_FLAG
 800+ 679C              QTerminal_NoBreak:
 801+ 679C
 802+ 679C                              psh1
 802+ 679C E5          >                push    hl
 802+ 679D DD E9       >                jp      (ix)
 803+ 679F
 804+ 679F
 805+ 679F              //  ______________________________________________________________________
 806+ 679F              //
 807+ 679F              // ZX Spectrum Next - Low Level disk primitives.
 808+ 679F              // this include is "here" for backward compatibility
 809+ 679F
 810+ 679F                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
   1++679F              //  ______________________________________________________________________
   2++679F              //
   3++679F              //  next-opt.asm
   4++679F              //
   5++679F              //  ZX Spectrum Next - peculiar definitions
   6++679F              //  ______________________________________________________________________
   7++679F
   8++679F              //  ______________________________________________________________________
   9++679F              //
  10++679F              // f_seek       d u -- f
  11++679F              // Seek to position d in file-handle u.
  12++679F              // Return a false-flag 0 on success, True flag on error
  13++679F                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++679F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++679F             >
  13++679F             >                // dummy db directives used to calculate length of namec
  13++679F 46 5F 53 45 >                db      "F_SEEK"
  13++67A3 45 4B       >
  13++67A5             >len_NFA         defl    $ - temp_NFA
  13++67A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++679F             >
  13++679F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++67A0 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++67A4 45 4B       >
  13++67A6             >                org     $-1                 // alter last byte of Name just above to set
  13++67A5 CB          >                db      {b $} | END_BIT     // msb as name end
  13++67A6             >
  13++67A6 7A 67       >                dw      last_NFA            // Link to previous definition Name
  13++67A8             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++67A8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13++67A8             >                else
  13++67A8 AA 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  13++67AA             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++67AA             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++67AA             >
  13++67AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++67AA E1                           pop     hl                  // file-handle
  15++67AB 7D                           ld      a, l                // file-handle
  16++67AC 60                           ld      h, b                // save Intruction Pointer
  17++67AD 69                           ld      l, c
  18++67AE C1                           pop     bc                  // bc has high-word of d
  19++67AF D1                           pop     de
  20++67B0 DD E5                        push    ix
  21++67B2 E5                           push    hl                  // save Instruction Pointer
  22++67B3 DD 21 00 00                  ld      ix, 0
  23++67B7 CF                           rst     $08
  24++67B8 9F                           db      $9F
  25++67B9 C1                           pop     bc                  // restore Instruction Pointer
  26++67BA DD E1                        pop     ix
  27++67BC ED 62                        sbc     hl, hl              // to get 0 or -1
  28++67BE
  29++67BE                              psh1
  29++67BE E5          >                push    hl
  29++67BF DD E9       >                jp      (ix)
  30++67C1
  31++67C1              //  ______________________________________________________________________
  32++67C1              //
  33++67C1              // f_fgetpos    u -- d f
  34++67C1              // Seek to position d in file-handle u.
  35++67C1              // Return a false-flag 0 on success, True flag on error
  36++67C1                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  36++67C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  36++67C1             >
  36++67C1             >                // dummy db directives used to calculate length of namec
  36++67C1 46 5F 46 47 >                db      "F_FGETPOS"
  36++67C5 45 54 50 4F >
  36++67C9 53          >
  36++67CA             >len_NFA         defl    $ - temp_NFA
  36++67CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  36++67C1             >
  36++67C1 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  36++67C2 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  36++67C6 45 54 50 4F >
  36++67CA 53          >
  36++67CB             >                org     $-1                 // alter last byte of Name just above to set
  36++67CA D3          >                db      {b $} | END_BIT     // msb as name end
  36++67CB             >
  36++67CB 9F 67       >                dw      last_NFA            // Link to previous definition Name
  36++67CD             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  36++67CD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  36++67CD             >                else
  36++67CD CF 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  36++67CF             >                endif           ; ok        // for other definitions it "points" the correct handler
  36++67CF             >                // Use of "; ok" to suppress "warning[fwdref]"
  36++67CF             >
  36++67CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  37++67CF E1                           pop     hl
  38++67D0 7D                           ld      a, l                // file-handle
  39++67D1 DD E5                        push    ix
  40++67D3 C5                           push    bc
  41++67D4 CF                           rst     $08
  42++67D5 A0                           db      $A0
  43++67D6 E1                           pop     hl                  // restore Instruction Pointer
  44++67D7 DD E1                        pop     ix
  45++67D9 D5                           push    de
  46++67DA C5                           push    bc
  47++67DB 44                           ld      b, h                // restore Instruction Pointer
  48++67DC 4D                           ld      c, l
  49++67DD ED 62                        sbc     hl, hl
  50++67DF
  51++67DF                              psh1
  51++67DF E5          >                push    hl
  51++67E0 DD E9       >                jp      (ix)
  52++67E2
  53++67E2              //  ______________________________________________________________________
  54++67E2              //
  55++67E2              // f_read       a b u -- n f
  56++67E2              // Read b bytes from file-handle u to address a
  57++67E2              // Return the actual number n of bytes read
  58++67E2              // Return 0 on success, True flag on error
  59++67E2                              New_Def F_READ, "F_READ", is_code, is_normal
  59++67E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59++67E2             >
  59++67E2             >                // dummy db directives used to calculate length of namec
  59++67E2 46 5F 52 45 >                db      "F_READ"
  59++67E6 41 44       >
  59++67E8             >len_NFA         defl    $ - temp_NFA
  59++67E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59++67E2             >
  59++67E2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59++67E3 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  59++67E7 41 44       >
  59++67E9             >                org     $-1                 // alter last byte of Name just above to set
  59++67E8 C4          >                db      {b $} | END_BIT     // msb as name end
  59++67E9             >
  59++67E9 C1 67       >                dw      last_NFA            // Link to previous definition Name
  59++67EB             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  59++67EB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  59++67EB             >                else
  59++67EB ED 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  59++67ED             >                endif           ; ok        // for other definitions it "points" the correct handler
  59++67ED             >                // Use of "; ok" to suppress "warning[fwdref]"
  59++67ED             >
  59++67ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60++67ED
  61++67ED 50                           ld      d, b
  62++67EE 59                           ld      e, c
  63++67EF E1                           pop     hl
  64++67F0 7D                           ld      a, l                // file-handle
  65++67F1 C1                           pop     bc                  // bc has bytes to read
  66++67F2 DD E3                        ex      (sp), ix            // ix has address
  67++67F4 D5                           push    de                  // Save Instruction pointer
  68++67F5 CF                           rst     $08
  69++67F6 9D                           db      $9D
  70++67F7 C1                           pop     bc                  // Restore Instruction pointer
  71++67F8 DD E1                        pop     ix                  // Restore ix
  72++67FA D5                           push    de                  // bytes written
  73++67FB ED 62                        sbc     hl, hl
  74++67FD
  75++67FD                              psh1
  75++67FD E5          >                push    hl
  75++67FE DD E9       >                jp      (ix)
  76++6800
  77++6800              //  ______________________________________________________________________
  78++6800              //
  79++6800              // f_write      a b u -- n f
  80++6800              // Write bytes currently stored at address a to file-handle u.
  81++6800              // Return the actual n bytes written and 0 on success, True flag on error.
  82++6800                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
  82++6800             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82++6800             >
  82++6800             >                // dummy db directives used to calculate length of namec
  82++6800 46 5F 57 52 >                db      "F_WRITE"
  82++6804 49 54 45    >
  82++6807             >len_NFA         defl    $ - temp_NFA
  82++6807             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82++6800             >
  82++6800 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82++6801 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
  82++6805 49 54 45    >
  82++6808             >                org     $-1                 // alter last byte of Name just above to set
  82++6807 C5          >                db      {b $} | END_BIT     // msb as name end
  82++6808             >
  82++6808 E2 67       >                dw      last_NFA            // Link to previous definition Name
  82++680A             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  82++680A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  82++680A             >                else
  82++680A 0C 68       >                dw      $ + 2   ; ok        // is pointed by CFA
  82++680C             >                endif           ; ok        // for other definitions it "points" the correct handler
  82++680C             >                // Use of "; ok" to suppress "warning[fwdref]"
  82++680C             >
  82++680C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83++680C
  84++680C 50                           ld      d, b
  85++680D 59                           ld      e, c
  86++680E E1                           pop     hl
  87++680F 7D                           ld      a, l                // file-handle
  88++6810 C1                           pop     bc                  // bc has bytes to read
  89++6811 DD E3                        ex      (sp), ix            // ix has address
  90++6813 D5                           push    de                  // Save Instruction pointer
  91++6814 CF                           rst     $08
  92++6815 9E                           db      $9E
  93++6816 C1                           pop     bc                  // Restore Instruction pointer
  94++6817 DD E1                        pop     ix                  // Restore ix
  95++6819 D5                           push    de                  // bytes written
  96++681A ED 62                        sbc     hl, hl
  97++681C
  98++681C                              psh1
  98++681C E5          >                push    hl
  98++681D DD E9       >                jp      (ix)
  99++681F
 100++681F              //  ______________________________________________________________________
 101++681F              //
 102++681F              // f_close      u -- f
 103++681F              // Close file-handle u.
 104++681F              // Return 0 on success, True flag on error
 105++681F
 106++681F                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
 106++681F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 106++681F             >
 106++681F             >                // dummy db directives used to calculate length of namec
 106++681F 46 5F 43 4C >                db      "F_CLOSE"
 106++6823 4F 53 45    >
 106++6826             >len_NFA         defl    $ - temp_NFA
 106++6826             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 106++681F             >
 106++681F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 106++6820 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
 106++6824 4F 53 45    >
 106++6827             >                org     $-1                 // alter last byte of Name just above to set
 106++6826 C5          >                db      {b $} | END_BIT     // msb as name end
 106++6827             >
 106++6827 00 68       >                dw      last_NFA            // Link to previous definition Name
 106++6829             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 106++6829 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 106++6829             >                else
 106++6829 2B 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 106++682B             >                endif           ; ok        // for other definitions it "points" the correct handler
 106++682B             >                // Use of "; ok" to suppress "warning[fwdref]"
 106++682B             >
 106++682B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 107++682B
 108++682B E1                           pop     hl
 109++682C 7D                           ld      a, l                // file-handle
 110++682D DD E5                        push    ix
 111++682F C5                           push    bc                  // Save Instruction pointer
 112++6830 CF                           rst     $08
 113++6831 9B                           db      $9B
 114++6832 C1                           pop     bc
 115++6833 DD E1                        pop     ix
 116++6835 ED 62                        sbc     hl, hl
 117++6837
 118++6837                              psh1
 118++6837 E5          >                push    hl
 118++6838 DD E9       >                jp      (ix)
 119++683A
 120++683A              //  ______________________________________________________________________
 121++683A              //
 122++683A              // f_open       a1 a2 b -- u f
 123++683A              // open a file
 124++683A              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 125++683A              // a2 is address to an 8-byte header data used in some cases.
 126++683A              // b is access mode-byte, that is a combination of:
 127++683A              // any/all of:
 128++683A              //   esx_mode_read          $01 request read access
 129++683A              //   esx_mode_write         $02 request write access
 130++683A              //   esx_mode_use_header    $40 read/write +3DOS header
 131++683A              // plus one of:
 132++683A              //   esx_mode_open_exist    $00 only open existing file
 133++683A              //   esx_mode_open_creat    $08 open existing or create file
 134++683A              //   esx_mode_creat_noexist $04 create new file, error if exists
 135++683A              //   esx_mode_creat_trunc   $0c create new file, delete existing
 136++683A              // Return file-handle u and 0 on success, True flag on error
 137++683A                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 137++683A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137++683A             >
 137++683A             >                // dummy db directives used to calculate length of namec
 137++683A 46 5F 4F 50 >                db      "F_OPEN"
 137++683E 45 4E       >
 137++6840             >len_NFA         defl    $ - temp_NFA
 137++6840             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137++683A             >
 137++683A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137++683B 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 137++683F 45 4E       >
 137++6841             >                org     $-1                 // alter last byte of Name just above to set
 137++6840 CE          >                db      {b $} | END_BIT     // msb as name end
 137++6841             >
 137++6841 1F 68       >                dw      last_NFA            // Link to previous definition Name
 137++6843             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137++6843 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 137++6843             >                else
 137++6843 45 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 137++6845             >                endif           ; ok        // for other definitions it "points" the correct handler
 137++6845             >                // Use of "; ok" to suppress "warning[fwdref]"
 137++6845             >
 137++6845             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138++6845 60                           ld      h, b                // Save Instruction pointer
 139++6846 69                           ld      l, c
 140++6847 C1                           pop     bc                  // file-mode
 141++6848 41                           ld      b, c                // file-mode
 142++6849 D1                           pop     de                  // 8-bytes buffer if any
 143++684A DD E3                        ex      (sp), ix            // filespec nul-terminated
 144++684C E5                           push    hl                  // Save Instruction pointer
 145++684D 3E 2A                        ld      a, "*"
 146++684F CF                           rst     $08
 147++6850 9A                           db      $9A
 148++6851 C1                           pop     bc
 149++6852 DD E1                        pop     ix
 150++6854 ED 62                        sbc     hl, hl
 151++6856 5F                           ld      e, a
 152++6857 16 00                        ld      d, 0
 153++6859
 154++6859
 155++6859                              psh2
 155++6859 D5          >                push    de
 155++685A E5          >                push    hl
 155++685B DD E9       >                jp      (ix)
 156++685D
 157++685D              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 158++685D              //   \ FILENAME 1+ PAD 1 F_OPEN
 159++685D              //   \ DROP
 160++685D              //   \ F_CLOSE
 161++685D
 162++685D              //  ______________________________________________________________________
 163++685D              //
 164++685D              // f_sync      u -- f
 165++685D              // Close file-handle u.
 166++685D              // Return 0 on success, True flag on error
 167++685D
 168++685D                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
 168++685D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168++685D             >
 168++685D             >                // dummy db directives used to calculate length of namec
 168++685D 46 5F 53 59 >                db      "F_SYNC"
 168++6861 4E 43       >
 168++6863             >len_NFA         defl    $ - temp_NFA
 168++6863             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168++685D             >
 168++685D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168++685E 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
 168++6862 4E 43       >
 168++6864             >                org     $-1                 // alter last byte of Name just above to set
 168++6863 C3          >                db      {b $} | END_BIT     // msb as name end
 168++6864             >
 168++6864 3A 68       >                dw      last_NFA            // Link to previous definition Name
 168++6866             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 168++6866 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 168++6866             >                else
 168++6866 68 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 168++6868             >                endif           ; ok        // for other definitions it "points" the correct handler
 168++6868             >                // Use of "; ok" to suppress "warning[fwdref]"
 168++6868             >
 168++6868             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169++6868 E1                           pop     hl
 170++6869 7D                           ld      a, l                // file-handle
 171++686A DD E5                        push    ix
 172++686C C5                           push    bc
 173++686D CF                           rst     $08
 174++686E 9C                           db      $9C
 175++686F C1                           pop     bc
 176++6870 DD E1                        pop     ix
 177++6872 ED 62                        sbc     hl, hl
 178++6874
 179++6874                              psh1
 179++6874 E5          >                push    hl
 179++6875 DD E9       >                jp      (ix)
 180++6877
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
 811+ 6877
 812+ 6877
 813+ 6877              //  ______________________________________________________________________
 814+ 6877              //
 815+ 6877              // cr           --
 816+ 6877              // send a CR via EMITC
 817+ 6877                              New_Def CR, "CR", is_code, is_normal
 817+ 6877             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 817+ 6877             >
 817+ 6877             >                // dummy db directives used to calculate length of namec
 817+ 6877 43 52       >                db      "CR"
 817+ 6879             >len_NFA         defl    $ - temp_NFA
 817+ 6879             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 817+ 6877             >
 817+ 6877 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 817+ 6878 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 817+ 687A             >                org     $-1                 // alter last byte of Name just above to set
 817+ 6879 D2          >                db      {b $} | END_BIT     // msb as name end
 817+ 687A             >
 817+ 687A 5D 68       >                dw      last_NFA            // Link to previous definition Name
 817+ 687C             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 817+ 687C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 817+ 687C             >                else
 817+ 687C 7E 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 817+ 687E             >                endif           ; ok        // for other definitions it "points" the correct handler
 817+ 687E             >                // Use of "; ok" to suppress "warning[fwdref]"
 817+ 687E             >
 817+ 687E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 818+ 687E
 819+ 687E 3E 0D                        ld      a, CR_CHAR
 820+ 6880 C3 69 66                     jp      Emitc_Ptr
 821+ 6883
 822+ 6883              //  ______________________________________________________________________
 823+ 6883              //
 824+ 6883              // cmove    a1 a2 u --
 825+ 6883              // If u > 0, moves memory content starting at address a1 for n bytes long
 826+ 6883              // storing then starting at address addr2.
 827+ 6883              // The content of a1 is moved first. See CMOVE> also.
 828+ 6883                              New_Def CMOVE, "CMOVE", is_code, is_normal
 828+ 6883             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 828+ 6883             >
 828+ 6883             >                // dummy db directives used to calculate length of namec
 828+ 6883 43 4D 4F 56 >                db      "CMOVE"
 828+ 6887 45          >
 828+ 6888             >len_NFA         defl    $ - temp_NFA
 828+ 6888             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 828+ 6883             >
 828+ 6883 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 828+ 6884 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 828+ 6888 45          >
 828+ 6889             >                org     $-1                 // alter last byte of Name just above to set
 828+ 6888 C5          >                db      {b $} | END_BIT     // msb as name end
 828+ 6889             >
 828+ 6889 77 68       >                dw      last_NFA            // Link to previous definition Name
 828+ 688B             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 828+ 688B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 828+ 688B             >                else
 828+ 688B 8D 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 828+ 688D             >                endif           ; ok        // for other definitions it "points" the correct handler
 828+ 688D             >                // Use of "; ok" to suppress "warning[fwdref]"
 828+ 688D             >
 828+ 688D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 829+ 688D 60                           ld      h, b
 830+ 688E 69                           ld      l, c
 831+ 688F
 832+ 688F C1                           pop     bc                  // bc has counter
 833+ 6890 D1                           pop     de                  // de now has dest
 834+ 6891 E3                           ex      (sp), hl            // hl has source, save Instruction Pointer
 835+ 6892 78                           ld      a, b
 836+ 6893 B1                           or      c
 837+ 6894 28 02                        jr      z, Cmove_NoMove
 838+ 6896 ED B0                            ldir
 839+ 6898              Cmove_NoMove:
 840+ 6898 C1                           pop     bc                  // Restore Instruction Pointer
 841+ 6899
 842+ 6899                              next
 842+ 6899 DD E9       >                jp      (ix)
 843+ 689B
 844+ 689B              //  ______________________________________________________________________
 845+ 689B              //
 846+ 689B              // cmove>    a1 a2 u --
 847+ 689B              // If u > 0, moves memory content starting at address a1 for n bytes long
 848+ 689B              // storing then starting at address addr2.
 849+ 689B              // The content of a1 is moved last. See cmove.
 850+ 689B                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 850+ 689B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 850+ 689B             >
 850+ 689B             >                // dummy db directives used to calculate length of namec
 850+ 689B 43 4D 4F 56 >                db      "CMOVE>"
 850+ 689F 45 3E       >
 850+ 68A1             >len_NFA         defl    $ - temp_NFA
 850+ 68A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 850+ 689B             >
 850+ 689B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 850+ 689C 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 850+ 68A0 45 3E       >
 850+ 68A2             >                org     $-1                 // alter last byte of Name just above to set
 850+ 68A1 BE          >                db      {b $} | END_BIT     // msb as name end
 850+ 68A2             >
 850+ 68A2 83 68       >                dw      last_NFA            // Link to previous definition Name
 850+ 68A4             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 850+ 68A4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 850+ 68A4             >                else
 850+ 68A4 A6 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 850+ 68A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 850+ 68A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 850+ 68A6             >
 850+ 68A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 851+ 68A6 60                           ld      h, b
 852+ 68A7 69                           ld      l, c
 853+ 68A8
 854+ 68A8 C1                           pop     bc                  // bc has counter
 855+ 68A9 D1                           pop     de                  // de has dest
 856+ 68AA E3                           ex      (sp), hl            // hl has source, save Instruction Pointer
 857+ 68AB 78                           ld      a, b
 858+ 68AC B1                           or      c
 859+ 68AD 28 08                        jr      z, CmoveV_NoMove
 860+ 68AF EB                               ex      de, hl              // compute address to
 861+ 68B0 09                               add     hl, bc              // operate backward
 862+ 68B1 2B                               dec     hl
 863+ 68B2 EB                               ex      de, hl
 864+ 68B3 09                               add     hl, bc
 865+ 68B4 2B                               dec     hl
 866+ 68B5 ED B8                            lddr                        // backward
 867+ 68B7              CmoveV_NoMove:
 868+ 68B7 C1                           pop     bc                  // Restore Instruction Pointer
 869+ 68B8
 870+ 68B8                              next
 870+ 68B8 DD E9       >                jp      (ix)
 871+ 68BA
 872+ 68BA              //  ______________________________________________________________________
 873+ 68BA              //
 874+ 68BA              // um*      u1 u2 -- ud
 875+ 68BA              // Unsigned multiplication
 876+ 68BA              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 877+ 68BA              // On the stack a double number is treated as two single numbers
 878+ 68BA              // where DE is on the top of the stack and HL is the second from top,
 879+ 68BA              // Instead, in 2VARIABLE a double number is stored as EDLH.
 880+ 68BA              // this definition could use "MUL" Z80N new op-code.
 881+ 68BA                              New_Def UM_MUL, "UM*", is_code, is_normal
 881+ 68BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 881+ 68BA             >
 881+ 68BA             >                // dummy db directives used to calculate length of namec
 881+ 68BA 55 4D 2A    >                db      "UM*"
 881+ 68BD             >len_NFA         defl    $ - temp_NFA
 881+ 68BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 881+ 68BA             >
 881+ 68BA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 881+ 68BB 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 881+ 68BE             >                org     $-1                 // alter last byte of Name just above to set
 881+ 68BD AA          >                db      {b $} | END_BIT     // msb as name end
 881+ 68BE             >
 881+ 68BE 9B 68       >                dw      last_NFA            // Link to previous definition Name
 881+ 68C0             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 881+ 68C0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 881+ 68C0             >                else
 881+ 68C0 C2 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 881+ 68C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 881+ 68C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 881+ 68C2             >
 881+ 68C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 882+ 68C2 D1                           pop     de                    // de has u2 operand
 883+ 68C3 E1                           pop     hl                    // hl has u1 operand
 884+ 68C4 C5                           push    bc                    // Save Instruction Pointer
 885+ 68C5 44                           ld      b, h
 886+ 68C6 4D                           ld      c, l
 887+ 68C7 21 00 00                     ld      hl, 0
 888+ 68CA 3E 10                        ld      a, 16                   // 16 steps
 889+ 68CC              Um_Mul_Loop:
 890+ 68CC 29                               add     hl, hl                  // shift DEHL
 891+ 68CD CB 13                            rl      e                       // consuming one bit at a time
 892+ 68CF CB 12                            rl      d
 893+ 68D1 30 04                            jr      nc, Um_Mul_NoCarry      // if msb of DEHL was set then
 894+ 68D3 09                                   add     hl, bc                  // add bc to hl and carry to de
 895+ 68D4 30 01                                jr      nc, Um_Mul_NoCarry      // this carry doesn't happen before de (u1) is consumed
 896+ 68D6 13                                       inc     de                      // transfer the carry to de
 897+ 68D7              Um_Mul_NoCarry:
 898+ 68D7 3D                               dec     a
 899+ 68D8 20 F2                        jr      nz, Um_Mul_Loop
 900+ 68DA EB                           ex      de, hl
 901+ 68DB C1                           pop     bc
 902+ 68DC
 903+ 68DC
 904+ 68DC                              psh2
 904+ 68DC D5          >                push    de
 904+ 68DD E5          >                push    hl
 904+ 68DE DD E9       >                jp      (ix)
 905+ 68E0
 906+ 68E0              //  ______________________________________________________________________
 907+ 68E0              //
 908+ 68E0              // um/mod      ud u1 -- q r
 909+ 68E0              // divides ud into u1 giving quotient q and remainder r
 910+ 68E0              // algorithm takes 16 bit at a time starting from msb
 911+ 68E0              // DE grows from lsb upward with quotient result
 912+ 68E0              // HL keeps the remainder at each stage of division
 913+ 68E0              // each loop 'lowers' the next binary digit to form the current dividend
 914+ 68E0                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
 914+ 68E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 914+ 68E0             >
 914+ 68E0             >                // dummy db directives used to calculate length of namec
 914+ 68E0 55 4D 2F 4D >                db      "UM/MOD"
 914+ 68E4 4F 44       >
 914+ 68E6             >len_NFA         defl    $ - temp_NFA
 914+ 68E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 914+ 68E0             >
 914+ 68E0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 914+ 68E1 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
 914+ 68E5 4F 44       >
 914+ 68E7             >                org     $-1                 // alter last byte of Name just above to set
 914+ 68E6 C4          >                db      {b $} | END_BIT     // msb as name end
 914+ 68E7             >
 914+ 68E7 BA 68       >                dw      last_NFA            // Link to previous definition Name
 914+ 68E9             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 914+ 68E9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 914+ 68E9             >                else
 914+ 68E9 EB 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 914+ 68EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 914+ 68EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 914+ 68EB             >
 914+ 68EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 915+ 68EB 60                           ld      h, b
 916+ 68EC 69                           ld      l, c                    // Save Instruction Pointer
 917+ 68ED
 918+ 68ED C1                           pop     bc                      // divisor
 919+ 68EE
 920+ 68EE D1                           pop     de                      // < high part
 921+ 68EF E3                           ex      (sp), hl                // < low part and > save bc
 922+ 68F0 EB                           ex      de, hl                  //
 923+ 68F1 7D                           ld      a, l                    // check without changing arguments
 924+ 68F2 91                           sub     c                       // if divisor is greater than high part
 925+ 68F3 7C                           ld      a, h                    // so quotient will be in range
 926+ 68F4 98                           sbc     a, b
 927+ 68F5 30 23                        jr      nc, Um_DivMod_OutOfRange
 928+ 68F7 3E 10                            ld      a, 16
 929+ 68F9              Um_DivMod_Loop:
 930+ 68F9 A7                                   and     a
 931+ 68FA CB 13                                rl      e
 932+ 68FC CB 12                                rl      d
 933+ 68FE CB 15                                rl      l
 934+ 6900 CB 14                                rl      h
 935+ 6902 30 05                                jr      nc, Um_DivMod_Carry
 936+ 6904 A7                                       and     a
 937+ 6905 ED 42                                    sbc     hl, bc
 938+ 6907 18 07                                jr      Um_DivMod_Endif    // else
 939+ 6909              Um_DivMod_Carry:
 940+ 6909 A7                                       and     a
 941+ 690A ED 42                                    sbc     hl, bc
 942+ 690C 30 02                                    jr      nc, Um_DivMod_Endif
 943+ 690E 09                                           add     hl, bc
 944+ 690F 1B                                           dec     de
 945+ 6910              Um_DivMod_Endif:                                   // endif
 946+ 6910 13                                   inc     de
 947+ 6911 3D                                   dec     a
 948+ 6912 20 E5                            jr      nz, Um_DivMod_Loop
 949+ 6914 EB                               ex      de, hl
 950+ 6915              Um_DivMod_Bailout:
 951+ 6915 C1                               pop     bc                  // restore Instruction Pointer
 952+ 6916 D5                               push    de                  // de := remanider
 953+ 6917 E5                               push    hl                  // hl := quotient
 954+ 6918                                  next
 954+ 6918 DD E9       >                jp      (ix)
 955+ 691A
 956+ 691A              Um_DivMod_OutOfRange:
 957+ 691A 21 FF FF                     ld      hl, -1
 958+ 691D 54                           ld      d, h
 959+ 691E 5D                           ld      e, l
 960+ 691F 18 F4                        jr      Um_DivMod_Bailout
 961+ 6921
 962+ 6921              //  ______________________________________________________________________
 963+ 6921              //
 964+ 6921              // and          n1 n2 -- n3
 965+ 6921              // bit logical AND. Returns n3 as n1 & n2
 966+ 6921                              New_Def AND_OP, "AND", is_code, is_normal
 966+ 6921             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 966+ 6921             >
 966+ 6921             >                // dummy db directives used to calculate length of namec
 966+ 6921 41 4E 44    >                db      "AND"
 966+ 6924             >len_NFA         defl    $ - temp_NFA
 966+ 6924             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 966+ 6921             >
 966+ 6921 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 966+ 6922 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
 966+ 6925             >                org     $-1                 // alter last byte of Name just above to set
 966+ 6924 C4          >                db      {b $} | END_BIT     // msb as name end
 966+ 6925             >
 966+ 6925 E0 68       >                dw      last_NFA            // Link to previous definition Name
 966+ 6927             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 966+ 6927 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 966+ 6927             >                else
 966+ 6927 29 69       >                dw      $ + 2   ; ok        // is pointed by CFA
 966+ 6929             >                endif           ; ok        // for other definitions it "points" the correct handler
 966+ 6929             >                // Use of "; ok" to suppress "warning[fwdref]"
 966+ 6929             >
 966+ 6929             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 967+ 6929 D1                           pop     de
 968+ 692A E1                           pop     hl
 969+ 692B 7B                           ld      a, e
 970+ 692C A5                           and     l
 971+ 692D 6F                           ld      l, a
 972+ 692E 7A                           ld      a, d
 973+ 692F A4                           and     h
 974+ 6930 67                           ld      h, a
 975+ 6931
 976+ 6931                              psh1
 976+ 6931 E5          >                push    hl
 976+ 6932 DD E9       >                jp      (ix)
 977+ 6934
 978+ 6934              //  ______________________________________________________________________
 979+ 6934              //
 980+ 6934              // or           n1 n2 -- n3
 981+ 6934              // bit logical OR. Returns n3 as n1 | n2
 982+ 6934                              New_Def OR_OP, "OR", is_code, is_normal
 982+ 6934             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 982+ 6934             >
 982+ 6934             >                // dummy db directives used to calculate length of namec
 982+ 6934 4F 52       >                db      "OR"
 982+ 6936             >len_NFA         defl    $ - temp_NFA
 982+ 6936             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 982+ 6934             >
 982+ 6934 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 982+ 6935 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
 982+ 6937             >                org     $-1                 // alter last byte of Name just above to set
 982+ 6936 D2          >                db      {b $} | END_BIT     // msb as name end
 982+ 6937             >
 982+ 6937 21 69       >                dw      last_NFA            // Link to previous definition Name
 982+ 6939             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 982+ 6939 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 982+ 6939             >                else
 982+ 6939 3B 69       >                dw      $ + 2   ; ok        // is pointed by CFA
 982+ 693B             >                endif           ; ok        // for other definitions it "points" the correct handler
 982+ 693B             >                // Use of "; ok" to suppress "warning[fwdref]"
 982+ 693B             >
 982+ 693B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 983+ 693B D1                           pop     de
 984+ 693C E1                           pop     hl
 985+ 693D 7B                           ld      a, e
 986+ 693E B5                           or      l
 987+ 693F 6F                           ld      l, a
 988+ 6940 7A                           ld      a, d
 989+ 6941 B4                           or      h
 990+ 6942 67                           ld      h, a
 991+ 6943
 992+ 6943                              psh1
 992+ 6943 E5          >                push    hl
 992+ 6944 DD E9       >                jp      (ix)
 993+ 6946
 994+ 6946              //  ______________________________________________________________________
 995+ 6946              //
 996+ 6946              // xor          n1 n2 -- n3
 997+ 6946              // bit logical OR. Returns n3 as n1 ^ n2
 998+ 6946                              New_Def XOR_OP, "XOR", is_code, is_normal
 998+ 6946             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 998+ 6946             >
 998+ 6946             >                // dummy db directives used to calculate length of namec
 998+ 6946 58 4F 52    >                db      "XOR"
 998+ 6949             >len_NFA         defl    $ - temp_NFA
 998+ 6949             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 998+ 6946             >
 998+ 6946 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 998+ 6947 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
 998+ 694A             >                org     $-1                 // alter last byte of Name just above to set
 998+ 6949 D2          >                db      {b $} | END_BIT     // msb as name end
 998+ 694A             >
 998+ 694A 34 69       >                dw      last_NFA            // Link to previous definition Name
 998+ 694C             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 998+ 694C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 998+ 694C             >                else
 998+ 694C 4E 69       >                dw      $ + 2   ; ok        // is pointed by CFA
 998+ 694E             >                endif           ; ok        // for other definitions it "points" the correct handler
 998+ 694E             >                // Use of "; ok" to suppress "warning[fwdref]"
 998+ 694E             >
 998+ 694E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 999+ 694E D1                           pop     de
1000+ 694F E1                           pop     hl
1001+ 6950 7B                           ld      a, e
1002+ 6951 AD                           xor     l
1003+ 6952 6F                           ld      l, a
1004+ 6953 7A                           ld      a, d
1005+ 6954 AC                           xor     h
1006+ 6955 67                           ld      h, a
1007+ 6956
1008+ 6956                              psh1
1008+ 6956 E5          >                push    hl
1008+ 6957 DD E9       >                jp      (ix)
1009+ 6959
1010+ 6959              //  ______________________________________________________________________
1011+ 6959              //
1012+ 6959              // sp@      -- a
1013+ 6959              // returns on top of stack the value of SP before execution
1014+ 6959                              New_Def SPFETCH, "SP@", is_code, is_normal
1014+ 6959             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1014+ 6959             >
1014+ 6959             >                // dummy db directives used to calculate length of namec
1014+ 6959 53 50 40    >                db      "SP@"
1014+ 695C             >len_NFA         defl    $ - temp_NFA
1014+ 695C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1014+ 6959             >
1014+ 6959 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1014+ 695A 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1014+ 695D             >                org     $-1                 // alter last byte of Name just above to set
1014+ 695C C0          >                db      {b $} | END_BIT     // msb as name end
1014+ 695D             >
1014+ 695D 46 69       >                dw      last_NFA            // Link to previous definition Name
1014+ 695F             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1014+ 695F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1014+ 695F             >                else
1014+ 695F 61 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1014+ 6961             >                endif           ; ok        // for other definitions it "points" the correct handler
1014+ 6961             >                // Use of "; ok" to suppress "warning[fwdref]"
1014+ 6961             >
1014+ 6961             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1015+ 6961
1016+ 6961 21 00 00                     ld      hl, 0
1017+ 6964 39                           add     hl, sp
1018+ 6965
1019+ 6965                              psh1
1019+ 6965 E5          >                push    hl
1019+ 6966 DD E9       >                jp      (ix)
1020+ 6968
1021+ 6968              //  ______________________________________________________________________
1022+ 6968              //
1023+ 6968              // sp!      a --
1024+ 6968              // restore SP to the initial value passed
1025+ 6968              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1026+ 6968                              New_Def SPSTORE, "SP!", is_code, is_normal
1026+ 6968             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1026+ 6968             >
1026+ 6968             >                // dummy db directives used to calculate length of namec
1026+ 6968 53 50 21    >                db      "SP!"
1026+ 696B             >len_NFA         defl    $ - temp_NFA
1026+ 696B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1026+ 6968             >
1026+ 6968 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1026+ 6969 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1026+ 696C             >                org     $-1                 // alter last byte of Name just above to set
1026+ 696B A1          >                db      {b $} | END_BIT     // msb as name end
1026+ 696C             >
1026+ 696C 59 69       >                dw      last_NFA            // Link to previous definition Name
1026+ 696E             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1026+ 696E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1026+ 696E             >                else
1026+ 696E 70 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1026+ 6970             >                endif           ; ok        // for other definitions it "points" the correct handler
1026+ 6970             >                // Use of "; ok" to suppress "warning[fwdref]"
1026+ 6970             >
1026+ 6970             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1027+ 6970 E1                           pop     hl
1028+ 6971 F9                           ld      sp, hl
1029+ 6972
1030+ 6972                              next
1030+ 6972 DD E9       >                jp      (ix)
1031+ 6974
1032+ 6974              //  ______________________________________________________________________
1033+ 6974              //
1034+ 6974              // rp@      -- a
1035+ 6974              // returns on top of stack the value of Return-Pointer
1036+ 6974                              New_Def RPFETCH, "RP@", is_code, is_normal
1036+ 6974             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1036+ 6974             >
1036+ 6974             >                // dummy db directives used to calculate length of namec
1036+ 6974 52 50 40    >                db      "RP@"
1036+ 6977             >len_NFA         defl    $ - temp_NFA
1036+ 6977             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1036+ 6974             >
1036+ 6974 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1036+ 6975 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1036+ 6978             >                org     $-1                 // alter last byte of Name just above to set
1036+ 6977 C0          >                db      {b $} | END_BIT     // msb as name end
1036+ 6978             >
1036+ 6978 68 69       >                dw      last_NFA            // Link to previous definition Name
1036+ 697A             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1036+ 697A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1036+ 697A             >                else
1036+ 697A 7C 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1036+ 697C             >                endif           ; ok        // for other definitions it "points" the correct handler
1036+ 697C             >                // Use of "; ok" to suppress "warning[fwdref]"
1036+ 697C             >
1036+ 697C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1037+ 697C
1038+ 697C                              ldhlrp
1038+ 697C 2A 30 64    >                ld      hl,(RP_Pointer)
1039+ 697F
1040+ 697F                              psh1
1040+ 697F E5          >                push    hl
1040+ 6980 DD E9       >                jp      (ix)
1041+ 6982
1042+ 6982              //  ______________________________________________________________________
1043+ 6982              //
1044+ 6982              // rp!      a --
1045+ 6982              // restore RP to the initial value passed
1046+ 6982              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1047+ 6982                              New_Def RPSTORE, "RP!", is_code, is_normal
1047+ 6982             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1047+ 6982             >
1047+ 6982             >                // dummy db directives used to calculate length of namec
1047+ 6982 52 50 21    >                db      "RP!"
1047+ 6985             >len_NFA         defl    $ - temp_NFA
1047+ 6985             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1047+ 6982             >
1047+ 6982 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1047+ 6983 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1047+ 6986             >                org     $-1                 // alter last byte of Name just above to set
1047+ 6985 A1          >                db      {b $} | END_BIT     // msb as name end
1047+ 6986             >
1047+ 6986 74 69       >                dw      last_NFA            // Link to previous definition Name
1047+ 6988             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1047+ 6988 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1047+ 6988             >                else
1047+ 6988 8A 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1047+ 698A             >                endif           ; ok        // for other definitions it "points" the correct handler
1047+ 698A             >                // Use of "; ok" to suppress "warning[fwdref]"
1047+ 698A             >
1047+ 698A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1048+ 698A E1                           pop     hl
1049+ 698B                              ldrphl
1049+ 698B 22 30 64    >                ld      (RP_Pointer),hl
1050+ 698E
1051+ 698E                              next
1051+ 698E DD E9       >                jp      (ix)
1052+ 6990
1053+ 6990              //  ______________________________________________________________________
1054+ 6990              //
1055+ 6990              // ;s      --
1056+ 6990              // exits back to the caller word
1057+ 6990                              New_Def EXIT, ";S", is_code, is_normal
1057+ 6990             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1057+ 6990             >
1057+ 6990             >                // dummy db directives used to calculate length of namec
1057+ 6990 3B 53       >                db      ";S"
1057+ 6992             >len_NFA         defl    $ - temp_NFA
1057+ 6992             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1057+ 6990             >
1057+ 6990 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1057+ 6991 3B 53       >                db      ";S"               // name string in 7-bit ascii, but
1057+ 6993             >                org     $-1                 // alter last byte of Name just above to set
1057+ 6992 D3          >                db      {b $} | END_BIT     // msb as name end
1057+ 6993             >
1057+ 6993 82 69       >                dw      last_NFA            // Link to previous definition Name
1057+ 6995             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1057+ 6995 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1057+ 6995             >                else
1057+ 6995 97 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1057+ 6997             >                endif           ; ok        // for other definitions it "points" the correct handler
1057+ 6997             >                // Use of "; ok" to suppress "warning[fwdref]"
1057+ 6997             >
1057+ 6997             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1058+ 6997                              ldhlrp                      // Get Return Stack Pointer
1058+ 6997 2A 30 64    >                ld      hl,(RP_Pointer)
1059+ 699A 4E                           ld      c, (hl)             // pop Instruction Pointer
1060+ 699B 23                           inc     hl                  // from Return Stack
1061+ 699C 46                           ld      b, (hl)
1062+ 699D 23                           inc     hl
1063+ 699E                              ldrphl                      // Set Return Stack Pointer
1063+ 699E 22 30 64    >                ld      (RP_Pointer),hl
1064+ 69A1                              next
1064+ 69A1 DD E9       >                jp      (ix)
1065+ 69A3
1066+ 69A3              //  ______________________________________________________________________
1067+ 69A3              //
1068+ 69A3              // leave        --
1069+ 69A3              // set the limit-of-loop equal to the current index
1070+ 69A3              // this forces to leave from loop at the end of the current iteration
1071+ 69A3                              New_Def LEAVE, "LEAVE", is_code, is_normal
1071+ 69A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1071+ 69A3             >
1071+ 69A3             >                // dummy db directives used to calculate length of namec
1071+ 69A3 4C 45 41 56 >                db      "LEAVE"
1071+ 69A7 45          >
1071+ 69A8             >len_NFA         defl    $ - temp_NFA
1071+ 69A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1071+ 69A3             >
1071+ 69A3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1071+ 69A4 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
1071+ 69A8 45          >
1071+ 69A9             >                org     $-1                 // alter last byte of Name just above to set
1071+ 69A8 C5          >                db      {b $} | END_BIT     // msb as name end
1071+ 69A9             >
1071+ 69A9 90 69       >                dw      last_NFA            // Link to previous definition Name
1071+ 69AB             >LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1071+ 69AB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1071+ 69AB             >                else
1071+ 69AB AD 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1071+ 69AD             >                endif           ; ok        // for other definitions it "points" the correct handler
1071+ 69AD             >                // Use of "; ok" to suppress "warning[fwdref]"
1071+ 69AD             >
1071+ 69AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1072+ 69AD
1073+ 69AD                              ldhlrp
1073+ 69AD 2A 30 64    >                ld      hl,(RP_Pointer)
1074+ 69B0 5E                           ld      e, (hl)
1075+ 69B1 23                           inc     hl
1076+ 69B2 56                           ld      d, (hl)
1077+ 69B3 23                           inc     hl
1078+ 69B4 73                           ld      (hl), e
1079+ 69B5 23                           inc     hl
1080+ 69B6 72                           ld      (hl), d
1081+ 69B7
1082+ 69B7                              next
1082+ 69B7 DD E9       >                jp      (ix)
1083+ 69B9
1084+ 69B9              //  ______________________________________________________________________
1085+ 69B9              //
1086+ 69B9              // >r      n --
1087+ 69B9              // pop from calculator-stack and push into return-stack
1088+ 69B9                              New_Def TO_R, ">R", is_code, is_normal
1088+ 69B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1088+ 69B9             >
1088+ 69B9             >                // dummy db directives used to calculate length of namec
1088+ 69B9 3E 52       >                db      ">R"
1088+ 69BB             >len_NFA         defl    $ - temp_NFA
1088+ 69BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1088+ 69B9             >
1088+ 69B9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1088+ 69BA 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1088+ 69BC             >                org     $-1                 // alter last byte of Name just above to set
1088+ 69BB D2          >                db      {b $} | END_BIT     // msb as name end
1088+ 69BC             >
1088+ 69BC A3 69       >                dw      last_NFA            // Link to previous definition Name
1088+ 69BE             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1088+ 69BE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1088+ 69BE             >                else
1088+ 69BE C0 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1088+ 69C0             >                endif           ; ok        // for other definitions it "points" the correct handler
1088+ 69C0             >                // Use of "; ok" to suppress "warning[fwdref]"
1088+ 69C0             >
1088+ 69C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1089+ 69C0 D1                           pop     de
1090+ 69C1                              ldhlrp
1090+ 69C1 2A 30 64    >                ld      hl,(RP_Pointer)
1091+ 69C4 2B                           dec     hl
1092+ 69C5 72                           ld      (hl), d             // store current TOS
1093+ 69C6 2B                           dec     hl                  // to Return Stack
1094+ 69C7 73                           ld      (hl), e
1095+ 69C8                              ldrphl
1095+ 69C8 22 30 64    >                ld      (RP_Pointer),hl
1096+ 69CB
1097+ 69CB                              next
1097+ 69CB DD E9       >                jp      (ix)
1098+ 69CD
1099+ 69CD              //  ______________________________________________________________________
1100+ 69CD              //
1101+ 69CD              // r>      -- n
1102+ 69CD              // pop from return-stack and push into calculator-stack
1103+ 69CD                              New_Def R_TO, "R>", is_code, is_normal
1103+ 69CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1103+ 69CD             >
1103+ 69CD             >                // dummy db directives used to calculate length of namec
1103+ 69CD 52 3E       >                db      "R>"
1103+ 69CF             >len_NFA         defl    $ - temp_NFA
1103+ 69CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1103+ 69CD             >
1103+ 69CD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1103+ 69CE 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1103+ 69D0             >                org     $-1                 // alter last byte of Name just above to set
1103+ 69CF BE          >                db      {b $} | END_BIT     // msb as name end
1103+ 69D0             >
1103+ 69D0 B9 69       >                dw      last_NFA            // Link to previous definition Name
1103+ 69D2             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1103+ 69D2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1103+ 69D2             >                else
1103+ 69D2 D4 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1103+ 69D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1103+ 69D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1103+ 69D4             >
1103+ 69D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1104+ 69D4
1105+ 69D4                              ldhlrp
1105+ 69D4 2A 30 64    >                ld      hl,(RP_Pointer)
1106+ 69D7 5E                           ld      e, (hl)             // retrieve from Return Stack
1107+ 69D8 23                           inc     hl
1108+ 69D9 56                           ld      d, (hl)
1109+ 69DA 23                           inc     hl
1110+ 69DB                              ldrphl
1110+ 69DB 22 30 64    >                ld      (RP_Pointer),hl
1111+ 69DE D5                           push    de
1112+ 69DF                              next
1112+ 69DF DD E9       >                jp      (ix)
1113+ 69E1
1114+ 69E1              //  ______________________________________________________________________
1115+ 69E1              //
1116+ 69E1              // r            -- n
1117+ 69E1              // return on top of stack the value of top of return-stack
1118+ 69E1              // Since this is the same as I, we alter R's CFA to jump there
1119+ 69E1                              New_Def R_OP, "R", I_Ptr, is_normal
1119+ 69E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1119+ 69E1             >
1119+ 69E1             >                // dummy db directives used to calculate length of namec
1119+ 69E1 52          >                db      "R"
1119+ 69E2             >len_NFA         defl    $ - temp_NFA
1119+ 69E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1119+ 69E1             >
1119+ 69E1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1119+ 69E2 52          >                db      "R"               // name string in 7-bit ascii, but
1119+ 69E3             >                org     $-1                 // alter last byte of Name just above to set
1119+ 69E2 D2          >                db      {b $} | END_BIT     // msb as name end
1119+ 69E3             >
1119+ 69E3 CD 69       >                dw      last_NFA            // Link to previous definition Name
1119+ 69E5             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1119+ 69E5 14 65       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1119+ 69E7             >                else
1119+ 69E7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1119+ 69E7             >                endif           ; ok        // for other definitions it "points" the correct handler
1119+ 69E7             >                // Use of "; ok" to suppress "warning[fwdref]"
1119+ 69E7             >
1119+ 69E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1120+ 69E7
1121+ 69E7              //  ______________________________________________________________________
1122+ 69E7              //
1123+ 69E7              // 0=           n -- f
1124+ 69E7              // true (non zero) if n is zero, false (0) elsewere
1125+ 69E7                              New_Def ZEQUAL, "0=", is_code, is_normal
1125+ 69E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1125+ 69E7             >
1125+ 69E7             >                // dummy db directives used to calculate length of namec
1125+ 69E7 30 3D       >                db      "0="
1125+ 69E9             >len_NFA         defl    $ - temp_NFA
1125+ 69E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1125+ 69E7             >
1125+ 69E7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1125+ 69E8 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1125+ 69EA             >                org     $-1                 // alter last byte of Name just above to set
1125+ 69E9 BD          >                db      {b $} | END_BIT     // msb as name end
1125+ 69EA             >
1125+ 69EA E1 69       >                dw      last_NFA            // Link to previous definition Name
1125+ 69EC             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1125+ 69EC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1125+ 69EC             >                else
1125+ 69EC EE 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1125+ 69EE             >                endif           ; ok        // for other definitions it "points" the correct handler
1125+ 69EE             >                // Use of "; ok" to suppress "warning[fwdref]"
1125+ 69EE             >
1125+ 69EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1126+ 69EE E1                           pop     hl
1127+ 69EF 7D                           ld      a, l
1128+ 69F0 B4                           or      h
1129+ 69F1 21 00 00                     ld      hl, FALSE_FLAG
1130+ 69F4 20 01                        jr      nz, ZEqual_Skip
1131+ 69F6 2C                               inc     l
1132+ 69F7              ZEqual_Skip:
1133+ 69F7                              psh1
1133+ 69F7 E5          >                push    hl
1133+ 69F8 DD E9       >                jp      (ix)
1134+ 69FA
1135+ 69FA              //  ______________________________________________________________________
1136+ 69FA              //
1137+ 69FA              // 0<           n -- f
1138+ 69FA              // true (non zero) if n is less than zero, false (0) elsewere
1139+ 69FA                              New_Def ZLESS, "0<", is_code, is_normal
1139+ 69FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1139+ 69FA             >
1139+ 69FA             >                // dummy db directives used to calculate length of namec
1139+ 69FA 30 3C       >                db      "0<"
1139+ 69FC             >len_NFA         defl    $ - temp_NFA
1139+ 69FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1139+ 69FA             >
1139+ 69FA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1139+ 69FB 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1139+ 69FD             >                org     $-1                 // alter last byte of Name just above to set
1139+ 69FC BC          >                db      {b $} | END_BIT     // msb as name end
1139+ 69FD             >
1139+ 69FD E7 69       >                dw      last_NFA            // Link to previous definition Name
1139+ 69FF             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1139+ 69FF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1139+ 69FF             >                else
1139+ 69FF 01 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1139+ 6A01             >                endif           ; ok        // for other definitions it "points" the correct handler
1139+ 6A01             >                // Use of "; ok" to suppress "warning[fwdref]"
1139+ 6A01             >
1139+ 6A01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1140+ 6A01 E1                           pop     hl
1141+ 6A02 29                           add     hl, hl
1142+ 6A03 21 00 00                     ld      hl, 0
1143+ 6A06 30 01                        jr      nc, ZLess_Skip
1144+ 6A08 2C                               inc     l
1145+ 6A09              ZLess_Skip:
1146+ 6A09                              psh1
1146+ 6A09 E5          >                push    hl
1146+ 6A0A DD E9       >                jp      (ix)
1147+ 6A0C
1148+ 6A0C              //  ______________________________________________________________________
1149+ 6A0C              //
1150+ 6A0C              // 0>           n -- f
1151+ 6A0C              // true (non zero) if n is less than zero, false (0) elsewere
1152+ 6A0C                              New_Def ZGREATER, "0>", is_code, is_normal
1152+ 6A0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1152+ 6A0C             >
1152+ 6A0C             >                // dummy db directives used to calculate length of namec
1152+ 6A0C 30 3E       >                db      "0>"
1152+ 6A0E             >len_NFA         defl    $ - temp_NFA
1152+ 6A0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1152+ 6A0C             >
1152+ 6A0C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1152+ 6A0D 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1152+ 6A0F             >                org     $-1                 // alter last byte of Name just above to set
1152+ 6A0E BE          >                db      {b $} | END_BIT     // msb as name end
1152+ 6A0F             >
1152+ 6A0F FA 69       >                dw      last_NFA            // Link to previous definition Name
1152+ 6A11             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1152+ 6A11 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1152+ 6A11             >                else
1152+ 6A11 13 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1152+ 6A13             >                endif           ; ok        // for other definitions it "points" the correct handler
1152+ 6A13             >                // Use of "; ok" to suppress "warning[fwdref]"
1152+ 6A13             >
1152+ 6A13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1153+ 6A13 E1                           pop     hl
1154+ 6A14 7D                           ld      a, l
1155+ 6A15 B4                           or      h
1156+ 6A16 29                           add     hl, hl
1157+ 6A17 21 00 00                     ld      hl, FALSE_FLAG
1158+ 6A1A 38 04                        jr      c, ZGreater_Skip
1159+ 6A1C A7                               and     a
1160+ 6A1D 28 01                            jr      z, ZGreater_Skip
1161+ 6A1F 2C                                   inc     l
1162+ 6A20              ZGreater_Skip:
1163+ 6A20                              psh1
1163+ 6A20 E5          >                push    hl
1163+ 6A21 DD E9       >                jp      (ix)
1164+ 6A23
1165+ 6A23              //  ______________________________________________________________________
1166+ 6A23              //
1167+ 6A23              // +            n1 n2 -- n3
1168+ 6A23              // returns the unsigned sum of two top values
1169+ 6A23                              New_Def PLUS, "+", is_code, is_normal
1169+ 6A23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1169+ 6A23             >
1169+ 6A23             >                // dummy db directives used to calculate length of namec
1169+ 6A23 2B          >                db      "+"
1169+ 6A24             >len_NFA         defl    $ - temp_NFA
1169+ 6A24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1169+ 6A23             >
1169+ 6A23 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1169+ 6A24 2B          >                db      "+"               // name string in 7-bit ascii, but
1169+ 6A25             >                org     $-1                 // alter last byte of Name just above to set
1169+ 6A24 AB          >                db      {b $} | END_BIT     // msb as name end
1169+ 6A25             >
1169+ 6A25 0C 6A       >                dw      last_NFA            // Link to previous definition Name
1169+ 6A27             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1169+ 6A27 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1169+ 6A27             >                else
1169+ 6A27 29 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1169+ 6A29             >                endif           ; ok        // for other definitions it "points" the correct handler
1169+ 6A29             >                // Use of "; ok" to suppress "warning[fwdref]"
1169+ 6A29             >
1169+ 6A29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1170+ 6A29 E1                           pop     hl
1171+ 6A2A D1                           pop     de
1172+ 6A2B 19                           add     hl, de
1173+ 6A2C
1174+ 6A2C                              psh1
1174+ 6A2C E5          >                push    hl
1174+ 6A2D DD E9       >                jp      (ix)
1175+ 6A2F
1176+ 6A2F
1177+ 6A2F              //  ______________________________________________________________________
1178+ 6A2F              //
1179+ 6A2F              // d+           d1 d2 -- d3
1180+ 6A2F              // returns the unsigned sum of two top double-numbers
1181+ 6A2F              //      d2  d1
1182+ 6A2F              //      h l h l
1183+ 6A2F              // SP   LHEDLHED
1184+ 6A2F              // SP  +01234567
1185+ 6A2F                              New_Def DPLUS, "D+", is_code, is_normal
1185+ 6A2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1185+ 6A2F             >
1185+ 6A2F             >                // dummy db directives used to calculate length of namec
1185+ 6A2F 44 2B       >                db      "D+"
1185+ 6A31             >len_NFA         defl    $ - temp_NFA
1185+ 6A31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1185+ 6A2F             >
1185+ 6A2F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1185+ 6A30 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1185+ 6A32             >                org     $-1                 // alter last byte of Name just above to set
1185+ 6A31 AB          >                db      {b $} | END_BIT     // msb as name end
1185+ 6A32             >
1185+ 6A32 23 6A       >                dw      last_NFA            // Link to previous definition Name
1185+ 6A34             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1185+ 6A34 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1185+ 6A34             >                else
1185+ 6A34 36 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1185+ 6A36             >                endif           ; ok        // for other definitions it "points" the correct handler
1185+ 6A36             >                // Use of "; ok" to suppress "warning[fwdref]"
1185+ 6A36             >
1185+ 6A36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1186+ 6A36
1187+ 6A36 21 07 00                     ld      hl, 7
1188+ 6A39 39                           add     hl, sp
1189+ 6A3A 56                           ld      d, (hl)
1190+ 6A3B 70                           ld      (hl), b             // Save IP
1191+ 6A3C 2B                           dec     hl
1192+ 6A3D 5E                           ld      e, (hl)
1193+ 6A3E 71                           ld      (hl), c             // de := d1.L
1194+ 6A3F C1                           pop     bc                  // bc := d2.H
1195+ 6A40 E1                           pop     hl                  // hl := d2.L
1196+ 6A41 19                           add     hl, de              // hl := d2.L + d1.L
1197+ 6A42 EB                           ex      de, hl              // de := lower
1198+ 6A43 E1                           pop     hl                  // d1.H
1199+ 6A44 ED 4A                        adc     hl, bc              // d1.H + d2.H
1200+ 6A46 C1                           pop     bc                  // Restore IP
1201+ 6A47
1202+ 6A47
1203+ 6A47                              psh2
1203+ 6A47 D5          >                push    de
1203+ 6A48 E5          >                push    hl
1203+ 6A49 DD E9       >                jp      (ix)
1204+ 6A4B
1205+ 6A4B              //  ______________________________________________________________________
1206+ 6A4B              //
1207+ 6A4B              // 1+           n1 -- n2
1208+ 6A4B              // increment by 1 top of stack
1209+ 6A4B                              New_Def ONE_PLUS, "1+", is_code, is_normal
1209+ 6A4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1209+ 6A4B             >
1209+ 6A4B             >                // dummy db directives used to calculate length of namec
1209+ 6A4B 31 2B       >                db      "1+"
1209+ 6A4D             >len_NFA         defl    $ - temp_NFA
1209+ 6A4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1209+ 6A4B             >
1209+ 6A4B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1209+ 6A4C 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1209+ 6A4E             >                org     $-1                 // alter last byte of Name just above to set
1209+ 6A4D AB          >                db      {b $} | END_BIT     // msb as name end
1209+ 6A4E             >
1209+ 6A4E 2F 6A       >                dw      last_NFA            // Link to previous definition Name
1209+ 6A50             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1209+ 6A50 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1209+ 6A50             >                else
1209+ 6A50 52 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1209+ 6A52             >                endif           ; ok        // for other definitions it "points" the correct handler
1209+ 6A52             >                // Use of "; ok" to suppress "warning[fwdref]"
1209+ 6A52             >
1209+ 6A52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1210+ 6A52 E1                           pop     hl
1211+ 6A53 23                           inc     hl
1212+ 6A54
1213+ 6A54                              psh1
1213+ 6A54 E5          >                push    hl
1213+ 6A55 DD E9       >                jp      (ix)
1214+ 6A57
1215+ 6A57              //  ______________________________________________________________________
1216+ 6A57              //
1217+ 6A57              // 1-           n1 -- n2
1218+ 6A57              // decrement by 1 top of stack
1219+ 6A57                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1219+ 6A57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1219+ 6A57             >
1219+ 6A57             >                // dummy db directives used to calculate length of namec
1219+ 6A57 31 2D       >                db      "1-"
1219+ 6A59             >len_NFA         defl    $ - temp_NFA
1219+ 6A59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1219+ 6A57             >
1219+ 6A57 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1219+ 6A58 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1219+ 6A5A             >                org     $-1                 // alter last byte of Name just above to set
1219+ 6A59 AD          >                db      {b $} | END_BIT     // msb as name end
1219+ 6A5A             >
1219+ 6A5A 4B 6A       >                dw      last_NFA            // Link to previous definition Name
1219+ 6A5C             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1219+ 6A5C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1219+ 6A5C             >                else
1219+ 6A5C 5E 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1219+ 6A5E             >                endif           ; ok        // for other definitions it "points" the correct handler
1219+ 6A5E             >                // Use of "; ok" to suppress "warning[fwdref]"
1219+ 6A5E             >
1219+ 6A5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1220+ 6A5E E1                           pop     hl
1221+ 6A5F 2B                           dec     hl
1222+ 6A60
1223+ 6A60                              psh1
1223+ 6A60 E5          >                push    hl
1223+ 6A61 DD E9       >                jp      (ix)
1224+ 6A63
1225+ 6A63              //  ______________________________________________________________________
1226+ 6A63              //
1227+ 6A63              // 2+           n1 -- n2
1228+ 6A63              // increment by 2 top of stack
1229+ 6A63                              New_Def TWO_PLUS, "2+", is_code, is_normal
1229+ 6A63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1229+ 6A63             >
1229+ 6A63             >                // dummy db directives used to calculate length of namec
1229+ 6A63 32 2B       >                db      "2+"
1229+ 6A65             >len_NFA         defl    $ - temp_NFA
1229+ 6A65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1229+ 6A63             >
1229+ 6A63 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1229+ 6A64 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1229+ 6A66             >                org     $-1                 // alter last byte of Name just above to set
1229+ 6A65 AB          >                db      {b $} | END_BIT     // msb as name end
1229+ 6A66             >
1229+ 6A66 57 6A       >                dw      last_NFA            // Link to previous definition Name
1229+ 6A68             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1229+ 6A68 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1229+ 6A68             >                else
1229+ 6A68 6A 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1229+ 6A6A             >                endif           ; ok        // for other definitions it "points" the correct handler
1229+ 6A6A             >                // Use of "; ok" to suppress "warning[fwdref]"
1229+ 6A6A             >
1229+ 6A6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1230+ 6A6A              Two_Plus:
1231+ 6A6A E1                           pop     hl
1232+ 6A6B 23                           inc     hl
1233+ 6A6C 23                           inc     hl
1234+ 6A6D
1235+ 6A6D                              psh1
1235+ 6A6D E5          >                push    hl
1235+ 6A6E DD E9       >                jp      (ix)
1236+ 6A70
1237+ 6A70              //  ______________________________________________________________________
1238+ 6A70              //
1239+ 6A70              // cell+        a1 -- a2
1240+ 6A70              // increment by 2 top of stack
1241+ 6A70                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1241+ 6A70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1241+ 6A70             >
1241+ 6A70             >                // dummy db directives used to calculate length of namec
1241+ 6A70 43 45 4C 4C >                db      "CELL+"
1241+ 6A74 2B          >
1241+ 6A75             >len_NFA         defl    $ - temp_NFA
1241+ 6A75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1241+ 6A70             >
1241+ 6A70 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1241+ 6A71 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1241+ 6A75 2B          >
1241+ 6A76             >                org     $-1                 // alter last byte of Name just above to set
1241+ 6A75 AB          >                db      {b $} | END_BIT     // msb as name end
1241+ 6A76             >
1241+ 6A76 63 6A       >                dw      last_NFA            // Link to previous definition Name
1241+ 6A78             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1241+ 6A78 6A 6A       >                dw      Two_Plus ; ok        // for primitive definitions  actual code
1241+ 6A7A             >                else
1241+ 6A7A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1241+ 6A7A             >                endif           ; ok        // for other definitions it "points" the correct handler
1241+ 6A7A             >                // Use of "; ok" to suppress "warning[fwdref]"
1241+ 6A7A             >
1241+ 6A7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1242+ 6A7A
1243+ 6A7A              //  ______________________________________________________________________
1244+ 6A7A              //
1245+ 6A7A              // align        a1 -- a2
1246+ 6A7A              // align memory : not used
1247+ 6A7A              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1248+ 6A7A              //            next
1249+ 6A7A
1250+ 6A7A              //  ______________________________________________________________________
1251+ 6A7A              //
1252+ 6A7A              // cell-        a1 -- a2
1253+ 6A7A              // decrement by 2 top of stack
1254+ 6A7A                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1254+ 6A7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1254+ 6A7A             >
1254+ 6A7A             >                // dummy db directives used to calculate length of namec
1254+ 6A7A 43 45 4C 4C >                db      "CELL-"
1254+ 6A7E 2D          >
1254+ 6A7F             >len_NFA         defl    $ - temp_NFA
1254+ 6A7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1254+ 6A7A             >
1254+ 6A7A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1254+ 6A7B 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1254+ 6A7F 2D          >
1254+ 6A80             >                org     $-1                 // alter last byte of Name just above to set
1254+ 6A7F AD          >                db      {b $} | END_BIT     // msb as name end
1254+ 6A80             >
1254+ 6A80 70 6A       >                dw      last_NFA            // Link to previous definition Name
1254+ 6A82             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1254+ 6A82 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1254+ 6A82             >                else
1254+ 6A82 84 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1254+ 6A84             >                endif           ; ok        // for other definitions it "points" the correct handler
1254+ 6A84             >                // Use of "; ok" to suppress "warning[fwdref]"
1254+ 6A84             >
1254+ 6A84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1255+ 6A84 E1                           pop     hl
1256+ 6A85 2B                           dec     hl
1257+ 6A86 2B                           dec     hl
1258+ 6A87
1259+ 6A87                              psh1
1259+ 6A87 E5          >                push    hl
1259+ 6A88 DD E9       >                jp      (ix)
1260+ 6A8A
1261+ 6A8A              //  ______________________________________________________________________
1262+ 6A8A              //
1263+ 6A8A              // minus        n1 -- n2
1264+ 6A8A              // change the sign of number
1265+ 6A8A                              New_Def MINUS, "MINUS", is_code, is_normal
1265+ 6A8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1265+ 6A8A             >
1265+ 6A8A             >                // dummy db directives used to calculate length of namec
1265+ 6A8A 4D 49 4E 55 >                db      "MINUS"
1265+ 6A8E 53          >
1265+ 6A8F             >len_NFA         defl    $ - temp_NFA
1265+ 6A8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1265+ 6A8A             >
1265+ 6A8A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1265+ 6A8B 4D 49 4E 55 >                db      "MINUS"               // name string in 7-bit ascii, but
1265+ 6A8F 53          >
1265+ 6A90             >                org     $-1                 // alter last byte of Name just above to set
1265+ 6A8F D3          >                db      {b $} | END_BIT     // msb as name end
1265+ 6A90             >
1265+ 6A90 7A 6A       >                dw      last_NFA            // Link to previous definition Name
1265+ 6A92             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1265+ 6A92 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1265+ 6A92             >                else
1265+ 6A92 94 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1265+ 6A94             >                endif           ; ok        // for other definitions it "points" the correct handler
1265+ 6A94             >                // Use of "; ok" to suppress "warning[fwdref]"
1265+ 6A94             >
1265+ 6A94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1266+ 6A94 21 00 00                     ld      hl, 0               // subtract from 0
1267+ 6A97 D1                           pop     de
1268+ 6A98 B7                           or      a
1269+ 6A99 ED 52                        sbc     hl, de
1270+ 6A9B
1271+ 6A9B                              psh1
1271+ 6A9B E5          >                push    hl
1271+ 6A9C DD E9       >                jp      (ix)
1272+ 6A9E
1273+ 6A9E              //  ______________________________________________________________________
1274+ 6A9E              //
1275+ 6A9E              // dminus       d1 -- d2
1276+ 6A9E              // change the sign of a double number
1277+ 6A9E                              New_Def DMINUS, "DMINUS", is_code, is_normal
1277+ 6A9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1277+ 6A9E             >
1277+ 6A9E             >                // dummy db directives used to calculate length of namec
1277+ 6A9E 44 4D 49 4E >                db      "DMINUS"
1277+ 6AA2 55 53       >
1277+ 6AA4             >len_NFA         defl    $ - temp_NFA
1277+ 6AA4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1277+ 6A9E             >
1277+ 6A9E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1277+ 6A9F 44 4D 49 4E >                db      "DMINUS"               // name string in 7-bit ascii, but
1277+ 6AA3 55 53       >
1277+ 6AA5             >                org     $-1                 // alter last byte of Name just above to set
1277+ 6AA4 D3          >                db      {b $} | END_BIT     // msb as name end
1277+ 6AA5             >
1277+ 6AA5 8A 6A       >                dw      last_NFA            // Link to previous definition Name
1277+ 6AA7             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1277+ 6AA7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1277+ 6AA7             >                else
1277+ 6AA7 A9 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1277+ 6AA9             >                endif           ; ok        // for other definitions it "points" the correct handler
1277+ 6AA9             >                // Use of "; ok" to suppress "warning[fwdref]"
1277+ 6AA9             >
1277+ 6AA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1278+ 6AA9 E1                           pop     hl                  // d1.H
1279+ 6AAA D1                           pop     de                  // d1.L
1280+ 6AAB C5                           push    bc                  // Save Instruction Pointer
1281+ 6AAC 44                           ld      b, h
1282+ 6AAD 4D                           ld      c, l                // bc := d1.L
1283+ 6AAE AF                           xor     a
1284+ 6AAF 67                           ld      h, a
1285+ 6AB0 6F                           ld      l, a
1286+ 6AB1 ED 52                        sbc     hl, de              // subtact from zero
1287+ 6AB3 D1                           pop     de                  // Retrieve Instruction Pointer
1288+ 6AB4 E5                           push    hl                  // > d2-L
1289+ 6AB5 67                           ld      h, a
1290+ 6AB6 6F                           ld      l, a
1291+ 6AB7 ED 42                        sbc     hl, bc              // subtract from zero with carry
1292+ 6AB9                                                          // > d2-H
1293+ 6AB9 42                           ld      b, d
1294+ 6ABA 4B                           ld      c, e
1295+ 6ABB                              psh1
1295+ 6ABB E5          >                push    hl
1295+ 6ABC DD E9       >                jp      (ix)
1296+ 6ABE
1297+ 6ABE              //  ______________________________________________________________________
1298+ 6ABE              //
1299+ 6ABE              // over         n1 n2 -- n1 n2 n1
1300+ 6ABE              // copy the second value of stack and put it on top.
1301+ 6ABE                              New_Def OVER, "OVER", is_code, is_normal
1301+ 6ABE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1301+ 6ABE             >
1301+ 6ABE             >                // dummy db directives used to calculate length of namec
1301+ 6ABE 4F 56 45 52 >                db      "OVER"
1301+ 6AC2             >len_NFA         defl    $ - temp_NFA
1301+ 6AC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1301+ 6ABE             >
1301+ 6ABE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1301+ 6ABF 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1301+ 6AC3             >                org     $-1                 // alter last byte of Name just above to set
1301+ 6AC2 D2          >                db      {b $} | END_BIT     // msb as name end
1301+ 6AC3             >
1301+ 6AC3 9E 6A       >                dw      last_NFA            // Link to previous definition Name
1301+ 6AC5             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1301+ 6AC5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1301+ 6AC5             >                else
1301+ 6AC5 C7 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1301+ 6AC7             >                endif           ; ok        // for other definitions it "points" the correct handler
1301+ 6AC7             >                // Use of "; ok" to suppress "warning[fwdref]"
1301+ 6AC7             >
1301+ 6AC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1302+ 6AC7 D1                           pop     de                  //   n2
1303+ 6AC8 E1                           pop     hl                  // < n1
1304+ 6AC9 E5                           push    hl                  // > n1
1305+ 6ACA D5                           push    de                  // > n2
1306+ 6ACB E5                           push    hl                  // > n1
1307+ 6ACC                              next
1307+ 6ACC DD E9       >                jp      (ix)
1308+ 6ACE
1309+ 6ACE              //  ______________________________________________________________________
1310+ 6ACE              //
1311+ 6ACE              // drop         n1 --
1312+ 6ACE              // drops the top of stack
1313+ 6ACE                              New_Def DROP, "DROP", is_code, is_normal
1313+ 6ACE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1313+ 6ACE             >
1313+ 6ACE             >                // dummy db directives used to calculate length of namec
1313+ 6ACE 44 52 4F 50 >                db      "DROP"
1313+ 6AD2             >len_NFA         defl    $ - temp_NFA
1313+ 6AD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1313+ 6ACE             >
1313+ 6ACE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1313+ 6ACF 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1313+ 6AD3             >                org     $-1                 // alter last byte of Name just above to set
1313+ 6AD2 D0          >                db      {b $} | END_BIT     // msb as name end
1313+ 6AD3             >
1313+ 6AD3 BE 6A       >                dw      last_NFA            // Link to previous definition Name
1313+ 6AD5             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1313+ 6AD5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1313+ 6AD5             >                else
1313+ 6AD5 D7 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1313+ 6AD7             >                endif           ; ok        // for other definitions it "points" the correct handler
1313+ 6AD7             >                // Use of "; ok" to suppress "warning[fwdref]"
1313+ 6AD7             >
1313+ 6AD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1314+ 6AD7 E1                           pop     hl                  // < n1 and discard previous TOS
1315+ 6AD8                              next
1315+ 6AD8 DD E9       >                jp      (ix)
1316+ 6ADA
1317+ 6ADA              //  ______________________________________________________________________
1318+ 6ADA              //
1319+ 6ADA              // nip          n1 n2 -- n2
1320+ 6ADA              // drops the second elemento on the stack
1321+ 6ADA                              New_Def NIP, "NIP", is_code, is_normal
1321+ 6ADA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1321+ 6ADA             >
1321+ 6ADA             >                // dummy db directives used to calculate length of namec
1321+ 6ADA 4E 49 50    >                db      "NIP"
1321+ 6ADD             >len_NFA         defl    $ - temp_NFA
1321+ 6ADD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1321+ 6ADA             >
1321+ 6ADA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1321+ 6ADB 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1321+ 6ADE             >                org     $-1                 // alter last byte of Name just above to set
1321+ 6ADD D0          >                db      {b $} | END_BIT     // msb as name end
1321+ 6ADE             >
1321+ 6ADE CE 6A       >                dw      last_NFA            // Link to previous definition Name
1321+ 6AE0             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1321+ 6AE0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1321+ 6AE0             >                else
1321+ 6AE0 E2 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1321+ 6AE2             >                endif           ; ok        // for other definitions it "points" the correct handler
1321+ 6AE2             >                // Use of "; ok" to suppress "warning[fwdref]"
1321+ 6AE2             >
1321+ 6AE2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1322+ 6AE2
1323+ 6AE2 E1                           pop     hl                  // < n1 discarded
1324+ 6AE3 E3                           ex      (sp), hl
1325+ 6AE4                              next
1325+ 6AE4 DD E9       >                jp      (ix)
1326+ 6AE6
1327+ 6AE6              //  ______________________________________________________________________
1328+ 6AE6              //
1329+ 6AE6              // tuck         n1 n2 -- n2 n1 n2
1330+ 6AE6              // copy the top element after the second.
1331+ 6AE6                              New_Def TUCK, "TUCK", is_code, is_normal
1331+ 6AE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1331+ 6AE6             >
1331+ 6AE6             >                // dummy db directives used to calculate length of namec
1331+ 6AE6 54 55 43 4B >                db      "TUCK"
1331+ 6AEA             >len_NFA         defl    $ - temp_NFA
1331+ 6AEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1331+ 6AE6             >
1331+ 6AE6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1331+ 6AE7 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1331+ 6AEB             >                org     $-1                 // alter last byte of Name just above to set
1331+ 6AEA CB          >                db      {b $} | END_BIT     // msb as name end
1331+ 6AEB             >
1331+ 6AEB DA 6A       >                dw      last_NFA            // Link to previous definition Name
1331+ 6AED             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1331+ 6AED ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1331+ 6AED             >                else
1331+ 6AED EF 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1331+ 6AEF             >                endif           ; ok        // for other definitions it "points" the correct handler
1331+ 6AEF             >                // Use of "; ok" to suppress "warning[fwdref]"
1331+ 6AEF             >
1331+ 6AEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1332+ 6AEF E1                           pop     hl
1333+ 6AF0 D1                           pop     de                  // < n1
1334+ 6AF1 E5                           push    hl                  // > n2  and TOS
1335+ 6AF2 D5                           push    de                  // > n1
1336+ 6AF3 E5                           push    hl
1337+ 6AF4                              next
1337+ 6AF4 DD E9       >                jp      (ix)
1338+ 6AF6
1339+ 6AF6              //  ______________________________________________________________________
1340+ 6AF6              //
1341+ 6AF6              // swap         n1 n2 -- n2 n1
1342+ 6AF6              // swaps the two values on top of stack
1343+ 6AF6                              New_Def SWAP, "SWAP", is_code, is_normal
1343+ 6AF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1343+ 6AF6             >
1343+ 6AF6             >                // dummy db directives used to calculate length of namec
1343+ 6AF6 53 57 41 50 >                db      "SWAP"
1343+ 6AFA             >len_NFA         defl    $ - temp_NFA
1343+ 6AFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1343+ 6AF6             >
1343+ 6AF6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1343+ 6AF7 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1343+ 6AFB             >                org     $-1                 // alter last byte of Name just above to set
1343+ 6AFA D0          >                db      {b $} | END_BIT     // msb as name end
1343+ 6AFB             >
1343+ 6AFB E6 6A       >                dw      last_NFA            // Link to previous definition Name
1343+ 6AFD             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1343+ 6AFD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1343+ 6AFD             >                else
1343+ 6AFD FF 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1343+ 6AFF             >                endif           ; ok        // for other definitions it "points" the correct handler
1343+ 6AFF             >                // Use of "; ok" to suppress "warning[fwdref]"
1343+ 6AFF             >
1343+ 6AFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1344+ 6AFF E1                           pop     hl                  // < n1
1345+ 6B00 E3                           ex      (sp),hl             // > n2
1346+ 6B01 E5                           push    hl                  // copy n1 to TOS
1347+ 6B02                              next
1347+ 6B02 DD E9       >                jp      (ix)
1348+ 6B04
1349+ 6B04              //  ______________________________________________________________________
1350+ 6B04              //
1351+ 6B04              // dup         n -- n n
1352+ 6B04              // duplicates the top value of stack
1353+ 6B04                              New_Def DUP, "DUP", is_code, is_normal
1353+ 6B04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1353+ 6B04             >
1353+ 6B04             >                // dummy db directives used to calculate length of namec
1353+ 6B04 44 55 50    >                db      "DUP"
1353+ 6B07             >len_NFA         defl    $ - temp_NFA
1353+ 6B07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1353+ 6B04             >
1353+ 6B04 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1353+ 6B05 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1353+ 6B08             >                org     $-1                 // alter last byte of Name just above to set
1353+ 6B07 D0          >                db      {b $} | END_BIT     // msb as name end
1353+ 6B08             >
1353+ 6B08 F6 6A       >                dw      last_NFA            // Link to previous definition Name
1353+ 6B0A             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1353+ 6B0A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1353+ 6B0A             >                else
1353+ 6B0A 0C 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1353+ 6B0C             >                endif           ; ok        // for other definitions it "points" the correct handler
1353+ 6B0C             >                // Use of "; ok" to suppress "warning[fwdref]"
1353+ 6B0C             >
1353+ 6B0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1354+ 6B0C E1                           pop     hl
1355+ 6B0D E5                           push    hl                  // > n duplicate TOS
1356+ 6B0E E5                           push    hl
1357+ 6B0F                              next
1357+ 6B0F DD E9       >                jp      (ix)
1358+ 6B11
1359+ 6B11              //  ______________________________________________________________________
1360+ 6B11              //
1361+ 6B11              // rot         n1 n2 n3 -- n2 n3 n1
1362+ 6B11              // Rotates the 3 top values of stack by picking the 3rd in access-order
1363+ 6B11              // and putting it on top. The other two are shifted down one place.
1364+ 6B11                              New_Def ROT, "ROT", is_code, is_normal
1364+ 6B11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1364+ 6B11             >
1364+ 6B11             >                // dummy db directives used to calculate length of namec
1364+ 6B11 52 4F 54    >                db      "ROT"
1364+ 6B14             >len_NFA         defl    $ - temp_NFA
1364+ 6B14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1364+ 6B11             >
1364+ 6B11 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1364+ 6B12 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1364+ 6B15             >                org     $-1                 // alter last byte of Name just above to set
1364+ 6B14 D4          >                db      {b $} | END_BIT     // msb as name end
1364+ 6B15             >
1364+ 6B15 04 6B       >                dw      last_NFA            // Link to previous definition Name
1364+ 6B17             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1364+ 6B17 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1364+ 6B17             >                else
1364+ 6B17 19 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1364+ 6B19             >                endif           ; ok        // for other definitions it "points" the correct handler
1364+ 6B19             >                // Use of "; ok" to suppress "warning[fwdref]"
1364+ 6B19             >
1364+ 6B19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1365+ 6B19 D1                           pop     de                  // < n2
1366+ 6B1A E1                           pop     hl                  // < n1
1367+ 6B1B E3                           ex      (sp),hl             // > n2
1368+ 6B1C D5                           push    de                  // > n3
1369+ 6B1D E5                           push    hl                  // copy n1 to TOS
1370+ 6B1E                              next
1370+ 6B1E DD E9       >                jp      (ix)
1371+ 6B20
1372+ 6B20              //  ______________________________________________________________________
1373+ 6B20              //
1374+ 6B20              // pick        n1 -- nx
1375+ 6B20              // picks the nth element from TOS
1376+ 6B20                              New_Def PICK, "PICK", is_code, is_normal
1376+ 6B20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1376+ 6B20             >
1376+ 6B20             >                // dummy db directives used to calculate length of namec
1376+ 6B20 50 49 43 4B >                db      "PICK"
1376+ 6B24             >len_NFA         defl    $ - temp_NFA
1376+ 6B24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1376+ 6B20             >
1376+ 6B20 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1376+ 6B21 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1376+ 6B25             >                org     $-1                 // alter last byte of Name just above to set
1376+ 6B24 CB          >                db      {b $} | END_BIT     // msb as name end
1376+ 6B25             >
1376+ 6B25 11 6B       >                dw      last_NFA            // Link to previous definition Name
1376+ 6B27             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1376+ 6B27 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1376+ 6B27             >                else
1376+ 6B27 29 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1376+ 6B29             >                endif           ; ok        // for other definitions it "points" the correct handler
1376+ 6B29             >                // Use of "; ok" to suppress "warning[fwdref]"
1376+ 6B29             >
1376+ 6B29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1377+ 6B29 E1                           pop     hl                  // take TOS as index
1378+ 6B2A 29                           add     hl, hl              // as cells
1379+ 6B2B 39                           add     hl, sp              // from Stack Pointer
1380+ 6B2C 7E                           ld      a, (hl)             // replace TOS
1381+ 6B2D 23                           inc     hl
1382+ 6B2E 66                           ld      h, (hl)
1383+ 6B2F 6F                           ld      l, a
1384+ 6B30
1385+ 6B30                              psh1
1385+ 6B30 E5          >                push    hl
1385+ 6B31 DD E9       >                jp      (ix)
1386+ 6B33
1387+ 6B33
1388+ 6B33              //  ______________________________________________________________________
1389+ 6B33              //
1390+ 6B33              // 2over        d1 d2 -- d1 d2 d1
1391+ 6B33              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1392+ 6B33              // copy the second double of stack and put on top.
1393+ 6B33                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1393+ 6B33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1393+ 6B33             >
1393+ 6B33             >                // dummy db directives used to calculate length of namec
1393+ 6B33 32 4F 56 45 >                db      "2OVER"
1393+ 6B37 52          >
1393+ 6B38             >len_NFA         defl    $ - temp_NFA
1393+ 6B38             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1393+ 6B33             >
1393+ 6B33 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1393+ 6B34 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1393+ 6B38 52          >
1393+ 6B39             >                org     $-1                 // alter last byte of Name just above to set
1393+ 6B38 D2          >                db      {b $} | END_BIT     // msb as name end
1393+ 6B39             >
1393+ 6B39 20 6B       >                dw      last_NFA            // Link to previous definition Name
1393+ 6B3B             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1393+ 6B3B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1393+ 6B3B             >                else
1393+ 6B3B 3D 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1393+ 6B3D             >                endif           ; ok        // for other definitions it "points" the correct handler
1393+ 6B3D             >                // Use of "; ok" to suppress "warning[fwdref]"
1393+ 6B3D             >
1393+ 6B3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1394+ 6B3D
1395+ 6B3D 21 07 00                     ld      hl, 7
1396+ 6B40 39                           add     hl, sp
1397+ 6B41 56                           ld      d, (hl)
1398+ 6B42 2B                           dec     hl
1399+ 6B43 5E                           ld      e, (hl)             // d1-L
1400+ 6B44 D5                           push    de
1401+ 6B45 2B                           dec     hl
1402+ 6B46 56                           ld      d, (hl)
1403+ 6B47 2B                           dec     hl
1404+ 6B48 5E                           ld      e, (hl)             // d1-H
1405+ 6B49 D5                           push    de
1406+ 6B4A                              next
1406+ 6B4A DD E9       >                jp      (ix)
1407+ 6B4C
1408+ 6B4C              //  ______________________________________________________________________
1409+ 6B4C              //
1410+ 6B4C              // 2drop        d --
1411+ 6B4C              //              n1 n2 --
1412+ 6B4C              // drops the top double from stack
1413+ 6B4C                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1413+ 6B4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1413+ 6B4C             >
1413+ 6B4C             >                // dummy db directives used to calculate length of namec
1413+ 6B4C 32 44 52 4F >                db      "2DROP"
1413+ 6B50 50          >
1413+ 6B51             >len_NFA         defl    $ - temp_NFA
1413+ 6B51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1413+ 6B4C             >
1413+ 6B4C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1413+ 6B4D 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1413+ 6B51 50          >
1413+ 6B52             >                org     $-1                 // alter last byte of Name just above to set
1413+ 6B51 D0          >                db      {b $} | END_BIT     // msb as name end
1413+ 6B52             >
1413+ 6B52 33 6B       >                dw      last_NFA            // Link to previous definition Name
1413+ 6B54             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1413+ 6B54 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1413+ 6B54             >                else
1413+ 6B54 56 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1413+ 6B56             >                endif           ; ok        // for other definitions it "points" the correct handler
1413+ 6B56             >                // Use of "; ok" to suppress "warning[fwdref]"
1413+ 6B56             >
1413+ 6B56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1414+ 6B56 E1                           pop     hl
1415+ 6B57 E1                           pop     hl
1416+ 6B58                              next
1416+ 6B58 DD E9       >                jp      (ix)
1417+ 6B5A
1418+ 6B5A              //  ______________________________________________________________________
1419+ 6B5A              //
1420+ 6B5A              // 2nip         d1 d2 -- d2
1421+ 6B5A              //              n1 n2 n3 n4 -- n3 n4
1422+ 6B5A              // drops the second double on the stack
1423+ 6B5A              //              New_Def TWO_NIP, 4, "2nip"
1424+ 6B5A              //              ...
1425+ 6B5A
1426+ 6B5A              //  ______________________________________________________________________
1427+ 6B5A              //
1428+ 6B5A              // 2tuck         d1 d2 -- d2 d1 d2
1429+ 6B5A              // copy the top element after the second.
1430+ 6B5A              //              New_Def TWO_TUCK, 5, "2tuck"
1431+ 6B5A              //              ...
1432+ 6B5A
1433+ 6B5A              //  ______________________________________________________________________
1434+ 6B5A              //
1435+ 6B5A              // 2swap         d1 d2 -- d2 d1
1436+ 6B5A              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1437+ 6B5A              // swaps the two doubles on top of stack
1438+ 6B5A                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1438+ 6B5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1438+ 6B5A             >
1438+ 6B5A             >                // dummy db directives used to calculate length of namec
1438+ 6B5A 32 53 57 41 >                db      "2SWAP"
1438+ 6B5E 50          >
1438+ 6B5F             >len_NFA         defl    $ - temp_NFA
1438+ 6B5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1438+ 6B5A             >
1438+ 6B5A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1438+ 6B5B 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1438+ 6B5F 50          >
1438+ 6B60             >                org     $-1                 // alter last byte of Name just above to set
1438+ 6B5F D0          >                db      {b $} | END_BIT     // msb as name end
1438+ 6B60             >
1438+ 6B60 4C 6B       >                dw      last_NFA            // Link to previous definition Name
1438+ 6B62             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1438+ 6B62 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1438+ 6B62             >                else
1438+ 6B62 64 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1438+ 6B64             >                endif           ; ok        // for other definitions it "points" the correct handler
1438+ 6B64             >                // Use of "; ok" to suppress "warning[fwdref]"
1438+ 6B64             >
1438+ 6B64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1439+ 6B64 F1                           pop     af                  //   d2-H
1440+ 6B65 E1                           pop     hl                  // < d2-L
1441+ 6B66 D1                           pop     de                  // < d1-H
1442+ 6B67 E3                           ex      (sp), hl            // < d1-L > d2-L
1443+ 6B68 F5                           push    af                  // > d2-H
1444+ 6B69 E5                           push    hl                  // > d1-L
1445+ 6B6A D5                           push    de
1446+ 6B6B
1447+ 6B6B                              next
1447+ 6B6B DD E9       >                jp      (ix)
1448+ 6B6D
1449+ 6B6D              //  ______________________________________________________________________
1450+ 6B6D              //
1451+ 6B6D              // 2dup         d -- d d
1452+ 6B6D              //              n1 n2 -- n1 n2 n1 n2
1453+ 6B6D              // duplicates the top double of stack
1454+ 6B6D                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1454+ 6B6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1454+ 6B6D             >
1454+ 6B6D             >                // dummy db directives used to calculate length of namec
1454+ 6B6D 32 44 55 50 >                db      "2DUP"
1454+ 6B71             >len_NFA         defl    $ - temp_NFA
1454+ 6B71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1454+ 6B6D             >
1454+ 6B6D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1454+ 6B6E 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1454+ 6B72             >                org     $-1                 // alter last byte of Name just above to set
1454+ 6B71 D0          >                db      {b $} | END_BIT     // msb as name end
1454+ 6B72             >
1454+ 6B72 5A 6B       >                dw      last_NFA            // Link to previous definition Name
1454+ 6B74             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1454+ 6B74 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1454+ 6B74             >                else
1454+ 6B74 76 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1454+ 6B76             >                endif           ; ok        // for other definitions it "points" the correct handler
1454+ 6B76             >                // Use of "; ok" to suppress "warning[fwdref]"
1454+ 6B76             >
1454+ 6B76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1455+ 6B76 E1                           pop     hl                  // < d-H
1456+ 6B77 D1                           pop     de                  // < d-L
1457+ 6B78 D5                           push    de                  // < d-L
1458+ 6B79 E5                           push    hl                  // > d-H
1459+ 6B7A D5                           push    de                  // > d-L
1460+ 6B7B E5                           push    hl                  // > d-H
1461+ 6B7C                              next
1461+ 6B7C DD E9       >                jp      (ix)
1462+ 6B7E
1463+ 6B7E              //  ______________________________________________________________________
1464+ 6B7E              //
1465+ 6B7E              // 2rot         d1 d2 d3 -- d2 d3 d1
1466+ 6B7E              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1467+ 6B7E              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1468+ 6B7E              // and putting it on top. The other two are shifted down one place.
1469+ 6B7E              //              New_Def TWO?ROT, 4, "2rot"
1470+ 6B7E              //              ...
1471+ 6B7E                              New_Def TWO_ROT, "2ROT", is_code, is_normal
1471+ 6B7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1471+ 6B7E             >
1471+ 6B7E             >                // dummy db directives used to calculate length of namec
1471+ 6B7E 32 52 4F 54 >                db      "2ROT"
1471+ 6B82             >len_NFA         defl    $ - temp_NFA
1471+ 6B82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1471+ 6B7E             >
1471+ 6B7E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1471+ 6B7F 32 52 4F 54 >                db      "2ROT"               // name string in 7-bit ascii, but
1471+ 6B83             >                org     $-1                 // alter last byte of Name just above to set
1471+ 6B82 D4          >                db      {b $} | END_BIT     // msb as name end
1471+ 6B83             >
1471+ 6B83 6D 6B       >                dw      last_NFA            // Link to previous definition Name
1471+ 6B85             >TWO_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1471+ 6B85 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1471+ 6B85             >                else
1471+ 6B85 87 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1471+ 6B87             >                endif           ; ok        // for other definitions it "points" the correct handler
1471+ 6B87             >                // Use of "; ok" to suppress "warning[fwdref]"
1471+ 6B87             >
1471+ 6B87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1472+ 6B87
1473+ 6B87              //      d3  |d2  |d1  |
1474+ 6B87              //      h l |h l |h l |
1475+ 6B87              // SP   LHED|LHED|LHED|
1476+ 6B87              // SP  +0123|4567|89ab|
1477+ 6B87 21 0B 00                     ld      hl, $000B
1478+ 6B8A 39                           add     hl, sp
1479+ 6B8B 56                           ld      d, (hl)
1480+ 6B8C 2B                           dec     hl
1481+ 6B8D 5E                           ld      e, (hl)
1482+ 6B8E 2B                           dec     hl
1483+ 6B8F D5                           push    de
1484+ 6B90 56                           ld      d, (hl)
1485+ 6B91 2B                           dec     hl
1486+ 6B92 5E                           ld      e, (hl)
1487+ 6B93 2B                           dec     hl
1488+ 6B94 D5                           push    de
1489+ 6B95
1490+ 6B95              //      d1  |d3  |d2  |d1  |
1491+ 6B95              //      h l |h l |h l |h l |
1492+ 6B95              // SP   LHED|LHED|LHED|LHED|
1493+ 6B95              // SP       +0123|4567|89ab|
1494+ 6B95
1495+ 6B95 54                           ld      d, h
1496+ 6B96 5D                           ld      e, l
1497+ 6B97 13                           inc     de
1498+ 6B98 13                           inc     de
1499+ 6B99 13                           inc     de
1500+ 6B9A 13                           inc     de
1501+ 6B9B C5                           push    bc
1502+ 6B9C 01 0C 00                     ld      bc, $000C
1503+ 6B9F ED B8                        lddr
1504+ 6BA1 C1                           pop     bc
1505+ 6BA2 D1                           pop     de
1506+ 6BA3 D1                           pop     de
1507+ 6BA4
1508+ 6BA4                              next
1508+ 6BA4 DD E9       >                jp      (ix)
1509+ 6BA6
1510+ 6BA6
1511+ 6BA6              //  ______________________________________________________________________
1512+ 6BA6              //
1513+ 6BA6              // +!           n a --
1514+ 6BA6              // Sums to the content of address a the number n.
1515+ 6BA6              // It is the same of  a @ n + a !
1516+ 6BA6                              New_Def PLUSSTORE, "+!", is_code, is_normal
1516+ 6BA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1516+ 6BA6             >
1516+ 6BA6             >                // dummy db directives used to calculate length of namec
1516+ 6BA6 2B 21       >                db      "+!"
1516+ 6BA8             >len_NFA         defl    $ - temp_NFA
1516+ 6BA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1516+ 6BA6             >
1516+ 6BA6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1516+ 6BA7 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1516+ 6BA9             >                org     $-1                 // alter last byte of Name just above to set
1516+ 6BA8 A1          >                db      {b $} | END_BIT     // msb as name end
1516+ 6BA9             >
1516+ 6BA9 7E 6B       >                dw      last_NFA            // Link to previous definition Name
1516+ 6BAB             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1516+ 6BAB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1516+ 6BAB             >                else
1516+ 6BAB AD 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1516+ 6BAD             >                endif           ; ok        // for other definitions it "points" the correct handler
1516+ 6BAD             >                // Use of "; ok" to suppress "warning[fwdref]"
1516+ 6BAD             >
1516+ 6BAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1517+ 6BAD E1                           pop     hl                  // hl is the address
1518+ 6BAE D1                           pop     de                  // de is the number
1519+ 6BAF 7E                           ld      a, (hl)
1520+ 6BB0 83                           add     e
1521+ 6BB1 77                           ld      (hl), a
1522+ 6BB2 23                           inc     hl
1523+ 6BB3 7E                           ld      a, (hl)
1524+ 6BB4 8A                           adc     d
1525+ 6BB5 77                           ld      (hl), a
1526+ 6BB6
1527+ 6BB6                              next
1527+ 6BB6 DD E9       >                jp      (ix)
1528+ 6BB8
1529+ 6BB8              //  ______________________________________________________________________
1530+ 6BB8              //
1531+ 6BB8              // toggle       a n --
1532+ 6BB8              // Complements (xor) the byte at addrress  a  with the model n.
1533+ 6BB8                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1533+ 6BB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1533+ 6BB8             >
1533+ 6BB8             >                // dummy db directives used to calculate length of namec
1533+ 6BB8 54 4F 47 47 >                db      "TOGGLE"
1533+ 6BBC 4C 45       >
1533+ 6BBE             >len_NFA         defl    $ - temp_NFA
1533+ 6BBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1533+ 6BB8             >
1533+ 6BB8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1533+ 6BB9 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1533+ 6BBD 4C 45       >
1533+ 6BBF             >                org     $-1                 // alter last byte of Name just above to set
1533+ 6BBE C5          >                db      {b $} | END_BIT     // msb as name end
1533+ 6BBF             >
1533+ 6BBF A6 6B       >                dw      last_NFA            // Link to previous definition Name
1533+ 6BC1             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1533+ 6BC1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1533+ 6BC1             >                else
1533+ 6BC1 C3 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1533+ 6BC3             >                endif           ; ok        // for other definitions it "points" the correct handler
1533+ 6BC3             >                // Use of "; ok" to suppress "warning[fwdref]"
1533+ 6BC3             >
1533+ 6BC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1534+ 6BC3 D1                           pop     de
1535+ 6BC4 E1                           pop     hl
1536+ 6BC5 7E                           ld      a, (hl)
1537+ 6BC6 AB                           xor     e
1538+ 6BC7 77                           ld      (hl), a
1539+ 6BC8
1540+ 6BC8                              next
1540+ 6BC8 DD E9       >                jp      (ix)
1541+ 6BCA
1542+ 6BCA              //  ______________________________________________________________________
1543+ 6BCA              //
1544+ 6BCA              // @            a -- n
1545+ 6BCA              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1546+ 6BCA                              New_Def FETCH, "@", is_code, is_normal
1546+ 6BCA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1546+ 6BCA             >
1546+ 6BCA             >                // dummy db directives used to calculate length of namec
1546+ 6BCA 40          >                db      "@"
1546+ 6BCB             >len_NFA         defl    $ - temp_NFA
1546+ 6BCB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1546+ 6BCA             >
1546+ 6BCA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1546+ 6BCB 40          >                db      "@"               // name string in 7-bit ascii, but
1546+ 6BCC             >                org     $-1                 // alter last byte of Name just above to set
1546+ 6BCB C0          >                db      {b $} | END_BIT     // msb as name end
1546+ 6BCC             >
1546+ 6BCC B8 6B       >                dw      last_NFA            // Link to previous definition Name
1546+ 6BCE             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1546+ 6BCE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1546+ 6BCE             >                else
1546+ 6BCE D0 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1546+ 6BD0             >                endif           ; ok        // for other definitions it "points" the correct handler
1546+ 6BD0             >                // Use of "; ok" to suppress "warning[fwdref]"
1546+ 6BD0             >
1546+ 6BD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1547+ 6BD0 E1                           pop     hl
1548+ 6BD1 5E                           ld      e, (hl)             // low-byte
1549+ 6BD2 23                           inc     hl
1550+ 6BD3 56                           ld      d, (hl)             // high-byte
1551+ 6BD4 D5                           push    de
1552+ 6BD5                              next
1552+ 6BD5 DD E9       >                jp      (ix)
1553+ 6BD7
1554+ 6BD7              //  ______________________________________________________________________
1555+ 6BD7              //
1556+ 6BD7              // !            n a --
1557+ 6BD7              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1558+ 6BD7                              New_Def STORE, "!", is_code, is_normal
1558+ 6BD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1558+ 6BD7             >
1558+ 6BD7             >                // dummy db directives used to calculate length of namec
1558+ 6BD7 21          >                db      "!"
1558+ 6BD8             >len_NFA         defl    $ - temp_NFA
1558+ 6BD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1558+ 6BD7             >
1558+ 6BD7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1558+ 6BD8 21          >                db      "!"               // name string in 7-bit ascii, but
1558+ 6BD9             >                org     $-1                 // alter last byte of Name just above to set
1558+ 6BD8 A1          >                db      {b $} | END_BIT     // msb as name end
1558+ 6BD9             >
1558+ 6BD9 CA 6B       >                dw      last_NFA            // Link to previous definition Name
1558+ 6BDB             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1558+ 6BDB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1558+ 6BDB             >                else
1558+ 6BDB DD 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1558+ 6BDD             >                endif           ; ok        // for other definitions it "points" the correct handler
1558+ 6BDD             >                // Use of "; ok" to suppress "warning[fwdref]"
1558+ 6BDD             >
1558+ 6BDD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1559+ 6BDD E1                           pop     hl                  // address
1560+ 6BDE D1                           pop     de                  // < n
1561+ 6BDF 73                           ld      (hl), e             // low-byte
1562+ 6BE0 23                           inc     hl
1563+ 6BE1 72                           ld      (hl), d             // high-byte
1564+ 6BE2
1565+ 6BE2                              next
1565+ 6BE2 DD E9       >                jp      (ix)
1566+ 6BE4
1567+ 6BE4              //  ______________________________________________________________________
1568+ 6BE4              //
1569+ 6BE4              // c@           a -- c
1570+ 6BE4              // fetch a character n from address a
1571+ 6BE4                              New_Def CFETCH, "C@", is_code, is_normal
1571+ 6BE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1571+ 6BE4             >
1571+ 6BE4             >                // dummy db directives used to calculate length of namec
1571+ 6BE4 43 40       >                db      "C@"
1571+ 6BE6             >len_NFA         defl    $ - temp_NFA
1571+ 6BE6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1571+ 6BE4             >
1571+ 6BE4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1571+ 6BE5 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1571+ 6BE7             >                org     $-1                 // alter last byte of Name just above to set
1571+ 6BE6 C0          >                db      {b $} | END_BIT     // msb as name end
1571+ 6BE7             >
1571+ 6BE7 D7 6B       >                dw      last_NFA            // Link to previous definition Name
1571+ 6BE9             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1571+ 6BE9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1571+ 6BE9             >                else
1571+ 6BE9 EB 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1571+ 6BEB             >                endif           ; ok        // for other definitions it "points" the correct handler
1571+ 6BEB             >                // Use of "; ok" to suppress "warning[fwdref]"
1571+ 6BEB             >
1571+ 6BEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1572+ 6BEB E1                           pop     hl
1573+ 6BEC 6E                           ld      l, (hl)             // low-byte
1574+ 6BED 26 00                        ld      h, 0
1575+ 6BEF
1576+ 6BEF                              psh1
1576+ 6BEF E5          >                push    hl
1576+ 6BF0 DD E9       >                jp      (ix)
1577+ 6BF2
1578+ 6BF2              //  ______________________________________________________________________
1579+ 6BF2              //
1580+ 6BF2              // c!           c a --
1581+ 6BF2              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1582+ 6BF2                              New_Def CSTORE, "C!", is_code, is_normal
1582+ 6BF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1582+ 6BF2             >
1582+ 6BF2             >                // dummy db directives used to calculate length of namec
1582+ 6BF2 43 21       >                db      "C!"
1582+ 6BF4             >len_NFA         defl    $ - temp_NFA
1582+ 6BF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1582+ 6BF2             >
1582+ 6BF2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1582+ 6BF3 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1582+ 6BF5             >                org     $-1                 // alter last byte of Name just above to set
1582+ 6BF4 A1          >                db      {b $} | END_BIT     // msb as name end
1582+ 6BF5             >
1582+ 6BF5 E4 6B       >                dw      last_NFA            // Link to previous definition Name
1582+ 6BF7             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1582+ 6BF7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1582+ 6BF7             >                else
1582+ 6BF7 F9 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1582+ 6BF9             >                endif           ; ok        // for other definitions it "points" the correct handler
1582+ 6BF9             >                // Use of "; ok" to suppress "warning[fwdref]"
1582+ 6BF9             >
1582+ 6BF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1583+ 6BF9 E1                           pop     hl                  // < address
1584+ 6BFA D1                           pop     de
1585+ 6BFB 73                           ld      (hl), e             // low-byte
1586+ 6BFC
1587+ 6BFC                              next
1587+ 6BFC DD E9       >                jp      (ix)
1588+ 6BFE
1589+ 6BFE              //  ______________________________________________________________________
1590+ 6BFE              //
1591+ 6BFE              // 2@           a -- d
1592+ 6BFE              // fetch a 32 bits number d from address a and leaves it on top of the
1593+ 6BFE              // stack as two single numbers, high part as top of the stack.
1594+ 6BFE              // A double number is normally kept in CPU registers as HLDE.
1595+ 6BFE              // On stack a double number is treated as two single numbers
1596+ 6BFE              // where BC is on the top of the stack and HL is the second from top,
1597+ 6BFE              // so the sign of the number can be checked on top of stack
1598+ 6BFE              // and in the stack memory it appears as LHED.
1599+ 6BFE              // Instead, a 32 bits number d is kept in memory as EDLH
1600+ 6BFE              // with the lowest significant word in the lower location
1601+ 6BFE              // and the highest significant word in the higher location.
1602+ 6BFE              // fetch 32 bit number n from address a.
1603+ 6BFE                              New_Def TWO_FETCH, "2@", is_code, is_normal
1603+ 6BFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1603+ 6BFE             >
1603+ 6BFE             >                // dummy db directives used to calculate length of namec
1603+ 6BFE 32 40       >                db      "2@"
1603+ 6C00             >len_NFA         defl    $ - temp_NFA
1603+ 6C00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1603+ 6BFE             >
1603+ 6BFE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1603+ 6BFF 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1603+ 6C01             >                org     $-1                 // alter last byte of Name just above to set
1603+ 6C00 C0          >                db      {b $} | END_BIT     // msb as name end
1603+ 6C01             >
1603+ 6C01 F2 6B       >                dw      last_NFA            // Link to previous definition Name
1603+ 6C03             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1603+ 6C03 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1603+ 6C03             >                else
1603+ 6C03 05 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1603+ 6C05             >                endif           ; ok        // for other definitions it "points" the correct handler
1603+ 6C05             >                // Use of "; ok" to suppress "warning[fwdref]"
1603+ 6C05             >
1603+ 6C05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1604+ 6C05 E1                           pop     hl                  // address
1605+ 6C06 5E                           ld      e, (hl)             // low-byte
1606+ 6C07 23                           inc     hl
1607+ 6C08 56                           ld      d, (hl)             // high-byte
1608+ 6C09
1609+ 6C09 23                           inc     hl
1610+ 6C0A 7E                           ld      a, (hl)             // low-byte
1611+ 6C0B 23                           inc     hl
1612+ 6C0C 66                           ld      h, (hl)             // high-byte
1613+ 6C0D 6F                           ld      l, a
1614+ 6C0E                              psh2
1614+ 6C0E D5          >                push    de
1614+ 6C0F E5          >                push    hl
1614+ 6C10 DD E9       >                jp      (ix)
1615+ 6C12
1616+ 6C12              //  ______________________________________________________________________
1617+ 6C12              //
1618+ 6C12              // 2!           d a --
1619+ 6C12              // stores a 32 bits number d from address a and leaves it on top of the
1620+ 6C12              // stack as two single numbers, high part as top of the stack.
1621+ 6C12              // A double number is normally kept in CPU registers as HLDE.
1622+ 6C12              // On stack a double number is treated as two single numbers
1623+ 6C12              // where BC is on the top of the stack and HL is the second from top,
1624+ 6C12              // so the sign of the number can be checked on top of stack
1625+ 6C12              // and in the stack memory it appears as LHED.
1626+ 6C12              // Instead, a 32 bits number d is kept in memory as EDLH
1627+ 6C12              // with the lowest significant word in the lower location
1628+ 6C12              // and the highest significant word in the higher location.
1629+ 6C12              // fetch 32 bit number n from address a.
1630+ 6C12                              New_Def TWO_STORE, "2!", is_code, is_normal
1630+ 6C12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1630+ 6C12             >
1630+ 6C12             >                // dummy db directives used to calculate length of namec
1630+ 6C12 32 21       >                db      "2!"
1630+ 6C14             >len_NFA         defl    $ - temp_NFA
1630+ 6C14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1630+ 6C12             >
1630+ 6C12 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1630+ 6C13 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1630+ 6C15             >                org     $-1                 // alter last byte of Name just above to set
1630+ 6C14 A1          >                db      {b $} | END_BIT     // msb as name end
1630+ 6C15             >
1630+ 6C15 FE 6B       >                dw      last_NFA            // Link to previous definition Name
1630+ 6C17             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1630+ 6C17 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1630+ 6C17             >                else
1630+ 6C17 19 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1630+ 6C19             >                endif           ; ok        // for other definitions it "points" the correct handler
1630+ 6C19             >                // Use of "; ok" to suppress "warning[fwdref]"
1630+ 6C19             >
1630+ 6C19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1631+ 6C19 60                           ld      h, b
1632+ 6C1A 69                           ld      l, c
1633+ 6C1B D1                           pop     de                  // de has address
1634+ 6C1C C1                           pop     bc                  // < high-part
1635+ 6C1D E3                           ex      (sp), hl            // < low-part > Instruction Pointer
1636+ 6C1E EB                           ex      de, hl
1637+ 6C1F 73                           ld      (hl), e
1638+ 6C20 23                           inc     hl
1639+ 6C21 72                           ld      (hl), d
1640+ 6C22 23                           inc     hl
1641+ 6C23 71                           ld      (hl), c
1642+ 6C24 23                           inc     hl
1643+ 6C25 70                           ld      (hl), b
1644+ 6C26 C1                           pop     bc                  // Restore Instruction Pointer
1645+ 6C27
1646+ 6C27                              next
1646+ 6C27 DD E9       >                jp      (ix)
1647+ 6C29
1648+ 6C29              //  ______________________________________________________________________
1649+ 6C29              //
1650+ 6C29              // p@           a -- c
1651+ 6C29              // Read one byte from port a and leave the result on top of stack
1652+ 6C29                              New_Def PFETCH, "P@", is_code, is_normal
1652+ 6C29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1652+ 6C29             >
1652+ 6C29             >                // dummy db directives used to calculate length of namec
1652+ 6C29 50 40       >                db      "P@"
1652+ 6C2B             >len_NFA         defl    $ - temp_NFA
1652+ 6C2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1652+ 6C29             >
1652+ 6C29 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1652+ 6C2A 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1652+ 6C2C             >                org     $-1                 // alter last byte of Name just above to set
1652+ 6C2B C0          >                db      {b $} | END_BIT     // msb as name end
1652+ 6C2C             >
1652+ 6C2C 12 6C       >                dw      last_NFA            // Link to previous definition Name
1652+ 6C2E             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1652+ 6C2E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1652+ 6C2E             >                else
1652+ 6C2E 30 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1652+ 6C30             >                endif           ; ok        // for other definitions it "points" the correct handler
1652+ 6C30             >                // Use of "; ok" to suppress "warning[fwdref]"
1652+ 6C30             >
1652+ 6C30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1653+ 6C30 50                           ld      d, b
1654+ 6C31 59                           ld      e, c
1655+ 6C32
1656+ 6C32 C1                           pop     bc
1657+ 6C33 26 00                        ld      h, 0
1658+ 6C35 ED 68                        in      l, (c)
1659+ 6C37 42                           ld      b, d
1660+ 6C38 4B                           ld      c, e
1661+ 6C39                              psh1
1661+ 6C39 E5          >                push    hl
1661+ 6C3A DD E9       >                jp      (ix)
1662+ 6C3C
1663+ 6C3C              //  ______________________________________________________________________
1664+ 6C3C              //
1665+ 6C3C              // p!           c a --
1666+ 6C3C              // Send one byte (top of stack) to port a
1667+ 6C3C                              New_Def PSTORE, "P!", is_code, is_normal
1667+ 6C3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1667+ 6C3C             >
1667+ 6C3C             >                // dummy db directives used to calculate length of namec
1667+ 6C3C 50 21       >                db      "P!"
1667+ 6C3E             >len_NFA         defl    $ - temp_NFA
1667+ 6C3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1667+ 6C3C             >
1667+ 6C3C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1667+ 6C3D 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1667+ 6C3F             >                org     $-1                 // alter last byte of Name just above to set
1667+ 6C3E A1          >                db      {b $} | END_BIT     // msb as name end
1667+ 6C3F             >
1667+ 6C3F 29 6C       >                dw      last_NFA            // Link to previous definition Name
1667+ 6C41             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1667+ 6C41 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1667+ 6C41             >                else
1667+ 6C41 43 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1667+ 6C43             >                endif           ; ok        // for other definitions it "points" the correct handler
1667+ 6C43             >                // Use of "; ok" to suppress "warning[fwdref]"
1667+ 6C43             >
1667+ 6C43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1668+ 6C43 50                           ld      d, b
1669+ 6C44 59                           ld      e, c
1670+ 6C45
1671+ 6C45 C1                           pop     bc
1672+ 6C46 E1                           pop     hl                  // < c
1673+ 6C47 ED 69                        out     (c), l              // low-byte
1674+ 6C49 42                           ld      b, d
1675+ 6C4A 4B                           ld      c, e
1676+ 6C4B
1677+ 6C4B                              next
1677+ 6C4B DD E9       >                jp      (ix)
1678+ 6C4D
1679+ 6C4D
1680+ 6C4D              //  ______________________________________________________________________
1681+ 6C4D              //
1682+ 6C4D              // 2*           n1 -- n2
1683+ 6C4D              // doubles the number at top of stack
1684+ 6C4D                              New_Def TWO_MUL, "2*", is_code, is_normal
1684+ 6C4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1684+ 6C4D             >
1684+ 6C4D             >                // dummy db directives used to calculate length of namec
1684+ 6C4D 32 2A       >                db      "2*"
1684+ 6C4F             >len_NFA         defl    $ - temp_NFA
1684+ 6C4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1684+ 6C4D             >
1684+ 6C4D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1684+ 6C4E 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1684+ 6C50             >                org     $-1                 // alter last byte of Name just above to set
1684+ 6C4F AA          >                db      {b $} | END_BIT     // msb as name end
1684+ 6C50             >
1684+ 6C50 3C 6C       >                dw      last_NFA            // Link to previous definition Name
1684+ 6C52             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1684+ 6C52 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1684+ 6C52             >                else
1684+ 6C52 54 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1684+ 6C54             >                endif           ; ok        // for other definitions it "points" the correct handler
1684+ 6C54             >                // Use of "; ok" to suppress "warning[fwdref]"
1684+ 6C54             >
1684+ 6C54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1685+ 6C54              Two_Mul_Ptr:
1686+ 6C54 E1                           pop     hl
1687+ 6C55 29                           add     hl, hl
1688+ 6C56
1689+ 6C56                              psh1
1689+ 6C56 E5          >                push    hl
1689+ 6C57 DD E9       >                jp      (ix)
1690+ 6C59
1691+ 6C59              //  ______________________________________________________________________
1692+ 6C59              //
1693+ 6C59              // 2/           n1 -- n2
1694+ 6C59              // halves the top of stack, sign is unchanged
1695+ 6C59                              New_Def TWO_DIV, "2/", is_code, is_normal
1695+ 6C59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1695+ 6C59             >
1695+ 6C59             >                // dummy db directives used to calculate length of namec
1695+ 6C59 32 2F       >                db      "2/"
1695+ 6C5B             >len_NFA         defl    $ - temp_NFA
1695+ 6C5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1695+ 6C59             >
1695+ 6C59 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1695+ 6C5A 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1695+ 6C5C             >                org     $-1                 // alter last byte of Name just above to set
1695+ 6C5B AF          >                db      {b $} | END_BIT     // msb as name end
1695+ 6C5C             >
1695+ 6C5C 4D 6C       >                dw      last_NFA            // Link to previous definition Name
1695+ 6C5E             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1695+ 6C5E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1695+ 6C5E             >                else
1695+ 6C5E 60 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1695+ 6C60             >                endif           ; ok        // for other definitions it "points" the correct handler
1695+ 6C60             >                // Use of "; ok" to suppress "warning[fwdref]"
1695+ 6C60             >
1695+ 6C60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1696+ 6C60 E1                           pop     hl
1697+ 6C61 CB 2C                        sra     h
1698+ 6C63 CB 1D                        rr      l
1699+ 6C65
1700+ 6C65                              psh1
1700+ 6C65 E5          >                push    hl
1700+ 6C66 DD E9       >                jp      (ix)
1701+ 6C68
1702+ 6C68              //  ______________________________________________________________________
1703+ 6C68              //
1704+ 6C68              // lshift       n1 u -- n2
1705+ 6C68              // bit left shift of u bits
1706+ 6C68                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1706+ 6C68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1706+ 6C68             >
1706+ 6C68             >                // dummy db directives used to calculate length of namec
1706+ 6C68 4C 53 48 49 >                db      "LSHIFT"
1706+ 6C6C 46 54       >
1706+ 6C6E             >len_NFA         defl    $ - temp_NFA
1706+ 6C6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1706+ 6C68             >
1706+ 6C68 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1706+ 6C69 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1706+ 6C6D 46 54       >
1706+ 6C6F             >                org     $-1                 // alter last byte of Name just above to set
1706+ 6C6E D4          >                db      {b $} | END_BIT     // msb as name end
1706+ 6C6F             >
1706+ 6C6F 59 6C       >                dw      last_NFA            // Link to previous definition Name
1706+ 6C71             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1706+ 6C71 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1706+ 6C71             >                else
1706+ 6C71 73 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1706+ 6C73             >                endif           ; ok        // for other definitions it "points" the correct handler
1706+ 6C73             >                // Use of "; ok" to suppress "warning[fwdref]"
1706+ 6C73             >
1706+ 6C73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1707+ 6C73 D1                           pop     de
1708+ 6C74
1709+ 6C74 E1                           pop     hl
1710+ 6C75 7B                           ld      a, e
1711+ 6C76 B7                           or      a
1712+ 6C77 28 04                        jr      z, Lshift_Zero
1713+ 6C79              Lshift_Loop:
1714+ 6C79 29                                   add     hl, hl
1715+ 6C7A 3D                                   dec     a
1716+ 6C7B 20 FC                            jr      nz, Lshift_Loop
1717+ 6C7D              Lshift_Zero:
1718+ 6C7D
1719+ 6C7D
1720+ 6C7D                              psh1
1720+ 6C7D E5          >                push    hl
1720+ 6C7E DD E9       >                jp      (ix)
1721+ 6C80
1722+ 6C80              //  ______________________________________________________________________
1723+ 6C80              //
1724+ 6C80              // rshift       n1 u -- n2
1725+ 6C80              // bit right shift of u bits
1726+ 6C80                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1726+ 6C80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1726+ 6C80             >
1726+ 6C80             >                // dummy db directives used to calculate length of namec
1726+ 6C80 52 53 48 49 >                db      "RSHIFT"
1726+ 6C84 46 54       >
1726+ 6C86             >len_NFA         defl    $ - temp_NFA
1726+ 6C86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1726+ 6C80             >
1726+ 6C80 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1726+ 6C81 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1726+ 6C85 46 54       >
1726+ 6C87             >                org     $-1                 // alter last byte of Name just above to set
1726+ 6C86 D4          >                db      {b $} | END_BIT     // msb as name end
1726+ 6C87             >
1726+ 6C87 68 6C       >                dw      last_NFA            // Link to previous definition Name
1726+ 6C89             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1726+ 6C89 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1726+ 6C89             >                else
1726+ 6C89 8B 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1726+ 6C8B             >                endif           ; ok        // for other definitions it "points" the correct handler
1726+ 6C8B             >                // Use of "; ok" to suppress "warning[fwdref]"
1726+ 6C8B             >
1726+ 6C8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1727+ 6C8B D1                           pop     de
1728+ 6C8C
1729+ 6C8C E1                           pop     hl
1730+ 6C8D 7B                           ld      a, e
1731+ 6C8E B7                           or      a
1732+ 6C8F 28 07                        jr      z, Rshift_Zero
1733+ 6C91              Rshift_Loop:
1734+ 6C91 CB 3C                                srl     h
1735+ 6C93 CB 1D                                rr      l
1736+ 6C95 3D                                   dec     a
1737+ 6C96 20 F9                            jr      nz, Rshift_Loop
1738+ 6C98              Rshift_Zero:
1739+ 6C98
1740+ 6C98
1741+ 6C98                              psh1
1741+ 6C98 E5          >                push    hl
1741+ 6C99 DD E9       >                jp      (ix)
1742+ 6C9B
1743+ 6C9B              //  ______________________________________________________________________
1744+ 6C9B              //
1745+ 6C9B              // cells        n1 -- n2
1746+ 6C9B              // decrement by 2 top of stack
1747+ 6C9B                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1747+ 6C9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1747+ 6C9B             >
1747+ 6C9B             >                // dummy db directives used to calculate length of namec
1747+ 6C9B 43 45 4C 4C >                db      "CELLS"
1747+ 6C9F 53          >
1747+ 6CA0             >len_NFA         defl    $ - temp_NFA
1747+ 6CA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1747+ 6C9B             >
1747+ 6C9B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1747+ 6C9C 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1747+ 6CA0 53          >
1747+ 6CA1             >                org     $-1                 // alter last byte of Name just above to set
1747+ 6CA0 D3          >                db      {b $} | END_BIT     // msb as name end
1747+ 6CA1             >
1747+ 6CA1 80 6C       >                dw      last_NFA            // Link to previous definition Name
1747+ 6CA3             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1747+ 6CA3 54 6C       >                dw      Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1747+ 6CA5             >                else
1747+ 6CA5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1747+ 6CA5             >                endif           ; ok        // for other definitions it "points" the correct handler
1747+ 6CA5             >                // Use of "; ok" to suppress "warning[fwdref]"
1747+ 6CA5             >
1747+ 6CA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1748+ 6CA5
1749+ 6CA5
1750+ 6CA5              //  ______________________________________________________________________
1751+ 6CA5
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
 109  6CA5                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
   1+ 6CA5              //  ______________________________________________________________________
   2+ 6CA5              //
   3+ 6CA5              //  L1.asm
   4+ 6CA5              //
   5+ 6CA5              //  Level-1 definitions and derivate
   6+ 6CA5              //  ______________________________________________________________________
   7+ 6CA5
   8+ 6CA5              //  ______________________________________________________________________
   9+ 6CA5              //
  10+ 6CA5              // :            -- cccc     ( compile time )
  11+ 6CA5              //              i*x -- j*x  ( run time )
  12+ 6CA5              // Colon Definition
  13+ 6CA5                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6CA5             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6CA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6CA5             >
  13+ 6CA5             >                // dummy db directives used to calculate length of namec
  13+ 6CA5 3A          >                db      ":"
  13+ 6CA6             >len_NFA         defl    $ - temp_NFA
  13+ 6CA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6CA5             >
  13+ 6CA5 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6CA6 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6CA7             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6CA6 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6CA7             >
  13+ 6CA7 9B 6C       >                dw      last_NFA            // Link to previous definition Name
  13+ 6CA9             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6CA9 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6CAB             >                else
  13+ 6CAB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 6CAB             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6CAB             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6CAB             >
  13+ 6CAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6CAB
  15+ 6CAB 0B 71                        dw      QEXEC                   // ?exec
  16+ 6CAD C6 70                        dw      STORE_CSP               // !csp
  17+ 6CAF 7A 6E CE 6B                  dw      CURRENT, FETCH          // current @
  18+ 6CB3 6D 6E DB 6B                  dw      CONTEXT, STORE          // context !
  19+ 6CB7 A1 76                        dw      CREATE                  // create  ( forward )
  20+ 6CB9 A5 71                        dw      SMUDGE                  // dmudge
  21+ 6CBB 90 71                        dw      SQUARED_CLOSE           // ]
  22+ 6CBD FB 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6CBF                                                              // ... immediate
  24+ 6CBF              Enter_Ptr:
  25+ 6CBF                              // via call coded in CFA
  26+ 6CBF                              ldhlrp
  26+ 6CBF 2A 30 64    >                ld      hl,(RP_Pointer)
  27+ 6CC2 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6CC3 70                           ld      (hl), b
  29+ 6CC4 2B                           dec     hl
  30+ 6CC5 71                           ld      (hl), c
  31+ 6CC6                              ldrphl
  31+ 6CC6 22 30 64    >                ld      (RP_Pointer),hl
  32+ 6CC9 13                           inc     de
  33+ 6CCA 4B                           ld      c, e
  34+ 6CCB 42                           ld      b, d
  35+ 6CCC                              next
  35+ 6CCC DD E9       >                jp      (ix)
  36+ 6CCE
  37+ 6CCE              //  ______________________________________________________________________
  38+ 6CCE              //
  39+ 6CCE              // ;            --
  40+ 6CCE              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6CCE                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6CCE             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6CCE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6CCE             >
  41+ 6CCE             >                // dummy db directives used to calculate length of namec
  41+ 6CCE 3B          >                db      ";"
  41+ 6CCF             >len_NFA         defl    $ - temp_NFA
  41+ 6CCF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6CCE             >
  41+ 6CCE C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6CCF 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6CD0             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6CCF BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6CD0             >
  41+ 6CD0 A5 6C       >                dw      last_NFA            // Link to previous definition Name
  41+ 6CD2             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6CD2 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6CD4             >                else
  41+ 6CD4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  41+ 6CD4             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6CD4             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6CD4             >
  41+ 6CD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6CD4
  43+ 6CD4 35 71                        dw      QCSP                    // ?csp
  44+ 6CD6 6C 71 95 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6CDA A5 71                        dw      SMUDGE                  // smudge
  46+ 6CDC 82 71                        dw      SQUARED_OPEN            // [
  47+ 6CDE 95 69                        dw      EXIT                    // ; immediate
  48+ 6CE0
  49+ 6CE0              //  ______________________________________________________________________
  50+ 6CE0              //
  51+ 6CE0              // noop         --
  52+ 6CE0
  53+ 6CE0                              Colon_Def NOOP, "NOOP", is_normal
  53+ 6CE0             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 6CE0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6CE0             >
  53+ 6CE0             >                // dummy db directives used to calculate length of namec
  53+ 6CE0 4E 4F 4F 50 >                db      "NOOP"
  53+ 6CE4             >len_NFA         defl    $ - temp_NFA
  53+ 6CE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6CE0             >
  53+ 6CE0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6CE1 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6CE5             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6CE4 D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6CE5             >
  53+ 6CE5 CE 6C       >                dw      last_NFA            // Link to previous definition Name
  53+ 6CE7             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6CE7 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 6CE9             >                else
  53+ 6CE9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  53+ 6CE9             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6CE9             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6CE9             >
  53+ 6CE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6CE9 95 69                        dw      EXIT
  55+ 6CEB
  56+ 6CEB              //  ______________________________________________________________________
  57+ 6CEB              //
  58+ 6CEB              // constant     n -- cccc     ( compile time )
  59+ 6CEB              //              -- n          ( run time )
  60+ 6CEB              // Constant definition.
  61+ 6CEB                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6CEB             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6CEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6CEB             >
  61+ 6CEB             >                // dummy db directives used to calculate length of namec
  61+ 6CEB 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6CEF 54 41 4E 54 >
  61+ 6CF3             >len_NFA         defl    $ - temp_NFA
  61+ 6CF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6CEB             >
  61+ 6CEB 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6CEC 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6CF0 54 41 4E 54 >
  61+ 6CF4             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6CF3 D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6CF4             >
  61+ 6CF4 E0 6C       >                dw      last_NFA            // Link to previous definition Name
  61+ 6CF6             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6CF6 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6CF8             >                else
  61+ 6CF8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  61+ 6CF8             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6CF8             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6CF8             >
  61+ 6CF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6CF8
  63+ 6CF8 A1 76                        dw      CREATE                  // create
  64+ 6CFA 28 6F                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6CFC FB 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6CFE              Constant_Ptr:
  67+ 6CFE
  68+ 6CFE 13                           inc     de
  69+ 6CFF EB                           ex      de, hl
  70+ 6D00
  71+ 6D00 5E                           ld      e, (hl)
  72+ 6D01 23                           inc     hl
  73+ 6D02 56                           ld      d, (hl)
  74+ 6D03 D5                           push    de
  75+ 6D04                              next
  75+ 6D04 DD E9       >                jp      (ix)
  76+ 6D06
  77+ 6D06              //  ______________________________________________________________________
  78+ 6D06              //
  79+ 6D06              // variable     n -- cccc     ( compile time )
  80+ 6D06              //              -- a          ( run time )
  81+ 6D06              // Variable definition, n is the initial value.
  82+ 6D06                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6D06             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6D06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6D06             >
  82+ 6D06             >                // dummy db directives used to calculate length of namec
  82+ 6D06 56 41 52 49 >                db      "VARIABLE"
  82+ 6D0A 41 42 4C 45 >
  82+ 6D0E             >len_NFA         defl    $ - temp_NFA
  82+ 6D0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6D06             >
  82+ 6D06 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6D07 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6D0B 41 42 4C 45 >
  82+ 6D0F             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6D0E C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6D0F             >
  82+ 6D0F EB 6C       >                dw      last_NFA            // Link to previous definition Name
  82+ 6D11             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6D11 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6D13             >                else
  82+ 6D13 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  82+ 6D13             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6D13             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6D13             >
  82+ 6D13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6D13
  84+ 6D13 F6 6C                        dw      CONSTANT                // constant
  85+ 6D15 FB 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6D17              Variable_Ptr:
  87+ 6D17
  88+ 6D17 13                           inc     de
  89+ 6D18 D5                           push    de                  // balance TOS before overwrite it
  90+ 6D19
  91+ 6D19                              next
  91+ 6D19 DD E9       >                jp      (ix)
  92+ 6D1B
  93+ 6D1B              //  ______________________________________________________________________
  94+ 6D1B              //
  95+ 6D1B              // user         b -- cccc     ( compile time )
  96+ 6D1B              //              -- a          ( run time )
  97+ 6D1B              // User variable definition
  98+ 6D1B                              Colon_Def USER, "USER", is_normal
  98+ 6D1B             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6D1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6D1B             >
  98+ 6D1B             >                // dummy db directives used to calculate length of namec
  98+ 6D1B 55 53 45 52 >                db      "USER"
  98+ 6D1F             >len_NFA         defl    $ - temp_NFA
  98+ 6D1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6D1B             >
  98+ 6D1B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6D1C 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6D20             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6D1F D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6D20             >
  98+ 6D20 06 6D       >                dw      last_NFA            // Link to previous definition Name
  98+ 6D22             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6D22 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6D24             >                else
  98+ 6D24 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  98+ 6D24             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6D24             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6D24             >
  98+ 6D24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6D24
 100+ 6D24 A1 76                        dw      CREATE                  // create
 101+ 6D26 39 6F                        dw      CCOMMA                  // c,
 102+ 6D28 FB 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6D2A
 104+ 6D2A
 105+ 6D2A              User_Ptr:
 106+ 6D2A                              // via call coded in CFA
 107+ 6D2A 13                           inc     de
 108+ 6D2B EB                           ex      de, hl
 109+ 6D2C 5E                           ld      e, (hl)
 110+ 6D2D 16 00                        ld      d, 0
 111+ 6D2F 2A 2E 64                     ld      hl, (USER_Pointer)
 112+ 6D32 19                           add     hl, de
 113+ 6D33
 114+ 6D33                              psh1
 114+ 6D33 E5          >                push    hl
 114+ 6D34 DD E9       >                jp      (ix)
 115+ 6D36
 116+ 6D36              //  ______________________________________________________________________
 117+ 6D36              //
 118+ 6D36                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6D36             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6D36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6D36             >
 118+ 6D36             >                // dummy db directives used to calculate length of namec
 118+ 6D36 30          >                db      "0"
 118+ 6D37             >len_NFA         defl    $ - temp_NFA
 118+ 6D37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6D36             >
 118+ 6D36 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6D37 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6D38             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6D37 B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6D38             >
 118+ 6D38 1B 6D       >                dw      last_NFA            // Link to previous definition Name
 118+ 6D3A             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6D3A FE 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6D3C             >                else
 118+ 6D3C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 118+ 6D3C             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6D3C             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6D3C             >
 118+ 6D3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6D3C 00 00       >                dw      0
 119+ 6D3E                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6D3E             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6D3E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6D3E             >
 119+ 6D3E             >                // dummy db directives used to calculate length of namec
 119+ 6D3E 31          >                db      "1"
 119+ 6D3F             >len_NFA         defl    $ - temp_NFA
 119+ 6D3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6D3E             >
 119+ 6D3E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6D3F 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6D40             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6D3F B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6D40             >
 119+ 6D40 36 6D       >                dw      last_NFA            // Link to previous definition Name
 119+ 6D42             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6D42 FE 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6D44             >                else
 119+ 6D44 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 119+ 6D44             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6D44             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6D44             >
 119+ 6D44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6D44 01 00       >                dw      1
 120+ 6D46                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6D46             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6D46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6D46             >
 120+ 6D46             >                // dummy db directives used to calculate length of namec
 120+ 6D46 32          >                db      "2"
 120+ 6D47             >len_NFA         defl    $ - temp_NFA
 120+ 6D47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6D46             >
 120+ 6D46 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6D47 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6D48             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6D47 B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6D48             >
 120+ 6D48 3E 6D       >                dw      last_NFA            // Link to previous definition Name
 120+ 6D4A             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6D4A FE 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6D4C             >                else
 120+ 6D4C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 120+ 6D4C             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6D4C             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6D4C             >
 120+ 6D4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6D4C 02 00       >                dw      2
 121+ 6D4E                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6D4E             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6D4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6D4E             >
 121+ 6D4E             >                // dummy db directives used to calculate length of namec
 121+ 6D4E 33          >                db      "3"
 121+ 6D4F             >len_NFA         defl    $ - temp_NFA
 121+ 6D4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6D4E             >
 121+ 6D4E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6D4F 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6D50             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6D4F B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6D50             >
 121+ 6D50 46 6D       >                dw      last_NFA            // Link to previous definition Name
 121+ 6D52             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6D52 FE 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6D54             >                else
 121+ 6D54 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 6D54             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6D54             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6D54             >
 121+ 6D54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6D54 03 00       >                dw      3
 122+ 6D56                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6D56             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6D56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6D56             >
 122+ 6D56             >                // dummy db directives used to calculate length of namec
 122+ 6D56 2D 31       >                db      "-1"
 122+ 6D58             >len_NFA         defl    $ - temp_NFA
 122+ 6D58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6D56             >
 122+ 6D56 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6D57 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6D59             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6D58 B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6D59             >
 122+ 6D59 4E 6D       >                dw      last_NFA            // Link to previous definition Name
 122+ 6D5B             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6D5B FE 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6D5D             >                else
 122+ 6D5D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 6D5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6D5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6D5D             >
 122+ 6D5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6D5D FF FF       >                dw      -1
 123+ 6D5F                              Constant_Def BL         ,   "BL"    , $20
 123+ 6D5F             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6D5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6D5F             >
 123+ 6D5F             >                // dummy db directives used to calculate length of namec
 123+ 6D5F 42 4C       >                db      "BL"
 123+ 6D61             >len_NFA         defl    $ - temp_NFA
 123+ 6D61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6D5F             >
 123+ 6D5F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6D60 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6D62             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6D61 CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6D62             >
 123+ 6D62 56 6D       >                dw      last_NFA            // Link to previous definition Name
 123+ 6D64             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6D64 FE 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6D66             >                else
 123+ 6D66 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 123+ 6D66             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6D66             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6D66             >
 123+ 6D66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6D66 20 00       >                dw      $20
 124+ 6D68                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6D68             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6D68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6D68             >
 124+ 6D68             >                // dummy db directives used to calculate length of namec
 124+ 6D68 43 2F 4C    >                db      "C/L"
 124+ 6D6B             >len_NFA         defl    $ - temp_NFA
 124+ 6D6B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6D68             >
 124+ 6D68 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6D69 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6D6C             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6D6B CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6D6C             >
 124+ 6D6C 5F 6D       >                dw      last_NFA            // Link to previous definition Name
 124+ 6D6E             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6D6E FE 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6D70             >                else
 124+ 6D70 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 124+ 6D70             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6D70             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6D70             >
 124+ 6D70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6D70 40 00       >                dw      64
 125+ 6D72                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6D72             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6D72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6D72             >
 125+ 6D72             >                // dummy db directives used to calculate length of namec
 125+ 6D72 42 2F 42 55 >                db      "B/BUF"
 125+ 6D76 46          >
 125+ 6D77             >len_NFA         defl    $ - temp_NFA
 125+ 6D77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6D72             >
 125+ 6D72 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6D73 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6D77 46          >
 125+ 6D78             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6D77 C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6D78             >
 125+ 6D78 68 6D       >                dw      last_NFA            // Link to previous definition Name
 125+ 6D7A             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6D7A FE 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6D7C             >                else
 125+ 6D7C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 125+ 6D7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6D7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6D7C             >
 125+ 6D7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6D7C 00 02       >                dw      512
 126+ 6D7E                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6D7E             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6D7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6D7E             >
 126+ 6D7E             >                // dummy db directives used to calculate length of namec
 126+ 6D7E 42 2F 53 43 >                db      "B/SCR"
 126+ 6D82 52          >
 126+ 6D83             >len_NFA         defl    $ - temp_NFA
 126+ 6D83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6D7E             >
 126+ 6D7E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6D7F 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6D83 52          >
 126+ 6D84             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6D83 D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6D84             >
 126+ 6D84 72 6D       >                dw      last_NFA            // Link to previous definition Name
 126+ 6D86             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6D86 FE 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6D88             >                else
 126+ 6D88 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6D88             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6D88             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6D88             >
 126+ 6D88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6D88 02 00       >                dw      2
 127+ 6D8A                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6D8A             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6D8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6D8A             >
 127+ 6D8A             >                // dummy db directives used to calculate length of namec
 127+ 6D8A 4C 2F 53 43 >                db      "L/SCR"
 127+ 6D8E 52          >
 127+ 6D8F             >len_NFA         defl    $ - temp_NFA
 127+ 6D8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6D8A             >
 127+ 6D8A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6D8B 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6D8F 52          >
 127+ 6D90             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6D8F D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6D90             >
 127+ 6D90 7E 6D       >                dw      last_NFA            // Link to previous definition Name
 127+ 6D92             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6D92 FE 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6D94             >                else
 127+ 6D94 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 6D94             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6D94             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6D94             >
 127+ 6D94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6D94 10 00       >                dw      16
 128+ 6D96
 129+ 6D96              //  ______________________________________________________________________
 130+ 6D96              //
 131+ 6D96              // +origin         --
 132+ 6D96                              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 132+ 6D96             >                New_Def  PLUS_ORIGIN, "+ORIGIN", Enter_Ptr, is_normal ; ok
 132+ 6D96             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 6D96             >
 132+ 6D96             >                // dummy db directives used to calculate length of namec
 132+ 6D96 2B 4F 52 49 >                db      "+ORIGIN"
 132+ 6D9A 47 49 4E    >
 132+ 6D9D             >len_NFA         defl    $ - temp_NFA
 132+ 6D9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 6D96             >
 132+ 6D96 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 6D97 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 132+ 6D9B 47 49 4E    >
 132+ 6D9E             >                org     $-1                 // alter last byte of Name just above to set
 132+ 6D9D CE          >                db      {b $} | END_BIT     // msb as name end
 132+ 6D9E             >
 132+ 6D9E 8A 6D       >                dw      last_NFA            // Link to previous definition Name
 132+ 6DA0             >PLUS_ORIGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 6DA0 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 132+ 6DA2             >                else
 132+ 6DA2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 132+ 6DA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 6DA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 6DA2             >
 132+ 6DA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 6DA2 45 64 00 64                  dw      LIT, Cold_origin        // [ hex 6400 ] literal
 134+ 6DA6 27 6A                        dw      PLUS                    // +
 135+ 6DA8 95 69                        dw      EXIT                    // ;
 136+ 6DAA
 137+ 6DAA              //  ______________________________________________________________________
 138+ 6DAA              //
 139+ 6DAA                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 139+ 6DAA             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 139+ 6DAA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 6DAA             >
 139+ 6DAA             >                // dummy db directives used to calculate length of namec
 139+ 6DAA 28 4E 45 58 >                db      "(NEXT)"
 139+ 6DAE 54 29       >
 139+ 6DB0             >len_NFA         defl    $ - temp_NFA
 139+ 6DB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 6DAA             >
 139+ 6DAA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 6DAB 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 139+ 6DAF 54 29       >
 139+ 6DB1             >                org     $-1                 // alter last byte of Name just above to set
 139+ 6DB0 A9          >                db      {b $} | END_BIT     // msb as name end
 139+ 6DB1             >
 139+ 6DB1 96 6D       >                dw      last_NFA            // Link to previous definition Name
 139+ 6DB3             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 6DB3 FE 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 139+ 6DB5             >                else
 139+ 6DB5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 139+ 6DB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 6DB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 6DB5             >
 139+ 6DB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6DB5 34 64       >                dw      Next_Ptr
 140+ 6DB7
 141+ 6DB7              //  ______________________________________________________________________
 142+ 6DB7              //
 143+ 6DB7
 144+ 6DB7                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 144+ 6DB7             >                New_Def  S0, "S0", User_Ptr, is_normal
 144+ 6DB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 6DB7             >
 144+ 6DB7             >                // dummy db directives used to calculate length of namec
 144+ 6DB7 53 30       >                db      "S0"
 144+ 6DB9             >len_NFA         defl    $ - temp_NFA
 144+ 6DB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 6DB7             >
 144+ 6DB7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 6DB8 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 144+ 6DBA             >                org     $-1                 // alter last byte of Name just above to set
 144+ 6DB9 B0          >                db      {b $} | END_BIT     // msb as name end
 144+ 6DBA             >
 144+ 6DBA AA 6D       >                dw      last_NFA            // Link to previous definition Name
 144+ 6DBC             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 6DBC 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 144+ 6DBE             >                else
 144+ 6DBE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 6DBE             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 6DBE             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 6DBE             >
 144+ 6DBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 6DBE 06          >                db      06
 145+ 6DBF                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 145+ 6DBF             >                New_Def  R0, "R0", User_Ptr, is_normal
 145+ 6DBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 145+ 6DBF             >
 145+ 6DBF             >                // dummy db directives used to calculate length of namec
 145+ 6DBF 52 30       >                db      "R0"
 145+ 6DC1             >len_NFA         defl    $ - temp_NFA
 145+ 6DC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 145+ 6DBF             >
 145+ 6DBF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 145+ 6DC0 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 145+ 6DC2             >                org     $-1                 // alter last byte of Name just above to set
 145+ 6DC1 B0          >                db      {b $} | END_BIT     // msb as name end
 145+ 6DC2             >
 145+ 6DC2 B7 6D       >                dw      last_NFA            // Link to previous definition Name
 145+ 6DC4             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 145+ 6DC4 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 145+ 6DC6             >                else
 145+ 6DC6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 145+ 6DC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 145+ 6DC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 145+ 6DC6             >
 145+ 6DC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 6DC6 08          >                db      08
 146+ 6DC7                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 146+ 6DC7             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 146+ 6DC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 6DC7             >
 146+ 6DC7             >                // dummy db directives used to calculate length of namec
 146+ 6DC7 54 49 42    >                db      "TIB"
 146+ 6DCA             >len_NFA         defl    $ - temp_NFA
 146+ 6DCA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 6DC7             >
 146+ 6DC7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 6DC8 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 146+ 6DCB             >                org     $-1                 // alter last byte of Name just above to set
 146+ 6DCA C2          >                db      {b $} | END_BIT     // msb as name end
 146+ 6DCB             >
 146+ 6DCB BF 6D       >                dw      last_NFA            // Link to previous definition Name
 146+ 6DCD             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 6DCD 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 146+ 6DCF             >                else
 146+ 6DCF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 146+ 6DCF             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 6DCF             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 6DCF             >
 146+ 6DCF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 6DCF 0A          >                db      10
 147+ 6DD0                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 147+ 6DD0             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 147+ 6DD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147+ 6DD0             >
 147+ 6DD0             >                // dummy db directives used to calculate length of namec
 147+ 6DD0 57 49 44 54 >                db      "WIDTH"
 147+ 6DD4 48          >
 147+ 6DD5             >len_NFA         defl    $ - temp_NFA
 147+ 6DD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147+ 6DD0             >
 147+ 6DD0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147+ 6DD1 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 147+ 6DD5 48          >
 147+ 6DD6             >                org     $-1                 // alter last byte of Name just above to set
 147+ 6DD5 C8          >                db      {b $} | END_BIT     // msb as name end
 147+ 6DD6             >
 147+ 6DD6 C7 6D       >                dw      last_NFA            // Link to previous definition Name
 147+ 6DD8             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 147+ 6DD8 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 147+ 6DDA             >                else
 147+ 6DDA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 147+ 6DDA             >                endif           ; ok        // for other definitions it "points" the correct handler
 147+ 6DDA             >                // Use of "; ok" to suppress "warning[fwdref]"
 147+ 6DDA             >
 147+ 6DDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 147+ 6DDA 0C          >                db      12
 148+ 6DDB                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 148+ 6DDB             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 148+ 6DDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 148+ 6DDB             >
 148+ 6DDB             >                // dummy db directives used to calculate length of namec
 148+ 6DDB 57 41 52 4E >                db      "WARNING"
 148+ 6DDF 49 4E 47    >
 148+ 6DE2             >len_NFA         defl    $ - temp_NFA
 148+ 6DE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 148+ 6DDB             >
 148+ 6DDB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 148+ 6DDC 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 148+ 6DE0 49 4E 47    >
 148+ 6DE3             >                org     $-1                 // alter last byte of Name just above to set
 148+ 6DE2 C7          >                db      {b $} | END_BIT     // msb as name end
 148+ 6DE3             >
 148+ 6DE3 D0 6D       >                dw      last_NFA            // Link to previous definition Name
 148+ 6DE5             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 148+ 6DE5 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 148+ 6DE7             >                else
 148+ 6DE7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 148+ 6DE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 148+ 6DE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 148+ 6DE7             >
 148+ 6DE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 148+ 6DE7 0E          >                db      14
 149+ 6DE8                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 149+ 6DE8             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 149+ 6DE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 149+ 6DE8             >
 149+ 6DE8             >                // dummy db directives used to calculate length of namec
 149+ 6DE8 46 45 4E 43 >                db      "FENCE"
 149+ 6DEC 45          >
 149+ 6DED             >len_NFA         defl    $ - temp_NFA
 149+ 6DED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 149+ 6DE8             >
 149+ 6DE8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 149+ 6DE9 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 149+ 6DED 45          >
 149+ 6DEE             >                org     $-1                 // alter last byte of Name just above to set
 149+ 6DED C5          >                db      {b $} | END_BIT     // msb as name end
 149+ 6DEE             >
 149+ 6DEE DB 6D       >                dw      last_NFA            // Link to previous definition Name
 149+ 6DF0             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 149+ 6DF0 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 149+ 6DF2             >                else
 149+ 6DF2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 149+ 6DF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 149+ 6DF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 149+ 6DF2             >
 149+ 6DF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 149+ 6DF2 10          >                db      16
 150+ 6DF3                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 150+ 6DF3             >                New_Def  DP, "DP", User_Ptr, is_normal
 150+ 6DF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ 6DF3             >
 150+ 6DF3             >                // dummy db directives used to calculate length of namec
 150+ 6DF3 44 50       >                db      "DP"
 150+ 6DF5             >len_NFA         defl    $ - temp_NFA
 150+ 6DF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ 6DF3             >
 150+ 6DF3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ 6DF4 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 150+ 6DF6             >                org     $-1                 // alter last byte of Name just above to set
 150+ 6DF5 D0          >                db      {b $} | END_BIT     // msb as name end
 150+ 6DF6             >
 150+ 6DF6 E8 6D       >                dw      last_NFA            // Link to previous definition Name
 150+ 6DF8             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6DF8 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 150+ 6DFA             >                else
 150+ 6DFA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 150+ 6DFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6DFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6DFA             >
 150+ 6DFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6DFA 12          >                db      18
 151+ 6DFB                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 151+ 6DFB             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 151+ 6DFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6DFB             >
 151+ 6DFB             >                // dummy db directives used to calculate length of namec
 151+ 6DFB 56 4F 43 2D >                db      "VOC-LINK"
 151+ 6DFF 4C 49 4E 4B >
 151+ 6E03             >len_NFA         defl    $ - temp_NFA
 151+ 6E03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6DFB             >
 151+ 6DFB 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6DFC 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 151+ 6E00 4C 49 4E 4B >
 151+ 6E04             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6E03 CB          >                db      {b $} | END_BIT     // msb as name end
 151+ 6E04             >
 151+ 6E04 F3 6D       >                dw      last_NFA            // Link to previous definition Name
 151+ 6E06             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6E06 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6E08             >                else
 151+ 6E08 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 6E08             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6E08             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6E08             >
 151+ 6E08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6E08 14          >                db      20
 152+ 6E09                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 152+ 6E09             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 152+ 6E09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6E09             >
 152+ 6E09             >                // dummy db directives used to calculate length of namec
 152+ 6E09 46 49 52 53 >                db      "FIRST"
 152+ 6E0D 54          >
 152+ 6E0E             >len_NFA         defl    $ - temp_NFA
 152+ 6E0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6E09             >
 152+ 6E09 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6E0A 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 152+ 6E0E 54          >
 152+ 6E0F             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6E0E D4          >                db      {b $} | END_BIT     // msb as name end
 152+ 6E0F             >
 152+ 6E0F FB 6D       >                dw      last_NFA            // Link to previous definition Name
 152+ 6E11             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6E11 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6E13             >                else
 152+ 6E13 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 152+ 6E13             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6E13             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6E13             >
 152+ 6E13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6E13 16          >                db      22
 153+ 6E14                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 153+ 6E14             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 153+ 6E14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6E14             >
 153+ 6E14             >                // dummy db directives used to calculate length of namec
 153+ 6E14 4C 49 4D 49 >                db      "LIMIT"
 153+ 6E18 54          >
 153+ 6E19             >len_NFA         defl    $ - temp_NFA
 153+ 6E19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6E14             >
 153+ 6E14 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6E15 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 153+ 6E19 54          >
 153+ 6E1A             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6E19 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 6E1A             >
 153+ 6E1A 09 6E       >                dw      last_NFA            // Link to previous definition Name
 153+ 6E1C             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6E1C 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6E1E             >                else
 153+ 6E1E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 6E1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6E1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6E1E             >
 153+ 6E1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6E1E 18          >                db      24
 154+ 6E1F                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 154+ 6E1F             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 154+ 6E1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6E1F             >
 154+ 6E1F             >                // dummy db directives used to calculate length of namec
 154+ 6E1F 45 58 50    >                db      "EXP"
 154+ 6E22             >len_NFA         defl    $ - temp_NFA
 154+ 6E22             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6E1F             >
 154+ 6E1F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6E20 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 154+ 6E23             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6E22 D0          >                db      {b $} | END_BIT     // msb as name end
 154+ 6E23             >
 154+ 6E23 14 6E       >                dw      last_NFA            // Link to previous definition Name
 154+ 6E25             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6E25 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6E27             >                else
 154+ 6E27 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 154+ 6E27             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6E27             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6E27             >
 154+ 6E27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6E27 1A          >                db      26
 155+ 6E28                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 155+ 6E28             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 155+ 6E28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6E28             >
 155+ 6E28             >                // dummy db directives used to calculate length of namec
 155+ 6E28 4E 4D 4F 44 >                db      "NMODE"
 155+ 6E2C 45          >
 155+ 6E2D             >len_NFA         defl    $ - temp_NFA
 155+ 6E2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6E28             >
 155+ 6E28 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6E29 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 155+ 6E2D 45          >
 155+ 6E2E             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6E2D C5          >                db      {b $} | END_BIT     // msb as name end
 155+ 6E2E             >
 155+ 6E2E 1F 6E       >                dw      last_NFA            // Link to previous definition Name
 155+ 6E30             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6E30 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6E32             >                else
 155+ 6E32 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 155+ 6E32             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6E32             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6E32             >
 155+ 6E32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6E32 1C          >                db      28
 156+ 6E33                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 156+ 6E33             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 156+ 6E33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6E33             >
 156+ 6E33             >                // dummy db directives used to calculate length of namec
 156+ 6E33 42 4C 4B    >                db      "BLK"
 156+ 6E36             >len_NFA         defl    $ - temp_NFA
 156+ 6E36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6E33             >
 156+ 6E33 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6E34 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 156+ 6E37             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6E36 CB          >                db      {b $} | END_BIT     // msb as name end
 156+ 6E37             >
 156+ 6E37 28 6E       >                dw      last_NFA            // Link to previous definition Name
 156+ 6E39             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6E39 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6E3B             >                else
 156+ 6E3B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 6E3B             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6E3B             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6E3B             >
 156+ 6E3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6E3B 1E          >                db      30
 157+ 6E3C                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 157+ 6E3C             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 157+ 6E3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6E3C             >
 157+ 6E3C             >                // dummy db directives used to calculate length of namec
 157+ 6E3C 3E 49 4E    >                db      ">IN"
 157+ 6E3F             >len_NFA         defl    $ - temp_NFA
 157+ 6E3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6E3C             >
 157+ 6E3C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6E3D 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 157+ 6E40             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6E3F CE          >                db      {b $} | END_BIT     // msb as name end
 157+ 6E40             >
 157+ 6E40 33 6E       >                dw      last_NFA            // Link to previous definition Name
 157+ 6E42             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6E42 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6E44             >                else
 157+ 6E44 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 157+ 6E44             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6E44             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6E44             >
 157+ 6E44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6E44 20          >                db      32
 158+ 6E45                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 158+ 6E45             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 158+ 6E45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6E45             >
 158+ 6E45             >                // dummy db directives used to calculate length of namec
 158+ 6E45 4F 55 54    >                db      "OUT"
 158+ 6E48             >len_NFA         defl    $ - temp_NFA
 158+ 6E48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6E45             >
 158+ 6E45 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6E46 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 158+ 6E49             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6E48 D4          >                db      {b $} | END_BIT     // msb as name end
 158+ 6E49             >
 158+ 6E49 3C 6E       >                dw      last_NFA            // Link to previous definition Name
 158+ 6E4B             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6E4B 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6E4D             >                else
 158+ 6E4D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6E4D             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6E4D             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6E4D             >
 158+ 6E4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6E4D 22          >                db      34
 159+ 6E4E                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 159+ 6E4E             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 159+ 6E4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6E4E             >
 159+ 6E4E             >                // dummy db directives used to calculate length of namec
 159+ 6E4E 53 43 52    >                db      "SCR"
 159+ 6E51             >len_NFA         defl    $ - temp_NFA
 159+ 6E51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6E4E             >
 159+ 6E4E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6E4F 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 159+ 6E52             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6E51 D2          >                db      {b $} | END_BIT     // msb as name end
 159+ 6E52             >
 159+ 6E52 45 6E       >                dw      last_NFA            // Link to previous definition Name
 159+ 6E54             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6E54 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6E56             >                else
 159+ 6E56 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 159+ 6E56             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6E56             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6E56             >
 159+ 6E56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6E56 24          >                db      36
 160+ 6E57                              User_Def OFFSET     , "OFFSET"    , 38 //
 160+ 6E57             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 160+ 6E57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6E57             >
 160+ 6E57             >                // dummy db directives used to calculate length of namec
 160+ 6E57 4F 46 46 53 >                db      "OFFSET"
 160+ 6E5B 45 54       >
 160+ 6E5D             >len_NFA         defl    $ - temp_NFA
 160+ 6E5D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6E57             >
 160+ 6E57 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6E58 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 160+ 6E5C 45 54       >
 160+ 6E5E             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6E5D D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6E5E             >
 160+ 6E5E 4E 6E       >                dw      last_NFA            // Link to previous definition Name
 160+ 6E60             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6E60 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6E62             >                else
 160+ 6E62 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 160+ 6E62             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6E62             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6E62             >
 160+ 6E62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6E62 26          >                db      38
 161+ 6E63                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 161+ 6E63             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 161+ 6E63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6E63             >
 161+ 6E63             >                // dummy db directives used to calculate length of namec
 161+ 6E63 43 4F 4E 54 >                db      "CONTEXT"
 161+ 6E67 45 58 54    >
 161+ 6E6A             >len_NFA         defl    $ - temp_NFA
 161+ 6E6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6E63             >
 161+ 6E63 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6E64 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 161+ 6E68 45 58 54    >
 161+ 6E6B             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6E6A D4          >                db      {b $} | END_BIT     // msb as name end
 161+ 6E6B             >
 161+ 6E6B 57 6E       >                dw      last_NFA            // Link to previous definition Name
 161+ 6E6D             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6E6D 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6E6F             >                else
 161+ 6E6F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 161+ 6E6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6E6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6E6F             >
 161+ 6E6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6E6F 28          >                db      40
 162+ 6E70                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 162+ 6E70             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 162+ 6E70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6E70             >
 162+ 6E70             >                // dummy db directives used to calculate length of namec
 162+ 6E70 43 55 52 52 >                db      "CURRENT"
 162+ 6E74 45 4E 54    >
 162+ 6E77             >len_NFA         defl    $ - temp_NFA
 162+ 6E77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6E70             >
 162+ 6E70 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6E71 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 162+ 6E75 45 4E 54    >
 162+ 6E78             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6E77 D4          >                db      {b $} | END_BIT     // msb as name end
 162+ 6E78             >
 162+ 6E78 63 6E       >                dw      last_NFA            // Link to previous definition Name
 162+ 6E7A             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6E7A 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6E7C             >                else
 162+ 6E7C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 162+ 6E7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6E7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6E7C             >
 162+ 6E7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6E7C 2A          >                db      42
 163+ 6E7D                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 163+ 6E7D             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 163+ 6E7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6E7D             >
 163+ 6E7D             >                // dummy db directives used to calculate length of namec
 163+ 6E7D 53 54 41 54 >                db      "STATE"
 163+ 6E81 45          >
 163+ 6E82             >len_NFA         defl    $ - temp_NFA
 163+ 6E82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6E7D             >
 163+ 6E7D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6E7E 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 163+ 6E82 45          >
 163+ 6E83             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6E82 C5          >                db      {b $} | END_BIT     // msb as name end
 163+ 6E83             >
 163+ 6E83 70 6E       >                dw      last_NFA            // Link to previous definition Name
 163+ 6E85             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6E85 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6E87             >                else
 163+ 6E87 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 163+ 6E87             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6E87             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6E87             >
 163+ 6E87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6E87 2C          >                db      44
 164+ 6E88                              User_Def BASE       , "BASE"      , 46 //
 164+ 6E88             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 164+ 6E88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6E88             >
 164+ 6E88             >                // dummy db directives used to calculate length of namec
 164+ 6E88 42 41 53 45 >                db      "BASE"
 164+ 6E8C             >len_NFA         defl    $ - temp_NFA
 164+ 6E8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6E88             >
 164+ 6E88 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6E89 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 164+ 6E8D             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6E8C C5          >                db      {b $} | END_BIT     // msb as name end
 164+ 6E8D             >
 164+ 6E8D 7D 6E       >                dw      last_NFA            // Link to previous definition Name
 164+ 6E8F             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6E8F 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6E91             >                else
 164+ 6E91 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 6E91             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6E91             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6E91             >
 164+ 6E91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6E91 2E          >                db      46
 165+ 6E92                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 165+ 6E92             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 165+ 6E92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6E92             >
 165+ 6E92             >                // dummy db directives used to calculate length of namec
 165+ 6E92 44 50 4C    >                db      "DPL"
 165+ 6E95             >len_NFA         defl    $ - temp_NFA
 165+ 6E95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6E92             >
 165+ 6E92 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6E93 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 165+ 6E96             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6E95 CC          >                db      {b $} | END_BIT     // msb as name end
 165+ 6E96             >
 165+ 6E96 88 6E       >                dw      last_NFA            // Link to previous definition Name
 165+ 6E98             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6E98 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6E9A             >                else
 165+ 6E9A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 6E9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6E9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6E9A             >
 165+ 6E9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6E9A 30          >                db      48
 166+ 6E9B                              User_Def FLD        , "FLD"       , 50 // output field width
 166+ 6E9B             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 166+ 6E9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6E9B             >
 166+ 6E9B             >                // dummy db directives used to calculate length of namec
 166+ 6E9B 46 4C 44    >                db      "FLD"
 166+ 6E9E             >len_NFA         defl    $ - temp_NFA
 166+ 6E9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6E9B             >
 166+ 6E9B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6E9C 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 166+ 6E9F             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6E9E C4          >                db      {b $} | END_BIT     // msb as name end
 166+ 6E9F             >
 166+ 6E9F 92 6E       >                dw      last_NFA            // Link to previous definition Name
 166+ 6EA1             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6EA1 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6EA3             >                else
 166+ 6EA3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 6EA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6EA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6EA3             >
 166+ 6EA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6EA3 32          >                db      50
 167+ 6EA4                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 167+ 6EA4             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 167+ 6EA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6EA4             >
 167+ 6EA4             >                // dummy db directives used to calculate length of namec
 167+ 6EA4 43 53 50    >                db      "CSP"
 167+ 6EA7             >len_NFA         defl    $ - temp_NFA
 167+ 6EA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6EA4             >
 167+ 6EA4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6EA5 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 167+ 6EA8             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6EA7 D0          >                db      {b $} | END_BIT     // msb as name end
 167+ 6EA8             >
 167+ 6EA8 9B 6E       >                dw      last_NFA            // Link to previous definition Name
 167+ 6EAA             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6EAA 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6EAC             >                else
 167+ 6EAC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 6EAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6EAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6EAC             >
 167+ 6EAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6EAC 34          >                db      52
 168+ 6EAD                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 168+ 6EAD             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 168+ 6EAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6EAD             >
 168+ 6EAD             >                // dummy db directives used to calculate length of namec
 168+ 6EAD 52 23       >                db      "R#"
 168+ 6EAF             >len_NFA         defl    $ - temp_NFA
 168+ 6EAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6EAD             >
 168+ 6EAD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6EAE 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 168+ 6EB0             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6EAF A3          >                db      {b $} | END_BIT     // msb as name end
 168+ 6EB0             >
 168+ 6EB0 A4 6E       >                dw      last_NFA            // Link to previous definition Name
 168+ 6EB2             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6EB2 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6EB4             >                else
 168+ 6EB4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 168+ 6EB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6EB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6EB4             >
 168+ 6EB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6EB4 36          >                db      54
 169+ 6EB5                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 169+ 6EB5             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 169+ 6EB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6EB5             >
 169+ 6EB5             >                // dummy db directives used to calculate length of namec
 169+ 6EB5 48 4C 44    >                db      "HLD"
 169+ 6EB8             >len_NFA         defl    $ - temp_NFA
 169+ 6EB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6EB5             >
 169+ 6EB5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6EB6 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 169+ 6EB9             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6EB8 C4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6EB9             >
 169+ 6EB9 AD 6E       >                dw      last_NFA            // Link to previous definition Name
 169+ 6EBB             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6EBB 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6EBD             >                else
 169+ 6EBD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 169+ 6EBD             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6EBD             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6EBD             >
 169+ 6EBD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6EBD 38          >                db      56
 170+ 6EBE                              User_Def USE        , "USE"       , 58 // address of last used block
 170+ 6EBE             >                New_Def  USE, "USE", User_Ptr, is_normal
 170+ 6EBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6EBE             >
 170+ 6EBE             >                // dummy db directives used to calculate length of namec
 170+ 6EBE 55 53 45    >                db      "USE"
 170+ 6EC1             >len_NFA         defl    $ - temp_NFA
 170+ 6EC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6EBE             >
 170+ 6EBE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6EBF 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 170+ 6EC2             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6EC1 C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 6EC2             >
 170+ 6EC2 B5 6E       >                dw      last_NFA            // Link to previous definition Name
 170+ 6EC4             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6EC4 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6EC6             >                else
 170+ 6EC6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 170+ 6EC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6EC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6EC6             >
 170+ 6EC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6EC6 3A          >                db      58
 171+ 6EC7                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 171+ 6EC7             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 171+ 6EC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6EC7             >
 171+ 6EC7             >                // dummy db directives used to calculate length of namec
 171+ 6EC7 50 52 45 56 >                db      "PREV"
 171+ 6ECB             >len_NFA         defl    $ - temp_NFA
 171+ 6ECB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6EC7             >
 171+ 6EC7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6EC8 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 171+ 6ECC             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6ECB D6          >                db      {b $} | END_BIT     // msb as name end
 171+ 6ECC             >
 171+ 6ECC BE 6E       >                dw      last_NFA            // Link to previous definition Name
 171+ 6ECE             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6ECE 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6ED0             >                else
 171+ 6ED0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 171+ 6ED0             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6ED0             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6ED0             >
 171+ 6ED0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6ED0 3C          >                db      60
 172+ 6ED1                              User_Def LP         , "LP"        , 62 // line printer (not used)
 172+ 6ED1             >                New_Def  LP, "LP", User_Ptr, is_normal
 172+ 6ED1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6ED1             >
 172+ 6ED1             >                // dummy db directives used to calculate length of namec
 172+ 6ED1 4C 50       >                db      "LP"
 172+ 6ED3             >len_NFA         defl    $ - temp_NFA
 172+ 6ED3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6ED1             >
 172+ 6ED1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6ED2 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 172+ 6ED4             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6ED3 D0          >                db      {b $} | END_BIT     // msb as name end
 172+ 6ED4             >
 172+ 6ED4 C7 6E       >                dw      last_NFA            // Link to previous definition Name
 172+ 6ED6             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6ED6 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6ED8             >                else
 172+ 6ED8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 172+ 6ED8             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6ED8             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6ED8             >
 172+ 6ED8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6ED8 3E          >                db      62
 173+ 6ED9                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 173+ 6ED9             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 173+ 6ED9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6ED9             >
 173+ 6ED9             >                // dummy db directives used to calculate length of namec
 173+ 6ED9 50 4C 41 43 >                db      "PLACE"
 173+ 6EDD 45          >
 173+ 6EDE             >len_NFA         defl    $ - temp_NFA
 173+ 6EDE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6ED9             >
 173+ 6ED9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6EDA 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 173+ 6EDE 45          >
 173+ 6EDF             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6EDE C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 6EDF             >
 173+ 6EDF D1 6E       >                dw      last_NFA            // Link to previous definition Name
 173+ 6EE1             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6EE1 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6EE3             >                else
 173+ 6EE3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6EE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6EE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6EE3             >
 173+ 6EE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6EE3 40          >                db      64
 174+ 6EE4                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 174+ 6EE4             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 174+ 6EE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6EE4             >
 174+ 6EE4             >                // dummy db directives used to calculate length of namec
 174+ 6EE4 53 4F 55 52 >                db      "SOURCE-ID"
 174+ 6EE8 43 45 2D 49 >
 174+ 6EEC 44          >
 174+ 6EED             >len_NFA         defl    $ - temp_NFA
 174+ 6EED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6EE4             >
 174+ 6EE4 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6EE5 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 174+ 6EE9 43 45 2D 49 >
 174+ 6EED 44          >
 174+ 6EEE             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6EED C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6EEE             >
 174+ 6EEE D9 6E       >                dw      last_NFA            // Link to previous definition Name
 174+ 6EF0             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6EF0 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6EF2             >                else
 174+ 6EF2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 6EF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6EF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6EF2             >
 174+ 6EF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6EF2 42          >                db      66
 175+ 6EF3                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 175+ 6EF3             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 175+ 6EF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6EF3             >
 175+ 6EF3             >                // dummy db directives used to calculate length of namec
 175+ 6EF3 53 50 41 4E >                db      "SPAN"
 175+ 6EF7             >len_NFA         defl    $ - temp_NFA
 175+ 6EF7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6EF3             >
 175+ 6EF3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6EF4 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 175+ 6EF8             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6EF7 CE          >                db      {b $} | END_BIT     // msb as name end
 175+ 6EF8             >
 175+ 6EF8 E4 6E       >                dw      last_NFA            // Link to previous definition Name
 175+ 6EFA             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6EFA 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6EFC             >                else
 175+ 6EFC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 6EFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6EFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6EFC             >
 175+ 6EFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6EFC 44          >                db      68
 176+ 6EFD                              User_Def HP         , "HP"        , 70 // heap-pointer address
 176+ 6EFD             >                New_Def  HP, "HP", User_Ptr, is_normal
 176+ 6EFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6EFD             >
 176+ 6EFD             >                // dummy db directives used to calculate length of namec
 176+ 6EFD 48 50       >                db      "HP"
 176+ 6EFF             >len_NFA         defl    $ - temp_NFA
 176+ 6EFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6EFD             >
 176+ 6EFD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6EFE 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 176+ 6F00             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6EFF D0          >                db      {b $} | END_BIT     // msb as name end
 176+ 6F00             >
 176+ 6F00 F3 6E       >                dw      last_NFA            // Link to previous definition Name
 176+ 6F02             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6F02 2A 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6F04             >                else
 176+ 6F04 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 6F04             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6F04             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6F04             >
 176+ 6F04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6F04 46          >                db      70
 177+ 6F05
 178+ 6F05              //  ______________________________________________________________________
 179+ 6F05              //
 180+ 6F05              // here         -- a
 181+ 6F05                              Colon_Def HERE, "HERE", is_normal
 181+ 6F05             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 181+ 6F05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6F05             >
 181+ 6F05             >                // dummy db directives used to calculate length of namec
 181+ 6F05 48 45 52 45 >                db      "HERE"
 181+ 6F09             >len_NFA         defl    $ - temp_NFA
 181+ 6F09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6F05             >
 181+ 6F05 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6F06 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 181+ 6F0A             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6F09 C5          >                db      {b $} | END_BIT     // msb as name end
 181+ 6F0A             >
 181+ 6F0A FD 6E       >                dw      last_NFA            // Link to previous definition Name
 181+ 6F0C             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6F0C BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 181+ 6F0E             >                else
 181+ 6F0E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 181+ 6F0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6F0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6F0E             >
 181+ 6F0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6F0E F8 6D CE 6B                  dw      DP, FETCH               // dp @
 183+ 6F12 95 69                        dw      EXIT                    // ;
 184+ 6F14
 185+ 6F14              //  ______________________________________________________________________
 186+ 6F14              //
 187+ 6F14              // allot        n --
 188+ 6F14                              Colon_Def ALLOT, "ALLOT", is_normal
 188+ 6F14             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 188+ 6F14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 6F14             >
 188+ 6F14             >                // dummy db directives used to calculate length of namec
 188+ 6F14 41 4C 4C 4F >                db      "ALLOT"
 188+ 6F18 54          >
 188+ 6F19             >len_NFA         defl    $ - temp_NFA
 188+ 6F19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 6F14             >
 188+ 6F14 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 6F15 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 188+ 6F19 54          >
 188+ 6F1A             >                org     $-1                 // alter last byte of Name just above to set
 188+ 6F19 D4          >                db      {b $} | END_BIT     // msb as name end
 188+ 6F1A             >
 188+ 6F1A 05 6F       >                dw      last_NFA            // Link to previous definition Name
 188+ 6F1C             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6F1C BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 188+ 6F1E             >                else
 188+ 6F1E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 188+ 6F1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6F1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6F1E             >
 188+ 6F1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 189+ 6F1E F8 6D AB 6B                  dw      DP,  PLUSSTORE          // dp +!
 190+ 6F22 95 69                        dw      EXIT                    // ;
 191+ 6F24
 192+ 6F24              //  ______________________________________________________________________
 193+ 6F24              //
 194+ 6F24              // comma        n --
 195+ 6F24                              Colon_Def COMMA, ",", is_normal
 195+ 6F24             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 195+ 6F24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 6F24             >
 195+ 6F24             >                // dummy db directives used to calculate length of namec
 195+ 6F24 2C          >                db      ","
 195+ 6F25             >len_NFA         defl    $ - temp_NFA
 195+ 6F25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 6F24             >
 195+ 6F24 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 6F25 2C          >                db      ","               // name string in 7-bit ascii, but
 195+ 6F26             >                org     $-1                 // alter last byte of Name just above to set
 195+ 6F25 AC          >                db      {b $} | END_BIT     // msb as name end
 195+ 6F26             >
 195+ 6F26 14 6F       >                dw      last_NFA            // Link to previous definition Name
 195+ 6F28             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 6F28 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 6F2A             >                else
 195+ 6F2A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 6F2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 6F2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 6F2A             >
 195+ 6F2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 6F2A 0C 6F DB 6B                  dw      HERE, STORE             // here !
 197+ 6F2E 4A 6D 1C 6F                  dw      TWO, ALLOT              // 2 allot
 198+ 6F32 95 69                        dw      EXIT                    // ;
 199+ 6F34
 200+ 6F34              //  ______________________________________________________________________
 201+ 6F34              //
 202+ 6F34              // ccomma       c --
 203+ 6F34                              Colon_Def CCOMMA, "C,", is_normal
 203+ 6F34             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 203+ 6F34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 203+ 6F34             >
 203+ 6F34             >                // dummy db directives used to calculate length of namec
 203+ 6F34 43 2C       >                db      "C,"
 203+ 6F36             >len_NFA         defl    $ - temp_NFA
 203+ 6F36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 203+ 6F34             >
 203+ 6F34 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 203+ 6F35 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 203+ 6F37             >                org     $-1                 // alter last byte of Name just above to set
 203+ 6F36 AC          >                db      {b $} | END_BIT     // msb as name end
 203+ 6F37             >
 203+ 6F37 24 6F       >                dw      last_NFA            // Link to previous definition Name
 203+ 6F39             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 203+ 6F39 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 203+ 6F3B             >                else
 203+ 6F3B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 203+ 6F3B             >                endif           ; ok        // for other definitions it "points" the correct handler
 203+ 6F3B             >                // Use of "; ok" to suppress "warning[fwdref]"
 203+ 6F3B             >
 203+ 6F3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 204+ 6F3B 0C 6F F7 6B                  dw      HERE, CSTORE            // here c!
 205+ 6F3F 42 6D 1C 6F                  dw      ONE, ALLOT              // 1 allot
 206+ 6F43 95 69                        dw      EXIT                    // ;
 207+ 6F45
 208+ 6F45              //  ______________________________________________________________________
 209+ 6F45              //
 210+ 6F45              // s->d         n -- d
 211+ 6F45              // converts a single precision integer in a double precision
 212+ 6F45                              New_Def S_TO_D, "S->D", is_code, is_normal
 212+ 6F45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 6F45             >
 212+ 6F45             >                // dummy db directives used to calculate length of namec
 212+ 6F45 53 2D 3E 44 >                db      "S->D"
 212+ 6F49             >len_NFA         defl    $ - temp_NFA
 212+ 6F49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 6F45             >
 212+ 6F45 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 6F46 53 2D 3E 44 >                db      "S->D"               // name string in 7-bit ascii, but
 212+ 6F4A             >                org     $-1                 // alter last byte of Name just above to set
 212+ 6F49 C4          >                db      {b $} | END_BIT     // msb as name end
 212+ 6F4A             >
 212+ 6F4A 34 6F       >                dw      last_NFA            // Link to previous definition Name
 212+ 6F4C             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 6F4C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 212+ 6F4C             >                else
 212+ 6F4C 4E 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 212+ 6F4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 6F4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 6F4E             >
 212+ 6F4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 6F4E D1                           pop     de
 214+ 6F4F 21 00 00                     ld      hl, 0
 215+ 6F52 7A                           ld      a, d
 216+ 6F53 E6 80                        and     $80
 217+ 6F55 28 01                        jr      z, S_to_D_Skip
 218+ 6F57 2B                           dec     hl                  // $FFFF
 219+ 6F58              S_to_D_Skip:
 220+ 6F58 D5                           push    de
 221+ 6F59 E5                           push    hl
 222+ 6F5A                              next
 222+ 6F5A DD E9       >                jp      (ix)
 223+ 6F5C
 224+ 6F5C              //  ______________________________________________________________________
 225+ 6F5C              //
 226+ 6F5C              // -            n1 n2 -- n3
 227+ 6F5C              // subtraction
 228+ 6F5C                              New_Def SUBTRACT, "-", is_code, is_normal
 228+ 6F5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 228+ 6F5C             >
 228+ 6F5C             >                // dummy db directives used to calculate length of namec
 228+ 6F5C 2D          >                db      "-"
 228+ 6F5D             >len_NFA         defl    $ - temp_NFA
 228+ 6F5D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 228+ 6F5C             >
 228+ 6F5C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 228+ 6F5D 2D          >                db      "-"               // name string in 7-bit ascii, but
 228+ 6F5E             >                org     $-1                 // alter last byte of Name just above to set
 228+ 6F5D AD          >                db      {b $} | END_BIT     // msb as name end
 228+ 6F5E             >
 228+ 6F5E 45 6F       >                dw      last_NFA            // Link to previous definition Name
 228+ 6F60             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 228+ 6F60 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 228+ 6F60             >                else
 228+ 6F60 62 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 228+ 6F62             >                endif           ; ok        // for other definitions it "points" the correct handler
 228+ 6F62             >                // Use of "; ok" to suppress "warning[fwdref]"
 228+ 6F62             >
 228+ 6F62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 229+ 6F62 D1                           pop     de
 230+ 6F63 E1                           pop     hl
 231+ 6F64 A7                           and     a
 232+ 6F65 ED 52                        sbc     hl, de
 233+ 6F67
 234+ 6F67                              psh1
 234+ 6F67 E5          >                push    hl
 234+ 6F68 DD E9       >                jp      (ix)
 235+ 6F6A
 236+ 6F6A              //  ______________________________________________________________________
 237+ 6F6A              //
 238+ 6F6A              // =            n1 n2 -- n3
 239+ 6F6A              // equals
 240+ 6F6A                              Colon_Def EQUALS, "=", is_normal
 240+ 6F6A             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 240+ 6F6A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 240+ 6F6A             >
 240+ 6F6A             >                // dummy db directives used to calculate length of namec
 240+ 6F6A 3D          >                db      "="
 240+ 6F6B             >len_NFA         defl    $ - temp_NFA
 240+ 6F6B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 240+ 6F6A             >
 240+ 6F6A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 240+ 6F6B 3D          >                db      "="               // name string in 7-bit ascii, but
 240+ 6F6C             >                org     $-1                 // alter last byte of Name just above to set
 240+ 6F6B BD          >                db      {b $} | END_BIT     // msb as name end
 240+ 6F6C             >
 240+ 6F6C 5C 6F       >                dw      last_NFA            // Link to previous definition Name
 240+ 6F6E             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 240+ 6F6E BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 240+ 6F70             >                else
 240+ 6F70 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 240+ 6F70             >                endif           ; ok        // for other definitions it "points" the correct handler
 240+ 6F70             >                // Use of "; ok" to suppress "warning[fwdref]"
 240+ 6F70             >
 240+ 6F70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 241+ 6F70 60 6F EC 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 242+ 6F74 95 69                        dw      EXIT                    // ;
 243+ 6F76
 244+ 6F76              //  ______________________________________________________________________
 245+ 6F76              //
 246+ 6F76              // u<           u1 u2 -- u3
 247+ 6F76              // unsigned less-than
 248+ 6F76                              New_Def ULESS, "U<", is_code, is_normal
 248+ 6F76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 6F76             >
 248+ 6F76             >                // dummy db directives used to calculate length of namec
 248+ 6F76 55 3C       >                db      "U<"
 248+ 6F78             >len_NFA         defl    $ - temp_NFA
 248+ 6F78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 6F76             >
 248+ 6F76 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 6F77 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 248+ 6F79             >                org     $-1                 // alter last byte of Name just above to set
 248+ 6F78 BC          >                db      {b $} | END_BIT     // msb as name end
 248+ 6F79             >
 248+ 6F79 6A 6F       >                dw      last_NFA            // Link to previous definition Name
 248+ 6F7B             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 6F7B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 248+ 6F7B             >                else
 248+ 6F7B 7D 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 248+ 6F7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 6F7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 6F7D             >
 248+ 6F7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 6F7D D1                           pop     de
 250+ 6F7E E1                           pop     hl
 251+ 6F7F A7                           and     a
 252+ 6F80 ED 52                        sbc     hl, de
 253+ 6F82 21 01 00                     ld      hl, 1
 254+ 6F85 38 01                        jr      c, ULess_Skip
 255+ 6F87 2D                               dec     l
 256+ 6F88              ULess_Skip:
 257+ 6F88
 258+ 6F88                              psh1
 258+ 6F88 E5          >                push    hl
 258+ 6F89 DD E9       >                jp      (ix)
 259+ 6F8B
 260+ 6F8B              //  ______________________________________________________________________
 261+ 6F8B              //
 262+ 6F8B              // <           n1 n2 -- n3
 263+ 6F8B              // less-than
 264+ 6F8B                              New_Def LESS, "<", is_code, is_normal
 264+ 6F8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 264+ 6F8B             >
 264+ 6F8B             >                // dummy db directives used to calculate length of namec
 264+ 6F8B 3C          >                db      "<"
 264+ 6F8C             >len_NFA         defl    $ - temp_NFA
 264+ 6F8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 264+ 6F8B             >
 264+ 6F8B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 264+ 6F8C 3C          >                db      "<"               // name string in 7-bit ascii, but
 264+ 6F8D             >                org     $-1                 // alter last byte of Name just above to set
 264+ 6F8C BC          >                db      {b $} | END_BIT     // msb as name end
 264+ 6F8D             >
 264+ 6F8D 76 6F       >                dw      last_NFA            // Link to previous definition Name
 264+ 6F8F             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 264+ 6F8F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 264+ 6F8F             >                else
 264+ 6F8F 91 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 264+ 6F91             >                endif           ; ok        // for other definitions it "points" the correct handler
 264+ 6F91             >                // Use of "; ok" to suppress "warning[fwdref]"
 264+ 6F91             >
 264+ 6F91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 265+ 6F91 D1                           pop     de
 266+ 6F92 E1                           pop     hl
 267+ 6F93 7C                           ld      a, h
 268+ 6F94 EE 80                        xor     $80
 269+ 6F96 67                           ld      h, a
 270+ 6F97 7A                           ld      a, d
 271+ 6F98 EE 80                        xor     $80
 272+ 6F9A 57                           ld      d, a
 273+ 6F9B A7                           and     a
 274+ 6F9C ED 52                        sbc     hl, de
 275+ 6F9E 21 01 00                     ld      hl, 1
 276+ 6FA1 38 01                        jr      c, Less_Skip
 277+ 6FA3 2D                               dec     l
 278+ 6FA4              Less_Skip:
 279+ 6FA4
 280+ 6FA4                              psh1
 280+ 6FA4 E5          >                push    hl
 280+ 6FA5 DD E9       >                jp      (ix)
 281+ 6FA7
 282+ 6FA7              //  ______________________________________________________________________
 283+ 6FA7              //
 284+ 6FA7              // >            n1 n2 -- n3
 285+ 6FA7              // greater than
 286+ 6FA7                              Colon_Def GREATER, ">", is_normal
 286+ 6FA7             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 286+ 6FA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 286+ 6FA7             >
 286+ 6FA7             >                // dummy db directives used to calculate length of namec
 286+ 6FA7 3E          >                db      ">"
 286+ 6FA8             >len_NFA         defl    $ - temp_NFA
 286+ 6FA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 286+ 6FA7             >
 286+ 6FA7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 286+ 6FA8 3E          >                db      ">"               // name string in 7-bit ascii, but
 286+ 6FA9             >                org     $-1                 // alter last byte of Name just above to set
 286+ 6FA8 BE          >                db      {b $} | END_BIT     // msb as name end
 286+ 6FA9             >
 286+ 6FA9 8B 6F       >                dw      last_NFA            // Link to previous definition Name
 286+ 6FAB             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 286+ 6FAB BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 286+ 6FAD             >                else
 286+ 6FAD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 286+ 6FAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 286+ 6FAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 286+ 6FAD             >
 286+ 6FAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 287+ 6FAD FD 6A 8F 6F                  dw      SWAP, LESS              // swap <
 288+ 6FB1 95 69                        dw      EXIT                    // ;
 289+ 6FB3              //  ______________________________________________________________________
 290+ 6FB3              //
 291+ 6FB3              // min          n1 n2 -- n3
 292+ 6FB3              // minimum between n1 and n2
 293+ 6FB3                              Colon_Def MIN, "MIN" , is_normal
 293+ 6FB3             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 293+ 6FB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 6FB3             >
 293+ 6FB3             >                // dummy db directives used to calculate length of namec
 293+ 6FB3 4D 49 4E    >                db      "MIN"
 293+ 6FB6             >len_NFA         defl    $ - temp_NFA
 293+ 6FB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 6FB3             >
 293+ 6FB3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 6FB4 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 293+ 6FB7             >                org     $-1                 // alter last byte of Name just above to set
 293+ 6FB6 CE          >                db      {b $} | END_BIT     // msb as name end
 293+ 6FB7             >
 293+ 6FB7 A7 6F       >                dw      last_NFA            // Link to previous definition Name
 293+ 6FB9             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 6FB9 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 6FBB             >                else
 293+ 6FBB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 6FBB             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 6FBB             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 6FBB             >
 293+ 6FBB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 6FBB 74 6B                        dw      TWO_DUP                 // 2dup
 295+ 6FBD AB 6F                        dw      GREATER                 // >
 296+ 6FBF 7F 64                        dw      ZBRANCH
 297+ 6FC1 04 00                        dw      Min_Skip - $   // if
 298+ 6FC3 FD 6A                        dw          SWAP                //      swap
 299+ 6FC5              Min_Skip:                                       // endif
 300+ 6FC5 D5 6A                        dw      DROP                    // drop
 301+ 6FC7 95 69                        dw      EXIT                    // ;
 302+ 6FC9
 303+ 6FC9              //  ______________________________________________________________________
 304+ 6FC9              //
 305+ 6FC9              // max          n1 n2 -- n3
 306+ 6FC9              // maximum between n1 and n2
 307+ 6FC9                              Colon_Def MAX, "MAX", is_normal
 307+ 6FC9             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 307+ 6FC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 307+ 6FC9             >
 307+ 6FC9             >                // dummy db directives used to calculate length of namec
 307+ 6FC9 4D 41 58    >                db      "MAX"
 307+ 6FCC             >len_NFA         defl    $ - temp_NFA
 307+ 6FCC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 307+ 6FC9             >
 307+ 6FC9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 307+ 6FCA 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 307+ 6FCD             >                org     $-1                 // alter last byte of Name just above to set
 307+ 6FCC D8          >                db      {b $} | END_BIT     // msb as name end
 307+ 6FCD             >
 307+ 6FCD B3 6F       >                dw      last_NFA            // Link to previous definition Name
 307+ 6FCF             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 307+ 6FCF BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 307+ 6FD1             >                else
 307+ 6FD1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 307+ 6FD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 307+ 6FD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 307+ 6FD1             >
 307+ 6FD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 308+ 6FD1 74 6B                        dw      TWO_DUP                 // 2dup
 309+ 6FD3 8F 6F                        dw      LESS                    // <
 310+ 6FD5 7F 64                        dw      ZBRANCH
 311+ 6FD7 04 00                        dw      Max_Skip - $   // if
 312+ 6FD9 FD 6A                        dw          SWAP                //      swap
 313+ 6FDB              Max_Skip:                                       // endif
 314+ 6FDB D5 6A                        dw      DROP                    // drop
 315+ 6FDD 95 69                        dw      EXIT                    // ;
 316+ 6FDF
 317+ 6FDF              //  ______________________________________________________________________
 318+ 6FDF              //
 319+ 6FDF              // -dup         n -- 0 | n n
 320+ 6FDF              // duplicate if not zero
 321+ 6FDF                              New_Def LDUP, "-DUP", is_code, is_normal
 321+ 6FDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 6FDF             >
 321+ 6FDF             >                // dummy db directives used to calculate length of namec
 321+ 6FDF 2D 44 55 50 >                db      "-DUP"
 321+ 6FE3             >len_NFA         defl    $ - temp_NFA
 321+ 6FE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 6FDF             >
 321+ 6FDF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 6FE0 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 321+ 6FE4             >                org     $-1                 // alter last byte of Name just above to set
 321+ 6FE3 D0          >                db      {b $} | END_BIT     // msb as name end
 321+ 6FE4             >
 321+ 6FE4 C9 6F       >                dw      last_NFA            // Link to previous definition Name
 321+ 6FE6             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 6FE6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 321+ 6FE6             >                else
 321+ 6FE6 E8 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 321+ 6FE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 6FE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 6FE8             >
 321+ 6FE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 6FE8              QDup_Ptr:
 323+ 6FE8 E1                           pop     hl
 324+ 6FE9 7C                           ld      a, h
 325+ 6FEA B5                           or      l
 326+ 6FEB 28 01                        jr      z, QDup_Skip
 327+ 6FED E5                               push    hl
 328+ 6FEE              QDup_Skip:
 329+ 6FEE                              psh1
 329+ 6FEE E5          >                push    hl
 329+ 6FEF DD E9       >                jp      (ix)
 330+ 6FF1
 331+ 6FF1              //  ______________________________________________________________________
 332+ 6FF1              //
 333+ 6FF1              // ?dup         n -- 0 | n n
 334+ 6FF1              // duplicate if not zero
 335+ 6FF1                              New_Def QDUP, "?DUP", QDup_Ptr, is_normal
 335+ 6FF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 335+ 6FF1             >
 335+ 6FF1             >                // dummy db directives used to calculate length of namec
 335+ 6FF1 3F 44 55 50 >                db      "?DUP"
 335+ 6FF5             >len_NFA         defl    $ - temp_NFA
 335+ 6FF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 335+ 6FF1             >
 335+ 6FF1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 335+ 6FF2 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 335+ 6FF6             >                org     $-1                 // alter last byte of Name just above to set
 335+ 6FF5 D0          >                db      {b $} | END_BIT     // msb as name end
 335+ 6FF6             >
 335+ 6FF6 DF 6F       >                dw      last_NFA            // Link to previous definition Name
 335+ 6FF8             >QDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 335+ 6FF8 E8 6F       >                dw      QDup_Ptr ; ok        // for primitive definitions  actual code
 335+ 6FFA             >                else
 335+ 6FFA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 335+ 6FFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 335+ 6FFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 335+ 6FFA             >
 335+ 6FFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 336+ 6FFA
 337+ 6FFA              //  ______________________________________________________________________
 338+ 6FFA              //
 339+ 6FFA              // emit         c --
 340+ 6FFA                              Colon_Def EMIT, "EMIT", is_normal
 340+ 6FFA             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 340+ 6FFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 340+ 6FFA             >
 340+ 6FFA             >                // dummy db directives used to calculate length of namec
 340+ 6FFA 45 4D 49 54 >                db      "EMIT"
 340+ 6FFE             >len_NFA         defl    $ - temp_NFA
 340+ 6FFE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 340+ 6FFA             >
 340+ 6FFA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 340+ 6FFB 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 340+ 6FFF             >                org     $-1                 // alter last byte of Name just above to set
 340+ 6FFE D4          >                db      {b $} | END_BIT     // msb as name end
 340+ 6FFF             >
 340+ 6FFF F1 6F       >                dw      last_NFA            // Link to previous definition Name
 340+ 7001             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 340+ 7001 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 340+ 7003             >                else
 340+ 7003 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 340+ 7003             >                endif           ; ok        // for other definitions it "points" the correct handler
 340+ 7003             >                // Use of "; ok" to suppress "warning[fwdref]"
 340+ 7003             >
 340+ 7003             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 341+ 7003 99 66                        dw      C_EMIT                      // (?emit)
 342+ 7005 E6 6F                        dw      LDUP                        // ?dup
 343+ 7007                                                                  // if
 344+ 7007 7F 64                        dw      ZBRANCH
 345+ 7009 0A 00                        dw      Emit_Skip - $
 346+ 700B 65 66                        dw          EMITC                   //      emitc
 347+ 700D 42 6D                        dw          ONE                     //      1
 348+ 700F 4B 6E AB 6B                  dw          OUT, PLUSSTORE        //      out +!
 349+ 7013              Emit_Skip:                                          // endif
 350+ 7013 95 69                        dw      EXIT                        // ;
 351+ 7015
 352+ 7015              //  ______________________________________________________________________
 353+ 7015              //
 354+ 7015              // space        --
 355+ 7015                              Colon_Def SPACE, "SPACE", is_normal
 355+ 7015             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 355+ 7015             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 7015             >
 355+ 7015             >                // dummy db directives used to calculate length of namec
 355+ 7015 53 50 41 43 >                db      "SPACE"
 355+ 7019 45          >
 355+ 701A             >len_NFA         defl    $ - temp_NFA
 355+ 701A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 7015             >
 355+ 7015 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 7016 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 355+ 701A 45          >
 355+ 701B             >                org     $-1                 // alter last byte of Name just above to set
 355+ 701A C5          >                db      {b $} | END_BIT     // msb as name end
 355+ 701B             >
 355+ 701B FA 6F       >                dw      last_NFA            // Link to previous definition Name
 355+ 701D             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 701D BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 355+ 701F             >                else
 355+ 701F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 355+ 701F             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 701F             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 701F             >
 355+ 701F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 701F 64 6D 01 70                  dw      BL, EMIT                // bl emit
 357+ 7023 95 69                        dw      EXIT                    // ;
 358+ 7025
 359+ 7025              //  ______________________________________________________________________
 360+ 7025              //
 361+ 7025              // traverse     a n -- a
 362+ 7025              // A dictionary entry is structured as follows
 363+ 7025              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 364+ 7025              //      +1   word name, last character is toggled with $80
 365+ 7025              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 366+ 7025              // CFA: +3+n routine address. Colon definitions here have pointer to code
 367+ 7025              // PFA: +5+n "is_code", definitions have no PFA.
 368+ 7025              //
 369+ 7025                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 369+ 7025             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 369+ 7025             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ 7025             >
 369+ 7025             >                // dummy db directives used to calculate length of namec
 369+ 7025 54 52 41 56 >                db      "TRAVERSE"
 369+ 7029 45 52 53 45 >
 369+ 702D             >len_NFA         defl    $ - temp_NFA
 369+ 702D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ 7025             >
 369+ 7025 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ 7026 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 369+ 702A 45 52 53 45 >
 369+ 702E             >                org     $-1                 // alter last byte of Name just above to set
 369+ 702D C5          >                db      {b $} | END_BIT     // msb as name end
 369+ 702E             >
 369+ 702E 15 70       >                dw      last_NFA            // Link to previous definition Name
 369+ 7030             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 7030 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 369+ 7032             >                else
 369+ 7032 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 369+ 7032             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 7032             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 7032             >
 369+ 7032             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 7032 FD 6A                        dw      SWAP                    // swap
 371+ 7034              Traverse_Begin:                                 // begin
 372+ 7034 C5 6A 27 6A                  dw          OVER, PLUS          //      over +
 373+ 7038 45 64 7F 00                  dw          LIT, 127            //      127
 374+ 703C C5 6A E9 6B                  dw          OVER, CFETCH        //      over @
 375+ 7040 8F 6F                        dw          LESS                //      <
 376+ 7042                                                              // until
 377+ 7042 7F 64                        dw      ZBRANCH
 378+ 7044 F0 FF                        dw      Traverse_Begin - $
 379+ 7046 FD 6A D5 6A                  dw      SWAP, DROP              //  swap drop
 380+ 704A 95 69                        dw      EXIT                    //  ;
 381+ 704C
 382+ 704C              //  ______________________________________________________________________
 383+ 704C              //
 384+ 704C              // latest       -- nfa
 385+ 704C                              Colon_Def LATEST, "LATEST", is_normal
 385+ 704C             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 385+ 704C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 704C             >
 385+ 704C             >                // dummy db directives used to calculate length of namec
 385+ 704C 4C 41 54 45 >                db      "LATEST"
 385+ 7050 53 54       >
 385+ 7052             >len_NFA         defl    $ - temp_NFA
 385+ 7052             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 704C             >
 385+ 704C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 704D 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 385+ 7051 53 54       >
 385+ 7053             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7052 D4          >                db      {b $} | END_BIT     // msb as name end
 385+ 7053             >
 385+ 7053 25 70       >                dw      last_NFA            // Link to previous definition Name
 385+ 7055             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7055 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7057             >                else
 385+ 7057 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 385+ 7057             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7057             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7057             >
 385+ 7057             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7057 7A 6E                        dw      CURRENT                 // current
 387+ 7059 CE 6B CE 6B                  dw      FETCH, FETCH            // @ @
 388+ 705D 95 69                        dw      EXIT                    // ;
 389+ 705F
 390+ 705F              //  ______________________________________________________________________
 391+ 705F              //
 392+ 705F              // lfa          pfa -- lfa
 393+ 705F                              Colon_Def LFA, "LFA", is_normal
 393+ 705F             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 393+ 705F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 705F             >
 393+ 705F             >                // dummy db directives used to calculate length of namec
 393+ 705F 4C 46 41    >                db      "LFA"
 393+ 7062             >len_NFA         defl    $ - temp_NFA
 393+ 7062             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 705F             >
 393+ 705F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7060 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 393+ 7063             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7062 C1          >                db      {b $} | END_BIT     // msb as name end
 393+ 7063             >
 393+ 7063 4C 70       >                dw      last_NFA            // Link to previous definition Name
 393+ 7065             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7065 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7067             >                else
 393+ 7067 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 7067             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7067             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7067             >
 393+ 7067             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7067 82 6A                        dw      CELL_MINUS              // cell-
 395+ 7069 82 6A                        dw      CELL_MINUS              // cell-
 396+ 706B 95 69                        dw      EXIT                    // ;
 397+ 706D
 398+ 706D              //  ______________________________________________________________________
 399+ 706D              //
 400+ 706D              // cfa          pfa -- cfa
 401+ 706D                              Colon_Def CFA, "CFA", is_normal
 401+ 706D             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 401+ 706D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 401+ 706D             >
 401+ 706D             >                // dummy db directives used to calculate length of namec
 401+ 706D 43 46 41    >                db      "CFA"
 401+ 7070             >len_NFA         defl    $ - temp_NFA
 401+ 7070             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 401+ 706D             >
 401+ 706D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 401+ 706E 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 401+ 7071             >                org     $-1                 // alter last byte of Name just above to set
 401+ 7070 C1          >                db      {b $} | END_BIT     // msb as name end
 401+ 7071             >
 401+ 7071 5F 70       >                dw      last_NFA            // Link to previous definition Name
 401+ 7073             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 401+ 7073 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 401+ 7075             >                else
 401+ 7075 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 401+ 7075             >                endif           ; ok        // for other definitions it "points" the correct handler
 401+ 7075             >                // Use of "; ok" to suppress "warning[fwdref]"
 401+ 7075             >
 401+ 7075             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 402+ 7075 82 6A                        dw      CELL_MINUS              // cell-
 403+ 7077 95 69                        dw      EXIT                    // ;
 404+ 7079
 405+ 7079              //  ______________________________________________________________________
 406+ 7079              //
 407+ 7079              // nfa          pfa -- nfa
 408+ 7079                              Colon_Def NFA, "NFA", is_normal
 408+ 7079             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 408+ 7079             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 408+ 7079             >
 408+ 7079             >                // dummy db directives used to calculate length of namec
 408+ 7079 4E 46 41    >                db      "NFA"
 408+ 707C             >len_NFA         defl    $ - temp_NFA
 408+ 707C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 408+ 7079             >
 408+ 7079 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 408+ 707A 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 408+ 707D             >                org     $-1                 // alter last byte of Name just above to set
 408+ 707C C1          >                db      {b $} | END_BIT     // msb as name end
 408+ 707D             >
 408+ 707D 6D 70       >                dw      last_NFA            // Link to previous definition Name
 408+ 707F             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 408+ 707F BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 408+ 7081             >                else
 408+ 7081 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 408+ 7081             >                endif           ; ok        // for other definitions it "points" the correct handler
 408+ 7081             >                // Use of "; ok" to suppress "warning[fwdref]"
 408+ 7081             >
 408+ 7081             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 409+ 7081 45 64 05 00                  dw      LIT, 5                  // 5
 410+ 7085 60 6F                        dw      SUBTRACT                // -
 411+ 7087 5B 6D                        dw      NEG_ONE                 // -1
 412+ 7089 30 70                        dw      TRAVERSE                // traverse
 413+ 708B 95 69                        dw      EXIT                    // ;
 414+ 708D
 415+ 708D              //  ______________________________________________________________________
 416+ 708D              //
 417+ 708D              // pfa          nfa -- pfa
 418+ 708D                              Colon_Def PFA, "PFA", is_normal
 418+ 708D             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 418+ 708D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 708D             >
 418+ 708D             >                // dummy db directives used to calculate length of namec
 418+ 708D 50 46 41    >                db      "PFA"
 418+ 7090             >len_NFA         defl    $ - temp_NFA
 418+ 7090             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 708D             >
 418+ 708D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 708E 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 418+ 7091             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7090 C1          >                db      {b $} | END_BIT     // msb as name end
 418+ 7091             >
 418+ 7091 79 70       >                dw      last_NFA            // Link to previous definition Name
 418+ 7093             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7093 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7095             >                else
 418+ 7095 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 7095             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7095             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7095             >
 418+ 7095             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7095 42 6D                        dw      ONE                     // 1
 420+ 7097 30 70                        dw      TRAVERSE                // traverse
 421+ 7099 45 64 05 00                  dw      LIT, 5                  // 6
 422+ 709D 27 6A                        dw      PLUS                    // +
 423+ 709F 95 69                        dw      EXIT                    // ;
 424+ 70A1
 425+ 70A1              //  ______________________________________________________________________
 426+ 70A1              //
 427+ 70A1              // >body        cfa -- pfa
 428+ 70A1                              Colon_Def TO_BODY, ">BODY", is_normal
 428+ 70A1             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 428+ 70A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 70A1             >
 428+ 70A1             >                // dummy db directives used to calculate length of namec
 428+ 70A1 3E 42 4F 44 >                db      ">BODY"
 428+ 70A5 59          >
 428+ 70A6             >len_NFA         defl    $ - temp_NFA
 428+ 70A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 70A1             >
 428+ 70A1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 70A2 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 428+ 70A6 59          >
 428+ 70A7             >                org     $-1                 // alter last byte of Name just above to set
 428+ 70A6 D9          >                db      {b $} | END_BIT     // msb as name end
 428+ 70A7             >
 428+ 70A7 8D 70       >                dw      last_NFA            // Link to previous definition Name
 428+ 70A9             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 70A9 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 70AB             >                else
 428+ 70AB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 70AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 70AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 70AB             >
 428+ 70AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 70AB 78 6A                        dw      CELL_PLUS               // cell+
 430+ 70AD 95 69                        dw      EXIT                    // ;
 431+ 70AF
 432+ 70AF              //  ______________________________________________________________________
 433+ 70AF              //
 434+ 70AF              // <name        cfa -- nfa
 435+ 70AF                              Colon_Def TO_NAME, "<NAME", is_normal
 435+ 70AF             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 435+ 70AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 435+ 70AF             >
 435+ 70AF             >                // dummy db directives used to calculate length of namec
 435+ 70AF 3C 4E 41 4D >                db      "<NAME"
 435+ 70B3 45          >
 435+ 70B4             >len_NFA         defl    $ - temp_NFA
 435+ 70B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 435+ 70AF             >
 435+ 70AF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 435+ 70B0 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 435+ 70B4 45          >
 435+ 70B5             >                org     $-1                 // alter last byte of Name just above to set
 435+ 70B4 C5          >                db      {b $} | END_BIT     // msb as name end
 435+ 70B5             >
 435+ 70B5 A1 70       >                dw      last_NFA            // Link to previous definition Name
 435+ 70B7             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 435+ 70B7 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 435+ 70B9             >                else
 435+ 70B9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 435+ 70B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 435+ 70B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 435+ 70B9             >
 435+ 70B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 436+ 70B9 A9 70                        dw      TO_BODY                 // >body
 437+ 70BB 7F 70                        dw      NFA                     // nfa
 438+ 70BD 95 69                        dw      EXIT                    // ;
 439+ 70BF
 440+ 70BF              //  ______________________________________________________________________
 441+ 70BF              //
 442+ 70BF              // !csp         --
 443+ 70BF              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 444+ 70BF                              Colon_Def STORE_CSP, "!CSP", is_normal
 444+ 70BF             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 444+ 70BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 444+ 70BF             >
 444+ 70BF             >                // dummy db directives used to calculate length of namec
 444+ 70BF 21 43 53 50 >                db      "!CSP"
 444+ 70C3             >len_NFA         defl    $ - temp_NFA
 444+ 70C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 444+ 70BF             >
 444+ 70BF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 444+ 70C0 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 444+ 70C4             >                org     $-1                 // alter last byte of Name just above to set
 444+ 70C3 D0          >                db      {b $} | END_BIT     // msb as name end
 444+ 70C4             >
 444+ 70C4 AF 70       >                dw      last_NFA            // Link to previous definition Name
 444+ 70C6             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 444+ 70C6 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 444+ 70C8             >                else
 444+ 70C8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 444+ 70C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 444+ 70C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 444+ 70C8             >
 444+ 70C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 445+ 70C8 5F 69                        dw      SPFETCH                 // sp@
 446+ 70CA AA 6E DB 6B                  dw      CSP, STORE              // csp !
 447+ 70CE 95 69                        dw      EXIT                    // ;
 448+ 70D0
 449+ 70D0              //  ______________________________________________________________________
 450+ 70D0              //
 451+ 70D0              // ?error       f n --
 452+ 70D0              // rase error n if flag f it true
 453+ 70D0                              Colon_Def QERROR, "?ERROR", is_normal
 453+ 70D0             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 453+ 70D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 453+ 70D0             >
 453+ 70D0             >                // dummy db directives used to calculate length of namec
 453+ 70D0 3F 45 52 52 >                db      "?ERROR"
 453+ 70D4 4F 52       >
 453+ 70D6             >len_NFA         defl    $ - temp_NFA
 453+ 70D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 453+ 70D0             >
 453+ 70D0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 453+ 70D1 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 453+ 70D5 4F 52       >
 453+ 70D7             >                org     $-1                 // alter last byte of Name just above to set
 453+ 70D6 D2          >                db      {b $} | END_BIT     // msb as name end
 453+ 70D7             >
 453+ 70D7 BF 70       >                dw      last_NFA            // Link to previous definition Name
 453+ 70D9             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 453+ 70D9 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 453+ 70DB             >                else
 453+ 70DB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 453+ 70DB             >                endif           ; ok        // for other definitions it "points" the correct handler
 453+ 70DB             >                // Use of "; ok" to suppress "warning[fwdref]"
 453+ 70DB             >
 453+ 70DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 454+ 70DB FD 6A                        dw      SWAP                    // swap
 455+ 70DD                                                              // if
 456+ 70DD 7F 64                        dw      ZBRANCH
 457+ 70DF 08 00                        dw      QError_Else - $
 458+ 70E1 DE 75                        dw          ERROR               //      error  ( is a forward-ref )
 459+ 70E3                                                              // else
 460+ 70E3 68 64                        dw      BRANCH
 461+ 70E5 04 00                        dw      QError_Endif - $
 462+ 70E7              QError_Else:
 463+ 70E7 D5 6A                        dw          DROP                //      drop
 464+ 70E9              QError_Endif:                                   // endif
 465+ 70E9 95 69                        dw      EXIT                    // ;
 466+ 70EB
 467+ 70EB              //  ______________________________________________________________________
 468+ 70EB              //
 469+ 70EB              // ?comp       --
 470+ 70EB              // raise msg #17 if not compiling
 471+ 70EB                              Colon_Def QCOMP, "?COMP", is_normal
 471+ 70EB             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 471+ 70EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 471+ 70EB             >
 471+ 70EB             >                // dummy db directives used to calculate length of namec
 471+ 70EB 3F 43 4F 4D >                db      "?COMP"
 471+ 70EF 50          >
 471+ 70F0             >len_NFA         defl    $ - temp_NFA
 471+ 70F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 471+ 70EB             >
 471+ 70EB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 471+ 70EC 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 471+ 70F0 50          >
 471+ 70F1             >                org     $-1                 // alter last byte of Name just above to set
 471+ 70F0 D0          >                db      {b $} | END_BIT     // msb as name end
 471+ 70F1             >
 471+ 70F1 D0 70       >                dw      last_NFA            // Link to previous definition Name
 471+ 70F3             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 471+ 70F3 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 471+ 70F5             >                else
 471+ 70F5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 471+ 70F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 471+ 70F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 471+ 70F5             >
 471+ 70F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 472+ 70F5 85 6E CE 6B                  dw      STATE, FETCH            // state @
 473+ 70F9 EC 69                        dw      ZEQUAL                  // 0=
 474+ 70FB 45 64 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 475+ 70FF D9 70                        dw      QERROR                  // ?error
 476+ 7101 95 69                        dw      EXIT                    // ;
 477+ 7103
 478+ 7103              //  ______________________________________________________________________
 479+ 7103              //
 480+ 7103              // ?exec       --
 481+ 7103              // raise msg #18 if compiling
 482+ 7103                              Colon_Def QEXEC, "?EXEC", is_normal
 482+ 7103             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 482+ 7103             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 482+ 7103             >
 482+ 7103             >                // dummy db directives used to calculate length of namec
 482+ 7103 3F 45 58 45 >                db      "?EXEC"
 482+ 7107 43          >
 482+ 7108             >len_NFA         defl    $ - temp_NFA
 482+ 7108             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 482+ 7103             >
 482+ 7103 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 482+ 7104 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 482+ 7108 43          >
 482+ 7109             >                org     $-1                 // alter last byte of Name just above to set
 482+ 7108 C3          >                db      {b $} | END_BIT     // msb as name end
 482+ 7109             >
 482+ 7109 EB 70       >                dw      last_NFA            // Link to previous definition Name
 482+ 710B             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 482+ 710B BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 482+ 710D             >                else
 482+ 710D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 482+ 710D             >                endif           ; ok        // for other definitions it "points" the correct handler
 482+ 710D             >                // Use of "; ok" to suppress "warning[fwdref]"
 482+ 710D             >
 482+ 710D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 483+ 710D 85 6E CE 6B                  dw      STATE, FETCH            // state @
 484+ 7111 45 64 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 485+ 7115 D9 70                        dw      QERROR                  // ?error
 486+ 7117 95 69                        dw      EXIT                    // ;
 487+ 7119
 488+ 7119              //  ______________________________________________________________________
 489+ 7119              //
 490+ 7119              // ?pairs       n1 n2 --
 491+ 7119              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 492+ 7119                              Colon_Def QPAIRS, "?PAIRS", is_normal
 492+ 7119             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 492+ 7119             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ 7119             >
 492+ 7119             >                // dummy db directives used to calculate length of namec
 492+ 7119 3F 50 41 49 >                db      "?PAIRS"
 492+ 711D 52 53       >
 492+ 711F             >len_NFA         defl    $ - temp_NFA
 492+ 711F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ 7119             >
 492+ 7119 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ 711A 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 492+ 711E 52 53       >
 492+ 7120             >                org     $-1                 // alter last byte of Name just above to set
 492+ 711F D3          >                db      {b $} | END_BIT     // msb as name end
 492+ 7120             >
 492+ 7120 03 71       >                dw      last_NFA            // Link to previous definition Name
 492+ 7122             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 7122 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 492+ 7124             >                else
 492+ 7124 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 492+ 7124             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 7124             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 7124             >
 492+ 7124             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 7124 60 6F                        dw      SUBTRACT                // -
 494+ 7126 45 64 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 495+ 712A D9 70                        dw      QERROR                  // ?error
 496+ 712C 95 69                        dw      EXIT                    // ;
 497+ 712E
 498+ 712E              //  ______________________________________________________________________
 499+ 712E              //
 500+ 712E              // ?csp       --
 501+ 712E              // raise msg #20 if surrent SP in not what previously saved in CSP.
 502+ 712E              // Compiler relies on that for  syntax checking of structures
 503+ 712E                              Colon_Def QCSP, "?CSP", is_normal
 503+ 712E             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 503+ 712E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ 712E             >
 503+ 712E             >                // dummy db directives used to calculate length of namec
 503+ 712E 3F 43 53 50 >                db      "?CSP"
 503+ 7132             >len_NFA         defl    $ - temp_NFA
 503+ 7132             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ 712E             >
 503+ 712E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ 712F 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 503+ 7133             >                org     $-1                 // alter last byte of Name just above to set
 503+ 7132 D0          >                db      {b $} | END_BIT     // msb as name end
 503+ 7133             >
 503+ 7133 19 71       >                dw      last_NFA            // Link to previous definition Name
 503+ 7135             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 7135 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 7137             >                else
 503+ 7137 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 503+ 7137             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 7137             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 7137             >
 503+ 7137             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 7137 5F 69                        dw      SPFETCH                 // sp@
 505+ 7139 AA 6E CE 6B                  dw      CSP, FETCH              // csp @
 506+ 713D 60 6F                        dw      SUBTRACT                // -
 507+ 713F 45 64 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 508+ 7143 D9 70                        dw      QERROR                  // ?error
 509+ 7145 95 69                        dw      EXIT                    // ;
 510+ 7147
 511+ 7147              //  ______________________________________________________________________
 512+ 7147              //
 513+ 7147              // ?loading      --
 514+ 7147              // raise msg #22 if not loading
 515+ 7147                              Colon_Def QLOADING, "?LOADING", is_normal
 515+ 7147             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 515+ 7147             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7147             >
 515+ 7147             >                // dummy db directives used to calculate length of namec
 515+ 7147 3F 4C 4F 41 >                db      "?LOADING"
 515+ 714B 44 49 4E 47 >
 515+ 714F             >len_NFA         defl    $ - temp_NFA
 515+ 714F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7147             >
 515+ 7147 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7148 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 515+ 714C 44 49 4E 47 >
 515+ 7150             >                org     $-1                 // alter last byte of Name just above to set
 515+ 714F C7          >                db      {b $} | END_BIT     // msb as name end
 515+ 7150             >
 515+ 7150 2E 71       >                dw      last_NFA            // Link to previous definition Name
 515+ 7152             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7152 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 515+ 7154             >                else
 515+ 7154 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 515+ 7154             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7154             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7154             >
 515+ 7154             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 516+ 7154 39 6E CE 6B                  dw      BLK, FETCH              // blk @
 517+ 7158 EC 69                        dw      ZEQUAL                  // 0=
 518+ 715A 45 64 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 519+ 715E D9 70                        dw      QERROR                  // ?error
 520+ 7160 95 69                        dw      EXIT                    // ;
 521+ 7162
 522+ 7162              //  ______________________________________________________________________
 523+ 7162              //
 524+ 7162              // compile      --
 525+ 7162              // compiles the following word
 526+ 7162                              Colon_Def COMPILE, "COMPILE", is_normal
 526+ 7162             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 526+ 7162             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 526+ 7162             >
 526+ 7162             >                // dummy db directives used to calculate length of namec
 526+ 7162 43 4F 4D 50 >                db      "COMPILE"
 526+ 7166 49 4C 45    >
 526+ 7169             >len_NFA         defl    $ - temp_NFA
 526+ 7169             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 526+ 7162             >
 526+ 7162 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 526+ 7163 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 526+ 7167 49 4C 45    >
 526+ 716A             >                org     $-1                 // alter last byte of Name just above to set
 526+ 7169 C5          >                db      {b $} | END_BIT     // msb as name end
 526+ 716A             >
 526+ 716A 47 71       >                dw      last_NFA            // Link to previous definition Name
 526+ 716C             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 526+ 716C BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 526+ 716E             >                else
 526+ 716E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 526+ 716E             >                endif           ; ok        // for other definitions it "points" the correct handler
 526+ 716E             >                // Use of "; ok" to suppress "warning[fwdref]"
 526+ 716E             >
 526+ 716E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 527+ 716E F3 70                        dw      QCOMP                   // ?comp
 528+ 7170 D2 69                        dw      R_TO                    // r>
 529+ 7172 0A 6B 78 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 530+ 7176 BE 69                        dw      TO_R                    // >r
 531+ 7178 CE 6B 28 6F                  dw      FETCH, COMMA            // @ ,
 532+ 717C 95 69                        dw      EXIT                    // ;
 533+ 717E
 534+ 717E              //  ______________________________________________________________________
 535+ 717E              //
 536+ 717E              // [            --
 537+ 717E              // stop compilation
 538+ 717E                              Colon_Def SQUARED_OPEN, "[", is_immediate
 538+ 717E             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 538+ 717E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 538+ 717E             >
 538+ 717E             >                // dummy db directives used to calculate length of namec
 538+ 717E 5B          >                db      "["
 538+ 717F             >len_NFA         defl    $ - temp_NFA
 538+ 717F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 538+ 717E             >
 538+ 717E C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 538+ 717F 5B          >                db      "["               // name string in 7-bit ascii, but
 538+ 7180             >                org     $-1                 // alter last byte of Name just above to set
 538+ 717F DB          >                db      {b $} | END_BIT     // msb as name end
 538+ 7180             >
 538+ 7180 62 71       >                dw      last_NFA            // Link to previous definition Name
 538+ 7182             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 538+ 7182 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 538+ 7184             >                else
 538+ 7184 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 538+ 7184             >                endif           ; ok        // for other definitions it "points" the correct handler
 538+ 7184             >                // Use of "; ok" to suppress "warning[fwdref]"
 538+ 7184             >
 538+ 7184             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 539+ 7184 3A 6D                        dw      ZERO                    // 0
 540+ 7186 85 6E DB 6B                  dw      STATE, STORE            // state !
 541+ 718A 95 69                        dw      EXIT                    // ; immediate
 542+ 718C
 543+ 718C              //  ______________________________________________________________________
 544+ 718C              //
 545+ 718C              // ]            --
 546+ 718C              // start compilation
 547+ 718C                              Colon_Def SQUARED_CLOSE, "]", is_normal
 547+ 718C             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 547+ 718C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 547+ 718C             >
 547+ 718C             >                // dummy db directives used to calculate length of namec
 547+ 718C 5D          >                db      "]"
 547+ 718D             >len_NFA         defl    $ - temp_NFA
 547+ 718D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 547+ 718C             >
 547+ 718C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 547+ 718D 5D          >                db      "]"               // name string in 7-bit ascii, but
 547+ 718E             >                org     $-1                 // alter last byte of Name just above to set
 547+ 718D DD          >                db      {b $} | END_BIT     // msb as name end
 547+ 718E             >
 547+ 718E 7E 71       >                dw      last_NFA            // Link to previous definition Name
 547+ 7190             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 547+ 7190 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 547+ 7192             >                else
 547+ 7192 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 547+ 7192             >                endif           ; ok        // for other definitions it "points" the correct handler
 547+ 7192             >                // Use of "; ok" to suppress "warning[fwdref]"
 547+ 7192             >
 547+ 7192             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 548+ 7192 45 64 C0 00                  dw      LIT, $C0                // 192
 549+ 7196 85 6E DB 6B                  dw      STATE, STORE            // state !
 550+ 719A 95 69                        dw      EXIT                    // ;
 551+ 719C
 552+ 719C              //  ______________________________________________________________________
 553+ 719C              //
 554+ 719C              // smudge       --
 555+ 719C              // toggle smudge bit of latest definition
 556+ 719C                              Colon_Def SMUDGE, "SMUDGE", is_normal
 556+ 719C             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 556+ 719C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 556+ 719C             >
 556+ 719C             >                // dummy db directives used to calculate length of namec
 556+ 719C 53 4D 55 44 >                db      "SMUDGE"
 556+ 71A0 47 45       >
 556+ 71A2             >len_NFA         defl    $ - temp_NFA
 556+ 71A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 556+ 719C             >
 556+ 719C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 556+ 719D 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 556+ 71A1 47 45       >
 556+ 71A3             >                org     $-1                 // alter last byte of Name just above to set
 556+ 71A2 C5          >                db      {b $} | END_BIT     // msb as name end
 556+ 71A3             >
 556+ 71A3 8C 71       >                dw      last_NFA            // Link to previous definition Name
 556+ 71A5             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 556+ 71A5 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 556+ 71A7             >                else
 556+ 71A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 556+ 71A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 556+ 71A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 556+ 71A7             >
 556+ 71A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 557+ 71A7 55 70                        dw      LATEST                  // latest
 558+ 71A9 45 64 20 00                  dw      LIT, SMUDGE_BIT         // 32
 559+ 71AD C1 6B                        dw      TOGGLE                  // toggle
 560+ 71AF 95 69                        dw      EXIT                    // ;
 561+ 71B1
 562+ 71B1              //  ______________________________________________________________________
 563+ 71B1              //
 564+ 71B1              // immediate    --
 565+ 71B1              // make immediate the latest definition
 566+ 71B1                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 566+ 71B1             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 566+ 71B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ 71B1             >
 566+ 71B1             >                // dummy db directives used to calculate length of namec
 566+ 71B1 49 4D 4D 45 >                db      "IMMEDIATE"
 566+ 71B5 44 49 41 54 >
 566+ 71B9 45          >
 566+ 71BA             >len_NFA         defl    $ - temp_NFA
 566+ 71BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ 71B1             >
 566+ 71B1 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ 71B2 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 566+ 71B6 44 49 41 54 >
 566+ 71BA 45          >
 566+ 71BB             >                org     $-1                 // alter last byte of Name just above to set
 566+ 71BA C5          >                db      {b $} | END_BIT     // msb as name end
 566+ 71BB             >
 566+ 71BB 9C 71       >                dw      last_NFA            // Link to previous definition Name
 566+ 71BD             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 71BD BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 71BF             >                else
 566+ 71BF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 566+ 71BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 71BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 71BF             >
 566+ 71BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 71BF 55 70                        dw      LATEST                  // latest
 568+ 71C1 45 64 40 00                  dw      LIT, $40                // 64
 569+ 71C5 C1 6B                        dw      TOGGLE                  // toggle
 570+ 71C7 95 69                        dw      EXIT                    // ;
 571+ 71C9
 572+ 71C9              //  ______________________________________________________________________
 573+ 71C9              //
 574+ 71C9              // hex          --
 575+ 71C9              // change numeration base
 576+ 71C9                              Colon_Def HEX, "HEX", is_normal
 576+ 71C9             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 576+ 71C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ 71C9             >
 576+ 71C9             >                // dummy db directives used to calculate length of namec
 576+ 71C9 48 45 58    >                db      "HEX"
 576+ 71CC             >len_NFA         defl    $ - temp_NFA
 576+ 71CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ 71C9             >
 576+ 71C9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ 71CA 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 576+ 71CD             >                org     $-1                 // alter last byte of Name just above to set
 576+ 71CC D8          >                db      {b $} | END_BIT     // msb as name end
 576+ 71CD             >
 576+ 71CD B1 71       >                dw      last_NFA            // Link to previous definition Name
 576+ 71CF             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 71CF BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 71D1             >                else
 576+ 71D1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 576+ 71D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 71D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 71D1             >
 576+ 71D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 71D1 45 64 10 00                  dw      LIT, 16                 // 16
 578+ 71D5 8F 6E DB 6B                  dw      BASE, STORE             // base !
 579+ 71D9 95 69                        dw      EXIT                    // ;
 580+ 71DB
 581+ 71DB              //  ______________________________________________________________________
 582+ 71DB              //
 583+ 71DB              // decimal      --
 584+ 71DB              // change numeration base
 585+ 71DB                              Colon_Def DECIMAL, "DECIMAL", is_normal
 585+ 71DB             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 585+ 71DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 585+ 71DB             >
 585+ 71DB             >                // dummy db directives used to calculate length of namec
 585+ 71DB 44 45 43 49 >                db      "DECIMAL"
 585+ 71DF 4D 41 4C    >
 585+ 71E2             >len_NFA         defl    $ - temp_NFA
 585+ 71E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 585+ 71DB             >
 585+ 71DB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 585+ 71DC 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 585+ 71E0 4D 41 4C    >
 585+ 71E3             >                org     $-1                 // alter last byte of Name just above to set
 585+ 71E2 CC          >                db      {b $} | END_BIT     // msb as name end
 585+ 71E3             >
 585+ 71E3 C9 71       >                dw      last_NFA            // Link to previous definition Name
 585+ 71E5             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 585+ 71E5 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 585+ 71E7             >                else
 585+ 71E7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 585+ 71E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 585+ 71E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 585+ 71E7             >
 585+ 71E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 586+ 71E7 45 64 0A 00                  dw      LIT, 10                 // 10
 587+ 71EB 8F 6E DB 6B                  dw      BASE, STORE             // base !
 588+ 71EF 95 69                        dw      EXIT                    // ;
 589+ 71F1
 590+ 71F1              //  ______________________________________________________________________
 591+ 71F1              //
 592+ 71F1              // (;code)       --
 593+ 71F1              // patch to CFA to call/jump to the "following code"
 594+ 71F1                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 594+ 71F1             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 594+ 71F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ 71F1             >
 594+ 71F1             >                // dummy db directives used to calculate length of namec
 594+ 71F1 28 3B 43 4F >                db      "(;CODE)"
 594+ 71F5 44 45 29    >
 594+ 71F8             >len_NFA         defl    $ - temp_NFA
 594+ 71F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ 71F1             >
 594+ 71F1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ 71F2 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 594+ 71F6 44 45 29    >
 594+ 71F9             >                org     $-1                 // alter last byte of Name just above to set
 594+ 71F8 A9          >                db      {b $} | END_BIT     // msb as name end
 594+ 71F9             >
 594+ 71F9 DB 71       >                dw      last_NFA            // Link to previous definition Name
 594+ 71FB             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 71FB BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 71FD             >                else
 594+ 71FD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 594+ 71FD             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 71FD             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 71FD             >
 594+ 71FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 71FD D2 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 596+ 71FF 55 70                        dw      LATEST                  // latest   ( Word being defined in this moment )
 597+ 7201 93 70 73 70                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 598+ 7205
 599+ 7205
 600+ 7205
 601+ 7205
 602+ 7205
 603+ 7205 DB 6B                        dw      STORE                   // !
 604+ 7207 95 69                        dw      EXIT                    // ;
 605+ 7209
 606+ 7209              //  ______________________________________________________________________
 607+ 7209              //
 608+ 7209              // ;code        --
 609+ 7209                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 609+ 7209             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 609+ 7209             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ 7209             >
 609+ 7209             >                // dummy db directives used to calculate length of namec
 609+ 7209 3B 43 4F 44 >                db      ";CODE"
 609+ 720D 45          >
 609+ 720E             >len_NFA         defl    $ - temp_NFA
 609+ 720E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ 7209             >
 609+ 7209 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ 720A 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 609+ 720E 45          >
 609+ 720F             >                org     $-1                 // alter last byte of Name just above to set
 609+ 720E C5          >                db      {b $} | END_BIT     // msb as name end
 609+ 720F             >
 609+ 720F F1 71       >                dw      last_NFA            // Link to previous definition Name
 609+ 7211             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 7211 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 7213             >                else
 609+ 7213 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 609+ 7213             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 7213             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 7213             >
 609+ 7213             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 7213 35 71                        dw      QCSP                    // ?csp
 611+ 7215 6C 71                        dw      COMPILE                 // compile
 612+ 7217 FB 71                        dw      C_SEMICOLON_CODE        // (;code)
 613+ 7219 82 71                        dw      SQUARED_OPEN            // [
 614+ 721B E7 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 615+ 721D 95 69                        dw      EXIT                    // ; immediate
 616+ 721F
 617+ 721F              //  ______________________________________________________________________
 618+ 721F              //
 619+ 721F              // <builds      --
 620+ 721F                              Colon_Def CBUILDS, "<BUILDS", is_normal
 620+ 721F             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 620+ 721F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 620+ 721F             >
 620+ 721F             >                // dummy db directives used to calculate length of namec
 620+ 721F 3C 42 55 49 >                db      "<BUILDS"
 620+ 7223 4C 44 53    >
 620+ 7226             >len_NFA         defl    $ - temp_NFA
 620+ 7226             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 620+ 721F             >
 620+ 721F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 620+ 7220 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 620+ 7224 4C 44 53    >
 620+ 7227             >                org     $-1                 // alter last byte of Name just above to set
 620+ 7226 D3          >                db      {b $} | END_BIT     // msb as name end
 620+ 7227             >
 620+ 7227 09 72       >                dw      last_NFA            // Link to previous definition Name
 620+ 7229             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 620+ 7229 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 620+ 722B             >                else
 620+ 722B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 620+ 722B             >                endif           ; ok        // for other definitions it "points" the correct handler
 620+ 722B             >                // Use of "; ok" to suppress "warning[fwdref]"
 620+ 722B             >
 620+ 722B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 621+ 722B 3A 6D                        dw      ZERO                    // 0
 622+ 722D F6 6C                        dw      CONSTANT                // constant
 623+ 722F 95 69                        dw      EXIT                    // ;
 624+ 7231
 625+ 7231              //  ______________________________________________________________________
 626+ 7231              //
 627+ 7231              // recurse      --
 628+ 7231              //              Colon_Def RECURSE, "RECURSE", is_immediate
 629+ 7231              //              dw      QCOMP                   // ?comp
 630+ 7231              //              dw      LATEST                  // latest
 631+ 7231              //              dw      PFA, CFA                // pfa cfa
 632+ 7231              //              dw      COMMA                   // ,
 633+ 7231              //              dw      EXIT                    // ; immediate
 634+ 7231
 635+ 7231              //  ______________________________________________________________________
 636+ 7231              //
 637+ 7231              // does>     --
 638+ 7231                              Colon_Def DOES_TO, "DOES>", is_normal
 638+ 7231             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 638+ 7231             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 638+ 7231             >
 638+ 7231             >                // dummy db directives used to calculate length of namec
 638+ 7231 44 4F 45 53 >                db      "DOES>"
 638+ 7235 3E          >
 638+ 7236             >len_NFA         defl    $ - temp_NFA
 638+ 7236             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 638+ 7231             >
 638+ 7231 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 638+ 7232 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 638+ 7236 3E          >
 638+ 7237             >                org     $-1                 // alter last byte of Name just above to set
 638+ 7236 BE          >                db      {b $} | END_BIT     // msb as name end
 638+ 7237             >
 638+ 7237 1F 72       >                dw      last_NFA            // Link to previous definition Name
 638+ 7239             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 638+ 7239 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 638+ 723B             >                else
 638+ 723B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 638+ 723B             >                endif           ; ok        // for other definitions it "points" the correct handler
 638+ 723B             >                // Use of "; ok" to suppress "warning[fwdref]"
 638+ 723B             >
 638+ 723B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 639+ 723B D2 69                        dw      R_TO                    // r>
 640+ 723D 55 70                        dw      LATEST                  // latest
 641+ 723F 93 70                        dw      PFA                     // pfa
 642+ 7241 DB 6B                        dw      STORE                   // !
 643+ 7243 FB 71                        dw      C_SEMICOLON_CODE        // ;code
 644+ 7245              Does_Ptr:
 645+ 7245                              // via call coded in CFA
 646+ 7245                              ldhlrp
 646+ 7245 2A 30 64    >                ld      hl,(RP_Pointer)
 647+ 7248 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 648+ 7249 70                           ld      (hl), b
 649+ 724A 2B                           dec     hl
 650+ 724B 71                           ld      (hl), c
 651+ 724C                              ldrphl
 651+ 724C 22 30 64    >                ld      (RP_Pointer),hl
 652+ 724F 13                           inc     de
 653+ 7250 EB                           ex      de, hl
 654+ 7251 4E                           ld      c, (hl)
 655+ 7252 23                           inc     hl
 656+ 7253 46                           ld      b, (hl)
 657+ 7254 23                           inc     hl
 658+ 7255
 659+ 7255                              psh1
 659+ 7255 E5          >                push    hl
 659+ 7256 DD E9       >                jp      (ix)
 660+ 7258                              // SMUDGE !
 661+ 7258
 662+ 7258              //  ______________________________________________________________________
 663+ 7258              //
 664+ 7258              // count        a -- a2 n
 665+ 7258              // expects a counted string at address a, returns string address and counter
 666+ 7258                              Colon_Def COUNT, "COUNT", is_normal
 666+ 7258             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 666+ 7258             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 666+ 7258             >
 666+ 7258             >                // dummy db directives used to calculate length of namec
 666+ 7258 43 4F 55 4E >                db      "COUNT"
 666+ 725C 54          >
 666+ 725D             >len_NFA         defl    $ - temp_NFA
 666+ 725D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 666+ 7258             >
 666+ 7258 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 666+ 7259 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 666+ 725D 54          >
 666+ 725E             >                org     $-1                 // alter last byte of Name just above to set
 666+ 725D D4          >                db      {b $} | END_BIT     // msb as name end
 666+ 725E             >
 666+ 725E 31 72       >                dw      last_NFA            // Link to previous definition Name
 666+ 7260             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 666+ 7260 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 666+ 7262             >                else
 666+ 7262 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 666+ 7262             >                endif           ; ok        // for other definitions it "points" the correct handler
 666+ 7262             >                // Use of "; ok" to suppress "warning[fwdref]"
 666+ 7262             >
 666+ 7262             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 667+ 7262 0A 6B                        dw      DUP                     // dup
 668+ 7264 50 6A                        dw      ONE_PLUS                // 1+
 669+ 7266 FD 6A E9 6B                  dw      SWAP, CFETCH             // swap @
 670+ 726A 95 69                        dw      EXIT                    // ;
 671+ 726C
 672+ 726C              //  ______________________________________________________________________
 673+ 726C              //
 674+ 726C              // type         a n --
 675+ 726C              // Sends to current output channel n characters starting at address a.
 676+ 726C                              Colon_Def TYPE, "TYPE", is_normal
 676+ 726C             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 676+ 726C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 676+ 726C             >
 676+ 726C             >                // dummy db directives used to calculate length of namec
 676+ 726C 54 59 50 45 >                db      "TYPE"
 676+ 7270             >len_NFA         defl    $ - temp_NFA
 676+ 7270             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 676+ 726C             >
 676+ 726C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 676+ 726D 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 676+ 7271             >                org     $-1                 // alter last byte of Name just above to set
 676+ 7270 C5          >                db      {b $} | END_BIT     // msb as name end
 676+ 7271             >
 676+ 7271 58 72       >                dw      last_NFA            // Link to previous definition Name
 676+ 7273             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 676+ 7273 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 676+ 7275             >                else
 676+ 7275 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 676+ 7275             >                endif           ; ok        // for other definitions it "points" the correct handler
 676+ 7275             >                // Use of "; ok" to suppress "warning[fwdref]"
 676+ 7275             >
 676+ 7275             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 677+ 7275 C5 6A                        dw      OVER                    // over
 678+ 7277 27 6A                        dw      PLUS                    // +
 679+ 7279 FD 6A                        dw      SWAP                    // swap
 680+ 727B D9 64                        dw      C_Q_DO                  // ?do
 681+ 727D 0C 00                        dw      Type_Skip - $
 682+ 727F              Type_Loop:
 683+ 727F 12 65 E9 6B                  dw          I, CFETCH           //      i c@
 684+ 7283 01 70                        dw          EMIT                //      emit
 685+ 7285 94 64                        dw      C_LOOP                  // loop
 686+ 7287 F8 FF                        dw      Type_Loop - $
 687+ 7289              Type_Skip:
 688+ 7289 95 69                        dw      EXIT                    // ;
 689+ 728B
 690+ 728B              //  ______________________________________________________________________
 691+ 728B              //
 692+ 728B              // -trailing    a n1 -- a n2
 693+ 728B              // Assumes that an n1 bytes-long string is stored at address a
 694+ 728B              // and the string contains a space delimited word,
 695+ 728B              // Finds n2 as the position of the first character after the word.
 696+ 728B                              Colon_Def LTRAILING, "-TRAILING", is_normal
 696+ 728B             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 696+ 728B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 696+ 728B             >
 696+ 728B             >                // dummy db directives used to calculate length of namec
 696+ 728B 2D 54 52 41 >                db      "-TRAILING"
 696+ 728F 49 4C 49 4E >
 696+ 7293 47          >
 696+ 7294             >len_NFA         defl    $ - temp_NFA
 696+ 7294             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 696+ 728B             >
 696+ 728B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 696+ 728C 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 696+ 7290 49 4C 49 4E >
 696+ 7294 47          >
 696+ 7295             >                org     $-1                 // alter last byte of Name just above to set
 696+ 7294 C7          >                db      {b $} | END_BIT     // msb as name end
 696+ 7295             >
 696+ 7295 6C 72       >                dw      last_NFA            // Link to previous definition Name
 696+ 7297             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 696+ 7297 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 696+ 7299             >                else
 696+ 7299 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 696+ 7299             >                endif           ; ok        // for other definitions it "points" the correct handler
 696+ 7299             >                // Use of "; ok" to suppress "warning[fwdref]"
 696+ 7299             >
 696+ 7299             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 697+ 7299 0A 6B 3A 6D                  dw      DUP, ZERO               // dup 0
 698+ 729D                                                              // do
 699+ 729D 07 65                        dw      C_DO
 700+ 729F              LTrailing_Loop:
 701+ 729F 74 6B 27 6A                  dw          TWO_DUP, PLUS       //      2dup +
 702+ 72A3 5C 6A                        dw          ONE_SUBTRACT        //      1-
 703+ 72A5 E9 6B                        dw          CFETCH              //      c@
 704+ 72A7 64 6D 60 6F                  dw          BL, SUBTRACT        //      bl -
 705+ 72AB                                                              //      if
 706+ 72AB 7F 64                        dw          ZBRANCH
 707+ 72AD 08 00                        dw          LTrailing_Else - $
 708+ 72AF AB 69                        dw              LEAVE           //          leave
 709+ 72B1 68 64                        dw          BRANCH              //      else
 710+ 72B3 04 00                        dw          LTrailing_Endif - $
 711+ 72B5              LTrailing_Else:
 712+ 72B5 5C 6A                        dw              ONE_SUBTRACT    //          1-
 713+ 72B7              LTrailing_Endif:                                //      endif
 714+ 72B7                                                              // loop
 715+ 72B7 94 64                        dw      C_LOOP
 716+ 72B9 E6 FF                        dw      LTrailing_Loop - $
 717+ 72BB 95 69                        dw      EXIT                    // ;
 718+ 72BD
 719+ 72BD              //  ______________________________________________________________________
 720+ 72BD              //
 721+ 72BD              // accept       a n1 -- n2
 722+ 72BD              // Accepts at most n1 characters from terminal and stores them at address a
 723+ 72BD              // CR stops input. A 'nul' is added as trailer.
 724+ 72BD              // n2 is the string length. n2 is kept in span user variable also.
 725+ 72BD                              Colon_Def ACCEPT, "ACCEPT", is_normal
 725+ 72BD             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 725+ 72BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 725+ 72BD             >
 725+ 72BD             >                // dummy db directives used to calculate length of namec
 725+ 72BD 41 43 43 45 >                db      "ACCEPT"
 725+ 72C1 50 54       >
 725+ 72C3             >len_NFA         defl    $ - temp_NFA
 725+ 72C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 725+ 72BD             >
 725+ 72BD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 725+ 72BE 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 725+ 72C2 50 54       >
 725+ 72C4             >                org     $-1                 // alter last byte of Name just above to set
 725+ 72C3 D4          >                db      {b $} | END_BIT     // msb as name end
 725+ 72C4             >
 725+ 72C4 8B 72       >                dw      last_NFA            // Link to previous definition Name
 725+ 72C6             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 725+ 72C6 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 725+ 72C8             >                else
 725+ 72C8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 725+ 72C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 725+ 72C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 725+ 72C8             >
 725+ 72C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 726+ 72C8 C5 6A 27 6A                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 726+ 72CC C5 6A
 727+ 72CE 3A 6D 17 6B                  dw      ZERO, ROT, ROT          //                      ( a  0     a+n1  a )
 727+ 72D2 17 6B
 728+ 72D4                                                              // do
 729+ 72D4 07 65                        dw      C_DO                    //                      ( a  0 )
 730+ 72D6              Accept_Loop:
 731+ 72D6 D5 6A FF 66                  dw          DROP, KEY           //      drop key        ( a  c )
 732+ 72DA 0A 6B                        dw          DUP                 //      dup             ( a  c  c )
 733+ 72DC 45 64 0E 00                  dw          LIT, $0E            //      0E
 734+ 72E0 A0 6D                        dw          PLUS_ORIGIN         //      +origin
 735+ 72E2 CE 6B                        dw          FETCH               //      @               ( a  c  c  del )
 736+ 72E4 6E 6F                        dw          EQUALS              //      =               ( a  c  c==del )
 737+ 72E6                                                              //      if
 738+ 72E6 7F 64                        dw          ZBRANCH
 739+ 72E8 2A 00                        dw          Accept_Else_0 - $
 740+ 72EA D5 6A                        dw              DROP            //          drop        ( a  )
 741+ 72EC 0A 6B 12 65                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 741+ 72F0 6E 6F
 742+ 72F2 0A 6B                        dw              DUP             //          dup         ( a  a==i  a==i )
 743+ 72F4 D2 69                        dw              R_TO            //          r> 2 - + r>
 744+ 72F6 4A 6D 60 6F                  dw              TWO, SUBTRACT, PLUS //      ( decrement index by 1 or 2 )
 744+ 72FA 27 6A
 745+ 72FC BE 69                        dw              TO_R            //
 746+ 72FE                                                              //          if
 747+ 72FE 7F 64                        dw              ZBRANCH
 748+ 7300 0A 00                        dw              Accept_Else_1 - $
 749+ 7302 45 64 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 750+ 7306                                                              //          else
 751+ 7306 68 64                        dw              BRANCH
 752+ 7308 06 00                        dw              Accept_Endif_1 - $
 753+ 730A              Accept_Else_1:
 754+ 730A 45 64 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 755+ 730E              Accept_Endif_1:                                 //          endif
 756+ 730E 68 64                        dw          BRANCH
 757+ 7310 30 00                        dw          Accept_Endif_0 - $
 758+ 7312              Accept_Else_0:                                  //      else
 759+ 7312 0A 6B                        dw              DUP             //          dup         ( a  c  c )
 760+ 7314 45 64 0D 00                  dw              LIT, 13         //          13
 761+ 7318 6E 6F                        dw              EQUALS          //          =           ( a  c  c==CR )
 762+ 731A                                                              //          if
 763+ 731A 7F 64                        dw              ZBRANCH
 764+ 731C 0E 00                        dw              Accept_Else_2 - $
 765+ 731E D5 6A 64 6D                  dw                  DROP, BL    //              drop bl ( a  bl )
 766+ 7322 3A 6D                        dw                  ZERO        //              0       ( a  c  0 )
 767+ 7324 AB 69                        dw                  LEAVE       //              leave
 768+ 7326                                                              //          else
 769+ 7326 68 64                        dw              BRANCH
 770+ 7328 04 00                        dw              Accept_Endif_2 - $
 771+ 732A              Accept_Else_2:
 772+ 732A 0A 6B                        dw                  DUP         //              dup     ( a  c  c )
 773+ 732C                                                              //          endif
 774+ 732C              Accept_Endif_2:
 775+ 732C 12 65 F7 6B                  dw              I, CSTORE       //          i           ( a  c )
 776+ 7330 0A 6B 64 6D                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 776+ 7334 8F 6F
 777+ 7336                                                              //          if
 778+ 7336 7F 64                        dw              ZBRANCH
 779+ 7338 08 00                        dw              Accept_Endif_3 - $
 780+ 733A D2 69                        dw                  R_TO        //              r>
 781+ 733C 5C 6A                        dw                  ONE_SUBTRACT//              1-
 782+ 733E BE 69                        dw                  TO_R        //              >r
 783+ 7340                                                              //          endif
 784+ 7340              Accept_Endif_3:
 785+ 7340              Accept_Endif_0:                                 //      endif
 786+ 7340 01 70                        dw          EMIT                //      emit
 787+ 7342 3A 6D 12 65                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 787+ 7346 50 6A
 788+ 7348 DB 6B                        dw          STORE               //          ( zero pad )
 789+ 734A 12 65                        dw          I                   //      i
 790+ 734C                                                              // loop
 791+ 734C 94 64                        dw      C_LOOP
 792+ 734E 88 FF                        dw      Accept_Loop - $
 793+ 7350 FD 6A 60 6F                  dw      SWAP, SUBTRACT          // swap -
 794+ 7354 50 6A                        dw      ONE_PLUS                // 1+
 795+ 7356 0A 6B FA 6E                  dw      DUP, SPAN, STORE        // dup span !
 795+ 735A DB 6B
 796+ 735C 95 69                        dw      EXIT                    // ;
 797+ 735E
 798+ 735E              //  ______________________________________________________________________
 799+ 735E              //
 800+ 735E              // expect      a n --
 801+ 735E              // Accepts at most n1 characters from terminal and stores them at address a
 802+ 735E              // CR stops input. A 'nul' is added as trailer.
 803+ 735E              // n2 is the string length. n2 is kept in span user variable also.
 804+ 735E                              Colon_Def EXPECT, "EXPECT", is_normal
 804+ 735E             >                New_Def  EXPECT, "EXPECT", Enter_Ptr, is_normal ; ok
 804+ 735E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 804+ 735E             >
 804+ 735E             >                // dummy db directives used to calculate length of namec
 804+ 735E 45 58 50 45 >                db      "EXPECT"
 804+ 7362 43 54       >
 804+ 7364             >len_NFA         defl    $ - temp_NFA
 804+ 7364             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 804+ 735E             >
 804+ 735E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 804+ 735F 45 58 50 45 >                db      "EXPECT"               // name string in 7-bit ascii, but
 804+ 7363 43 54       >
 804+ 7365             >                org     $-1                 // alter last byte of Name just above to set
 804+ 7364 D4          >                db      {b $} | END_BIT     // msb as name end
 804+ 7365             >
 804+ 7365 BD 72       >                dw      last_NFA            // Link to previous definition Name
 804+ 7367             >EXPECT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 804+ 7367 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 804+ 7369             >                else
 804+ 7369 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 804+ 7369             >                endif           ; ok        // for other definitions it "points" the correct handler
 804+ 7369             >                // Use of "; ok" to suppress "warning[fwdref]"
 804+ 7369             >
 804+ 7369             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 805+ 7369 C6 72 D5 6A                  dw      ACCEPT, DROP            // accept drop
 806+ 736D 95 69                        dw      EXIT                    // ;
 807+ 736F
 808+ 736F              //  ______________________________________________________________________
 809+ 736F              //
 810+ 736F              // query        --
 811+ 736F              // Accept at most 80 character from console. CR stops.
 812+ 736F              // Text is stored in TIB. Variable IN is zeroed.
 813+ 736F                              Colon_Def QUERY, "QUERY", is_normal
 813+ 736F             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 813+ 736F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 813+ 736F             >
 813+ 736F             >                // dummy db directives used to calculate length of namec
 813+ 736F 51 55 45 52 >                db      "QUERY"
 813+ 7373 59          >
 813+ 7374             >len_NFA         defl    $ - temp_NFA
 813+ 7374             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 813+ 736F             >
 813+ 736F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 813+ 7370 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 813+ 7374 59          >
 813+ 7375             >                org     $-1                 // alter last byte of Name just above to set
 813+ 7374 D9          >                db      {b $} | END_BIT     // msb as name end
 813+ 7375             >
 813+ 7375 5E 73       >                dw      last_NFA            // Link to previous definition Name
 813+ 7377             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 813+ 7377 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 813+ 7379             >                else
 813+ 7379 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 813+ 7379             >                endif           ; ok        // for other definitions it "points" the correct handler
 813+ 7379             >                // Use of "; ok" to suppress "warning[fwdref]"
 813+ 7379             >
 813+ 7379             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 814+ 7379 CD 6D CE 6B                  dw      TIB, FETCH              // tib @
 815+ 737D 45 64 50 00                  dw      LIT, 80                 // 80
 816+ 7381 67 73                        dw      EXPECT                  // expect
 817+ 7383 3A 6D 42 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 817+ 7387 DB 6B
 818+ 7389 95 69                        dw      EXIT                    // ;
 819+ 738B
 820+ 738B              //  ______________________________________________________________________
 821+ 738B              //
 822+ 738B              // fill        a n c --
 823+ 738B              // If n > 0, fills n locations starting from address a with the value c.
 824+ 738B                              New_Def FILL, "FILL", is_code, is_normal
 824+ 738B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 824+ 738B             >
 824+ 738B             >                // dummy db directives used to calculate length of namec
 824+ 738B 46 49 4C 4C >                db      "FILL"
 824+ 738F             >len_NFA         defl    $ - temp_NFA
 824+ 738F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 824+ 738B             >
 824+ 738B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 824+ 738C 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 824+ 7390             >                org     $-1                 // alter last byte of Name just above to set
 824+ 738F CC          >                db      {b $} | END_BIT     // msb as name end
 824+ 7390             >
 824+ 7390 6F 73       >                dw      last_NFA            // Link to previous definition Name
 824+ 7392             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 824+ 7392 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 824+ 7392             >                else
 824+ 7392 94 73       >                dw      $ + 2   ; ok        // is pointed by CFA
 824+ 7394             >                endif           ; ok        // for other definitions it "points" the correct handler
 824+ 7394             >                // Use of "; ok" to suppress "warning[fwdref]"
 824+ 7394             >
 824+ 7394             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 825+ 7394 69                           ld      l, c
 826+ 7395 60                           ld      h, b
 827+ 7396 D1                           pop     de                  // de has character
 828+ 7397 C1                           pop     bc                  // bc has counter
 829+ 7398 E3                           ex      (sp), hl            // hl has address, save Instruction Pointer
 830+ 7399              Fill_Loop:
 831+ 7399 78                               ld      a, b
 832+ 739A B1                               or      c
 833+ 739B 28 05                        jr      z, Fill_While_End
 834+ 739D 73                               ld      (hl), e
 835+ 739E 0B                               dec     bc
 836+ 739F 23                               inc     hl
 837+ 73A0 18 F7                        jr      Fill_Loop
 838+ 73A2              Fill_While_End:
 839+ 73A2 C1                           pop     bc                  // Restore Instruction Pointer
 840+ 73A3
 841+ 73A3                              next
 841+ 73A3 DD E9       >                jp      (ix)
 842+ 73A5
 843+ 73A5              //  ______________________________________________________________________
 844+ 73A5              //
 845+ 73A5              // erase        a n --
 846+ 73A5              // If n > 0, fills n locations starting from address a with 'nul' characters.
 847+ 73A5                              Colon_Def ERASE, "ERASE", is_normal
 847+ 73A5             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 847+ 73A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 847+ 73A5             >
 847+ 73A5             >                // dummy db directives used to calculate length of namec
 847+ 73A5 45 52 41 53 >                db      "ERASE"
 847+ 73A9 45          >
 847+ 73AA             >len_NFA         defl    $ - temp_NFA
 847+ 73AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 847+ 73A5             >
 847+ 73A5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 847+ 73A6 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 847+ 73AA 45          >
 847+ 73AB             >                org     $-1                 // alter last byte of Name just above to set
 847+ 73AA C5          >                db      {b $} | END_BIT     // msb as name end
 847+ 73AB             >
 847+ 73AB 8B 73       >                dw      last_NFA            // Link to previous definition Name
 847+ 73AD             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 847+ 73AD BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 847+ 73AF             >                else
 847+ 73AF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 847+ 73AF             >                endif           ; ok        // for other definitions it "points" the correct handler
 847+ 73AF             >                // Use of "; ok" to suppress "warning[fwdref]"
 847+ 73AF             >
 847+ 73AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 848+ 73AF 3A 6D 92 73                  dw      ZERO, FILL              // 0 fill
 849+ 73B3 95 69                        dw      EXIT                    // ;
 850+ 73B5
 851+ 73B5              //  ______________________________________________________________________
 852+ 73B5              //
 853+ 73B5              // blanks       a n --
 854+ 73B5              // If n > 0, fills n locations starting from address a with 'nul' characters.
 855+ 73B5                              Colon_Def BLANKS, "BLANKS", is_normal
 855+ 73B5             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 855+ 73B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 855+ 73B5             >
 855+ 73B5             >                // dummy db directives used to calculate length of namec
 855+ 73B5 42 4C 41 4E >                db      "BLANKS"
 855+ 73B9 4B 53       >
 855+ 73BB             >len_NFA         defl    $ - temp_NFA
 855+ 73BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 855+ 73B5             >
 855+ 73B5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 855+ 73B6 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 855+ 73BA 4B 53       >
 855+ 73BC             >                org     $-1                 // alter last byte of Name just above to set
 855+ 73BB D3          >                db      {b $} | END_BIT     // msb as name end
 855+ 73BC             >
 855+ 73BC A5 73       >                dw      last_NFA            // Link to previous definition Name
 855+ 73BE             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 855+ 73BE BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 855+ 73C0             >                else
 855+ 73C0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 855+ 73C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 855+ 73C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 855+ 73C0             >
 855+ 73C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 856+ 73C0 64 6D 92 73                  dw      BL, FILL                // bl fill
 857+ 73C4 95 69                        dw      EXIT                    // ;
 858+ 73C6
 859+ 73C6              //  ______________________________________________________________________
 860+ 73C6              //
 861+ 73C6              // hold         c --
 862+ 73C6              // Used between <# and #> to insert a character c in numeric formatting.
 863+ 73C6                              Colon_Def HOLD, "HOLD", is_normal
 863+ 73C6             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 863+ 73C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 863+ 73C6             >
 863+ 73C6             >                // dummy db directives used to calculate length of namec
 863+ 73C6 48 4F 4C 44 >                db      "HOLD"
 863+ 73CA             >len_NFA         defl    $ - temp_NFA
 863+ 73CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 863+ 73C6             >
 863+ 73C6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 863+ 73C7 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 863+ 73CB             >                org     $-1                 // alter last byte of Name just above to set
 863+ 73CA C4          >                db      {b $} | END_BIT     // msb as name end
 863+ 73CB             >
 863+ 73CB B5 73       >                dw      last_NFA            // Link to previous definition Name
 863+ 73CD             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 863+ 73CD BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 863+ 73CF             >                else
 863+ 73CF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 863+ 73CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 863+ 73CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 863+ 73CF             >
 863+ 73CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 864+ 73CF 5B 6D                        dw      NEG_ONE                 // -1
 865+ 73D1 BB 6E AB 6B                  dw      HLD, PLUSSTORE          // hld +!
 866+ 73D5 BB 6E CE 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 866+ 73D9 F7 6B
 867+ 73DB 95 69                        dw      EXIT                    // ;
 868+ 73DD
 869+ 73DD              //  ______________________________________________________________________
 870+ 73DD              //
 871+ 73DD              // pad         -- a
 872+ 73DD              // leaves the buffer text address. This is at a fixed distance over HERE.
 873+ 73DD                              Colon_Def PAD, "PAD", is_normal
 873+ 73DD             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 873+ 73DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 873+ 73DD             >
 873+ 73DD             >                // dummy db directives used to calculate length of namec
 873+ 73DD 50 41 44    >                db      "PAD"
 873+ 73E0             >len_NFA         defl    $ - temp_NFA
 873+ 73E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 873+ 73DD             >
 873+ 73DD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 873+ 73DE 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 873+ 73E1             >                org     $-1                 // alter last byte of Name just above to set
 873+ 73E0 C4          >                db      {b $} | END_BIT     // msb as name end
 873+ 73E1             >
 873+ 73E1 C6 73       >                dw      last_NFA            // Link to previous definition Name
 873+ 73E3             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 873+ 73E3 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 873+ 73E5             >                else
 873+ 73E5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 873+ 73E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 873+ 73E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 873+ 73E5             >
 873+ 73E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 874+ 73E5 0C 6F                        dw      HERE                    // here
 875+ 73E7 45 64 44 00                  dw      LIT, 68                 // 68
 876+ 73EB 27 6A                        dw      PLUS                    // +
 877+ 73ED 95 69                        dw      EXIT                    // ;
 878+ 73EF
 879+ 73EF              //  ______________________________________________________________________
 880+ 73EF              //
 881+ 73EF              // word         c -- a
 882+ 73EF              // reads characters from input streams until it encouners a c delimiter.
 883+ 73EF              // Stores that packet so it starts from HERE
 884+ 73EF              // WORD leaves a counter as first byte and ends the packet with two spaces.
 885+ 73EF              // Other occurrences of c are ignored.
 886+ 73EF              // If BLK is zero, text is taken from terminal buffer TIB.
 887+ 73EF              // Otherwise text is taken from the disk-block given by BLK.
 888+ 73EF              // "in" variable is incremented of the number of character read.
 889+ 73EF              // The number of characters read is given by ENCLOSE.
 890+ 73EF                              Colon_Def WORD, "WORD", is_normal
 890+ 73EF             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 890+ 73EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 890+ 73EF             >
 890+ 73EF             >                // dummy db directives used to calculate length of namec
 890+ 73EF 57 4F 52 44 >                db      "WORD"
 890+ 73F3             >len_NFA         defl    $ - temp_NFA
 890+ 73F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 890+ 73EF             >
 890+ 73EF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 890+ 73F0 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 890+ 73F4             >                org     $-1                 // alter last byte of Name just above to set
 890+ 73F3 C4          >                db      {b $} | END_BIT     // msb as name end
 890+ 73F4             >
 890+ 73F4 DD 73       >                dw      last_NFA            // Link to previous definition Name
 890+ 73F6             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 890+ 73F6 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 890+ 73F8             >                else
 890+ 73F8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 890+ 73F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 890+ 73F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 890+ 73F8             >
 890+ 73F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 891+ 73F8 39 6E CE 6B                  dw      BLK, FETCH              // blk @
 892+ 73FC                                                              // if
 893+ 73FC 7F 64                        dw      ZBRANCH
 894+ 73FE 0C 00                        dw      Word_Else - $
 895+ 7400 39 6E CE 6B                  dw          BLK, FETCH          //      blk @
 896+ 7404 A9 7D                        dw          BLOCK               //      block ( forward )
 897+ 7406                                                              // else
 898+ 7406 68 64                        dw      BRANCH
 899+ 7408 06 00                        dw      Word_Endif - $
 900+ 740A              Word_Else:
 901+ 740A CD 6D CE 6B                  dw         TIB, FETCH           //      tib @
 902+ 740E              Word_Endif:                                     // endif
 903+ 740E 42 6E CE 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 903+ 7412 27 6A
 904+ 7414 FD 6A F2 65                  dw      SWAP, ENCLOSE           // swap enclose
 905+ 7418 0C 6F 45 64                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 905+ 741C 22 00 BE 73
 906+ 7420 42 6E AB 6B                  dw      TO_IN, PLUSSTORE        // >in @ +
 907+ 7424 C5 6A 60 6F                  dw      OVER, SUBTRACT, TO_R    // over - >r
 907+ 7428 BE 69
 908+ 742A E5 69 0C 6F                  dw      R_OP, HERE, CSTORE      // r here c!
 908+ 742E F7 6B
 909+ 7430 27 6A                        dw      PLUS                    // +
 910+ 7432 0C 6F 50 6A                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 910+ 7436 D2 69
 911+ 7438 8B 68                        dw      CMOVE                   // cmove
 912+ 743A 0C 6F                        dw      HERE                    // here
 913+ 743C 95 69                        dw      EXIT                    // ;
 914+ 743E
 915+ 743E              //  ______________________________________________________________________
 916+ 743E              //
 917+ 743E              // (.")         --
 918+ 743E              // Direct procedure compiled by ." and  .(  It executes TYPE.
 919+ 743E                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 919+ 743E             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 919+ 743E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 919+ 743E             >
 919+ 743E             >                // dummy db directives used to calculate length of namec
 919+ 743E 28 2E 22 29 >                db      '(.")'
 919+ 7442             >len_NFA         defl    $ - temp_NFA
 919+ 7442             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 919+ 743E             >
 919+ 743E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 919+ 743F 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 919+ 7443             >                org     $-1                 // alter last byte of Name just above to set
 919+ 7442 A9          >                db      {b $} | END_BIT     // msb as name end
 919+ 7443             >
 919+ 7443 EF 73       >                dw      last_NFA            // Link to previous definition Name
 919+ 7445             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 919+ 7445 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 919+ 7447             >                else
 919+ 7447 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 919+ 7447             >                endif           ; ok        // for other definitions it "points" the correct handler
 919+ 7447             >                // Use of "; ok" to suppress "warning[fwdref]"
 919+ 7447             >
 919+ 7447             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 920+ 7447 E5 69 60 72                  dw      R_OP, COUNT             // r count
 921+ 744B 0A 6B 50 6A                  dw      DUP, ONE_PLUS           // dup 1+
 922+ 744F D2 69 27 6A                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 922+ 7453 BE 69
 923+ 7455 73 72                        dw      TYPE                    // type
 924+ 7457 95 69                        dw      EXIT                    // ;
 925+ 7459
 926+ 7459              //  ______________________________________________________________________
 927+ 7459              //
 928+ 7459              // char         -- c
 929+ 7459              // get first character from next input word
 930+ 7459                              Colon_Def CHAR,  "CHAR", is_normal
 930+ 7459             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 930+ 7459             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 930+ 7459             >
 930+ 7459             >                // dummy db directives used to calculate length of namec
 930+ 7459 43 48 41 52 >                db      "CHAR"
 930+ 745D             >len_NFA         defl    $ - temp_NFA
 930+ 745D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 930+ 7459             >
 930+ 7459 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 930+ 745A 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 930+ 745E             >                org     $-1                 // alter last byte of Name just above to set
 930+ 745D D2          >                db      {b $} | END_BIT     // msb as name end
 930+ 745E             >
 930+ 745E 3E 74       >                dw      last_NFA            // Link to previous definition Name
 930+ 7460             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 930+ 7460 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 930+ 7462             >                else
 930+ 7462 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 930+ 7462             >                endif           ; ok        // for other definitions it "points" the correct handler
 930+ 7462             >                // Use of "; ok" to suppress "warning[fwdref]"
 930+ 7462             >
 930+ 7462             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 931+ 7462 64 6D F6 73                  dw      BL, WORD                // bl word
 932+ 7466 50 6A E9 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 933+ 746A 95 69                        dw      EXIT                    // ;
 934+ 746C
 935+ 746C              //  ______________________________________________________________________
 936+ 746C              //
 937+ 746C              // ,"           --
 938+ 746C              // compiles a string terminated by " as a counted string from next input stream
 939+ 746C                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 939+ 746C             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 939+ 746C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 939+ 746C             >
 939+ 746C             >                // dummy db directives used to calculate length of namec
 939+ 746C 2C 22       >                db      ',"'
 939+ 746E             >len_NFA         defl    $ - temp_NFA
 939+ 746E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 939+ 746C             >
 939+ 746C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 939+ 746D 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 939+ 746F             >                org     $-1                 // alter last byte of Name just above to set
 939+ 746E A2          >                db      {b $} | END_BIT     // msb as name end
 939+ 746F             >
 939+ 746F 59 74       >                dw      last_NFA            // Link to previous definition Name
 939+ 7471             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 939+ 7471 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 939+ 7473             >                else
 939+ 7473 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 939+ 7473             >                endif           ; ok        // for other definitions it "points" the correct handler
 939+ 7473             >                // Use of "; ok" to suppress "warning[fwdref]"
 939+ 7473             >
 939+ 7473             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 940+ 7473 45 64 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 941+ 7477 F6 73                        dw      WORD                    // word
 942+ 7479 E9 6B 50 6A                  dw      CFETCH, ONE_PLUS        // c@ 1+
 943+ 747D 1C 6F                        dw      ALLOT                   // allot
 944+ 747F 3A 6D 39 6F                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
 945+ 7483 95 69                        dw      EXIT
 946+ 7485
 947+ 7485              //  ______________________________________________________________________
 948+ 7485              //
 949+ 7485              // .c           c --
 950+ 7485              // intermediate general purpose string builder, used by ." and .(
 951+ 7485                              Colon_Def DOT_C,  ".C", is_immediate
 951+ 7485             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
 951+ 7485             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 951+ 7485             >
 951+ 7485             >                // dummy db directives used to calculate length of namec
 951+ 7485 2E 43       >                db      ".C"
 951+ 7487             >len_NFA         defl    $ - temp_NFA
 951+ 7487             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 951+ 7485             >
 951+ 7485 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 951+ 7486 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
 951+ 7488             >                org     $-1                 // alter last byte of Name just above to set
 951+ 7487 C3          >                db      {b $} | END_BIT     // msb as name end
 951+ 7488             >
 951+ 7488 6C 74       >                dw      last_NFA            // Link to previous definition Name
 951+ 748A             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 951+ 748A BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 951+ 748C             >                else
 951+ 748C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 951+ 748C             >                endif           ; ok        // for other definitions it "points" the correct handler
 951+ 748C             >                // Use of "; ok" to suppress "warning[fwdref]"
 951+ 748C             >
 951+ 748C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 952+ 748C 85 6E CE 6B                  dw      STATE, FETCH            // state @
 953+ 7490                                                              // if
 954+ 7490 7F 64                        dw      ZBRANCH
 955+ 7492 12 00                        dw      Dot_C_Else - $
 956+ 7494 6C 71 45 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
 957+ 7498 F6 73 E9 6B                  dw          WORD, CFETCH        //      word c@
 958+ 749C 50 6A 1C 6F                  dw          ONE_PLUS, ALLOT     //      1+ allot
 959+ 74A0                                                              // else
 960+ 74A0 68 64                        dw      BRANCH
 961+ 74A2 08 00                        dw      Dot_C_Endif - $
 962+ 74A4              Dot_C_Else:
 963+ 74A4 F6 73 60 72                  dw          WORD, COUNT, TYPE   //      word count type
 963+ 74A8 73 72
 964+ 74AA              Dot_C_Endif:                                    // endif
 965+ 74AA 95 69                        dw      EXIT                    ;
 966+ 74AC
 967+ 74AC              //  ______________________________________________________________________
 968+ 74AC              //
 969+ 74AC              // ."           c --
 970+ 74AC                              Colon_Def DOT_QUOTE,  '."', is_immediate
 970+ 74AC             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
 970+ 74AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 970+ 74AC             >
 970+ 74AC             >                // dummy db directives used to calculate length of namec
 970+ 74AC 2E 22       >                db      '."'
 970+ 74AE             >len_NFA         defl    $ - temp_NFA
 970+ 74AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 970+ 74AC             >
 970+ 74AC C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 970+ 74AD 2E 22       >                db      '."'               // name string in 7-bit ascii, but
 970+ 74AF             >                org     $-1                 // alter last byte of Name just above to set
 970+ 74AE A2          >                db      {b $} | END_BIT     // msb as name end
 970+ 74AF             >
 970+ 74AF 85 74       >                dw      last_NFA            // Link to previous definition Name
 970+ 74B1             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 970+ 74B1 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 970+ 74B3             >                else
 970+ 74B3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 970+ 74B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 970+ 74B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 970+ 74B3             >
 970+ 74B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 971+ 74B3 45 64 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 972+ 74B7 8A 74                        dw      DOT_C                   // [compile] .c
 973+ 74B9 95 69                        dw      EXIT                    // ; immediate
 974+ 74BB
 975+ 74BB              //  ______________________________________________________________________
 976+ 74BB              //
 977+ 74BB              // .(           c --
 978+ 74BB                              Colon_Def DOT_BRACKET,  ".(", is_immediate
 978+ 74BB             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
 978+ 74BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ 74BB             >
 978+ 74BB             >                // dummy db directives used to calculate length of namec
 978+ 74BB 2E 28       >                db      ".("
 978+ 74BD             >len_NFA         defl    $ - temp_NFA
 978+ 74BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ 74BB             >
 978+ 74BB C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ 74BC 2E 28       >                db      ".("               // name string in 7-bit ascii, but
 978+ 74BE             >                org     $-1                 // alter last byte of Name just above to set
 978+ 74BD A8          >                db      {b $} | END_BIT     // msb as name end
 978+ 74BE             >
 978+ 74BE AC 74       >                dw      last_NFA            // Link to previous definition Name
 978+ 74C0             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 74C0 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 978+ 74C2             >                else
 978+ 74C2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 978+ 74C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 74C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 74C2             >
 978+ 74C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 74C2 45 64 29 00                  dw      LIT, ")"                // [char] )
 980+ 74C6 8A 74                        dw      DOT_C                   // [compile] .c
 981+ 74C8 95 69                        dw      EXIT                    // ; immediate
 982+ 74CA
 983+ 74CA              //  ______________________________________________________________________
 984+ 74CA              //
 985+ 74CA              // (sgn)        a -- a f
 986+ 74CA              // determines if char in addr a is a sign (+ or -), and in that case increments
 987+ 74CA              // a flag. Returns f as the sign, true for negative, false for positive.
 988+ 74CA              // called by NUMBER and (EXP)
 989+ 74CA                              Colon_Def CSGN,  "(SGN)", is_normal
 989+ 74CA             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
 989+ 74CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 989+ 74CA             >
 989+ 74CA             >                // dummy db directives used to calculate length of namec
 989+ 74CA 28 53 47 4E >                db      "(SGN)"
 989+ 74CE 29          >
 989+ 74CF             >len_NFA         defl    $ - temp_NFA
 989+ 74CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 989+ 74CA             >
 989+ 74CA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 989+ 74CB 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
 989+ 74CF 29          >
 989+ 74D0             >                org     $-1                 // alter last byte of Name just above to set
 989+ 74CF A9          >                db      {b $} | END_BIT     // msb as name end
 989+ 74D0             >
 989+ 74D0 BB 74       >                dw      last_NFA            // Link to previous definition Name
 989+ 74D2             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 989+ 74D2 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 989+ 74D4             >                else
 989+ 74D4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 989+ 74D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 989+ 74D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 989+ 74D4             >
 989+ 74D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 990+ 74D4 0A 6B 50 6A                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
 990+ 74D8 E9 6B
 991+ 74DA 0A 6B 45 64                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
 991+ 74DE 2D 00 6E 6F
 992+ 74E2                                                              // if
 993+ 74E2 7F 64                        dw      ZBRANCH
 994+ 74E4 12 00                        dw      CSgn_Else_0 - $
 995+ 74E6 D5 6A                        dw          DROP                //      drop
 996+ 74E8 50 6A                        dw          ONE_PLUS            //      1+
 997+ 74EA 42 6D 98 6E                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
 997+ 74EE AB 6B
 998+ 74F0 42 6D                        dw          ONE                 //      1
 999+ 74F2                                                              // else
1000+ 74F2 68 64                        dw      BRANCH
1001+ 74F4 16 00                        dw      CSgn_Endif_0 - $
1002+ 74F6              CSgn_Else_0:
1003+ 74F6 45 64 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1003+ 74FA 6E 6F
1004+ 74FC                                                              //      if
1005+ 74FC 7F 64                        dw          ZBRANCH
1006+ 74FE 0A 00                        dw          CSgn_Endif_1 - $
1007+ 7500 50 6A                        dw              ONE_PLUS        //          1+
1008+ 7502 42 6D 98 6E                  dw              ONE, DPL        //          1 dpl
1009+ 7506 AB 6B                        dw              PLUSSTORE       //          +!
1010+ 7508              CSgn_Endif_1                                    //      endif
1011+ 7508 3A 6D                        dw          ZERO                //      0
1012+ 750A              CSgn_Endif_0:                                   // endif
1013+ 750A 95 69                        dw      EXIT
1014+ 750C
1015+ 750C              //  ______________________________________________________________________
1016+ 750C              //
1017+ 750C              // (number)     d a -- d1 a1
1018+ 750C              // using the current BASE parse characters stored in address a
1019+ 750C              // accumulating a double precision integer d
1020+ 750C              // the process stops at the first not-convertible character
1021+ 750C              // A double-number is kept in CPU registers as HLDE.
1022+ 750C              // On the stack a double number is treated as two single numbers
1023+ 750C              // where HL is on the top of the stack and DE is the second from top,
1024+ 750C              // so in the stack memory it appears as LHED.
1025+ 750C              // Instead, in 2VARIABLE a double number is stored as EDLH.
1026+ 750C                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1026+ 750C             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1026+ 750C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1026+ 750C             >
1026+ 750C             >                // dummy db directives used to calculate length of namec
1026+ 750C 28 4E 55 4D >                db      "(NUMBER)"
1026+ 7510 42 45 52 29 >
1026+ 7514             >len_NFA         defl    $ - temp_NFA
1026+ 7514             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1026+ 750C             >
1026+ 750C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1026+ 750D 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1026+ 7511 42 45 52 29 >
1026+ 7515             >                org     $-1                 // alter last byte of Name just above to set
1026+ 7514 A9          >                db      {b $} | END_BIT     // msb as name end
1026+ 7515             >
1026+ 7515 CA 74       >                dw      last_NFA            // Link to previous definition Name
1026+ 7517             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1026+ 7517 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1026+ 7519             >                else
1026+ 7519 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1026+ 7519             >                endif           ; ok        // for other definitions it "points" the correct handler
1026+ 7519             >                // Use of "; ok" to suppress "warning[fwdref]"
1026+ 7519             >
1026+ 7519             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1027+ 7519                                                              // begin
1028+ 7519              CNumber_Begin:
1029+ 7519 50 6A                        dw          ONE_PLUS            //      1+
1030+ 751B 0A 6B BE 69                  dw          DUP, TO_R           //      dup >r
1031+ 751F E9 6B                        dw          CFETCH              //      @
1032+ 7521 8F 6E CE 6B                  dw          BASE, FETCH         //      base @
1033+ 7525 25 65                        dw          DIGIT               //      digit
1034+ 7527                                                              // while
1035+ 7527 7F 64                        dw      ZBRANCH
1036+ 7529 2C 00                        dw      CNumber_While_end - $
1037+ 752B FD 6A                        dw          SWAP                //      swap
1038+ 752D 8F 6E CE 6B                  dw          BASE, FETCH         //      base @
1039+ 7531 C0 68                        dw          UM_MUL              //      um*
1040+ 7533 D5 6A 17 6B                  dw          DROP, ROT           //      drop rot
1041+ 7537 8F 6E CE 6B                  dw          BASE, FETCH         //      base @
1042+ 753B C0 68                        dw          UM_MUL              //      um*
1043+ 753D 34 6A                        dw          DPLUS               //      d+
1044+ 753F 98 6E CE 6B                  dw          DPL, FETCH          //      dpl @
1045+ 7543 50 6A                        dw          ONE_PLUS            //      1+
1046+ 7545                                                              //      if
1047+ 7545 7F 64                        dw          ZBRANCH
1048+ 7547 08 00                        dw          CNumber_Endif - $
1049+ 7549 42 6D 98 6E                  dw              ONE, DPL        //          1 dpl
1050+ 754D AB 6B                        dw              PLUSSTORE       //          +!
1051+ 754F              CNumber_Endif:                                  //      endif
1052+ 754F D2 69                        dw             R_TO             //      r>  ( balance rp )
1053+ 7551 68 64                        dw      BRANCH
1054+ 7553 C6 FF                        dw      CNumber_Begin - $
1055+ 7555              CNumber_While_end:                              // repeat
1056+ 7555 D2 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1057+ 7557 95 69                        dw      EXIT                    // ;
1058+ 7559
1059+ 7559              //  ______________________________________________________________________
1060+ 7559              //
1061+ 7559              // number       a -- d
1062+ 7559                              Colon_Def NUMBER,  "NUMBER", is_normal
1062+ 7559             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1062+ 7559             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1062+ 7559             >
1062+ 7559             >                // dummy db directives used to calculate length of namec
1062+ 7559 4E 55 4D 42 >                db      "NUMBER"
1062+ 755D 45 52       >
1062+ 755F             >len_NFA         defl    $ - temp_NFA
1062+ 755F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1062+ 7559             >
1062+ 7559 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1062+ 755A 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1062+ 755E 45 52       >
1062+ 7560             >                org     $-1                 // alter last byte of Name just above to set
1062+ 755F D2          >                db      {b $} | END_BIT     // msb as name end
1062+ 7560             >
1062+ 7560 0C 75       >                dw      last_NFA            // Link to previous definition Name
1062+ 7562             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1062+ 7562 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1062+ 7564             >                else
1062+ 7564 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1062+ 7564             >                endif           ; ok        // for other definitions it "points" the correct handler
1062+ 7564             >                // Use of "; ok" to suppress "warning[fwdref]"
1062+ 7564             >
1062+ 7564             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1063+ 7564 3A 6D 3A 6D                  dw      ZERO, ZERO              // 0 0
1064+ 7568 17 6B                        dw      ROT                     // rot
1065+ 756A D2 74 BE 69                  dw      CSGN, TO_R              // (sgn) >r
1066+ 756E 5B 6D 98 6E                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1066+ 7572 DB 6B
1067+ 7574 17 75                        dw      CNUMBER                 // (number)
1068+ 7576 0A 6B E9 6B                  dw      DUP, CFETCH             // dup c@
1069+ 757A 45 64 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1069+ 757E 6E 6F
1070+ 7580                                                              // if
1071+ 7580 7F 64                        dw      ZBRANCH
1072+ 7582 0A 00                        dw      Number_Endif_1 - $
1073+ 7584 3A 6D 98 6E                  dw          ZERO, DPL, STORE    //      0 dpl !
1073+ 7588 DB 6B
1074+ 758A 17 75                        dw          CNUMBER             //      (number)
1075+ 758C              Number_Endif_1:                                 // endif
1076+ 758C E9 6B 64 6D                  dw      CFETCH, BL              // c@ bl
1077+ 7590 60 6F 3A 6D                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1077+ 7594 D9 70
1078+ 7596 D2 69                        dw      R_TO                    // r>
1079+ 7598                                                              // if
1080+ 7598 7F 64                        dw      ZBRANCH
1081+ 759A 04 00                        dw      Number_Endif_2 - $
1082+ 759C A7 6A                        dw          DMINUS              //      dminus
1083+ 759E              Number_Endif_2:                                 // endif
1084+ 759E 95 69                        dw      EXIT                    // ;
1085+ 75A0
1086+ 75A0              //  ______________________________________________________________________
1087+ 75A0              //
1088+ 75A0              // -find        a -- d
1089+ 75A0                              Colon_Def LFIND,  "-FIND", is_normal
1089+ 75A0             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1089+ 75A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1089+ 75A0             >
1089+ 75A0             >                // dummy db directives used to calculate length of namec
1089+ 75A0 2D 46 49 4E >                db      "-FIND"
1089+ 75A4 44          >
1089+ 75A5             >len_NFA         defl    $ - temp_NFA
1089+ 75A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1089+ 75A0             >
1089+ 75A0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1089+ 75A1 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1089+ 75A5 44          >
1089+ 75A6             >                org     $-1                 // alter last byte of Name just above to set
1089+ 75A5 C4          >                db      {b $} | END_BIT     // msb as name end
1089+ 75A6             >
1089+ 75A6 59 75       >                dw      last_NFA            // Link to previous definition Name
1089+ 75A8             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1089+ 75A8 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1089+ 75AA             >                else
1089+ 75AA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1089+ 75AA             >                endif           ; ok        // for other definitions it "points" the correct handler
1089+ 75AA             >                // Use of "; ok" to suppress "warning[fwdref]"
1089+ 75AA             >
1089+ 75AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1090+ 75AA 64 6D F6 73                  dw      BL, WORD                // bl word
1091+ 75AE 6D 6E CE 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1091+ 75B2 CE 6B
1092+ 75B4 9A 65                        dw      C_FIND                  // (find)
1093+ 75B6 F8 6F                        dw      QDUP                    // ?dup
1094+ 75B8 EC 69                        dw      ZEQUAL                  // 0=
1095+ 75BA                                                              // if
1096+ 75BA 7F 64                        dw      ZBRANCH
1097+ 75BC 08 00                        dw      LFind_Endif - $
1098+ 75BE 0C 6F                        dw          HERE                //      here
1099+ 75C0 55 70                        dw          LATEST              //      latest
1100+ 75C2 9A 65                        dw          C_FIND              //      (find)
1101+ 75C4              LFind_Endif:                                    // endif
1102+ 75C4 95 69                        dw      EXIT                    // ;
1103+ 75C6
1104+ 75C6              //  ______________________________________________________________________
1105+ 75C6              //
1106+ 75C6              // (abort)      --
1107+ 75C6                              Colon_Def CABORT,  "(ABORT)", is_normal
1107+ 75C6             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1107+ 75C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1107+ 75C6             >
1107+ 75C6             >                // dummy db directives used to calculate length of namec
1107+ 75C6 28 41 42 4F >                db      "(ABORT)"
1107+ 75CA 52 54 29    >
1107+ 75CD             >len_NFA         defl    $ - temp_NFA
1107+ 75CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1107+ 75C6             >
1107+ 75C6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1107+ 75C7 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1107+ 75CB 52 54 29    >
1107+ 75CE             >                org     $-1                 // alter last byte of Name just above to set
1107+ 75CD A9          >                db      {b $} | END_BIT     // msb as name end
1107+ 75CE             >
1107+ 75CE A0 75       >                dw      last_NFA            // Link to previous definition Name
1107+ 75D0             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1107+ 75D0 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1107+ 75D2             >                else
1107+ 75D2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1107+ 75D2             >                endif           ; ok        // for other definitions it "points" the correct handler
1107+ 75D2             >                // Use of "; ok" to suppress "warning[fwdref]"
1107+ 75D2             >
1107+ 75D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1108+ 75D2 A5 78                        dw      ABORT                   // abort
1109+ 75D4 95 69                        dw      EXIT                    // ;
1110+ 75D6
1111+ 75D6              //  ______________________________________________________________________
1112+ 75D6              //
1113+ 75D6              // error        n --
1114+ 75D6              // raise an error
1115+ 75D6              // if WARNING is 0, prints "MSG#n".
1116+ 75D6              // if WARNING is 1, prints line n of screen 4.
1117+ 75D6              // if WARNING is -1 does (ABORT) that normally does ABORT
1118+ 75D6              // value can be negative or beyond block 4.
1119+ 75D6                              Colon_Def ERROR,  "ERROR", is_normal
1119+ 75D6             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1119+ 75D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1119+ 75D6             >
1119+ 75D6             >                // dummy db directives used to calculate length of namec
1119+ 75D6 45 52 52 4F >                db      "ERROR"
1119+ 75DA 52          >
1119+ 75DB             >len_NFA         defl    $ - temp_NFA
1119+ 75DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1119+ 75D6             >
1119+ 75D6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1119+ 75D7 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1119+ 75DB 52          >
1119+ 75DC             >                org     $-1                 // alter last byte of Name just above to set
1119+ 75DB D2          >                db      {b $} | END_BIT     // msb as name end
1119+ 75DC             >
1119+ 75DC C6 75       >                dw      last_NFA            // Link to previous definition Name
1119+ 75DE             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1119+ 75DE BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1119+ 75E0             >                else
1119+ 75E0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1119+ 75E0             >                endif           ; ok        // for other definitions it "points" the correct handler
1119+ 75E0             >                // Use of "; ok" to suppress "warning[fwdref]"
1119+ 75E0             >
1119+ 75E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1120+ 75E0 E5 6D CE 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1120+ 75E4 FF 69
1121+ 75E6                                                              // if
1122+ 75E6 7F 64                        dw      ZBRANCH
1123+ 75E8 04 00                        dw      Error_Endif_1 - $
1124+ 75EA D0 75                        dw          CABORT              //      (abort)
1125+ 75EC              Error_Endif_1:                                  // endif
1126+ 75EC 0C 6F 60 72                  dw      HERE, COUNT, TYPE       // here count type
1126+ 75F0 73 72
1127+ 75F2 45 74                        dw      C_DOT_QUOTE             // .( ? )
1128+ 75F4 02 3F 20                     db      2, "? "
1129+ 75F7 9C 7A                        dw      MESSAGE                 // message  ( forward )
1130+ 75F9 BC 6D CE 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1130+ 75FD 6E 69
1131+ 75FF 39 6E CE 6B                  dw      BLK, FETCH, LDUP        // blk @ -dup
1131+ 7603 E6 6F
1132+ 7605                                                              // if
1133+ 7605 7F 64                        dw      ZBRANCH
1134+ 7607 08 00                        dw      Error_Endif_2 - $
1135+ 7609 42 6E CE 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1135+ 760D FD 6A
1136+ 760F              Error_Endif_2:                                  // endif
1137+ 760F 64 78                        dw      QUIT                    // quit ( forward )
1138+ 7611 95 69                        dw      EXIT                    // ;
1139+ 7613              //  ______________________________________________________________________
1140+ 7613              //
1141+ 7613              // id.          nfa --
1142+ 7613                              Colon_Def ID_DOT,  "ID.", is_normal
1142+ 7613             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1142+ 7613             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1142+ 7613             >
1142+ 7613             >                // dummy db directives used to calculate length of namec
1142+ 7613 49 44 2E    >                db      "ID."
1142+ 7616             >len_NFA         defl    $ - temp_NFA
1142+ 7616             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1142+ 7613             >
1142+ 7613 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1142+ 7614 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1142+ 7617             >                org     $-1                 // alter last byte of Name just above to set
1142+ 7616 AE          >                db      {b $} | END_BIT     // msb as name end
1142+ 7617             >
1142+ 7617 D6 75       >                dw      last_NFA            // Link to previous definition Name
1142+ 7619             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1142+ 7619 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1142+ 761B             >                else
1142+ 761B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1142+ 761B             >                endif           ; ok        // for other definitions it "points" the correct handler
1142+ 761B             >                // Use of "; ok" to suppress "warning[fwdref]"
1142+ 761B             >
1142+ 761B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1143+ 761B E3 73 45 64                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1143+ 761F 20 00 45 64
1143+ 7623 60 00
1144+ 7625 92 73                        dw      FILL                    // fill
1145+ 7627 0A 6B 93 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1145+ 762B 65 70
1146+ 762D C5 6A 60 6F                  dw      OVER, SUBTRACT          // over -
1147+ 7631 E3 73 FD 6A                  dw      PAD, SWAP               // pad swap
1148+ 7635 8B 68                        dw      CMOVE                   // cmove
1149+ 7637 E3 73 60 72                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1149+ 763B 45 64 1F 00
1150+ 763F 27 69                        dw      AND_OP                  // and  ( use only lower bits )
1151+ 7641 73 72 1D 70                  dw      TYPE, SPACE             // type
1152+ 7645 95 69                        dw      EXIT                    // ;
1153+ 7647
1154+ 7647              //  ______________________________________________________________________
1155+ 7647              //
1156+ 7647              // code         -- cccc
1157+ 7647                              Colon_Def CODE,  "CODE", is_normal
1157+ 7647             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1157+ 7647             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1157+ 7647             >
1157+ 7647             >                // dummy db directives used to calculate length of namec
1157+ 7647 43 4F 44 45 >                db      "CODE"
1157+ 764B             >len_NFA         defl    $ - temp_NFA
1157+ 764B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1157+ 7647             >
1157+ 7647 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1157+ 7648 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1157+ 764C             >                org     $-1                 // alter last byte of Name just above to set
1157+ 764B C5          >                db      {b $} | END_BIT     // msb as name end
1157+ 764C             >
1157+ 764C 13 76       >                dw      last_NFA            // Link to previous definition Name
1157+ 764E             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1157+ 764E BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1157+ 7650             >                else
1157+ 7650 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1157+ 7650             >                endif           ; ok        // for other definitions it "points" the correct handler
1157+ 7650             >                // Use of "; ok" to suppress "warning[fwdref]"
1157+ 7650             >
1157+ 7650             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1158+ 7650 A8 75                        dw      LFIND                   // -find
1159+ 7652                                                              // if
1160+ 7652 7F 64                        dw      ZBRANCH
1161+ 7654 10 00                        dw      Code_Endif - $
1162+ 7656 D5 6A                        dw          DROP                //      drop
1163+ 7658 B7 70 19 76                  dw          TO_NAME, ID_DOT     //      >name id.
1164+ 765C 45 64 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1164+ 7660 9C 7A
1165+ 7662 1D 70                        dw          SPACE               //      space
1166+ 7664              Code_Endif:                                     // endif
1167+ 7664 0C 6F                        dw      HERE                    // here
1168+ 7666                                                              // ( ---- here begins NFA ---- )
1169+ 7666 0A 6B E9 6B                  dw      DUP, CFETCH             // dup c@
1170+ 766A D8 6D CE 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1170+ 766E B9 6F
1171+ 7670 50 6A 1C 6F                  dw      ONE_PLUS, ALLOT         // 1+ allot
1172+ 7674 0A 6B                        dw      DUP                     // dup
1173+ 7676 45 64                        dw      LIT
1174+ 7678 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1175+ 767A C1 6B                        dw      TOGGLE                  // toggle
1176+ 767C 0C 6F 5C 6A                  dw      HERE, ONE_SUBTRACT     // here 1- ( last character )
1177+ 7680 45 64 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1177+ 7684 C1 6B
1178+ 7686                                                              // ( ---- here is LFA ---- )
1179+ 7686 55 70 28 6F                  dw      LATEST, COMMA           // latest ,
1180+ 768A 7A 6E CE 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1180+ 768E DB 6B
1181+ 7690 0C 6F 78 6A                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1181+ 7694 28 6F
1182+ 7696 95 69                        dw      EXIT                    // ;
1183+ 7698
1184+ 7698              //  ______________________________________________________________________
1185+ 7698              //
1186+ 7698              // create       -- cccc     ( compile time )
1187+ 7698              //              -- a        ( run time )
1188+ 7698                              Colon_Def CREATE,  "CREATE", is_normal
1188+ 7698             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1188+ 7698             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1188+ 7698             >
1188+ 7698             >                // dummy db directives used to calculate length of namec
1188+ 7698 43 52 45 41 >                db      "CREATE"
1188+ 769C 54 45       >
1188+ 769E             >len_NFA         defl    $ - temp_NFA
1188+ 769E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1188+ 7698             >
1188+ 7698 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1188+ 7699 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1188+ 769D 54 45       >
1188+ 769F             >                org     $-1                 // alter last byte of Name just above to set
1188+ 769E C5          >                db      {b $} | END_BIT     // msb as name end
1188+ 769F             >
1188+ 769F 47 76       >                dw      last_NFA            // Link to previous definition Name
1188+ 76A1             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1188+ 76A1 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1188+ 76A3             >                else
1188+ 76A3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1188+ 76A3             >                endif           ; ok        // for other definitions it "points" the correct handler
1188+ 76A3             >                // Use of "; ok" to suppress "warning[fwdref]"
1188+ 76A3             >
1188+ 76A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1189+ 76A3 4E 76 A5 71                  dw      CODE, SMUDGE        // code smudge
1190+ 76A7
1191+ 76A7
1192+ 76A7 FB 71                        dw      C_SEMICOLON_CODE
1193+ 76A9                              // this routine is called from the call coded in CFA
1194+ 76A9              Create_Ptr:
1195+ 76A9 13                           inc     de
1196+ 76AA D5                           push    de                  // balance TOS before overwrite it
1197+ 76AB
1198+ 76AB                              next
1198+ 76AB DD E9       >                jp      (ix)
1199+ 76AD
1200+ 76AD              //  ______________________________________________________________________
1201+ 76AD              //
1202+ 76AD              // [compile]    -- cccc     ( compile time )
1203+ 76AD                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1203+ 76AD             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1203+ 76AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1203+ 76AD             >
1203+ 76AD             >                // dummy db directives used to calculate length of namec
1203+ 76AD 5B 43 4F 4D >                db      "[COMPILE]"
1203+ 76B1 50 49 4C 45 >
1203+ 76B5 5D          >
1203+ 76B6             >len_NFA         defl    $ - temp_NFA
1203+ 76B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1203+ 76AD             >
1203+ 76AD C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1203+ 76AE 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1203+ 76B2 50 49 4C 45 >
1203+ 76B6 5D          >
1203+ 76B7             >                org     $-1                 // alter last byte of Name just above to set
1203+ 76B6 DD          >                db      {b $} | END_BIT     // msb as name end
1203+ 76B7             >
1203+ 76B7 98 76       >                dw      last_NFA            // Link to previous definition Name
1203+ 76B9             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1203+ 76B9 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1203+ 76BB             >                else
1203+ 76BB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1203+ 76BB             >                endif           ; ok        // for other definitions it "points" the correct handler
1203+ 76BB             >                // Use of "; ok" to suppress "warning[fwdref]"
1203+ 76BB             >
1203+ 76BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1204+ 76BB A8 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1205+ 76BD EC 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1206+ 76BF 3A 6D D9 70                  dw      ZERO, QERROR            // 0 ?error
1207+ 76C3 D5 6A                        dw      DROP                    // drop       (  cfa  )
1208+ 76C5 28 6F                        dw      COMMA                   // ,
1209+ 76C7 95 69                        dw      EXIT                    // ; immediate
1210+ 76C9
1211+ 76C9              //  ______________________________________________________________________
1212+ 76C9              //
1213+ 76C9              // literal      n --      ( compile time )
1214+ 76C9                              Colon_Def LITERAL,  "LITERAL", is_immediate
1214+ 76C9             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1214+ 76C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1214+ 76C9             >
1214+ 76C9             >                // dummy db directives used to calculate length of namec
1214+ 76C9 4C 49 54 45 >                db      "LITERAL"
1214+ 76CD 52 41 4C    >
1214+ 76D0             >len_NFA         defl    $ - temp_NFA
1214+ 76D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1214+ 76C9             >
1214+ 76C9 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1214+ 76CA 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1214+ 76CE 52 41 4C    >
1214+ 76D1             >                org     $-1                 // alter last byte of Name just above to set
1214+ 76D0 CC          >                db      {b $} | END_BIT     // msb as name end
1214+ 76D1             >
1214+ 76D1 AD 76       >                dw      last_NFA            // Link to previous definition Name
1214+ 76D3             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1214+ 76D3 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1214+ 76D5             >                else
1214+ 76D5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1214+ 76D5             >                endif           ; ok        // for other definitions it "points" the correct handler
1214+ 76D5             >                // Use of "; ok" to suppress "warning[fwdref]"
1214+ 76D5             >
1214+ 76D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1215+ 76D5 85 6E CE 6B                  dw      STATE, FETCH            // state @
1216+ 76D9                                                              // if
1217+ 76D9 7F 64                        dw      ZBRANCH
1218+ 76DB 08 00                        dw      Literal_Endif - $
1219+ 76DD 6C 71 45 64                  dw          COMPILE, LIT        //      compile lit
1220+ 76E1 28 6F                        dw          COMMA               //      ,
1221+ 76E3              Literal_Endif:                                  // endif
1222+ 76E3 95 69                        dw      EXIT                    // ; immediate
1223+ 76E5
1224+ 76E5              //  ______________________________________________________________________
1225+ 76E5              //
1226+ 76E5              // dliteral     n --      ( compile time )
1227+ 76E5                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1227+ 76E5             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1227+ 76E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1227+ 76E5             >
1227+ 76E5             >                // dummy db directives used to calculate length of namec
1227+ 76E5 44 4C 49 54 >                db      "DLITERAL"
1227+ 76E9 45 52 41 4C >
1227+ 76ED             >len_NFA         defl    $ - temp_NFA
1227+ 76ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1227+ 76E5             >
1227+ 76E5 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1227+ 76E6 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1227+ 76EA 45 52 41 4C >
1227+ 76EE             >                org     $-1                 // alter last byte of Name just above to set
1227+ 76ED CC          >                db      {b $} | END_BIT     // msb as name end
1227+ 76EE             >
1227+ 76EE C9 76       >                dw      last_NFA            // Link to previous definition Name
1227+ 76F0             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1227+ 76F0 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1227+ 76F2             >                else
1227+ 76F2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1227+ 76F2             >                endif           ; ok        // for other definitions it "points" the correct handler
1227+ 76F2             >                // Use of "; ok" to suppress "warning[fwdref]"
1227+ 76F2             >
1227+ 76F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1228+ 76F2 85 6E CE 6B                  dw      STATE, FETCH            // state @
1229+ 76F6                                                              // if
1230+ 76F6 7F 64                        dw      ZBRANCH
1231+ 76F8 08 00                        dw      DLiteral_Endif - $
1232+ 76FA FD 6A                        dw          SWAP                //      swap
1233+ 76FC D3 76 D3 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1234+ 7700              DLiteral_Endif:                                 // endif
1235+ 7700 95 69                        dw      EXIT                    // ; immediate
1236+ 7702
1237+ 7702              //  ______________________________________________________________________
1238+ 7702              //
1239+ 7702              // [char]       n --      ( compile time )
1240+ 7702              // inside colon definition, gets first character from next input word
1241+ 7702              // and compiles it as literal.
1242+ 7702                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1242+ 7702             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1242+ 7702             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1242+ 7702             >
1242+ 7702             >                // dummy db directives used to calculate length of namec
1242+ 7702 5B 43 48 41 >                db      "[CHAR]"
1242+ 7706 52 5D       >
1242+ 7708             >len_NFA         defl    $ - temp_NFA
1242+ 7708             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1242+ 7702             >
1242+ 7702 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1242+ 7703 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1242+ 7707 52 5D       >
1242+ 7709             >                org     $-1                 // alter last byte of Name just above to set
1242+ 7708 DD          >                db      {b $} | END_BIT     // msb as name end
1242+ 7709             >
1242+ 7709 E5 76       >                dw      last_NFA            // Link to previous definition Name
1242+ 770B             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1242+ 770B BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1242+ 770D             >                else
1242+ 770D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1242+ 770D             >                endif           ; ok        // for other definitions it "points" the correct handler
1242+ 770D             >                // Use of "; ok" to suppress "warning[fwdref]"
1242+ 770D             >
1242+ 770D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1243+ 770D 60 74 D3 76                  dw      CHAR, LITERAL           // char [compile] literal
1244+ 7711 95 69                        dw      EXIT                    // ; immediate
1245+ 7713
1246+ 7713              //  ______________________________________________________________________
1247+ 7713              //
1248+ 7713              // 0x00         n --      ( compile time )
1249+ 7713                              Colon_Def NUL_WORD,  $00, is_immediate
1249+ 7713             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1249+ 7713             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1249+ 7713             >
1249+ 7713             >                // dummy db directives used to calculate length of namec
1249+ 7713 00          >                db      $00
1249+ 7714             >len_NFA         defl    $ - temp_NFA
1249+ 7714             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1249+ 7713             >
1249+ 7713 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1249+ 7714 00          >                db      $00               // name string in 7-bit ascii, but
1249+ 7715             >                org     $-1                 // alter last byte of Name just above to set
1249+ 7714 80          >                db      {b $} | END_BIT     // msb as name end
1249+ 7715             >
1249+ 7715 02 77       >                dw      last_NFA            // Link to previous definition Name
1249+ 7717             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1249+ 7717 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1249+ 7719             >                else
1249+ 7719 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1249+ 7719             >                endif           ; ok        // for other definitions it "points" the correct handler
1249+ 7719             >                // Use of "; ok" to suppress "warning[fwdref]"
1249+ 7719             >
1249+ 7719             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1250+ 7719 39 6E CE 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1250+ 771D 42 6D
1251+ 771F AB 6F                        dw      GREATER                 // > if
1252+ 7721                                                              // if
1253+ 7721 7F 64                        dw      ZBRANCH
1254+ 7723 28 00                        dw      Nul_Else_1 - $
1255+ 7725 42 6D 39 6E                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1255+ 7729 AB 6B
1256+ 772B 3A 6D 42 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
1256+ 772F DB 6B
1257+ 7731 39 6E CE 6B                  dw          BLK, FETCH          //      blk @
1258+ 7735 86 6D                        dw          BSCR                //      b/scr
1259+ 7737 5C 6A                        dw          ONE_SUBTRACT        //      1 -
1260+ 7739 27 69                        dw          AND_OP              //      and  ( this is tricky )
1261+ 773B EC 69                        dw          ZEQUAL              //      0=
1262+ 773D                                                              //      if
1263+ 773D 7F 64                        dw          ZBRANCH
1264+ 773F 08 00                        dw          Nul_Endif_2 - $
1265+ 7741 0B 71                        dw              QEXEC           //          ?exec
1266+ 7743 D2 69 D5 6A                  dw              R_TO, DROP      //          r> drop
1267+ 7747              Nul_Endif_2:                                    //      endif
1268+ 7747 68 64                        dw      BRANCH
1269+ 7749 06 00                        dw      Nul_Endif_1 - $
1270+ 774B              Nul_Else_1:                                     // else
1271+ 774B D2 69 D5 6A                  dw          R_TO, DROP          //      r> drop
1272+ 774F              Nul_Endif_1:                                    // endif
1273+ 774F 95 69                        dw      EXIT                    // ;
1274+ 7751
1275+ 7751              //  ______________________________________________________________________
1276+ 7751              //
1277+ 7751              // ?stack       --
1278+ 7751              // Raise error #1 if stack is empty and you pop it
1279+ 7751              // Raise error #7 if stack is full.
1280+ 7751              // This means SP must always stay between HERE and FFFF
1281+ 7751              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1282+ 7751              // for Next 8K MMU paging this is $DOE8
1283+ 7751                              Colon_Def QSTACK, "?STACK", is_normal
1283+ 7751             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1283+ 7751             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1283+ 7751             >
1283+ 7751             >                // dummy db directives used to calculate length of namec
1283+ 7751 3F 53 54 41 >                db      "?STACK"
1283+ 7755 43 4B       >
1283+ 7757             >len_NFA         defl    $ - temp_NFA
1283+ 7757             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1283+ 7751             >
1283+ 7751 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1283+ 7752 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1283+ 7756 43 4B       >
1283+ 7758             >                org     $-1                 // alter last byte of Name just above to set
1283+ 7757 CB          >                db      {b $} | END_BIT     // msb as name end
1283+ 7758             >
1283+ 7758 13 77       >                dw      last_NFA            // Link to previous definition Name
1283+ 775A             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1283+ 775A BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1283+ 775C             >                else
1283+ 775C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1283+ 775C             >                endif           ; ok        // for other definitions it "points" the correct handler
1283+ 775C             >                // Use of "; ok" to suppress "warning[fwdref]"
1283+ 775C             >
1283+ 775C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1284+ 775C 5F 69                        dw      SPFETCH                 // sp@
1285+ 775E BC 6D CE 6B                  dw      S0, FETCH               // s0 @
1286+ 7762 FD 6A 7B 6F                  dw      SWAP, ULESS             // swap u<
1287+ 7766 42 6D D9 70                  dw      ONE, QERROR             // 1 ?error
1288+ 776A 0C 6F                        dw      HERE                    // here
1289+ 776C BC 6D CE 6B                  dw      S0, FETCH, LESS         // s0 @ <
1289+ 7770 8F 6F
1290+ 7772                                                              // if
1291+ 7772 7F 64                        dw      ZBRANCH
1292+ 7774 14 00                        dw      QStack_Endif - $
1293+ 7776 5F 69                        dw          SPFETCH             //      sp@
1294+ 7778 0C 6F 45 64                  dw          HERE, LIT, 128      //      here 128
1294+ 777C 80 00
1295+ 777E 27 6A 7B 6F                  dw          PLUS, ULESS         //      plus u<
1296+ 7782 45 64 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1296+ 7786 D9 70
1297+ 7788              QStack_Endif:                                   // endif
1298+ 7788 95 69                        dw      EXIT                    // ;
1299+ 778A
1300+ 778A
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
 110  778A                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
   1+ 778A              //  ______________________________________________________________________
   2+ 778A              //
   3+ 778A              //  L2.asm
   4+ 778A              //
   5+ 778A              //  Level-2
   6+ 778A              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 778A              //  ______________________________________________________________________
   8+ 778A
   9+ 778A
  10+ 778A              //  ______________________________________________________________________
  11+ 778A              //
  12+ 778A              // interpret    --
  13+ 778A              // This is the text interpreter.
  14+ 778A              // It executes or compiles, depending on STATE, the text coming from
  15+ 778A              // current input stream.
  16+ 778A              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 778A              // the word is interpreted as numeric and converted, using current BASE,
  18+ 778A              // leaving on top of stack a single or double precision number, depending
  19+ 778A              // on the presence of a decimal point.
  20+ 778A              // If the number conversion fails, the terminal is notified with ? followed
  21+ 778A              // by the offending word.
  22+ 778A                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 778A             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 778A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 778A             >
  22+ 778A             >                // dummy db directives used to calculate length of namec
  22+ 778A 49 4E 54 45 >                db      "INTERPRET"
  22+ 778E 52 50 52 45 >
  22+ 7792 54          >
  22+ 7793             >len_NFA         defl    $ - temp_NFA
  22+ 7793             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 778A             >
  22+ 778A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 778B 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 778F 52 50 52 45 >
  22+ 7793 54          >
  22+ 7794             >                org     $-1                 // alter last byte of Name just above to set
  22+ 7793 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 7794             >
  22+ 7794 51 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 7796             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 7796 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 7798             >                else
  22+ 7798 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  22+ 7798             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 7798             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 7798             >
  22+ 7798             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 7798
  24+ 7798              Interpret_Begin:                                        // begin
  25+ 7798 A8 75                        dw          LFIND                       //      -find
  26+ 779A                                                                      //      if
  27+ 779A 7F 64                        dw          ZBRANCH
  28+ 779C 1A 00                        dw          Interpret_Else_1 - $
  29+ 779E 85 6E CE 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 77A2 8F 6F
  30+ 77A4                                                                      //          if
  31+ 77A4 7F 64                        dw              ZBRANCH
  32+ 77A6 08 00                        dw              Interpret_Else_2 - $
  33+ 77A8 28 6F                        dw                  COMMA               //              ,
  34+ 77AA                                                                      //          else
  35+ 77AA 68 64                        dw              BRANCH
  36+ 77AC 06 00                        dw              Interpret_Endif_2 - $
  37+ 77AE              Interpret_Else_2:
  38+ 77AE 5A 64 E7 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77B2              Interpret_Endif_2:                                      //          endif
  40+ 77B2                                                                      //      else
  41+ 77B2 68 64                        dw          BRANCH
  42+ 77B4 28 00                        dw          Interpret_Endif_1 - $
  43+ 77B6              Interpret_Else_1:
  44+ 77B6 0C 6F 62 75                  dw              HERE, NUMBER            //          here number
  45+ 77BA 98 6E CE 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77BE 50 6A
  46+ 77C0                                                                      //          if
  47+ 77C0 7F 64                        dw              ZBRANCH
  48+ 77C2 16 00                        dw              Interpret_Else_3 - $
  49+ 77C4 30 6E CE 6B                  dw                  NMODE, FETCH        //              nmode @
  50+ 77C8                                                                      //              if
  51+ 77C8 7F 64                        dw                  ZBRANCH
  52+ 77CA 08 00                        dw                  Interpret_Endif_4 - $
  53+ 77CC 42 6D 3A 6D                  dw                      ONE, ZERO       //                  1 0
  54+ 77D0 54 6B                        dw                      TWO_DROP        //                  2drop
  55+ 77D2              Interpret_Endif_4:                                      //              endif
  56+ 77D2 F0 76                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77D4                                                                      //          else
  58+ 77D4 68 64                        dw              BRANCH
  59+ 77D6 06 00                        dw              Interpret_Endif_3 - $
  60+ 77D8              Interpret_Else_3:
  61+ 77D8 D5 6A                        dw                  DROP                //              drop
  62+ 77DA D3 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77DC              Interpret_Endif_3:                                      //          endif
  64+ 77DC              Interpret_Endif_1:                                      //      endif
  65+ 77DC 5A 77                        dw          QSTACK                      //      ?stack
  66+ 77DE 86 67                        dw          QTERMINAL                   //      ?terminal
  67+ 77E0                                                                      //      if
  68+ 77E0 7F 64                        dw          ZBRANCH
  69+ 77E2 04 00                        dw          Interpret_Endif_5 - $
  70+ 77E4 D0 75                        dw              CABORT                  //          (abort)
  71+ 77E6              Interpret_Endif_5:                                      //      endif
  72+ 77E6 68 64                        dw      BRANCH
  73+ 77E8 B0 FF                        dw      Interpret_Begin - $
  74+ 77EA 95 69                        dw      EXIT                            // ;
  75+ 77EC
  76+ 77EC              //  ______________________________________________________________________
  77+ 77EC              //
  78+ 77EC              // vocabulary   -- cccc     ( compile time )
  79+ 77EC              // Defining word used in the form   VOCABULARY cccc
  80+ 77EC              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 77EC              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 77EC              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 77EC              // so new definitions can be inserted in that vocabulary.
  84+ 77EC                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 77EC             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 77EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 77EC             >
  84+ 77EC             >                // dummy db directives used to calculate length of namec
  84+ 77EC 56 4F 43 41 >                db      "VOCABULARY"
  84+ 77F0 42 55 4C 41 >
  84+ 77F4 52 59       >
  84+ 77F6             >len_NFA         defl    $ - temp_NFA
  84+ 77F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 77EC             >
  84+ 77EC 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 77ED 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 77F1 42 55 4C 41 >
  84+ 77F5 52 59       >
  84+ 77F7             >                org     $-1                 // alter last byte of Name just above to set
  84+ 77F6 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 77F7             >
  84+ 77F7 8A 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 77F9             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 77F9 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 77FB             >                else
  84+ 77FB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  84+ 77FB             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 77FB             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 77FB             >
  84+ 77FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 77FB
  86+ 77FB 29 72                        dw      CBUILDS
  87+ 77FD
  88+ 77FD 45 64 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 7801 28 6F
  89+ 7803 7A 6E CE 6B                  dw      CURRENT, FETCH          // current @
  90+ 7807 82 6A 28 6F                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 780B 0C 6F                        dw      HERE                    // here
  92+ 780D 06 6E CE 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 7811 28 6F
  93+ 7813 06 6E DB 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 7817
  95+ 7817 39 72                        dw      DOES_TO                 // does>
  96+ 7819              Vocabulary_Does:
  97+ 7819 78 6A                        dw      CELL_PLUS               // cell+
  98+ 781B 6D 6E DB 6B                  dw      CONTEXT, STORE          // context !
  99+ 781F 95 69                        dw      EXIT                    // ;
 100+ 7821
 101+ 7821              //  ______________________________________________________________________
 102+ 7821              //
 103+ 7821              // forth        --
 104+ 7821              // Name of the first vocabulary.
 105+ 7821              // It makes FORTH the CONTEXT vocabulary.
 106+ 7821              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7821              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7821              // of a colon definition to be able to select the vocabulary.
 109+ 7821
 110+ 7821                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7821             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7821             >
 110+ 7821             >                // dummy db directives used to calculate length of namec
 110+ 7821 46 4F 52 54 >                db      "FORTH"
 110+ 7825 48          >
 110+ 7826             >len_NFA         defl    $ - temp_NFA
 110+ 7826             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7821             >
 110+ 7821 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 7822 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 7826 48          >
 110+ 7827             >                org     $-1                 // alter last byte of Name just above to set
 110+ 7826 C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 7827             >
 110+ 7827 EC 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 7829             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 7829 45 72       >                dw      Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 782B             >                else
 110+ 782B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 110+ 782B             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 782B             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 782B             >
 110+ 782B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 782B 19 78                        dw      Vocabulary_Does
 112+ 782D 81 A0                        db      $81, $A0
 113+ 782F              Forth_Latest_Ptr:
 114+ 782F 58 87                        dw      Fence_Word // Latest_Definition
 115+ 7831              Voclink_Ptr:
 116+ 7831 00 00                        dw      0
 117+ 7833              // Any new vocabulary is structured as follow:
 118+ 7833              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7833              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7833              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7833              //       at creations it points to the null-word of its parent vocabulary
 122+ 7833              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7833              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7833              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7833              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7833              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7833              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7833
 129+ 7833              //  ______________________________________________________________________
 130+ 7833              //
 131+ 7833              // definitions  --
 132+ 7833              // Used in the form  cccc DEFINITIONS
 133+ 7833              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7833              // vocabulary cccc.
 135+ 7833                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7833             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7833             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7833             >
 135+ 7833             >                // dummy db directives used to calculate length of namec
 135+ 7833 44 45 46 49 >                db      "DEFINITIONS"
 135+ 7837 4E 49 54 49 >
 135+ 783B 4F 4E 53    >
 135+ 783E             >len_NFA         defl    $ - temp_NFA
 135+ 783E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7833             >
 135+ 7833 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7834 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 7838 4E 49 54 49 >
 135+ 783C 4F 4E 53    >
 135+ 783F             >                org     $-1                 // alter last byte of Name just above to set
 135+ 783E D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 783F             >
 135+ 783F 21 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 7841             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7841 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7843             >                else
 135+ 7843 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 135+ 7843             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7843             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7843             >
 135+ 7843             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7843 6D 6E CE 6B                  dw      CONTEXT, FETCH          // context @
 137+ 7847 7A 6E DB 6B                  dw      CURRENT, STORE          // current !
 138+ 784B 95 69                        dw      EXIT                    // ;
 139+ 784D
 140+ 784D              //  ______________________________________________________________________
 141+ 784D              //
 142+ 784D              // (            -- cccc )
 143+ 784D              // the following text is interpreted as a comment until a closing )
 144+ 784D                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 784D             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 784D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 784D             >
 144+ 784D             >                // dummy db directives used to calculate length of namec
 144+ 784D 28          >                db      "("
 144+ 784E             >len_NFA         defl    $ - temp_NFA
 144+ 784E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 784D             >
 144+ 784D C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 784E 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 784F             >                org     $-1                 // alter last byte of Name just above to set
 144+ 784E A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 784F             >
 144+ 784F 33 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7851             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7851 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7853             >                else
 144+ 7853 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 7853             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7853             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7853             >
 144+ 7853             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7853 45 64 29 00                  dw      LIT, ")"                // [char] )
 146+ 7857 F6 73 D5 6A                  dw      WORD, DROP              // word drop
 147+ 785B 95 69                        dw      EXIT                    // ;
 148+ 785D
 149+ 785D              //  ______________________________________________________________________
 150+ 785D              //
 151+ 785D              // quit         --
 152+ 785D              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 785D                              Colon_Def QUIT, "QUIT", is_normal
 153+ 785D             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 785D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 785D             >
 153+ 785D             >                // dummy db directives used to calculate length of namec
 153+ 785D 51 55 49 54 >                db      "QUIT"
 153+ 7861             >len_NFA         defl    $ - temp_NFA
 153+ 7861             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 785D             >
 153+ 785D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 785E 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7862             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7861 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7862             >
 153+ 7862 4D 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7864             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7864 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 7866             >                else
 153+ 7866 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 7866             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 7866             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 7866             >
 153+ 7866             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 7866
 155+ 7866 F0 6E CE 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 786A 29 68 D5 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 786E 3A 6D F0 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 7872 DB 6B
 158+ 7874 3A 6D 39 6E                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 7878 DB 6B
 159+ 787A 82 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 787C                                                              // begin
 161+ 787C              Quit_Begin:
 162+ 787C C4 6D CE 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 7880 88 69
 163+ 7882 7C 68                        dw      CR                      //      cr
 164+ 7884 77 73                        dw      QUERY                   //      query
 165+ 7886              Next_Breakpoint_1:
 166+ 7886 96 77                        dw      INTERPRET               //      interpret
 167+ 7888 85 6E CE 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 788C EC 69
 168+ 788E                                                              //      if
 169+ 788E 7F 64                        dw      ZBRANCH
 170+ 7890 07 00                        dw      Quit_Endif - $
 171+ 7892 45 74                        dw          C_DOT_QUOTE
 172+ 7894 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 7897              Quit_Endif:                                     //      else
 174+ 7897                                                              // again
 175+ 7897 68 64                        dw      BRANCH
 176+ 7899 E3 FF                        dw      Quit_Begin - $
 177+ 789B 95 69                        dw      EXIT                    // ;
 178+ 789D
 179+ 789D              //  ______________________________________________________________________
 180+ 789D              //
 181+ 789D              // abort        --
 182+ 789D                              Colon_Def ABORT, "ABORT", is_normal
 182+ 789D             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 789D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 789D             >
 182+ 789D             >                // dummy db directives used to calculate length of namec
 182+ 789D 41 42 4F 52 >                db      "ABORT"
 182+ 78A1 54          >
 182+ 78A2             >len_NFA         defl    $ - temp_NFA
 182+ 78A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 789D             >
 182+ 789D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 789E 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 78A2 54          >
 182+ 78A3             >                org     $-1                 // alter last byte of Name just above to set
 182+ 78A2 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 78A3             >
 182+ 78A3 5D 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 78A5             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 78A5 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 78A7             >                else
 182+ 78A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 78A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 78A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 78A7             >
 182+ 78A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78A7 BC 6D CE 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 78AB 6E 69
 184+ 78AD E5 71                        dw      DECIMAL                 // decimal
 185+ 78AF 29 78                        dw      FORTH                   // [compile] forth
 186+ 78B1 41 78                        dw      DEFINITIONS             // definitions
 187+ 78B3              Autoexec_Ptr:
 188+ 78B3 19 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78B5 64 78                        dw      QUIT                    // quit
 190+ 78B7 95 69                        dw      EXIT                    // ;
 191+ 78B9
 192+ 78B9              //  ______________________________________________________________________
 193+ 78B9              //
 194+ 78B9              // warm         --
 195+ 78B9                              Colon_Def WARM, "WARM", is_normal
 195+ 78B9             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78B9             >
 195+ 78B9             >                // dummy db directives used to calculate length of namec
 195+ 78B9 57 41 52 4D >                db      "WARM"
 195+ 78BD             >len_NFA         defl    $ - temp_NFA
 195+ 78BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78B9             >
 195+ 78B9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78BA 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78BE             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78BD CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78BE             >
 195+ 78BE 9D 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78C0             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78C0 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78C2             >                else
 195+ 78C2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 78C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78C2             >
 195+ 78C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78C2 91 7C                        dw      BLK_INIT                // blk-init
 197+ 78C4 E3 83                        dw      SPLASH                  // splash
 198+ 78C6 45 64 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78CA 01 70
 199+ 78CC A5 78                        dw      ABORT                   // abort
 200+ 78CE 95 69                        dw      EXIT                    // exit
 201+ 78D0
 202+ 78D0              //  ______________________________________________________________________
 203+ 78D0              //
 204+ 78D0              // cold         --
 205+ 78D0                              Colon_Def COLD, "COLD", is_normal
 205+ 78D0             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78D0             >
 205+ 78D0             >                // dummy db directives used to calculate length of namec
 205+ 78D0 43 4F 4C 44 >                db      "COLD"
 205+ 78D4             >len_NFA         defl    $ - temp_NFA
 205+ 78D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78D0             >
 205+ 78D0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78D1 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78D5             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78D4 C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78D5             >
 205+ 78D5 B9 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78D7             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78D7 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78D9             >                else
 205+ 78D9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 205+ 78D9             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78D9             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78D9             >
 205+ 78D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78D9 45 64 12 64                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78DD 45 64 2E 64                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78E1 CE 6B                        dw      FETCH                   // @
 209+ 78E3 45 64 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78E7 27 6A
 210+ 78E9 45 64 14 00                  dw      LIT, 20                 // 20
 211+ 78ED 8B 68                        dw      CMOVE
 212+ 78EF 45 64 0C 64                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 78F3 CE 6B                        dw      FETCH                   // @
 214+ 78F5 45 64 2F 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 78F9 DB 6B                        dw      STORE                   // !
 216+ 78FB 3A 6D 30 6E                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 78FF DB 6B
 217+ 7901 11 6E CE 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 7905 0A 6B
 218+ 7907 C4 6E DB 6B                  dw      USE, STORE              // use !
 219+ 790B CE 6E DB 6B                  dw      PREV, STORE             // prev !
 220+ 790F 45 64 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 7913 E1 6E DB 6B
 221+ 7917              //              dw      LIT, 8
 222+ 7917              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 7917 4A 6D 02 6F                  dw      TWO, HP, STORE          // 2 hp !
 223+ 791B DB 6B
 224+ 791D C0 78        Warm_Start:     dw      WARM
 225+ 791F D7 78        Cold_Start:     dw      COLD
 226+ 7921 95 69                        dw      EXIT
 227+ 7923
 228+ 7923              //  ______________________________________________________________________
 229+ 7923              WarmRoutine:
 230+ 7923              ColdRoutine:
 231+ 7923 DD 21 34 64                  ld      ix, Next_Ptr
 232+ 7927 D9                           exx
 233+ 7928 E5                           push    hl
 234+ 7929 D9                           exx
 235+ 792A
 236+ 792A ED 73 08 64                  ld      (SP_Basic), sp
 237+ 792E ED 7B 12 64                  ld      sp, (S0_origin)
 238+ 7932              //              nop
 239+ 7932 2A 14 64                     ld      hl, (R0_origin)
 240+ 7935              //              nop
 241+ 7935                              ldrphl
 241+ 7935 22 30 64    >                ld      (RP_Pointer),hl
 242+ 7938 01 1D 79                     ld      bc, Warm_Start
 243+ 793B 38 02                        jr      c, Warm_Skip
 244+ 793D 03                           inc     bc
 245+ 793E 03                           inc     bc
 246+ 793F              Warm_Skip:
 247+ 793F                              next
 247+ 793F DD E9       >                jp      (ix)
 248+ 7941
 249+ 7941              //  ______________________________________________________________________
 250+ 7941              //
 251+ 7941              // basic        --
 252+ 7941                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7941             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7941             >
 252+ 7941             >                // dummy db directives used to calculate length of namec
 252+ 7941 42 41 53 49 >                db      "BASIC"
 252+ 7945 43          >
 252+ 7946             >len_NFA         defl    $ - temp_NFA
 252+ 7946             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7941             >
 252+ 7941 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7942 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 7946 43          >
 252+ 7947             >                org     $-1                 // alter last byte of Name just above to set
 252+ 7946 C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 7947             >
 252+ 7947 D0 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 7949             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 7949 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 252+ 7949             >                else
 252+ 7949 4B 79       >                dw      $ + 2   ; ok        // is pointed by CFA
 252+ 794B             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 794B             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 794B             >
 252+ 794B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 794B C1                           pop     bc
 254+ 794C 21 00 00                     ld      hl, 0
 255+ 794F 39                           add     hl, sp
 256+ 7950 ED 7B 08 64                  ld      sp, (SP_Basic)
 257+ 7954              //              nop
 258+ 7954 22 08 64                     ld      (SP_Basic),hl
 259+ 7957 D9                           exx
 260+ 7958 E1                           pop     hl
 261+ 7959 D9                           exx
 262+ 795A C9                           ret     // to Basic
 263+ 795B
 264+ 795B              //  ______________________________________________________________________
 265+ 795B              //
 266+ 795B              // +-           n1 n2 -- n3
 267+ 795B              // leaves n1 with the sign of n2 as n3.
 268+ 795B                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 795B             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 795B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 795B             >
 268+ 795B             >                // dummy db directives used to calculate length of namec
 268+ 795B 2B 2D       >                db      "+-"
 268+ 795D             >len_NFA         defl    $ - temp_NFA
 268+ 795D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 795B             >
 268+ 795B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 795C 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 795E             >                org     $-1                 // alter last byte of Name just above to set
 268+ 795D AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 795E             >
 268+ 795E 41 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 7960             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 7960 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7962             >                else
 268+ 7962 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 268+ 7962             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7962             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7962             >
 268+ 7962             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7962 FF 69                        dw      ZLESS                   // 0<
 270+ 7964                                                              // if
 271+ 7964 7F 64                        dw      ZBRANCH
 272+ 7966 04 00                        dw      Plus_Minus_Endif - $
 273+ 7968 92 6A                        dw          MINUS               //      minus
 274+ 796A              Plus_Minus_Endif:                               // endif
 275+ 796A 95 69                        dw      EXIT                    // ;
 276+ 796C
 277+ 796C              //  ______________________________________________________________________
 278+ 796C              //
 279+ 796C              // d+-          d1 n -- d2
 280+ 796C              // leaves d1 with the sign of n as d2.
 281+ 796C                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 796C             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 796C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 796C             >
 281+ 796C             >                // dummy db directives used to calculate length of namec
 281+ 796C 44 2B 2D    >                db      "D+-"
 281+ 796F             >len_NFA         defl    $ - temp_NFA
 281+ 796F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 796C             >
 281+ 796C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 796D 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 7970             >                org     $-1                 // alter last byte of Name just above to set
 281+ 796F AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 7970             >
 281+ 7970 5B 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7972             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7972 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 7974             >                else
 281+ 7974 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 281+ 7974             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 7974             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 7974             >
 281+ 7974             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 7974 FF 69                        dw      ZLESS                   // 0<
 283+ 7976                                                              // if
 284+ 7976 7F 64                        dw      ZBRANCH
 285+ 7978 04 00                        dw      DPlus_Minus_Endif - $
 286+ 797A A7 6A                        dw          DMINUS              //      dminus
 287+ 797C              DPlus_Minus_Endif:                              // endif
 288+ 797C 95 69                        dw      EXIT                    // ;
 289+ 797E
 290+ 797E              //  ______________________________________________________________________
 291+ 797E              //
 292+ 797E              // abs          n1 -- n2
 293+ 797E                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 797E             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 797E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 797E             >
 293+ 797E             >                // dummy db directives used to calculate length of namec
 293+ 797E 41 42 53    >                db      "ABS"
 293+ 7981             >len_NFA         defl    $ - temp_NFA
 293+ 7981             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 797E             >
 293+ 797E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 797F 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 7982             >                org     $-1                 // alter last byte of Name just above to set
 293+ 7981 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 7982             >
 293+ 7982 6C 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 7984             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 7984 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 7986             >                else
 293+ 7986 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 7986             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 7986             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 7986             >
 293+ 7986             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 7986 0A 6B                        dw      DUP                     // dup
 295+ 7988 60 79                        dw      PLUS_MINUS              // +-
 296+ 798A 95 69                        dw      EXIT                    // ;
 297+ 798C
 298+ 798C              //  ______________________________________________________________________
 299+ 798C              //
 300+ 798C              // dabs         d1 -- d2
 301+ 798C                              Colon_Def DABS, "DABS", is_normal
 301+ 798C             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 798C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 798C             >
 301+ 798C             >                // dummy db directives used to calculate length of namec
 301+ 798C 44 41 42 53 >                db      "DABS"
 301+ 7990             >len_NFA         defl    $ - temp_NFA
 301+ 7990             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 798C             >
 301+ 798C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 798D 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 7991             >                org     $-1                 // alter last byte of Name just above to set
 301+ 7990 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 7991             >
 301+ 7991 7E 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 7993             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 7993 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 7995             >                else
 301+ 7995 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 7995             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 7995             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 7995             >
 301+ 7995             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 7995 0A 6B                        dw      DUP                     // dup
 303+ 7997 72 79                        dw      DPLUS_MINUS             // d+-
 304+ 7999 95 69                        dw      EXIT                    // ;
 305+ 799B
 306+ 799B              //  ______________________________________________________________________
 307+ 799B              //
 308+ 799B              // m*           n1 n2 -- d
 309+ 799B              // multiply two integer giving a double
 310+ 799B                              Colon_Def MMUL, "M*", is_normal
 310+ 799B             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 799B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 799B             >
 310+ 799B             >                // dummy db directives used to calculate length of namec
 310+ 799B 4D 2A       >                db      "M*"
 310+ 799D             >len_NFA         defl    $ - temp_NFA
 310+ 799D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 799B             >
 310+ 799B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 799C 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 799E             >                org     $-1                 // alter last byte of Name just above to set
 310+ 799D AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 799E             >
 310+ 799E 8C 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 79A0             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 79A0 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 79A2             >                else
 310+ 79A2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 79A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 79A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 79A2             >
 310+ 79A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 79A2 74 6B 4C 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 79A6 BE 69
 312+ 79A8 84 79 FD 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 79AC 84 79 C0 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79B0 D2 69 72 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79B4 95 69                        dw      EXIT                    // ;
 316+ 79B6
 317+ 79B6              //  ______________________________________________________________________
 318+ 79B6              //
 319+ 79B6              // m/         d n -- q r
 320+ 79B6              // multiply two integer giving a double
 321+ 79B6                              Colon_Def MDIV, "M/", is_normal
 321+ 79B6             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 321+ 79B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 79B6             >
 321+ 79B6             >                // dummy db directives used to calculate length of namec
 321+ 79B6 4D 2F       >                db      "M/"
 321+ 79B8             >len_NFA         defl    $ - temp_NFA
 321+ 79B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 79B6             >
 321+ 79B6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 79B7 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 321+ 79B9             >                org     $-1                 // alter last byte of Name just above to set
 321+ 79B8 AF          >                db      {b $} | END_BIT     // msb as name end
 321+ 79B9             >
 321+ 79B9 9B 79       >                dw      last_NFA            // Link to previous definition Name
 321+ 79BB             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 79BB BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 321+ 79BD             >                else
 321+ 79BD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 321+ 79BD             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 79BD             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 79BD             >
 321+ 79BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 79BD C5 6A BE 69                  dw      OVER, TO_R, TO_R        // over >r >r
 322+ 79C1 BE 69
 323+ 79C3 93 79 E5 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 323+ 79C7 84 79
 324+ 79C9 E9 68                        dw      UMDIVMOD                // um/mod
 325+ 79CB D2 69                        dw      R_TO                    // r>
 326+ 79CD E5 69 4C 69                  dw      R_OP, XOR_OP            // r xor
 327+ 79D1 60 79 FD 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 328+ 79D5 D2 69                        dw      R_TO                    // r>
 329+ 79D7 60 79 FD 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 330+ 79DB 95 69                        dw      EXIT                    // ;
 331+ 79DD
 332+ 79DD              //  ______________________________________________________________________
 333+ 79DD              //
 334+ 79DD              // *            n1 n2 -- n3
 335+ 79DD              // multiply two integer
 336+ 79DD                              Colon_Def MUL, "*", is_normal
 336+ 79DD             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 336+ 79DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ 79DD             >
 336+ 79DD             >                // dummy db directives used to calculate length of namec
 336+ 79DD 2A          >                db      "*"
 336+ 79DE             >len_NFA         defl    $ - temp_NFA
 336+ 79DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ 79DD             >
 336+ 79DD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ 79DE 2A          >                db      "*"               // name string in 7-bit ascii, but
 336+ 79DF             >                org     $-1                 // alter last byte of Name just above to set
 336+ 79DE AA          >                db      {b $} | END_BIT     // msb as name end
 336+ 79DF             >
 336+ 79DF B6 79       >                dw      last_NFA            // Link to previous definition Name
 336+ 79E1             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 79E1 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 336+ 79E3             >                else
 336+ 79E3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 336+ 79E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 79E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 79E3             >
 336+ 79E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 79E3 A0 79 D5 6A                  dw      MMUL, DROP              // m* drop
 338+ 79E7 95 69                        dw      EXIT                    // ;
 339+ 79E9
 340+ 79E9              //  ______________________________________________________________________
 341+ 79E9              //
 342+ 79E9              // /mod         n1 n2 -- n3 n4
 343+ 79E9              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 344+ 79E9              // The remainder has the sign of n1
 345+ 79E9                              Colon_Def DIVMOD, "/MOD", is_normal
 345+ 79E9             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 345+ 79E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 345+ 79E9             >
 345+ 79E9             >                // dummy db directives used to calculate length of namec
 345+ 79E9 2F 4D 4F 44 >                db      "/MOD"
 345+ 79ED             >len_NFA         defl    $ - temp_NFA
 345+ 79ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 345+ 79E9             >
 345+ 79E9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 345+ 79EA 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 345+ 79EE             >                org     $-1                 // alter last byte of Name just above to set
 345+ 79ED C4          >                db      {b $} | END_BIT     // msb as name end
 345+ 79EE             >
 345+ 79EE DD 79       >                dw      last_NFA            // Link to previous definition Name
 345+ 79F0             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 345+ 79F0 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 345+ 79F2             >                else
 345+ 79F2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 345+ 79F2             >                endif           ; ok        // for other definitions it "points" the correct handler
 345+ 79F2             >                // Use of "; ok" to suppress "warning[fwdref]"
 345+ 79F2             >
 345+ 79F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 346+ 79F2 BE 69 4C 6F                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 346+ 79F6 D2 69
 347+ 79F8 BB 79                        dw      MDIV                    // m/
 348+ 79FA 95 69                        dw      EXIT                    // ;
 349+ 79FC
 350+ 79FC              //  ______________________________________________________________________
 351+ 79FC              //
 352+ 79FC              // /            n1 n2 -- n3
 353+ 79FC              // division
 354+ 79FC                              Colon_Def DIV, "/", is_normal
 354+ 79FC             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 354+ 79FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 354+ 79FC             >
 354+ 79FC             >                // dummy db directives used to calculate length of namec
 354+ 79FC 2F          >                db      "/"
 354+ 79FD             >len_NFA         defl    $ - temp_NFA
 354+ 79FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 354+ 79FC             >
 354+ 79FC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 354+ 79FD 2F          >                db      "/"               // name string in 7-bit ascii, but
 354+ 79FE             >                org     $-1                 // alter last byte of Name just above to set
 354+ 79FD AF          >                db      {b $} | END_BIT     // msb as name end
 354+ 79FE             >
 354+ 79FE E9 79       >                dw      last_NFA            // Link to previous definition Name
 354+ 7A00             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 354+ 7A00 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 354+ 7A02             >                else
 354+ 7A02 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 354+ 7A02             >                endif           ; ok        // for other definitions it "points" the correct handler
 354+ 7A02             >                // Use of "; ok" to suppress "warning[fwdref]"
 354+ 7A02             >
 354+ 7A02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 355+ 7A02 F0 79 FD 6A                  dw      DIVMOD, SWAP, DROP      // /mod swap drop
 355+ 7A06 D5 6A
 356+ 7A08 95 69                        dw      EXIT                    // ;
 357+ 7A0A
 358+ 7A0A              //  ______________________________________________________________________
 359+ 7A0A              //
 360+ 7A0A              // mod          n1 n2 -- n3
 361+ 7A0A                              Colon_Def MOD, "MOD", is_normal
 361+ 7A0A             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 361+ 7A0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 361+ 7A0A             >
 361+ 7A0A             >                // dummy db directives used to calculate length of namec
 361+ 7A0A 4D 4F 44    >                db      "MOD"
 361+ 7A0D             >len_NFA         defl    $ - temp_NFA
 361+ 7A0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 361+ 7A0A             >
 361+ 7A0A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 361+ 7A0B 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 361+ 7A0E             >                org     $-1                 // alter last byte of Name just above to set
 361+ 7A0D C4          >                db      {b $} | END_BIT     // msb as name end
 361+ 7A0E             >
 361+ 7A0E FC 79       >                dw      last_NFA            // Link to previous definition Name
 361+ 7A10             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 361+ 7A10 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 361+ 7A12             >                else
 361+ 7A12 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 361+ 7A12             >                endif           ; ok        // for other definitions it "points" the correct handler
 361+ 7A12             >                // Use of "; ok" to suppress "warning[fwdref]"
 361+ 7A12             >
 361+ 7A12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 362+ 7A12 F0 79 D5 6A                  dw      DIVMOD, DROP            // /mod drop
 363+ 7A16 95 69                        dw      EXIT                    // ;
 364+ 7A18
 365+ 7A18              //  ______________________________________________________________________
 366+ 7A18              //
 367+ 7A18              // */mod        n1 n2 n3 -- n4 n5
 368+ 7A18              // leaves the quotient n5 and the remainder n4 of the operation
 369+ 7A18              // (n1 * n2) / n3. The intermediate passage through a double number
 370+ 7A18              // avoids loss of precision
 371+ 7A18                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 371+ 7A18             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 371+ 7A18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 371+ 7A18             >
 371+ 7A18             >                // dummy db directives used to calculate length of namec
 371+ 7A18 2A 2F 4D 4F >                db      "*/MOD"
 371+ 7A1C 44          >
 371+ 7A1D             >len_NFA         defl    $ - temp_NFA
 371+ 7A1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 371+ 7A18             >
 371+ 7A18 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 371+ 7A19 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 371+ 7A1D 44          >
 371+ 7A1E             >                org     $-1                 // alter last byte of Name just above to set
 371+ 7A1D C4          >                db      {b $} | END_BIT     // msb as name end
 371+ 7A1E             >
 371+ 7A1E 0A 7A       >                dw      last_NFA            // Link to previous definition Name
 371+ 7A20             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 371+ 7A20 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 371+ 7A22             >                else
 371+ 7A22 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 371+ 7A22             >                endif           ; ok        // for other definitions it "points" the correct handler
 371+ 7A22             >                // Use of "; ok" to suppress "warning[fwdref]"
 371+ 7A22             >
 371+ 7A22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 372+ 7A22 BE 69 A0 79                  dw      TO_R, MMUL              // >r  m*
 373+ 7A26 D2 69 BB 79                  dw      R_TO, MDIV              // r>  m/
 374+ 7A2A 95 69                        dw      EXIT                    // ;
 375+ 7A2C
 376+ 7A2C              //  ______________________________________________________________________
 377+ 7A2C              //
 378+ 7A2C              // */          n1 n2 n3 -- n4
 379+ 7A2C              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 380+ 7A2C                              Colon_Def MUL_DIV, "*/", is_normal
 380+ 7A2C             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 380+ 7A2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ 7A2C             >
 380+ 7A2C             >                // dummy db directives used to calculate length of namec
 380+ 7A2C 2A 2F       >                db      "*/"
 380+ 7A2E             >len_NFA         defl    $ - temp_NFA
 380+ 7A2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ 7A2C             >
 380+ 7A2C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ 7A2D 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 380+ 7A2F             >                org     $-1                 // alter last byte of Name just above to set
 380+ 7A2E AF          >                db      {b $} | END_BIT     // msb as name end
 380+ 7A2F             >
 380+ 7A2F 18 7A       >                dw      last_NFA            // Link to previous definition Name
 380+ 7A31             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 7A31 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 7A33             >                else
 380+ 7A33 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 380+ 7A33             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 7A33             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 7A33             >
 380+ 7A33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 7A33 20 7A                        dw     MUL_DIV_MOD              // */mod
 382+ 7A35 FD 6A D5 6A                  dw     SWAP, DROP               // swap drop
 383+ 7A39 95 69                        dw      EXIT                    // ;
 384+ 7A3B
 385+ 7A3B
 386+ 7A3B              //  ______________________________________________________________________
 387+ 7A3B              //
 388+ 7A3B              // m/mod        ud1 u2 -- u3 ud4
 389+ 7A3B              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 390+ 7A3B              // All terms are unsigned.
 391+ 7A3B                              Colon_Def MDIV_MOD, "M/MOD", is_normal
 391+ 7A3B             >                New_Def  MDIV_MOD, "M/MOD", Enter_Ptr, is_normal ; ok
 391+ 7A3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 391+ 7A3B             >
 391+ 7A3B             >                // dummy db directives used to calculate length of namec
 391+ 7A3B 4D 2F 4D 4F >                db      "M/MOD"
 391+ 7A3F 44          >
 391+ 7A40             >len_NFA         defl    $ - temp_NFA
 391+ 7A40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 391+ 7A3B             >
 391+ 7A3B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 391+ 7A3C 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 391+ 7A40 44          >
 391+ 7A41             >                org     $-1                 // alter last byte of Name just above to set
 391+ 7A40 C4          >                db      {b $} | END_BIT     // msb as name end
 391+ 7A41             >
 391+ 7A41 2C 7A       >                dw      last_NFA            // Link to previous definition Name
 391+ 7A43             >MDIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 391+ 7A43 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 391+ 7A45             >                else
 391+ 7A45 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 391+ 7A45             >                endif           ; ok        // for other definitions it "points" the correct handler
 391+ 7A45             >                // Use of "; ok" to suppress "warning[fwdref]"
 391+ 7A45             >
 391+ 7A45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 392+ 7A45 BE 69                        dw      TO_R                    // >r           ( ud1 )
 393+ 7A47 3A 6D E5 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 393+ 7A4B E9 68
 394+ 7A4D D2 69 FD 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 394+ 7A51 BE 69
 395+ 7A53 E9 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 396+ 7A55 D2 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 397+ 7A57 95 69                        dw      EXIT                    // ;
 398+ 7A59
 399+ 7A59              //  ______________________________________________________________________
 400+ 7A59              //
 401+ 7A59              // (line)       n1 n2 -- a b
 402+ 7A59              // sends the line n1 of block n2 to the disk buffer.
 403+ 7A59              // it returns the address a and ca counter b = C/L meaning a whole line.
 404+ 7A59                              Colon_Def CLINE, "(LINE)", is_normal
 404+ 7A59             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 404+ 7A59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 7A59             >
 404+ 7A59             >                // dummy db directives used to calculate length of namec
 404+ 7A59 28 4C 49 4E >                db      "(LINE)"
 404+ 7A5D 45 29       >
 404+ 7A5F             >len_NFA         defl    $ - temp_NFA
 404+ 7A5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 7A59             >
 404+ 7A59 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 7A5A 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 404+ 7A5E 45 29       >
 404+ 7A60             >                org     $-1                 // alter last byte of Name just above to set
 404+ 7A5F A9          >                db      {b $} | END_BIT     // msb as name end
 404+ 7A60             >
 404+ 7A60 3B 7A       >                dw      last_NFA            // Link to previous definition Name
 404+ 7A62             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 7A62 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 404+ 7A64             >                else
 404+ 7A64 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 404+ 7A64             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 7A64             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 7A64             >
 404+ 7A64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 7A64 BE 69                        dw      TO_R                    // >r
 406+ 7A66 E7 6C                        dw      NOOP                    // noop
 407+ 7A68 6E 6D                        dw      CL                      // c/l
 408+ 7A6A 7A 6D 20 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 409+ 7A6E D2 69                        dw      R_TO                    // r>
 410+ 7A70 86 6D E1 79                  dw      BSCR, MUL, PLUS         // b/scr * +
 410+ 7A74 27 6A
 411+ 7A76 A9 7D                        dw      BLOCK                   // block   ( forward )
 412+ 7A78 27 6A                        dw      PLUS                    // +
 413+ 7A7A E7 6C                        dw      NOOP                    // noop
 414+ 7A7C 6E 6D                        dw      CL                      // c/l
 415+ 7A7E 95 69                        dw      EXIT                    // ;
 416+ 7A80
 417+ 7A80              //  ______________________________________________________________________
 418+ 7A80              //
 419+ 7A80              // .line        n1 n2 --
 420+ 7A80              // Sends to output line  n1  of screen n2.
 421+ 7A80                              Colon_Def DOT_LINE, ".LINE", is_normal
 421+ 7A80             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 421+ 7A80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 7A80             >
 421+ 7A80             >                // dummy db directives used to calculate length of namec
 421+ 7A80 2E 4C 49 4E >                db      ".LINE"
 421+ 7A84 45          >
 421+ 7A85             >len_NFA         defl    $ - temp_NFA
 421+ 7A85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 7A80             >
 421+ 7A80 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 7A81 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 421+ 7A85 45          >
 421+ 7A86             >                org     $-1                 // alter last byte of Name just above to set
 421+ 7A85 C5          >                db      {b $} | END_BIT     // msb as name end
 421+ 7A86             >
 421+ 7A86 59 7A       >                dw      last_NFA            // Link to previous definition Name
 421+ 7A88             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 7A88 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 421+ 7A8A             >                else
 421+ 7A8A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 421+ 7A8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 7A8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 7A8A             >
 421+ 7A8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 7A8A 62 7A 97 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 422+ 7A8E 73 72
 423+ 7A90 95 69                        dw      EXIT                    // ;
 424+ 7A92
 425+ 7A92              //  ______________________________________________________________________
 426+ 7A92              //
 427+ 7A92              // message       n1 n2 --
 428+ 7A92              // prints error message to current channel.
 429+ 7A92              // if WARNING is 0, prints "MSG#n".
 430+ 7A92              // if WARNING is 1, prints line n of screen 4.
 431+ 7A92              // if WARNING is -1, see ERROR
 432+ 7A92              // value can be negative or beyond block 4.
 433+ 7A92                              Colon_Def MESSAGE, "MESSAGE", is_normal
 433+ 7A92             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 433+ 7A92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 433+ 7A92             >
 433+ 7A92             >                // dummy db directives used to calculate length of namec
 433+ 7A92 4D 45 53 53 >                db      "MESSAGE"
 433+ 7A96 41 47 45    >
 433+ 7A99             >len_NFA         defl    $ - temp_NFA
 433+ 7A99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 433+ 7A92             >
 433+ 7A92 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 433+ 7A93 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 433+ 7A97 41 47 45    >
 433+ 7A9A             >                org     $-1                 // alter last byte of Name just above to set
 433+ 7A99 C5          >                db      {b $} | END_BIT     // msb as name end
 433+ 7A9A             >
 433+ 7A9A 80 7A       >                dw      last_NFA            // Link to previous definition Name
 433+ 7A9C             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 433+ 7A9C BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 433+ 7A9E             >                else
 433+ 7A9E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 433+ 7A9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 433+ 7A9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 433+ 7A9E             >
 433+ 7A9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 434+ 7A9E E5 6D CE 6B                  dw      WARNING, FETCH          // warning @
 435+ 7AA2                                                              // if
 436+ 7AA2 7F 64                        dw      ZBRANCH
 437+ 7AA4 18 00                        dw      Message_Else - $
 438+ 7AA6 45 64 04 00                  dw          LIT, 4              //      4
 439+ 7AAA 60 6E CE 6B                  dw          OFFSET, FETCH       //      offset @
 440+ 7AAE 86 6D 00 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 440+ 7AB2 60 6F
 441+ 7AB4 88 7A                        dw          DOT_LINE            //      .line
 442+ 7AB6 1D 70                        dw          SPACE               //      space
 443+ 7AB8                                                              // else
 444+ 7AB8
 445+ 7AB8 68 64                        dw      BRANCH
 446+ 7ABA 0B 00                        dw      Message_ENdif - $
 447+ 7ABC              Message_Else:
 448+ 7ABC 45 74                        dw          C_DOT_QUOTE         //      .( msg#)
 449+ 7ABE 04 6D 73 67                  db          4, "msg#"
 449+ 7AC2 23
 450+ 7AC3 E2 82                        dw          DOT                 //      .  ( forward )
 451+ 7AC5              Message_ENdif:                                  // endif
 452+ 7AC5 95 69                        dw      EXIT                    // ;
 453+ 7AC7
 454+ 7AC7
 455+ 7AC7              //  ______________________________________________________________________
 456+ 7AC7              //
 457+ 7AC7              // device
 458+ 7AC7                              Variable_Def DEVICE,   "DEVICE",   2
 458+ 7AC7             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 458+ 7AC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 458+ 7AC7             >
 458+ 7AC7             >                // dummy db directives used to calculate length of namec
 458+ 7AC7 44 45 56 49 >                db      "DEVICE"
 458+ 7ACB 43 45       >
 458+ 7ACD             >len_NFA         defl    $ - temp_NFA
 458+ 7ACD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 458+ 7AC7             >
 458+ 7AC7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 458+ 7AC8 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 458+ 7ACC 43 45       >
 458+ 7ACE             >                org     $-1                 // alter last byte of Name just above to set
 458+ 7ACD C5          >                db      {b $} | END_BIT     // msb as name end
 458+ 7ACE             >
 458+ 7ACE 92 7A       >                dw      last_NFA            // Link to previous definition Name
 458+ 7AD0             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 458+ 7AD0 17 6D       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 458+ 7AD2             >                else
 458+ 7AD2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 458+ 7AD2             >                endif           ; ok        // for other definitions it "points" the correct handler
 458+ 7AD2             >                // Use of "; ok" to suppress "warning[fwdref]"
 458+ 7AD2             >
 458+ 7AD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 7AD2 02 00       >                dw      2
 459+ 7AD4
 460+ 7AD4              //  ______________________________________________________________________
 461+ 7AD4              //
 462+ 7AD4              // inkey        -- c | 0
 463+ 7AD4              // call ROM inkey$ routine, returns c or "zero".
 464+ 7AD4
 465+ 7AD4                              New_Def INKEY, "INKEY", is_code, is_normal
 465+ 7AD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 465+ 7AD4             >
 465+ 7AD4             >                // dummy db directives used to calculate length of namec
 465+ 7AD4 49 4E 4B 45 >                db      "INKEY"
 465+ 7AD8 59          >
 465+ 7AD9             >len_NFA         defl    $ - temp_NFA
 465+ 7AD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 465+ 7AD4             >
 465+ 7AD4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 465+ 7AD5 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 465+ 7AD9 59          >
 465+ 7ADA             >                org     $-1                 // alter last byte of Name just above to set
 465+ 7AD9 D9          >                db      {b $} | END_BIT     // msb as name end
 465+ 7ADA             >
 465+ 7ADA C7 7A       >                dw      last_NFA            // Link to previous definition Name
 465+ 7ADC             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 465+ 7ADC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 465+ 7ADC             >                else
 465+ 7ADC DE 7A       >                dw      $ + 2   ; ok        // is pointed by CFA
 465+ 7ADE             >                endif           ; ok        // for other definitions it "points" the correct handler
 465+ 7ADE             >                // Use of "; ok" to suppress "warning[fwdref]"
 465+ 7ADE             >
 465+ 7ADE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 466+ 7ADE
 467+ 7ADE C5                           push    bc
 468+ 7ADF ED 73 2C 64                  ld      (SP_Saved), sp
 469+ 7AE3 31 FE 63                     ld      sp, Cold_origin - 2
 470+ 7AE6 DD E5                        push    ix
 471+ 7AE8 CD E6 15                     call    $15E6                   // instead of 15E9
 472+ 7AEB DD E1                        pop     ix
 473+ 7AED ED 7B 2C 64                  ld      sp, (SP_Saved)
 474+ 7AF1 6F                           ld      l, a
 475+ 7AF2 26 00                        ld      h, 0
 476+ 7AF4 C1                           pop     bc
 477+ 7AF5                              psh1
 477+ 7AF5 E5          >                push    hl
 477+ 7AF6 DD E9       >                jp      (ix)
 478+ 7AF8
 479+ 7AF8              //  ______________________________________________________________________
 480+ 7AF8              //
 481+ 7AF8              // select      n --
 482+ 7AF8              // selects the given channel number
 483+ 7AF8
 484+ 7AF8                              New_Def SELECT, "SELECT", is_code, is_normal
 484+ 7AF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 484+ 7AF8             >
 484+ 7AF8             >                // dummy db directives used to calculate length of namec
 484+ 7AF8 53 45 4C 45 >                db      "SELECT"
 484+ 7AFC 43 54       >
 484+ 7AFE             >len_NFA         defl    $ - temp_NFA
 484+ 7AFE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 484+ 7AF8             >
 484+ 7AF8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 484+ 7AF9 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 484+ 7AFD 43 54       >
 484+ 7AFF             >                org     $-1                 // alter last byte of Name just above to set
 484+ 7AFE D4          >                db      {b $} | END_BIT     // msb as name end
 484+ 7AFF             >
 484+ 7AFF D4 7A       >                dw      last_NFA            // Link to previous definition Name
 484+ 7B01             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 484+ 7B01 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 484+ 7B01             >                else
 484+ 7B01 03 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 484+ 7B03             >                endif           ; ok        // for other definitions it "points" the correct handler
 484+ 7B03             >                // Use of "; ok" to suppress "warning[fwdref]"
 484+ 7B03             >
 484+ 7B03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 485+ 7B03 E1                           pop     hl
 486+ 7B04 C5                           push    bc
 487+ 7B05 7D                           ld      a, l
 488+ 7B06 ED 73 2C 64                  ld      (SP_Saved), sp
 489+ 7B0A 31 FE 63                     ld      sp, Cold_origin - 2
 490+ 7B0D DD E5                        push    ix
 491+ 7B0F CD 01 16                     call    $1601
 492+ 7B12 DD E1                        pop     ix
 493+ 7B14 ED 7B 2C 64                  ld      sp, (SP_Saved)
 494+ 7B18 C1                           pop     bc
 495+ 7B19
 496+ 7B19                              next
 496+ 7B19 DD E9       >                jp      (ix)
 497+ 7B1B
 498+ 7B1B              //  ______________________________________________________________________
 499+ 7B1B
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
 111  7B1B                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
   1+ 7B1B              //  ______________________________________________________________________
   2+ 7B1B              //
   3+ 7B1B              //  next-opt.asm
   4+ 7B1B              //
   5+ 7B1B              //  ZX Spectrum Next - peculiar definitions
   6+ 7B1B              //  ______________________________________________________________________
   7+ 7B1B
   8+ 7B1B              //  ______________________________________________________________________
   9+ 7B1B              //
  10+ 7B1B              // reg@         n -- b
  11+ 7B1B              // read Next REGister n giving byte b
  12+ 7B1B
  13+ 7B1B                              Colon_Def REG_FETCH, "REG@", is_normal
  13+ 7B1B             >                New_Def  REG_FETCH, "REG@", Enter_Ptr, is_normal ; ok
  13+ 7B1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7B1B             >
  13+ 7B1B             >                // dummy db directives used to calculate length of namec
  13+ 7B1B 52 45 47 40 >                db      "REG@"
  13+ 7B1F             >len_NFA         defl    $ - temp_NFA
  13+ 7B1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7B1B             >
  13+ 7B1B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7B1C 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7B20             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7B1F C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7B20             >
  13+ 7B20 F8 7A       >                dw      last_NFA            // Link to previous definition Name
  13+ 7B22             >REG_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7B22 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 7B24             >                else
  13+ 7B24 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 7B24             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7B24             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7B24             >
  13+ 7B24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7B24 45 64 3B 24                  dw      LIT, $243B
  15+ 7B28 41 6C                        dw      PSTORE
  16+ 7B2A 45 64 3B 25                  dw      LIT, $253B
  17+ 7B2E 2E 6C                        dw      PFETCH
  18+ 7B30 95 69                        dw      EXIT
  19+ 7B32
  20+ 7B32              //  ______________________________________________________________________
  21+ 7B32              //
  22+ 7B32              // reg!         b n --
  23+ 7B32              // write value b to Next REGister n
  24+ 7B32
  25+ 7B32                              Colon_Def REG_STORE, "REG!", is_normal
  25+ 7B32             >                New_Def  REG_STORE, "REG!", Enter_Ptr, is_normal ; ok
  25+ 7B32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  25+ 7B32             >
  25+ 7B32             >                // dummy db directives used to calculate length of namec
  25+ 7B32 52 45 47 21 >                db      "REG!"
  25+ 7B36             >len_NFA         defl    $ - temp_NFA
  25+ 7B36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  25+ 7B32             >
  25+ 7B32 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  25+ 7B33 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  25+ 7B37             >                org     $-1                 // alter last byte of Name just above to set
  25+ 7B36 A1          >                db      {b $} | END_BIT     // msb as name end
  25+ 7B37             >
  25+ 7B37 1B 7B       >                dw      last_NFA            // Link to previous definition Name
  25+ 7B39             >REG_STORE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  25+ 7B39 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  25+ 7B3B             >                else
  25+ 7B3B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  25+ 7B3B             >                endif           ; ok        // for other definitions it "points" the correct handler
  25+ 7B3B             >                // Use of "; ok" to suppress "warning[fwdref]"
  25+ 7B3B             >
  25+ 7B3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  26+ 7B3B 45 64 3B 24                  dw      LIT, $243B
  27+ 7B3F 41 6C                        dw      PSTORE
  28+ 7B41 45 64 3B 25                  dw      LIT, $253B
  29+ 7B45 41 6C                        dw      PSTORE
  30+ 7B47 95 69                        dw      EXIT
  31+ 7B49
  32+ 7B49              //  ______________________________________________________________________
  33+ 7B49              //
  34+ 7B49              // mmu7@        -- n
  35+ 7B49              // query current page in MMU7 8K-RAM : 0 and 223
  36+ 7B49
  37+ 7B49                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  37+ 7B49             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  37+ 7B49             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  37+ 7B49             >
  37+ 7B49             >                // dummy db directives used to calculate length of namec
  37+ 7B49 4D 4D 55 37 >                db      "MMU7@"
  37+ 7B4D 40          >
  37+ 7B4E             >len_NFA         defl    $ - temp_NFA
  37+ 7B4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  37+ 7B49             >
  37+ 7B49 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  37+ 7B4A 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  37+ 7B4E 40          >
  37+ 7B4F             >                org     $-1                 // alter last byte of Name just above to set
  37+ 7B4E C0          >                db      {b $} | END_BIT     // msb as name end
  37+ 7B4F             >
  37+ 7B4F 32 7B       >                dw      last_NFA            // Link to previous definition Name
  37+ 7B51             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  37+ 7B51 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  37+ 7B53             >                else
  37+ 7B53 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  37+ 7B53             >                endif           ; ok        // for other definitions it "points" the correct handler
  37+ 7B53             >                // Use of "; ok" to suppress "warning[fwdref]"
  37+ 7B53             >
  37+ 7B53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  38+ 7B53 45 64 57 00                  dw      LIT, 87, REG_FETCH
  38+ 7B57 22 7B
  39+ 7B59 95 69                        dw      EXIT
  40+ 7B5B
  41+ 7B5B              //  ______________________________________________________________________
  42+ 7B5B              //
  43+ 7B5B              // mmu7!        n --
  44+ 7B5B              // set MMU7 8K-RAM page to n given between 0 and 223
  45+ 7B5B              // optimized version that uses NEXTREG n,A Z80n op-code.
  46+ 7B5B
  47+ 7B5B                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  47+ 7B5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7B5B             >
  47+ 7B5B             >                // dummy db directives used to calculate length of namec
  47+ 7B5B 4D 4D 55 37 >                db      "MMU7!"
  47+ 7B5F 21          >
  47+ 7B60             >len_NFA         defl    $ - temp_NFA
  47+ 7B60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7B5B             >
  47+ 7B5B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7B5C 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  47+ 7B60 21          >
  47+ 7B61             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7B60 A1          >                db      {b $} | END_BIT     // msb as name end
  47+ 7B61             >
  47+ 7B61 49 7B       >                dw      last_NFA            // Link to previous definition Name
  47+ 7B63             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7B63 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  47+ 7B63             >                else
  47+ 7B63 65 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  47+ 7B65             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7B65             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7B65             >
  47+ 7B65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7B65 E1                           pop     hl
  49+ 7B66 7D                           ld      a, l
  50+ 7B67 ED 92 57                     nextreg 87, a
  51+ 7B6A
  52+ 7B6A                              next
  52+ 7B6A DD E9       >                jp      (ix)
  53+ 7B6C
  54+ 7B6C              //  ______________________________________________________________________
  55+ 7B6C              //
  56+ 7B6C              // >far         ha -- a n
  57+ 7B6C              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  58+ 7B6C              // take lower bits of H and L as an offset from E000h
  59+ 7B6C              // then return address  a  between E000h-FFFFh
  60+ 7B6C              // and page number n  between 64-71 (40h-47h)
  61+ 7B6C              // For example, in hex:
  62+ 7B6C              //   0000 >FAR  gives  40.E000
  63+ 7B6C              //   1FFF >FAR  gives  40.FFFF
  64+ 7B6C              //   2000 >FAR  gives  41.E000
  65+ 7B6C              //   3FFF >FAR  gives  41.FFFF
  66+ 7B6C              //   EFFF >FAR  gives  47.EFFF
  67+ 7B6C              //   FFFF >FAR  gives  47.FFFF
  68+ 7B6C                              New_Def TO_FAR, ">FAR", is_code, is_normal
  68+ 7B6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  68+ 7B6C             >
  68+ 7B6C             >                // dummy db directives used to calculate length of namec
  68+ 7B6C 3E 46 41 52 >                db      ">FAR"
  68+ 7B70             >len_NFA         defl    $ - temp_NFA
  68+ 7B70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  68+ 7B6C             >
  68+ 7B6C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  68+ 7B6D 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
  68+ 7B71             >                org     $-1                 // alter last byte of Name just above to set
  68+ 7B70 D2          >                db      {b $} | END_BIT     // msb as name end
  68+ 7B71             >
  68+ 7B71 5B 7B       >                dw      last_NFA            // Link to previous definition Name
  68+ 7B73             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  68+ 7B73 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  68+ 7B73             >                else
  68+ 7B73 75 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  68+ 7B75             >                endif           ; ok        // for other definitions it "points" the correct handler
  68+ 7B75             >                // Use of "; ok" to suppress "warning[fwdref]"
  68+ 7B75             >
  68+ 7B75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  69+ 7B75 E1                           pop     hl
  70+ 7B76 7C                           ld      a, h
  71+ 7B77 E6 E0                        and     $E0
  72+ 7B79 07                           rlca
  73+ 7B7A 07                           rlca
  74+ 7B7B 07                           rlca
  75+ 7B7C F6 40                        or      $40
  76+ 7B7E 5F                           ld      e, a
  77+ 7B7F 16 00                        ld      d, 0
  78+ 7B81 7C                           ld      a, h
  79+ 7B82 F6 E0                        or      $E0
  80+ 7B84 67                           ld      h, a
  81+ 7B85 EB                           ex      de, hl
  82+ 7B86                              psh2
  82+ 7B86 D5          >                push    de
  82+ 7B87 E5          >                push    hl
  82+ 7B88 DD E9       >                jp      (ix)
  83+ 7B8A
  84+ 7B8A              //  ______________________________________________________________________
  85+ 7B8A              //
  86+ 7B8A              // <far         a n  -- ha
  87+ 7B8A              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  88+ 7B8A              // reverse of >FAR: encodes a FAR address compressing
  89+ 7B8A              // to bits 765 of H, lower bits of HL address offset from E000h
  90+ 7B8A                              New_Def FROM_FAR, "<FAR", is_code, is_normal
  90+ 7B8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  90+ 7B8A             >
  90+ 7B8A             >                // dummy db directives used to calculate length of namec
  90+ 7B8A 3C 46 41 52 >                db      "<FAR"
  90+ 7B8E             >len_NFA         defl    $ - temp_NFA
  90+ 7B8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  90+ 7B8A             >
  90+ 7B8A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  90+ 7B8B 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
  90+ 7B8F             >                org     $-1                 // alter last byte of Name just above to set
  90+ 7B8E D2          >                db      {b $} | END_BIT     // msb as name end
  90+ 7B8F             >
  90+ 7B8F 6C 7B       >                dw      last_NFA            // Link to previous definition Name
  90+ 7B91             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  90+ 7B91 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  90+ 7B91             >                else
  90+ 7B91 93 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  90+ 7B93             >                endif           ; ok        // for other definitions it "points" the correct handler
  90+ 7B93             >                // Use of "; ok" to suppress "warning[fwdref]"
  90+ 7B93             >
  90+ 7B93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  91+ 7B93 D1                           pop     de                  // page number in e
  92+ 7B94 E1                           pop     hl                  // address in hl
  93+ 7B95 7B                           ld      a, e
  94+ 7B96 E6 07                        and     $07                 // reduced to 0-7
  95+ 7B98 0F                           rrca
  96+ 7B99 0F                           rrca
  97+ 7B9A 0F                           rrca
  98+ 7B9B 57                           ld      d, a                // save to d bits 765
  99+ 7B9C 7C                           ld      a, h                // drops
 100+ 7B9D E6 1F                        and     $1F
 101+ 7B9F B2                           or      d
 102+ 7BA0 67                           ld      h, a
 103+ 7BA1
 104+ 7BA1                              psh1
 104+ 7BA1 E5          >                push    hl
 104+ 7BA2 DD E9       >                jp      (ix)
 105+ 7BA4
 106+ 7BA4              //  ______________________________________________________________________
 107+ 7BA4              //
 108+ 7BA4              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 109+ 7BA4              // NextZXOS call wrapper.
 110+ 7BA4              //  n1 = hl register parameter value
 111+ 7BA4              //  n2 = de register parameter value
 112+ 7BA4              //  n3 = bc register parameter value
 113+ 7BA4              //  n4 =  a register parameter value
 114+ 7BA4              //   a = routine address in ROM 3
 115+ 7BA4              // ----
 116+ 7BA4              //  n5 = hl returned value
 117+ 7BA4              //  n6 = de returned value
 118+ 7BA4              //  n7 = bc returned value
 119+ 7BA4              //  n8 =  a returned value
 120+ 7BA4              //   f
 121+ 7BA4                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 121+ 7BA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 7BA4             >
 121+ 7BA4             >                // dummy db directives used to calculate length of namec
 121+ 7BA4 4D 5F 50 33 >                db      "M_P3DOS"
 121+ 7BA8 44 4F 53    >
 121+ 7BAB             >len_NFA         defl    $ - temp_NFA
 121+ 7BAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 7BA4             >
 121+ 7BA4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 7BA5 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 121+ 7BA9 44 4F 53    >
 121+ 7BAC             >                org     $-1                 // alter last byte of Name just above to set
 121+ 7BAB D3          >                db      {b $} | END_BIT     // msb as name end
 121+ 7BAC             >
 121+ 7BAC 8A 7B       >                dw      last_NFA            // Link to previous definition Name
 121+ 7BAE             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 7BAE ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 121+ 7BAE             >                else
 121+ 7BAE B0 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 7BB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 7BB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 7BB0             >
 121+ 7BB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 7BB0 D1                           pop     de                  // dos call entry address in de
 123+ 7BB1 E1                           pop     hl                  // a register
 124+ 7BB2 7D                           ld      a, l
 125+ 7BB3 D9                           exx
 126+ 7BB4 C1                           pop     bc
 127+ 7BB5 D1                           pop     de
 128+ 7BB6 E1                           pop     hl
 129+ 7BB7 D9                           exx
 130+ 7BB8
 131+ 7BB8 C5                           push    bc
 132+ 7BB9 DD E5                        push    ix
 133+ 7BBB
 134+ 7BBB ED 73 2C 64                  ld      (SP_Saved), sp
 135+ 7BBF 31 FE 63                     ld      sp, Cold_origin - 2
 136+ 7BC2 0E 07                        ld      c, 7                // use 7 RAM Bank
 137+ 7BC4
 138+ 7BC4 CF                           rst     08
 139+ 7BC5 94                           db      $94
 140+ 7BC6
 141+ 7BC6 ED 7B 2C 64                  ld      sp, (SP_Saved)
 142+ 7BCA DD E5                        push    ix
 143+ 7BCC E1                           pop     hl
 144+ 7BCD 22 2A 64                     ld      (IX_Echo), hl
 145+ 7BD0              //              nop
 146+ 7BD0 DD E1                        pop     ix
 147+ 7BD2 E3                           ex      (sp), hl            // hl argument and retrieve bc
 148+ 7BD3 D5                           push    de
 149+ 7BD4 C5                           push    bc
 150+ 7BD5 4D                           ld      c, l
 151+ 7BD6 44                           ld      b, h
 152+ 7BD7
 153+ 7BD7 26 00                        ld      h, 0
 154+ 7BD9 6F                           ld      l, a
 155+ 7BDA E5                           push    hl
 156+ 7BDB ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 157+ 7BDD 23                           inc     hl                  //  0 for OK ; 1 for ko
 158+ 7BDE
 159+ 7BDE                              psh1
 159+ 7BDE E5          >                push    hl
 159+ 7BDF DD E9       >                jp      (ix)
 160+ 7BE1
 161+ 7BE1              //  ______________________________________________________________________
 162+ 7BE1              //
 163+ 7BE1              // blk-fh
 164+ 7BE1                              Variable_Def BLK_FH,   "BLK-FH",   1
 164+ 7BE1             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 164+ 7BE1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 7BE1             >
 164+ 7BE1             >                // dummy db directives used to calculate length of namec
 164+ 7BE1 42 4C 4B 2D >                db      "BLK-FH"
 164+ 7BE5 46 48       >
 164+ 7BE7             >len_NFA         defl    $ - temp_NFA
 164+ 7BE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 7BE1             >
 164+ 7BE1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 7BE2 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 164+ 7BE6 46 48       >
 164+ 7BE8             >                org     $-1                 // alter last byte of Name just above to set
 164+ 7BE7 C8          >                db      {b $} | END_BIT     // msb as name end
 164+ 7BE8             >
 164+ 7BE8 A4 7B       >                dw      last_NFA            // Link to previous definition Name
 164+ 7BEA             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 7BEA 17 6D       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 164+ 7BEC             >                else
 164+ 7BEC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 7BEC             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 7BEC             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 7BEC             >
 164+ 7BEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 7BEC 01 00       >                dw      1
 165+ 7BEE
 166+ 7BEE                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 166+ 7BEE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 7BEE             >
 166+ 7BEE             >                // dummy db directives used to calculate length of namec
 166+ 7BEE 42 4C 4B 2D >                db      "BLK-FNAME"
 166+ 7BF2 46 4E 41 4D >
 166+ 7BF6 45          >
 166+ 7BF7             >len_NFA         defl    $ - temp_NFA
 166+ 7BF7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 7BEE             >
 166+ 7BEE 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 7BEF 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 166+ 7BF3 46 4E 41 4D >
 166+ 7BF7 45          >
 166+ 7BF8             >                org     $-1                 // alter last byte of Name just above to set
 166+ 7BF7 C5          >                db      {b $} | END_BIT     // msb as name end
 166+ 7BF8             >
 166+ 7BF8 E1 7B       >                dw      last_NFA            // Link to previous definition Name
 166+ 7BFA             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 7BFA A9 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 166+ 7BFC             >                else
 166+ 7BFC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 7BFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 7BFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 7BFC             >
 166+ 7BFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 7BFC 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 167+ 7C00 6F 63 6B 73
 167+ 7C04 2D 36 34 2E
 167+ 7C08 62 69 6E 00
 168+ 7C0C 00 00 00...                  ds      24
 169+ 7C24
 170+ 7C24              //  ______________________________________________________________________
 171+ 7C24              //
 172+ 7C24              // blk-seek     n --
 173+ 7C24              // seek block n  within blocks!.bin  file
 174+ 7C24                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 174+ 7C24             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 174+ 7C24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 7C24             >
 174+ 7C24             >                // dummy db directives used to calculate length of namec
 174+ 7C24 42 4C 4B 2D >                db      "BLK-SEEK"
 174+ 7C28 53 45 45 4B >
 174+ 7C2C             >len_NFA         defl    $ - temp_NFA
 174+ 7C2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 7C24             >
 174+ 7C24 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 7C25 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 174+ 7C29 53 45 45 4B >
 174+ 7C2D             >                org     $-1                 // alter last byte of Name just above to set
 174+ 7C2C CB          >                db      {b $} | END_BIT     // msb as name end
 174+ 7C2D             >
 174+ 7C2D EE 7B       >                dw      last_NFA            // Link to previous definition Name
 174+ 7C2F             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 7C2F BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 7C31             >                else
 174+ 7C31 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 7C31             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 7C31             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 7C31             >
 174+ 7C31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 7C31 7A 6D A0 79                  dw  BBUF, MMUL
 176+ 7C35 EA 7B CE 6B                  dw  BLK_FH, FETCH
 177+ 7C39 A8 67                        dw  F_SEEK
 178+ 7C3B 45 64 2D 00                  dw  LIT, $2D, QERROR
 178+ 7C3F D9 70
 179+ 7C41 95 69                        dw  EXIT
 180+ 7C43
 181+ 7C43              //  ______________________________________________________________________
 182+ 7C43              //
 183+ 7C43              // blk-read     n --
 184+ 7C43              // seek block n  within blocks!.bin  file
 185+ 7C43                              Colon_Def BLK_READ, "BLK-READ", is_normal
 185+ 7C43             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 185+ 7C43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ 7C43             >
 185+ 7C43             >                // dummy db directives used to calculate length of namec
 185+ 7C43 42 4C 4B 2D >                db      "BLK-READ"
 185+ 7C47 52 45 41 44 >
 185+ 7C4B             >len_NFA         defl    $ - temp_NFA
 185+ 7C4B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ 7C43             >
 185+ 7C43 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ 7C44 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 185+ 7C48 52 45 41 44 >
 185+ 7C4C             >                org     $-1                 // alter last byte of Name just above to set
 185+ 7C4B C4          >                db      {b $} | END_BIT     // msb as name end
 185+ 7C4C             >
 185+ 7C4C 24 7C       >                dw      last_NFA            // Link to previous definition Name
 185+ 7C4E             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 7C4E BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 185+ 7C50             >                else
 185+ 7C50 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 185+ 7C50             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 7C50             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 7C50             >
 185+ 7C50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 7C50 2F 7C                        dw  BLK_SEEK
 187+ 7C52 7A 6D                        dw  BBUF
 188+ 7C54 EA 7B CE 6B                  dw  BLK_FH, FETCH
 189+ 7C58 EB 67                        dw  F_READ
 190+ 7C5A 45 64 2E 00                  dw  LIT, $2E, QERROR
 190+ 7C5E D9 70
 191+ 7C60 D5 6A                        dw  DROP
 192+ 7C62 95 69                        dw  EXIT
 193+ 7C64
 194+ 7C64              //  ______________________________________________________________________
 195+ 7C64              //
 196+ 7C64              // blk-write     n --
 197+ 7C64              // seek block n  within blocks!.bin  file
 198+ 7C64                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 198+ 7C64             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 198+ 7C64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 7C64             >
 198+ 7C64             >                // dummy db directives used to calculate length of namec
 198+ 7C64 42 4C 4B 2D >                db      "BLK-WRITE"
 198+ 7C68 57 52 49 54 >
 198+ 7C6C 45          >
 198+ 7C6D             >len_NFA         defl    $ - temp_NFA
 198+ 7C6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 7C64             >
 198+ 7C64 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 7C65 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 198+ 7C69 57 52 49 54 >
 198+ 7C6D 45          >
 198+ 7C6E             >                org     $-1                 // alter last byte of Name just above to set
 198+ 7C6D C5          >                db      {b $} | END_BIT     // msb as name end
 198+ 7C6E             >
 198+ 7C6E 43 7C       >                dw      last_NFA            // Link to previous definition Name
 198+ 7C70             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 7C70 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 198+ 7C72             >                else
 198+ 7C72 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 198+ 7C72             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 7C72             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 7C72             >
 198+ 7C72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 7C72 2F 7C                        dw  BLK_SEEK
 200+ 7C74 7A 6D                        dw  BBUF
 201+ 7C76 EA 7B CE 6B                  dw  BLK_FH, FETCH
 202+ 7C7A 0A 68                        dw  F_WRITE
 203+ 7C7C 45 64 2F 00                  dw  LIT, $2F, QERROR
 203+ 7C80 D9 70
 204+ 7C82 D5 6A                        dw  DROP
 205+ 7C84 95 69                        dw  EXIT
 206+ 7C86
 207+ 7C86              //  ______________________________________________________________________
 208+ 7C86              //
 209+ 7C86              // blk-init     n --
 210+ 7C86              // seek block n  within blocks!.bin  file
 211+ 7C86                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 211+ 7C86             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 211+ 7C86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 211+ 7C86             >
 211+ 7C86             >                // dummy db directives used to calculate length of namec
 211+ 7C86 42 4C 4B 2D >                db      "BLK-INIT"
 211+ 7C8A 49 4E 49 54 >
 211+ 7C8E             >len_NFA         defl    $ - temp_NFA
 211+ 7C8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 211+ 7C86             >
 211+ 7C86 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 211+ 7C87 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 211+ 7C8B 49 4E 49 54 >
 211+ 7C8F             >                org     $-1                 // alter last byte of Name just above to set
 211+ 7C8E D4          >                db      {b $} | END_BIT     // msb as name end
 211+ 7C8F             >
 211+ 7C8F 64 7C       >                dw      last_NFA            // Link to previous definition Name
 211+ 7C91             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 211+ 7C91 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 211+ 7C93             >                else
 211+ 7C93 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 211+ 7C93             >                endif           ; ok        // for other definitions it "points" the correct handler
 211+ 7C93             >                // Use of "; ok" to suppress "warning[fwdref]"
 211+ 7C93             >
 211+ 7C93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 212+ 7C93 EA 7B CE 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 212+ 7C97 29 68 D5 6A
 213+ 7C9B FA 7B 50 6A                  dw  BLK_FNAME, ONE_PLUS
 214+ 7C9F 0C 6F 52 6D                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 214+ 7CA3 43 68
 215+ 7CA5 45 64 2C 00                  dw  LIT, $2C, QERROR
 215+ 7CA9 D9 70
 216+ 7CAB EA 7B DB 6B                  dw  BLK_FH, STORE
 217+ 7CAF 95 69                        dw  EXIT
 218+ 7CB1
 219+ 7CB1              //  ______________________________________________________________________
 220+ 7CB1              //
 221+ 7CB1              // #sec
 222+ 7CB1              // number of 512 Byte "sector" available on thie sysstem.
 223+ 7CB1              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 224+ 7CB1
 225+ 7CB1                              Constant_Def NSEC , "#SEC", 32767
 225+ 7CB1             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 225+ 7CB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ 7CB1             >
 225+ 7CB1             >                // dummy db directives used to calculate length of namec
 225+ 7CB1 23 53 45 43 >                db      "#SEC"
 225+ 7CB5             >len_NFA         defl    $ - temp_NFA
 225+ 7CB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ 7CB1             >
 225+ 7CB1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ 7CB2 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 225+ 7CB6             >                org     $-1                 // alter last byte of Name just above to set
 225+ 7CB5 C3          >                db      {b $} | END_BIT     // msb as name end
 225+ 7CB6             >
 225+ 7CB6 86 7C       >                dw      last_NFA            // Link to previous definition Name
 225+ 7CB8             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 7CB8 FE 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 225+ 7CBA             >                else
 225+ 7CBA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 225+ 7CBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 7CBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 7CBA             >
 225+ 7CBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 7CBA FF 7F       >                dw      32767
 226+ 7CBC
 227+ 7CBC              //  ______________________________________________________________________
 228+ 7CBC
 229+ 7CBC
 230+ 7CBC
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
 112  7CBC                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
   1+ 7CBC              //  ______________________________________________________________________
   2+ 7CBC              //
   3+ 7CBC              //  L3.asm
   4+ 7CBC              //
   5+ 7CBC              //  Continuation of L2.asm
   6+ 7CBC              //  I/O Block definitions
   7+ 7CBC              //  ______________________________________________________________________
   8+ 7CBC
   9+ 7CBC
  10+ 7CBC              //  ______________________________________________________________________
  11+ 7CBC              //
  12+ 7CBC              // r/w          a n f --
  13+ 7CBC              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7CBC                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7CBC             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7CBC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7CBC             >
  14+ 7CBC             >                // dummy db directives used to calculate length of namec
  14+ 7CBC 52 2F 57    >                db      "R/W"
  14+ 7CBF             >len_NFA         defl    $ - temp_NFA
  14+ 7CBF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7CBC             >
  14+ 7CBC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7CBD 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7CC0             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7CBF D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7CC0             >
  14+ 7CC0 B1 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7CC2             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7CC2 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7CC4             >                else
  14+ 7CC4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  14+ 7CC4             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7CC4             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7CC4             >
  14+ 7CC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7CC4 BE 69                        dw      TO_R                    // >r
  16+ 7CC6 5C 6A                        dw      ONE_SUBTRACT            // 1-
  17+ 7CC8 0A 6B FF 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7CCC C5 6A B8 7C                  dw      OVER, NSEC              // over #sec
  19+ 7CD0 5C 6A AB 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7CD4 39 69                        dw      OR_OP                   // or
  21+ 7CD6 45 64 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7CDA D9 70
  22+ 7CDC D2 69                        dw      R_TO                    // r>
  23+ 7CDE                                                              // if
  24+ 7CDE 7F 64                        dw      ZBRANCH
  25+ 7CE0 08 00                        dw      Read_Write_Else - $
  26+ 7CE2 4E 7C                        dw          BLK_READ            //      blk-read
  27+ 7CE4 68 64                        dw      BRANCH
  28+ 7CE6 04 00                        dw      Read_Write_Endif - $
  29+ 7CE8              Read_Write_Else:                                // else
  30+ 7CE8 70 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CEA              Read_Write_Endif:                               // endif
  32+ 7CEA 95 69                        dw      EXIT                    // ;
  33+ 7CEC
  34+ 7CEC
  35+ 7CEC              //  ______________________________________________________________________
  36+ 7CEC              //
  37+ 7CEC              // +buf        a1 -- a2 f
  38+ 7CEC              // advences to next buffer, cyclically rotating along them
  39+ 7CEC                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CEC             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CEC             >
  39+ 7CEC             >                // dummy db directives used to calculate length of namec
  39+ 7CEC 2B 42 55 46 >                db      "+BUF"
  39+ 7CF0             >len_NFA         defl    $ - temp_NFA
  39+ 7CF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CEC             >
  39+ 7CEC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CED 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CF1             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CF0 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CF1             >
  39+ 7CF1 BC 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CF3             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CF3 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CF5             >                else
  39+ 7CF5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  39+ 7CF5             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CF5             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CF5             >
  39+ 7CF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CF5 45 64 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CF9 27 6A
  41+ 7CFB 0A 6B 1C 6E                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CFF CE 6B
  42+ 7D01 6E 6F                        dw      EQUALS                  // =
  43+ 7D03                                                              // if
  44+ 7D03 7F 64                        dw      ZBRANCH
  45+ 7D05 08 00                        dw      PBuf_Endif - $
  46+ 7D07 D5 6A                        dw          DROP                //      drop
  47+ 7D09 11 6E CE 6B                  dw          FIRST, FETCH        //      first @
  48+ 7D0D              PBuf_Endif:                                     // endif
  49+ 7D0D 0A 6B CE 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7D11 CE 6B
  50+ 7D13 60 6F                        dw      SUBTRACT                // -
  51+ 7D15 95 69                        dw      EXIT                    // ;
  52+ 7D17
  53+ 7D17              //  ______________________________________________________________________
  54+ 7D17              //
  55+ 7D17              // update       --
  56+ 7D17              // mark the last used block to be written to disk
  57+ 7D17                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7D17             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7D17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7D17             >
  57+ 7D17             >                // dummy db directives used to calculate length of namec
  57+ 7D17 55 50 44 41 >                db      "UPDATE"
  57+ 7D1B 54 45       >
  57+ 7D1D             >len_NFA         defl    $ - temp_NFA
  57+ 7D1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7D17             >
  57+ 7D17 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7D18 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7D1C 54 45       >
  57+ 7D1E             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7D1D C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7D1E             >
  57+ 7D1E EC 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7D20             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7D20 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7D22             >                else
  57+ 7D22 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7D22             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7D22             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7D22             >
  57+ 7D22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7D22 CE 6E CE 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7D26 CE 6B
  59+ 7D28 45 64 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7D2C 39 69
  60+ 7D2E CE 6E CE 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7D32 DB 6B
  61+ 7D34 95 69                        dw      EXIT                    // ;
  62+ 7D36
  63+ 7D36
  64+ 7D36              //  ______________________________________________________________________
  65+ 7D36              //
  66+ 7D36              // empty-buffers --
  67+ 7D36                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7D36             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7D36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7D36             >
  67+ 7D36             >                // dummy db directives used to calculate length of namec
  67+ 7D36 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7D3A 59 2D 42 55 >
  67+ 7D3E 46 46 45 52 >
  67+ 7D42 53          >
  67+ 7D43             >len_NFA         defl    $ - temp_NFA
  67+ 7D43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7D36             >
  67+ 7D36 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7D37 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7D3B 59 2D 42 55 >
  67+ 7D3F 46 46 45 52 >
  67+ 7D43 53          >
  67+ 7D44             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D43 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D44             >
  67+ 7D44 17 7D       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D46             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D46 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D48             >                else
  67+ 7D48 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  67+ 7D48             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D48             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D48             >
  67+ 7D48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D48 11 6E CE 6B                  dw      FIRST, FETCH            // first @
  69+ 7D4C 1C 6E CE 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D50 C5 6A 60 6F                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D54 AD 73
  71+ 7D56 95 69                        dw      EXIT                    // ;
  72+ 7D58
  73+ 7D58              //  ______________________________________________________________________
  74+ 7D58              //
  75+ 7D58              // buffer       n -- a
  76+ 7D58              // read block n and gives the address to a buffer
  77+ 7D58              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D58              // disk before reading the block n.
  79+ 7D58
  80+ 7D58                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D58             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D58             >
  80+ 7D58             >                // dummy db directives used to calculate length of namec
  80+ 7D58 42 55 46 46 >                db      "BUFFER"
  80+ 7D5C 45 52       >
  80+ 7D5E             >len_NFA         defl    $ - temp_NFA
  80+ 7D5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D58             >
  80+ 7D58 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D59 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D5D 45 52       >
  80+ 7D5F             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D5E D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D5F             >
  80+ 7D5F 36 7D       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D61             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D61 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D63             >                else
  80+ 7D63 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  80+ 7D63             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D63             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D63             >
  80+ 7D63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D63 C4 6E CE 6B                  dw      USE, FETCH              // use @
  82+ 7D67 0A 6B BE 69                  dw      DUP, TO_R               // dup >r
  83+ 7D6B                                                              // begin
  84+ 7D6B              Buffer_Begin:
  85+ 7D6B F3 7C                        dw          PBUF                //      +buf
  86+ 7D6D                                                              // until
  87+ 7D6D 7F 64                        dw      ZBRANCH
  88+ 7D6F FC FF                        dw      Buffer_Begin - $
  89+ 7D71 C4 6E DB 6B                  dw      USE, STORE              // use !
  90+ 7D75 E5 69 CE 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D79 FF 69
  91+ 7D7B                                                              // if
  92+ 7D7B 7F 64                        dw      ZBRANCH
  93+ 7D7D 14 00                        dw      Buffer_Endif - $
  94+ 7D7F E5 69 78 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D83 E5 69 CE 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D87 45 64 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D8B 27 69                        dw          AND_OP              //      and
  98+ 7D8D 3A 6D C2 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D91              Buffer_Endif:                                   // endif
 100+ 7D91 E5 69 DB 6B                  dw      R_OP, STORE             // r !
 101+ 7D95 E5 69 CE 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D99 DB 6B
 102+ 7D9B D2 69 78 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D9F 95 69                        dw      EXIT                    // ;
 104+ 7DA1
 105+ 7DA1              //  ______________________________________________________________________
 106+ 7DA1              //
 107+ 7DA1              // block        n -- a
 108+ 7DA1              // Leaves the buffer address that contains the block n.
 109+ 7DA1              // If the block is not already present, it will be loaded from disk
 110+ 7DA1              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7DA1              // disk before reading the block n.
 112+ 7DA1              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7DA1
 114+ 7DA1                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7DA1             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7DA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7DA1             >
 114+ 7DA1             >                // dummy db directives used to calculate length of namec
 114+ 7DA1 42 4C 4F 43 >                db      "BLOCK"
 114+ 7DA5 4B          >
 114+ 7DA6             >len_NFA         defl    $ - temp_NFA
 114+ 7DA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7DA1             >
 114+ 7DA1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7DA2 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7DA6 4B          >
 114+ 7DA7             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7DA6 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7DA7             >
 114+ 7DA7 58 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7DA9             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7DA9 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7DAB             >                else
 114+ 7DAB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 114+ 7DAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7DAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7DAB             >
 114+ 7DAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7DAB 60 6E CE 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7DAF 27 6A BE 69                  dw      PLUS, TO_R              // + >r
 117+ 7DB3 CE 6E CE 6B                  dw      PREV, FETCH             // prev @
 118+ 7DB7 0A 6B CE 6B                  dw      DUP, FETCH              // dup @
 119+ 7DBB E5 69 60 6F                  dw      R_OP, SUBTRACT          // r -
 120+ 7DBF 0A 6B 27 6A                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7DC3                                                              // if
 122+ 7DC3 7F 64                        dw        ZBRANCH
 123+ 7DC5 34 00                        dw        Block_Endif_1 - $
 124+ 7DC7              Block_Begin:                                    //      begin
 125+ 7DC7 F3 7C EC 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7DCB                                                              //          if
 127+ 7DCB 7F 64                        dw          ZBRANCH
 128+ 7DCD 14 00                        dw          Block_Endif_2 - $
 129+ 7DCF D5 6A                        dw              DROP            //              drop
 130+ 7DD1 E5 69 61 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7DD5 0A 6B                        dw              DUP             //              dup
 132+ 7DD7 E5 69 42 6D                  dw              R_OP, ONE       //              r 1
 133+ 7DDB C2 7C                        dw              READ_WRITE      //              r/w
 134+ 7DDD 4A 6D 60 6F                  dw              TWO, SUBTRACT   //              2 -
 135+ 7DE1              Block_Endif_2:                                  //          endif
 136+ 7DE1 0A 6B CE 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DE5 E5 69
 137+ 7DE7 60 6F 0A 6B                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DEB 27 6A EC 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DEF                                                              //      until
 140+ 7DEF 7F 64                        dw        ZBRANCH
 141+ 7DF1 D6 FF                        dw        Block_Begin - $
 142+ 7DF3 0A 6B CE 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DF7 DB 6B
 143+ 7DF9              Block_Endif_1:                                  // endif
 144+ 7DF9 D2 69 D5 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DFD 78 6A
 145+ 7DFF 95 69                        dw      EXIT                    // ;
 146+ 7E01
 147+ 7E01              //  ______________________________________________________________________
 148+ 7E01              //
 149+ 7E01              // #buff        -- n
 150+ 7E01              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7E01                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7E01             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7E01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7E01             >
 151+ 7E01             >                // dummy db directives used to calculate length of namec
 151+ 7E01 23 42 55 46 >                db      "#BUFF"
 151+ 7E05 46          >
 151+ 7E06             >len_NFA         defl    $ - temp_NFA
 151+ 7E06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7E01             >
 151+ 7E01 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7E02 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7E06 46          >
 151+ 7E07             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7E06 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7E07             >
 151+ 7E07 A1 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7E09             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7E09 FE 6C       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7E0B             >                else
 151+ 7E0B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 7E0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7E0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7E0B             >
 151+ 7E0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7E0B 07 00       >                dw      7
 152+ 7E0D
 153+ 7E0D              //  ______________________________________________________________________
 154+ 7E0D              //
 155+ 7E0D              // flush        --
 156+ 7E0D                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7E0D             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7E0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7E0D             >
 156+ 7E0D             >                // dummy db directives used to calculate length of namec
 156+ 7E0D 46 4C 55 53 >                db      "FLUSH"
 156+ 7E11 48          >
 156+ 7E12             >len_NFA         defl    $ - temp_NFA
 156+ 7E12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7E0D             >
 156+ 7E0D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7E0E 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7E12 48          >
 156+ 7E13             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7E12 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7E13             >
 156+ 7E13 01 7E       >                dw      last_NFA            // Link to previous definition Name
 156+ 7E15             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7E15 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7E17             >                else
 156+ 7E17 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 7E17             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7E17             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7E17             >
 156+ 7E17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7E17 09 7E 50 6A                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7E1B 3A 6D
 158+ 7E1D              Flush_Do:                                       // do
 159+ 7E1D 07 65                        dw      C_DO
 160+ 7E1F 3A 6D 61 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7E23 D5 6A
 161+ 7E25                                                              // loop
 162+ 7E25 94 64 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7E29 EA 7B CE 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7E2D 66 68 D5 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7E31 95 69                        dw      EXIT                    // exit
 166+ 7E33
 167+ 7E33              //  ______________________________________________________________________
 168+ 7E33              //
 169+ 7E33              // f_getline    a fh -- a n
 170+ 7E33              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7E33              // Address a is left for subsequent processing
 172+ 7E33              // and n as the actual number of byte read, that is the length of line
 173+ 7E33                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7E33             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7E33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7E33             >
 173+ 7E33             >                // dummy db directives used to calculate length of namec
 173+ 7E33 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7E37 54 4C 49 4E >
 173+ 7E3B 45          >
 173+ 7E3C             >len_NFA         defl    $ - temp_NFA
 173+ 7E3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7E33             >
 173+ 7E33 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7E34 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7E38 54 4C 49 4E >
 173+ 7E3C 45          >
 173+ 7E3D             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7E3C C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7E3D             >
 173+ 7E3D 0D 7E       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E3F             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E3F BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E41             >                else
 173+ 7E41 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 7E41             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E41             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E41             >
 173+ 7E41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E41 0A 6B BE 69                  dw      DUP, TO_R               // dup >r           ( a  fh )  \  fh
 175+ 7E45 CD 67                        dw      F_FGETPOS               // f_fgetpos        ( a  d  f )  \  fh
 176+ 7E47 45 64 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( a  d  )  \  fh
 176+ 7E4B D9 70
 177+ 7E4D
 178+ 7E4D 17 6B 0A 6B                  dw      ROT, DUP, BBUF          // rot dup b/buf    ( d  a  a  512 )  \  fh
 178+ 7E51 7A 6D
 179+ 7E53 74 6B BE 73                  dw      TWO_DUP, BLANKS         // 2dup blanks      ( d  a  a  512 )  \  fh
 180+ 7E57
 181+ 7E57 82 6A                        dw      CELL_MINUS              //  cell-           ( d  a  a  510 )  \  fh
 182+ 7E59 FD 6A 50 6A                  dw      SWAP, ONE_PLUS, SWAP    // swap 1+ swap     ( d  a  a+1  510 )  \  fh
 182+ 7E5D FD 6A
 183+ 7E5F
 184+ 7E5F 5C 6A E5 69                  dw      ONE_SUBTRACT, R_OP      // 1- r             ( d  a  a+1  509  fh )  \  fh
 185+ 7E63 EB 67                        dw      F_READ                  // f_read           ( d  a  n  f )  \  fh
 186+ 7E65 45 64 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( d  a  n )  \  fh
 186+ 7E69 D9 70
 187+ 7E6B                                                              // if ( at least 1 chr was read )  \  fh
 188+ 7E6B 7F 64                        dw      ZBRANCH
 189+ 7E6D 3A 00                        dw      FGetline_Else - $
 190+ 7E6F 45 64 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( d  a   i j k )  \  fh
 190+ 7E73 F2 65
 191+ 7E75 D5 6A FD 6A                  dw          DROP, SWAP, DROP    //      drop swap drop   ( d  a  j  )  \  fh
 191+ 7E79 D5 6A
 192+ 7E7B FD 6A                        dw          SWAP                //      drop swap        ( d  j  a  )  \  fh
 193+ 7E7D 45 64 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( d  j  a   i j k )  \  fh
 193+ 7E81 F2 65
 194+ 7E83 D5 6A FD 6A                  dw          DROP, SWAP, DROP    //      drop swap drop   ( d  jnl  a  jcr  )  \  fh
 194+ 7E87 D5 6A
 195+ 7E89 17 6B B9 6F                  dw          ROT, MIN            //      rot min          ( d  a  n  )  \  fh
 196+ 7E8D 0A 6B BE 69                  dw          DUP, TO_R           //      dup >r           ( d  a  n  )    \  fh n
 197+ 7E91 62 6B D2 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( a  n  d  n  )  \  fh
 198+ 7E95 3A 6D 34 6A                  dw          ZERO, DPLUS         //      0 d+             ( a  n  d+n  )  \  fh
 199+ 7E99 D2 69 A8 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( a  n  f )
 200+ 7E9D 45 64 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( a  n  )
 200+ 7EA1 D9 70
 201+ 7EA3                                                              // else
 202+ 7EA3 68 64                        dw      BRANCH
 203+ 7EA5 0C 00                        dw      FGetline_Endif - $
 204+ 7EA7              FGetline_Else:
 205+ 7EA7 D2 69                        dw          R_TO                //      r>              ( d  a  fh  )
 206+ 7EA9 62 6B 54 6B                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( a  fh  )
 207+ 7EAD D5 6A 3A 6D                  dw          DROP, ZERO          //      drop, 0         ( a  0 )
 208+ 7EB1              FGetline_Endif:                                 // endif
 209+ 7EB1 74 6B 27 6A                  dw      TWO_DUP, PLUS, OVER     // 2dup + over          ( a  n  a+n  n )
 209+ 7EB5 C5 6A
 210+ 7EB7 7A 6D FD 6A                  dw      BBUF, SWAP, SUBTRACT    // b/buf swap -         ( a  n  a+n  512-n )
 210+ 7EBB 60 6F
 211+ 7EBD BE 73                        dw      BLANKS                  // blanks               ( a  n )
 212+ 7EBF 74 6B 27 6A                  dw      TWO_DUP, PLUS, ZERO     // 2dup + 0             ( a  n  a+n  0 )
 212+ 7EC3 3A 6D
 213+ 7EC5 FD 6A F7 6B                  dw      SWAP, CSTORE            // swap c!              ( a  n )
 214+ 7EC9 95 69                        dw      EXIT                    // ;
 215+ 7ECB
 216+ 7ECB              //  ______________________________________________________________________
 217+ 7ECB              //
 218+ 7ECB              // f_include    fh --
 219+ 7ECB              // Given a filehandle includes the source from file
 220+ 7ECB                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 220+ 7ECB             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 220+ 7ECB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 7ECB             >
 220+ 7ECB             >                // dummy db directives used to calculate length of namec
 220+ 7ECB 46 5F 49 4E >                db      "F_INCLUDE"
 220+ 7ECF 43 4C 55 44 >
 220+ 7ED3 45          >
 220+ 7ED4             >len_NFA         defl    $ - temp_NFA
 220+ 7ED4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 7ECB             >
 220+ 7ECB 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 7ECC 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 220+ 7ED0 43 4C 55 44 >
 220+ 7ED4 45          >
 220+ 7ED5             >                org     $-1                 // alter last byte of Name just above to set
 220+ 7ED4 C5          >                db      {b $} | END_BIT     // msb as name end
 220+ 7ED5             >
 220+ 7ED5 33 7E       >                dw      last_NFA            // Link to previous definition Name
 220+ 7ED7             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 7ED7 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 220+ 7ED9             >                else
 220+ 7ED9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 220+ 7ED9             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 7ED9             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 7ED9             >
 220+ 7ED9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 7ED9 39 6E CE 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 221+ 7EDD BE 69
 222+ 7EDF 42 6E CE 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 222+ 7EE3 BE 69
 223+ 7EE5 F0 6E CE 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 223+ 7EE9 BE 69
 224+ 7EEB E5 69                        dw      R_OP                    // r
 225+ 7EED                                                              // if
 226+ 7EED 7F 64                        dw      ZBRANCH
 227+ 7EEF 10 00                        dw      FInclude_Else_1 - $
 228+ 7EF1 E5 69 CD 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 229+ 7EF5 45 64 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 229+ 7EF9 D9 70
 230+ 7EFB                                                              // else
 231+ 7EFB 68 64                        dw      BRANCH
 232+ 7EFD 06 00                        dw      FInclude_Endif_1 - $
 233+ 7EFF              FInclude_Else_1:
 234+ 7EFF 3A 6D 3A 6D                  dw          ZERO, ZERO          //      0 0
 235+ 7F03                                                              // endif
 236+ 7F03              FInclude_Endif_1:
 237+ 7F03 BE 69 BE 69                  dw      TO_R, TO_R              // >r >r
 238+ 7F07 F0 6E DB 6B                  dw      SOURCE_ID, STORE        // source-id !
 239+ 7F0B              FInclude_Begin:                                 // begin
 240+ 7F0B 42 6D A9 7D                  dw          ONE, BLOCK          //      1 block
 241+ 7F0F F0 6E CE 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 242+ 7F13 3F 7E                        dw          F_GETLINE           //      f_getline
 243+ 7F15 FD 6A D5 6A                  dw          SWAP, DROP          //      swap drop
 244+ 7F19                                                              // while
 245+ 7F19 7F 64                        dw      ZBRANCH
 246+ 7F1B 16 00                        dw      FInclude_Repeat - $
 247+ 7F1D 20 7D                        dw          UPDATE              //      update
 248+ 7F1F 42 6D 39 6E                  dw          ONE, BLK, STORE     //      1 blk !
 248+ 7F23 DB 6B
 249+ 7F25 3A 6D 42 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
 249+ 7F29 DB 6B
 250+ 7F2B 96 77                        dw          INTERPRET           //      interpret
 251+ 7F2D 68 64                        dw      BRANCH
 252+ 7F2F DC FF                        dw      FInclude_Begin - $
 253+ 7F31              FInclude_Repeat:                                // repeat
 254+ 7F31 F0 6E CE 6B                  dw      SOURCE_ID, FETCH        // source-id @
 255+ 7F35 3A 6D F0 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 255+ 7F39 DB 6B
 256+ 7F3B 29 68                        dw      F_CLOSE                 // f_close
 257+ 7F3D 45 64 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 257+ 7F41 D9 70
 258+ 7F43 D2 69 D2 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 258+ 7F47 D2 69
 259+ 7F49 0A 6B F0 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 259+ 7F4D DB 6B
 260+ 7F4F                                                              // if
 261+ 7F4F 7F 64                        dw      ZBRANCH
 262+ 7F51 12 00                        dw      FInclude_Else_2 - $
 263+ 7F53 F0 6E CE 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 264+ 7F57 A8 67                        dw          F_SEEK              //      f_seek
 265+ 7F59 45 64 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 265+ 7F5D D9 70
 266+ 7F5F                                                              // else
 267+ 7F5F 68 64                        dw      BRANCH
 268+ 7F61 04 00                        dw      FInclude_Endif_2 - $
 269+ 7F63              FInclude_Else_2:
 270+ 7F63 54 6B                        dw          TWO_DROP            //      2drop
 271+ 7F65              FInclude_Endif_2:                               // endif
 272+ 7F65 D2 69 42 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 272+ 7F69 DB 6B
 273+ 7F6B D2 69 39 6E                  dw      R_TO, BLK, STORE        // r> blk !
 273+ 7F6F DB 6B
 274+ 7F71 95 69                        dw      EXIT                    // ;
 275+ 7F73
 276+ 7F73              //  ______________________________________________________________________
 277+ 7F73              //
 278+ 7F73              // include      -- cccc
 279+ 7F73              // Include the following filename
 280+ 7F73                              Colon_Def INCLUDE, "INCLUDE", is_normal
 280+ 7F73             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 280+ 7F73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 280+ 7F73             >
 280+ 7F73             >                // dummy db directives used to calculate length of namec
 280+ 7F73 49 4E 43 4C >                db      "INCLUDE"
 280+ 7F77 55 44 45    >
 280+ 7F7A             >len_NFA         defl    $ - temp_NFA
 280+ 7F7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 280+ 7F73             >
 280+ 7F73 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 280+ 7F74 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 280+ 7F78 55 44 45    >
 280+ 7F7B             >                org     $-1                 // alter last byte of Name just above to set
 280+ 7F7A C5          >                db      {b $} | END_BIT     // msb as name end
 280+ 7F7B             >
 280+ 7F7B CB 7E       >                dw      last_NFA            // Link to previous definition Name
 280+ 7F7D             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 280+ 7F7D BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 280+ 7F7F             >                else
 280+ 7F7F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 280+ 7F7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 280+ 7F7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 280+ 7F7F             >
 280+ 7F7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 281+ 7F7F 64 6D F6 73                  dw      BL, WORD, COUNT, OVER   // bl word count over
 281+ 7F83 60 72 C5 6A
 282+ 7F87 27 6A 3A 6D                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 282+ 7F8B FD 6A DB 6B
 283+ 7F8F E3 73 42 6D                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 283+ 7F93 43 68
 284+ 7F95 45 64 2B 00                  dw      LIT, 43, QERROR         // 43 ?error
 284+ 7F99 D9 70
 285+ 7F9B 0A 6B D7 7E                  dw      DUP, F_INCLUDE          // dup f_include
 286+ 7F9F 29 68 D5 6A                  dw      F_CLOSE, DROP           // f_close drop
 287+ 7FA3 95 69                        dw      EXIT                    // ;
 288+ 7FA5
 289+ 7FA5              //  ______________________________________________________________________
 290+ 7FA5              //
 291+ 7FA5              // needs
 292+ 7FA5              // check for cccc exists in vocabulary
 293+ 7FA5              // if it doesn't then  INCLUDE  inc/cccc.F
 294+ 7FA5
 295+ 7FA5              // temp filename cccc.f as counted string zero-padded
 296+ 7FA5                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 296+ 7FA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 296+ 7FA5             >
 296+ 7FA5             >                // dummy db directives used to calculate length of namec
 296+ 7FA5 4E 45 45 44 >                db      "NEEDS-W"
 296+ 7FA9 53 2D 57    >
 296+ 7FAC             >len_NFA         defl    $ - temp_NFA
 296+ 7FAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 296+ 7FA5             >
 296+ 7FA5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 296+ 7FA6 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 296+ 7FAA 53 2D 57    >
 296+ 7FAD             >                org     $-1                 // alter last byte of Name just above to set
 296+ 7FAC D7          >                db      {b $} | END_BIT     // msb as name end
 296+ 7FAD             >
 296+ 7FAD 73 7F       >                dw      last_NFA            // Link to previous definition Name
 296+ 7FAF             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 296+ 7FAF A9 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 296+ 7FB1             >                else
 296+ 7FB1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 296+ 7FB1             >                endif           ; ok        // for other definitions it "points" the correct handler
 296+ 7FB1             >                // Use of "; ok" to suppress "warning[fwdref]"
 296+ 7FB1             >
 296+ 7FB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 297+ 7FB1 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 298+ 7FD4              // temp complete path+filename
 299+ 7FD4                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 299+ 7FD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 299+ 7FD4             >
 299+ 7FD4             >                // dummy db directives used to calculate length of namec
 299+ 7FD4 4E 45 45 44 >                db      "NEEDS-FN"
 299+ 7FD8 53 2D 46 4E >
 299+ 7FDC             >len_NFA         defl    $ - temp_NFA
 299+ 7FDC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 299+ 7FD4             >
 299+ 7FD4 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 299+ 7FD5 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 299+ 7FD9 53 2D 46 4E >
 299+ 7FDD             >                org     $-1                 // alter last byte of Name just above to set
 299+ 7FDC CE          >                db      {b $} | END_BIT     // msb as name end
 299+ 7FDD             >
 299+ 7FDD A5 7F       >                dw      last_NFA            // Link to previous definition Name
 299+ 7FDF             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 299+ 7FDF A9 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 299+ 7FE1             >                else
 299+ 7FE1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 299+ 7FE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 299+ 7FE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 299+ 7FE1             >
 299+ 7FE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 300+ 7FE1 00 00 00...                  ds      40
 301+ 8009              // constant path
 302+ 8009                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 302+ 8009             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 302+ 8009             >
 302+ 8009             >                // dummy db directives used to calculate length of namec
 302+ 8009 4E 45 45 44 >                db      "NEEDS-INC"
 302+ 800D 53 2D 49 4E >
 302+ 8011 43          >
 302+ 8012             >len_NFA         defl    $ - temp_NFA
 302+ 8012             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 302+ 8009             >
 302+ 8009 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 302+ 800A 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 302+ 800E 53 2D 49 4E >
 302+ 8012 43          >
 302+ 8013             >                org     $-1                 // alter last byte of Name just above to set
 302+ 8012 C3          >                db      {b $} | END_BIT     // msb as name end
 302+ 8013             >
 302+ 8013 D4 7F       >                dw      last_NFA            // Link to previous definition Name
 302+ 8015             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 302+ 8015 A9 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 302+ 8017             >                else
 302+ 8017 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 302+ 8017             >                endif           ; ok        // for other definitions it "points" the correct handler
 302+ 8017             >                // Use of "; ok" to suppress "warning[fwdref]"
 302+ 8017             >
 302+ 8017             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 303+ 8017 04 69 6E 63                  db      4, "inc/", 0
 303+ 801B 2F 00
 304+ 801D
 305+ 801D              // Concatenate path at a and filename and include it
 306+ 801D              // No error is issued if filename doesn't exist.
 307+ 801D                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 307+ 801D             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 307+ 801D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 307+ 801D             >
 307+ 801D             >                // dummy db directives used to calculate length of namec
 307+ 801D 4E 45 45 44 >                db      "NEEDS/"
 307+ 8021 53 2F       >
 307+ 8023             >len_NFA         defl    $ - temp_NFA
 307+ 8023             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 307+ 801D             >
 307+ 801D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 307+ 801E 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 307+ 8022 53 2F       >
 307+ 8024             >                org     $-1                 // alter last byte of Name just above to set
 307+ 8023 AF          >                db      {b $} | END_BIT     // msb as name end
 307+ 8024             >
 307+ 8024 09 80       >                dw      last_NFA            // Link to previous definition Name
 307+ 8026             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 307+ 8026 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 307+ 8028             >                else
 307+ 8028 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 307+ 8028             >                endif           ; ok        // for other definitions it "points" the correct handler
 307+ 8028             >                // Use of "; ok" to suppress "warning[fwdref]"
 307+ 8028             >
 307+ 8028             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 308+ 8028 60 72 ED 6A                  dw      COUNT, TUCK             // n a n
 309+ 802C DF 7F FD 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 309+ 8030 8B 68
 310+ 8032 DF 7F 27 6A                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 311+ 8036 AF 7F 50 6A                  dw      NEEDS_W, ONE_PLUS, SWAP
 311+ 803A FD 6A
 312+ 803C 45 64 23 00                  dw      LIT, 35
 313+ 8040 8B 68                        dw      CMOVE
 314+ 8042 DF 7F                        dw      NEEDS_FN
 315+ 8044 E3 73 42 6D                  dw      PAD, ONE, F_OPEN
 315+ 8048 43 68
 316+ 804A 7F 64                        dw      ZBRANCH
 317+ 804C 16 00                        dw      Needs_1 - $
 318+ 804E AF 7F 60 72                  dw          NEEDS_W, COUNT, TYPE, SPACE
 318+ 8052 73 72 1D 70
 319+ 8056 45 64 2B 00                  dw          LIT, 43, MESSAGE, DROP
 319+ 805A 9C 7A D5 6A
 320+ 805E 68 64                        dw      BRANCH
 321+ 8060 04 00                        dw      Needs_2 - $
 322+ 8062              Needs_1:
 323+ 8062 D7 7E                        dw          F_INCLUDE
 324+ 8064              Needs_2:
 325+ 8064 95 69                        dw      EXIT                    // ;
 326+ 8066
 327+ 8066
 328+ 8066              // Replace illegal character in filename with tilde ~
 329+ 8066              // at the moment we need only  "
 330+ 8066                              Colon_Def NEEDS_CHECK, "NEEDS-CHECK", is_normal
 330+ 8066             >                New_Def  NEEDS_CHECK, "NEEDS-CHECK", Enter_Ptr, is_normal ; ok
 330+ 8066             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 330+ 8066             >
 330+ 8066             >                // dummy db directives used to calculate length of namec
 330+ 8066 4E 45 45 44 >                db      "NEEDS-CHECK"
 330+ 806A 53 2D 43 48 >
 330+ 806E 45 43 4B    >
 330+ 8071             >len_NFA         defl    $ - temp_NFA
 330+ 8071             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 330+ 8066             >
 330+ 8066 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 330+ 8067 4E 45 45 44 >                db      "NEEDS-CHECK"               // name string in 7-bit ascii, but
 330+ 806B 53 2D 43 48 >
 330+ 806F 45 43 4B    >
 330+ 8072             >                org     $-1                 // alter last byte of Name just above to set
 330+ 8071 CB          >                db      {b $} | END_BIT     // msb as name end
 330+ 8072             >
 330+ 8072 1D 80       >                dw      last_NFA            // Link to previous definition Name
 330+ 8074             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 330+ 8074 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 330+ 8076             >                else
 330+ 8076 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 330+ 8076             >                endif           ; ok        // for other definitions it "points" the correct handler
 330+ 8076             >                // Use of "; ok" to suppress "warning[fwdref]"
 330+ 8076             >
 330+ 8076             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 331+ 8076 AF 7F 60 72                  dw      NEEDS_W, COUNT, OVER
 331+ 807A C5 6A
 332+ 807C 27 6A FD 6A                  dw      PLUS, SWAP
 333+ 8080 07 65                        dw      C_DO
 334+ 8082              Needs_3:
 335+ 8082 12 65 E9 6B                  dw          I, CFETCH
 336+ 8086 45 64 22 00                  dw          LIT, 34, EQUALS
 336+ 808A 6E 6F
 337+ 808C 7F 64                        dw          ZBRANCH
 338+ 808E 0A 00                        dw          Needs_4 - $
 339+ 8090 45 64 7E 00                  dw              LIT, 126, I, CSTORE
 339+ 8094 12 65 F7 6B
 340+ 8098              Needs_4:
 341+ 8098 94 64                        dw      C_LOOP
 342+ 809A E8 FF                        dw      Needs_3 - $
 343+ 809C 95 69                        dw      EXIT
 344+ 809E
 345+ 809E
 346+ 809E              // include  "path/cccc.f" if cccc is not defined
 347+ 809E              // filename cccc.f is temporary stored at NEEDS-W
 348+ 809E                              Colon_Def NEEDS_PATH, "NEEDS-PATH", is_normal
 348+ 809E             >                New_Def  NEEDS_PATH, "NEEDS-PATH", Enter_Ptr, is_normal ; ok
 348+ 809E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 348+ 809E             >
 348+ 809E             >                // dummy db directives used to calculate length of namec
 348+ 809E 4E 45 45 44 >                db      "NEEDS-PATH"
 348+ 80A2 53 2D 50 41 >
 348+ 80A6 54 48       >
 348+ 80A8             >len_NFA         defl    $ - temp_NFA
 348+ 80A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 348+ 809E             >
 348+ 809E 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 348+ 809F 4E 45 45 44 >                db      "NEEDS-PATH"               // name string in 7-bit ascii, but
 348+ 80A3 53 2D 50 41 >
 348+ 80A7 54 48       >
 348+ 80A9             >                org     $-1                 // alter last byte of Name just above to set
 348+ 80A8 C8          >                db      {b $} | END_BIT     // msb as name end
 348+ 80A9             >
 348+ 80A9 66 80       >                dw      last_NFA            // Link to previous definition Name
 348+ 80AB             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 348+ 80AB BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 348+ 80AD             >                else
 348+ 80AD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 348+ 80AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 348+ 80AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 348+ 80AD             >
 348+ 80AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 349+ 80AD A8 75 EC 69                  dw      LFIND, ZEQUAL
 350+ 80B1 7F 64                        dw      ZBRANCH
 351+ 80B3 2E 00                        dw      Needs_5 - $
 352+ 80B5 AF 7F                        dw          NEEDS_W
 353+ 80B7 45 64 23 00                  dw          LIT, 35
 354+ 80BB AD 73                        dw          ERASE                   // a
 355+ 80BD 0C 6F E9 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 355+ 80C1 50 6A
 356+ 80C3 0C 6F C5 6A                  dw          HERE, OVER              // a n here n
 357+ 80C7 AF 7F FD 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 357+ 80CB 8B 68
 358+ 80CD 74 80                        dw          NEEDS_CHECK
 359+ 80CF AF 7F 27 6A                  dw          NEEDS_W, PLUS           // a a1+1
 360+ 80D3 45 64 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 361+ 80D7 FD 6A DB 6B                  dw          SWAP, STORE             // a
 362+ 80DB 26 80                        dw          NEEDS_SLASH
 363+ 80DD 68 64                        dw      BRANCH
 364+ 80DF 06 00                        dw      Needs_6 - $
 365+ 80E1              Needs_5:
 366+ 80E1 D5 6A 54 6B                  dw          DROP, TWO_DROP
 367+ 80E5              Needs_6:
 368+ 80E5 95 69                        dw      EXIT
 369+ 80E7
 370+ 80E7
 371+ 80E7              // check for cccc exists in vocabulary
 372+ 80E7              // if it doesn't then  INCLUDE  inc/cccc.F
 373+ 80E7              // search in inc subdirectory
 374+ 80E7                              Colon_Def NEEDS, "NEEDS", is_normal
 374+ 80E7             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 374+ 80E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ 80E7             >
 374+ 80E7             >                // dummy db directives used to calculate length of namec
 374+ 80E7 4E 45 45 44 >                db      "NEEDS"
 374+ 80EB 53          >
 374+ 80EC             >len_NFA         defl    $ - temp_NFA
 374+ 80EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ 80E7             >
 374+ 80E7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ 80E8 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 374+ 80EC 53          >
 374+ 80ED             >                org     $-1                 // alter last byte of Name just above to set
 374+ 80EC D3          >                db      {b $} | END_BIT     // msb as name end
 374+ 80ED             >
 374+ 80ED 9E 80       >                dw      last_NFA            // Link to previous definition Name
 374+ 80EF             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 80EF BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 80F1             >                else
 374+ 80F1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 374+ 80F1             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 80F1             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 80F1             >
 374+ 80F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 80F1 15 80 AB 80                  dw      NEEDS_INC, NEEDS_PATH
 376+ 80F5 95 69                        dw      EXIT
 377+ 80F7
 378+ 80F7
 379+ 80F7              //  ______________________________________________________________________
 380+ 80F7              //
 381+ 80F7              // load+        n --
 382+ 80F7                              Colon_Def LOAD_P, "LOAD+", is_normal
 382+ 80F7             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 382+ 80F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 382+ 80F7             >
 382+ 80F7             >                // dummy db directives used to calculate length of namec
 382+ 80F7 4C 4F 41 44 >                db      "LOAD+"
 382+ 80FB 2B          >
 382+ 80FC             >len_NFA         defl    $ - temp_NFA
 382+ 80FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 382+ 80F7             >
 382+ 80F7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 382+ 80F8 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 382+ 80FC 2B          >
 382+ 80FD             >                org     $-1                 // alter last byte of Name just above to set
 382+ 80FC AB          >                db      {b $} | END_BIT     // msb as name end
 382+ 80FD             >
 382+ 80FD E7 80       >                dw      last_NFA            // Link to previous definition Name
 382+ 80FF             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 382+ 80FF BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 382+ 8101             >                else
 382+ 8101 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 382+ 8101             >                endif           ; ok        // for other definitions it "points" the correct handler
 382+ 8101             >                // Use of "; ok" to suppress "warning[fwdref]"
 382+ 8101             >
 382+ 8101             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 383+ 8101 39 6E CE 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 383+ 8105 BE 69
 384+ 8107 42 6E CE 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 384+ 810B BE 69
 385+ 810D
 386+ 810D 3A 6D 42 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 386+ 8111 DB 6B
 387+ 8113 86 6D E1 79                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 387+ 8117 39 6E DB 6B
 388+ 811B 96 77                        dw      INTERPRET               // interpret
 389+ 811D
 390+ 811D D2 69 42 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 390+ 8121 DB 6B
 391+ 8123 D2 69 39 6E                  dw      R_TO, BLK, STORE        // r> blk !
 391+ 8127 DB 6B
 392+ 8129 95 69                        dw      EXIT                    // ;
 393+ 812B
 394+ 812B              //  ______________________________________________________________________
 395+ 812B              //
 396+ 812B              // -->          --
 397+ 812B                              Colon_Def LOAD_NEXT, "-->", is_immediate
 397+ 812B             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 397+ 812B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 397+ 812B             >
 397+ 812B             >                // dummy db directives used to calculate length of namec
 397+ 812B 2D 2D 3E    >                db      "-->"
 397+ 812E             >len_NFA         defl    $ - temp_NFA
 397+ 812E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 397+ 812B             >
 397+ 812B C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 397+ 812C 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 397+ 812F             >                org     $-1                 // alter last byte of Name just above to set
 397+ 812E BE          >                db      {b $} | END_BIT     // msb as name end
 397+ 812F             >
 397+ 812F F7 80       >                dw      last_NFA            // Link to previous definition Name
 397+ 8131             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 397+ 8131 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 397+ 8133             >                else
 397+ 8133 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 397+ 8133             >                endif           ; ok        // for other definitions it "points" the correct handler
 397+ 8133             >                // Use of "; ok" to suppress "warning[fwdref]"
 397+ 8133             >
 397+ 8133             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 398+ 8133 52 71                        dw      QLOADING                // ?loading
 399+ 8135 3A 6D 42 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 399+ 8139 DB 6B
 400+ 813B 86 6D                        dw      BSCR                    // b/scr
 401+ 813D 39 6E CE 6B                  dw      BLK, FETCH              // blk @
 402+ 8141 C5 6A                        dw      OVER                    // over
 403+ 8143 10 7A                        dw      MOD                     // mod
 404+ 8145 60 6F                        dw      SUBTRACT                // -
 405+ 8147 39 6E AB 6B                  dw      BLK, PLUSSTORE          // +!
 406+ 814B 95 69                        dw      EXIT                    // ;
 407+ 814D
 408+ 814D              //  ______________________________________________________________________
 409+ 814D              //
 410+ 814D              // '            -- xt
 411+ 814D                              Colon_Def TICK, "'", is_normal
 411+ 814D             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 411+ 814D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 814D             >
 411+ 814D             >                // dummy db directives used to calculate length of namec
 411+ 814D 27          >                db      "'"
 411+ 814E             >len_NFA         defl    $ - temp_NFA
 411+ 814E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 814D             >
 411+ 814D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 814E 27          >                db      "'"               // name string in 7-bit ascii, but
 411+ 814F             >                org     $-1                 // alter last byte of Name just above to set
 411+ 814E A7          >                db      {b $} | END_BIT     // msb as name end
 411+ 814F             >
 411+ 814F 2B 81       >                dw      last_NFA            // Link to previous definition Name
 411+ 8151             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 8151 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 8153             >                else
 411+ 8153 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 411+ 8153             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 8153             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 8153             >
 411+ 8153             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 8153 A8 75                        dw      LFIND                   // -find
 413+ 8155 EC 69                        dw      ZEQUAL                  // 0=
 414+ 8157 3A 6D D9 70                  dw      ZERO, QERROR            // 0 ?error
 415+ 815B D5 6A                        dw      DROP                    // drop
 416+ 815D 95 69                        dw      EXIT                    // ;
 417+ 815F
 418+ 815F              //  ______________________________________________________________________
 419+ 815F              //
 420+ 815F              // forget       -- cccc
 421+ 815F                              Colon_Def FORGET, "FORGET", is_normal
 421+ 815F             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 421+ 815F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 815F             >
 421+ 815F             >                // dummy db directives used to calculate length of namec
 421+ 815F 46 4F 52 47 >                db      "FORGET"
 421+ 8163 45 54       >
 421+ 8165             >len_NFA         defl    $ - temp_NFA
 421+ 8165             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 815F             >
 421+ 815F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 8160 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 421+ 8164 45 54       >
 421+ 8166             >                org     $-1                 // alter last byte of Name just above to set
 421+ 8165 D4          >                db      {b $} | END_BIT     // msb as name end
 421+ 8166             >
 421+ 8166 4D 81       >                dw      last_NFA            // Link to previous definition Name
 421+ 8168             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 8168 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 421+ 816A             >                else
 421+ 816A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 421+ 816A             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 816A             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 816A             >
 421+ 816A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 816A 7A 6E CE 6B                  dw      CURRENT, FETCH          // current @
 423+ 816E 6D 6E CE 6B                  dw      CONTEXT, FETCH          // context @
 424+ 8172 60 6F 45 64                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 424+ 8176 17 00 D9 70
 425+ 817A 51 81 A9 70                  dw      TICK, TO_BODY           // ' >body
 426+ 817E 0A 6B F0 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 426+ 8182 CE 6B
 427+ 8184 7B 6F 45 64                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 427+ 8188 15 00 D9 70
 428+ 818C 0A 6B 7F 70                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 428+ 8190 F8 6D DB 6B
 429+ 8194 65 70 CE 6B                  dw      LFA, FETCH              // lfa @
 430+ 8198 6D 6E CE 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 430+ 819C DB 6B
 431+ 819E 95 69                        dw      EXIT                    // ;
 432+ 81A0
 433+ 81A0              //  ______________________________________________________________________
 434+ 81A0              //
 435+ 81A0              // marker       -- cccc
 436+ 81A0                              Colon_Def MARKER, "MARKER", is_immediate
 436+ 81A0             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 436+ 81A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 436+ 81A0             >
 436+ 81A0             >                // dummy db directives used to calculate length of namec
 436+ 81A0 4D 41 52 4B >                db      "MARKER"
 436+ 81A4 45 52       >
 436+ 81A6             >len_NFA         defl    $ - temp_NFA
 436+ 81A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 436+ 81A0             >
 436+ 81A0 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 436+ 81A1 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 436+ 81A5 45 52       >
 436+ 81A7             >                org     $-1                 // alter last byte of Name just above to set
 436+ 81A6 D2          >                db      {b $} | END_BIT     // msb as name end
 436+ 81A7             >
 436+ 81A7 5F 81       >                dw      last_NFA            // Link to previous definition Name
 436+ 81A9             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 436+ 81A9 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 436+ 81AB             >                else
 436+ 81AB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 436+ 81AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 436+ 81AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 436+ 81AB             >
 436+ 81AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 437+ 81AB 29 72                        dw      CBUILDS
 438+ 81AD 06 6E CE 6B                  dw      VOC_LINK, FETCH, COMMA
 438+ 81B1 28 6F
 439+ 81B3 7A 6E CE 6B                  dw      CURRENT, FETCH, COMMA
 439+ 81B7 28 6F
 440+ 81B9 6D 6E CE 6B                  dw      CONTEXT, FETCH, COMMA
 440+ 81BD 28 6F
 441+ 81BF 55 70 28 6F                  dw      LATEST, COMMA
 442+ 81C3 55 70 93 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 442+ 81C7 65 70 CE 6B
 442+ 81CB 28 6F
 443+ 81CD 39 72                        dw      DOES_TO
 444+ 81CF 0A 6B CE 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 444+ 81D3 06 6E DB 6B
 444+ 81D7 78 6A
 445+ 81D9 0A 6B CE 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 445+ 81DD 7A 6E DB 6B
 445+ 81E1 78 6A
 446+ 81E3 0A 6B CE 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 446+ 81E7 6D 6E DB 6B
 446+ 81EB 78 6A
 447+ 81ED 0A 6B CE 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 447+ 81F1 F8 6D DB 6B
 447+ 81F5 78 6A
 448+ 81F7 CE 6B 7A 6E                  dw           FETCH, CURRENT, FETCH, STORE
 448+ 81FB CE 6B DB 6B
 449+ 81FF 95 69                        dw      EXIT
 450+ 8201
 451+ 8201              //  ______________________________________________________________________
 452+ 8201              //
 453+ 8201              // spaces       n --
 454+ 8201                              Colon_Def SPACES, "SPACES", is_normal
 454+ 8201             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 454+ 8201             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 454+ 8201             >
 454+ 8201             >                // dummy db directives used to calculate length of namec
 454+ 8201 53 50 41 43 >                db      "SPACES"
 454+ 8205 45 53       >
 454+ 8207             >len_NFA         defl    $ - temp_NFA
 454+ 8207             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 454+ 8201             >
 454+ 8201 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 454+ 8202 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 454+ 8206 45 53       >
 454+ 8208             >                org     $-1                 // alter last byte of Name just above to set
 454+ 8207 D3          >                db      {b $} | END_BIT     // msb as name end
 454+ 8208             >
 454+ 8208 A0 81       >                dw      last_NFA            // Link to previous definition Name
 454+ 820A             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 454+ 820A BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 454+ 820C             >                else
 454+ 820C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 454+ 820C             >                endif           ; ok        // for other definitions it "points" the correct handler
 454+ 820C             >                // Use of "; ok" to suppress "warning[fwdref]"
 454+ 820C             >
 454+ 820C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 455+ 820C 3A 6D CF 6F                  dw      ZERO, MAX
 456+ 8210 3A 6D D9 64                  dw      ZERO, C_Q_DO
 457+ 8214 08 00                        dw      Spaces_Leave - $
 458+ 8216              Spaces_Loop:
 459+ 8216 1D 70                        dw          SPACE
 460+ 8218 94 64                        dw      C_LOOP
 461+ 821A FC FF                        dw      Spaces_Loop - $
 462+ 821C              Spaces_Leave:
 463+ 821C 95 69                        dw      EXIT                    // ;
 464+ 821E
 465+ 821E              //  ______________________________________________________________________
 466+ 821E              //
 467+ 821E              // <#           --
 468+ 821E                              Colon_Def BEGIN_DASH, "<#", is_normal
 468+ 821E             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 468+ 821E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 468+ 821E             >
 468+ 821E             >                // dummy db directives used to calculate length of namec
 468+ 821E 3C 23       >                db      "<#"
 468+ 8220             >len_NFA         defl    $ - temp_NFA
 468+ 8220             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 468+ 821E             >
 468+ 821E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 468+ 821F 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 468+ 8221             >                org     $-1                 // alter last byte of Name just above to set
 468+ 8220 A3          >                db      {b $} | END_BIT     // msb as name end
 468+ 8221             >
 468+ 8221 01 82       >                dw      last_NFA            // Link to previous definition Name
 468+ 8223             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 468+ 8223 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 468+ 8225             >                else
 468+ 8225 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 468+ 8225             >                endif           ; ok        // for other definitions it "points" the correct handler
 468+ 8225             >                // Use of "; ok" to suppress "warning[fwdref]"
 468+ 8225             >
 468+ 8225             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 469+ 8225 E3 73 BB 6E                  dw      PAD, HLD, STORE
 469+ 8229 DB 6B
 470+ 822B 95 69                        dw      EXIT
 471+ 822D
 472+ 822D              //  ______________________________________________________________________
 473+ 822D              //
 474+ 822D              // #>           --
 475+ 822D                              Colon_Def DASH_END, "#>", is_normal
 475+ 822D             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 475+ 822D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 475+ 822D             >
 475+ 822D             >                // dummy db directives used to calculate length of namec
 475+ 822D 23 3E       >                db      "#>"
 475+ 822F             >len_NFA         defl    $ - temp_NFA
 475+ 822F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 475+ 822D             >
 475+ 822D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 475+ 822E 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 475+ 8230             >                org     $-1                 // alter last byte of Name just above to set
 475+ 822F BE          >                db      {b $} | END_BIT     // msb as name end
 475+ 8230             >
 475+ 8230 1E 82       >                dw      last_NFA            // Link to previous definition Name
 475+ 8232             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 475+ 8232 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 475+ 8234             >                else
 475+ 8234 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 475+ 8234             >                endif           ; ok        // for other definitions it "points" the correct handler
 475+ 8234             >                // Use of "; ok" to suppress "warning[fwdref]"
 475+ 8234             >
 475+ 8234             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 476+ 8234 54 6B                        dw      TWO_DROP
 477+ 8236 BB 6E CE 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 477+ 823A E3 73 C5 6A
 477+ 823E 60 6F
 478+ 8240 95 69                        dw      EXIT
 479+ 8242
 480+ 8242              //  ______________________________________________________________________
 481+ 8242              //
 482+ 8242              // sign         n d -- d
 483+ 8242                              Colon_Def SIGN, "SIGN", is_normal
 483+ 8242             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 483+ 8242             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 483+ 8242             >
 483+ 8242             >                // dummy db directives used to calculate length of namec
 483+ 8242 53 49 47 4E >                db      "SIGN"
 483+ 8246             >len_NFA         defl    $ - temp_NFA
 483+ 8246             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 483+ 8242             >
 483+ 8242 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 483+ 8243 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 483+ 8247             >                org     $-1                 // alter last byte of Name just above to set
 483+ 8246 CE          >                db      {b $} | END_BIT     // msb as name end
 483+ 8247             >
 483+ 8247 2D 82       >                dw      last_NFA            // Link to previous definition Name
 483+ 8249             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 483+ 8249 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 483+ 824B             >                else
 483+ 824B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 483+ 824B             >                endif           ; ok        // for other definitions it "points" the correct handler
 483+ 824B             >                // Use of "; ok" to suppress "warning[fwdref]"
 483+ 824B             >
 483+ 824B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 484+ 824B 17 6B FF 69                  dw      ROT, ZLESS
 485+ 824F 7F 64                        dw      ZBRANCH
 486+ 8251 08 00                        dw      Sign_Endif - $
 487+ 8253 45 64 2D 00                  dw          LIT, 45, HOLD
 487+ 8257 CD 73
 488+ 8259              Sign_Endif:
 489+ 8259 95 69                        dw      EXIT
 490+ 825B
 491+ 825B              //  ______________________________________________________________________
 492+ 825B              //
 493+ 825B              // #           d1 -- d2
 494+ 825B                              Colon_Def DASH, "#", is_normal
 494+ 825B             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 494+ 825B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 494+ 825B             >
 494+ 825B             >                // dummy db directives used to calculate length of namec
 494+ 825B 23          >                db      "#"
 494+ 825C             >len_NFA         defl    $ - temp_NFA
 494+ 825C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 494+ 825B             >
 494+ 825B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 494+ 825C 23          >                db      "#"               // name string in 7-bit ascii, but
 494+ 825D             >                org     $-1                 // alter last byte of Name just above to set
 494+ 825C A3          >                db      {b $} | END_BIT     // msb as name end
 494+ 825D             >
 494+ 825D 42 82       >                dw      last_NFA            // Link to previous definition Name
 494+ 825F             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 494+ 825F BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 494+ 8261             >                else
 494+ 8261 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 494+ 8261             >                endif           ; ok        // for other definitions it "points" the correct handler
 494+ 8261             >                // Use of "; ok" to suppress "warning[fwdref]"
 494+ 8261             >
 494+ 8261             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 495+ 8261 8F 6E CE 6B                  dw      BASE, FETCH, MDIV_MOD, ROT
 495+ 8265 43 7A 17 6B
 496+ 8269 45 64 09 00                  dw      LIT, 9, OVER, LESS
 496+ 826D C5 6A 8F 6F
 497+ 8271 7F 64                        dw      ZBRANCH
 498+ 8273 08 00                        dw      Dash_Endif - $
 499+ 8275 45 64 07 00                  dw          LIT, 7, PLUS
 499+ 8279 27 6A
 500+ 827B              Dash_Endif:
 501+ 827B
 502+ 827B 45 64 30 00                  dw      LIT, 48, PLUS, HOLD
 502+ 827F 27 6A CD 73
 503+ 8283 95 69                        dw      EXIT
 504+ 8285
 505+ 8285              //  ______________________________________________________________________
 506+ 8285              //
 507+ 8285              // #s           d1 -- d2
 508+ 8285                              Colon_Def DASHES, "#S", is_normal
 508+ 8285             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 508+ 8285             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 508+ 8285             >
 508+ 8285             >                // dummy db directives used to calculate length of namec
 508+ 8285 23 53       >                db      "#S"
 508+ 8287             >len_NFA         defl    $ - temp_NFA
 508+ 8287             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 508+ 8285             >
 508+ 8285 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 508+ 8286 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 508+ 8288             >                org     $-1                 // alter last byte of Name just above to set
 508+ 8287 D3          >                db      {b $} | END_BIT     // msb as name end
 508+ 8288             >
 508+ 8288 5B 82       >                dw      last_NFA            // Link to previous definition Name
 508+ 828A             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 508+ 828A BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 508+ 828C             >                else
 508+ 828C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 508+ 828C             >                endif           ; ok        // for other definitions it "points" the correct handler
 508+ 828C             >                // Use of "; ok" to suppress "warning[fwdref]"
 508+ 828C             >
 508+ 828C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 509+ 828C              Dashes_Begin:
 510+ 828C 5F 82 74 6B                  dw      DASH, TWO_DUP
 511+ 8290 39 69 EC 69                  dw          OR_OP, ZEQUAL
 512+ 8294 7F 64                        dw      ZBRANCH
 513+ 8296 F6 FF                        dw      Dashes_Begin - $
 514+ 8298 95 69                        dw      EXIT
 515+ 829A
 516+ 829A              //  ______________________________________________________________________
 517+ 829A              //
 518+ 829A              // d.r          d n --
 519+ 829A                              Colon_Def D_DOT_R, "D.R", is_normal
 519+ 829A             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 519+ 829A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 519+ 829A             >
 519+ 829A             >                // dummy db directives used to calculate length of namec
 519+ 829A 44 2E 52    >                db      "D.R"
 519+ 829D             >len_NFA         defl    $ - temp_NFA
 519+ 829D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 519+ 829A             >
 519+ 829A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 519+ 829B 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 519+ 829E             >                org     $-1                 // alter last byte of Name just above to set
 519+ 829D D2          >                db      {b $} | END_BIT     // msb as name end
 519+ 829E             >
 519+ 829E 85 82       >                dw      last_NFA            // Link to previous definition Name
 519+ 82A0             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 519+ 82A0 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 519+ 82A2             >                else
 519+ 82A2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 519+ 82A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 519+ 82A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 519+ 82A2             >
 519+ 82A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 520+ 82A2 BE 69                        dw      TO_R
 521+ 82A4 FD 6A C5 6A                  dw      SWAP, OVER, DABS
 521+ 82A8 93 79
 522+ 82AA 23 82 8A 82                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 522+ 82AE 49 82 32 82
 523+ 82B2 D2 69                        dw      R_TO
 524+ 82B4 C5 6A 60 6F                  dw      OVER, SUBTRACT, SPACES, TYPE
 524+ 82B8 0A 82 73 72
 525+ 82BC 95 69                        dw      EXIT
 526+ 82BE
 527+ 82BE              //  ______________________________________________________________________
 528+ 82BE              //
 529+ 82BE              // .r           n1 n2 --
 530+ 82BE                              Colon_Def DOT_R, ".R", is_normal
 530+ 82BE             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 530+ 82BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 530+ 82BE             >
 530+ 82BE             >                // dummy db directives used to calculate length of namec
 530+ 82BE 2E 52       >                db      ".R"
 530+ 82C0             >len_NFA         defl    $ - temp_NFA
 530+ 82C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 530+ 82BE             >
 530+ 82BE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 530+ 82BF 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 530+ 82C1             >                org     $-1                 // alter last byte of Name just above to set
 530+ 82C0 D2          >                db      {b $} | END_BIT     // msb as name end
 530+ 82C1             >
 530+ 82C1 9A 82       >                dw      last_NFA            // Link to previous definition Name
 530+ 82C3             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 530+ 82C3 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 530+ 82C5             >                else
 530+ 82C5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 530+ 82C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 530+ 82C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 530+ 82C5             >
 530+ 82C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 82C5 BE 69                        dw      TO_R
 532+ 82C7 4C 6F D2 69                  dw      S_TO_D, R_TO
 533+ 82CB A0 82                        dw      D_DOT_R
 534+ 82CD 95 69                        dw      EXIT
 535+ 82CF
 536+ 82CF              //  ______________________________________________________________________
 537+ 82CF              //
 538+ 82CF              // d.           d --
 539+ 82CF                              Colon_Def D_DOT, "D.", is_normal
 539+ 82CF             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 539+ 82CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 539+ 82CF             >
 539+ 82CF             >                // dummy db directives used to calculate length of namec
 539+ 82CF 44 2E       >                db      "D."
 539+ 82D1             >len_NFA         defl    $ - temp_NFA
 539+ 82D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 539+ 82CF             >
 539+ 82CF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 539+ 82D0 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 539+ 82D2             >                org     $-1                 // alter last byte of Name just above to set
 539+ 82D1 AE          >                db      {b $} | END_BIT     // msb as name end
 539+ 82D2             >
 539+ 82D2 BE 82       >                dw      last_NFA            // Link to previous definition Name
 539+ 82D4             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 539+ 82D4 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 539+ 82D6             >                else
 539+ 82D6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 539+ 82D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 539+ 82D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 539+ 82D6             >
 539+ 82D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 540+ 82D6 3A 6D A0 82                  dw      ZERO, D_DOT_R, SPACE
 540+ 82DA 1D 70
 541+ 82DC 95 69                        dw      EXIT
 542+ 82DE
 543+ 82DE              //  ______________________________________________________________________
 544+ 82DE              //
 545+ 82DE              // .            n --
 546+ 82DE                              Colon_Def DOT, ".", is_normal
 546+ 82DE             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 546+ 82DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 546+ 82DE             >
 546+ 82DE             >                // dummy db directives used to calculate length of namec
 546+ 82DE 2E          >                db      "."
 546+ 82DF             >len_NFA         defl    $ - temp_NFA
 546+ 82DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 546+ 82DE             >
 546+ 82DE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 546+ 82DF 2E          >                db      "."               // name string in 7-bit ascii, but
 546+ 82E0             >                org     $-1                 // alter last byte of Name just above to set
 546+ 82DF AE          >                db      {b $} | END_BIT     // msb as name end
 546+ 82E0             >
 546+ 82E0 CF 82       >                dw      last_NFA            // Link to previous definition Name
 546+ 82E2             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 546+ 82E2 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 546+ 82E4             >                else
 546+ 82E4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 546+ 82E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 546+ 82E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 546+ 82E4             >
 546+ 82E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 547+ 82E4 4C 6F D4 82                  dw      S_TO_D, D_DOT
 548+ 82E8 95 69                        dw      EXIT
 549+ 82EA
 550+ 82EA              //  ______________________________________________________________________
 551+ 82EA              //
 552+ 82EA              // ?            n --
 553+ 82EA                              Colon_Def QUESTION, "?", is_normal
 553+ 82EA             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 553+ 82EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 553+ 82EA             >
 553+ 82EA             >                // dummy db directives used to calculate length of namec
 553+ 82EA 3F          >                db      "?"
 553+ 82EB             >len_NFA         defl    $ - temp_NFA
 553+ 82EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 553+ 82EA             >
 553+ 82EA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 553+ 82EB 3F          >                db      "?"               // name string in 7-bit ascii, but
 553+ 82EC             >                org     $-1                 // alter last byte of Name just above to set
 553+ 82EB BF          >                db      {b $} | END_BIT     // msb as name end
 553+ 82EC             >
 553+ 82EC DE 82       >                dw      last_NFA            // Link to previous definition Name
 553+ 82EE             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 553+ 82EE BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 553+ 82F0             >                else
 553+ 82F0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 553+ 82F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 553+ 82F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 553+ 82F0             >
 553+ 82F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 554+ 82F0 CE 6B E2 82                  dw      FETCH, DOT
 555+ 82F4 95 69                        dw      EXIT
 556+ 82F6
 557+ 82F6              //  ______________________________________________________________________
 558+ 82F6              //
 559+ 82F6              // u.           u --
 560+ 82F6                              Colon_Def U_DOT, "U.", is_normal
 560+ 82F6             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 560+ 82F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 560+ 82F6             >
 560+ 82F6             >                // dummy db directives used to calculate length of namec
 560+ 82F6 55 2E       >                db      "U."
 560+ 82F8             >len_NFA         defl    $ - temp_NFA
 560+ 82F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 560+ 82F6             >
 560+ 82F6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 560+ 82F7 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 560+ 82F9             >                org     $-1                 // alter last byte of Name just above to set
 560+ 82F8 AE          >                db      {b $} | END_BIT     // msb as name end
 560+ 82F9             >
 560+ 82F9 EA 82       >                dw      last_NFA            // Link to previous definition Name
 560+ 82FB             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 560+ 82FB BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 560+ 82FD             >                else
 560+ 82FD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 560+ 82FD             >                endif           ; ok        // for other definitions it "points" the correct handler
 560+ 82FD             >                // Use of "; ok" to suppress "warning[fwdref]"
 560+ 82FD             >
 560+ 82FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 561+ 82FD 3A 6D D4 82                  dw      ZERO, D_DOT
 562+ 8301 95 69                        dw      EXIT
 563+ 8303
 564+ 8303              //  ______________________________________________________________________
 565+ 8303              //
 566+ 8303              // words        --
 567+ 8303                              Colon_Def WORDS, "WORDS", is_normal
 567+ 8303             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 567+ 8303             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 567+ 8303             >
 567+ 8303             >                // dummy db directives used to calculate length of namec
 567+ 8303 57 4F 52 44 >                db      "WORDS"
 567+ 8307 53          >
 567+ 8308             >len_NFA         defl    $ - temp_NFA
 567+ 8308             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 567+ 8303             >
 567+ 8303 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 567+ 8304 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 567+ 8308 53          >
 567+ 8309             >                org     $-1                 // alter last byte of Name just above to set
 567+ 8308 D3          >                db      {b $} | END_BIT     // msb as name end
 567+ 8309             >
 567+ 8309 F6 82       >                dw      last_NFA            // Link to previous definition Name
 567+ 830B             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 567+ 830B BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 567+ 830D             >                else
 567+ 830D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 567+ 830D             >                endif           ; ok        // for other definitions it "points" the correct handler
 567+ 830D             >                // Use of "; ok" to suppress "warning[fwdref]"
 567+ 830D             >
 567+ 830D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 568+ 830D 45 64 80 00                  dw      LIT, 128, OUT, STORE
 568+ 8311 4B 6E DB 6B
 569+ 8315 6D 6E CE 6B                  dw      CONTEXT, FETCH, FETCH
 569+ 8319 CE 6B
 570+ 831B              Words_Begin:
 571+ 831B 0A 6B E9 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 571+ 831F 45 64 1F 00
 571+ 8323 27 69
 572+ 8325 4B 6E CE 6B                  dw          OUT, FETCH, PLUS
 572+ 8329 27 6A
 573+ 832B 6E 6D 8F 6F                  dw          CL, LESS, ZEQUAL
 573+ 832F EC 69
 574+ 8331 7F 64                        dw          ZBRANCH
 575+ 8333 0A 00                        dw          Words_Endif - $
 576+ 8335 7C 68 3A 6D                  dw              CR, ZERO, OUT, STORE
 576+ 8339 4B 6E DB 6B
 577+ 833D              Words_Endif:
 578+ 833D 0A 6B 19 76                  dw          DUP, ID_DOT
 579+ 8341 93 70 65 70                  dw          PFA, LFA, FETCH
 579+ 8345 CE 6B
 580+ 8347 0A 6B EC 69                  dw          DUP, ZEQUAL
 581+ 834B 86 67 39 69                  dw          QTERMINAL, OR_OP
 582+ 834F 7F 64                        dw      ZBRANCH
 583+ 8351 CA FF                        dw      Words_Begin - $
 584+ 8353 D5 6A                        dw      DROP
 585+ 8355 95 69                        dw      EXIT
 586+ 8357
 587+ 8357              //  ______________________________________________________________________
 588+ 8357              //
 589+ 8357              // list         n --
 590+ 8357                              Colon_Def LIST, "LIST", is_normal
 590+ 8357             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 590+ 8357             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 590+ 8357             >
 590+ 8357             >                // dummy db directives used to calculate length of namec
 590+ 8357 4C 49 53 54 >                db      "LIST"
 590+ 835B             >len_NFA         defl    $ - temp_NFA
 590+ 835B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 590+ 8357             >
 590+ 8357 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 590+ 8358 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 590+ 835C             >                org     $-1                 // alter last byte of Name just above to set
 590+ 835B D4          >                db      {b $} | END_BIT     // msb as name end
 590+ 835C             >
 590+ 835C 03 83       >                dw      last_NFA            // Link to previous definition Name
 590+ 835E             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 590+ 835E BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 590+ 8360             >                else
 590+ 8360 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 590+ 8360             >                endif           ; ok        // for other definitions it "points" the correct handler
 590+ 8360             >                // Use of "; ok" to suppress "warning[fwdref]"
 590+ 8360             >
 590+ 8360             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 591+ 8360 E5 71 7C 68                  dw      DECIMAL, CR
 592+ 8364 0A 6B 54 6E                  dw      DUP, SCR, STORE
 592+ 8368 DB 6B
 593+ 836A 45 74                        dw      C_DOT_QUOTE
 594+ 836C 05 53 63 72                  db      5, "Scr# "
 594+ 8370 23 20
 595+ 8372 E2 82                        dw      DOT
 596+ 8374 92 6D 3A 6D                  dw      LSCR, ZERO, C_DO
 596+ 8378 07 65
 597+ 837A              List_Loop:
 598+ 837A 7C 68                        dw          CR
 599+ 837C 12 65 52 6D                  dw          I, THREE
 600+ 8380 C3 82 1D 70                  dw          DOT_R, SPACE
 601+ 8384 12 65 54 6E                  dw          I, SCR, FETCH, DOT_LINE
 601+ 8388 CE 6B 88 7A
 602+ 838C 86 67                        dw          QTERMINAL
 603+ 838E 7F 64                        dw          ZBRANCH
 604+ 8390 04 00                        dw          List_Endif - $
 605+ 8392 AB 69                        dw              LEAVE
 606+ 8394              List_Endif:
 607+ 8394 94 64                        dw      C_LOOP
 608+ 8396 E4 FF                        dw      List_Loop - $
 609+ 8398 7C 68                        dw      CR
 610+ 839A 95 69                        dw      EXIT
 611+ 839C
 612+ 839C              //  ______________________________________________________________________
 613+ 839C              //
 614+ 839C              // index        n1 n2 --
 615+ 839C                              Colon_Def INDEX, "INDEX", is_normal
 615+ 839C             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 615+ 839C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 615+ 839C             >
 615+ 839C             >                // dummy db directives used to calculate length of namec
 615+ 839C 49 4E 44 45 >                db      "INDEX"
 615+ 83A0 58          >
 615+ 83A1             >len_NFA         defl    $ - temp_NFA
 615+ 83A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 615+ 839C             >
 615+ 839C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 615+ 839D 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 615+ 83A1 58          >
 615+ 83A2             >                org     $-1                 // alter last byte of Name just above to set
 615+ 83A1 D8          >                db      {b $} | END_BIT     // msb as name end
 615+ 83A2             >
 615+ 83A2 57 83       >                dw      last_NFA            // Link to previous definition Name
 615+ 83A4             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 615+ 83A4 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 615+ 83A6             >                else
 615+ 83A6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 615+ 83A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 615+ 83A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 615+ 83A6             >
 615+ 83A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 616+ 83A6 50 6A FD 6A                  dw      ONE_PLUS, SWAP, C_DO
 616+ 83AA 07 65
 617+ 83AC              Index_Loop:
 618+ 83AC 7C 68 12 65                  dw          CR, I, THREE
 618+ 83B0 52 6D
 619+ 83B2 C3 82 1D 70                  dw          DOT_R, SPACE
 620+ 83B6 3A 6D 12 65                  dw          ZERO, I, DOT_LINE
 620+ 83BA 88 7A
 621+ 83BC 86 67                        dw          QTERMINAL
 622+ 83BE 7F 64                        dw          ZBRANCH
 623+ 83C0 04 00                        dw          Index_Endif - $
 624+ 83C2 AB 69                        dw              LEAVE
 625+ 83C4              Index_Endif:
 626+ 83C4 94 64                        dw      C_LOOP
 627+ 83C6 E6 FF                        dw      Index_Loop - $
 628+ 83C8 95 69                        dw      EXIT
 629+ 83CA
 630+ 83CA              //  ______________________________________________________________________
 631+ 83CA              //
 632+ 83CA              // cls          --
 633+ 83CA                              Colon_Def CLS, "CLS", is_normal
 633+ 83CA             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 633+ 83CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 633+ 83CA             >
 633+ 83CA             >                // dummy db directives used to calculate length of namec
 633+ 83CA 43 4C 53    >                db      "CLS"
 633+ 83CD             >len_NFA         defl    $ - temp_NFA
 633+ 83CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 633+ 83CA             >
 633+ 83CA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 633+ 83CB 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 633+ 83CE             >                org     $-1                 // alter last byte of Name just above to set
 633+ 83CD D3          >                db      {b $} | END_BIT     // msb as name end
 633+ 83CE             >
 633+ 83CE 9C 83       >                dw      last_NFA            // Link to previous definition Name
 633+ 83D0             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 633+ 83D0 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 633+ 83D2             >                else
 633+ 83D2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 633+ 83D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 633+ 83D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 633+ 83D2             >
 633+ 83D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 634+ 83D2 45 64 0E 00                  dw      LIT, $0E, EMITC
 634+ 83D6 65 66
 635+ 83D8 95 69                        dw      EXIT
 636+ 83DA
 637+ 83DA              //  ______________________________________________________________________
 638+ 83DA              //
 639+ 83DA              // splash       --
 640+ 83DA                              Colon_Def SPLASH, "SPLASH", is_normal
 640+ 83DA             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 640+ 83DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 640+ 83DA             >
 640+ 83DA             >                // dummy db directives used to calculate length of namec
 640+ 83DA 53 50 4C 41 >                db      "SPLASH"
 640+ 83DE 53 48       >
 640+ 83E0             >len_NFA         defl    $ - temp_NFA
 640+ 83E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 640+ 83DA             >
 640+ 83DA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 640+ 83DB 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 640+ 83DF 53 48       >
 640+ 83E1             >                org     $-1                 // alter last byte of Name just above to set
 640+ 83E0 C8          >                db      {b $} | END_BIT     // msb as name end
 640+ 83E1             >
 640+ 83E1 CA 83       >                dw      last_NFA            // Link to previous definition Name
 640+ 83E3             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 640+ 83E3 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 640+ 83E5             >                else
 640+ 83E5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 640+ 83E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 640+ 83E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 640+ 83E5             >
 640+ 83E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 641+ 83E5 D0 83                        dw      CLS
 642+ 83E7 45 74                        dw      C_DOT_QUOTE
 643+ 83E9 45                           db      69
 644+ 83EA 76 2D 46 6F                  db      "v-Forth 1.5 NextZXOS version", 13
 644+ 83EE 72 74 68 20
 644+ 83F2 31 2E 35 20
 644+ 83F6 4E 65 78 74
 644+ 83FA 5A 58 4F 53
 644+ 83FE 20 76 65 72
 644+ 8402 73 69 6F 6E
 644+ 8406 0D
 645+ 8407 62 75 69 6C                  db      "build 20210425", 13
 645+ 840B 64 20 32 30
 645+ 840F 32 31 30 34
 645+ 8413 32 35 0D
 646+ 8416 31 39 39 30                  db      "1990-2021 Matteo Vitturi", 13
 646+ 841A 2D 32 30 32
 646+ 841E 31 20 4D 61
 646+ 8422 74 74 65 6F
 646+ 8426 20 56 69 74
 646+ 842A 74 75 72 69
 646+ 842E 0D
 647+ 842F 95 69                        dw      EXIT
 648+ 8431
 649+ 8431              //  ______________________________________________________________________
 650+ 8431              //
 651+ 8431              // video        --
 652+ 8431                              Colon_Def VIDEO, "VIDEO", is_normal
 652+ 8431             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 652+ 8431             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 652+ 8431             >
 652+ 8431             >                // dummy db directives used to calculate length of namec
 652+ 8431 56 49 44 45 >                db      "VIDEO"
 652+ 8435 4F          >
 652+ 8436             >len_NFA         defl    $ - temp_NFA
 652+ 8436             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 652+ 8431             >
 652+ 8431 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 652+ 8432 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 652+ 8436 4F          >
 652+ 8437             >                org     $-1                 // alter last byte of Name just above to set
 652+ 8436 CF          >                db      {b $} | END_BIT     // msb as name end
 652+ 8437             >
 652+ 8437 DA 83       >                dw      last_NFA            // Link to previous definition Name
 652+ 8439             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 652+ 8439 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 652+ 843B             >                else
 652+ 843B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 652+ 843B             >                endif           ; ok        // for other definitions it "points" the correct handler
 652+ 843B             >                // Use of "; ok" to suppress "warning[fwdref]"
 652+ 843B             >
 652+ 843B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 653+ 843B 4A 6D 0A 6B                  dw      TWO, DUP, DEVICE, STORE
 653+ 843F D0 7A DB 6B
 654+ 8443 01 7B                        dw      SELECT
 655+ 8445 95 69                        dw      EXIT
 656+ 8447
 657+ 8447              //  ______________________________________________________________________
 658+ 8447              //
 659+ 8447              // accept-      a n1 -- n2
 660+ 8447                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 660+ 8447             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 660+ 8447             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 660+ 8447             >
 660+ 8447             >                // dummy db directives used to calculate length of namec
 660+ 8447 41 43 43 45 >                db      "ACCEPT-"
 660+ 844B 50 54 2D    >
 660+ 844E             >len_NFA         defl    $ - temp_NFA
 660+ 844E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 660+ 8447             >
 660+ 8447 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 660+ 8448 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 660+ 844C 50 54 2D    >
 660+ 844F             >                org     $-1                 // alter last byte of Name just above to set
 660+ 844E AD          >                db      {b $} | END_BIT     // msb as name end
 660+ 844F             >
 660+ 844F 31 84       >                dw      last_NFA            // Link to previous definition Name
 660+ 8451             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 660+ 8451 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 660+ 8453             >                else
 660+ 8453 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 660+ 8453             >                endif           ; ok        // for other definitions it "points" the correct handler
 660+ 8453             >                // Use of "; ok" to suppress "warning[fwdref]"
 660+ 8453             >
 660+ 8453             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 661+ 8453 BE 69                        dw      TO_R
 662+ 8455 3A 6D                        dw      ZERO
 663+ 8457 FD 6A                        dw      SWAP
 664+ 8459 0A 6B                        dw      DUP
 665+ 845B D2 69                        dw      R_TO
 666+ 845D 27 6A                        dw      PLUS
 667+ 845F FD 6A                        dw      SWAP
 668+ 8461 07 65                        dw      C_DO
 669+ 8463              AcceptN_Loop:
 670+ 8463 51 7B                        dw          MMU7_FETCH
 671+ 8465 DC 7A                        dw          INKEY
 672+ 8467 FD 6A 63 7B                  dw          SWAP, MMU7_STORE
 673+ 846B 0A 6B EC 69                  dw          DUP, ZEQUAL
 674+ 846F 7F 64                        dw          ZBRANCH
 675+ 8471 06 00                        dw          AcceptN_Endif_1 - $
 676+ 8473 39 84 64 78                  dw              VIDEO, QUIT
 677+ 8477              AcceptN_Endif_1:
 678+ 8477 0A 6B 45 64                  dw          DUP, LIT, 13, EQUALS
 678+ 847B 0D 00 6E 6F
 679+ 847F 7F 64                        dw          ZBRANCH
 680+ 8481 06 00                        dw          AcceptN_Endif_2 - $
 681+ 8483 D5 6A 3A 6D                  dw              DROP, ZERO
 682+ 8487              AcceptN_Endif_2:
 683+ 8487 0A 6B 45 64                  dw          DUP, LIT, 10, EQUALS
 683+ 848B 0A 00 6E 6F
 684+ 848F 7F 64                        dw          ZBRANCH
 685+ 8491 06 00                        dw          AcceptN_Endif_3 - $
 686+ 8493 D5 6A 3A 6D                  dw              DROP, ZERO
 687+ 8497              AcceptN_Endif_3:
 688+ 8497 0A 6B EC 69                  dw          DUP, ZEQUAL
 689+ 849B 7F 64                        dw          ZBRANCH
 690+ 849D 04 00                        dw          AcceptN_Endif_4 - $
 691+ 849F AB 69                        dw              LEAVE
 692+ 84A1              AcceptN_Endif_4:
 693+ 84A1 12 65 F7 6B                  dw          I, CSTORE, ONE_PLUS
 693+ 84A5 50 6A
 694+ 84A7 94 64                        dw      C_LOOP
 695+ 84A9 BA FF                        dw      AcceptN_Loop -$
 696+ 84AB 95 69                        dw      EXIT
 697+ 84AD
 698+ 84AD              //  ______________________________________________________________________
 699+ 84AD              //
 700+ 84AD              // load-        n --
 701+ 84AD              // Provided that a stream n is OPEN# via the standart BASIC
 702+ 84AD              // it accepts text from stream #n to the normal INTERPRET
 703+ 84AD              // up to now, text-file must end with QUIT
 704+ 84AD                              Colon_Def LOAD_N, "LOAD-", is_normal
 704+ 84AD             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 704+ 84AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 704+ 84AD             >
 704+ 84AD             >                // dummy db directives used to calculate length of namec
 704+ 84AD 4C 4F 41 44 >                db      "LOAD-"
 704+ 84B1 2D          >
 704+ 84B2             >len_NFA         defl    $ - temp_NFA
 704+ 84B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 704+ 84AD             >
 704+ 84AD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 704+ 84AE 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 704+ 84B2 2D          >
 704+ 84B3             >                org     $-1                 // alter last byte of Name just above to set
 704+ 84B2 AD          >                db      {b $} | END_BIT     // msb as name end
 704+ 84B3             >
 704+ 84B3 47 84       >                dw      last_NFA            // Link to previous definition Name
 704+ 84B5             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 704+ 84B5 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 704+ 84B7             >                else
 704+ 84B7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 704+ 84B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 704+ 84B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 704+ 84B7             >
 704+ 84B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 705+ 84B7 F0 6E DB 6B                  dw      SOURCE_ID, STORE
 706+ 84BB              Load_N_Begin:
 707+ 84BB CD 6D CE 6B                  dw          TIB, FETCH
 708+ 84BF 0A 6B 45 64                  dw          DUP, LIT, 80
 708+ 84C3 50 00
 709+ 84C5 74 6B BE 73                  dw          TWO_DUP, BLANKS
 710+ 84C9 F0 6E CE 6B                  dw          SOURCE_ID, FETCH
 711+ 84CD 84 79 0A 6B                  dw          ABS_OP, DUP, DEVICE, STORE
 711+ 84D1 D0 7A DB 6B
 712+ 84D5 01 7B                        dw          SELECT
 713+ 84D7 51 84                        dw          ACCEPT_N
 714+ 84D9 39 84                        dw          VIDEO
 715+ 84DB 54 6B                        dw          TWO_DROP
 716+ 84DD 3A 6D 39 6E                  dw          ZERO, BLK, STORE
 716+ 84E1 DB 6B
 717+ 84E3 3A 6D 42 6E                  dw          ZERO, TO_IN, STORE
 717+ 84E7 DB 6B
 718+ 84E9 96 77                        dw          INTERPRET
 719+ 84EB 86 67                        dw          QTERMINAL
 720+ 84ED 7F 64                        dw      ZBRANCH
 721+ 84EF CC FF                        dw      Load_N_Begin - $
 722+ 84F1 95 69                        dw      EXIT
 723+ 84F3
 724+ 84F3              //  ______________________________________________________________________
 725+ 84F3              //
 726+ 84F3              // load         n --
 727+ 84F3              // if n is positive, it loads screen #n (as usual)
 728+ 84F3              // if n is negative, it connects stream #n to the normal INTERPRET
 729+ 84F3              // this second way is useful if you want to load any kind of file
 730+ 84F3              // provied that it is OPEN# the usual BASIC way.
 731+ 84F3                              Colon_Def LOAD, "LOAD", is_normal
 731+ 84F3             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 731+ 84F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 731+ 84F3             >
 731+ 84F3             >                // dummy db directives used to calculate length of namec
 731+ 84F3 4C 4F 41 44 >                db      "LOAD"
 731+ 84F7             >len_NFA         defl    $ - temp_NFA
 731+ 84F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 731+ 84F3             >
 731+ 84F3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 731+ 84F4 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 731+ 84F8             >                org     $-1                 // alter last byte of Name just above to set
 731+ 84F7 C4          >                db      {b $} | END_BIT     // msb as name end
 731+ 84F8             >
 731+ 84F8 AD 84       >                dw      last_NFA            // Link to previous definition Name
 731+ 84FA             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 731+ 84FA BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 731+ 84FC             >                else
 731+ 84FC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 731+ 84FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 731+ 84FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 731+ 84FC             >
 731+ 84FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 732+ 84FC 0A 6B FF 69                  dw      DUP, ZLESS
 733+ 8500 7F 64                        dw      ZBRANCH
 734+ 8502 08 00                        dw      Load_Else - $
 735+ 8504 B5 84                        dw          LOAD_N
 736+ 8506 68 64                        dw      BRANCH
 737+ 8508 04 00                        dw      Load_Endif - $
 738+ 850A              Load_Else:
 739+ 850A FF 80                        dw          LOAD_P
 740+ 850C              Load_Endif:
 741+ 850C 95 69                        dw      EXIT
 742+ 850E
 743+ 850E
 744+ 850E              //  ______________________________________________________________________
 745+ 850E              //
 746+ 850E              // autoexec     --
 747+ 850E              // this word is called the first time the Forth system boot to
 748+ 850E              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 749+ 850E                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 749+ 850E             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 749+ 850E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 749+ 850E             >
 749+ 850E             >                // dummy db directives used to calculate length of namec
 749+ 850E 41 55 54 4F >                db      "AUTOEXEC"
 749+ 8512 45 58 45 43 >
 749+ 8516             >len_NFA         defl    $ - temp_NFA
 749+ 8516             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 749+ 850E             >
 749+ 850E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 749+ 850F 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 749+ 8513 45 58 45 43 >
 749+ 8517             >                org     $-1                 // alter last byte of Name just above to set
 749+ 8516 C3          >                db      {b $} | END_BIT     // msb as name end
 749+ 8517             >
 749+ 8517 F3 84       >                dw      last_NFA            // Link to previous definition Name
 749+ 8519             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 749+ 8519 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 749+ 851B             >                else
 749+ 851B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 749+ 851B             >                endif           ; ok        // for other definitions it "points" the correct handler
 749+ 851B             >                // Use of "; ok" to suppress "warning[fwdref]"
 749+ 851B             >
 749+ 851B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 750+ 851B 45 64 0B 00                  dw      LIT, 11
 751+ 851F 45 64 E7 6C                  dw      LIT, NOOP
 752+ 8523 45 64 B3 78                  dw      LIT, Autoexec_Ptr
 753+ 8527 DB 6B                        dw      STORE
 754+ 8529 FA 84                        dw      LOAD
 755+ 852B 64 78                        dw      QUIT
 756+ 852D 95 69                        dw      EXIT
 757+ 852F
 758+ 852F
 759+ 852F              //  ______________________________________________________________________
 760+ 852F              //
 761+ 852F              // bye     --
 762+ 852F              //
 763+ 852F                              Colon_Def BYE, "BYE", is_normal
 763+ 852F             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 763+ 852F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 763+ 852F             >
 763+ 852F             >                // dummy db directives used to calculate length of namec
 763+ 852F 42 59 45    >                db      "BYE"
 763+ 8532             >len_NFA         defl    $ - temp_NFA
 763+ 8532             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 763+ 852F             >
 763+ 852F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 763+ 8530 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 763+ 8533             >                org     $-1                 // alter last byte of Name just above to set
 763+ 8532 C5          >                db      {b $} | END_BIT     // msb as name end
 763+ 8533             >
 763+ 8533 0E 85       >                dw      last_NFA            // Link to previous definition Name
 763+ 8535             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 763+ 8535 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 763+ 8537             >                else
 763+ 8537 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 763+ 8537             >                endif           ; ok        // for other definitions it "points" the correct handler
 763+ 8537             >                // Use of "; ok" to suppress "warning[fwdref]"
 763+ 8537             >
 763+ 8537             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 764+ 8537 15 7E                        dw      FLUSH
 765+ 8539 46 7D                        dw      EMPTY_BUFFERS
 766+ 853B EA 7B CE 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 766+ 853F 29 68 D5 6A
 767+ 8543 3A 6D A0 6D                  dw      ZERO, PLUS_ORIGIN
 768+ 8547 49 79                        dw      BASIC
 769+ 8549
 770+ 8549              //  ______________________________________________________________________
 771+ 8549              //
 772+ 8549              // invv     --
 773+ 8549              //
 774+ 8549                              Colon_Def INVV, "INVV", is_normal
 774+ 8549             >                New_Def  INVV, "INVV", Enter_Ptr, is_normal ; ok
 774+ 8549             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 774+ 8549             >
 774+ 8549             >                // dummy db directives used to calculate length of namec
 774+ 8549 49 4E 56 56 >                db      "INVV"
 774+ 854D             >len_NFA         defl    $ - temp_NFA
 774+ 854D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 774+ 8549             >
 774+ 8549 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 774+ 854A 49 4E 56 56 >                db      "INVV"               // name string in 7-bit ascii, but
 774+ 854E             >                org     $-1                 // alter last byte of Name just above to set
 774+ 854D D6          >                db      {b $} | END_BIT     // msb as name end
 774+ 854E             >
 774+ 854E 2F 85       >                dw      last_NFA            // Link to previous definition Name
 774+ 8550             >INVV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 774+ 8550 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 774+ 8552             >                else
 774+ 8552 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 774+ 8552             >                endif           ; ok        // for other definitions it "points" the correct handler
 774+ 8552             >                // Use of "; ok" to suppress "warning[fwdref]"
 774+ 8552             >
 774+ 8552             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 775+ 8552 45 64 14 00                  dw      LIT, 20, EMITC, ONE, EMITC
 775+ 8556 65 66 42 6D
 775+ 855A 65 66
 776+ 855C 95 69                        dw      EXIT
 777+ 855E
 778+ 855E              //  ______________________________________________________________________
 779+ 855E              //
 780+ 855E              // truv     --
 781+ 855E              //
 782+ 855E                              Colon_Def TRUV, "TRUV", is_normal
 782+ 855E             >                New_Def  TRUV, "TRUV", Enter_Ptr, is_normal ; ok
 782+ 855E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 782+ 855E             >
 782+ 855E             >                // dummy db directives used to calculate length of namec
 782+ 855E 54 52 55 56 >                db      "TRUV"
 782+ 8562             >len_NFA         defl    $ - temp_NFA
 782+ 8562             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 782+ 855E             >
 782+ 855E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 782+ 855F 54 52 55 56 >                db      "TRUV"               // name string in 7-bit ascii, but
 782+ 8563             >                org     $-1                 // alter last byte of Name just above to set
 782+ 8562 D6          >                db      {b $} | END_BIT     // msb as name end
 782+ 8563             >
 782+ 8563 49 85       >                dw      last_NFA            // Link to previous definition Name
 782+ 8565             >TRUV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 782+ 8565 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 782+ 8567             >                else
 782+ 8567 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 782+ 8567             >                endif           ; ok        // for other definitions it "points" the correct handler
 782+ 8567             >                // Use of "; ok" to suppress "warning[fwdref]"
 782+ 8567             >
 782+ 8567             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 783+ 8567 45 64 14 00                  dw      LIT, 20, EMITC, ZERO, EMITC
 783+ 856B 65 66 3A 6D
 783+ 856F 65 66
 784+ 8571 95 69                        dw      EXIT
 785+ 8573
 786+ 8573              //  ______________________________________________________________________
 787+ 8573              //
 788+ 8573              // mark     --
 789+ 8573              //
 790+ 8573              //              Colon_Def MARK, "MARK", is_normal
 791+ 8573              //              dw      INVV, TYPE, TRUV
 792+ 8573              //              dw      EXIT
 793+ 8573
 794+ 8573              //  ______________________________________________________________________
 795+ 8573              //
 796+ 8573              // back     --
 797+ 8573              //
 798+ 8573                              Colon_Def BACK, "BACK", is_normal
 798+ 8573             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 798+ 8573             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 798+ 8573             >
 798+ 8573             >                // dummy db directives used to calculate length of namec
 798+ 8573 42 41 43 4B >                db      "BACK"
 798+ 8577             >len_NFA         defl    $ - temp_NFA
 798+ 8577             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 798+ 8573             >
 798+ 8573 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 798+ 8574 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 798+ 8578             >                org     $-1                 // alter last byte of Name just above to set
 798+ 8577 CB          >                db      {b $} | END_BIT     // msb as name end
 798+ 8578             >
 798+ 8578 5E 85       >                dw      last_NFA            // Link to previous definition Name
 798+ 857A             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 798+ 857A BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 798+ 857C             >                else
 798+ 857C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 798+ 857C             >                endif           ; ok        // for other definitions it "points" the correct handler
 798+ 857C             >                // Use of "; ok" to suppress "warning[fwdref]"
 798+ 857C             >
 798+ 857C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 799+ 857C 0C 6F 60 6F                  dw      HERE, SUBTRACT, COMMA
 799+ 8580 28 6F
 800+ 8582 95 69                        dw      EXIT
 801+ 8584
 802+ 8584              //  ______________________________________________________________________
 803+ 8584              //
 804+ 8584              // if          ( -- a 2 ) \ compile-time
 805+ 8584              // IF ... THEN
 806+ 8584              // IF ... ELSE ... ENDIF
 807+ 8584                              Colon_Def IF, "IF", is_immediate
 807+ 8584             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 807+ 8584             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 807+ 8584             >
 807+ 8584             >                // dummy db directives used to calculate length of namec
 807+ 8584 49 46       >                db      "IF"
 807+ 8586             >len_NFA         defl    $ - temp_NFA
 807+ 8586             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 807+ 8584             >
 807+ 8584 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 807+ 8585 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 807+ 8587             >                org     $-1                 // alter last byte of Name just above to set
 807+ 8586 C6          >                db      {b $} | END_BIT     // msb as name end
 807+ 8587             >
 807+ 8587 73 85       >                dw      last_NFA            // Link to previous definition Name
 807+ 8589             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 807+ 8589 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 807+ 858B             >                else
 807+ 858B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 807+ 858B             >                endif           ; ok        // for other definitions it "points" the correct handler
 807+ 858B             >                // Use of "; ok" to suppress "warning[fwdref]"
 807+ 858B             >
 807+ 858B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 808+ 858B 6C 71 7F 64                  dw      COMPILE, ZBRANCH
 809+ 858F 0C 6F 3A 6D                  dw      HERE, ZERO, COMMA
 809+ 8593 28 6F
 810+ 8595 4A 6D                        dw      TWO
 811+ 8597 95 69                        dw      EXIT
 812+ 8599
 813+ 8599              //  ______________________________________________________________________
 814+ 8599              //
 815+ 8599              // endif        ( a 2 -- ) \ compile-time
 816+ 8599              //
 817+ 8599                              Colon_Def ENDIF, "ENDIF", is_immediate
 817+ 8599             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 817+ 8599             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 817+ 8599             >
 817+ 8599             >                // dummy db directives used to calculate length of namec
 817+ 8599 45 4E 44 49 >                db      "ENDIF"
 817+ 859D 46          >
 817+ 859E             >len_NFA         defl    $ - temp_NFA
 817+ 859E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 817+ 8599             >
 817+ 8599 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 817+ 859A 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 817+ 859E 46          >
 817+ 859F             >                org     $-1                 // alter last byte of Name just above to set
 817+ 859E C6          >                db      {b $} | END_BIT     // msb as name end
 817+ 859F             >
 817+ 859F 84 85       >                dw      last_NFA            // Link to previous definition Name
 817+ 85A1             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 817+ 85A1 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 817+ 85A3             >                else
 817+ 85A3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 817+ 85A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 817+ 85A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 817+ 85A3             >
 817+ 85A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 818+ 85A3 F3 70                        dw      QCOMP
 819+ 85A5 4A 6D 22 71                  dw      TWO, QPAIRS
 820+ 85A9 0C 6F C5 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 820+ 85AD 60 6F FD 6A
 820+ 85B1 DB 6B
 821+ 85B3 95 69                        dw      EXIT
 822+ 85B5
 823+ 85B5              //  ______________________________________________________________________
 824+ 85B5              //
 825+ 85B5              // then        ( a 2 -- ) \ compile-time
 826+ 85B5              //
 827+ 85B5                              Colon_Def THEN, "THEN", is_immediate
 827+ 85B5             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 827+ 85B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 827+ 85B5             >
 827+ 85B5             >                // dummy db directives used to calculate length of namec
 827+ 85B5 54 48 45 4E >                db      "THEN"
 827+ 85B9             >len_NFA         defl    $ - temp_NFA
 827+ 85B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 827+ 85B5             >
 827+ 85B5 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 827+ 85B6 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 827+ 85BA             >                org     $-1                 // alter last byte of Name just above to set
 827+ 85B9 CE          >                db      {b $} | END_BIT     // msb as name end
 827+ 85BA             >
 827+ 85BA 99 85       >                dw      last_NFA            // Link to previous definition Name
 827+ 85BC             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 827+ 85BC BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 827+ 85BE             >                else
 827+ 85BE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 827+ 85BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 827+ 85BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 827+ 85BE             >
 827+ 85BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 828+ 85BE A1 85                        dw      ENDIF
 829+ 85C0 95 69                        dw      EXIT
 830+ 85C2
 831+ 85C2              //  ______________________________________________________________________
 832+ 85C2              //
 833+ 85C2              // else        ( a1 2 -- a2 2 ) \ compile-time
 834+ 85C2              //
 835+ 85C2                              Colon_Def ELSE, "ELSE", is_immediate
 835+ 85C2             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 835+ 85C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 835+ 85C2             >
 835+ 85C2             >                // dummy db directives used to calculate length of namec
 835+ 85C2 45 4C 53 45 >                db      "ELSE"
 835+ 85C6             >len_NFA         defl    $ - temp_NFA
 835+ 85C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 835+ 85C2             >
 835+ 85C2 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 835+ 85C3 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 835+ 85C7             >                org     $-1                 // alter last byte of Name just above to set
 835+ 85C6 C5          >                db      {b $} | END_BIT     // msb as name end
 835+ 85C7             >
 835+ 85C7 B5 85       >                dw      last_NFA            // Link to previous definition Name
 835+ 85C9             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 835+ 85C9 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 835+ 85CB             >                else
 835+ 85CB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 835+ 85CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 835+ 85CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 835+ 85CB             >
 835+ 85CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 836+ 85CB F3 70                        dw      QCOMP
 837+ 85CD 4A 6D 22 71                  dw      TWO, QPAIRS
 838+ 85D1 6C 71 68 64                  dw      COMPILE, BRANCH
 839+ 85D5 0C 6F 3A 6D                  dw      HERE, ZERO, COMMA
 839+ 85D9 28 6F
 840+ 85DB FD 6A 4A 6D                  dw      SWAP, TWO, ENDIF
 840+ 85DF A1 85
 841+ 85E1 4A 6D                        dw      TWO
 842+ 85E3 95 69                        dw      EXIT
 843+ 85E5
 844+ 85E5              //  ______________________________________________________________________
 845+ 85E5              //
 846+ 85E5              // begin        ( -- a 1 ) \ compile-time
 847+ 85E5              // BEGIN ... AGAIN
 848+ 85E5              // BEGIN ... f UNTIL
 849+ 85E5              // BEGIN ... f WHILE ... REPEAT
 850+ 85E5                              Colon_Def BEGIN, "BEGIN", is_immediate
 850+ 85E5             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 850+ 85E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 850+ 85E5             >
 850+ 85E5             >                // dummy db directives used to calculate length of namec
 850+ 85E5 42 45 47 49 >                db      "BEGIN"
 850+ 85E9 4E          >
 850+ 85EA             >len_NFA         defl    $ - temp_NFA
 850+ 85EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 850+ 85E5             >
 850+ 85E5 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 850+ 85E6 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 850+ 85EA 4E          >
 850+ 85EB             >                org     $-1                 // alter last byte of Name just above to set
 850+ 85EA CE          >                db      {b $} | END_BIT     // msb as name end
 850+ 85EB             >
 850+ 85EB C2 85       >                dw      last_NFA            // Link to previous definition Name
 850+ 85ED             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 850+ 85ED BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 850+ 85EF             >                else
 850+ 85EF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 850+ 85EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 850+ 85EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 850+ 85EF             >
 850+ 85EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 851+ 85EF F3 70                        dw      QCOMP
 852+ 85F1 0C 6F                        dw      HERE
 853+ 85F3 42 6D                        dw      ONE
 854+ 85F5 95 69                        dw      EXIT
 855+ 85F7
 856+ 85F7              //  ______________________________________________________________________
 857+ 85F7              //
 858+ 85F7              // again        ( a 1 -- ) \ compile-time
 859+ 85F7                              Colon_Def AGAIN, "AGAIN", is_immediate
 859+ 85F7             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 859+ 85F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 859+ 85F7             >
 859+ 85F7             >                // dummy db directives used to calculate length of namec
 859+ 85F7 41 47 41 49 >                db      "AGAIN"
 859+ 85FB 4E          >
 859+ 85FC             >len_NFA         defl    $ - temp_NFA
 859+ 85FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 859+ 85F7             >
 859+ 85F7 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 859+ 85F8 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 859+ 85FC 4E          >
 859+ 85FD             >                org     $-1                 // alter last byte of Name just above to set
 859+ 85FC CE          >                db      {b $} | END_BIT     // msb as name end
 859+ 85FD             >
 859+ 85FD E5 85       >                dw      last_NFA            // Link to previous definition Name
 859+ 85FF             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 859+ 85FF BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 859+ 8601             >                else
 859+ 8601 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 859+ 8601             >                endif           ; ok        // for other definitions it "points" the correct handler
 859+ 8601             >                // Use of "; ok" to suppress "warning[fwdref]"
 859+ 8601             >
 859+ 8601             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 860+ 8601 F3 70                        dw      QCOMP
 861+ 8603 42 6D 22 71                  dw      ONE, QPAIRS
 862+ 8607 6C 71 68 64                  dw      COMPILE, BRANCH
 863+ 860B 7A 85                        dw      BACK
 864+ 860D 95 69                        dw      EXIT
 865+ 860F
 866+ 860F              //  ______________________________________________________________________
 867+ 860F              //
 868+ 860F              // until        ( a 1 -- ) \ compile-time
 869+ 860F                              Colon_Def UNTIL, "UNTIL", is_immediate
 869+ 860F             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 869+ 860F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 869+ 860F             >
 869+ 860F             >                // dummy db directives used to calculate length of namec
 869+ 860F 55 4E 54 49 >                db      "UNTIL"
 869+ 8613 4C          >
 869+ 8614             >len_NFA         defl    $ - temp_NFA
 869+ 8614             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 869+ 860F             >
 869+ 860F C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 869+ 8610 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 869+ 8614 4C          >
 869+ 8615             >                org     $-1                 // alter last byte of Name just above to set
 869+ 8614 CC          >                db      {b $} | END_BIT     // msb as name end
 869+ 8615             >
 869+ 8615 F7 85       >                dw      last_NFA            // Link to previous definition Name
 869+ 8617             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 869+ 8617 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 869+ 8619             >                else
 869+ 8619 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 869+ 8619             >                endif           ; ok        // for other definitions it "points" the correct handler
 869+ 8619             >                // Use of "; ok" to suppress "warning[fwdref]"
 869+ 8619             >
 869+ 8619             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 870+ 8619 F3 70                        dw      QCOMP
 871+ 861B 42 6D 22 71                  dw      ONE, QPAIRS
 872+ 861F 6C 71 7F 64                  dw      COMPILE, ZBRANCH
 873+ 8623 7A 85                        dw      BACK
 874+ 8625 95 69                        dw      EXIT
 875+ 8627
 876+ 8627              //  ______________________________________________________________________
 877+ 8627              //
 878+ 8627              // end          ( a 1 -- ) \ compile-time
 879+ 8627                              Colon_Def END, "END", is_immediate
 879+ 8627             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 879+ 8627             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 879+ 8627             >
 879+ 8627             >                // dummy db directives used to calculate length of namec
 879+ 8627 45 4E 44    >                db      "END"
 879+ 862A             >len_NFA         defl    $ - temp_NFA
 879+ 862A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 879+ 8627             >
 879+ 8627 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 879+ 8628 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 879+ 862B             >                org     $-1                 // alter last byte of Name just above to set
 879+ 862A C4          >                db      {b $} | END_BIT     // msb as name end
 879+ 862B             >
 879+ 862B 0F 86       >                dw      last_NFA            // Link to previous definition Name
 879+ 862D             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 879+ 862D BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 879+ 862F             >                else
 879+ 862F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 879+ 862F             >                endif           ; ok        // for other definitions it "points" the correct handler
 879+ 862F             >                // Use of "; ok" to suppress "warning[fwdref]"
 879+ 862F             >
 879+ 862F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 880+ 862F 17 86                        dw      UNTIL
 881+ 8631 95 69                        dw      EXIT
 882+ 8633
 883+ 8633              //  ______________________________________________________________________
 884+ 8633              //
 885+ 8633              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 886+ 8633                              Colon_Def WHILE, "WHILE", is_immediate
 886+ 8633             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 886+ 8633             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 886+ 8633             >
 886+ 8633             >                // dummy db directives used to calculate length of namec
 886+ 8633 57 48 49 4C >                db      "WHILE"
 886+ 8637 45          >
 886+ 8638             >len_NFA         defl    $ - temp_NFA
 886+ 8638             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 886+ 8633             >
 886+ 8633 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 886+ 8634 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 886+ 8638 45          >
 886+ 8639             >                org     $-1                 // alter last byte of Name just above to set
 886+ 8638 C5          >                db      {b $} | END_BIT     // msb as name end
 886+ 8639             >
 886+ 8639 27 86       >                dw      last_NFA            // Link to previous definition Name
 886+ 863B             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 886+ 863B BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 886+ 863D             >                else
 886+ 863D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 886+ 863D             >                endif           ; ok        // for other definitions it "points" the correct handler
 886+ 863D             >                // Use of "; ok" to suppress "warning[fwdref]"
 886+ 863D             >
 886+ 863D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 887+ 863D 89 85                        dw      IF
 888+ 863F 68 6A                        dw      TWO_PLUS // ( that is 4 )
 889+ 8641 95 69                        dw      EXIT
 890+ 8643
 891+ 8643              //  ______________________________________________________________________
 892+ 8643              //
 893+ 8643              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 894+ 8643                              Colon_Def REPEAT, "REPEAT", is_immediate
 894+ 8643             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 894+ 8643             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 894+ 8643             >
 894+ 8643             >                // dummy db directives used to calculate length of namec
 894+ 8643 52 45 50 45 >                db      "REPEAT"
 894+ 8647 41 54       >
 894+ 8649             >len_NFA         defl    $ - temp_NFA
 894+ 8649             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 894+ 8643             >
 894+ 8643 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 894+ 8644 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 894+ 8648 41 54       >
 894+ 864A             >                org     $-1                 // alter last byte of Name just above to set
 894+ 8649 D4          >                db      {b $} | END_BIT     // msb as name end
 894+ 864A             >
 894+ 864A 33 86       >                dw      last_NFA            // Link to previous definition Name
 894+ 864C             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 894+ 864C BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 894+ 864E             >                else
 894+ 864E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 894+ 864E             >                endif           ; ok        // for other definitions it "points" the correct handler
 894+ 864E             >                // Use of "; ok" to suppress "warning[fwdref]"
 894+ 864E             >
 894+ 864E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 895+ 864E 62 6B                        dw      TWO_SWAP
 896+ 8650 FF 85                        dw      AGAIN
 897+ 8652 4A 6D 60 6F                  dw      TWO, SUBTRACT
 898+ 8656 A1 85                        dw      ENDIF
 899+ 8658 95 69                        dw      EXIT
 900+ 865A
 901+ 865A              //  ______________________________________________________________________
 902+ 865A              //
 903+ 865A              // ?do-
 904+ 865A              // special version of "BACK" used by ?DO and LOOP
 905+ 865A                              Colon_Def C_DO_BACK, "?DO-", is_normal
 905+ 865A             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 905+ 865A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 905+ 865A             >
 905+ 865A             >                // dummy db directives used to calculate length of namec
 905+ 865A 3F 44 4F 2D >                db      "?DO-"
 905+ 865E             >len_NFA         defl    $ - temp_NFA
 905+ 865E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 905+ 865A             >
 905+ 865A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 905+ 865B 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 905+ 865F             >                org     $-1                 // alter last byte of Name just above to set
 905+ 865E AD          >                db      {b $} | END_BIT     // msb as name end
 905+ 865F             >
 905+ 865F 43 86       >                dw      last_NFA            // Link to previous definition Name
 905+ 8661             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 905+ 8661 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 905+ 8663             >                else
 905+ 8663 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 905+ 8663             >                endif           ; ok        // for other definitions it "points" the correct handler
 905+ 8663             >                // Use of "; ok" to suppress "warning[fwdref]"
 905+ 8663             >
 905+ 8663             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 906+ 8663 7A 85                        dw      BACK
 907+ 8665 5F 69 AA 6E                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 907+ 8669 CE 6B 60 6F
 908+ 866D 7F 64                        dw      ZBRANCH
 909+ 866F 06 00                        dw      CDoBack_Endif - $
 910+ 8671 68 6A A1 85                  dw          TWO_PLUS, ENDIF
 911+ 8675              CDoBack_Endif:
 912+ 8675 35 71 AA 6E                  dw      QCSP, CSP, STORE
 912+ 8679 DB 6B
 913+ 867B 95 69                        dw      EXIT
 914+ 867D
 915+ 867D              //  ______________________________________________________________________
 916+ 867D              //
 917+ 867D              // do
 918+ 867D              // DO  ... LOOP
 919+ 867D              // DO  ... n +LOOP
 920+ 867D              // ?DO ... LOOP
 921+ 867D              // ?DO ... n +LOOP
 922+ 867D                              Colon_Def DO, "DO", is_immediate
 922+ 867D             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 922+ 867D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 922+ 867D             >
 922+ 867D             >                // dummy db directives used to calculate length of namec
 922+ 867D 44 4F       >                db      "DO"
 922+ 867F             >len_NFA         defl    $ - temp_NFA
 922+ 867F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 922+ 867D             >
 922+ 867D C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 922+ 867E 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 922+ 8680             >                org     $-1                 // alter last byte of Name just above to set
 922+ 867F CF          >                db      {b $} | END_BIT     // msb as name end
 922+ 8680             >
 922+ 8680 5A 86       >                dw      last_NFA            // Link to previous definition Name
 922+ 8682             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 922+ 8682 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 922+ 8684             >                else
 922+ 8684 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 922+ 8684             >                endif           ; ok        // for other definitions it "points" the correct handler
 922+ 8684             >                // Use of "; ok" to suppress "warning[fwdref]"
 922+ 8684             >
 922+ 8684             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 923+ 8684 6C 71 07 65                  dw      COMPILE, C_DO
 924+ 8688 AA 6E CE 6B                  dw      CSP, FETCH, STORE_CSP
 924+ 868C C6 70
 925+ 868E 0C 6F 52 6D                  dw      HERE, THREE
 926+ 8692 95 69                        dw      EXIT
 927+ 8694
 928+ 8694              //  ______________________________________________________________________
 929+ 8694              //
 930+ 8694              // loop
 931+ 8694                              Colon_Def LOOP, "LOOP", is_immediate
 931+ 8694             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 931+ 8694             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 931+ 8694             >
 931+ 8694             >                // dummy db directives used to calculate length of namec
 931+ 8694 4C 4F 4F 50 >                db      "LOOP"
 931+ 8698             >len_NFA         defl    $ - temp_NFA
 931+ 8698             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 931+ 8694             >
 931+ 8694 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 931+ 8695 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 931+ 8699             >                org     $-1                 // alter last byte of Name just above to set
 931+ 8698 D0          >                db      {b $} | END_BIT     // msb as name end
 931+ 8699             >
 931+ 8699 7D 86       >                dw      last_NFA            // Link to previous definition Name
 931+ 869B             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 931+ 869B BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 931+ 869D             >                else
 931+ 869D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 931+ 869D             >                endif           ; ok        // for other definitions it "points" the correct handler
 931+ 869D             >                // Use of "; ok" to suppress "warning[fwdref]"
 931+ 869D             >
 931+ 869D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 932+ 869D 52 6D 22 71                  dw      THREE, QPAIRS
 933+ 86A1 6C 71 94 64                  dw      COMPILE, C_LOOP
 934+ 86A5 61 86                        dw      C_DO_BACK
 935+ 86A7 95 69                        dw      EXIT
 936+ 86A9
 937+ 86A9              //  ______________________________________________________________________
 938+ 86A9              //
 939+ 86A9              // +loop
 940+ 86A9                              Colon_Def PLOOP, "+LOOP", is_immediate
 940+ 86A9             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 940+ 86A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 940+ 86A9             >
 940+ 86A9             >                // dummy db directives used to calculate length of namec
 940+ 86A9 2B 4C 4F 4F >                db      "+LOOP"
 940+ 86AD 50          >
 940+ 86AE             >len_NFA         defl    $ - temp_NFA
 940+ 86AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 940+ 86A9             >
 940+ 86A9 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 940+ 86AA 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 940+ 86AE 50          >
 940+ 86AF             >                org     $-1                 // alter last byte of Name just above to set
 940+ 86AE D0          >                db      {b $} | END_BIT     // msb as name end
 940+ 86AF             >
 940+ 86AF 94 86       >                dw      last_NFA            // Link to previous definition Name
 940+ 86B1             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 940+ 86B1 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 940+ 86B3             >                else
 940+ 86B3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 940+ 86B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 940+ 86B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 940+ 86B3             >
 940+ 86B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 941+ 86B3 52 6D 22 71                  dw      THREE, QPAIRS
 942+ 86B7 6C 71 CB 64                  dw      COMPILE, C_PLOOP
 943+ 86BB 61 86                        dw      C_DO_BACK
 944+ 86BD 95 69                        dw      EXIT
 945+ 86BF
 946+ 86BF              //  ______________________________________________________________________
 947+ 86BF              //
 948+ 86BF              // ?do
 949+ 86BF                              Colon_Def QDO, "?DO", is_immediate
 949+ 86BF             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 949+ 86BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 949+ 86BF             >
 949+ 86BF             >                // dummy db directives used to calculate length of namec
 949+ 86BF 3F 44 4F    >                db      "?DO"
 949+ 86C2             >len_NFA         defl    $ - temp_NFA
 949+ 86C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 949+ 86BF             >
 949+ 86BF C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 949+ 86C0 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 949+ 86C3             >                org     $-1                 // alter last byte of Name just above to set
 949+ 86C2 CF          >                db      {b $} | END_BIT     // msb as name end
 949+ 86C3             >
 949+ 86C3 A9 86       >                dw      last_NFA            // Link to previous definition Name
 949+ 86C5             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 949+ 86C5 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 949+ 86C7             >                else
 949+ 86C7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 949+ 86C7             >                endif           ; ok        // for other definitions it "points" the correct handler
 949+ 86C7             >                // Use of "; ok" to suppress "warning[fwdref]"
 949+ 86C7             >
 949+ 86C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 950+ 86C7 6C 71 D9 64                  dw      COMPILE, C_Q_DO
 951+ 86CB AA 6E CE 6B                  dw      CSP, FETCH, STORE_CSP
 951+ 86CF C6 70
 952+ 86D1 0C 6F 3A 6D                  dw      HERE, ZERO, COMMA, ZERO
 952+ 86D5 28 6F 3A 6D
 953+ 86D9 0C 6F 52 6D                  dw      HERE, THREE
 954+ 86DD 95 69                        dw      EXIT
 955+ 86DF
 956+ 86DF              //  ______________________________________________________________________
 957+ 86DF              //
 958+ 86DF              // \
 959+ 86DF                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 959+ 86DF             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 959+ 86DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 959+ 86DF             >
 959+ 86DF             >                // dummy db directives used to calculate length of namec
 959+ 86DF 5C          >                db      "\\"
 959+ 86E0             >len_NFA         defl    $ - temp_NFA
 959+ 86E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 959+ 86DF             >
 959+ 86DF C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 959+ 86E0 5C          >                db      "\\"               // name string in 7-bit ascii, but
 959+ 86E1             >                org     $-1                 // alter last byte of Name just above to set
 959+ 86E0 DC          >                db      {b $} | END_BIT     // msb as name end
 959+ 86E1             >
 959+ 86E1 BF 86       >                dw      last_NFA            // Link to previous definition Name
 959+ 86E3             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 959+ 86E3 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 959+ 86E5             >                else
 959+ 86E5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 959+ 86E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 959+ 86E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 959+ 86E5             >
 959+ 86E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 960+ 86E5 39 6E CE 6B                  dw      BLK, FETCH
 961+ 86E9 7F 64                        dw      ZBRANCH
 962+ 86EB 30 00                        dw      Backslash_Else_1 - $
 963+ 86ED 39 6E CE 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
 963+ 86F1 42 6D AB 6F
 964+ 86F5 7F 64                        dw          ZBRANCH
 965+ 86F7 18 00                        dw          Backslash_Else_2 - $
 966+ 86F9 42 6E CE 6B                  dw              TO_IN, FETCH, CL, MOD, CL
 966+ 86FD 6E 6D 10 7A
 966+ 8701 6E 6D
 967+ 8703 FD 6A 60 6F                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 967+ 8707 42 6E AB 6B
 968+ 870B 68 64                        dw          BRANCH
 969+ 870D 0A 00                        dw          Backslash_Endif_2 - $
 970+ 870F              Backslash_Else_2:
 971+ 870F 7A 6D 82 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
 971+ 8713 42 6E DB 6B
 972+ 8717              Backslash_Endif_2:
 973+ 8717 68 64                        dw      BRANCH
 974+ 8719 0A 00                        dw      Backslash_Endif_1 - $
 975+ 871B              Backslash_Else_1:
 976+ 871B 45 64 50 00                  dw          LIT, 80, TO_IN, STORE
 976+ 871F 42 6E DB 6B
 977+ 8723              Backslash_Endif_1:
 978+ 8723 95 69                        dw      EXIT
 979+ 8725
 980+ 8725              //  ______________________________________________________________________
 981+ 8725              //
 982+ 8725              // rename
 983+ 8725              //              Colon_Def RENAME, "RENAME", is_normal
 984+ 8725              //              dw      TICK, TO_BODY, NFA
 985+ 8725              //              dw      DUP, CFETCH, LIT, $1F, AND_OP
 986+ 8725              //              dw      TWO_DUP, PLUS
 987+ 8725              //              dw      TO_R
 988+ 8725              //              dw      BL, WORD, LIT, 32, ALLOT
 989+ 8725              //              dw      COUNT, LIT, $1F, AND_OP, ROT, MIN
 990+ 8725              //              dw      TO_R
 991+ 8725              //              dw      SWAP, ONE_PLUS
 992+ 8725              //              dw      R_TO
 993+ 8725              //              dw      CMOVE
 994+ 8725              //              dw      R_OP, CFETCH, LIT, END_BIT, OR_OP
 995+ 8725              //              dw      R_TO
 996+ 8725              //              dw      CSTORE
 997+ 8725              //              dw      LIT, -32, ALLOT
 998+ 8725              //              dw      EXIT
 999+ 8725
1000+ 8725              //  ______________________________________________________________________
1001+ 8725              //
1002+ 8725              // value        n cccc --
1003+ 8725                              Colon_Def VALUE, "VALUE", is_immediate
1003+ 8725             >                New_Def  VALUE, "VALUE", Enter_Ptr, is_immediate ; ok
1003+ 8725             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1003+ 8725             >
1003+ 8725             >                // dummy db directives used to calculate length of namec
1003+ 8725 56 41 4C 55 >                db      "VALUE"
1003+ 8729 45          >
1003+ 872A             >len_NFA         defl    $ - temp_NFA
1003+ 872A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1003+ 8725             >
1003+ 8725 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1003+ 8726 56 41 4C 55 >                db      "VALUE"               // name string in 7-bit ascii, but
1003+ 872A 45          >
1003+ 872B             >                org     $-1                 // alter last byte of Name just above to set
1003+ 872A C5          >                db      {b $} | END_BIT     // msb as name end
1003+ 872B             >
1003+ 872B DF 86       >                dw      last_NFA            // Link to previous definition Name
1003+ 872D             >VALUE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1003+ 872D BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1003+ 872F             >                else
1003+ 872F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1003+ 872F             >                endif           ; ok        // for other definitions it "points" the correct handler
1003+ 872F             >                // Use of "; ok" to suppress "warning[fwdref]"
1003+ 872F             >
1003+ 872F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1004+ 872F F6 6C                        dw      CONSTANT                // [compile] constant
1005+ 8731 95 69                        dw      EXIT                    // ;
1006+ 8733
1007+ 8733              Latest_Definition:
1008+ 8733              //  ______________________________________________________________________
1009+ 8733              //
1010+ 8733              // to           n -- cccc
1011+ 8733              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
1012+ 8733              // All terms are unsigned.
1013+ 8733                              Colon_Def TO, "TO", is_immediate
1013+ 8733             >                New_Def  TO, "TO", Enter_Ptr, is_immediate ; ok
1013+ 8733             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1013+ 8733             >
1013+ 8733             >                // dummy db directives used to calculate length of namec
1013+ 8733 54 4F       >                db      "TO"
1013+ 8735             >len_NFA         defl    $ - temp_NFA
1013+ 8735             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1013+ 8733             >
1013+ 8733 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1013+ 8734 54 4F       >                db      "TO"               // name string in 7-bit ascii, but
1013+ 8736             >                org     $-1                 // alter last byte of Name just above to set
1013+ 8735 CF          >                db      {b $} | END_BIT     // msb as name end
1013+ 8736             >
1013+ 8736 25 87       >                dw      last_NFA            // Link to previous definition Name
1013+ 8738             >TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1013+ 8738 BF 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1013+ 873A             >                else
1013+ 873A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1013+ 873A             >                endif           ; ok        // for other definitions it "points" the correct handler
1013+ 873A             >                // Use of "; ok" to suppress "warning[fwdref]"
1013+ 873A             >
1013+ 873A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1014+ 873A 51 81 A9 70                  dw  TICK, TO_BODY               // ' >body'
1015+ 873E 85 6E CE 6B                  dw  STATE, FETCH                // state @
1016+ 8742                                                              // if
1017+ 8742 7F 64                        dw  ZBRANCH
1018+ 8744 10 00                        dw  To_Else - $
1019+ 8746 6C 71 45 64                  dw      COMPILE, LIT            //      compile lit
1020+ 874A 28 6F                        dw      COMMA                   //      ,
1021+ 874C 6C 71 DB 6B                  dw      COMPILE, STORE          //      compile !
1022+ 8750                                                      // else
1023+ 8750 68 64                        dw  BRANCH
1024+ 8752 04 00                        dw  To_Endif - $
1025+ 8754              To_Else:
1026+ 8754 DB 6B                        dw      STORE                   //      !
1027+ 8756              To_Endif:                                       // endif
1028+ 8756 95 69                        dw  EXIT                        // ;
1029+ 8758
1030+ 8758              Fence_Word:
1031+ 8758
1032+ 8758              //  ______________________________________________________________________
1033+ 8758              //
1034+ 8758              // m+           d1 n -- d2
1035+ 8758              // returns the unsigned sum of two top values
1036+ 8758                              New_Def MPLUS, "M+", is_code, is_normal
1036+ 8758             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1036+ 8758             >
1036+ 8758             >                // dummy db directives used to calculate length of namec
1036+ 8758 4D 2B       >                db      "M+"
1036+ 875A             >len_NFA         defl    $ - temp_NFA
1036+ 875A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1036+ 8758             >
1036+ 8758 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1036+ 8759 4D 2B       >                db      "M+"               // name string in 7-bit ascii, but
1036+ 875B             >                org     $-1                 // alter last byte of Name just above to set
1036+ 875A AB          >                db      {b $} | END_BIT     // msb as name end
1036+ 875B             >
1036+ 875B 33 87       >                dw      last_NFA            // Link to previous definition Name
1036+ 875D             >MPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1036+ 875D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1036+ 875D             >                else
1036+ 875D 5F 87       >                dw      $ + 2   ; ok        // is pointed by CFA
1036+ 875F             >                endif           ; ok        // for other definitions it "points" the correct handler
1036+ 875F             >                // Use of "; ok" to suppress "warning[fwdref]"
1036+ 875F             >
1036+ 875F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1037+ 875F 60                           ld      h, b
1038+ 8760 69                           ld      l, c
1039+ 8761 D1                           pop     de                  // < de := d1-H
1040+ 8762 C1                           pop     bc                  // < n
1041+ 8763 E3                           ex      (sp),hl             // < hl := d1-L > IP
1042+ 8764 09                           add     hl, bc
1043+ 8765 C1                           pop     bc
1044+ 8766
1045+ 8766 30 01                        jr      nc, MPlus_Skip
1046+ 8768 13                               inc     de
1047+ 8769              MPlus_Skip:
1048+ 8769 EB                           ex      de, hl
1049+ 876A                              psh2
1049+ 876A D5          >                push    de
1049+ 876B E5          >                push    hl
1049+ 876C DD E9       >                jp      (ix)
1050+ 876E
1051+ 876E              //  ______________________________________________________________________
1052+ 876E              //
1053+ 876E
1054+ 876E 00           Here_Dictionary db      0
1055+ 876F
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
 113  876F
 114  876F              // now we save the compiled file so we can either run it or debug it
 115  876F                              SAVENEX OPEN "output/main.nex", ORIGIN
 116  876F                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 117  876F                              SAVENEX CFG  0
 118  876F                              SAVENEX BANK 2, 0
 119  876F                              SAVENEX AUTO
 120  876F                              SAVENEX CLOSE
 121  876F
 122  876F              //              PAGE 7 ;set 7 page to current slot
 123  876F              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 124  876F              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 125  876F
 126  876F              //              SAVETAP "output/F15j.tap", CODE, "forth15j", $6400, 9000
 127  876F
 128  876F                              SAVEBIN "output/forth15j.bin", ORIGIN, 9400
 129  876F
 130  876F                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
