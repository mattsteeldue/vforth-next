# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              // v-Forth 1.6 NextZXOS version
   7  0000              // build 2021627
   8  0000              //
   9  0000              //
  10  0000              //  NextZXOS version
  11  0000              //  ______________________________________________________________________
  12  0000              //
  13  0000              //  This work is available as-is with no whatsoever warranty.
  14  0000              //  Copying, modifying and distributing this software is allowed
  15  0000              //  provided that the copyright notice is kept.
  16  0000              //  ______________________________________________________________________
  17  0000              //
  18  0000              //  by Matteo Vitturi, 1990-2021
  19  0000              //
  20  0000              //  https://sites.google.com/view/vforth/vforth15-next
  21  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  22  0000              //
  23  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  24  0000              //  Each line of this source list mustn't exceed 80 bytes.
  25  0000              //  Z80N (ZX Spectrum Next) extension is available.
  26  0000              //
  27  0000              //  This list has been tested using the following configuration:
  28  0000              //      - CSpect emulator V.2.12.30
  29  0000              //  ______________________________________________________________________
  30  0000              //
  31  0000              //  Z80 Registers usage map
  32  0000              //
  33  0000              //  AF
  34  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  35  0000              //  DE - Top of Stack element. The second from top is pointed by SP
  36  0000              //  HL - Working
  37  0000              //
  38  0000              //  AF'- Sometime used for backup purpose
  39  0000              //  BC'- Not used
  40  0000              //  DE'- Not used
  41  0000              //  HL'- Not used: (saved at startup)
  42  0000              //
  43  0000              //  SP - Calculator Stack Pointer
  44  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  45  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  46  0000              //
  47  0000              //  ______________________________________________________________________
  48  0000              //
  49  0000              //  _________________
  50  0000              //
  51  0000              //  FORTH DEFINITIONS
  52  0000              //  _________________
  53  0000
  54  0000                              OPT     --zxnext
  55  0000              //  ______________________________________________________________________
  56  0000              //
  57  0000              // this controls some debugging code in L0.asm
  58  0000              //  0 for final binary release.
  59  0000              //  1 for debugging with Visual Studio Code and DeZog
  60  0000              // -1 for for binary comparison with Forth generated code.
  61  0000              DEBUGGING       equ     -1
  62  0000              //
  63  0000              //  ______________________________________________________________________
  64  0000
  65  0000                              if ( -1 == DEBUGGING )
  66  0000              ORIGIN          equ     $6380                   // for binary comparison
  67  0000                              endif
  68  0000              //  ______________________________________________________________________
  69  0000
  70  0000                              if (  0 == DEBUGGING )
  71  0000 ~            ORIGIN          equ     $6400                   // binary
  72  0000                              endif
  73  0000              //  ______________________________________________________________________
  74  0000
  75  0000                              if (  1 == DEBUGGING )
  76  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  77  0000                              endif
  78  0000              //  ______________________________________________________________________
  79  0000
  80  0000                              DEVICE  ZXSPECTRUMNEXT
  81  0000
  82  0000                              ORG     ORIGIN
  83  6380
  84  6380                              if ( -1 == DEBUGGING )
  85  6380 00 00 00...                  ds 128                            // for binary comparison
  86  6384                              endif
  87  6400
  88  6400              //  ______________________________________________________________________
  89  6400              //
  90  6400              //  Naming convention for Label vs Forth correspondance
  91  6400              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  92  6400              //    - Leading "0" is converted into "Z_"
  93  6400              //    - Leading "(" is converted into "C_", closing bracket is omitted
  94  6400              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  95  6400              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  96  6400              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  97  6400              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  98  6400              //    - Greater-Than sign ">" in _GREATER or TO_ depending
  99  6400              //    - Equal sign "=" is converted in EQUAL
 100  6400              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 101  6400              //    - Asterisk sign "*" is converted in _MUL or STAR
 102  6400              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 103  6400              //    - Exclamation mark "!" is converted in STORE
 104  6400              //    - At-Sign "@" is converted in FETCH
 105  6400              //    - Words that collides with Assembler are normally suffixed with "_OP"
 106  6400
 107  6400                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
   1+ 6400              //  ______________________________________________________________________
   2+ 6400              //
   3+ 6400              //  system.asm
   4+ 6400              //  ______________________________________________________________________
   5+ 6400
   6+ 6400              // Registers:
   7+ 6400              //
   8+ 6400              //      BC: Instruction Pointer
   9+ 6400              //      DE:
  10+ 6400              //      HL: W register
  11+ 6400              //      SP: Calc stack Pointer
  12+ 6400              //      IX: Inner-Interpreter Address
  13+ 6400
  14+ 6400              //  ______________________________________________________________________
  15+ 6400              //
  16+ 6400              // ZX-Spectrum standard system variables
  17+ 6400              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6400              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6400              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6400              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6400
  22+ 6400              //  ______________________________________________________________________
  23+ 6400              //
  24+ 6400              // Flag constants
  25+ 6400              TRUE_FLAG       equ     $FFFF
  26+ 6400              FALSE_FLAG      equ     $0000
  27+ 6400
  28+ 6400              //  ______________________________________________________________________
  29+ 6400              //
  30+ 6400              // Ascii char constants
  31+ 6400              NUL_CHAR        equ     $00
  32+ 6400              COMMA_CHAR      equ     $06
  33+ 6400              BACKSPACE_CHAR  equ     $08
  34+ 6400              CR_CHAR         equ     $0D
  35+ 6400              BLANK_CHAR      equ     $20
  36+ 6400              QUOTE_CHAR      equ     "'"
  37+ 6400              DQUOTE_CHAR     equ     '"'
  38+ 6400              UNDERSCORE_CHAR equ     $5F
  39+ 6400              SOLIDBLOCK_CHAR equ     $8F
  40+ 6400              HALFBLOCK_CHAR  equ     $8C
  41+ 6400              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6400              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6400
  44+ 6400
  45+ 6400              //  ______________________________________________________________________
  46+ 6400              //
  47+ 6400
  48+ 6400                              // emulate something like:  ld hl,rp
  49+ 6400              ldhlrp          macro
  50+ 6400 ~                            ld      hl,(RP_Pointer)
  51+ 6400                              endm
  52+ 6400
  53+ 6400                              // emulate something like:  ld rp,hl
  54+ 6400              ldrphl          macro
  55+ 6400 ~                            ld      (RP_Pointer),hl
  56+ 6400                              endm
  57+ 6400
  58+ 6400              //  ______________________________________________________________________
  59+ 6400              //
  60+ 6400              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6400              next            macro
  62+ 6400 ~                            jp      (ix)
  63+ 6400                              endm
  64+ 6400
  65+ 6400              psh1            macro
  66+ 6400 ~                            push    hl
  67+ 6400 ~                            jp      (ix)
  68+ 6400                              endm
  69+ 6400
  70+ 6400              psh2            macro
  71+ 6400 ~                            push    de
  72+ 6400 ~                            push    hl
  73+ 6400 ~                            jp      (ix)
  74+ 6400                              endm
  75+ 6400
  76+ 6400              //  ______________________________________________________________________
  77+ 6400              //
  78+ 6400              // Bit constants in length-byte
  79+ 6400
  80+ 6400              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6400              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6400              END_BIT         equ     %10000000               // $80
  83+ 6400
  84+ 6400
  85+ 6400              //  ______________________________________________________________________
  86+ 6400              //
  87+ 6400              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6400              //  pointers
  89+ 6400              temp_NFA        defl    0
  90+ 6400              last_NFA        defl    0
  91+ 6400              len_NFA         defl    0
  92+ 6400
  93+ 6400              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6400              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6400              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6400
  97+ 6400              //  ______________________________________________________________________
  98+ 6400              //
  99+ 6400              //  Create a new "low-level" definition
 100+ 6400              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6400              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6400              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6400              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6400              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6400              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6400              //  This macro acts much like the standard Forth definition CREATE
 107+ 6400
 108+ 6400              New_Def         macro   label, namec, runcode, bits
 109+ 6400 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6400 ~
 111+ 6400 ~                            // dummy db directives used to calculate length of namec
 112+ 6400 ~                            db      namec
 113+ 6400 ~            len_NFA         defl    $ - temp_NFA
 114+ 6400 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6400 ~
 116+ 6400 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6400 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6400 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6400 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6400 ~
 121+ 6400 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6400 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6400 ~                            dw      runcode ; ok        // for primitive definitions  actual code
 124+ 6400 ~                            else
 125+ 6400 ~                            dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6400 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6400 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6400 ~
 129+ 6400 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6400                              endm
 131+ 6400
 132+ 6400              //  ______________________________________________________________________
 133+ 6400              //
 134+ 6400              // Create a "constant"
 135+ 6400              // The constant value is compiled in first PFA cell
 136+ 6400              Constant_Def    macro   label, namec, constant_value
 137+ 6400 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6400 ~                            dw      constant_value
 139+ 6400                              endm
 140+ 6400
 141+ 6400              //  ______________________________________________________________________
 142+ 6400              //
 143+ 6400              // Create a "variable"
 144+ 6400              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6400              // this allow creation of "variables" which content is  of any length
 146+ 6400              Variable_Def    macro   label, namec, initial_value
 147+ 6400 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6400 ~                            dw      initial_value
 149+ 6400                              endm
 150+ 6400
 151+ 6400              //  ______________________________________________________________________
 152+ 6400              //
 153+ 6400              // Create a "user"
 154+ 6400              // It uses a single byte as offset to calculate the address of the variable
 155+ 6400              User_Def        macro   label, namec, offset_value
 156+ 6400 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6400 ~                            db      offset_value
 158+ 6400                              endm
 159+ 6400
 160+ 6400              //  ______________________________________________________________________
 161+ 6400              //
 162+ 6400              // Create a "colon-definition"
 163+ 6400              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6400              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6400              Colon_Def       macro   label, namec, bits
 166+ 6400 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6400                              endm
 168+ 6400
 169+ 6400              //  ______________________________________________________________________
 170+ 6400              //
 171+ 6400
 172+ 6400              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6400              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6400              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6400              USER_system:    equ     $D188               // User variables zone.
 176+ 6400              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6400              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6400
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
 108  6400                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
   1+ 6400              //  ______________________________________________________________________
   2+ 6400              //
   3+ 6400              //  L0.asm
   4+ 6400              //
   5+ 6400              //  Origin-Area and Level-0 definitions
   6+ 6400              //  ______________________________________________________________________
   7+ 6400
   8+ 6400
   9+ 6400              Cold_origin:
  10+ 6400 A7                           and     a
  11+ 6401 C3 2F 79                     jp      ColdRoutine
  12+ 6404              Warm_origin:
  13+ 6404 37                           scf
  14+ 6405 C3 2F 79                     jp      WarmRoutine
  15+ 6408
  16+ 6408              // +008
  17+ 6408 E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 640A
  19+ 640A              // +00A
  20+ 640A 00 0E                        dw      $0E00
  21+ 640C
  22+ 640C              // +00C
  23+ 640C E9 86        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 640E
  25+ 640E              // +00E
  26+ 640E 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6410
  28+ 6410              // +010
  29+ 6410 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6412
  31+ 6412              // +012
  32+ 6412 E8 D0        S0_origin:      dw      S0_system
  33+ 6414 88 D1        R0_origin:      dw      R0_system
  34+ 6416 E8 D0        TIB_origin:     dw      TIB_system
  35+ 6418 1F 00        WIDTH_origin:   dw      31
  36+ 641A 01 00        WARNING_origin: dw      1
  37+ 641C 2F 87        FENCE_origin:   dw      Fence_Word
  38+ 641E 2F 87        DP_origin       dw      Fence_Word
  39+ 6420 3D 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6422 E4 D1                        dw      FIRST_system
  41+ 6424 00 E0                        dw      LIMIT_system
  42+ 6426
  43+ 6426              // +026
  44+ 6426 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 6427 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 6428 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 6429 00                           db      0
  48+ 642A
  49+ 642A              // +02A
  50+ 642A 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 642C
  52+ 642C              // +02C
  53+ 642C 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 642E
  55+ 642E              // +02E
  56+ 642E 88 D1        USER_Pointer:   dw      USER_system
  57+ 6430
  58+ 6430              // +030
  59+ 6430 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6432
  61+ 6432              // +32
  62+ 6432              // SP_Basic        dw      0
  63+ 6432
  64+ 6432
  65+ 6432              //  ______________________________________________________________________
  66+ 6432
  67+ 6432              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6432              // instead of their equivalent long sequences.
  69+ 6432
  70+ 6432              //  ______________________________________________________________________
  71+ 6432
  72+ 6432              // address for "next" - inner interpreter
  73+ 6432              // This address must always be pointed by IX
  74+ 6432              // "next" macro simply does a  jp(ix)  instruction
  75+ 6432
  76+ 6432              // Psh2_Ptr:       push    de
  77+ 6432              // Psh1_Ptr:       push    hl
  78+ 6432
  79+ 6432              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6432
  81+ 6432                              if ( 1 == DEBUGGING )
  82+ 6432 ~                            ld      hl, Next_Breakpoint_1
  83+ 6432 ~                            and     a
  84+ 6432 ~                            sbc     hl, bc
  85+ 6432 ~                            jr      nz, Next_Continue
  86+ 6432 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6432                              endif
  88+ 6432
  89+ 6432              Next_Continue:
  90+ 6432 0A                           ld      a, (bc)
  91+ 6433 03                           inc     bc
  92+ 6434 6F                           ld      l, a
  93+ 6435 0A                           ld      a, (bc)
  94+ 6436 03                           inc     bc
  95+ 6437 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 6438
  97+ 6438              // Execute xt i.e. CFA held in HL
  98+ 6438              Exec_Ptr:
  99+ 6438 5E                           ld      e, (hl)
 100+ 6439 23                           inc     hl
 101+ 643A 56                           ld      d, (hl)
 102+ 643B EB                           ex      de, hl
 103+ 643C E9                           jp      (hl)                // and jump to it
 104+ 643D                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 643D
 106+ 643D              //  ______________________________________________________________________
 107+ 643D              //
 108+ 643D              // lit          -- x
 109+ 643D              // puts on top of stack the value of the following word.
 110+ 643D              // it is compiled in colon definition before a literal number
 111+ 643D
 112+ 643D                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 643D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 643D             >
 112+ 643D             >                // dummy db directives used to calculate length of namec
 112+ 643D 4C 49 54    >                db      "LIT"
 112+ 6440             >len_NFA         defl    $ - temp_NFA
 112+ 6440             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 643D             >
 112+ 643D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 643E 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 6441             >                org     $-1                 // alter last byte of Name just above to set
 112+ 6440 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 6441             >
 112+ 6441 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 6443             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 6443 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 112+ 6443             >                else
 112+ 6443 45 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 112+ 6445             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 6445             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 6445             >
 112+ 6445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 6445
 114+ 6445 0A                           ld      a, (bc)
 115+ 6446 03                           inc     bc
 116+ 6447 6F                           ld      l, a
 117+ 6448 0A                           ld      a, (bc)
 118+ 6449 03                           inc     bc
 119+ 644A 67                           ld      h, a
 120+ 644B                              psh1
 120+ 644B E5          >                push    hl
 120+ 644C DD E9       >                jp      (ix)
 121+ 644E
 122+ 644E              //  ______________________________________________________________________
 123+ 644E              //
 124+ 644E              // execute      i*x xt -- j*x
 125+ 644E              // execution token. usually xt is given by CFA
 126+ 644E
 127+ 644E                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 644E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 644E             >
 127+ 644E             >                // dummy db directives used to calculate length of namec
 127+ 644E 45 58 45 43 >                db      "EXECUTE"
 127+ 6452 55 54 45    >
 127+ 6455             >len_NFA         defl    $ - temp_NFA
 127+ 6455             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 644E             >
 127+ 644E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 644F 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 6453 55 54 45    >
 127+ 6456             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6455 C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 6456             >
 127+ 6456 3D 64       >                dw      last_NFA            // Link to previous definition Name
 127+ 6458             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6458 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 127+ 6458             >                else
 127+ 6458 5A 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 645A             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 645A             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 645A             >
 127+ 645A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 645A E1                           pop     hl
 129+ 645B 18 DB                        jr      Exec_Ptr
 130+ 645D
 131+ 645D
 132+ 645D              //  ______________________________________________________________________
 133+ 645D              //
 134+ 645D              // branch       --
 135+ 645D              // unconditional branch in colon definition using the following cell as an offset from current IP value
 136+ 645D              // compiled by ELSE, AGAIN and some other immediate words
 137+ 645D
 138+ 645D                              New_Def BRANCH, "BRANCH", is_code, is_normal
 138+ 645D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ 645D             >
 138+ 645D             >                // dummy db directives used to calculate length of namec
 138+ 645D 42 52 41 4E >                db      "BRANCH"
 138+ 6461 43 48       >
 138+ 6463             >len_NFA         defl    $ - temp_NFA
 138+ 6463             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ 645D             >
 138+ 645D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ 645E 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 138+ 6462 43 48       >
 138+ 6464             >                org     $-1                 // alter last byte of Name just above to set
 138+ 6463 C8          >                db      {b $} | END_BIT     // msb as name end
 138+ 6464             >
 138+ 6464 4E 64       >                dw      last_NFA            // Link to previous definition Name
 138+ 6466             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 6466 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 138+ 6466             >                else
 138+ 6466 68 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 138+ 6468             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 6468             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 6468             >
 138+ 6468             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6468              Branch_Ptr:
 140+ 6468 60                           ld      h, b
 141+ 6469 69                           ld      l, c
 142+ 646A 5E                           ld      e, (hl)
 143+ 646B 23                           inc     hl
 144+ 646C 56                           ld      d, (hl)
 145+ 646D 2B                           dec     hl                  // offset is calculated from current IP
 146+ 646E 19                           add     hl, de
 147+ 646F 4D                           ld      c, l
 148+ 6470 44                           ld      b, h
 149+ 6471                              next
 149+ 6471 DD E9       >                jp      (ix)
 150+ 6473
 151+ 6473
 152+ 6473              //  ______________________________________________________________________
 153+ 6473              //
 154+ 6473              // 0branch      f --
 155+ 6473              // conditional branch if the top-of-stack is ZERO or FALSE.
 156+ 6473              // compiled by IF, UNTIL and some other immediate words
 157+ 6473
 158+ 6473                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 158+ 6473             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6473             >
 158+ 6473             >                // dummy db directives used to calculate length of namec
 158+ 6473 30 42 52 41 >                db      "0BRANCH"
 158+ 6477 4E 43 48    >
 158+ 647A             >len_NFA         defl    $ - temp_NFA
 158+ 647A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6473             >
 158+ 6473 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6474 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 158+ 6478 4E 43 48    >
 158+ 647B             >                org     $-1                 // alter last byte of Name just above to set
 158+ 647A C8          >                db      {b $} | END_BIT     // msb as name end
 158+ 647B             >
 158+ 647B 5D 64       >                dw      last_NFA            // Link to previous definition Name
 158+ 647D             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 647D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 158+ 647D             >                else
 158+ 647D 7F 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 647F             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 647F             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 647F             >
 158+ 647F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 647F              ZBranch_Ptr:
 160+ 647F E1                           pop     hl
 161+ 6480 7D                           ld      a, l
 162+ 6481 B4                           or      h
 163+ 6482 CA 68 64                     jp      z, Branch_Ptr
 164+ 6485 03                           inc     bc                  // if not branch, skip offset cell.
 165+ 6486 03                           inc     bc
 166+ 6487                              next
 166+ 6487 DD E9       >                jp      (ix)
 167+ 6489
 168+ 6489              //  ______________________________________________________________________
 169+ 6489              //
 170+ 6489              // (loop)       --
 171+ 6489              // compiled by +LOOP. it uses the top two values of return-stack to
 172+ 6489              // keep track of index and limit
 173+ 6489                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 173+ 6489             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6489             >
 173+ 6489             >                // dummy db directives used to calculate length of namec
 173+ 6489 28 4C 4F 4F >                db      "(LOOP)"
 173+ 648D 50 29       >
 173+ 648F             >len_NFA         defl    $ - temp_NFA
 173+ 648F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6489             >
 173+ 6489 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 648A 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 173+ 648E 50 29       >
 173+ 6490             >                org     $-1                 // alter last byte of Name just above to set
 173+ 648F A9          >                db      {b $} | END_BIT     // msb as name end
 173+ 6490             >
 173+ 6490 73 64       >                dw      last_NFA            // Link to previous definition Name
 173+ 6492             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6492 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 173+ 6492             >                else
 173+ 6492 94 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6494             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6494             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6494             >
 173+ 6494             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6494
 175+ 6494
 176+ 6494 11 01 00                     ld      de, 1               // bc contains increment of 1
 177+ 6497
 178+ 6497
 179+ 6497
 180+ 6497
 181+ 6497
 182+ 6497
 183+ 6497
 184+ 6497
 185+ 6497              Loop_Ptr:
 186+ 6497                              ldhlrp                      // ld hl,rp macro 30h +Origin
 186+ 6497 2A 30 64    >                ld      hl,(RP_Pointer)
 187+ 649A 7E                           ld      a, (hl)             // hl points to loop-index, add increment de to it.
 188+ 649B 83                           add     e
 189+ 649C 77                           ld      (hl), a
 190+ 649D 5F                           ld      e, a
 191+ 649E 23                           inc     hl
 192+ 649F 7E                           ld      a, (hl)
 193+ 64A0 8A                           adc     d
 194+ 64A1 77                           ld      (hl),a
 195+ 64A2 23                           inc     hl                  // hl now points to loop-limit
 196+ 64A3 CB 7A                        bit     7, d                // keep increment-sign just before overwriting d
 197+ 64A5 57                           ld      d, a
 198+ 64A6 20 07                        jr      nz, Loop_NegativeIncrement
 199+ 64A8
 200+ 64A8 7B                               ld      a, e
 201+ 64A9 96                               sub     (hl)
 202+ 64AA 7A                               ld      a, d
 203+ 64AB 23                               inc     hl
 204+ 64AC 9E                               sbc     (hl)
 205+ 64AD 18 05                        jr      Loop_Endif              // else
 206+ 64AF              Loop_NegativeIncrement:
 207+ 64AF 7E                               ld      a, (hl)
 208+ 64B0 93                               sub     e
 209+ 64B1 23                               inc     hl
 210+ 64B2 7E                               ld      a, (hl)
 211+ 64B3 9A                               sbc     d
 212+ 64B4              Loop_Endif:
 213+ 64B4
 214+ 64B4 FA 68 64                     jp      m, Branch_Ptr       // perform branch consuming following cell
 215+ 64B7
 216+ 64B7 23                           inc     hl
 217+ 64B8                              ldrphl                      // ld rp,hl macro 30h +Origin
 217+ 64B8 22 30 64    >                ld      (RP_Pointer),hl
 218+ 64BB
 219+ 64BB 03                           inc     bc                  // skip branch-style offset
 220+ 64BC 03                           inc     bc
 221+ 64BD                              next
 221+ 64BD DD E9       >                jp      (ix)
 222+ 64BF
 223+ 64BF              //  ______________________________________________________________________
 224+ 64BF              //
 225+ 64BF              // (+loop)       n --
 226+ 64BF              // same as (LOOP) but index is incremented by n (instead of just 1)
 227+ 64BF              // compiled by +LOOP.
 228+ 64BF                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 228+ 64BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 228+ 64BF             >
 228+ 64BF             >                // dummy db directives used to calculate length of namec
 228+ 64BF 28 2B 4C 4F >                db      "(+LOOP)"
 228+ 64C3 4F 50 29    >
 228+ 64C6             >len_NFA         defl    $ - temp_NFA
 228+ 64C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 228+ 64BF             >
 228+ 64BF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 228+ 64C0 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 228+ 64C4 4F 50 29    >
 228+ 64C7             >                org     $-1                 // alter last byte of Name just above to set
 228+ 64C6 A9          >                db      {b $} | END_BIT     // msb as name end
 228+ 64C7             >
 228+ 64C7 89 64       >                dw      last_NFA            // Link to previous definition Name
 228+ 64C9             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 228+ 64C9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 228+ 64C9             >                else
 228+ 64C9 CB 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 228+ 64CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 228+ 64CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 228+ 64CB             >
 228+ 64CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 229+ 64CB D1                           pop     de
 230+ 64CC C3 97 64                     jp      Loop_Ptr
 231+ 64CF
 232+ 64CF              //  ______________________________________________________________________
 233+ 64CF              //
 234+ 64CF              // (?do)        lim ind --
 235+ 64CF              // compiled by ?DO to make a loop checking for lim == ind first
 236+ 64CF              // at run-time (?DO) must be followed by a BRANCH offset
 237+ 64CF              // used to skip the loop if lim == ind
 238+ 64CF                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 238+ 64CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 238+ 64CF             >
 238+ 64CF             >                // dummy db directives used to calculate length of namec
 238+ 64CF 28 3F 44 4F >                db      "(?DO)"
 238+ 64D3 29          >
 238+ 64D4             >len_NFA         defl    $ - temp_NFA
 238+ 64D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 238+ 64CF             >
 238+ 64CF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 238+ 64D0 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 238+ 64D4 29          >
 238+ 64D5             >                org     $-1                 // alter last byte of Name just above to set
 238+ 64D4 A9          >                db      {b $} | END_BIT     // msb as name end
 238+ 64D5             >
 238+ 64D5 BF 64       >                dw      last_NFA            // Link to previous definition Name
 238+ 64D7             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 238+ 64D7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 238+ 64D7             >                else
 238+ 64D7 D9 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 238+ 64D9             >                endif           ; ok        // for other definitions it "points" the correct handler
 238+ 64D9             >                // Use of "; ok" to suppress "warning[fwdref]"
 238+ 64D9             >
 238+ 64D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 239+ 64D9 D1                           pop     de                  // de has the index
 240+ 64DA E1                           pop     hl                  // hl has the limit
 241+ 64DB E5                           push    hl
 242+ 64DC D5                           push    de
 243+ 64DD A7                           and     a                   // reset carry flag
 244+ 64DE ED 52                        sbc     hl, de              // compute limit - index
 245+ 64E0 20 05                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 246+ 64E2 D1                               pop     de
 247+ 64E3 E1                               pop     hl
 248+ 64E4
 249+ 64E4 C3 68 64                         jp      Branch_Ptr          // perform branch consuming following cell
 250+ 64E7              Do_Ptr:
 251+ 64E7                              ldhlrp                      // prepare RP
 251+ 64E7 2A 30 64    >                ld      hl,(RP_Pointer)
 252+ 64EA 2B                           dec     hl
 253+ 64EB 2B                           dec     hl
 254+ 64EC 2B                           dec     hl
 255+ 64ED 2B                           dec     hl
 256+ 64EE                              ldrphl
 256+ 64EE 22 30 64    >                ld      (RP_Pointer),hl
 257+ 64F1
 258+ 64F1                              // store index as top RP
 259+ 64F1 D1                           pop     de
 260+ 64F2 73                           ld      (hl), e
 261+ 64F3 23                           inc     hl
 262+ 64F4 72                           ld      (hl), d
 263+ 64F5 23                           inc     hl
 264+ 64F6                              // stores lim as second from top RP
 265+ 64F6 D1                           pop     de
 266+ 64F7 73                           ld      (hl), e
 267+ 64F8 23                           inc     hl
 268+ 64F9 72                           ld      (hl), d
 269+ 64FA
 270+ 64FA                              // skip branch-style offseet
 271+ 64FA 03                           inc     bc
 272+ 64FB 03                           inc     bc
 273+ 64FC                              next
 273+ 64FC DD E9       >                jp      (ix)
 274+ 64FE
 275+ 64FE              //  ______________________________________________________________________
 276+ 64FE              //
 277+ 64FE              // (do)        lim ind --
 278+ 64FE              // compiled by DO to make a loop checking for lim == ind first
 279+ 64FE              // this is a simpler version of (?DO)
 280+ 64FE                              New_Def C_DO, "(DO)", is_code, is_normal
 280+ 64FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 280+ 64FE             >
 280+ 64FE             >                // dummy db directives used to calculate length of namec
 280+ 64FE 28 44 4F 29 >                db      "(DO)"
 280+ 6502             >len_NFA         defl    $ - temp_NFA
 280+ 6502             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 280+ 64FE             >
 280+ 64FE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 280+ 64FF 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 280+ 6503             >                org     $-1                 // alter last byte of Name just above to set
 280+ 6502 A9          >                db      {b $} | END_BIT     // msb as name end
 280+ 6503             >
 280+ 6503 CF 64       >                dw      last_NFA            // Link to previous definition Name
 280+ 6505             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 280+ 6505 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 280+ 6505             >                else
 280+ 6505 07 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 280+ 6507             >                endif           ; ok        // for other definitions it "points" the correct handler
 280+ 6507             >                // Use of "; ok" to suppress "warning[fwdref]"
 280+ 6507             >
 280+ 6507             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 281+ 6507 0B                           dec     bc                  // prepare IP beforehand
 282+ 6508 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 283+ 6509 C3 E7 64                     jp      Do_Ptr
 284+ 650C
 285+ 650C              //  ______________________________________________________________________
 286+ 650C              //
 287+ 650C              // i            -- n
 288+ 650C              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 289+ 650C              // the current value of the index-loop
 290+ 650C                              New_Def I, "I", is_code, is_normal
 290+ 650C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 650C             >
 290+ 650C             >                // dummy db directives used to calculate length of namec
 290+ 650C 49          >                db      "I"
 290+ 650D             >len_NFA         defl    $ - temp_NFA
 290+ 650D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 650C             >
 290+ 650C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 650D 49          >                db      "I"               // name string in 7-bit ascii, but
 290+ 650E             >                org     $-1                 // alter last byte of Name just above to set
 290+ 650D C9          >                db      {b $} | END_BIT     // msb as name end
 290+ 650E             >
 290+ 650E FE 64       >                dw      last_NFA            // Link to previous definition Name
 290+ 6510             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 6510 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 290+ 6510             >                else
 290+ 6510 12 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 6512             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 6512             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 6512             >
 290+ 6512             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 6512              I_Ptr:
 292+ 6512
 293+ 6512                              ldhlrp
 293+ 6512 2A 30 64    >                ld      hl,(RP_Pointer)
 294+ 6515 5E                           ld      e, (hl)
 295+ 6516 23                           inc     hl
 296+ 6517 56                           ld      d, (hl)
 297+ 6518 D5                           push    de
 298+ 6519                              next
 298+ 6519 DD E9       >                jp      (ix)
 299+ 651B
 300+ 651B              //  ______________________________________________________________________
 301+ 651B              //
 302+ 651B              // digit        c n -- u 1  |  0
 303+ 651B              // convert a character c using base n
 304+ 651B              // returns a unsigned number and a true flag
 305+ 651B              // or just a false flag if the conversion fails
 306+ 651B                              New_Def DIGIT, "DIGIT", is_code, is_normal
 306+ 651B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 306+ 651B             >
 306+ 651B             >                // dummy db directives used to calculate length of namec
 306+ 651B 44 49 47 49 >                db      "DIGIT"
 306+ 651F 54          >
 306+ 6520             >len_NFA         defl    $ - temp_NFA
 306+ 6520             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 306+ 651B             >
 306+ 651B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 306+ 651C 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 306+ 6520 54          >
 306+ 6521             >                org     $-1                 // alter last byte of Name just above to set
 306+ 6520 D4          >                db      {b $} | END_BIT     // msb as name end
 306+ 6521             >
 306+ 6521 0C 65       >                dw      last_NFA            // Link to previous definition Name
 306+ 6523             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 306+ 6523 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 306+ 6523             >                else
 306+ 6523 25 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 306+ 6525             >                endif           ; ok        // for other definitions it "points" the correct handler
 306+ 6525             >                // Use of "; ok" to suppress "warning[fwdref]"
 306+ 6525             >
 306+ 6525             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 307+ 6525 E1                           pop     hl                  // l has the base
 308+ 6526 D1                           pop     de                  // e has the digit
 309+ 6527 7B                           ld      a, e
 310+ 6528 FE 60                        cp      $60                 // check if lowercase
 311+ 652A 38 02                        jr      c, Digit_Uppercase
 312+ 652C D6 20                            sub     $20                 // quick'n'dirty uppercase
 313+ 652E              Digit_Uppercase:
 314+ 652E D6 30                        sub     $30
 315+ 6530 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 316+ 6532 FE 0A                            cp      $0A
 317+ 6534 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 318+ 6536 D6 07                                sub     7                   // try hex and subtract 7
 319+ 6538 FE 0A                                cp      $0A
 320+ 653A 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 321+ 653C
 322+ 653C              Digit_Decimal:
 323+ 653C                              // compare digit
 324+ 653C BD                           cp      l                   // compare with base
 325+ 653D
 326+ 653D 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 327+ 653F 5F                               ld      e, a                // digit is returned as second from TOS
 328+ 6540 21 01 00                         ld      hl, 1
 329+ 6543
 330+ 6543                                  psh2
 330+ 6543 D5          >                push    de
 330+ 6544 E5          >                push    hl
 330+ 6545 DD E9       >                jp      (ix)
 331+ 6547              Digit_Fail:
 332+ 6547 21 00 00                     ld      hl, 0
 333+ 654A                              psh1
 333+ 654A E5          >                push    hl
 333+ 654B DD E9       >                jp      (ix)
 334+ 654D
 335+ 654D              //  ______________________________________________________________________
 336+ 654D              //
 337+ 654D              //  parametric uppercase routine
 338+ 654D              //  depending on the following op-code the routine can be by-passed
 339+ 654D              //  changing the behaviour of some callers.
 340+ 654D              //  If it is "ret" then the system is Case-Sensitive
 341+ 654D              //  If it is "Nop" then the system is Case-Insensitive
 342+ 654D              //  Only A register is touched.
 343+ 654D 00           Case_Sensitive: nop                         // Default is case-insensitive.
 344+ 654E              Case_Upper:
 345+ 654E FE 61                        cp      LC_A_CHAR           // lower-case "a"
 346+ 6550 D8                           ret     c                   // no change if A < "a"
 347+ 6551 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 348+ 6553 D0                           ret     nc                  // no change if A > "z"
 349+ 6554 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 350+ 6556 C9                           ret
 351+ 6557
 352+ 6557              //  ______________________________________________________________________
 353+ 6557              //
 354+ 6557              //  caseon      --
 355+ 6557              // set system case-sensitivity on
 356+ 6557              // it patches a RET/NOP at the beginning of the uppercase-routine
 357+ 6557                              New_Def CASEON, "CASEON", is_code, is_normal
 357+ 6557             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ 6557             >
 357+ 6557             >                // dummy db directives used to calculate length of namec
 357+ 6557 43 41 53 45 >                db      "CASEON"
 357+ 655B 4F 4E       >
 357+ 655D             >len_NFA         defl    $ - temp_NFA
 357+ 655D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ 6557             >
 357+ 6557 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ 6558 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 357+ 655C 4F 4E       >
 357+ 655E             >                org     $-1                 // alter last byte of Name just above to set
 357+ 655D CE          >                db      {b $} | END_BIT     // msb as name end
 357+ 655E             >
 357+ 655E 1B 65       >                dw      last_NFA            // Link to previous definition Name
 357+ 6560             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 6560 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 357+ 6560             >                else
 357+ 6560 62 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 357+ 6562             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 6562             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 6562             >
 357+ 6562             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 6562 3E C9                        ld      a, $C9              // "ret"
 359+ 6564 32 4D 65                     ld      (Case_Sensitive), a
 360+ 6567                              next
 360+ 6567 DD E9       >                jp      (ix)
 361+ 6569
 362+ 6569              //  ______________________________________________________________________
 363+ 6569              //
 364+ 6569              //  caseoff     --
 365+ 6569              // set system case-sensitivity on
 366+ 6569              // it patches a RET/NOP at the beginning of the uppercase-routine
 367+ 6569                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 367+ 6569             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 367+ 6569             >
 367+ 6569             >                // dummy db directives used to calculate length of namec
 367+ 6569 43 41 53 45 >                db      "CASEOFF"
 367+ 656D 4F 46 46    >
 367+ 6570             >len_NFA         defl    $ - temp_NFA
 367+ 6570             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 367+ 6569             >
 367+ 6569 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 367+ 656A 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 367+ 656E 4F 46 46    >
 367+ 6571             >                org     $-1                 // alter last byte of Name just above to set
 367+ 6570 C6          >                db      {b $} | END_BIT     // msb as name end
 367+ 6571             >
 367+ 6571 57 65       >                dw      last_NFA            // Link to previous definition Name
 367+ 6573             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 367+ 6573 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 367+ 6573             >                else
 367+ 6573 75 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 367+ 6575             >                endif           ; ok        // for other definitions it "points" the correct handler
 367+ 6575             >                // Use of "; ok" to suppress "warning[fwdref]"
 367+ 6575             >
 367+ 6575             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 368+ 6575 3E 00                        ld      a, $00              // "nop"
 369+ 6577 32 4D 65                     ld      (Case_Sensitive), a
 370+ 657A                              next
 370+ 657A DD E9       >                jp      (ix)
 371+ 657C
 372+ 657C              //  ______________________________________________________________________
 373+ 657C              //
 374+ 657C              //  upper       c1 -- c1 | c2
 375+ 657C              // character on top of stack is forced to Uppercase.
 376+ 657C                              New_Def UPPER, "UPPER", is_code, is_normal
 376+ 657C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 376+ 657C             >
 376+ 657C             >                // dummy db directives used to calculate length of namec
 376+ 657C 55 50 50 45 >                db      "UPPER"
 376+ 6580 52          >
 376+ 6581             >len_NFA         defl    $ - temp_NFA
 376+ 6581             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 376+ 657C             >
 376+ 657C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 376+ 657D 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 376+ 6581 52          >
 376+ 6582             >                org     $-1                 // alter last byte of Name just above to set
 376+ 6581 D2          >                db      {b $} | END_BIT     // msb as name end
 376+ 6582             >
 376+ 6582 69 65       >                dw      last_NFA            // Link to previous definition Name
 376+ 6584             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 376+ 6584 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 376+ 6584             >                else
 376+ 6584 86 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 376+ 6586             >                endif           ; ok        // for other definitions it "points" the correct handler
 376+ 6586             >                // Use of "; ok" to suppress "warning[fwdref]"
 376+ 6586             >
 376+ 6586             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 377+ 6586 E1                           pop     hl
 378+ 6587 7D                           ld      a, l
 379+ 6588 CD 4E 65                     call    Case_Upper
 380+ 658B 6F                           ld      l, a
 381+ 658C
 382+ 658C                              psh1
 382+ 658C E5          >                push    hl
 382+ 658D DD E9       >                jp      (ix)
 383+ 658F
 384+ 658F              //  ______________________________________________________________________
 385+ 658F              //
 386+ 658F              // (find)       addr voc -- addr 0 | cfa b 1
 387+ 658F              // vocabulary search,
 388+ 658F              // - voc is starting word's NFA
 389+ 658F              // - addr is the string to be searched for
 390+ 658F              // On success, it returns the CFA of found word, the first NFA byte
 391+ 658F              // (which contains length and some flags) and a true flag.
 392+ 658F              // On fail, a false flag  (no more: leaves addr unchanged)
 393+ 658F                              New_Def C_FIND, "(FIND)", is_code, is_normal
 393+ 658F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 658F             >
 393+ 658F             >                // dummy db directives used to calculate length of namec
 393+ 658F 28 46 49 4E >                db      "(FIND)"
 393+ 6593 44 29       >
 393+ 6595             >len_NFA         defl    $ - temp_NFA
 393+ 6595             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 658F             >
 393+ 658F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 6590 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 393+ 6594 44 29       >
 393+ 6596             >                org     $-1                 // alter last byte of Name just above to set
 393+ 6595 A9          >                db      {b $} | END_BIT     // msb as name end
 393+ 6596             >
 393+ 6596 7C 65       >                dw      last_NFA            // Link to previous definition Name
 393+ 6598             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 6598 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 393+ 6598             >                else
 393+ 6598 9A 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 659A             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 659A             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 659A             >
 393+ 659A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 659A                                                              // de has dictionary pointer
 395+ 659A D1                               pop     de
 396+ 659B              Find_VocabularyLoop:
 397+ 659B E1                               pop     hl                  // string pointer to search for
 398+ 659C E5                               push    hl                  // keep it on stack too for the end.
 399+ 659D 1A                               ld      a, (de)             // save NFA length byte
 400+ 659E 08                               ex      af,af'              // for later use (!)
 401+ 659F 1A                               ld      a, (de)             // reload NFA length byte
 402+ 65A0 AE                               xor     (hl)                // check if same length
 403+ 65A1 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 404+ 65A3                                  // word an text haven't the same length, skip to next vocabulary entry
 405+ 65A3 20 2C                            jr      nz, Find_DifferentLenght
 406+ 65A5
 407+ 65A5              Find_ThisWord:  // begin loop
 408+ 65A5 23                                   inc     hl
 409+ 65A6 13                                   inc     de
 410+ 65A7 1A                                   ld      a, (de)
 411+ 65A8                                      // case insensitive option - begin
 412+ 65A8 C5                                   push    bc
 413+ 65A9 E6 80                                and     $80                 // split A in msb and the rest
 414+ 65AB 47                                   ld      b, a
 415+ 65AC 1A                                   ld      a, (de)
 416+ 65AD E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 417+ 65AF CD 4D 65                             call    Case_Sensitive      // uppercase routine
 418+ 65B2 4F                                   ld      c, a
 419+ 65B3 7E                                   ld      a, (hl)
 420+ 65B4 CD 4D 65                             call    Case_Sensitive      // uppercase routine
 421+ 65B7 A9                                   xor     c
 422+ 65B8 A8                                   xor     b
 423+ 65B9 C1                                   pop     bc
 424+ 65BA                                      // case insensitive option - end
 425+ 65BA 87                                   add     a                   // ignore msb during compare
 426+ 65BB 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 427+ 65BD
 428+ 65BD                                  // loop back until last byte msb is found set
 429+ 65BD                                  // that bit marks the ending char of this word
 430+ 65BD 30 E6                            jr      nc, Find_ThisWord
 431+ 65BF
 432+ 65BF                                  // match found !
 433+ 65BF 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 434+ 65C2 19                                   add     hl, de
 435+ 65C3 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 436+ 65C4 08                                   ex      af, af'             // retrieve NFA byte (!)
 437+ 65C5 5F                                   ld      e, a
 438+ 65C6 16 00                                ld      d, 0
 439+ 65C8
 440+ 65C8
 441+ 65C8 21 01 00                             ld      hl, 1
 442+ 65CB                                      psh2
 442+ 65CB D5          >                push    de
 442+ 65CC E5          >                push    hl
 442+ 65CD DD E9       >                jp      (ix)
 443+ 65CF
 444+ 65CF              Find_DidntMatch: // didn't match (*)
 445+ 65CF 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 446+ 65D1
 447+ 65D1              Find_DifferentLenght:
 448+ 65D1                              // consume chars until the end of the word
 449+ 65D1                              // that is last byte msb is found set
 450+ 65D1 13                               inc     de
 451+ 65D2 1A                               ld      a, (de)
 452+ 65D3 87                               add     a, a
 453+ 65D4 30 FB                        jr      nc, Find_DifferentLenght
 454+ 65D6
 455+ 65D6              Find_WordEnd:   // word-end  found (**)
 456+ 65D6                              // take LFA and use it
 457+ 65D6 13                           inc     de
 458+ 65D7 EB                           ex      de, hl
 459+ 65D8 5E                           ld      e, (hl)
 460+ 65D9 23                           inc     hl
 461+ 65DA 56                           ld      d, (hl)
 462+ 65DB 7A                           ld      a, d
 463+ 65DC B3                           or      e
 464+ 65DD
 465+ 65DD                          // loop until end of vocabulary
 466+ 65DD 20 BC                    jr      nz, Find_VocabularyLoop
 467+ 65DF
 468+ 65DF E1                       pop     hl              // with this, it leaves addr unchanged
 469+ 65E0 21 00 00                 ld      hl, FALSE_FLAG
 470+ 65E3
 471+ 65E3                          psh1
 471+ 65E3 E5          >                push    hl
 471+ 65E4 DD E9       >                jp      (ix)
 472+ 65E6
 473+ 65E6              //  ______________________________________________________________________
 474+ 65E6              //
 475+ 65E6              // enclose      a c -- a  n1 n2 n3
 476+ 65E6              // starting from a, using delimiter c, determines the offsets:
 477+ 65E6              //   n1   the first character non-delimiter
 478+ 65E6              //   n2   the first delimiter after the text
 479+ 65E6              //   n3   the first character non enclosed.
 480+ 65E6              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 481+ 65E6              // an uncoditional delimiter.
 482+ 65E6              // Examples:
 483+ 65E6              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 484+ 65E6              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 485+ 65E6              // iii:	c  c  'nul'          -- 2  3  2
 486+ 65E6                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 486+ 65E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 486+ 65E6             >
 486+ 65E6             >                // dummy db directives used to calculate length of namec
 486+ 65E6 45 4E 43 4C >                db      "ENCLOSE"
 486+ 65EA 4F 53 45    >
 486+ 65ED             >len_NFA         defl    $ - temp_NFA
 486+ 65ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 486+ 65E6             >
 486+ 65E6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 486+ 65E7 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 486+ 65EB 4F 53 45    >
 486+ 65EE             >                org     $-1                 // alter last byte of Name just above to set
 486+ 65ED C5          >                db      {b $} | END_BIT     // msb as name end
 486+ 65EE             >
 486+ 65EE 8F 65       >                dw      last_NFA            // Link to previous definition Name
 486+ 65F0             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 486+ 65F0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 486+ 65F0             >                else
 486+ 65F0 F2 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 486+ 65F2             >                endif           ; ok        // for other definitions it "points" the correct handler
 486+ 65F2             >                // Use of "; ok" to suppress "warning[fwdref]"
 486+ 65F2             >
 486+ 65F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 487+ 65F2 D1                           pop     de                  //  e has the character
 488+ 65F3 E1                           pop     hl                  // hl has the string address
 489+ 65F4 E5                           push    hl
 490+ 65F5 7B                           ld      a, e
 491+ 65F6 11 FF FF                     ld      de, -1              // let's start from -1
 492+ 65F9 2B                           dec     hl
 493+ 65FA              Enclose_NonDelimiter:
 494+ 65FA                              // find first non delimiter
 495+ 65FA 23                               inc     hl
 496+ 65FB 13                               inc     de
 497+ 65FC BE                               cp      (hl)
 498+ 65FD 28 FB                        jr      z, Enclose_NonDelimiter
 499+ 65FF D5                           push    de
 500+ 6600
 501+ 6600 C5                           push    bc                  // save Instruction Pointer
 502+ 6601
 503+ 6601 4F                           ld      c, a                // save char
 504+ 6602 7E                           ld      a, (hl)
 505+ 6603 A7                           and     a                   // stop if 0x00
 506+ 6604 20 07                        jr      nz, Enclose_NextChar
 507+ 6606
 508+ 6606                              /// case iii. no more character in string
 509+ 6606 C1                               pop     bc                  // restore Instruction Pointer
 510+ 6607 13                               inc     de
 511+ 6608 D5                               push    de
 512+ 6609 1B                               dec     de
 513+ 660A D5                               push    de
 514+ 660B                                  next
 514+ 660B DD E9       >                jp      (ix)
 515+ 660D              Enclose_NextChar:
 516+ 660D 79                               ld      a, c
 517+ 660E 23                               inc     hl
 518+ 660F 13                               inc     de
 519+ 6610 BE                               cp      (hl)
 520+ 6611 20 06                            jr      nz, Enclose_NonSeparator
 521+ 6613
 522+ 6613                                      // case i. first non enclosed
 523+ 6613 C1                                   pop     bc                  // restore Instruction Pointer
 524+ 6614 D5                                   push    de
 525+ 6615 13                                   inc     de
 526+ 6616 D5                                   push    de
 527+ 6617                                      next
 527+ 6617 DD E9       >                jp      (ix)
 528+ 6619              Enclose_NonSeparator:
 529+ 6619 7E                               ld      a, (hl)
 530+ 661A A7                               and     a
 531+ 661B 20 F0                        jr      nz, Enclose_NextChar
 532+ 661D
 533+ 661D                              // case ii. separator & terminator
 534+ 661D C1                           pop     bc                  // restore Instruction Pointer
 535+ 661E D5                           push    de
 536+ 661F D5                           push    de
 537+ 6620                              next
 537+ 6620 DD E9       >                jp      (ix)
 538+ 6622
 539+ 6622              //  ______________________________________________________________________
 540+ 6622              //
 541+ 6622              // (map)        a2 a1 n c1 -- c2
 542+ 6622              // translate character c using mapping string a2 and a2
 543+ 6622              // c2 = c2 if it is not translated. n is the length of bot a1 and a2.
 544+ 6622                              New_Def C_MAP, "(MAP)", is_code, is_normal
 544+ 6622             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 544+ 6622             >
 544+ 6622             >                // dummy db directives used to calculate length of namec
 544+ 6622 28 4D 41 50 >                db      "(MAP)"
 544+ 6626 29          >
 544+ 6627             >len_NFA         defl    $ - temp_NFA
 544+ 6627             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 544+ 6622             >
 544+ 6622 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 544+ 6623 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 544+ 6627 29          >
 544+ 6628             >                org     $-1                 // alter last byte of Name just above to set
 544+ 6627 A9          >                db      {b $} | END_BIT     // msb as name end
 544+ 6628             >
 544+ 6628 E6 65       >                dw      last_NFA            // Link to previous definition Name
 544+ 662A             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 544+ 662A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 544+ 662A             >                else
 544+ 662A 2C 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 544+ 662C             >                endif           ; ok        // for other definitions it "points" the correct handler
 544+ 662C             >                // Use of "; ok" to suppress "warning[fwdref]"
 544+ 662C             >
 544+ 662C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 545+ 662C D9                           exx
 546+ 662D E1                           pop     hl
 547+ 662E 7D                           ld      a, l
 548+ 662F C1                           pop     bc
 549+ 6630 E1                           pop     hl
 550+ 6631 50                           ld      d, b
 551+ 6632 59                           ld      e, c
 552+ 6633 ED B1                        cpir
 553+ 6635 E1                           pop     hl
 554+ 6636 20 05                        jr      nz, C_Map_Then
 554+ 6638
 555+ 6638 19                               add     hl, de
 556+ 6639 2B                               dec     hl
 557+ 663A ED 42                            sbc     hl, bc
 558+ 663C 7E                               ld      a, (hl)
 559+ 663D              C_Map_Then:
 560+ 663D 6F                           ld      l, a
 561+ 663E 26 00                        ld      h, 0
 562+ 6640 E5                           push    hl
 563+ 6641 D9                           exx
 564+ 6642                              next
 564+ 6642 DD E9       >                jp      (ix)
 565+ 6644
 566+ 6644              //  ______________________________________________________________________
 567+ 6644              //
 568+ 6644              // (compare)    a1 a2 n -- b
 569+ 6644              // this word performs a lexicographic compare of n bytes of text at address a1
 570+ 6644              // with n bytes of text at address a2. It returns numeric a value:
 571+ 6644              //  0 : if strings are equal
 572+ 6644              // +1 : if string at a1 greater than string at a2
 573+ 6644              // -1 : if string at a1 less than string at a2
 574+ 6644              // strings can be 256 bytes in length at most.
 575+ 6644                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 575+ 6644             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ 6644             >
 575+ 6644             >                // dummy db directives used to calculate length of namec
 575+ 6644 28 43 4F 4D >                db      "(COMPARE)"
 575+ 6648 50 41 52 45 >
 575+ 664C 29          >
 575+ 664D             >len_NFA         defl    $ - temp_NFA
 575+ 664D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ 6644             >
 575+ 6644 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ 6645 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 575+ 6649 50 41 52 45 >
 575+ 664D 29          >
 575+ 664E             >                org     $-1                 // alter last byte of Name just above to set
 575+ 664D A9          >                db      {b $} | END_BIT     // msb as name end
 575+ 664E             >
 575+ 664E 22 66       >                dw      last_NFA            // Link to previous definition Name
 575+ 6650             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 6650 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 575+ 6650             >                else
 575+ 6650 52 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 575+ 6652             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 6652             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 6652             >
 575+ 6652             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 6652 E1                           pop     hl                  // Number of bytes
 577+ 6653 7D                           ld      a, l
 578+ 6654 E1                           pop     hl                  // hl points string a2
 579+ 6655 D1                           pop     de                  // hl points string a1
 580+ 6656 C5                           push    bc                  // Instruction pointer on stack
 581+ 6657 47                           ld      b, a
 582+ 6658              C_Compare_Loop:
 583+ 6658 7E                               ld      a, (hl)
 584+ 6659 CD 4D 65                         call    Case_Sensitive
 585+ 665C 4F                               ld      c, a
 586+ 665D 1A                               ld      a, (de)
 587+ 665E CD 4D 65                         call    Case_Sensitive
 588+ 6661 B9                               cp      c
 589+ 6662 13                               inc     de
 590+ 6663 23                               inc     hl
 591+ 6664 28 0E                            jr      z, C_Compare_Equal
 592+ 6666 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 593+ 6668 21 01 00                                 ld      hl, 1               // a1 gt a2
 594+ 666B 18 03                                jr      C_Compare_Then      // Else
 595+ 666D              C_Compare_NotLessThan:
 596+ 666D 21 FF FF                                 ld      hl, -1              // a1 lt a2
 597+ 6670              C_Compare_Then:                                 // Endif
 598+ 6670 C1                                   pop     bc              // restore Instruction Pointer
 599+ 6671
 600+ 6671                                      psh1
 600+ 6671 E5          >                push    hl
 600+ 6672 DD E9       >                jp      (ix)
 601+ 6674
 602+ 6674              C_Compare_Equal:
 603+ 6674 10 E2                        djnz    C_Compare_Loop
 604+ 6676 21 00 00                     ld      hl, 0               // a1 eq a2
 605+ 6679 C1                           pop     bc                  // restore Instruction Pointer
 606+ 667A
 607+ 667A                              psh1
 607+ 667A E5          >                push    hl
 607+ 667B DD E9       >                jp      (ix)
 608+ 667D
 609+ 667D              //  ______________________________________________________________________
 610+ 667D              //
 611+ 667D              // emitc        c --
 612+ 667D              // low level emit, calls ROM routine at #10 to send a character to
 613+ 667D              // the the current channel (see SELECT to change stream-channel)
 614+ 667D                              New_Def EMITC, "EMITC", is_code, is_normal
 614+ 667D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ 667D             >
 614+ 667D             >                // dummy db directives used to calculate length of namec
 614+ 667D 45 4D 49 54 >                db      "EMITC"
 614+ 6681 43          >
 614+ 6682             >len_NFA         defl    $ - temp_NFA
 614+ 6682             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ 667D             >
 614+ 667D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ 667E 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 614+ 6682 43          >
 614+ 6683             >                org     $-1                 // alter last byte of Name just above to set
 614+ 6682 C3          >                db      {b $} | END_BIT     // msb as name end
 614+ 6683             >
 614+ 6683 44 66       >                dw      last_NFA            // Link to previous definition Name
 614+ 6685             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 6685 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 614+ 6685             >                else
 614+ 6685 87 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 614+ 6687             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 6687             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 6687             >
 614+ 6687             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 6687 E1                           pop     hl
 616+ 6688 7D                           ld      a, l
 617+ 6689              Emitc_Ptr:
 618+ 6689 C5                           push    bc
 619+ 668A DD E5                        push    ix
 620+ 668C D7                           rst     $10
 621+ 668D DD E1                        pop     ix
 622+ 668F C1                           pop     bc
 623+ 6690 3E FF                        ld      a, 255            // max possible
 624+ 6692 32 8C 5C                     ld      (SCR_CT), a
 625+ 6695
 626+ 6695                              next
 626+ 6695 DD E9       >                jp      (ix)
 627+ 6697
 628+ 6697              Emitc_Vec:
 629+ 6697 DC 66                        dw      C_Emit_Printable  // comma
 630+ 6699 E2 66                        dw      C_Emit_Bel        // bel
 631+ 669B DC 66                        dw      C_Emit_Printable  // bs
 632+ 669D F7 66                        dw      C_Emit_Tab        // tab
 633+ 669F DC 66                        dw      C_Emit_Printable  // cr
 634+ 66A1 FD 66                        dw      C_Emit_NL         // lf (unix newline)
 635+ 66A3 DC 66                        dw      C_Emit_Printable  // blank
 636+ 66A5 DC 66                        dw      C_Emit_Printable  // blank
 637+ 66A7
 638+ 66A7              Emit_Selector_Start:
 639+ 66A7 06                           db      $06                 // comma
 640+ 66A8 07                           db      $07                 // bel
 641+ 66A9 08                           db      $08                 // bs
 642+ 66AA 09                           db      $09                 // tab
 643+ 66AB 0D                           db      $0D                 // cr
 644+ 66AC 0A                           db      $0A                 // lf (unix newline)
 645+ 66AD 20                           db      $20
 646+ 66AE              Emit_Selector_End:
 647+ 66AE 20                           db      $20
 648+ 66AF
 649+ 66AF              //  ______________________________________________________________________
 650+ 66AF              //
 651+ 66AF              // (?emit)      c1 -- c2 | c1
 652+ 66AF              // decode a character to be sent via EMIT
 653+ 66AF              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 654+ 66AF              // the routine should resolve anything and convert the character anyway.
 655+ 66AF                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 655+ 66AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 655+ 66AF             >
 655+ 66AF             >                // dummy db directives used to calculate length of namec
 655+ 66AF 28 3F 45 4D >                db      "(?EMIT)"
 655+ 66B3 49 54 29    >
 655+ 66B6             >len_NFA         defl    $ - temp_NFA
 655+ 66B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 655+ 66AF             >
 655+ 66AF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 655+ 66B0 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 655+ 66B4 49 54 29    >
 655+ 66B7             >                org     $-1                 // alter last byte of Name just above to set
 655+ 66B6 A9          >                db      {b $} | END_BIT     // msb as name end
 655+ 66B7             >
 655+ 66B7 7D 66       >                dw      last_NFA            // Link to previous definition Name
 655+ 66B9             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 655+ 66B9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 655+ 66B9             >                else
 655+ 66B9 BB 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 655+ 66BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 655+ 66BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 655+ 66BB             >
 655+ 66BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 656+ 66BB D1                           pop     de
 657+ 66BC 7B                           ld      a, e                //  de has c1
 658+ 66BD E6 7F                        and     $7F                 // 7-bit ascii only
 659+ 66BF C5                           push    bc                  // save Instruction Pointer
 660+ 66C0 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 661+ 66C3 21 AE 66                     ld      hl, Emit_Selector_End
 662+ 66C6 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 663+ 66C8 20 0B                        jr      nz, C_Emit_Not_Found
 664+ 66CA                                  // Found then decode it
 665+ 66CA 21 97 66                         ld      hl, Emitc_Vec
 666+ 66CD 09                               add     hl, bc
 667+ 66CE 09                               add     hl, bc
 668+ 66CF 5E                               ld      e, (hl)
 669+ 66D0 23                               inc     hl
 670+ 66D1 56                               ld      d, (hl)
 671+ 66D2 EB                               ex      de, hl
 672+ 66D3 C1                               pop     bc                  // restore Instruction Pointer
 673+ 66D4 E9                               jp      (hl)                // one of the following labels
 674+ 66D5              C_Emit_Not_Found:
 675+ 66D5 C1                           pop     bc                  // restore Instruction Pointer
 676+ 66D6 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 677+ 66D8 30 02                        jr      nc, C_Emit_Printable
 678+ 66DA 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 679+ 66DC              C_Emit_Printable:
 680+ 66DC 6F                           ld      l, a
 681+ 66DD 26 00                        ld      h, 0
 682+ 66DF
 683+ 66DF                              psh1
 683+ 66DF E5          >                push    hl
 683+ 66E0 DD E9       >                jp      (ix)
 684+ 66E2
 685+ 66E2              C_Emit_Bel:
 686+ 66E2 C5                           push    bc                  // save Instruction Pointer
 687+ 66E3 11 00 01                     ld      de, $0100
 688+ 66E6 21 00 02                     ld      hl, $0200
 689+ 66E9 DD E5                        push    ix                  // save Next Pointer
 690+ 66EB CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 691+ 66EE DD E1                        pop     ix                  // restore Next Pointer
 692+ 66F0 C1                           pop     bc                  // restore Instruction Pointer
 693+ 66F1 21 00 00                     ld      hl, NUL_CHAR
 694+ 66F4
 695+ 66F4                              psh1
 695+ 66F4 E5          >                push    hl
 695+ 66F5 DD E9       >                jp      (ix)
 696+ 66F7
 697+ 66F7 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 698+ 66FA
 699+ 66FA                              psh1
 699+ 66FA E5          >                push    hl
 699+ 66FB DD E9       >                jp      (ix)
 700+ 66FD
 701+ 66FD 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 702+ 6700
 703+ 6700                              psh1
 703+ 6700 E5          >                push    hl
 703+ 6701 DD E9       >                jp      (ix)
 704+ 6703
 705+ 6703              //  ______________________________________________________________________
 706+ 6703
 707+ 6703              Key_Table:
 708+ 6703 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 709+ 6704 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 710+ 6705 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 711+ 6706 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 712+ 6707 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 713+ 6708 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 714+ 6709 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 715+ 670A AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 716+ 670B C7                           db      $C7                 //  8: <=
 717+ 670C C8                           db      $C8                 //  9: >=
 718+ 670D C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 719+ 670E              Key_MapTo:
 720+ 670E 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 721+ 670F 20                           db      $20                 //  9: not used
 722+ 6710 20                           db      $20                 //  8: not used
 723+ 6711 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 724+ 6712 5D                           db      $5D                 //  6: SYMBOL+U : ]
 725+ 6713 5B                           db      $5B                 //  5: SYMBOL+Y : [
 726+ 6714 7D                           db      $7D                 //  4: SYMBOL+G : }
 727+ 6715 7B                           db      $7B                 //  3: SYMBOL+F : {
 728+ 6716 5C                           db      $5C                 //  2: SYMBOl+D : //
 729+ 6717 7C                           db      $7C                 //  1: SYMBOL+S : |
 730+ 6718 7E                           db      $7E                 //  0: SYMBOL+A : ~
 731+ 6719
 732+ 6719              //  ______________________________________________________________________
 733+ 6719              //
 734+ 6719              // key          -- c
 735+ 6719              // wait for a keypress
 736+ 6719              // This definition need Standard ROM Interrupt to be served
 737+ 6719
 738+ 6719                              New_Def KEY, "KEY", is_code, is_normal
 738+ 6719             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 738+ 6719             >
 738+ 6719             >                // dummy db directives used to calculate length of namec
 738+ 6719 4B 45 59    >                db      "KEY"
 738+ 671C             >len_NFA         defl    $ - temp_NFA
 738+ 671C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 738+ 6719             >
 738+ 6719 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 738+ 671A 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 738+ 671D             >                org     $-1                 // alter last byte of Name just above to set
 738+ 671C D9          >                db      {b $} | END_BIT     // msb as name end
 738+ 671D             >
 738+ 671D AF 66       >                dw      last_NFA            // Link to previous definition Name
 738+ 671F             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 738+ 671F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 738+ 671F             >                else
 738+ 671F 21 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 738+ 6721             >                endif           ; ok        // for other definitions it "points" the correct handler
 738+ 6721             >                // Use of "; ok" to suppress "warning[fwdref]"
 738+ 6721             >
 738+ 6721             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 739+ 6721
 740+ 6721 C5                           push    bc                  // save Instruction Pointer
 741+ 6722 DD E5                        push    ix
 742+ 6724
 743+ 6724 ED 73 2C 64                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 744+ 6728 31 FE 63                     ld      sp, Cold_origin - 2 // maybe $4000 in the future...
 745+ 672B FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 746+ 672F
 747+ 672F              Key_Wait:
 748+ 672F 76                               halt
 749+ 6730 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 750+ 6732 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 751+ 6735
 752+ 6735                                  // software-flash: flips face every 320 ms
 753+ 6735 3E 10                            ld      a, $10              // Timing based
 754+ 6737 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 755+ 673A
 756+ 673A 3A 26 64                         ld      a, (Block_Face)     // see origin.asm
 757+ 673D 20 0C                            jr      nz, Key_Cursor
 758+ 673F 3A 27 64                             ld      a, (Half_Face)      // see origin.asm
 759+ 6742 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 760+ 6746 28 03                                jr      z, Key_Cursor
 761+ 6748 3A 28 64                                 ld      a, (Underscore_Face) // see origin
 762+ 674B              Key_Cursor:
 763+ 674B D7                               rst     $10
 764+ 674C 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 765+ 674E D7                               rst     $10
 766+ 674F
 767+ 674F FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 768+ 6753 28 DA                        jr      z, Key_Wait
 769+ 6755
 770+ 6755 76                           halt    // this is to sync flashing cursor.
 771+ 6756
 772+ 6756 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 773+ 6758 D7                           rst     $10
 774+ 6759 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 775+ 675B D7                           rst     $10
 776+ 675C 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 777+ 675F
 778+ 675F                              // decode character from above table
 779+ 675F 21 03 67                     ld      hl, Key_Table
 780+ 6762 01 0B 00                     ld      bc, $000B
 781+ 6765 ED B1                        cpir
 782+ 6767 20 05                        jr      nz, Key_DontMap
 783+ 6769 21 0E 67                         ld      hl, Key_MapTo
 784+ 676C 09                               add     hl, bc
 785+ 676D 7E                               ld      a, (hl)
 786+ 676E FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 787+ 6770 20 09                        jr      nz, Key_NoCapsLock
 788+ 6772 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 789+ 6775 7E                               ld      a, (hl)
 790+ 6776 EE 08                            xor     $08
 791+ 6778 77                               ld      (hl), a
 792+ 6779 3E 00                            ld      a, NUL_CHAR
 793+ 677B 6F           Key_NoCapsLock: ld      l, a
 794+ 677C 26 00                        ld      h, 0                // Prepare TOS
 795+ 677E
 796+ 677E 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 797+ 6781 1F                           rra
 798+ 6782 1F                           rra
 799+ 6783 1F                           rra
 800+ 6784 F6 18                        or      $18                 // quick'n'dirty click
 801+ 6786 D3 FE                        out     ($fe), a
 802+ 6788 06 00                        ld      b, 0
 803+ 678A 10 FE                        djnz    $                   // wait loop
 804+ 678C EE 18                        xor     $18
 805+ 678E D3 FE                        out     ($fe), a
 806+ 6790
 807+ 6790 ED 7B 2C 64                  ld      sp, (SP_Saved)
 808+ 6794
 809+ 6794 DD E1                        pop     ix
 810+ 6796 C1                           pop     bc                  // Restore Instruction Pointer
 811+ 6797
 812+ 6797                              psh1
 812+ 6797 E5          >                push    hl
 812+ 6798 DD E9       >                jp      (ix)
 813+ 679A
 814+ 679A              //  ______________________________________________________________________
 815+ 679A              //
 816+ 679A              // ?terminal    -- FALSE | TRUE
 817+ 679A              // test for BREAK keypress
 818+ 679A                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 818+ 679A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 818+ 679A             >
 818+ 679A             >                // dummy db directives used to calculate length of namec
 818+ 679A 3F 54 45 52 >                db      "?TERMINAL"
 818+ 679E 4D 49 4E 41 >
 818+ 67A2 4C          >
 818+ 67A3             >len_NFA         defl    $ - temp_NFA
 818+ 67A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 818+ 679A             >
 818+ 679A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 818+ 679B 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 818+ 679F 4D 49 4E 41 >
 818+ 67A3 4C          >
 818+ 67A4             >                org     $-1                 // alter last byte of Name just above to set
 818+ 67A3 CC          >                db      {b $} | END_BIT     // msb as name end
 818+ 67A4             >
 818+ 67A4 19 67       >                dw      last_NFA            // Link to previous definition Name
 818+ 67A6             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 818+ 67A6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 818+ 67A6             >                else
 818+ 67A6 A8 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 818+ 67A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 818+ 67A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 818+ 67A8             >
 818+ 67A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 819+ 67A8 21 00 00                     ld      hl, 0
 820+ 67AB ED 73 2C 64                  ld      (SP_Saved), sp
 821+ 67AF 31 FE 63                     ld      sp, Cold_origin - 2
 822+ 67B2 CD 54 1F                     call    $1F54
 823+ 67B5 ED 7B 2C 64                  ld      sp, (SP_Saved)
 824+ 67B9
 825+ 67B9 38 01                        jr      c, QTerminal_NoBreak
 826+ 67BB 2C                               inc     l                  // quick TRUE_FLAG
 827+ 67BC              QTerminal_NoBreak:
 828+ 67BC
 829+ 67BC                              psh1
 829+ 67BC E5          >                push    hl
 829+ 67BD DD E9       >                jp      (ix)
 830+ 67BF
 831+ 67BF
 832+ 67BF              //  ______________________________________________________________________
 833+ 67BF              //
 834+ 67BF              // ZX Spectrum Next - Low Level disk primitives.
 835+ 67BF              // this include is "here" for backward compatibility
 836+ 67BF
 837+ 67BF                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
   1++67BF              //  ______________________________________________________________________
   2++67BF              //
   3++67BF              //  next-opt.asm
   4++67BF              //
   5++67BF              //  ZX Spectrum Next - peculiar definitions
   6++67BF              //  ______________________________________________________________________
   7++67BF
   8++67BF              //  ______________________________________________________________________
   9++67BF              //
  10++67BF              // f_seek       d u -- f
  11++67BF              // Seek to position d in file-handle u.
  12++67BF              // Return a false-flag 0 on success, True flag on error
  13++67BF                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++67BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++67BF             >
  13++67BF             >                // dummy db directives used to calculate length of namec
  13++67BF 46 5F 53 45 >                db      "F_SEEK"
  13++67C3 45 4B       >
  13++67C5             >len_NFA         defl    $ - temp_NFA
  13++67C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++67BF             >
  13++67BF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++67C0 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++67C4 45 4B       >
  13++67C6             >                org     $-1                 // alter last byte of Name just above to set
  13++67C5 CB          >                db      {b $} | END_BIT     // msb as name end
  13++67C6             >
  13++67C6 9A 67       >                dw      last_NFA            // Link to previous definition Name
  13++67C8             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++67C8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13++67C8             >                else
  13++67C8 CA 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  13++67CA             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++67CA             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++67CA             >
  13++67CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++67CA E1                           pop     hl                  // file-handle
  15++67CB 7D                           ld      a, l                // file-handle
  16++67CC 60                           ld      h, b                // save Intruction Pointer
  17++67CD 69                           ld      l, c
  18++67CE C1                           pop     bc                  // bc has high-word of d
  19++67CF D1                           pop     de
  20++67D0 DD E5                        push    ix
  21++67D2 E5                           push    hl                  // save Instruction Pointer
  22++67D3 DD 21 00 00                  ld      ix, 0
  23++67D7 CF                           rst     $08
  24++67D8 9F                           db      $9F
  25++67D9 C1                           pop     bc                  // restore Instruction Pointer
  26++67DA DD E1                        pop     ix
  27++67DC ED 62                        sbc     hl, hl              // to get 0 or -1
  28++67DE
  29++67DE                              psh1
  29++67DE E5          >                push    hl
  29++67DF DD E9       >                jp      (ix)
  30++67E1
  31++67E1              //  ______________________________________________________________________
  32++67E1              //
  33++67E1              // f_fgetpos    u -- d f
  34++67E1              // Seek to position d in file-handle u.
  35++67E1              // Return a false-flag 0 on success, True flag on error
  36++67E1                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  36++67E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  36++67E1             >
  36++67E1             >                // dummy db directives used to calculate length of namec
  36++67E1 46 5F 46 47 >                db      "F_FGETPOS"
  36++67E5 45 54 50 4F >
  36++67E9 53          >
  36++67EA             >len_NFA         defl    $ - temp_NFA
  36++67EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  36++67E1             >
  36++67E1 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  36++67E2 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  36++67E6 45 54 50 4F >
  36++67EA 53          >
  36++67EB             >                org     $-1                 // alter last byte of Name just above to set
  36++67EA D3          >                db      {b $} | END_BIT     // msb as name end
  36++67EB             >
  36++67EB BF 67       >                dw      last_NFA            // Link to previous definition Name
  36++67ED             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  36++67ED ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  36++67ED             >                else
  36++67ED EF 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  36++67EF             >                endif           ; ok        // for other definitions it "points" the correct handler
  36++67EF             >                // Use of "; ok" to suppress "warning[fwdref]"
  36++67EF             >
  36++67EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  37++67EF E1                           pop     hl
  38++67F0 7D                           ld      a, l                // file-handle
  39++67F1 DD E5                        push    ix
  40++67F3 C5                           push    bc
  41++67F4 CF                           rst     $08
  42++67F5 A0                           db      $A0
  43++67F6 E1                           pop     hl                  // restore Instruction Pointer
  44++67F7 DD E1                        pop     ix
  45++67F9 D5                           push    de
  46++67FA C5                           push    bc
  47++67FB 44                           ld      b, h                // restore Instruction Pointer
  48++67FC 4D                           ld      c, l
  49++67FD ED 62                        sbc     hl, hl
  50++67FF
  51++67FF                              psh1
  51++67FF E5          >                push    hl
  51++6800 DD E9       >                jp      (ix)
  52++6802
  53++6802              //  ______________________________________________________________________
  54++6802              //
  55++6802              // f_read       a b u -- n f
  56++6802              // Read b bytes from file-handle u to address a
  57++6802              // Return the actual number n of bytes read
  58++6802              // Return 0 on success, True flag on error
  59++6802                              New_Def F_READ, "F_READ", is_code, is_normal
  59++6802             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59++6802             >
  59++6802             >                // dummy db directives used to calculate length of namec
  59++6802 46 5F 52 45 >                db      "F_READ"
  59++6806 41 44       >
  59++6808             >len_NFA         defl    $ - temp_NFA
  59++6808             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59++6802             >
  59++6802 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59++6803 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  59++6807 41 44       >
  59++6809             >                org     $-1                 // alter last byte of Name just above to set
  59++6808 C4          >                db      {b $} | END_BIT     // msb as name end
  59++6809             >
  59++6809 E1 67       >                dw      last_NFA            // Link to previous definition Name
  59++680B             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  59++680B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  59++680B             >                else
  59++680B 0D 68       >                dw      $ + 2   ; ok        // is pointed by CFA
  59++680D             >                endif           ; ok        // for other definitions it "points" the correct handler
  59++680D             >                // Use of "; ok" to suppress "warning[fwdref]"
  59++680D             >
  59++680D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60++680D
  61++680D 50                           ld      d, b
  62++680E 59                           ld      e, c
  63++680F E1                           pop     hl
  64++6810 7D                           ld      a, l                // file-handle
  65++6811 C1                           pop     bc                  // bc has bytes to read
  66++6812 DD E3                        ex      (sp), ix            // ix has address
  67++6814 D5                           push    de                  // Save Instruction pointer
  68++6815 CF                           rst     $08
  69++6816 9D                           db      $9D
  70++6817 C1                           pop     bc                  // Restore Instruction pointer
  71++6818 DD E1                        pop     ix                  // Restore ix
  72++681A D5                           push    de                  // bytes written
  73++681B ED 62                        sbc     hl, hl
  74++681D
  75++681D                              psh1
  75++681D E5          >                push    hl
  75++681E DD E9       >                jp      (ix)
  76++6820
  77++6820              //  ______________________________________________________________________
  78++6820              //
  79++6820              // f_write      a b u -- n f
  80++6820              // Write bytes currently stored at address a to file-handle u.
  81++6820              // Return the actual n bytes written and 0 on success, True flag on error.
  82++6820                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
  82++6820             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82++6820             >
  82++6820             >                // dummy db directives used to calculate length of namec
  82++6820 46 5F 57 52 >                db      "F_WRITE"
  82++6824 49 54 45    >
  82++6827             >len_NFA         defl    $ - temp_NFA
  82++6827             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82++6820             >
  82++6820 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82++6821 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
  82++6825 49 54 45    >
  82++6828             >                org     $-1                 // alter last byte of Name just above to set
  82++6827 C5          >                db      {b $} | END_BIT     // msb as name end
  82++6828             >
  82++6828 02 68       >                dw      last_NFA            // Link to previous definition Name
  82++682A             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  82++682A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  82++682A             >                else
  82++682A 2C 68       >                dw      $ + 2   ; ok        // is pointed by CFA
  82++682C             >                endif           ; ok        // for other definitions it "points" the correct handler
  82++682C             >                // Use of "; ok" to suppress "warning[fwdref]"
  82++682C             >
  82++682C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83++682C
  84++682C 50                           ld      d, b
  85++682D 59                           ld      e, c
  86++682E E1                           pop     hl
  87++682F 7D                           ld      a, l                // file-handle
  88++6830 C1                           pop     bc                  // bc has bytes to read
  89++6831 DD E3                        ex      (sp), ix            // ix has address
  90++6833 D5                           push    de                  // Save Instruction pointer
  91++6834 CF                           rst     $08
  92++6835 9E                           db      $9E
  93++6836 C1                           pop     bc                  // Restore Instruction pointer
  94++6837 DD E1                        pop     ix                  // Restore ix
  95++6839 D5                           push    de                  // bytes written
  96++683A ED 62                        sbc     hl, hl
  97++683C
  98++683C                              psh1
  98++683C E5          >                push    hl
  98++683D DD E9       >                jp      (ix)
  99++683F
 100++683F              //  ______________________________________________________________________
 101++683F              //
 102++683F              // f_close      u -- f
 103++683F              // Close file-handle u.
 104++683F              // Return 0 on success, True flag on error
 105++683F
 106++683F                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
 106++683F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 106++683F             >
 106++683F             >                // dummy db directives used to calculate length of namec
 106++683F 46 5F 43 4C >                db      "F_CLOSE"
 106++6843 4F 53 45    >
 106++6846             >len_NFA         defl    $ - temp_NFA
 106++6846             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 106++683F             >
 106++683F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 106++6840 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
 106++6844 4F 53 45    >
 106++6847             >                org     $-1                 // alter last byte of Name just above to set
 106++6846 C5          >                db      {b $} | END_BIT     // msb as name end
 106++6847             >
 106++6847 20 68       >                dw      last_NFA            // Link to previous definition Name
 106++6849             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 106++6849 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 106++6849             >                else
 106++6849 4B 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 106++684B             >                endif           ; ok        // for other definitions it "points" the correct handler
 106++684B             >                // Use of "; ok" to suppress "warning[fwdref]"
 106++684B             >
 106++684B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 107++684B
 108++684B E1                           pop     hl
 109++684C 7D                           ld      a, l                // file-handle
 110++684D DD E5                        push    ix
 111++684F C5                           push    bc                  // Save Instruction pointer
 112++6850 CF                           rst     $08
 113++6851 9B                           db      $9B
 114++6852 C1                           pop     bc
 115++6853 DD E1                        pop     ix
 116++6855 ED 62                        sbc     hl, hl
 117++6857
 118++6857                              psh1
 118++6857 E5          >                push    hl
 118++6858 DD E9       >                jp      (ix)
 119++685A
 120++685A              //  ______________________________________________________________________
 121++685A              //
 122++685A              // f_open       a1 a2 b -- u f
 123++685A              // open a file
 124++685A              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 125++685A              // a2 is address to an 8-byte header data used in some cases.
 126++685A              // b is access mode-byte, that is a combination of:
 127++685A              // any/all of:
 128++685A              //   esx_mode_read          $01 request read access
 129++685A              //   esx_mode_write         $02 request write access
 130++685A              //   esx_mode_use_header    $40 read/write +3DOS header
 131++685A              // plus one of:
 132++685A              //   esx_mode_open_exist    $00 only open existing file
 133++685A              //   esx_mode_open_creat    $08 open existing or create file
 134++685A              //   esx_mode_creat_noexist $04 create new file, error if exists
 135++685A              //   esx_mode_creat_trunc   $0c create new file, delete existing
 136++685A              // Return file-handle u and 0 on success, True flag on error
 137++685A                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 137++685A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137++685A             >
 137++685A             >                // dummy db directives used to calculate length of namec
 137++685A 46 5F 4F 50 >                db      "F_OPEN"
 137++685E 45 4E       >
 137++6860             >len_NFA         defl    $ - temp_NFA
 137++6860             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137++685A             >
 137++685A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137++685B 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 137++685F 45 4E       >
 137++6861             >                org     $-1                 // alter last byte of Name just above to set
 137++6860 CE          >                db      {b $} | END_BIT     // msb as name end
 137++6861             >
 137++6861 3F 68       >                dw      last_NFA            // Link to previous definition Name
 137++6863             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137++6863 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 137++6863             >                else
 137++6863 65 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 137++6865             >                endif           ; ok        // for other definitions it "points" the correct handler
 137++6865             >                // Use of "; ok" to suppress "warning[fwdref]"
 137++6865             >
 137++6865             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138++6865 60                           ld      h, b                // Save Instruction pointer
 139++6866 69                           ld      l, c
 140++6867 C1                           pop     bc                  // file-mode
 141++6868 41                           ld      b, c                // file-mode
 142++6869 D1                           pop     de                  // 8-bytes buffer if any
 143++686A DD E3                        ex      (sp), ix            // filespec nul-terminated
 144++686C E5                           push    hl                  // Save Instruction pointer
 145++686D 3E 2A                        ld      a, "*"
 146++686F CF                           rst     $08
 147++6870 9A                           db      $9A
 148++6871 C1                           pop     bc
 149++6872 DD E1                        pop     ix
 150++6874 ED 62                        sbc     hl, hl
 151++6876 5F                           ld      e, a
 152++6877 16 00                        ld      d, 0
 153++6879
 154++6879
 155++6879                              psh2
 155++6879 D5          >                push    de
 155++687A E5          >                push    hl
 155++687B DD E9       >                jp      (ix)
 156++687D
 157++687D              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 158++687D              //   \ FILENAME 1+ PAD 1 F_OPEN
 159++687D              //   \ DROP
 160++687D              //   \ F_CLOSE
 161++687D
 162++687D              //  ______________________________________________________________________
 163++687D              //
 164++687D              // f_sync      u -- f
 165++687D              // Close file-handle u.
 166++687D              // Return 0 on success, True flag on error
 167++687D
 168++687D                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
 168++687D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168++687D             >
 168++687D             >                // dummy db directives used to calculate length of namec
 168++687D 46 5F 53 59 >                db      "F_SYNC"
 168++6881 4E 43       >
 168++6883             >len_NFA         defl    $ - temp_NFA
 168++6883             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168++687D             >
 168++687D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168++687E 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
 168++6882 4E 43       >
 168++6884             >                org     $-1                 // alter last byte of Name just above to set
 168++6883 C3          >                db      {b $} | END_BIT     // msb as name end
 168++6884             >
 168++6884 5A 68       >                dw      last_NFA            // Link to previous definition Name
 168++6886             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 168++6886 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 168++6886             >                else
 168++6886 88 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 168++6888             >                endif           ; ok        // for other definitions it "points" the correct handler
 168++6888             >                // Use of "; ok" to suppress "warning[fwdref]"
 168++6888             >
 168++6888             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169++6888 E1                           pop     hl
 170++6889 7D                           ld      a, l                // file-handle
 171++688A DD E5                        push    ix
 172++688C C5                           push    bc
 173++688D CF                           rst     $08
 174++688E 9C                           db      $9C
 175++688F C1                           pop     bc
 176++6890 DD E1                        pop     ix
 177++6892 ED 62                        sbc     hl, hl
 178++6894
 179++6894                              psh1
 179++6894 E5          >                push    hl
 179++6895 DD E9       >                jp      (ix)
 180++6897
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
 838+ 6897
 839+ 6897
 840+ 6897              //  ______________________________________________________________________
 841+ 6897              //
 842+ 6897              // cr           --
 843+ 6897              // send a CR via EMITC
 844+ 6897                              New_Def CR, "CR", is_code, is_normal
 844+ 6897             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 844+ 6897             >
 844+ 6897             >                // dummy db directives used to calculate length of namec
 844+ 6897 43 52       >                db      "CR"
 844+ 6899             >len_NFA         defl    $ - temp_NFA
 844+ 6899             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 844+ 6897             >
 844+ 6897 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 844+ 6898 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 844+ 689A             >                org     $-1                 // alter last byte of Name just above to set
 844+ 6899 D2          >                db      {b $} | END_BIT     // msb as name end
 844+ 689A             >
 844+ 689A 7D 68       >                dw      last_NFA            // Link to previous definition Name
 844+ 689C             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 844+ 689C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 844+ 689C             >                else
 844+ 689C 9E 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 844+ 689E             >                endif           ; ok        // for other definitions it "points" the correct handler
 844+ 689E             >                // Use of "; ok" to suppress "warning[fwdref]"
 844+ 689E             >
 844+ 689E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 845+ 689E
 846+ 689E 3E 0D                        ld      a, CR_CHAR
 847+ 68A0 C3 89 66                     jp      Emitc_Ptr
 848+ 68A3
 849+ 68A3              //  ______________________________________________________________________
 850+ 68A3              //
 851+ 68A3              // cmove    a1 a2 u --
 852+ 68A3              // If u > 0, moves memory content starting at address a1 for n bytes long
 853+ 68A3              // storing then starting at address addr2.
 854+ 68A3              // The content of a1 is moved first. See CMOVE> also.
 855+ 68A3                              New_Def CMOVE, "CMOVE", is_code, is_normal
 855+ 68A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 855+ 68A3             >
 855+ 68A3             >                // dummy db directives used to calculate length of namec
 855+ 68A3 43 4D 4F 56 >                db      "CMOVE"
 855+ 68A7 45          >
 855+ 68A8             >len_NFA         defl    $ - temp_NFA
 855+ 68A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 855+ 68A3             >
 855+ 68A3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 855+ 68A4 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 855+ 68A8 45          >
 855+ 68A9             >                org     $-1                 // alter last byte of Name just above to set
 855+ 68A8 C5          >                db      {b $} | END_BIT     // msb as name end
 855+ 68A9             >
 855+ 68A9 97 68       >                dw      last_NFA            // Link to previous definition Name
 855+ 68AB             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 855+ 68AB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 855+ 68AB             >                else
 855+ 68AB AD 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 855+ 68AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 855+ 68AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 855+ 68AD             >
 855+ 68AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 856+ 68AD 60                           ld      h, b
 857+ 68AE 69                           ld      l, c
 858+ 68AF
 859+ 68AF C1                           pop     bc                  // bc has counter
 860+ 68B0 D1                           pop     de                  // de now has dest
 861+ 68B1 E3                           ex      (sp), hl            // hl has source, save Instruction Pointer
 862+ 68B2 78                           ld      a, b
 863+ 68B3 B1                           or      c
 864+ 68B4 28 02                        jr      z, Cmove_NoMove
 865+ 68B6 ED B0                            ldir
 866+ 68B8              Cmove_NoMove:
 867+ 68B8 C1                           pop     bc                  // Restore Instruction Pointer
 868+ 68B9
 869+ 68B9                              next
 869+ 68B9 DD E9       >                jp      (ix)
 870+ 68BB
 871+ 68BB              //  ______________________________________________________________________
 872+ 68BB              //
 873+ 68BB              // cmove>    a1 a2 u --
 874+ 68BB              // If u > 0, moves memory content starting at address a1 for n bytes long
 875+ 68BB              // storing then starting at address addr2.
 876+ 68BB              // The content of a1 is moved last. See cmove.
 877+ 68BB                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 877+ 68BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 877+ 68BB             >
 877+ 68BB             >                // dummy db directives used to calculate length of namec
 877+ 68BB 43 4D 4F 56 >                db      "CMOVE>"
 877+ 68BF 45 3E       >
 877+ 68C1             >len_NFA         defl    $ - temp_NFA
 877+ 68C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 877+ 68BB             >
 877+ 68BB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 877+ 68BC 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 877+ 68C0 45 3E       >
 877+ 68C2             >                org     $-1                 // alter last byte of Name just above to set
 877+ 68C1 BE          >                db      {b $} | END_BIT     // msb as name end
 877+ 68C2             >
 877+ 68C2 A3 68       >                dw      last_NFA            // Link to previous definition Name
 877+ 68C4             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 877+ 68C4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 877+ 68C4             >                else
 877+ 68C4 C6 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 877+ 68C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 877+ 68C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 877+ 68C6             >
 877+ 68C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 878+ 68C6 60                           ld      h, b
 879+ 68C7 69                           ld      l, c
 880+ 68C8
 881+ 68C8 C1                           pop     bc                  // bc has counter
 882+ 68C9 D1                           pop     de                  // de has dest
 883+ 68CA E3                           ex      (sp), hl            // hl has source, save Instruction Pointer
 884+ 68CB 78                           ld      a, b
 885+ 68CC B1                           or      c
 886+ 68CD 28 08                        jr      z, CmoveV_NoMove
 887+ 68CF EB                               ex      de, hl              // compute address to
 888+ 68D0 09                               add     hl, bc              // operate backward
 889+ 68D1 2B                               dec     hl
 890+ 68D2 EB                               ex      de, hl
 891+ 68D3 09                               add     hl, bc
 892+ 68D4 2B                               dec     hl
 893+ 68D5 ED B8                            lddr                        // backward
 894+ 68D7              CmoveV_NoMove:
 895+ 68D7 C1                           pop     bc                  // Restore Instruction Pointer
 896+ 68D8
 897+ 68D8                              next
 897+ 68D8 DD E9       >                jp      (ix)
 898+ 68DA
 899+ 68DA              //  ______________________________________________________________________
 900+ 68DA              //
 901+ 68DA              // um*      u1 u2 -- ud
 902+ 68DA              // Unsigned multiplication
 903+ 68DA              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 904+ 68DA              // On the stack a double number is treated as two single numbers
 905+ 68DA              // where DE is on the top of the stack and HL is the second from top,
 906+ 68DA              // Instead, in 2VARIABLE a double number is stored as EDLH.
 907+ 68DA              // this definition could use "MUL" Z80N new op-code.
 908+ 68DA                              New_Def UM_MUL, "UM*", is_code, is_normal
 908+ 68DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 908+ 68DA             >
 908+ 68DA             >                // dummy db directives used to calculate length of namec
 908+ 68DA 55 4D 2A    >                db      "UM*"
 908+ 68DD             >len_NFA         defl    $ - temp_NFA
 908+ 68DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 908+ 68DA             >
 908+ 68DA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 908+ 68DB 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 908+ 68DE             >                org     $-1                 // alter last byte of Name just above to set
 908+ 68DD AA          >                db      {b $} | END_BIT     // msb as name end
 908+ 68DE             >
 908+ 68DE BB 68       >                dw      last_NFA            // Link to previous definition Name
 908+ 68E0             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 908+ 68E0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 908+ 68E0             >                else
 908+ 68E0 E2 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 908+ 68E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 908+ 68E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 908+ 68E2             >
 908+ 68E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 909+ 68E2 D1                           pop     de                    // de has u2 operand
 910+ 68E3 E1                           pop     hl                    // hl has u1 operand
 911+ 68E4 C5                           push    bc                    // Save Instruction Pointer
 912+ 68E5 45                           ld      b, l
 913+ 68E6 4B                           ld      c, e
 914+ 68E7 5D                           ld      e, l
 915+ 68E8 6A                           ld      l, d
 916+ 68E9 E5                           push    hl
 917+ 68EA 69                           ld      l, c
 918+ 68EB ED 30                        mul
 919+ 68ED EB                           ex      de, hl
 920+ 68EE ED 30                        mul
 921+ 68F0 AF                           xor     a
 922+ 68F1 19                           add     hl, de
 923+ 68F2 8F                           adc     a
 924+ 68F3 59                           ld      e, c
 925+ 68F4 50                           ld      d, b
 926+ 68F5 ED 30                        mul
 927+ 68F7 47                           ld      b, a
 928+ 68F8 4C                           ld      c, h
 929+ 68F9 7A                           ld      a, d
 930+ 68FA 85                           add     l
 931+ 68FB 67                           ld      h, a
 932+ 68FC 6B                           ld      l, e
 933+ 68FD D1                           pop     de
 934+ 68FE ED 30                        mul
 935+ 6900 EB                           ex      de, hl
 936+ 6901 ED 4A                        adc     hl, bc
 937+ 6903 C1                           pop     bc
 938+ 6904 D5                           push    de
 939+ 6905 E5                           push    hl
 940+ 6906                              next
 940+ 6906 DD E9       >                jp      (ix)
 941+ 6908
 942+ 6908              //  ______________________________________________________________________
 943+ 6908              //
 944+ 6908              // um/mod      ud u1 -- q r
 945+ 6908              // divides ud into u1 giving quotient q and remainder r
 946+ 6908              // algorithm takes 16 bit at a time starting from msb
 947+ 6908              // DE grows from lsb upward with quotient result
 948+ 6908              // HL keeps the remainder at each stage of division
 949+ 6908              // each loop 'lowers' the next binary digit to form the current dividend
 950+ 6908                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
 950+ 6908             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 950+ 6908             >
 950+ 6908             >                // dummy db directives used to calculate length of namec
 950+ 6908 55 4D 2F 4D >                db      "UM/MOD"
 950+ 690C 4F 44       >
 950+ 690E             >len_NFA         defl    $ - temp_NFA
 950+ 690E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 950+ 6908             >
 950+ 6908 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 950+ 6909 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
 950+ 690D 4F 44       >
 950+ 690F             >                org     $-1                 // alter last byte of Name just above to set
 950+ 690E C4          >                db      {b $} | END_BIT     // msb as name end
 950+ 690F             >
 950+ 690F DA 68       >                dw      last_NFA            // Link to previous definition Name
 950+ 6911             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 950+ 6911 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 950+ 6911             >                else
 950+ 6911 13 69       >                dw      $ + 2   ; ok        // is pointed by CFA
 950+ 6913             >                endif           ; ok        // for other definitions it "points" the correct handler
 950+ 6913             >                // Use of "; ok" to suppress "warning[fwdref]"
 950+ 6913             >
 950+ 6913             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 951+ 6913 60                           ld      h, b
 952+ 6914 69                           ld      l, c                    // Save Instruction Pointer
 953+ 6915
 954+ 6915 C1                           pop     bc                      // divisor
 955+ 6916
 956+ 6916 D1                           pop     de                      // < high part
 957+ 6917 E3                           ex      (sp), hl                // < low part and > save bc
 958+ 6918 EB                           ex      de, hl                  //
 959+ 6919 7D                           ld      a, l                    // check without changing arguments
 960+ 691A 91                           sub     c                       // if divisor is greater than high part
 961+ 691B 7C                           ld      a, h                    // so quotient will be in range
 962+ 691C 98                           sbc     a, b
 963+ 691D 30 23                        jr      nc, Um_DivMod_OutOfRange
 964+ 691F 3E 10                            ld      a, 16
 965+ 6921              Um_DivMod_Loop:
 966+ 6921 A7                                   and     a
 967+ 6922 CB 13                                rl      e
 968+ 6924 CB 12                                rl      d
 969+ 6926 CB 15                                rl      l
 970+ 6928 CB 14                                rl      h
 971+ 692A 30 05                                jr      nc, Um_DivMod_Carry
 972+ 692C A7                                       and     a
 973+ 692D ED 42                                    sbc     hl, bc
 974+ 692F 18 07                                jr      Um_DivMod_Endif    // else
 975+ 6931              Um_DivMod_Carry:
 976+ 6931 A7                                       and     a
 977+ 6932 ED 42                                    sbc     hl, bc
 978+ 6934 30 02                                    jr      nc, Um_DivMod_Endif
 979+ 6936 09                                           add     hl, bc
 980+ 6937 1B                                           dec     de
 981+ 6938              Um_DivMod_Endif:                                   // endif
 982+ 6938 13                                   inc     de
 983+ 6939 3D                                   dec     a
 984+ 693A 20 E5                            jr      nz, Um_DivMod_Loop
 985+ 693C EB                               ex      de, hl
 986+ 693D              Um_DivMod_Bailout:
 987+ 693D C1                               pop     bc                  // restore Instruction Pointer
 988+ 693E D5                               push    de                  // de := remanider
 989+ 693F E5                               push    hl                  // hl := quotient
 990+ 6940                                  next
 990+ 6940 DD E9       >                jp      (ix)
 991+ 6942
 992+ 6942              Um_DivMod_OutOfRange:
 993+ 6942 21 FF FF                     ld      hl, -1
 994+ 6945 54                           ld      d, h
 995+ 6946 5D                           ld      e, l
 996+ 6947 18 F4                        jr      Um_DivMod_Bailout
 997+ 6949
 998+ 6949              //  ______________________________________________________________________
 999+ 6949              //
1000+ 6949              // and          n1 n2 -- n3
1001+ 6949              // bit logical AND. Returns n3 as n1 & n2
1002+ 6949                              New_Def AND_OP, "AND", is_code, is_normal
1002+ 6949             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1002+ 6949             >
1002+ 6949             >                // dummy db directives used to calculate length of namec
1002+ 6949 41 4E 44    >                db      "AND"
1002+ 694C             >len_NFA         defl    $ - temp_NFA
1002+ 694C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1002+ 6949             >
1002+ 6949 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1002+ 694A 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1002+ 694D             >                org     $-1                 // alter last byte of Name just above to set
1002+ 694C C4          >                db      {b $} | END_BIT     // msb as name end
1002+ 694D             >
1002+ 694D 08 69       >                dw      last_NFA            // Link to previous definition Name
1002+ 694F             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1002+ 694F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1002+ 694F             >                else
1002+ 694F 51 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1002+ 6951             >                endif           ; ok        // for other definitions it "points" the correct handler
1002+ 6951             >                // Use of "; ok" to suppress "warning[fwdref]"
1002+ 6951             >
1002+ 6951             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1003+ 6951 D1                           pop     de
1004+ 6952 E1                           pop     hl
1005+ 6953 7B                           ld      a, e
1006+ 6954 A5                           and     l
1007+ 6955 6F                           ld      l, a
1008+ 6956 7A                           ld      a, d
1009+ 6957 A4                           and     h
1010+ 6958 67                           ld      h, a
1011+ 6959
1012+ 6959                              psh1
1012+ 6959 E5          >                push    hl
1012+ 695A DD E9       >                jp      (ix)
1013+ 695C
1014+ 695C              //  ______________________________________________________________________
1015+ 695C              //
1016+ 695C              // or           n1 n2 -- n3
1017+ 695C              // bit logical OR. Returns n3 as n1 | n2
1018+ 695C                              New_Def OR_OP, "OR", is_code, is_normal
1018+ 695C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1018+ 695C             >
1018+ 695C             >                // dummy db directives used to calculate length of namec
1018+ 695C 4F 52       >                db      "OR"
1018+ 695E             >len_NFA         defl    $ - temp_NFA
1018+ 695E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1018+ 695C             >
1018+ 695C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1018+ 695D 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1018+ 695F             >                org     $-1                 // alter last byte of Name just above to set
1018+ 695E D2          >                db      {b $} | END_BIT     // msb as name end
1018+ 695F             >
1018+ 695F 49 69       >                dw      last_NFA            // Link to previous definition Name
1018+ 6961             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1018+ 6961 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1018+ 6961             >                else
1018+ 6961 63 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1018+ 6963             >                endif           ; ok        // for other definitions it "points" the correct handler
1018+ 6963             >                // Use of "; ok" to suppress "warning[fwdref]"
1018+ 6963             >
1018+ 6963             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1019+ 6963 D1                           pop     de
1020+ 6964 E1                           pop     hl
1021+ 6965 7B                           ld      a, e
1022+ 6966 B5                           or      l
1023+ 6967 6F                           ld      l, a
1024+ 6968 7A                           ld      a, d
1025+ 6969 B4                           or      h
1026+ 696A 67                           ld      h, a
1027+ 696B
1028+ 696B                              psh1
1028+ 696B E5          >                push    hl
1028+ 696C DD E9       >                jp      (ix)
1029+ 696E
1030+ 696E              //  ______________________________________________________________________
1031+ 696E              //
1032+ 696E              // xor          n1 n2 -- n3
1033+ 696E              // bit logical OR. Returns n3 as n1 ^ n2
1034+ 696E                              New_Def XOR_OP, "XOR", is_code, is_normal
1034+ 696E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1034+ 696E             >
1034+ 696E             >                // dummy db directives used to calculate length of namec
1034+ 696E 58 4F 52    >                db      "XOR"
1034+ 6971             >len_NFA         defl    $ - temp_NFA
1034+ 6971             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1034+ 696E             >
1034+ 696E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1034+ 696F 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1034+ 6972             >                org     $-1                 // alter last byte of Name just above to set
1034+ 6971 D2          >                db      {b $} | END_BIT     // msb as name end
1034+ 6972             >
1034+ 6972 5C 69       >                dw      last_NFA            // Link to previous definition Name
1034+ 6974             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1034+ 6974 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1034+ 6974             >                else
1034+ 6974 76 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1034+ 6976             >                endif           ; ok        // for other definitions it "points" the correct handler
1034+ 6976             >                // Use of "; ok" to suppress "warning[fwdref]"
1034+ 6976             >
1034+ 6976             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1035+ 6976 D1                           pop     de
1036+ 6977 E1                           pop     hl
1037+ 6978 7B                           ld      a, e
1038+ 6979 AD                           xor     l
1039+ 697A 6F                           ld      l, a
1040+ 697B 7A                           ld      a, d
1041+ 697C AC                           xor     h
1042+ 697D 67                           ld      h, a
1043+ 697E
1044+ 697E                              psh1
1044+ 697E E5          >                push    hl
1044+ 697F DD E9       >                jp      (ix)
1045+ 6981
1046+ 6981              //  ______________________________________________________________________
1047+ 6981              //
1048+ 6981              // sp@      -- a
1049+ 6981              // returns on top of stack the value of SP before execution
1050+ 6981                              New_Def SPFETCH, "SP@", is_code, is_normal
1050+ 6981             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1050+ 6981             >
1050+ 6981             >                // dummy db directives used to calculate length of namec
1050+ 6981 53 50 40    >                db      "SP@"
1050+ 6984             >len_NFA         defl    $ - temp_NFA
1050+ 6984             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1050+ 6981             >
1050+ 6981 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1050+ 6982 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1050+ 6985             >                org     $-1                 // alter last byte of Name just above to set
1050+ 6984 C0          >                db      {b $} | END_BIT     // msb as name end
1050+ 6985             >
1050+ 6985 6E 69       >                dw      last_NFA            // Link to previous definition Name
1050+ 6987             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1050+ 6987 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1050+ 6987             >                else
1050+ 6987 89 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1050+ 6989             >                endif           ; ok        // for other definitions it "points" the correct handler
1050+ 6989             >                // Use of "; ok" to suppress "warning[fwdref]"
1050+ 6989             >
1050+ 6989             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1051+ 6989
1052+ 6989 21 00 00                     ld      hl, 0
1053+ 698C 39                           add     hl, sp
1054+ 698D
1055+ 698D                              psh1
1055+ 698D E5          >                push    hl
1055+ 698E DD E9       >                jp      (ix)
1056+ 6990
1057+ 6990              //  ______________________________________________________________________
1058+ 6990              //
1059+ 6990              // sp!      a --
1060+ 6990              // restore SP to the initial value passed
1061+ 6990              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1062+ 6990                              New_Def SPSTORE, "SP!", is_code, is_normal
1062+ 6990             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1062+ 6990             >
1062+ 6990             >                // dummy db directives used to calculate length of namec
1062+ 6990 53 50 21    >                db      "SP!"
1062+ 6993             >len_NFA         defl    $ - temp_NFA
1062+ 6993             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1062+ 6990             >
1062+ 6990 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1062+ 6991 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1062+ 6994             >                org     $-1                 // alter last byte of Name just above to set
1062+ 6993 A1          >                db      {b $} | END_BIT     // msb as name end
1062+ 6994             >
1062+ 6994 81 69       >                dw      last_NFA            // Link to previous definition Name
1062+ 6996             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1062+ 6996 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1062+ 6996             >                else
1062+ 6996 98 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1062+ 6998             >                endif           ; ok        // for other definitions it "points" the correct handler
1062+ 6998             >                // Use of "; ok" to suppress "warning[fwdref]"
1062+ 6998             >
1062+ 6998             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1063+ 6998 E1                           pop     hl
1064+ 6999 F9                           ld      sp, hl
1065+ 699A
1066+ 699A                              next
1066+ 699A DD E9       >                jp      (ix)
1067+ 699C
1068+ 699C              //  ______________________________________________________________________
1069+ 699C              //
1070+ 699C              // rp@      -- a
1071+ 699C              // returns on top of stack the value of Return-Pointer
1072+ 699C                              New_Def RPFETCH, "RP@", is_code, is_normal
1072+ 699C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1072+ 699C             >
1072+ 699C             >                // dummy db directives used to calculate length of namec
1072+ 699C 52 50 40    >                db      "RP@"
1072+ 699F             >len_NFA         defl    $ - temp_NFA
1072+ 699F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1072+ 699C             >
1072+ 699C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1072+ 699D 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1072+ 69A0             >                org     $-1                 // alter last byte of Name just above to set
1072+ 699F C0          >                db      {b $} | END_BIT     // msb as name end
1072+ 69A0             >
1072+ 69A0 90 69       >                dw      last_NFA            // Link to previous definition Name
1072+ 69A2             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1072+ 69A2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1072+ 69A2             >                else
1072+ 69A2 A4 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1072+ 69A4             >                endif           ; ok        // for other definitions it "points" the correct handler
1072+ 69A4             >                // Use of "; ok" to suppress "warning[fwdref]"
1072+ 69A4             >
1072+ 69A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1073+ 69A4
1074+ 69A4                              ldhlrp
1074+ 69A4 2A 30 64    >                ld      hl,(RP_Pointer)
1075+ 69A7
1076+ 69A7                              psh1
1076+ 69A7 E5          >                push    hl
1076+ 69A8 DD E9       >                jp      (ix)
1077+ 69AA
1078+ 69AA              //  ______________________________________________________________________
1079+ 69AA              //
1080+ 69AA              // rp!      a --
1081+ 69AA              // restore RP to the initial value passed
1082+ 69AA              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1083+ 69AA                              New_Def RPSTORE, "RP!", is_code, is_normal
1083+ 69AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1083+ 69AA             >
1083+ 69AA             >                // dummy db directives used to calculate length of namec
1083+ 69AA 52 50 21    >                db      "RP!"
1083+ 69AD             >len_NFA         defl    $ - temp_NFA
1083+ 69AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1083+ 69AA             >
1083+ 69AA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1083+ 69AB 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1083+ 69AE             >                org     $-1                 // alter last byte of Name just above to set
1083+ 69AD A1          >                db      {b $} | END_BIT     // msb as name end
1083+ 69AE             >
1083+ 69AE 9C 69       >                dw      last_NFA            // Link to previous definition Name
1083+ 69B0             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1083+ 69B0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1083+ 69B0             >                else
1083+ 69B0 B2 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1083+ 69B2             >                endif           ; ok        // for other definitions it "points" the correct handler
1083+ 69B2             >                // Use of "; ok" to suppress "warning[fwdref]"
1083+ 69B2             >
1083+ 69B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1084+ 69B2 E1                           pop     hl
1085+ 69B3                              ldrphl
1085+ 69B3 22 30 64    >                ld      (RP_Pointer),hl
1086+ 69B6
1087+ 69B6                              next
1087+ 69B6 DD E9       >                jp      (ix)
1088+ 69B8
1089+ 69B8              //  ______________________________________________________________________
1090+ 69B8              //
1091+ 69B8              // ;s      --
1092+ 69B8              // exits back to the caller word
1093+ 69B8                              New_Def EXIT, ";S", is_code, is_normal
1093+ 69B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1093+ 69B8             >
1093+ 69B8             >                // dummy db directives used to calculate length of namec
1093+ 69B8 3B 53       >                db      ";S"
1093+ 69BA             >len_NFA         defl    $ - temp_NFA
1093+ 69BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1093+ 69B8             >
1093+ 69B8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1093+ 69B9 3B 53       >                db      ";S"               // name string in 7-bit ascii, but
1093+ 69BB             >                org     $-1                 // alter last byte of Name just above to set
1093+ 69BA D3          >                db      {b $} | END_BIT     // msb as name end
1093+ 69BB             >
1093+ 69BB AA 69       >                dw      last_NFA            // Link to previous definition Name
1093+ 69BD             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1093+ 69BD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1093+ 69BD             >                else
1093+ 69BD BF 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1093+ 69BF             >                endif           ; ok        // for other definitions it "points" the correct handler
1093+ 69BF             >                // Use of "; ok" to suppress "warning[fwdref]"
1093+ 69BF             >
1093+ 69BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1094+ 69BF                              ldhlrp                      // Get Return Stack Pointer
1094+ 69BF 2A 30 64    >                ld      hl,(RP_Pointer)
1095+ 69C2 4E                           ld      c, (hl)             // pop Instruction Pointer
1096+ 69C3 23                           inc     hl                  // from Return Stack
1097+ 69C4 46                           ld      b, (hl)
1098+ 69C5 23                           inc     hl
1099+ 69C6                              ldrphl                      // Set Return Stack Pointer
1099+ 69C6 22 30 64    >                ld      (RP_Pointer),hl
1100+ 69C9                              next
1100+ 69C9 DD E9       >                jp      (ix)
1101+ 69CB
1102+ 69CB              //  ______________________________________________________________________
1103+ 69CB              //
1104+ 69CB              // leave        --
1105+ 69CB              // set the limit-of-loop equal to the current index
1106+ 69CB              // this forces to leave from loop at the end of the current iteration
1107+ 69CB                              New_Def LEAVE, "LEAVE", is_code, is_normal
1107+ 69CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1107+ 69CB             >
1107+ 69CB             >                // dummy db directives used to calculate length of namec
1107+ 69CB 4C 45 41 56 >                db      "LEAVE"
1107+ 69CF 45          >
1107+ 69D0             >len_NFA         defl    $ - temp_NFA
1107+ 69D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1107+ 69CB             >
1107+ 69CB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1107+ 69CC 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
1107+ 69D0 45          >
1107+ 69D1             >                org     $-1                 // alter last byte of Name just above to set
1107+ 69D0 C5          >                db      {b $} | END_BIT     // msb as name end
1107+ 69D1             >
1107+ 69D1 B8 69       >                dw      last_NFA            // Link to previous definition Name
1107+ 69D3             >LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1107+ 69D3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1107+ 69D3             >                else
1107+ 69D3 D5 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1107+ 69D5             >                endif           ; ok        // for other definitions it "points" the correct handler
1107+ 69D5             >                // Use of "; ok" to suppress "warning[fwdref]"
1107+ 69D5             >
1107+ 69D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1108+ 69D5
1109+ 69D5                              ldhlrp
1109+ 69D5 2A 30 64    >                ld      hl,(RP_Pointer)
1110+ 69D8 5E                           ld      e, (hl)
1111+ 69D9 23                           inc     hl
1112+ 69DA 56                           ld      d, (hl)
1113+ 69DB 23                           inc     hl
1114+ 69DC 73                           ld      (hl), e
1115+ 69DD 23                           inc     hl
1116+ 69DE 72                           ld      (hl), d
1117+ 69DF
1118+ 69DF                              next
1118+ 69DF DD E9       >                jp      (ix)
1119+ 69E1
1120+ 69E1              //  ______________________________________________________________________
1121+ 69E1              //
1122+ 69E1              // >r      n --
1123+ 69E1              // pop from calculator-stack and push into return-stack
1124+ 69E1                              New_Def TO_R, ">R", is_code, is_normal
1124+ 69E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1124+ 69E1             >
1124+ 69E1             >                // dummy db directives used to calculate length of namec
1124+ 69E1 3E 52       >                db      ">R"
1124+ 69E3             >len_NFA         defl    $ - temp_NFA
1124+ 69E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1124+ 69E1             >
1124+ 69E1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1124+ 69E2 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1124+ 69E4             >                org     $-1                 // alter last byte of Name just above to set
1124+ 69E3 D2          >                db      {b $} | END_BIT     // msb as name end
1124+ 69E4             >
1124+ 69E4 CB 69       >                dw      last_NFA            // Link to previous definition Name
1124+ 69E6             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1124+ 69E6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1124+ 69E6             >                else
1124+ 69E6 E8 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1124+ 69E8             >                endif           ; ok        // for other definitions it "points" the correct handler
1124+ 69E8             >                // Use of "; ok" to suppress "warning[fwdref]"
1124+ 69E8             >
1124+ 69E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1125+ 69E8 D1                           pop     de
1126+ 69E9                              ldhlrp
1126+ 69E9 2A 30 64    >                ld      hl,(RP_Pointer)
1127+ 69EC 2B                           dec     hl
1128+ 69ED 72                           ld      (hl), d             // store current TOS
1129+ 69EE 2B                           dec     hl                  // to Return Stack
1130+ 69EF 73                           ld      (hl), e
1131+ 69F0                              ldrphl
1131+ 69F0 22 30 64    >                ld      (RP_Pointer),hl
1132+ 69F3
1133+ 69F3                              next
1133+ 69F3 DD E9       >                jp      (ix)
1134+ 69F5
1135+ 69F5              //  ______________________________________________________________________
1136+ 69F5              //
1137+ 69F5              // r>      -- n
1138+ 69F5              // pop from return-stack and push into calculator-stack
1139+ 69F5                              New_Def R_TO, "R>", is_code, is_normal
1139+ 69F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1139+ 69F5             >
1139+ 69F5             >                // dummy db directives used to calculate length of namec
1139+ 69F5 52 3E       >                db      "R>"
1139+ 69F7             >len_NFA         defl    $ - temp_NFA
1139+ 69F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1139+ 69F5             >
1139+ 69F5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1139+ 69F6 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1139+ 69F8             >                org     $-1                 // alter last byte of Name just above to set
1139+ 69F7 BE          >                db      {b $} | END_BIT     // msb as name end
1139+ 69F8             >
1139+ 69F8 E1 69       >                dw      last_NFA            // Link to previous definition Name
1139+ 69FA             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1139+ 69FA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1139+ 69FA             >                else
1139+ 69FA FC 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1139+ 69FC             >                endif           ; ok        // for other definitions it "points" the correct handler
1139+ 69FC             >                // Use of "; ok" to suppress "warning[fwdref]"
1139+ 69FC             >
1139+ 69FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1140+ 69FC
1141+ 69FC                              ldhlrp
1141+ 69FC 2A 30 64    >                ld      hl,(RP_Pointer)
1142+ 69FF 5E                           ld      e, (hl)             // retrieve from Return Stack
1143+ 6A00 23                           inc     hl
1144+ 6A01 56                           ld      d, (hl)
1145+ 6A02 23                           inc     hl
1146+ 6A03                              ldrphl
1146+ 6A03 22 30 64    >                ld      (RP_Pointer),hl
1147+ 6A06 D5                           push    de
1148+ 6A07                              next
1148+ 6A07 DD E9       >                jp      (ix)
1149+ 6A09
1150+ 6A09              //  ______________________________________________________________________
1151+ 6A09              //
1152+ 6A09              // r            -- n
1153+ 6A09              // return on top of stack the value of top of return-stack
1154+ 6A09              // Since this is the same as I, we alter R's CFA to jump there
1155+ 6A09                              New_Def R_OP, "R@", I_Ptr, is_normal
1155+ 6A09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1155+ 6A09             >
1155+ 6A09             >                // dummy db directives used to calculate length of namec
1155+ 6A09 52 40       >                db      "R@"
1155+ 6A0B             >len_NFA         defl    $ - temp_NFA
1155+ 6A0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1155+ 6A09             >
1155+ 6A09 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1155+ 6A0A 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1155+ 6A0C             >                org     $-1                 // alter last byte of Name just above to set
1155+ 6A0B C0          >                db      {b $} | END_BIT     // msb as name end
1155+ 6A0C             >
1155+ 6A0C F5 69       >                dw      last_NFA            // Link to previous definition Name
1155+ 6A0E             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1155+ 6A0E 12 65       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1155+ 6A10             >                else
1155+ 6A10 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1155+ 6A10             >                endif           ; ok        // for other definitions it "points" the correct handler
1155+ 6A10             >                // Use of "; ok" to suppress "warning[fwdref]"
1155+ 6A10             >
1155+ 6A10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1156+ 6A10
1157+ 6A10              //  ______________________________________________________________________
1158+ 6A10              //
1159+ 6A10              // r            -- n
1160+ 6A10              // return on top of stack the value of top of return-stack
1161+ 6A10              // Since this is the same as I, we alter R's CFA to jump there
1162+ 6A10                              New_Def R_OLD, "R", I_Ptr, is_normal
1162+ 6A10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1162+ 6A10             >
1162+ 6A10             >                // dummy db directives used to calculate length of namec
1162+ 6A10 52          >                db      "R"
1162+ 6A11             >len_NFA         defl    $ - temp_NFA
1162+ 6A11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1162+ 6A10             >
1162+ 6A10 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1162+ 6A11 52          >                db      "R"               // name string in 7-bit ascii, but
1162+ 6A12             >                org     $-1                 // alter last byte of Name just above to set
1162+ 6A11 D2          >                db      {b $} | END_BIT     // msb as name end
1162+ 6A12             >
1162+ 6A12 09 6A       >                dw      last_NFA            // Link to previous definition Name
1162+ 6A14             >R_OLD:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1162+ 6A14 12 65       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1162+ 6A16             >                else
1162+ 6A16 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1162+ 6A16             >                endif           ; ok        // for other definitions it "points" the correct handler
1162+ 6A16             >                // Use of "; ok" to suppress "warning[fwdref]"
1162+ 6A16             >
1162+ 6A16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1163+ 6A16
1164+ 6A16              //  ______________________________________________________________________
1165+ 6A16              //
1166+ 6A16              // 0=           n -- f
1167+ 6A16              // true (non zero) if n is zero, false (0) elsewere
1168+ 6A16                              New_Def ZEQUAL, "0=", is_code, is_normal
1168+ 6A16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1168+ 6A16             >
1168+ 6A16             >                // dummy db directives used to calculate length of namec
1168+ 6A16 30 3D       >                db      "0="
1168+ 6A18             >len_NFA         defl    $ - temp_NFA
1168+ 6A18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1168+ 6A16             >
1168+ 6A16 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1168+ 6A17 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1168+ 6A19             >                org     $-1                 // alter last byte of Name just above to set
1168+ 6A18 BD          >                db      {b $} | END_BIT     // msb as name end
1168+ 6A19             >
1168+ 6A19 10 6A       >                dw      last_NFA            // Link to previous definition Name
1168+ 6A1B             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1168+ 6A1B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1168+ 6A1B             >                else
1168+ 6A1B 1D 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1168+ 6A1D             >                endif           ; ok        // for other definitions it "points" the correct handler
1168+ 6A1D             >                // Use of "; ok" to suppress "warning[fwdref]"
1168+ 6A1D             >
1168+ 6A1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1169+ 6A1D              Zero_Equal:
1170+ 6A1D E1                           pop     hl
1171+ 6A1E 7D                           ld      a, l
1172+ 6A1F B4                           or      h
1173+ 6A20 21 00 00                     ld      hl, FALSE_FLAG
1174+ 6A23 20 01                        jr      nz, ZEqual_Skip
1175+ 6A25 2C                               inc     l
1176+ 6A26              ZEqual_Skip:
1177+ 6A26                              psh1
1177+ 6A26 E5          >                push    hl
1177+ 6A27 DD E9       >                jp      (ix)
1178+ 6A29
1179+ 6A29              //  ______________________________________________________________________
1180+ 6A29              //
1181+ 6A29              // not         a1 -- a2
1182+ 6A29              // increment by 2 top of stack
1183+ 6A29                              New_Def NOT_OP, "NOT", Zero_Equal, is_normal
1183+ 6A29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1183+ 6A29             >
1183+ 6A29             >                // dummy db directives used to calculate length of namec
1183+ 6A29 4E 4F 54    >                db      "NOT"
1183+ 6A2C             >len_NFA         defl    $ - temp_NFA
1183+ 6A2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1183+ 6A29             >
1183+ 6A29 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1183+ 6A2A 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1183+ 6A2D             >                org     $-1                 // alter last byte of Name just above to set
1183+ 6A2C D4          >                db      {b $} | END_BIT     // msb as name end
1183+ 6A2D             >
1183+ 6A2D 16 6A       >                dw      last_NFA            // Link to previous definition Name
1183+ 6A2F             >NOT_OP:          if Zero_Equal != 0 ; ok        // This is the start address of the direct jp(hl)
1183+ 6A2F 1D 6A       >                dw      Zero_Equal ; ok        // for primitive definitions  actual code
1183+ 6A31             >                else
1183+ 6A31 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1183+ 6A31             >                endif           ; ok        // for other definitions it "points" the correct handler
1183+ 6A31             >                // Use of "; ok" to suppress "warning[fwdref]"
1183+ 6A31             >
1183+ 6A31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1184+ 6A31
1185+ 6A31              //  ______________________________________________________________________
1186+ 6A31              //
1187+ 6A31              // 0<           n -- f
1188+ 6A31              // true (non zero) if n is less than zero, false (0) elsewere
1189+ 6A31                              New_Def ZLESS, "0<", is_code, is_normal
1189+ 6A31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1189+ 6A31             >
1189+ 6A31             >                // dummy db directives used to calculate length of namec
1189+ 6A31 30 3C       >                db      "0<"
1189+ 6A33             >len_NFA         defl    $ - temp_NFA
1189+ 6A33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1189+ 6A31             >
1189+ 6A31 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1189+ 6A32 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1189+ 6A34             >                org     $-1                 // alter last byte of Name just above to set
1189+ 6A33 BC          >                db      {b $} | END_BIT     // msb as name end
1189+ 6A34             >
1189+ 6A34 29 6A       >                dw      last_NFA            // Link to previous definition Name
1189+ 6A36             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1189+ 6A36 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1189+ 6A36             >                else
1189+ 6A36 38 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1189+ 6A38             >                endif           ; ok        // for other definitions it "points" the correct handler
1189+ 6A38             >                // Use of "; ok" to suppress "warning[fwdref]"
1189+ 6A38             >
1189+ 6A38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1190+ 6A38 E1                           pop     hl
1191+ 6A39 29                           add     hl, hl
1192+ 6A3A 21 00 00                     ld      hl, 0
1193+ 6A3D 30 01                        jr      nc, ZLess_Skip
1194+ 6A3F 2C                               inc     l
1195+ 6A40              ZLess_Skip:
1196+ 6A40                              psh1
1196+ 6A40 E5          >                push    hl
1196+ 6A41 DD E9       >                jp      (ix)
1197+ 6A43
1198+ 6A43              //  ______________________________________________________________________
1199+ 6A43              //
1200+ 6A43              // 0>           n -- f
1201+ 6A43              // true (non zero) if n is less than zero, false (0) elsewere
1202+ 6A43                              New_Def ZGREATER, "0>", is_code, is_normal
1202+ 6A43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1202+ 6A43             >
1202+ 6A43             >                // dummy db directives used to calculate length of namec
1202+ 6A43 30 3E       >                db      "0>"
1202+ 6A45             >len_NFA         defl    $ - temp_NFA
1202+ 6A45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1202+ 6A43             >
1202+ 6A43 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1202+ 6A44 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1202+ 6A46             >                org     $-1                 // alter last byte of Name just above to set
1202+ 6A45 BE          >                db      {b $} | END_BIT     // msb as name end
1202+ 6A46             >
1202+ 6A46 31 6A       >                dw      last_NFA            // Link to previous definition Name
1202+ 6A48             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1202+ 6A48 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1202+ 6A48             >                else
1202+ 6A48 4A 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1202+ 6A4A             >                endif           ; ok        // for other definitions it "points" the correct handler
1202+ 6A4A             >                // Use of "; ok" to suppress "warning[fwdref]"
1202+ 6A4A             >
1202+ 6A4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1203+ 6A4A E1                           pop     hl
1204+ 6A4B 7D                           ld      a, l
1205+ 6A4C B4                           or      h
1206+ 6A4D 29                           add     hl, hl
1207+ 6A4E 21 00 00                     ld      hl, FALSE_FLAG
1208+ 6A51 38 04                        jr      c, ZGreater_Skip
1209+ 6A53 A7                               and     a
1210+ 6A54 28 01                            jr      z, ZGreater_Skip
1211+ 6A56 2C                                   inc     l
1212+ 6A57              ZGreater_Skip:
1213+ 6A57                              psh1
1213+ 6A57 E5          >                push    hl
1213+ 6A58 DD E9       >                jp      (ix)
1214+ 6A5A
1215+ 6A5A              //  ______________________________________________________________________
1216+ 6A5A              //
1217+ 6A5A              // +            n1 n2 -- n3
1218+ 6A5A              // returns the unsigned sum of two top values
1219+ 6A5A                              New_Def PLUS, "+", is_code, is_normal
1219+ 6A5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1219+ 6A5A             >
1219+ 6A5A             >                // dummy db directives used to calculate length of namec
1219+ 6A5A 2B          >                db      "+"
1219+ 6A5B             >len_NFA         defl    $ - temp_NFA
1219+ 6A5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1219+ 6A5A             >
1219+ 6A5A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1219+ 6A5B 2B          >                db      "+"               // name string in 7-bit ascii, but
1219+ 6A5C             >                org     $-1                 // alter last byte of Name just above to set
1219+ 6A5B AB          >                db      {b $} | END_BIT     // msb as name end
1219+ 6A5C             >
1219+ 6A5C 43 6A       >                dw      last_NFA            // Link to previous definition Name
1219+ 6A5E             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1219+ 6A5E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1219+ 6A5E             >                else
1219+ 6A5E 60 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1219+ 6A60             >                endif           ; ok        // for other definitions it "points" the correct handler
1219+ 6A60             >                // Use of "; ok" to suppress "warning[fwdref]"
1219+ 6A60             >
1219+ 6A60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1220+ 6A60 E1                           pop     hl
1221+ 6A61 D1                           pop     de
1222+ 6A62 19                           add     hl, de
1223+ 6A63
1224+ 6A63                              psh1
1224+ 6A63 E5          >                push    hl
1224+ 6A64 DD E9       >                jp      (ix)
1225+ 6A66
1226+ 6A66
1227+ 6A66              //  ______________________________________________________________________
1228+ 6A66              //
1229+ 6A66              // d+           d1 d2 -- d3
1230+ 6A66              // returns the unsigned sum of two top double-numbers
1231+ 6A66              //      d2  d1
1232+ 6A66              //      h l h l
1233+ 6A66              // SP   LHEDLHED
1234+ 6A66              // SP  +01234567
1235+ 6A66                              New_Def DPLUS, "D+", is_code, is_normal
1235+ 6A66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1235+ 6A66             >
1235+ 6A66             >                // dummy db directives used to calculate length of namec
1235+ 6A66 44 2B       >                db      "D+"
1235+ 6A68             >len_NFA         defl    $ - temp_NFA
1235+ 6A68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1235+ 6A66             >
1235+ 6A66 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1235+ 6A67 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1235+ 6A69             >                org     $-1                 // alter last byte of Name just above to set
1235+ 6A68 AB          >                db      {b $} | END_BIT     // msb as name end
1235+ 6A69             >
1235+ 6A69 5A 6A       >                dw      last_NFA            // Link to previous definition Name
1235+ 6A6B             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1235+ 6A6B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1235+ 6A6B             >                else
1235+ 6A6B 6D 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1235+ 6A6D             >                endif           ; ok        // for other definitions it "points" the correct handler
1235+ 6A6D             >                // Use of "; ok" to suppress "warning[fwdref]"
1235+ 6A6D             >
1235+ 6A6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1236+ 6A6D
1237+ 6A6D 21 07 00                     ld      hl, 7
1238+ 6A70 39                           add     hl, sp
1239+ 6A71 56                           ld      d, (hl)
1240+ 6A72 70                           ld      (hl), b             // Save IP
1241+ 6A73 2B                           dec     hl
1242+ 6A74 5E                           ld      e, (hl)
1243+ 6A75 71                           ld      (hl), c             // de := d1.L
1244+ 6A76 C1                           pop     bc                  // bc := d2.H
1245+ 6A77 E1                           pop     hl                  // hl := d2.L
1246+ 6A78 19                           add     hl, de              // hl := d2.L + d1.L
1247+ 6A79 EB                           ex      de, hl              // de := lower
1248+ 6A7A E1                           pop     hl                  // d1.H
1249+ 6A7B ED 4A                        adc     hl, bc              // d1.H + d2.H
1250+ 6A7D C1                           pop     bc                  // Restore IP
1251+ 6A7E
1252+ 6A7E
1253+ 6A7E                              psh2
1253+ 6A7E D5          >                push    de
1253+ 6A7F E5          >                push    hl
1253+ 6A80 DD E9       >                jp      (ix)
1254+ 6A82
1255+ 6A82              //  ______________________________________________________________________
1256+ 6A82              //
1257+ 6A82              // 1+           n1 -- n2
1258+ 6A82              // increment by 1 top of stack
1259+ 6A82                              New_Def ONE_PLUS, "1+", is_code, is_normal
1259+ 6A82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1259+ 6A82             >
1259+ 6A82             >                // dummy db directives used to calculate length of namec
1259+ 6A82 31 2B       >                db      "1+"
1259+ 6A84             >len_NFA         defl    $ - temp_NFA
1259+ 6A84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1259+ 6A82             >
1259+ 6A82 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1259+ 6A83 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1259+ 6A85             >                org     $-1                 // alter last byte of Name just above to set
1259+ 6A84 AB          >                db      {b $} | END_BIT     // msb as name end
1259+ 6A85             >
1259+ 6A85 66 6A       >                dw      last_NFA            // Link to previous definition Name
1259+ 6A87             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1259+ 6A87 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1259+ 6A87             >                else
1259+ 6A87 89 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1259+ 6A89             >                endif           ; ok        // for other definitions it "points" the correct handler
1259+ 6A89             >                // Use of "; ok" to suppress "warning[fwdref]"
1259+ 6A89             >
1259+ 6A89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1260+ 6A89 E1                           pop     hl
1261+ 6A8A 23                           inc     hl
1262+ 6A8B
1263+ 6A8B                              psh1
1263+ 6A8B E5          >                push    hl
1263+ 6A8C DD E9       >                jp      (ix)
1264+ 6A8E
1265+ 6A8E              //  ______________________________________________________________________
1266+ 6A8E              //
1267+ 6A8E              // 1-           n1 -- n2
1268+ 6A8E              // decrement by 1 top of stack
1269+ 6A8E                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1269+ 6A8E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1269+ 6A8E             >
1269+ 6A8E             >                // dummy db directives used to calculate length of namec
1269+ 6A8E 31 2D       >                db      "1-"
1269+ 6A90             >len_NFA         defl    $ - temp_NFA
1269+ 6A90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1269+ 6A8E             >
1269+ 6A8E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1269+ 6A8F 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1269+ 6A91             >                org     $-1                 // alter last byte of Name just above to set
1269+ 6A90 AD          >                db      {b $} | END_BIT     // msb as name end
1269+ 6A91             >
1269+ 6A91 82 6A       >                dw      last_NFA            // Link to previous definition Name
1269+ 6A93             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1269+ 6A93 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1269+ 6A93             >                else
1269+ 6A93 95 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1269+ 6A95             >                endif           ; ok        // for other definitions it "points" the correct handler
1269+ 6A95             >                // Use of "; ok" to suppress "warning[fwdref]"
1269+ 6A95             >
1269+ 6A95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1270+ 6A95 E1                           pop     hl
1271+ 6A96 2B                           dec     hl
1272+ 6A97
1273+ 6A97                              psh1
1273+ 6A97 E5          >                push    hl
1273+ 6A98 DD E9       >                jp      (ix)
1274+ 6A9A
1275+ 6A9A              //  ______________________________________________________________________
1276+ 6A9A              //
1277+ 6A9A              // 2+           n1 -- n2
1278+ 6A9A              // increment by 2 top of stack
1279+ 6A9A                              New_Def TWO_PLUS, "2+", is_code, is_normal
1279+ 6A9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1279+ 6A9A             >
1279+ 6A9A             >                // dummy db directives used to calculate length of namec
1279+ 6A9A 32 2B       >                db      "2+"
1279+ 6A9C             >len_NFA         defl    $ - temp_NFA
1279+ 6A9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1279+ 6A9A             >
1279+ 6A9A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1279+ 6A9B 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1279+ 6A9D             >                org     $-1                 // alter last byte of Name just above to set
1279+ 6A9C AB          >                db      {b $} | END_BIT     // msb as name end
1279+ 6A9D             >
1279+ 6A9D 8E 6A       >                dw      last_NFA            // Link to previous definition Name
1279+ 6A9F             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1279+ 6A9F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1279+ 6A9F             >                else
1279+ 6A9F A1 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1279+ 6AA1             >                endif           ; ok        // for other definitions it "points" the correct handler
1279+ 6AA1             >                // Use of "; ok" to suppress "warning[fwdref]"
1279+ 6AA1             >
1279+ 6AA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1280+ 6AA1              Two_Plus:
1281+ 6AA1 E1                           pop     hl
1282+ 6AA2 23                           inc     hl
1283+ 6AA3 23                           inc     hl
1284+ 6AA4
1285+ 6AA4                              psh1
1285+ 6AA4 E5          >                push    hl
1285+ 6AA5 DD E9       >                jp      (ix)
1286+ 6AA7
1287+ 6AA7              //  ______________________________________________________________________
1288+ 6AA7              //
1289+ 6AA7              // cell+        a1 -- a2
1290+ 6AA7              // increment by 2 top of stack
1291+ 6AA7                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1291+ 6AA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1291+ 6AA7             >
1291+ 6AA7             >                // dummy db directives used to calculate length of namec
1291+ 6AA7 43 45 4C 4C >                db      "CELL+"
1291+ 6AAB 2B          >
1291+ 6AAC             >len_NFA         defl    $ - temp_NFA
1291+ 6AAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1291+ 6AA7             >
1291+ 6AA7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1291+ 6AA8 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1291+ 6AAC 2B          >
1291+ 6AAD             >                org     $-1                 // alter last byte of Name just above to set
1291+ 6AAC AB          >                db      {b $} | END_BIT     // msb as name end
1291+ 6AAD             >
1291+ 6AAD 9A 6A       >                dw      last_NFA            // Link to previous definition Name
1291+ 6AAF             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1291+ 6AAF A1 6A       >                dw      Two_Plus ; ok        // for primitive definitions  actual code
1291+ 6AB1             >                else
1291+ 6AB1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1291+ 6AB1             >                endif           ; ok        // for other definitions it "points" the correct handler
1291+ 6AB1             >                // Use of "; ok" to suppress "warning[fwdref]"
1291+ 6AB1             >
1291+ 6AB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1292+ 6AB1
1293+ 6AB1              //  ______________________________________________________________________
1294+ 6AB1              //
1295+ 6AB1              // align        a1 -- a2
1296+ 6AB1              // align memory : not used
1297+ 6AB1              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1298+ 6AB1              //            next
1299+ 6AB1
1300+ 6AB1              //  ______________________________________________________________________
1301+ 6AB1              //
1302+ 6AB1              // cell-        a1 -- a2
1303+ 6AB1              // decrement by 2 top of stack
1304+ 6AB1                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1304+ 6AB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1304+ 6AB1             >
1304+ 6AB1             >                // dummy db directives used to calculate length of namec
1304+ 6AB1 43 45 4C 4C >                db      "CELL-"
1304+ 6AB5 2D          >
1304+ 6AB6             >len_NFA         defl    $ - temp_NFA
1304+ 6AB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1304+ 6AB1             >
1304+ 6AB1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1304+ 6AB2 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1304+ 6AB6 2D          >
1304+ 6AB7             >                org     $-1                 // alter last byte of Name just above to set
1304+ 6AB6 AD          >                db      {b $} | END_BIT     // msb as name end
1304+ 6AB7             >
1304+ 6AB7 A7 6A       >                dw      last_NFA            // Link to previous definition Name
1304+ 6AB9             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1304+ 6AB9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1304+ 6AB9             >                else
1304+ 6AB9 BB 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1304+ 6ABB             >                endif           ; ok        // for other definitions it "points" the correct handler
1304+ 6ABB             >                // Use of "; ok" to suppress "warning[fwdref]"
1304+ 6ABB             >
1304+ 6ABB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1305+ 6ABB              CellMinus:
1306+ 6ABB E1                           pop     hl
1307+ 6ABC 2B                           dec     hl
1308+ 6ABD 2B                           dec     hl
1309+ 6ABE
1310+ 6ABE                              psh1
1310+ 6ABE E5          >                push    hl
1310+ 6ABF DD E9       >                jp      (ix)
1311+ 6AC1
1312+ 6AC1              //  ______________________________________________________________________
1313+ 6AC1              //
1314+ 6AC1              // 2-           a1 -- a2
1315+ 6AC1              // decrement by 2 top of stack
1316+ 6AC1                              New_Def TWO_MINUS, "2-", CellMinus, is_normal
1316+ 6AC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1316+ 6AC1             >
1316+ 6AC1             >                // dummy db directives used to calculate length of namec
1316+ 6AC1 32 2D       >                db      "2-"
1316+ 6AC3             >len_NFA         defl    $ - temp_NFA
1316+ 6AC3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1316+ 6AC1             >
1316+ 6AC1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1316+ 6AC2 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1316+ 6AC4             >                org     $-1                 // alter last byte of Name just above to set
1316+ 6AC3 AD          >                db      {b $} | END_BIT     // msb as name end
1316+ 6AC4             >
1316+ 6AC4 B1 6A       >                dw      last_NFA            // Link to previous definition Name
1316+ 6AC6             >TWO_MINUS:          if CellMinus != 0 ; ok        // This is the start address of the direct jp(hl)
1316+ 6AC6 BB 6A       >                dw      CellMinus ; ok        // for primitive definitions  actual code
1316+ 6AC8             >                else
1316+ 6AC8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1316+ 6AC8             >                endif           ; ok        // for other definitions it "points" the correct handler
1316+ 6AC8             >                // Use of "; ok" to suppress "warning[fwdref]"
1316+ 6AC8             >
1316+ 6AC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1317+ 6AC8
1318+ 6AC8              //  ______________________________________________________________________
1319+ 6AC8              //
1320+ 6AC8              // negate        n1 -- n2
1321+ 6AC8              // change the sign of number
1322+ 6AC8                              New_Def MINUS, "NEGATE", is_code, is_normal
1322+ 6AC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1322+ 6AC8             >
1322+ 6AC8             >                // dummy db directives used to calculate length of namec
1322+ 6AC8 4E 45 47 41 >                db      "NEGATE"
1322+ 6ACC 54 45       >
1322+ 6ACE             >len_NFA         defl    $ - temp_NFA
1322+ 6ACE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1322+ 6AC8             >
1322+ 6AC8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1322+ 6AC9 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1322+ 6ACD 54 45       >
1322+ 6ACF             >                org     $-1                 // alter last byte of Name just above to set
1322+ 6ACE C5          >                db      {b $} | END_BIT     // msb as name end
1322+ 6ACF             >
1322+ 6ACF C1 6A       >                dw      last_NFA            // Link to previous definition Name
1322+ 6AD1             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1322+ 6AD1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1322+ 6AD1             >                else
1322+ 6AD1 D3 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1322+ 6AD3             >                endif           ; ok        // for other definitions it "points" the correct handler
1322+ 6AD3             >                // Use of "; ok" to suppress "warning[fwdref]"
1322+ 6AD3             >
1322+ 6AD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1323+ 6AD3 21 00 00                     ld      hl, 0               // subtract from 0
1324+ 6AD6 D1                           pop     de
1325+ 6AD7 B7                           or      a
1326+ 6AD8 ED 52                        sbc     hl, de
1327+ 6ADA
1328+ 6ADA                              psh1
1328+ 6ADA E5          >                push    hl
1328+ 6ADB DD E9       >                jp      (ix)
1329+ 6ADD
1330+ 6ADD              //  ______________________________________________________________________
1331+ 6ADD              //
1332+ 6ADD              // dminus       d1 -- d2
1333+ 6ADD              // change the sign of a double number
1334+ 6ADD                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1334+ 6ADD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1334+ 6ADD             >
1334+ 6ADD             >                // dummy db directives used to calculate length of namec
1334+ 6ADD 44 4E 45 47 >                db      "DNEGATE"
1334+ 6AE1 41 54 45    >
1334+ 6AE4             >len_NFA         defl    $ - temp_NFA
1334+ 6AE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1334+ 6ADD             >
1334+ 6ADD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1334+ 6ADE 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1334+ 6AE2 41 54 45    >
1334+ 6AE5             >                org     $-1                 // alter last byte of Name just above to set
1334+ 6AE4 C5          >                db      {b $} | END_BIT     // msb as name end
1334+ 6AE5             >
1334+ 6AE5 C8 6A       >                dw      last_NFA            // Link to previous definition Name
1334+ 6AE7             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1334+ 6AE7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1334+ 6AE7             >                else
1334+ 6AE7 E9 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1334+ 6AE9             >                endif           ; ok        // for other definitions it "points" the correct handler
1334+ 6AE9             >                // Use of "; ok" to suppress "warning[fwdref]"
1334+ 6AE9             >
1334+ 6AE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1335+ 6AE9 E1                           pop     hl                  // d1.H
1336+ 6AEA D1                           pop     de                  // d1.L
1337+ 6AEB C5                           push    bc                  // Save Instruction Pointer
1338+ 6AEC 44                           ld      b, h
1339+ 6AED 4D                           ld      c, l                // bc := d1.L
1340+ 6AEE AF                           xor     a
1341+ 6AEF 67                           ld      h, a
1342+ 6AF0 6F                           ld      l, a
1343+ 6AF1 ED 52                        sbc     hl, de              // subtact from zero
1344+ 6AF3 D1                           pop     de                  // Retrieve Instruction Pointer
1345+ 6AF4 E5                           push    hl                  // > d2-L
1346+ 6AF5 67                           ld      h, a
1347+ 6AF6 6F                           ld      l, a
1348+ 6AF7 ED 42                        sbc     hl, bc              // subtract from zero with carry
1349+ 6AF9                                                          // > d2-H
1350+ 6AF9 42                           ld      b, d
1351+ 6AFA 4B                           ld      c, e
1352+ 6AFB                              psh1
1352+ 6AFB E5          >                push    hl
1352+ 6AFC DD E9       >                jp      (ix)
1353+ 6AFE
1354+ 6AFE              //  ______________________________________________________________________
1355+ 6AFE              //
1356+ 6AFE              // over         n1 n2 -- n1 n2 n1
1357+ 6AFE              // copy the second value of stack and put it on top.
1358+ 6AFE                              New_Def OVER, "OVER", is_code, is_normal
1358+ 6AFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1358+ 6AFE             >
1358+ 6AFE             >                // dummy db directives used to calculate length of namec
1358+ 6AFE 4F 56 45 52 >                db      "OVER"
1358+ 6B02             >len_NFA         defl    $ - temp_NFA
1358+ 6B02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1358+ 6AFE             >
1358+ 6AFE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1358+ 6AFF 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1358+ 6B03             >                org     $-1                 // alter last byte of Name just above to set
1358+ 6B02 D2          >                db      {b $} | END_BIT     // msb as name end
1358+ 6B03             >
1358+ 6B03 DD 6A       >                dw      last_NFA            // Link to previous definition Name
1358+ 6B05             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1358+ 6B05 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1358+ 6B05             >                else
1358+ 6B05 07 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1358+ 6B07             >                endif           ; ok        // for other definitions it "points" the correct handler
1358+ 6B07             >                // Use of "; ok" to suppress "warning[fwdref]"
1358+ 6B07             >
1358+ 6B07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1359+ 6B07 D1                           pop     de                  //   n2
1360+ 6B08 E1                           pop     hl                  // < n1
1361+ 6B09 E5                           push    hl                  // > n1
1362+ 6B0A D5                           push    de                  // > n2
1363+ 6B0B E5                           push    hl                  // > n1
1364+ 6B0C                              next
1364+ 6B0C DD E9       >                jp      (ix)
1365+ 6B0E
1366+ 6B0E              //  ______________________________________________________________________
1367+ 6B0E              //
1368+ 6B0E              // drop         n1 --
1369+ 6B0E              // drops the top of stack
1370+ 6B0E                              New_Def DROP, "DROP", is_code, is_normal
1370+ 6B0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1370+ 6B0E             >
1370+ 6B0E             >                // dummy db directives used to calculate length of namec
1370+ 6B0E 44 52 4F 50 >                db      "DROP"
1370+ 6B12             >len_NFA         defl    $ - temp_NFA
1370+ 6B12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1370+ 6B0E             >
1370+ 6B0E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1370+ 6B0F 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1370+ 6B13             >                org     $-1                 // alter last byte of Name just above to set
1370+ 6B12 D0          >                db      {b $} | END_BIT     // msb as name end
1370+ 6B13             >
1370+ 6B13 FE 6A       >                dw      last_NFA            // Link to previous definition Name
1370+ 6B15             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1370+ 6B15 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1370+ 6B15             >                else
1370+ 6B15 17 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1370+ 6B17             >                endif           ; ok        // for other definitions it "points" the correct handler
1370+ 6B17             >                // Use of "; ok" to suppress "warning[fwdref]"
1370+ 6B17             >
1370+ 6B17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1371+ 6B17 E1                           pop     hl                  // < n1 and discard previous TOS
1372+ 6B18                              next
1372+ 6B18 DD E9       >                jp      (ix)
1373+ 6B1A
1374+ 6B1A              //  ______________________________________________________________________
1375+ 6B1A              //
1376+ 6B1A              // nip          n1 n2 -- n2
1377+ 6B1A              // drops the second elemento on the stack
1378+ 6B1A                              New_Def NIP, "NIP", is_code, is_normal
1378+ 6B1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1378+ 6B1A             >
1378+ 6B1A             >                // dummy db directives used to calculate length of namec
1378+ 6B1A 4E 49 50    >                db      "NIP"
1378+ 6B1D             >len_NFA         defl    $ - temp_NFA
1378+ 6B1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1378+ 6B1A             >
1378+ 6B1A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1378+ 6B1B 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1378+ 6B1E             >                org     $-1                 // alter last byte of Name just above to set
1378+ 6B1D D0          >                db      {b $} | END_BIT     // msb as name end
1378+ 6B1E             >
1378+ 6B1E 0E 6B       >                dw      last_NFA            // Link to previous definition Name
1378+ 6B20             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1378+ 6B20 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1378+ 6B20             >                else
1378+ 6B20 22 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1378+ 6B22             >                endif           ; ok        // for other definitions it "points" the correct handler
1378+ 6B22             >                // Use of "; ok" to suppress "warning[fwdref]"
1378+ 6B22             >
1378+ 6B22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1379+ 6B22
1380+ 6B22 E1                           pop     hl                  // < n1 discarded
1381+ 6B23 E3                           ex      (sp), hl
1382+ 6B24                              next
1382+ 6B24 DD E9       >                jp      (ix)
1383+ 6B26
1384+ 6B26              //  ______________________________________________________________________
1385+ 6B26              //
1386+ 6B26              // tuck         n1 n2 -- n2 n1 n2
1387+ 6B26              // copy the top element after the second.
1388+ 6B26                              New_Def TUCK, "TUCK", is_code, is_normal
1388+ 6B26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1388+ 6B26             >
1388+ 6B26             >                // dummy db directives used to calculate length of namec
1388+ 6B26 54 55 43 4B >                db      "TUCK"
1388+ 6B2A             >len_NFA         defl    $ - temp_NFA
1388+ 6B2A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1388+ 6B26             >
1388+ 6B26 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1388+ 6B27 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1388+ 6B2B             >                org     $-1                 // alter last byte of Name just above to set
1388+ 6B2A CB          >                db      {b $} | END_BIT     // msb as name end
1388+ 6B2B             >
1388+ 6B2B 1A 6B       >                dw      last_NFA            // Link to previous definition Name
1388+ 6B2D             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1388+ 6B2D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1388+ 6B2D             >                else
1388+ 6B2D 2F 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1388+ 6B2F             >                endif           ; ok        // for other definitions it "points" the correct handler
1388+ 6B2F             >                // Use of "; ok" to suppress "warning[fwdref]"
1388+ 6B2F             >
1388+ 6B2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1389+ 6B2F E1                           pop     hl
1390+ 6B30 D1                           pop     de                  // < n1
1391+ 6B31 E5                           push    hl                  // > n2  and TOS
1392+ 6B32 D5                           push    de                  // > n1
1393+ 6B33 E5                           push    hl
1394+ 6B34                              next
1394+ 6B34 DD E9       >                jp      (ix)
1395+ 6B36
1396+ 6B36              //  ______________________________________________________________________
1397+ 6B36              //
1398+ 6B36              // swap         n1 n2 -- n2 n1
1399+ 6B36              // swaps the two values on top of stack
1400+ 6B36                              New_Def SWAP, "SWAP", is_code, is_normal
1400+ 6B36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1400+ 6B36             >
1400+ 6B36             >                // dummy db directives used to calculate length of namec
1400+ 6B36 53 57 41 50 >                db      "SWAP"
1400+ 6B3A             >len_NFA         defl    $ - temp_NFA
1400+ 6B3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1400+ 6B36             >
1400+ 6B36 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1400+ 6B37 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1400+ 6B3B             >                org     $-1                 // alter last byte of Name just above to set
1400+ 6B3A D0          >                db      {b $} | END_BIT     // msb as name end
1400+ 6B3B             >
1400+ 6B3B 26 6B       >                dw      last_NFA            // Link to previous definition Name
1400+ 6B3D             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1400+ 6B3D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1400+ 6B3D             >                else
1400+ 6B3D 3F 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1400+ 6B3F             >                endif           ; ok        // for other definitions it "points" the correct handler
1400+ 6B3F             >                // Use of "; ok" to suppress "warning[fwdref]"
1400+ 6B3F             >
1400+ 6B3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1401+ 6B3F E1                           pop     hl                  // < n1
1402+ 6B40 E3                           ex      (sp),hl             // > n2
1403+ 6B41 E5                           push    hl                  // copy n1 to TOS
1404+ 6B42                              next
1404+ 6B42 DD E9       >                jp      (ix)
1405+ 6B44
1406+ 6B44              //  ______________________________________________________________________
1407+ 6B44              //
1408+ 6B44              // dup         n -- n n
1409+ 6B44              // duplicates the top value of stack
1410+ 6B44                              New_Def DUP, "DUP", is_code, is_normal
1410+ 6B44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1410+ 6B44             >
1410+ 6B44             >                // dummy db directives used to calculate length of namec
1410+ 6B44 44 55 50    >                db      "DUP"
1410+ 6B47             >len_NFA         defl    $ - temp_NFA
1410+ 6B47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1410+ 6B44             >
1410+ 6B44 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1410+ 6B45 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1410+ 6B48             >                org     $-1                 // alter last byte of Name just above to set
1410+ 6B47 D0          >                db      {b $} | END_BIT     // msb as name end
1410+ 6B48             >
1410+ 6B48 36 6B       >                dw      last_NFA            // Link to previous definition Name
1410+ 6B4A             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1410+ 6B4A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1410+ 6B4A             >                else
1410+ 6B4A 4C 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1410+ 6B4C             >                endif           ; ok        // for other definitions it "points" the correct handler
1410+ 6B4C             >                // Use of "; ok" to suppress "warning[fwdref]"
1410+ 6B4C             >
1410+ 6B4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1411+ 6B4C E1                           pop     hl
1412+ 6B4D E5                           push    hl                  // > n duplicate TOS
1413+ 6B4E E5                           push    hl
1414+ 6B4F                              next
1414+ 6B4F DD E9       >                jp      (ix)
1415+ 6B51
1416+ 6B51              //  ______________________________________________________________________
1417+ 6B51              //
1418+ 6B51              // rot         n1 n2 n3 -- n2 n3 n1
1419+ 6B51              // Rotates the 3 top values of stack by picking the 3rd in access-order
1420+ 6B51              // and putting it on top. The other two are shifted down one place.
1421+ 6B51                              New_Def ROT, "ROT", is_code, is_normal
1421+ 6B51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1421+ 6B51             >
1421+ 6B51             >                // dummy db directives used to calculate length of namec
1421+ 6B51 52 4F 54    >                db      "ROT"
1421+ 6B54             >len_NFA         defl    $ - temp_NFA
1421+ 6B54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1421+ 6B51             >
1421+ 6B51 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1421+ 6B52 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1421+ 6B55             >                org     $-1                 // alter last byte of Name just above to set
1421+ 6B54 D4          >                db      {b $} | END_BIT     // msb as name end
1421+ 6B55             >
1421+ 6B55 44 6B       >                dw      last_NFA            // Link to previous definition Name
1421+ 6B57             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1421+ 6B57 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1421+ 6B57             >                else
1421+ 6B57 59 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1421+ 6B59             >                endif           ; ok        // for other definitions it "points" the correct handler
1421+ 6B59             >                // Use of "; ok" to suppress "warning[fwdref]"
1421+ 6B59             >
1421+ 6B59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1422+ 6B59 D1                           pop     de                  // < n3
1423+ 6B5A E1                           pop     hl                  // < n2
1424+ 6B5B E3                           ex      (sp),hl             // > n2 < n1
1425+ 6B5C D5                           push    de                  // > n3
1426+ 6B5D E5                           push    hl                  // copy n1 to TOS
1427+ 6B5E                              next
1427+ 6B5E DD E9       >                jp      (ix)
1428+ 6B60
1429+ 6B60              //  ______________________________________________________________________
1430+ 6B60              //
1431+ 6B60              // -rot         n1 n2 n3 -- n3 n1 n2
1432+ 6B60              // Rotates the 3 top values of stack by picking the 1st in access-order
1433+ 6B60              // and putting back to 3rd place. The other two are shifted down one place.
1434+ 6B60                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1434+ 6B60             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1434+ 6B60             >
1434+ 6B60             >                // dummy db directives used to calculate length of namec
1434+ 6B60 2D 52 4F 54 >                db      "-ROT"
1434+ 6B64             >len_NFA         defl    $ - temp_NFA
1434+ 6B64             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1434+ 6B60             >
1434+ 6B60 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1434+ 6B61 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1434+ 6B65             >                org     $-1                 // alter last byte of Name just above to set
1434+ 6B64 D4          >                db      {b $} | END_BIT     // msb as name end
1434+ 6B65             >
1434+ 6B65 51 6B       >                dw      last_NFA            // Link to previous definition Name
1434+ 6B67             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1434+ 6B67 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1434+ 6B67             >                else
1434+ 6B67 69 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1434+ 6B69             >                endif           ; ok        // for other definitions it "points" the correct handler
1434+ 6B69             >                // Use of "; ok" to suppress "warning[fwdref]"
1434+ 6B69             >
1434+ 6B69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1435+ 6B69 E1                           pop     hl                  // < n3
1436+ 6B6A D1                           pop     de                  // < n2
1437+ 6B6B E3                           ex      (sp),hl             // > n3 < n1
1438+ 6B6C E5                           push    hl                  // > n1
1439+ 6B6D D5                           push    de                  // copy n3 to TOS
1440+ 6B6E                              next
1440+ 6B6E DD E9       >                jp      (ix)
1441+ 6B70
1442+ 6B70              //  ______________________________________________________________________
1443+ 6B70              //
1444+ 6B70              // pick        n1 -- nx
1445+ 6B70              // picks the nth element from TOS
1446+ 6B70                              New_Def PICK, "PICK", is_code, is_normal
1446+ 6B70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1446+ 6B70             >
1446+ 6B70             >                // dummy db directives used to calculate length of namec
1446+ 6B70 50 49 43 4B >                db      "PICK"
1446+ 6B74             >len_NFA         defl    $ - temp_NFA
1446+ 6B74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1446+ 6B70             >
1446+ 6B70 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1446+ 6B71 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1446+ 6B75             >                org     $-1                 // alter last byte of Name just above to set
1446+ 6B74 CB          >                db      {b $} | END_BIT     // msb as name end
1446+ 6B75             >
1446+ 6B75 60 6B       >                dw      last_NFA            // Link to previous definition Name
1446+ 6B77             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1446+ 6B77 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1446+ 6B77             >                else
1446+ 6B77 79 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1446+ 6B79             >                endif           ; ok        // for other definitions it "points" the correct handler
1446+ 6B79             >                // Use of "; ok" to suppress "warning[fwdref]"
1446+ 6B79             >
1446+ 6B79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1447+ 6B79 E1                           pop     hl                  // take TOS as index
1448+ 6B7A 29                           add     hl, hl              // as cells
1449+ 6B7B 39                           add     hl, sp              // from Stack Pointer
1450+ 6B7C 7E                           ld      a, (hl)             // replace TOS
1451+ 6B7D 23                           inc     hl
1452+ 6B7E 66                           ld      h, (hl)
1453+ 6B7F 6F                           ld      l, a
1454+ 6B80
1455+ 6B80                              psh1
1455+ 6B80 E5          >                push    hl
1455+ 6B81 DD E9       >                jp      (ix)
1456+ 6B83
1457+ 6B83
1458+ 6B83              //  ______________________________________________________________________
1459+ 6B83              //
1460+ 6B83              // 2over        d1 d2 -- d1 d2 d1
1461+ 6B83              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1462+ 6B83              // copy the second double of stack and put on top.
1463+ 6B83              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1464+ 6B83              //
1465+ 6B83              //              ld      hl, 7
1466+ 6B83              //              add     hl, sp
1467+ 6B83              //              ld      d, (hl)
1468+ 6B83              //              dec     hl
1469+ 6B83              //              ld      e, (hl)             // d1-L
1470+ 6B83              //              push    de
1471+ 6B83              //              dec     hl
1472+ 6B83              //              ld      d, (hl)
1473+ 6B83              //              dec     hl
1474+ 6B83              //              ld      e, (hl)             // d1-H
1475+ 6B83              //              push    de
1476+ 6B83              //              next
1477+ 6B83
1478+ 6B83              //  ______________________________________________________________________
1479+ 6B83              //
1480+ 6B83              // 2drop        d --
1481+ 6B83              //              n1 n2 --
1482+ 6B83              // drops the top double from stack
1483+ 6B83                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1483+ 6B83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1483+ 6B83             >
1483+ 6B83             >                // dummy db directives used to calculate length of namec
1483+ 6B83 32 44 52 4F >                db      "2DROP"
1483+ 6B87 50          >
1483+ 6B88             >len_NFA         defl    $ - temp_NFA
1483+ 6B88             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1483+ 6B83             >
1483+ 6B83 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1483+ 6B84 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1483+ 6B88 50          >
1483+ 6B89             >                org     $-1                 // alter last byte of Name just above to set
1483+ 6B88 D0          >                db      {b $} | END_BIT     // msb as name end
1483+ 6B89             >
1483+ 6B89 70 6B       >                dw      last_NFA            // Link to previous definition Name
1483+ 6B8B             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1483+ 6B8B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1483+ 6B8B             >                else
1483+ 6B8B 8D 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1483+ 6B8D             >                endif           ; ok        // for other definitions it "points" the correct handler
1483+ 6B8D             >                // Use of "; ok" to suppress "warning[fwdref]"
1483+ 6B8D             >
1483+ 6B8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1484+ 6B8D E1                           pop     hl
1485+ 6B8E E1                           pop     hl
1486+ 6B8F                              next
1486+ 6B8F DD E9       >                jp      (ix)
1487+ 6B91
1488+ 6B91              //  ______________________________________________________________________
1489+ 6B91              //
1490+ 6B91              // 2nip         d1 d2 -- d2
1491+ 6B91              //              n1 n2 n3 n4 -- n3 n4
1492+ 6B91              // drops the second double on the stack
1493+ 6B91              //              New_Def TWO_NIP, 4, "2nip"
1494+ 6B91              //              ...
1495+ 6B91
1496+ 6B91              //  ______________________________________________________________________
1497+ 6B91              //
1498+ 6B91              // 2tuck         d1 d2 -- d2 d1 d2
1499+ 6B91              // copy the top element after the second.
1500+ 6B91              //              New_Def TWO_TUCK, 5, "2tuck"
1501+ 6B91              //              ...
1502+ 6B91
1503+ 6B91              //  ______________________________________________________________________
1504+ 6B91              //
1505+ 6B91              // 2swap         d1 d2 -- d2 d1
1506+ 6B91              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1507+ 6B91              // swaps the two doubles on top of stack
1508+ 6B91                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1508+ 6B91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1508+ 6B91             >
1508+ 6B91             >                // dummy db directives used to calculate length of namec
1508+ 6B91 32 53 57 41 >                db      "2SWAP"
1508+ 6B95 50          >
1508+ 6B96             >len_NFA         defl    $ - temp_NFA
1508+ 6B96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1508+ 6B91             >
1508+ 6B91 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1508+ 6B92 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1508+ 6B96 50          >
1508+ 6B97             >                org     $-1                 // alter last byte of Name just above to set
1508+ 6B96 D0          >                db      {b $} | END_BIT     // msb as name end
1508+ 6B97             >
1508+ 6B97 83 6B       >                dw      last_NFA            // Link to previous definition Name
1508+ 6B99             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1508+ 6B99 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1508+ 6B99             >                else
1508+ 6B99 9B 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1508+ 6B9B             >                endif           ; ok        // for other definitions it "points" the correct handler
1508+ 6B9B             >                // Use of "; ok" to suppress "warning[fwdref]"
1508+ 6B9B             >
1508+ 6B9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1509+ 6B9B F1                           pop     af                  //   d2-H
1510+ 6B9C E1                           pop     hl                  // < d2-L
1511+ 6B9D D1                           pop     de                  // < d1-H
1512+ 6B9E E3                           ex      (sp), hl            // < d1-L > d2-L
1513+ 6B9F F5                           push    af                  // > d2-H
1514+ 6BA0 E5                           push    hl                  // > d1-L
1515+ 6BA1 D5                           push    de
1516+ 6BA2
1517+ 6BA2                              next
1517+ 6BA2 DD E9       >                jp      (ix)
1518+ 6BA4
1519+ 6BA4              //  ______________________________________________________________________
1520+ 6BA4              //
1521+ 6BA4              // 2dup         d -- d d
1522+ 6BA4              //              n1 n2 -- n1 n2 n1 n2
1523+ 6BA4              // duplicates the top double of stack
1524+ 6BA4                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1524+ 6BA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1524+ 6BA4             >
1524+ 6BA4             >                // dummy db directives used to calculate length of namec
1524+ 6BA4 32 44 55 50 >                db      "2DUP"
1524+ 6BA8             >len_NFA         defl    $ - temp_NFA
1524+ 6BA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1524+ 6BA4             >
1524+ 6BA4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1524+ 6BA5 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1524+ 6BA9             >                org     $-1                 // alter last byte of Name just above to set
1524+ 6BA8 D0          >                db      {b $} | END_BIT     // msb as name end
1524+ 6BA9             >
1524+ 6BA9 91 6B       >                dw      last_NFA            // Link to previous definition Name
1524+ 6BAB             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1524+ 6BAB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1524+ 6BAB             >                else
1524+ 6BAB AD 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1524+ 6BAD             >                endif           ; ok        // for other definitions it "points" the correct handler
1524+ 6BAD             >                // Use of "; ok" to suppress "warning[fwdref]"
1524+ 6BAD             >
1524+ 6BAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1525+ 6BAD E1                           pop     hl                  // < d-H
1526+ 6BAE D1                           pop     de                  // < d-L
1527+ 6BAF D5                           push    de                  // < d-L
1528+ 6BB0 E5                           push    hl                  // > d-H
1529+ 6BB1 D5                           push    de                  // > d-L
1530+ 6BB2 E5                           push    hl                  // > d-H
1531+ 6BB3                              next
1531+ 6BB3 DD E9       >                jp      (ix)
1532+ 6BB5
1533+ 6BB5              //  ______________________________________________________________________
1534+ 6BB5              //
1535+ 6BB5              // 2rot         d1 d2 d3 -- d2 d3 d1
1536+ 6BB5              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1537+ 6BB5              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1538+ 6BB5              // and putting it on top. The other two are shifted down one place.
1539+ 6BB5              //              New_Def TWO?ROT, 4, "2rot"
1540+ 6BB5              //              ...
1541+ 6BB5              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1542+ 6BB5              //
1543+ 6BB5              //      d3  |d2  |d1  |
1544+ 6BB5              //      h l |h l |h l |
1545+ 6BB5              // SP   LHED|LHED|LHED|
1546+ 6BB5              // SP  +0123|4567|89ab|
1547+ 6BB5              //              ld      hl, $000B
1548+ 6BB5              //              add     hl, sp
1549+ 6BB5              //              ld      d, (hl)
1550+ 6BB5              //              dec     hl
1551+ 6BB5              //              ld      e, (hl)
1552+ 6BB5              //              dec     hl
1553+ 6BB5              //              push    de
1554+ 6BB5              //              ld      d, (hl)
1555+ 6BB5              //              dec     hl
1556+ 6BB5              //              ld      e, (hl)
1557+ 6BB5              //              dec     hl
1558+ 6BB5              //              push    de
1559+ 6BB5
1560+ 6BB5              //      d1  |d3  |d2  |d1  |
1561+ 6BB5              //      h l |h l |h l |h l |
1562+ 6BB5              // SP   LHED|LHED|LHED|LHED|
1563+ 6BB5              // SP       +0123|4567|89ab|
1564+ 6BB5
1565+ 6BB5              //              ld      d, h
1566+ 6BB5              //              ld      e, l
1567+ 6BB5              //              inc     de
1568+ 6BB5              //              inc     de
1569+ 6BB5              //              inc     de
1570+ 6BB5              //              inc     de
1571+ 6BB5              //              push    bc
1572+ 6BB5              //              ld      bc, $000C
1573+ 6BB5              //              lddr
1574+ 6BB5              //              pop     bc
1575+ 6BB5              //              pop     de
1576+ 6BB5              //              pop     de
1577+ 6BB5              //
1578+ 6BB5              //              next
1579+ 6BB5
1580+ 6BB5
1581+ 6BB5              //  ______________________________________________________________________
1582+ 6BB5              //
1583+ 6BB5              // +!           n a --
1584+ 6BB5              // Sums to the content of address a the number n.
1585+ 6BB5              // It is the same of  a @ n + a !
1586+ 6BB5                              New_Def PLUSSTORE, "+!", is_code, is_normal
1586+ 6BB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1586+ 6BB5             >
1586+ 6BB5             >                // dummy db directives used to calculate length of namec
1586+ 6BB5 2B 21       >                db      "+!"
1586+ 6BB7             >len_NFA         defl    $ - temp_NFA
1586+ 6BB7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1586+ 6BB5             >
1586+ 6BB5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1586+ 6BB6 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1586+ 6BB8             >                org     $-1                 // alter last byte of Name just above to set
1586+ 6BB7 A1          >                db      {b $} | END_BIT     // msb as name end
1586+ 6BB8             >
1586+ 6BB8 A4 6B       >                dw      last_NFA            // Link to previous definition Name
1586+ 6BBA             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1586+ 6BBA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1586+ 6BBA             >                else
1586+ 6BBA BC 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1586+ 6BBC             >                endif           ; ok        // for other definitions it "points" the correct handler
1586+ 6BBC             >                // Use of "; ok" to suppress "warning[fwdref]"
1586+ 6BBC             >
1586+ 6BBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1587+ 6BBC E1                           pop     hl                  // hl is the address
1588+ 6BBD D1                           pop     de                  // de is the number
1589+ 6BBE 7E                           ld      a, (hl)
1590+ 6BBF 83                           add     e
1591+ 6BC0 77                           ld      (hl), a
1592+ 6BC1 23                           inc     hl
1593+ 6BC2 7E                           ld      a, (hl)
1594+ 6BC3 8A                           adc     d
1595+ 6BC4 77                           ld      (hl), a
1596+ 6BC5
1597+ 6BC5                              next
1597+ 6BC5 DD E9       >                jp      (ix)
1598+ 6BC7
1599+ 6BC7              //  ______________________________________________________________________
1600+ 6BC7              //
1601+ 6BC7              // toggle       a n --
1602+ 6BC7              // Complements (xor) the byte at addrress  a  with the model n.
1603+ 6BC7                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1603+ 6BC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1603+ 6BC7             >
1603+ 6BC7             >                // dummy db directives used to calculate length of namec
1603+ 6BC7 54 4F 47 47 >                db      "TOGGLE"
1603+ 6BCB 4C 45       >
1603+ 6BCD             >len_NFA         defl    $ - temp_NFA
1603+ 6BCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1603+ 6BC7             >
1603+ 6BC7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1603+ 6BC8 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1603+ 6BCC 4C 45       >
1603+ 6BCE             >                org     $-1                 // alter last byte of Name just above to set
1603+ 6BCD C5          >                db      {b $} | END_BIT     // msb as name end
1603+ 6BCE             >
1603+ 6BCE B5 6B       >                dw      last_NFA            // Link to previous definition Name
1603+ 6BD0             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1603+ 6BD0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1603+ 6BD0             >                else
1603+ 6BD0 D2 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1603+ 6BD2             >                endif           ; ok        // for other definitions it "points" the correct handler
1603+ 6BD2             >                // Use of "; ok" to suppress "warning[fwdref]"
1603+ 6BD2             >
1603+ 6BD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1604+ 6BD2 D1                           pop     de
1605+ 6BD3 E1                           pop     hl
1606+ 6BD4 7E                           ld      a, (hl)
1607+ 6BD5 AB                           xor     e
1608+ 6BD6 77                           ld      (hl), a
1609+ 6BD7
1610+ 6BD7                              next
1610+ 6BD7 DD E9       >                jp      (ix)
1611+ 6BD9
1612+ 6BD9              //  ______________________________________________________________________
1613+ 6BD9              //
1614+ 6BD9              // @            a -- n
1615+ 6BD9              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1616+ 6BD9                              New_Def FETCH, "@", is_code, is_normal
1616+ 6BD9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1616+ 6BD9             >
1616+ 6BD9             >                // dummy db directives used to calculate length of namec
1616+ 6BD9 40          >                db      "@"
1616+ 6BDA             >len_NFA         defl    $ - temp_NFA
1616+ 6BDA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1616+ 6BD9             >
1616+ 6BD9 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1616+ 6BDA 40          >                db      "@"               // name string in 7-bit ascii, but
1616+ 6BDB             >                org     $-1                 // alter last byte of Name just above to set
1616+ 6BDA C0          >                db      {b $} | END_BIT     // msb as name end
1616+ 6BDB             >
1616+ 6BDB C7 6B       >                dw      last_NFA            // Link to previous definition Name
1616+ 6BDD             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1616+ 6BDD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1616+ 6BDD             >                else
1616+ 6BDD DF 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1616+ 6BDF             >                endif           ; ok        // for other definitions it "points" the correct handler
1616+ 6BDF             >                // Use of "; ok" to suppress "warning[fwdref]"
1616+ 6BDF             >
1616+ 6BDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1617+ 6BDF E1                           pop     hl
1618+ 6BE0 5E                           ld      e, (hl)             // low-byte
1619+ 6BE1 23                           inc     hl
1620+ 6BE2 56                           ld      d, (hl)             // high-byte
1621+ 6BE3 D5                           push    de
1622+ 6BE4                              next
1622+ 6BE4 DD E9       >                jp      (ix)
1623+ 6BE6
1624+ 6BE6              //  ______________________________________________________________________
1625+ 6BE6              //
1626+ 6BE6              // !            n a --
1627+ 6BE6              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1628+ 6BE6                              New_Def STORE, "!", is_code, is_normal
1628+ 6BE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1628+ 6BE6             >
1628+ 6BE6             >                // dummy db directives used to calculate length of namec
1628+ 6BE6 21          >                db      "!"
1628+ 6BE7             >len_NFA         defl    $ - temp_NFA
1628+ 6BE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1628+ 6BE6             >
1628+ 6BE6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1628+ 6BE7 21          >                db      "!"               // name string in 7-bit ascii, but
1628+ 6BE8             >                org     $-1                 // alter last byte of Name just above to set
1628+ 6BE7 A1          >                db      {b $} | END_BIT     // msb as name end
1628+ 6BE8             >
1628+ 6BE8 D9 6B       >                dw      last_NFA            // Link to previous definition Name
1628+ 6BEA             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1628+ 6BEA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1628+ 6BEA             >                else
1628+ 6BEA EC 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1628+ 6BEC             >                endif           ; ok        // for other definitions it "points" the correct handler
1628+ 6BEC             >                // Use of "; ok" to suppress "warning[fwdref]"
1628+ 6BEC             >
1628+ 6BEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1629+ 6BEC E1                           pop     hl                  // address
1630+ 6BED D1                           pop     de                  // < n
1631+ 6BEE 73                           ld      (hl), e             // low-byte
1632+ 6BEF 23                           inc     hl
1633+ 6BF0 72                           ld      (hl), d             // high-byte
1634+ 6BF1
1635+ 6BF1                              next
1635+ 6BF1 DD E9       >                jp      (ix)
1636+ 6BF3
1637+ 6BF3              //  ______________________________________________________________________
1638+ 6BF3              //
1639+ 6BF3              // c@           a -- c
1640+ 6BF3              // fetch a character n from address a
1641+ 6BF3                              New_Def CFETCH, "C@", is_code, is_normal
1641+ 6BF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1641+ 6BF3             >
1641+ 6BF3             >                // dummy db directives used to calculate length of namec
1641+ 6BF3 43 40       >                db      "C@"
1641+ 6BF5             >len_NFA         defl    $ - temp_NFA
1641+ 6BF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1641+ 6BF3             >
1641+ 6BF3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1641+ 6BF4 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1641+ 6BF6             >                org     $-1                 // alter last byte of Name just above to set
1641+ 6BF5 C0          >                db      {b $} | END_BIT     // msb as name end
1641+ 6BF6             >
1641+ 6BF6 E6 6B       >                dw      last_NFA            // Link to previous definition Name
1641+ 6BF8             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1641+ 6BF8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1641+ 6BF8             >                else
1641+ 6BF8 FA 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1641+ 6BFA             >                endif           ; ok        // for other definitions it "points" the correct handler
1641+ 6BFA             >                // Use of "; ok" to suppress "warning[fwdref]"
1641+ 6BFA             >
1641+ 6BFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1642+ 6BFA E1                           pop     hl
1643+ 6BFB 6E                           ld      l, (hl)             // low-byte
1644+ 6BFC 26 00                        ld      h, 0
1645+ 6BFE
1646+ 6BFE                              psh1
1646+ 6BFE E5          >                push    hl
1646+ 6BFF DD E9       >                jp      (ix)
1647+ 6C01
1648+ 6C01              //  ______________________________________________________________________
1649+ 6C01              //
1650+ 6C01              // c!           c a --
1651+ 6C01              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1652+ 6C01                              New_Def CSTORE, "C!", is_code, is_normal
1652+ 6C01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1652+ 6C01             >
1652+ 6C01             >                // dummy db directives used to calculate length of namec
1652+ 6C01 43 21       >                db      "C!"
1652+ 6C03             >len_NFA         defl    $ - temp_NFA
1652+ 6C03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1652+ 6C01             >
1652+ 6C01 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1652+ 6C02 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1652+ 6C04             >                org     $-1                 // alter last byte of Name just above to set
1652+ 6C03 A1          >                db      {b $} | END_BIT     // msb as name end
1652+ 6C04             >
1652+ 6C04 F3 6B       >                dw      last_NFA            // Link to previous definition Name
1652+ 6C06             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1652+ 6C06 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1652+ 6C06             >                else
1652+ 6C06 08 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1652+ 6C08             >                endif           ; ok        // for other definitions it "points" the correct handler
1652+ 6C08             >                // Use of "; ok" to suppress "warning[fwdref]"
1652+ 6C08             >
1652+ 6C08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1653+ 6C08 E1                           pop     hl                  // < address
1654+ 6C09 D1                           pop     de
1655+ 6C0A 73                           ld      (hl), e             // low-byte
1656+ 6C0B
1657+ 6C0B                              next
1657+ 6C0B DD E9       >                jp      (ix)
1658+ 6C0D
1659+ 6C0D              //  ______________________________________________________________________
1660+ 6C0D              //
1661+ 6C0D              // 2@           a -- d
1662+ 6C0D              // fetch a 32 bits number d from address a and leaves it on top of the
1663+ 6C0D              // stack as two single numbers, high part as top of the stack.
1664+ 6C0D              // A double number is normally kept in CPU registers as HLDE.
1665+ 6C0D              // On stack a double number is treated as two single numbers
1666+ 6C0D              // where BC is on the top of the stack and HL is the second from top,
1667+ 6C0D              // so the sign of the number can be checked on top of stack
1668+ 6C0D              // and in the stack memory it appears as LHED.
1669+ 6C0D              // Instead, a 32 bits number d is kept in memory as EDLH
1670+ 6C0D              // with the lowest significant word in the lower location
1671+ 6C0D              // and the highest significant word in the higher location.
1672+ 6C0D              // fetch 32 bit number n from address a.
1673+ 6C0D                              New_Def TWO_FETCH, "2@", is_code, is_normal
1673+ 6C0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1673+ 6C0D             >
1673+ 6C0D             >                // dummy db directives used to calculate length of namec
1673+ 6C0D 32 40       >                db      "2@"
1673+ 6C0F             >len_NFA         defl    $ - temp_NFA
1673+ 6C0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1673+ 6C0D             >
1673+ 6C0D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1673+ 6C0E 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1673+ 6C10             >                org     $-1                 // alter last byte of Name just above to set
1673+ 6C0F C0          >                db      {b $} | END_BIT     // msb as name end
1673+ 6C10             >
1673+ 6C10 01 6C       >                dw      last_NFA            // Link to previous definition Name
1673+ 6C12             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1673+ 6C12 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1673+ 6C12             >                else
1673+ 6C12 14 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1673+ 6C14             >                endif           ; ok        // for other definitions it "points" the correct handler
1673+ 6C14             >                // Use of "; ok" to suppress "warning[fwdref]"
1673+ 6C14             >
1673+ 6C14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1674+ 6C14 E1                           pop     hl                  // address
1675+ 6C15 5E                           ld      e, (hl)             // low-byte
1676+ 6C16 23                           inc     hl
1677+ 6C17 56                           ld      d, (hl)             // high-byte
1678+ 6C18
1679+ 6C18 23                           inc     hl
1680+ 6C19 7E                           ld      a, (hl)             // low-byte
1681+ 6C1A 23                           inc     hl
1682+ 6C1B 66                           ld      h, (hl)             // high-byte
1683+ 6C1C 6F                           ld      l, a
1684+ 6C1D                              psh2
1684+ 6C1D D5          >                push    de
1684+ 6C1E E5          >                push    hl
1684+ 6C1F DD E9       >                jp      (ix)
1685+ 6C21
1686+ 6C21              //  ______________________________________________________________________
1687+ 6C21              //
1688+ 6C21              // 2!           d a --
1689+ 6C21              // stores a 32 bits number d from address a and leaves it on top of the
1690+ 6C21              // stack as two single numbers, high part as top of the stack.
1691+ 6C21              // A double number is normally kept in CPU registers as HLDE.
1692+ 6C21              // On stack a double number is treated as two single numbers
1693+ 6C21              // where BC is on the top of the stack and HL is the second from top,
1694+ 6C21              // so the sign of the number can be checked on top of stack
1695+ 6C21              // and in the stack memory it appears as LHED.
1696+ 6C21              // Instead, a 32 bits number d is kept in memory as EDLH
1697+ 6C21              // with the lowest significant word in the lower location
1698+ 6C21              // and the highest significant word in the higher location.
1699+ 6C21              // fetch 32 bit number n from address a.
1700+ 6C21                              New_Def TWO_STORE, "2!", is_code, is_normal
1700+ 6C21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1700+ 6C21             >
1700+ 6C21             >                // dummy db directives used to calculate length of namec
1700+ 6C21 32 21       >                db      "2!"
1700+ 6C23             >len_NFA         defl    $ - temp_NFA
1700+ 6C23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1700+ 6C21             >
1700+ 6C21 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1700+ 6C22 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1700+ 6C24             >                org     $-1                 // alter last byte of Name just above to set
1700+ 6C23 A1          >                db      {b $} | END_BIT     // msb as name end
1700+ 6C24             >
1700+ 6C24 0D 6C       >                dw      last_NFA            // Link to previous definition Name
1700+ 6C26             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1700+ 6C26 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1700+ 6C26             >                else
1700+ 6C26 28 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1700+ 6C28             >                endif           ; ok        // for other definitions it "points" the correct handler
1700+ 6C28             >                // Use of "; ok" to suppress "warning[fwdref]"
1700+ 6C28             >
1700+ 6C28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1701+ 6C28 60                           ld      h, b
1702+ 6C29 69                           ld      l, c
1703+ 6C2A D1                           pop     de                  // de has address
1704+ 6C2B C1                           pop     bc                  // < high-part
1705+ 6C2C E3                           ex      (sp), hl            // < low-part > Instruction Pointer
1706+ 6C2D EB                           ex      de, hl
1707+ 6C2E 73                           ld      (hl), e
1708+ 6C2F 23                           inc     hl
1709+ 6C30 72                           ld      (hl), d
1710+ 6C31 23                           inc     hl
1711+ 6C32 71                           ld      (hl), c
1712+ 6C33 23                           inc     hl
1713+ 6C34 70                           ld      (hl), b
1714+ 6C35 C1                           pop     bc                  // Restore Instruction Pointer
1715+ 6C36
1716+ 6C36                              next
1716+ 6C36 DD E9       >                jp      (ix)
1717+ 6C38
1718+ 6C38              //  ______________________________________________________________________
1719+ 6C38              //
1720+ 6C38              // p@           a -- c
1721+ 6C38              // Read one byte from port a and leave the result on top of stack
1722+ 6C38                              New_Def PFETCH, "P@", is_code, is_normal
1722+ 6C38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1722+ 6C38             >
1722+ 6C38             >                // dummy db directives used to calculate length of namec
1722+ 6C38 50 40       >                db      "P@"
1722+ 6C3A             >len_NFA         defl    $ - temp_NFA
1722+ 6C3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1722+ 6C38             >
1722+ 6C38 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1722+ 6C39 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1722+ 6C3B             >                org     $-1                 // alter last byte of Name just above to set
1722+ 6C3A C0          >                db      {b $} | END_BIT     // msb as name end
1722+ 6C3B             >
1722+ 6C3B 21 6C       >                dw      last_NFA            // Link to previous definition Name
1722+ 6C3D             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1722+ 6C3D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1722+ 6C3D             >                else
1722+ 6C3D 3F 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1722+ 6C3F             >                endif           ; ok        // for other definitions it "points" the correct handler
1722+ 6C3F             >                // Use of "; ok" to suppress "warning[fwdref]"
1722+ 6C3F             >
1722+ 6C3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1723+ 6C3F 50                           ld      d, b
1724+ 6C40 59                           ld      e, c
1725+ 6C41
1726+ 6C41 C1                           pop     bc
1727+ 6C42 26 00                        ld      h, 0
1728+ 6C44 ED 68                        in      l, (c)
1729+ 6C46 42                           ld      b, d
1730+ 6C47 4B                           ld      c, e
1731+ 6C48                              psh1
1731+ 6C48 E5          >                push    hl
1731+ 6C49 DD E9       >                jp      (ix)
1732+ 6C4B
1733+ 6C4B              //  ______________________________________________________________________
1734+ 6C4B              //
1735+ 6C4B              // p!           c a --
1736+ 6C4B              // Send one byte (top of stack) to port a
1737+ 6C4B                              New_Def PSTORE, "P!", is_code, is_normal
1737+ 6C4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1737+ 6C4B             >
1737+ 6C4B             >                // dummy db directives used to calculate length of namec
1737+ 6C4B 50 21       >                db      "P!"
1737+ 6C4D             >len_NFA         defl    $ - temp_NFA
1737+ 6C4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1737+ 6C4B             >
1737+ 6C4B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1737+ 6C4C 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1737+ 6C4E             >                org     $-1                 // alter last byte of Name just above to set
1737+ 6C4D A1          >                db      {b $} | END_BIT     // msb as name end
1737+ 6C4E             >
1737+ 6C4E 38 6C       >                dw      last_NFA            // Link to previous definition Name
1737+ 6C50             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1737+ 6C50 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1737+ 6C50             >                else
1737+ 6C50 52 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1737+ 6C52             >                endif           ; ok        // for other definitions it "points" the correct handler
1737+ 6C52             >                // Use of "; ok" to suppress "warning[fwdref]"
1737+ 6C52             >
1737+ 6C52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1738+ 6C52 50                           ld      d, b
1739+ 6C53 59                           ld      e, c
1740+ 6C54
1741+ 6C54 C1                           pop     bc
1742+ 6C55 E1                           pop     hl                  // < c
1743+ 6C56 ED 69                        out     (c), l              // low-byte
1744+ 6C58 42                           ld      b, d
1745+ 6C59 4B                           ld      c, e
1746+ 6C5A
1747+ 6C5A                              next
1747+ 6C5A DD E9       >                jp      (ix)
1748+ 6C5C
1749+ 6C5C
1750+ 6C5C              //  ______________________________________________________________________
1751+ 6C5C              //
1752+ 6C5C              // 2*           n1 -- n2
1753+ 6C5C              // doubles the number at top of stack
1754+ 6C5C                              New_Def TWO_MUL, "2*", is_code, is_normal
1754+ 6C5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1754+ 6C5C             >
1754+ 6C5C             >                // dummy db directives used to calculate length of namec
1754+ 6C5C 32 2A       >                db      "2*"
1754+ 6C5E             >len_NFA         defl    $ - temp_NFA
1754+ 6C5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1754+ 6C5C             >
1754+ 6C5C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1754+ 6C5D 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1754+ 6C5F             >                org     $-1                 // alter last byte of Name just above to set
1754+ 6C5E AA          >                db      {b $} | END_BIT     // msb as name end
1754+ 6C5F             >
1754+ 6C5F 4B 6C       >                dw      last_NFA            // Link to previous definition Name
1754+ 6C61             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1754+ 6C61 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1754+ 6C61             >                else
1754+ 6C61 63 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1754+ 6C63             >                endif           ; ok        // for other definitions it "points" the correct handler
1754+ 6C63             >                // Use of "; ok" to suppress "warning[fwdref]"
1754+ 6C63             >
1754+ 6C63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1755+ 6C63              Two_Mul_Ptr:
1756+ 6C63 E1                           pop     hl
1757+ 6C64 29                           add     hl, hl
1758+ 6C65
1759+ 6C65                              psh1
1759+ 6C65 E5          >                push    hl
1759+ 6C66 DD E9       >                jp      (ix)
1760+ 6C68
1761+ 6C68              //  ______________________________________________________________________
1762+ 6C68              //
1763+ 6C68              // 2/           n1 -- n2
1764+ 6C68              // halves the top of stack, sign is unchanged
1765+ 6C68                              New_Def TWO_DIV, "2/", is_code, is_normal
1765+ 6C68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1765+ 6C68             >
1765+ 6C68             >                // dummy db directives used to calculate length of namec
1765+ 6C68 32 2F       >                db      "2/"
1765+ 6C6A             >len_NFA         defl    $ - temp_NFA
1765+ 6C6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1765+ 6C68             >
1765+ 6C68 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1765+ 6C69 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1765+ 6C6B             >                org     $-1                 // alter last byte of Name just above to set
1765+ 6C6A AF          >                db      {b $} | END_BIT     // msb as name end
1765+ 6C6B             >
1765+ 6C6B 5C 6C       >                dw      last_NFA            // Link to previous definition Name
1765+ 6C6D             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1765+ 6C6D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1765+ 6C6D             >                else
1765+ 6C6D 6F 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1765+ 6C6F             >                endif           ; ok        // for other definitions it "points" the correct handler
1765+ 6C6F             >                // Use of "; ok" to suppress "warning[fwdref]"
1765+ 6C6F             >
1765+ 6C6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1766+ 6C6F E1                           pop     hl
1767+ 6C70 CB 2C                        sra     h
1768+ 6C72 CB 1D                        rr      l
1769+ 6C74
1770+ 6C74                              psh1
1770+ 6C74 E5          >                push    hl
1770+ 6C75 DD E9       >                jp      (ix)
1771+ 6C77
1772+ 6C77              //  ______________________________________________________________________
1773+ 6C77              //
1774+ 6C77              // lshift       n1 u -- n2
1775+ 6C77              // bit left shift of u bits
1776+ 6C77                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1776+ 6C77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1776+ 6C77             >
1776+ 6C77             >                // dummy db directives used to calculate length of namec
1776+ 6C77 4C 53 48 49 >                db      "LSHIFT"
1776+ 6C7B 46 54       >
1776+ 6C7D             >len_NFA         defl    $ - temp_NFA
1776+ 6C7D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1776+ 6C77             >
1776+ 6C77 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1776+ 6C78 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1776+ 6C7C 46 54       >
1776+ 6C7E             >                org     $-1                 // alter last byte of Name just above to set
1776+ 6C7D D4          >                db      {b $} | END_BIT     // msb as name end
1776+ 6C7E             >
1776+ 6C7E 68 6C       >                dw      last_NFA            // Link to previous definition Name
1776+ 6C80             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1776+ 6C80 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1776+ 6C80             >                else
1776+ 6C80 82 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1776+ 6C82             >                endif           ; ok        // for other definitions it "points" the correct handler
1776+ 6C82             >                // Use of "; ok" to suppress "warning[fwdref]"
1776+ 6C82             >
1776+ 6C82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1777+ 6C82 D1                           pop     de
1778+ 6C83
1779+ 6C83 E1                           pop     hl
1780+ 6C84 7B                           ld      a, e
1781+ 6C85 B7                           or      a
1782+ 6C86 28 04                        jr      z, Lshift_Zero
1783+ 6C88              Lshift_Loop:
1784+ 6C88 29                                   add     hl, hl
1785+ 6C89 3D                                   dec     a
1786+ 6C8A 20 FC                            jr      nz, Lshift_Loop
1787+ 6C8C              Lshift_Zero:
1788+ 6C8C
1789+ 6C8C
1790+ 6C8C                              psh1
1790+ 6C8C E5          >                push    hl
1790+ 6C8D DD E9       >                jp      (ix)
1791+ 6C8F
1792+ 6C8F              //  ______________________________________________________________________
1793+ 6C8F              //
1794+ 6C8F              // rshift       n1 u -- n2
1795+ 6C8F              // bit right shift of u bits
1796+ 6C8F                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1796+ 6C8F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1796+ 6C8F             >
1796+ 6C8F             >                // dummy db directives used to calculate length of namec
1796+ 6C8F 52 53 48 49 >                db      "RSHIFT"
1796+ 6C93 46 54       >
1796+ 6C95             >len_NFA         defl    $ - temp_NFA
1796+ 6C95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1796+ 6C8F             >
1796+ 6C8F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1796+ 6C90 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1796+ 6C94 46 54       >
1796+ 6C96             >                org     $-1                 // alter last byte of Name just above to set
1796+ 6C95 D4          >                db      {b $} | END_BIT     // msb as name end
1796+ 6C96             >
1796+ 6C96 77 6C       >                dw      last_NFA            // Link to previous definition Name
1796+ 6C98             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1796+ 6C98 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1796+ 6C98             >                else
1796+ 6C98 9A 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1796+ 6C9A             >                endif           ; ok        // for other definitions it "points" the correct handler
1796+ 6C9A             >                // Use of "; ok" to suppress "warning[fwdref]"
1796+ 6C9A             >
1796+ 6C9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1797+ 6C9A D1                           pop     de
1798+ 6C9B
1799+ 6C9B E1                           pop     hl
1800+ 6C9C 7B                           ld      a, e
1801+ 6C9D B7                           or      a
1802+ 6C9E 28 07                        jr      z, Rshift_Zero
1803+ 6CA0              Rshift_Loop:
1804+ 6CA0 CB 3C                                srl     h
1805+ 6CA2 CB 1D                                rr      l
1806+ 6CA4 3D                                   dec     a
1807+ 6CA5 20 F9                            jr      nz, Rshift_Loop
1808+ 6CA7              Rshift_Zero:
1809+ 6CA7
1810+ 6CA7
1811+ 6CA7                              psh1
1811+ 6CA7 E5          >                push    hl
1811+ 6CA8 DD E9       >                jp      (ix)
1812+ 6CAA
1813+ 6CAA              //  ______________________________________________________________________
1814+ 6CAA              //
1815+ 6CAA              // cells        n1 -- n2
1816+ 6CAA              // decrement by 2 top of stack
1817+ 6CAA                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1817+ 6CAA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1817+ 6CAA             >
1817+ 6CAA             >                // dummy db directives used to calculate length of namec
1817+ 6CAA 43 45 4C 4C >                db      "CELLS"
1817+ 6CAE 53          >
1817+ 6CAF             >len_NFA         defl    $ - temp_NFA
1817+ 6CAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1817+ 6CAA             >
1817+ 6CAA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1817+ 6CAB 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1817+ 6CAF 53          >
1817+ 6CB0             >                org     $-1                 // alter last byte of Name just above to set
1817+ 6CAF D3          >                db      {b $} | END_BIT     // msb as name end
1817+ 6CB0             >
1817+ 6CB0 8F 6C       >                dw      last_NFA            // Link to previous definition Name
1817+ 6CB2             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1817+ 6CB2 63 6C       >                dw      Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1817+ 6CB4             >                else
1817+ 6CB4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1817+ 6CB4             >                endif           ; ok        // for other definitions it "points" the correct handler
1817+ 6CB4             >                // Use of "; ok" to suppress "warning[fwdref]"
1817+ 6CB4             >
1817+ 6CB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1818+ 6CB4
1819+ 6CB4
1820+ 6CB4              //  ______________________________________________________________________
1821+ 6CB4
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
 109  6CB4                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
   1+ 6CB4              //  ______________________________________________________________________
   2+ 6CB4              //
   3+ 6CB4              //  L1.asm
   4+ 6CB4              //
   5+ 6CB4              //  Level-1 definitions and derivate
   6+ 6CB4              //  ______________________________________________________________________
   7+ 6CB4
   8+ 6CB4              //  ______________________________________________________________________
   9+ 6CB4              //
  10+ 6CB4              // :            -- cccc     ( compile time )
  11+ 6CB4              //              i*x -- j*x  ( run time )
  12+ 6CB4              // Colon Definition
  13+ 6CB4                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6CB4             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6CB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6CB4             >
  13+ 6CB4             >                // dummy db directives used to calculate length of namec
  13+ 6CB4 3A          >                db      ":"
  13+ 6CB5             >len_NFA         defl    $ - temp_NFA
  13+ 6CB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6CB4             >
  13+ 6CB4 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6CB5 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6CB6             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6CB5 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6CB6             >
  13+ 6CB6 AA 6C       >                dw      last_NFA            // Link to previous definition Name
  13+ 6CB8             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6CB8 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6CBA             >                else
  13+ 6CBA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 6CBA             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6CBA             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6CBA             >
  13+ 6CBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6CBA
  15+ 6CBA 18 71                        dw      QEXEC                   // ?exec
  16+ 6CBC D3 70                        dw      STORE_CSP               // !csp
  17+ 6CBE 89 6E DD 6B                  dw      CURRENT, FETCH          // current @
  18+ 6CC2 7C 6E EA 6B                  dw      CONTEXT, STORE          // context !
  19+ 6CC6 BB 76                        dw      CREATE                  // create  ( forward )
  20+ 6CC8 B2 71                        dw      SMUDGE                  // dmudge
  21+ 6CCA 9D 71                        dw      SQUARED_CLOSE           // ]
  22+ 6CCC 08 72                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6CCE                                                              // ... immediate
  24+ 6CCE              Enter_Ptr:
  25+ 6CCE                              // via call coded in CFA
  26+ 6CCE                              ldhlrp
  26+ 6CCE 2A 30 64    >                ld      hl,(RP_Pointer)
  27+ 6CD1 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6CD2 70                           ld      (hl), b
  29+ 6CD3 2B                           dec     hl
  30+ 6CD4 71                           ld      (hl), c
  31+ 6CD5                              ldrphl
  31+ 6CD5 22 30 64    >                ld      (RP_Pointer),hl
  32+ 6CD8 13                           inc     de
  33+ 6CD9 4B                           ld      c, e
  34+ 6CDA 42                           ld      b, d
  35+ 6CDB                              next
  35+ 6CDB DD E9       >                jp      (ix)
  36+ 6CDD
  37+ 6CDD              //  ______________________________________________________________________
  38+ 6CDD              //
  39+ 6CDD              // ;            --
  40+ 6CDD              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6CDD                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6CDD             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6CDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6CDD             >
  41+ 6CDD             >                // dummy db directives used to calculate length of namec
  41+ 6CDD 3B          >                db      ";"
  41+ 6CDE             >len_NFA         defl    $ - temp_NFA
  41+ 6CDE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6CDD             >
  41+ 6CDD C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6CDE 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6CDF             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6CDE BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6CDF             >
  41+ 6CDF B4 6C       >                dw      last_NFA            // Link to previous definition Name
  41+ 6CE1             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6CE1 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6CE3             >                else
  41+ 6CE3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  41+ 6CE3             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6CE3             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6CE3             >
  41+ 6CE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6CE3
  43+ 6CE3 42 71                        dw      QCSP                    // ?csp
  44+ 6CE5 79 71 BD 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6CE9 B2 71                        dw      SMUDGE                  // smudge
  46+ 6CEB 8F 71                        dw      SQUARED_OPEN            // [
  47+ 6CED BD 69                        dw      EXIT                    // ; immediate
  48+ 6CEF
  49+ 6CEF              //  ______________________________________________________________________
  50+ 6CEF              //
  51+ 6CEF              // noop         --
  52+ 6CEF
  53+ 6CEF                              Colon_Def NOOP, "NOOP", is_normal
  53+ 6CEF             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 6CEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6CEF             >
  53+ 6CEF             >                // dummy db directives used to calculate length of namec
  53+ 6CEF 4E 4F 4F 50 >                db      "NOOP"
  53+ 6CF3             >len_NFA         defl    $ - temp_NFA
  53+ 6CF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6CEF             >
  53+ 6CEF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6CF0 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6CF4             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6CF3 D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6CF4             >
  53+ 6CF4 DD 6C       >                dw      last_NFA            // Link to previous definition Name
  53+ 6CF6             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6CF6 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 6CF8             >                else
  53+ 6CF8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  53+ 6CF8             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6CF8             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6CF8             >
  53+ 6CF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6CF8 BD 69                        dw      EXIT
  55+ 6CFA
  56+ 6CFA              //  ______________________________________________________________________
  57+ 6CFA              //
  58+ 6CFA              // constant     n -- cccc     ( compile time )
  59+ 6CFA              //              -- n          ( run time )
  60+ 6CFA              // Constant definition.
  61+ 6CFA                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6CFA             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6CFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6CFA             >
  61+ 6CFA             >                // dummy db directives used to calculate length of namec
  61+ 6CFA 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6CFE 54 41 4E 54 >
  61+ 6D02             >len_NFA         defl    $ - temp_NFA
  61+ 6D02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6CFA             >
  61+ 6CFA 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6CFB 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6CFF 54 41 4E 54 >
  61+ 6D03             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6D02 D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6D03             >
  61+ 6D03 EF 6C       >                dw      last_NFA            // Link to previous definition Name
  61+ 6D05             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6D05 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6D07             >                else
  61+ 6D07 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  61+ 6D07             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6D07             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6D07             >
  61+ 6D07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6D07
  63+ 6D07 BB 76                        dw      CREATE                  // create
  64+ 6D09 37 6F                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6D0B 08 72                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6D0D              Constant_Ptr:
  67+ 6D0D
  68+ 6D0D 13                           inc     de
  69+ 6D0E EB                           ex      de, hl
  70+ 6D0F
  71+ 6D0F 5E                           ld      e, (hl)
  72+ 6D10 23                           inc     hl
  73+ 6D11 56                           ld      d, (hl)
  74+ 6D12 D5                           push    de
  75+ 6D13                              next
  75+ 6D13 DD E9       >                jp      (ix)
  76+ 6D15
  77+ 6D15              //  ______________________________________________________________________
  78+ 6D15              //
  79+ 6D15              // variable     n -- cccc     ( compile time )
  80+ 6D15              //              -- a          ( run time )
  81+ 6D15              // Variable definition, n is the initial value.
  82+ 6D15                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6D15             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6D15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6D15             >
  82+ 6D15             >                // dummy db directives used to calculate length of namec
  82+ 6D15 56 41 52 49 >                db      "VARIABLE"
  82+ 6D19 41 42 4C 45 >
  82+ 6D1D             >len_NFA         defl    $ - temp_NFA
  82+ 6D1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6D15             >
  82+ 6D15 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6D16 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6D1A 41 42 4C 45 >
  82+ 6D1E             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6D1D C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6D1E             >
  82+ 6D1E FA 6C       >                dw      last_NFA            // Link to previous definition Name
  82+ 6D20             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6D20 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6D22             >                else
  82+ 6D22 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  82+ 6D22             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6D22             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6D22             >
  82+ 6D22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6D22
  84+ 6D22 05 6D                        dw      CONSTANT                // constant
  85+ 6D24 08 72                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6D26              Variable_Ptr:
  87+ 6D26
  88+ 6D26 13                           inc     de
  89+ 6D27 D5                           push    de                  // balance TOS before overwrite it
  90+ 6D28
  91+ 6D28                              next
  91+ 6D28 DD E9       >                jp      (ix)
  92+ 6D2A
  93+ 6D2A              //  ______________________________________________________________________
  94+ 6D2A              //
  95+ 6D2A              // user         b -- cccc     ( compile time )
  96+ 6D2A              //              -- a          ( run time )
  97+ 6D2A              // User variable definition
  98+ 6D2A                              Colon_Def USER, "USER", is_normal
  98+ 6D2A             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6D2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6D2A             >
  98+ 6D2A             >                // dummy db directives used to calculate length of namec
  98+ 6D2A 55 53 45 52 >                db      "USER"
  98+ 6D2E             >len_NFA         defl    $ - temp_NFA
  98+ 6D2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6D2A             >
  98+ 6D2A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6D2B 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6D2F             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6D2E D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6D2F             >
  98+ 6D2F 15 6D       >                dw      last_NFA            // Link to previous definition Name
  98+ 6D31             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6D31 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6D33             >                else
  98+ 6D33 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  98+ 6D33             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6D33             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6D33             >
  98+ 6D33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6D33
 100+ 6D33 BB 76                        dw      CREATE                  // create
 101+ 6D35 48 6F                        dw      CCOMMA                  // c,
 102+ 6D37 08 72                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6D39
 104+ 6D39
 105+ 6D39              User_Ptr:
 106+ 6D39                              // via call coded in CFA
 107+ 6D39 13                           inc     de
 108+ 6D3A EB                           ex      de, hl
 109+ 6D3B 5E                           ld      e, (hl)
 110+ 6D3C 16 00                        ld      d, 0
 111+ 6D3E 2A 2E 64                     ld      hl, (USER_Pointer)
 112+ 6D41 19                           add     hl, de
 113+ 6D42
 114+ 6D42                              psh1
 114+ 6D42 E5          >                push    hl
 114+ 6D43 DD E9       >                jp      (ix)
 115+ 6D45
 116+ 6D45              //  ______________________________________________________________________
 117+ 6D45              //
 118+ 6D45                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6D45             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6D45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6D45             >
 118+ 6D45             >                // dummy db directives used to calculate length of namec
 118+ 6D45 30          >                db      "0"
 118+ 6D46             >len_NFA         defl    $ - temp_NFA
 118+ 6D46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6D45             >
 118+ 6D45 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6D46 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6D47             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6D46 B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6D47             >
 118+ 6D47 2A 6D       >                dw      last_NFA            // Link to previous definition Name
 118+ 6D49             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6D49 0D 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6D4B             >                else
 118+ 6D4B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 118+ 6D4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6D4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6D4B             >
 118+ 6D4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6D4B 00 00       >                dw      0
 119+ 6D4D                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6D4D             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6D4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6D4D             >
 119+ 6D4D             >                // dummy db directives used to calculate length of namec
 119+ 6D4D 31          >                db      "1"
 119+ 6D4E             >len_NFA         defl    $ - temp_NFA
 119+ 6D4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6D4D             >
 119+ 6D4D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6D4E 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6D4F             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6D4E B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6D4F             >
 119+ 6D4F 45 6D       >                dw      last_NFA            // Link to previous definition Name
 119+ 6D51             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6D51 0D 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6D53             >                else
 119+ 6D53 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 119+ 6D53             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6D53             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6D53             >
 119+ 6D53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6D53 01 00       >                dw      1
 120+ 6D55                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6D55             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6D55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6D55             >
 120+ 6D55             >                // dummy db directives used to calculate length of namec
 120+ 6D55 32          >                db      "2"
 120+ 6D56             >len_NFA         defl    $ - temp_NFA
 120+ 6D56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6D55             >
 120+ 6D55 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6D56 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6D57             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6D56 B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6D57             >
 120+ 6D57 4D 6D       >                dw      last_NFA            // Link to previous definition Name
 120+ 6D59             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6D59 0D 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6D5B             >                else
 120+ 6D5B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 120+ 6D5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6D5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6D5B             >
 120+ 6D5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6D5B 02 00       >                dw      2
 121+ 6D5D                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6D5D             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6D5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6D5D             >
 121+ 6D5D             >                // dummy db directives used to calculate length of namec
 121+ 6D5D 33          >                db      "3"
 121+ 6D5E             >len_NFA         defl    $ - temp_NFA
 121+ 6D5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6D5D             >
 121+ 6D5D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6D5E 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6D5F             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6D5E B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6D5F             >
 121+ 6D5F 55 6D       >                dw      last_NFA            // Link to previous definition Name
 121+ 6D61             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6D61 0D 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6D63             >                else
 121+ 6D63 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 6D63             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6D63             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6D63             >
 121+ 6D63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6D63 03 00       >                dw      3
 122+ 6D65                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6D65             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6D65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6D65             >
 122+ 6D65             >                // dummy db directives used to calculate length of namec
 122+ 6D65 2D 31       >                db      "-1"
 122+ 6D67             >len_NFA         defl    $ - temp_NFA
 122+ 6D67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6D65             >
 122+ 6D65 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6D66 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6D68             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6D67 B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6D68             >
 122+ 6D68 5D 6D       >                dw      last_NFA            // Link to previous definition Name
 122+ 6D6A             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6D6A 0D 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6D6C             >                else
 122+ 6D6C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 6D6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6D6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6D6C             >
 122+ 6D6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6D6C FF FF       >                dw      -1
 123+ 6D6E                              Constant_Def BL         ,   "BL"    , $20
 123+ 6D6E             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6D6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6D6E             >
 123+ 6D6E             >                // dummy db directives used to calculate length of namec
 123+ 6D6E 42 4C       >                db      "BL"
 123+ 6D70             >len_NFA         defl    $ - temp_NFA
 123+ 6D70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6D6E             >
 123+ 6D6E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6D6F 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6D71             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6D70 CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6D71             >
 123+ 6D71 65 6D       >                dw      last_NFA            // Link to previous definition Name
 123+ 6D73             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6D73 0D 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6D75             >                else
 123+ 6D75 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 123+ 6D75             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6D75             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6D75             >
 123+ 6D75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6D75 20 00       >                dw      $20
 124+ 6D77                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6D77             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6D77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6D77             >
 124+ 6D77             >                // dummy db directives used to calculate length of namec
 124+ 6D77 43 2F 4C    >                db      "C/L"
 124+ 6D7A             >len_NFA         defl    $ - temp_NFA
 124+ 6D7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6D77             >
 124+ 6D77 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6D78 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6D7B             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6D7A CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6D7B             >
 124+ 6D7B 6E 6D       >                dw      last_NFA            // Link to previous definition Name
 124+ 6D7D             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6D7D 0D 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6D7F             >                else
 124+ 6D7F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 124+ 6D7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6D7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6D7F             >
 124+ 6D7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6D7F 40 00       >                dw      64
 125+ 6D81                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6D81             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6D81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6D81             >
 125+ 6D81             >                // dummy db directives used to calculate length of namec
 125+ 6D81 42 2F 42 55 >                db      "B/BUF"
 125+ 6D85 46          >
 125+ 6D86             >len_NFA         defl    $ - temp_NFA
 125+ 6D86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6D81             >
 125+ 6D81 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6D82 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6D86 46          >
 125+ 6D87             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6D86 C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6D87             >
 125+ 6D87 77 6D       >                dw      last_NFA            // Link to previous definition Name
 125+ 6D89             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6D89 0D 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6D8B             >                else
 125+ 6D8B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 125+ 6D8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6D8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6D8B             >
 125+ 6D8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6D8B 00 02       >                dw      512
 126+ 6D8D                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6D8D             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6D8D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6D8D             >
 126+ 6D8D             >                // dummy db directives used to calculate length of namec
 126+ 6D8D 42 2F 53 43 >                db      "B/SCR"
 126+ 6D91 52          >
 126+ 6D92             >len_NFA         defl    $ - temp_NFA
 126+ 6D92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6D8D             >
 126+ 6D8D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6D8E 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6D92 52          >
 126+ 6D93             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6D92 D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6D93             >
 126+ 6D93 81 6D       >                dw      last_NFA            // Link to previous definition Name
 126+ 6D95             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6D95 0D 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6D97             >                else
 126+ 6D97 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6D97             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6D97             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6D97             >
 126+ 6D97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6D97 02 00       >                dw      2
 127+ 6D99                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6D99             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6D99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6D99             >
 127+ 6D99             >                // dummy db directives used to calculate length of namec
 127+ 6D99 4C 2F 53 43 >                db      "L/SCR"
 127+ 6D9D 52          >
 127+ 6D9E             >len_NFA         defl    $ - temp_NFA
 127+ 6D9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6D99             >
 127+ 6D99 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6D9A 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6D9E 52          >
 127+ 6D9F             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6D9E D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6D9F             >
 127+ 6D9F 8D 6D       >                dw      last_NFA            // Link to previous definition Name
 127+ 6DA1             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6DA1 0D 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6DA3             >                else
 127+ 6DA3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 6DA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6DA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6DA3             >
 127+ 6DA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6DA3 10 00       >                dw      16
 128+ 6DA5
 129+ 6DA5              //  ______________________________________________________________________
 130+ 6DA5              //
 131+ 6DA5              // +origin         --
 132+ 6DA5                              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 132+ 6DA5             >                New_Def  PLUS_ORIGIN, "+ORIGIN", Enter_Ptr, is_normal ; ok
 132+ 6DA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 6DA5             >
 132+ 6DA5             >                // dummy db directives used to calculate length of namec
 132+ 6DA5 2B 4F 52 49 >                db      "+ORIGIN"
 132+ 6DA9 47 49 4E    >
 132+ 6DAC             >len_NFA         defl    $ - temp_NFA
 132+ 6DAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 6DA5             >
 132+ 6DA5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 6DA6 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 132+ 6DAA 47 49 4E    >
 132+ 6DAD             >                org     $-1                 // alter last byte of Name just above to set
 132+ 6DAC CE          >                db      {b $} | END_BIT     // msb as name end
 132+ 6DAD             >
 132+ 6DAD 99 6D       >                dw      last_NFA            // Link to previous definition Name
 132+ 6DAF             >PLUS_ORIGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 6DAF CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 132+ 6DB1             >                else
 132+ 6DB1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 132+ 6DB1             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 6DB1             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 6DB1             >
 132+ 6DB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 6DB1 43 64 00 64                  dw      LIT, Cold_origin        // [ hex 6400 ] literal
 134+ 6DB5 5E 6A                        dw      PLUS                    // +
 135+ 6DB7 BD 69                        dw      EXIT                    // ;
 136+ 6DB9
 137+ 6DB9              //  ______________________________________________________________________
 138+ 6DB9              //
 139+ 6DB9                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 139+ 6DB9             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 139+ 6DB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 6DB9             >
 139+ 6DB9             >                // dummy db directives used to calculate length of namec
 139+ 6DB9 28 4E 45 58 >                db      "(NEXT)"
 139+ 6DBD 54 29       >
 139+ 6DBF             >len_NFA         defl    $ - temp_NFA
 139+ 6DBF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 6DB9             >
 139+ 6DB9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 6DBA 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 139+ 6DBE 54 29       >
 139+ 6DC0             >                org     $-1                 // alter last byte of Name just above to set
 139+ 6DBF A9          >                db      {b $} | END_BIT     // msb as name end
 139+ 6DC0             >
 139+ 6DC0 A5 6D       >                dw      last_NFA            // Link to previous definition Name
 139+ 6DC2             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 6DC2 0D 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 139+ 6DC4             >                else
 139+ 6DC4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 139+ 6DC4             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 6DC4             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 6DC4             >
 139+ 6DC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6DC4 32 64       >                dw      Next_Ptr
 140+ 6DC6
 141+ 6DC6              //  ______________________________________________________________________
 142+ 6DC6              //
 143+ 6DC6
 144+ 6DC6                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 144+ 6DC6             >                New_Def  S0, "S0", User_Ptr, is_normal
 144+ 6DC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 6DC6             >
 144+ 6DC6             >                // dummy db directives used to calculate length of namec
 144+ 6DC6 53 30       >                db      "S0"
 144+ 6DC8             >len_NFA         defl    $ - temp_NFA
 144+ 6DC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 6DC6             >
 144+ 6DC6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 6DC7 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 144+ 6DC9             >                org     $-1                 // alter last byte of Name just above to set
 144+ 6DC8 B0          >                db      {b $} | END_BIT     // msb as name end
 144+ 6DC9             >
 144+ 6DC9 B9 6D       >                dw      last_NFA            // Link to previous definition Name
 144+ 6DCB             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 6DCB 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 144+ 6DCD             >                else
 144+ 6DCD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 6DCD             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 6DCD             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 6DCD             >
 144+ 6DCD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 6DCD 06          >                db      06
 145+ 6DCE                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 145+ 6DCE             >                New_Def  R0, "R0", User_Ptr, is_normal
 145+ 6DCE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 145+ 6DCE             >
 145+ 6DCE             >                // dummy db directives used to calculate length of namec
 145+ 6DCE 52 30       >                db      "R0"
 145+ 6DD0             >len_NFA         defl    $ - temp_NFA
 145+ 6DD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 145+ 6DCE             >
 145+ 6DCE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 145+ 6DCF 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 145+ 6DD1             >                org     $-1                 // alter last byte of Name just above to set
 145+ 6DD0 B0          >                db      {b $} | END_BIT     // msb as name end
 145+ 6DD1             >
 145+ 6DD1 C6 6D       >                dw      last_NFA            // Link to previous definition Name
 145+ 6DD3             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 145+ 6DD3 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 145+ 6DD5             >                else
 145+ 6DD5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 145+ 6DD5             >                endif           ; ok        // for other definitions it "points" the correct handler
 145+ 6DD5             >                // Use of "; ok" to suppress "warning[fwdref]"
 145+ 6DD5             >
 145+ 6DD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 6DD5 08          >                db      08
 146+ 6DD6                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 146+ 6DD6             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 146+ 6DD6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 6DD6             >
 146+ 6DD6             >                // dummy db directives used to calculate length of namec
 146+ 6DD6 54 49 42    >                db      "TIB"
 146+ 6DD9             >len_NFA         defl    $ - temp_NFA
 146+ 6DD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 6DD6             >
 146+ 6DD6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 6DD7 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 146+ 6DDA             >                org     $-1                 // alter last byte of Name just above to set
 146+ 6DD9 C2          >                db      {b $} | END_BIT     // msb as name end
 146+ 6DDA             >
 146+ 6DDA CE 6D       >                dw      last_NFA            // Link to previous definition Name
 146+ 6DDC             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 6DDC 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 146+ 6DDE             >                else
 146+ 6DDE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 146+ 6DDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 6DDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 6DDE             >
 146+ 6DDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 6DDE 0A          >                db      10
 147+ 6DDF                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 147+ 6DDF             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 147+ 6DDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147+ 6DDF             >
 147+ 6DDF             >                // dummy db directives used to calculate length of namec
 147+ 6DDF 57 49 44 54 >                db      "WIDTH"
 147+ 6DE3 48          >
 147+ 6DE4             >len_NFA         defl    $ - temp_NFA
 147+ 6DE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147+ 6DDF             >
 147+ 6DDF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147+ 6DE0 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 147+ 6DE4 48          >
 147+ 6DE5             >                org     $-1                 // alter last byte of Name just above to set
 147+ 6DE4 C8          >                db      {b $} | END_BIT     // msb as name end
 147+ 6DE5             >
 147+ 6DE5 D6 6D       >                dw      last_NFA            // Link to previous definition Name
 147+ 6DE7             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 147+ 6DE7 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 147+ 6DE9             >                else
 147+ 6DE9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 147+ 6DE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 147+ 6DE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 147+ 6DE9             >
 147+ 6DE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 147+ 6DE9 0C          >                db      12
 148+ 6DEA                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 148+ 6DEA             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 148+ 6DEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 148+ 6DEA             >
 148+ 6DEA             >                // dummy db directives used to calculate length of namec
 148+ 6DEA 57 41 52 4E >                db      "WARNING"
 148+ 6DEE 49 4E 47    >
 148+ 6DF1             >len_NFA         defl    $ - temp_NFA
 148+ 6DF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 148+ 6DEA             >
 148+ 6DEA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 148+ 6DEB 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 148+ 6DEF 49 4E 47    >
 148+ 6DF2             >                org     $-1                 // alter last byte of Name just above to set
 148+ 6DF1 C7          >                db      {b $} | END_BIT     // msb as name end
 148+ 6DF2             >
 148+ 6DF2 DF 6D       >                dw      last_NFA            // Link to previous definition Name
 148+ 6DF4             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 148+ 6DF4 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 148+ 6DF6             >                else
 148+ 6DF6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 148+ 6DF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 148+ 6DF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 148+ 6DF6             >
 148+ 6DF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 148+ 6DF6 0E          >                db      14
 149+ 6DF7                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 149+ 6DF7             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 149+ 6DF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 149+ 6DF7             >
 149+ 6DF7             >                // dummy db directives used to calculate length of namec
 149+ 6DF7 46 45 4E 43 >                db      "FENCE"
 149+ 6DFB 45          >
 149+ 6DFC             >len_NFA         defl    $ - temp_NFA
 149+ 6DFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 149+ 6DF7             >
 149+ 6DF7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 149+ 6DF8 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 149+ 6DFC 45          >
 149+ 6DFD             >                org     $-1                 // alter last byte of Name just above to set
 149+ 6DFC C5          >                db      {b $} | END_BIT     // msb as name end
 149+ 6DFD             >
 149+ 6DFD EA 6D       >                dw      last_NFA            // Link to previous definition Name
 149+ 6DFF             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 149+ 6DFF 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 149+ 6E01             >                else
 149+ 6E01 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 149+ 6E01             >                endif           ; ok        // for other definitions it "points" the correct handler
 149+ 6E01             >                // Use of "; ok" to suppress "warning[fwdref]"
 149+ 6E01             >
 149+ 6E01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 149+ 6E01 10          >                db      16
 150+ 6E02                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 150+ 6E02             >                New_Def  DP, "DP", User_Ptr, is_normal
 150+ 6E02             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ 6E02             >
 150+ 6E02             >                // dummy db directives used to calculate length of namec
 150+ 6E02 44 50       >                db      "DP"
 150+ 6E04             >len_NFA         defl    $ - temp_NFA
 150+ 6E04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ 6E02             >
 150+ 6E02 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ 6E03 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 150+ 6E05             >                org     $-1                 // alter last byte of Name just above to set
 150+ 6E04 D0          >                db      {b $} | END_BIT     // msb as name end
 150+ 6E05             >
 150+ 6E05 F7 6D       >                dw      last_NFA            // Link to previous definition Name
 150+ 6E07             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6E07 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 150+ 6E09             >                else
 150+ 6E09 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 150+ 6E09             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6E09             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6E09             >
 150+ 6E09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6E09 12          >                db      18
 151+ 6E0A                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 151+ 6E0A             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 151+ 6E0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6E0A             >
 151+ 6E0A             >                // dummy db directives used to calculate length of namec
 151+ 6E0A 56 4F 43 2D >                db      "VOC-LINK"
 151+ 6E0E 4C 49 4E 4B >
 151+ 6E12             >len_NFA         defl    $ - temp_NFA
 151+ 6E12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6E0A             >
 151+ 6E0A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6E0B 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 151+ 6E0F 4C 49 4E 4B >
 151+ 6E13             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6E12 CB          >                db      {b $} | END_BIT     // msb as name end
 151+ 6E13             >
 151+ 6E13 02 6E       >                dw      last_NFA            // Link to previous definition Name
 151+ 6E15             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6E15 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6E17             >                else
 151+ 6E17 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 6E17             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6E17             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6E17             >
 151+ 6E17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6E17 14          >                db      20
 152+ 6E18                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 152+ 6E18             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 152+ 6E18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6E18             >
 152+ 6E18             >                // dummy db directives used to calculate length of namec
 152+ 6E18 46 49 52 53 >                db      "FIRST"
 152+ 6E1C 54          >
 152+ 6E1D             >len_NFA         defl    $ - temp_NFA
 152+ 6E1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6E18             >
 152+ 6E18 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6E19 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 152+ 6E1D 54          >
 152+ 6E1E             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6E1D D4          >                db      {b $} | END_BIT     // msb as name end
 152+ 6E1E             >
 152+ 6E1E 0A 6E       >                dw      last_NFA            // Link to previous definition Name
 152+ 6E20             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6E20 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6E22             >                else
 152+ 6E22 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 152+ 6E22             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6E22             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6E22             >
 152+ 6E22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6E22 16          >                db      22
 153+ 6E23                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 153+ 6E23             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 153+ 6E23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6E23             >
 153+ 6E23             >                // dummy db directives used to calculate length of namec
 153+ 6E23 4C 49 4D 49 >                db      "LIMIT"
 153+ 6E27 54          >
 153+ 6E28             >len_NFA         defl    $ - temp_NFA
 153+ 6E28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6E23             >
 153+ 6E23 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6E24 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 153+ 6E28 54          >
 153+ 6E29             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6E28 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 6E29             >
 153+ 6E29 18 6E       >                dw      last_NFA            // Link to previous definition Name
 153+ 6E2B             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6E2B 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6E2D             >                else
 153+ 6E2D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 6E2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6E2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6E2D             >
 153+ 6E2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6E2D 18          >                db      24
 154+ 6E2E                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 154+ 6E2E             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 154+ 6E2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6E2E             >
 154+ 6E2E             >                // dummy db directives used to calculate length of namec
 154+ 6E2E 45 58 50    >                db      "EXP"
 154+ 6E31             >len_NFA         defl    $ - temp_NFA
 154+ 6E31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6E2E             >
 154+ 6E2E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6E2F 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 154+ 6E32             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6E31 D0          >                db      {b $} | END_BIT     // msb as name end
 154+ 6E32             >
 154+ 6E32 23 6E       >                dw      last_NFA            // Link to previous definition Name
 154+ 6E34             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6E34 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6E36             >                else
 154+ 6E36 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 154+ 6E36             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6E36             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6E36             >
 154+ 6E36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6E36 1A          >                db      26
 155+ 6E37                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 155+ 6E37             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 155+ 6E37             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6E37             >
 155+ 6E37             >                // dummy db directives used to calculate length of namec
 155+ 6E37 4E 4D 4F 44 >                db      "NMODE"
 155+ 6E3B 45          >
 155+ 6E3C             >len_NFA         defl    $ - temp_NFA
 155+ 6E3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6E37             >
 155+ 6E37 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6E38 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 155+ 6E3C 45          >
 155+ 6E3D             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6E3C C5          >                db      {b $} | END_BIT     // msb as name end
 155+ 6E3D             >
 155+ 6E3D 2E 6E       >                dw      last_NFA            // Link to previous definition Name
 155+ 6E3F             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6E3F 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6E41             >                else
 155+ 6E41 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 155+ 6E41             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6E41             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6E41             >
 155+ 6E41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6E41 1C          >                db      28
 156+ 6E42                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 156+ 6E42             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 156+ 6E42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6E42             >
 156+ 6E42             >                // dummy db directives used to calculate length of namec
 156+ 6E42 42 4C 4B    >                db      "BLK"
 156+ 6E45             >len_NFA         defl    $ - temp_NFA
 156+ 6E45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6E42             >
 156+ 6E42 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6E43 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 156+ 6E46             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6E45 CB          >                db      {b $} | END_BIT     // msb as name end
 156+ 6E46             >
 156+ 6E46 37 6E       >                dw      last_NFA            // Link to previous definition Name
 156+ 6E48             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6E48 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6E4A             >                else
 156+ 6E4A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 6E4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6E4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6E4A             >
 156+ 6E4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6E4A 1E          >                db      30
 157+ 6E4B                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 157+ 6E4B             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 157+ 6E4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6E4B             >
 157+ 6E4B             >                // dummy db directives used to calculate length of namec
 157+ 6E4B 3E 49 4E    >                db      ">IN"
 157+ 6E4E             >len_NFA         defl    $ - temp_NFA
 157+ 6E4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6E4B             >
 157+ 6E4B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6E4C 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 157+ 6E4F             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6E4E CE          >                db      {b $} | END_BIT     // msb as name end
 157+ 6E4F             >
 157+ 6E4F 42 6E       >                dw      last_NFA            // Link to previous definition Name
 157+ 6E51             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6E51 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6E53             >                else
 157+ 6E53 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 157+ 6E53             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6E53             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6E53             >
 157+ 6E53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6E53 20          >                db      32
 158+ 6E54                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 158+ 6E54             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 158+ 6E54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6E54             >
 158+ 6E54             >                // dummy db directives used to calculate length of namec
 158+ 6E54 4F 55 54    >                db      "OUT"
 158+ 6E57             >len_NFA         defl    $ - temp_NFA
 158+ 6E57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6E54             >
 158+ 6E54 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6E55 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 158+ 6E58             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6E57 D4          >                db      {b $} | END_BIT     // msb as name end
 158+ 6E58             >
 158+ 6E58 4B 6E       >                dw      last_NFA            // Link to previous definition Name
 158+ 6E5A             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6E5A 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6E5C             >                else
 158+ 6E5C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6E5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6E5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6E5C             >
 158+ 6E5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6E5C 22          >                db      34
 159+ 6E5D                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 159+ 6E5D             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 159+ 6E5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6E5D             >
 159+ 6E5D             >                // dummy db directives used to calculate length of namec
 159+ 6E5D 53 43 52    >                db      "SCR"
 159+ 6E60             >len_NFA         defl    $ - temp_NFA
 159+ 6E60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6E5D             >
 159+ 6E5D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6E5E 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 159+ 6E61             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6E60 D2          >                db      {b $} | END_BIT     // msb as name end
 159+ 6E61             >
 159+ 6E61 54 6E       >                dw      last_NFA            // Link to previous definition Name
 159+ 6E63             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6E63 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6E65             >                else
 159+ 6E65 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 159+ 6E65             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6E65             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6E65             >
 159+ 6E65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6E65 24          >                db      36
 160+ 6E66                              User_Def OFFSET     , "OFFSET"    , 38 //
 160+ 6E66             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 160+ 6E66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6E66             >
 160+ 6E66             >                // dummy db directives used to calculate length of namec
 160+ 6E66 4F 46 46 53 >                db      "OFFSET"
 160+ 6E6A 45 54       >
 160+ 6E6C             >len_NFA         defl    $ - temp_NFA
 160+ 6E6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6E66             >
 160+ 6E66 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6E67 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 160+ 6E6B 45 54       >
 160+ 6E6D             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6E6C D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6E6D             >
 160+ 6E6D 5D 6E       >                dw      last_NFA            // Link to previous definition Name
 160+ 6E6F             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6E6F 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6E71             >                else
 160+ 6E71 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 160+ 6E71             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6E71             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6E71             >
 160+ 6E71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6E71 26          >                db      38
 161+ 6E72                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 161+ 6E72             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 161+ 6E72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6E72             >
 161+ 6E72             >                // dummy db directives used to calculate length of namec
 161+ 6E72 43 4F 4E 54 >                db      "CONTEXT"
 161+ 6E76 45 58 54    >
 161+ 6E79             >len_NFA         defl    $ - temp_NFA
 161+ 6E79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6E72             >
 161+ 6E72 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6E73 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 161+ 6E77 45 58 54    >
 161+ 6E7A             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6E79 D4          >                db      {b $} | END_BIT     // msb as name end
 161+ 6E7A             >
 161+ 6E7A 66 6E       >                dw      last_NFA            // Link to previous definition Name
 161+ 6E7C             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6E7C 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6E7E             >                else
 161+ 6E7E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 161+ 6E7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6E7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6E7E             >
 161+ 6E7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6E7E 28          >                db      40
 162+ 6E7F                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 162+ 6E7F             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 162+ 6E7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6E7F             >
 162+ 6E7F             >                // dummy db directives used to calculate length of namec
 162+ 6E7F 43 55 52 52 >                db      "CURRENT"
 162+ 6E83 45 4E 54    >
 162+ 6E86             >len_NFA         defl    $ - temp_NFA
 162+ 6E86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6E7F             >
 162+ 6E7F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6E80 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 162+ 6E84 45 4E 54    >
 162+ 6E87             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6E86 D4          >                db      {b $} | END_BIT     // msb as name end
 162+ 6E87             >
 162+ 6E87 72 6E       >                dw      last_NFA            // Link to previous definition Name
 162+ 6E89             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6E89 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6E8B             >                else
 162+ 6E8B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 162+ 6E8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6E8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6E8B             >
 162+ 6E8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6E8B 2A          >                db      42
 163+ 6E8C                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 163+ 6E8C             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 163+ 6E8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6E8C             >
 163+ 6E8C             >                // dummy db directives used to calculate length of namec
 163+ 6E8C 53 54 41 54 >                db      "STATE"
 163+ 6E90 45          >
 163+ 6E91             >len_NFA         defl    $ - temp_NFA
 163+ 6E91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6E8C             >
 163+ 6E8C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6E8D 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 163+ 6E91 45          >
 163+ 6E92             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6E91 C5          >                db      {b $} | END_BIT     // msb as name end
 163+ 6E92             >
 163+ 6E92 7F 6E       >                dw      last_NFA            // Link to previous definition Name
 163+ 6E94             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6E94 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6E96             >                else
 163+ 6E96 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 163+ 6E96             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6E96             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6E96             >
 163+ 6E96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6E96 2C          >                db      44
 164+ 6E97                              User_Def BASE       , "BASE"      , 46 //
 164+ 6E97             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 164+ 6E97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6E97             >
 164+ 6E97             >                // dummy db directives used to calculate length of namec
 164+ 6E97 42 41 53 45 >                db      "BASE"
 164+ 6E9B             >len_NFA         defl    $ - temp_NFA
 164+ 6E9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6E97             >
 164+ 6E97 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6E98 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 164+ 6E9C             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6E9B C5          >                db      {b $} | END_BIT     // msb as name end
 164+ 6E9C             >
 164+ 6E9C 8C 6E       >                dw      last_NFA            // Link to previous definition Name
 164+ 6E9E             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6E9E 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6EA0             >                else
 164+ 6EA0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 6EA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6EA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6EA0             >
 164+ 6EA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6EA0 2E          >                db      46
 165+ 6EA1                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 165+ 6EA1             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 165+ 6EA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6EA1             >
 165+ 6EA1             >                // dummy db directives used to calculate length of namec
 165+ 6EA1 44 50 4C    >                db      "DPL"
 165+ 6EA4             >len_NFA         defl    $ - temp_NFA
 165+ 6EA4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6EA1             >
 165+ 6EA1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6EA2 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 165+ 6EA5             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6EA4 CC          >                db      {b $} | END_BIT     // msb as name end
 165+ 6EA5             >
 165+ 6EA5 97 6E       >                dw      last_NFA            // Link to previous definition Name
 165+ 6EA7             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6EA7 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6EA9             >                else
 165+ 6EA9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 6EA9             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6EA9             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6EA9             >
 165+ 6EA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6EA9 30          >                db      48
 166+ 6EAA                              User_Def FLD        , "FLD"       , 50 // output field width
 166+ 6EAA             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 166+ 6EAA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6EAA             >
 166+ 6EAA             >                // dummy db directives used to calculate length of namec
 166+ 6EAA 46 4C 44    >                db      "FLD"
 166+ 6EAD             >len_NFA         defl    $ - temp_NFA
 166+ 6EAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6EAA             >
 166+ 6EAA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6EAB 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 166+ 6EAE             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6EAD C4          >                db      {b $} | END_BIT     // msb as name end
 166+ 6EAE             >
 166+ 6EAE A1 6E       >                dw      last_NFA            // Link to previous definition Name
 166+ 6EB0             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6EB0 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6EB2             >                else
 166+ 6EB2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 6EB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6EB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6EB2             >
 166+ 6EB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6EB2 32          >                db      50
 167+ 6EB3                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 167+ 6EB3             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 167+ 6EB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6EB3             >
 167+ 6EB3             >                // dummy db directives used to calculate length of namec
 167+ 6EB3 43 53 50    >                db      "CSP"
 167+ 6EB6             >len_NFA         defl    $ - temp_NFA
 167+ 6EB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6EB3             >
 167+ 6EB3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6EB4 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 167+ 6EB7             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6EB6 D0          >                db      {b $} | END_BIT     // msb as name end
 167+ 6EB7             >
 167+ 6EB7 AA 6E       >                dw      last_NFA            // Link to previous definition Name
 167+ 6EB9             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6EB9 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6EBB             >                else
 167+ 6EBB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 6EBB             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6EBB             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6EBB             >
 167+ 6EBB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6EBB 34          >                db      52
 168+ 6EBC                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 168+ 6EBC             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 168+ 6EBC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6EBC             >
 168+ 6EBC             >                // dummy db directives used to calculate length of namec
 168+ 6EBC 52 23       >                db      "R#"
 168+ 6EBE             >len_NFA         defl    $ - temp_NFA
 168+ 6EBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6EBC             >
 168+ 6EBC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6EBD 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 168+ 6EBF             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6EBE A3          >                db      {b $} | END_BIT     // msb as name end
 168+ 6EBF             >
 168+ 6EBF B3 6E       >                dw      last_NFA            // Link to previous definition Name
 168+ 6EC1             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6EC1 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6EC3             >                else
 168+ 6EC3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 168+ 6EC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6EC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6EC3             >
 168+ 6EC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6EC3 36          >                db      54
 169+ 6EC4                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 169+ 6EC4             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 169+ 6EC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6EC4             >
 169+ 6EC4             >                // dummy db directives used to calculate length of namec
 169+ 6EC4 48 4C 44    >                db      "HLD"
 169+ 6EC7             >len_NFA         defl    $ - temp_NFA
 169+ 6EC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6EC4             >
 169+ 6EC4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6EC5 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 169+ 6EC8             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6EC7 C4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6EC8             >
 169+ 6EC8 BC 6E       >                dw      last_NFA            // Link to previous definition Name
 169+ 6ECA             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6ECA 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6ECC             >                else
 169+ 6ECC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 169+ 6ECC             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6ECC             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6ECC             >
 169+ 6ECC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6ECC 38          >                db      56
 170+ 6ECD                              User_Def USE        , "USE"       , 58 // address of last used block
 170+ 6ECD             >                New_Def  USE, "USE", User_Ptr, is_normal
 170+ 6ECD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6ECD             >
 170+ 6ECD             >                // dummy db directives used to calculate length of namec
 170+ 6ECD 55 53 45    >                db      "USE"
 170+ 6ED0             >len_NFA         defl    $ - temp_NFA
 170+ 6ED0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6ECD             >
 170+ 6ECD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6ECE 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 170+ 6ED1             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6ED0 C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 6ED1             >
 170+ 6ED1 C4 6E       >                dw      last_NFA            // Link to previous definition Name
 170+ 6ED3             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6ED3 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6ED5             >                else
 170+ 6ED5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 170+ 6ED5             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6ED5             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6ED5             >
 170+ 6ED5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6ED5 3A          >                db      58
 171+ 6ED6                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 171+ 6ED6             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 171+ 6ED6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6ED6             >
 171+ 6ED6             >                // dummy db directives used to calculate length of namec
 171+ 6ED6 50 52 45 56 >                db      "PREV"
 171+ 6EDA             >len_NFA         defl    $ - temp_NFA
 171+ 6EDA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6ED6             >
 171+ 6ED6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6ED7 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 171+ 6EDB             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6EDA D6          >                db      {b $} | END_BIT     // msb as name end
 171+ 6EDB             >
 171+ 6EDB CD 6E       >                dw      last_NFA            // Link to previous definition Name
 171+ 6EDD             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6EDD 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6EDF             >                else
 171+ 6EDF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 171+ 6EDF             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6EDF             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6EDF             >
 171+ 6EDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6EDF 3C          >                db      60
 172+ 6EE0                              User_Def LP         , "LP"        , 62 // line printer (not used)
 172+ 6EE0             >                New_Def  LP, "LP", User_Ptr, is_normal
 172+ 6EE0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6EE0             >
 172+ 6EE0             >                // dummy db directives used to calculate length of namec
 172+ 6EE0 4C 50       >                db      "LP"
 172+ 6EE2             >len_NFA         defl    $ - temp_NFA
 172+ 6EE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6EE0             >
 172+ 6EE0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6EE1 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 172+ 6EE3             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6EE2 D0          >                db      {b $} | END_BIT     // msb as name end
 172+ 6EE3             >
 172+ 6EE3 D6 6E       >                dw      last_NFA            // Link to previous definition Name
 172+ 6EE5             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6EE5 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6EE7             >                else
 172+ 6EE7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 172+ 6EE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6EE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6EE7             >
 172+ 6EE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6EE7 3E          >                db      62
 173+ 6EE8                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 173+ 6EE8             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 173+ 6EE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6EE8             >
 173+ 6EE8             >                // dummy db directives used to calculate length of namec
 173+ 6EE8 50 4C 41 43 >                db      "PLACE"
 173+ 6EEC 45          >
 173+ 6EED             >len_NFA         defl    $ - temp_NFA
 173+ 6EED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6EE8             >
 173+ 6EE8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6EE9 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 173+ 6EED 45          >
 173+ 6EEE             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6EED C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 6EEE             >
 173+ 6EEE E0 6E       >                dw      last_NFA            // Link to previous definition Name
 173+ 6EF0             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6EF0 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6EF2             >                else
 173+ 6EF2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6EF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6EF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6EF2             >
 173+ 6EF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6EF2 40          >                db      64
 174+ 6EF3                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 174+ 6EF3             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 174+ 6EF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6EF3             >
 174+ 6EF3             >                // dummy db directives used to calculate length of namec
 174+ 6EF3 53 4F 55 52 >                db      "SOURCE-ID"
 174+ 6EF7 43 45 2D 49 >
 174+ 6EFB 44          >
 174+ 6EFC             >len_NFA         defl    $ - temp_NFA
 174+ 6EFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6EF3             >
 174+ 6EF3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6EF4 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 174+ 6EF8 43 45 2D 49 >
 174+ 6EFC 44          >
 174+ 6EFD             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6EFC C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6EFD             >
 174+ 6EFD E8 6E       >                dw      last_NFA            // Link to previous definition Name
 174+ 6EFF             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6EFF 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6F01             >                else
 174+ 6F01 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 6F01             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6F01             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6F01             >
 174+ 6F01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6F01 42          >                db      66
 175+ 6F02                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 175+ 6F02             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 175+ 6F02             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6F02             >
 175+ 6F02             >                // dummy db directives used to calculate length of namec
 175+ 6F02 53 50 41 4E >                db      "SPAN"
 175+ 6F06             >len_NFA         defl    $ - temp_NFA
 175+ 6F06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6F02             >
 175+ 6F02 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6F03 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 175+ 6F07             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6F06 CE          >                db      {b $} | END_BIT     // msb as name end
 175+ 6F07             >
 175+ 6F07 F3 6E       >                dw      last_NFA            // Link to previous definition Name
 175+ 6F09             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6F09 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6F0B             >                else
 175+ 6F0B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 6F0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6F0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6F0B             >
 175+ 6F0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6F0B 44          >                db      68
 176+ 6F0C                              User_Def HP         , "HP"        , 70 // heap-pointer address
 176+ 6F0C             >                New_Def  HP, "HP", User_Ptr, is_normal
 176+ 6F0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6F0C             >
 176+ 6F0C             >                // dummy db directives used to calculate length of namec
 176+ 6F0C 48 50       >                db      "HP"
 176+ 6F0E             >len_NFA         defl    $ - temp_NFA
 176+ 6F0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6F0C             >
 176+ 6F0C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6F0D 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 176+ 6F0F             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6F0E D0          >                db      {b $} | END_BIT     // msb as name end
 176+ 6F0F             >
 176+ 6F0F 02 6F       >                dw      last_NFA            // Link to previous definition Name
 176+ 6F11             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6F11 39 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6F13             >                else
 176+ 6F13 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 6F13             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6F13             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6F13             >
 176+ 6F13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6F13 46          >                db      70
 177+ 6F14
 178+ 6F14              //  ______________________________________________________________________
 179+ 6F14              //
 180+ 6F14              // here         -- a
 181+ 6F14                              Colon_Def HERE, "HERE", is_normal
 181+ 6F14             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 181+ 6F14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6F14             >
 181+ 6F14             >                // dummy db directives used to calculate length of namec
 181+ 6F14 48 45 52 45 >                db      "HERE"
 181+ 6F18             >len_NFA         defl    $ - temp_NFA
 181+ 6F18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6F14             >
 181+ 6F14 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6F15 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 181+ 6F19             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6F18 C5          >                db      {b $} | END_BIT     // msb as name end
 181+ 6F19             >
 181+ 6F19 0C 6F       >                dw      last_NFA            // Link to previous definition Name
 181+ 6F1B             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6F1B CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 181+ 6F1D             >                else
 181+ 6F1D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 181+ 6F1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6F1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6F1D             >
 181+ 6F1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6F1D 07 6E DD 6B                  dw      DP, FETCH               // dp @
 183+ 6F21 BD 69                        dw      EXIT                    // ;
 184+ 6F23
 185+ 6F23              //  ______________________________________________________________________
 186+ 6F23              //
 187+ 6F23              // allot        n --
 188+ 6F23                              Colon_Def ALLOT, "ALLOT", is_normal
 188+ 6F23             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 188+ 6F23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 6F23             >
 188+ 6F23             >                // dummy db directives used to calculate length of namec
 188+ 6F23 41 4C 4C 4F >                db      "ALLOT"
 188+ 6F27 54          >
 188+ 6F28             >len_NFA         defl    $ - temp_NFA
 188+ 6F28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 6F23             >
 188+ 6F23 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 6F24 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 188+ 6F28 54          >
 188+ 6F29             >                org     $-1                 // alter last byte of Name just above to set
 188+ 6F28 D4          >                db      {b $} | END_BIT     // msb as name end
 188+ 6F29             >
 188+ 6F29 14 6F       >                dw      last_NFA            // Link to previous definition Name
 188+ 6F2B             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6F2B CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 188+ 6F2D             >                else
 188+ 6F2D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 188+ 6F2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6F2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6F2D             >
 188+ 6F2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 189+ 6F2D 07 6E BA 6B                  dw      DP,  PLUSSTORE          // dp +!
 190+ 6F31 BD 69                        dw      EXIT                    // ;
 191+ 6F33
 192+ 6F33              //  ______________________________________________________________________
 193+ 6F33              //
 194+ 6F33              // comma        n --
 195+ 6F33                              Colon_Def COMMA, ",", is_normal
 195+ 6F33             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 195+ 6F33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 6F33             >
 195+ 6F33             >                // dummy db directives used to calculate length of namec
 195+ 6F33 2C          >                db      ","
 195+ 6F34             >len_NFA         defl    $ - temp_NFA
 195+ 6F34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 6F33             >
 195+ 6F33 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 6F34 2C          >                db      ","               // name string in 7-bit ascii, but
 195+ 6F35             >                org     $-1                 // alter last byte of Name just above to set
 195+ 6F34 AC          >                db      {b $} | END_BIT     // msb as name end
 195+ 6F35             >
 195+ 6F35 23 6F       >                dw      last_NFA            // Link to previous definition Name
 195+ 6F37             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 6F37 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 6F39             >                else
 195+ 6F39 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 6F39             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 6F39             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 6F39             >
 195+ 6F39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 6F39 1B 6F EA 6B                  dw      HERE, STORE             // here !
 197+ 6F3D 59 6D 2B 6F                  dw      TWO, ALLOT              // 2 allot
 198+ 6F41 BD 69                        dw      EXIT                    // ;
 199+ 6F43
 200+ 6F43              //  ______________________________________________________________________
 201+ 6F43              //
 202+ 6F43              // ccomma       c --
 203+ 6F43                              Colon_Def CCOMMA, "C,", is_normal
 203+ 6F43             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 203+ 6F43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 203+ 6F43             >
 203+ 6F43             >                // dummy db directives used to calculate length of namec
 203+ 6F43 43 2C       >                db      "C,"
 203+ 6F45             >len_NFA         defl    $ - temp_NFA
 203+ 6F45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 203+ 6F43             >
 203+ 6F43 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 203+ 6F44 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 203+ 6F46             >                org     $-1                 // alter last byte of Name just above to set
 203+ 6F45 AC          >                db      {b $} | END_BIT     // msb as name end
 203+ 6F46             >
 203+ 6F46 33 6F       >                dw      last_NFA            // Link to previous definition Name
 203+ 6F48             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 203+ 6F48 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 203+ 6F4A             >                else
 203+ 6F4A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 203+ 6F4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 203+ 6F4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 203+ 6F4A             >
 203+ 6F4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 204+ 6F4A 1B 6F 06 6C                  dw      HERE, CSTORE            // here c!
 205+ 6F4E 51 6D 2B 6F                  dw      ONE, ALLOT              // 1 allot
 206+ 6F52 BD 69                        dw      EXIT                    // ;
 207+ 6F54
 208+ 6F54              //  ______________________________________________________________________
 209+ 6F54              //
 210+ 6F54              // s->d         n -- d
 211+ 6F54              // converts a single precision integer in a double precision
 212+ 6F54                              New_Def S_TO_D, "S->D", is_code, is_normal
 212+ 6F54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 6F54             >
 212+ 6F54             >                // dummy db directives used to calculate length of namec
 212+ 6F54 53 2D 3E 44 >                db      "S->D"
 212+ 6F58             >len_NFA         defl    $ - temp_NFA
 212+ 6F58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 6F54             >
 212+ 6F54 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 6F55 53 2D 3E 44 >                db      "S->D"               // name string in 7-bit ascii, but
 212+ 6F59             >                org     $-1                 // alter last byte of Name just above to set
 212+ 6F58 C4          >                db      {b $} | END_BIT     // msb as name end
 212+ 6F59             >
 212+ 6F59 43 6F       >                dw      last_NFA            // Link to previous definition Name
 212+ 6F5B             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 6F5B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 212+ 6F5B             >                else
 212+ 6F5B 5D 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 212+ 6F5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 6F5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 6F5D             >
 212+ 6F5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 6F5D D1                           pop     de
 214+ 6F5E 21 00 00                     ld      hl, 0
 215+ 6F61 7A                           ld      a, d
 216+ 6F62 E6 80                        and     $80
 217+ 6F64 28 01                        jr      z, S_to_D_Skip
 218+ 6F66 2B                           dec     hl                  // $FFFF
 219+ 6F67              S_to_D_Skip:
 220+ 6F67 D5                           push    de
 221+ 6F68 E5                           push    hl
 222+ 6F69                              next
 222+ 6F69 DD E9       >                jp      (ix)
 223+ 6F6B
 224+ 6F6B              //  ______________________________________________________________________
 225+ 6F6B              //
 226+ 6F6B              // -            n1 n2 -- n3
 227+ 6F6B              // subtraction
 228+ 6F6B                              New_Def SUBTRACT, "-", is_code, is_normal
 228+ 6F6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 228+ 6F6B             >
 228+ 6F6B             >                // dummy db directives used to calculate length of namec
 228+ 6F6B 2D          >                db      "-"
 228+ 6F6C             >len_NFA         defl    $ - temp_NFA
 228+ 6F6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 228+ 6F6B             >
 228+ 6F6B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 228+ 6F6C 2D          >                db      "-"               // name string in 7-bit ascii, but
 228+ 6F6D             >                org     $-1                 // alter last byte of Name just above to set
 228+ 6F6C AD          >                db      {b $} | END_BIT     // msb as name end
 228+ 6F6D             >
 228+ 6F6D 54 6F       >                dw      last_NFA            // Link to previous definition Name
 228+ 6F6F             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 228+ 6F6F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 228+ 6F6F             >                else
 228+ 6F6F 71 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 228+ 6F71             >                endif           ; ok        // for other definitions it "points" the correct handler
 228+ 6F71             >                // Use of "; ok" to suppress "warning[fwdref]"
 228+ 6F71             >
 228+ 6F71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 229+ 6F71 D1                           pop     de
 230+ 6F72 E1                           pop     hl
 231+ 6F73 A7                           and     a
 232+ 6F74 ED 52                        sbc     hl, de
 233+ 6F76
 234+ 6F76                              psh1
 234+ 6F76 E5          >                push    hl
 234+ 6F77 DD E9       >                jp      (ix)
 235+ 6F79
 236+ 6F79              //  ______________________________________________________________________
 237+ 6F79              //
 238+ 6F79              // =            n1 n2 -- n3
 239+ 6F79              // equals
 240+ 6F79                              Colon_Def EQUALS, "=", is_normal
 240+ 6F79             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 240+ 6F79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 240+ 6F79             >
 240+ 6F79             >                // dummy db directives used to calculate length of namec
 240+ 6F79 3D          >                db      "="
 240+ 6F7A             >len_NFA         defl    $ - temp_NFA
 240+ 6F7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 240+ 6F79             >
 240+ 6F79 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 240+ 6F7A 3D          >                db      "="               // name string in 7-bit ascii, but
 240+ 6F7B             >                org     $-1                 // alter last byte of Name just above to set
 240+ 6F7A BD          >                db      {b $} | END_BIT     // msb as name end
 240+ 6F7B             >
 240+ 6F7B 6B 6F       >                dw      last_NFA            // Link to previous definition Name
 240+ 6F7D             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 240+ 6F7D CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 240+ 6F7F             >                else
 240+ 6F7F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 240+ 6F7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 240+ 6F7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 240+ 6F7F             >
 240+ 6F7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 241+ 6F7F 6F 6F 1B 6A                  dw      SUBTRACT, ZEQUAL        // - 0=
 242+ 6F83 BD 69                        dw      EXIT                    // ;
 243+ 6F85
 244+ 6F85              //  ______________________________________________________________________
 245+ 6F85              //
 246+ 6F85              // u<           u1 u2 -- u3
 247+ 6F85              // unsigned less-than
 248+ 6F85                              New_Def ULESS, "U<", is_code, is_normal
 248+ 6F85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 6F85             >
 248+ 6F85             >                // dummy db directives used to calculate length of namec
 248+ 6F85 55 3C       >                db      "U<"
 248+ 6F87             >len_NFA         defl    $ - temp_NFA
 248+ 6F87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 6F85             >
 248+ 6F85 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 6F86 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 248+ 6F88             >                org     $-1                 // alter last byte of Name just above to set
 248+ 6F87 BC          >                db      {b $} | END_BIT     // msb as name end
 248+ 6F88             >
 248+ 6F88 79 6F       >                dw      last_NFA            // Link to previous definition Name
 248+ 6F8A             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 6F8A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 248+ 6F8A             >                else
 248+ 6F8A 8C 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 248+ 6F8C             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 6F8C             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 6F8C             >
 248+ 6F8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 6F8C D1                           pop     de
 250+ 6F8D E1                           pop     hl
 251+ 6F8E A7                           and     a
 252+ 6F8F ED 52                        sbc     hl, de
 253+ 6F91 21 01 00                     ld      hl, 1
 254+ 6F94 38 01                        jr      c, ULess_Skip
 255+ 6F96 2D                               dec     l
 256+ 6F97              ULess_Skip:
 257+ 6F97
 258+ 6F97                              psh1
 258+ 6F97 E5          >                push    hl
 258+ 6F98 DD E9       >                jp      (ix)
 259+ 6F9A
 260+ 6F9A              //  ______________________________________________________________________
 261+ 6F9A              //
 262+ 6F9A              // <           n1 n2 -- n3
 263+ 6F9A              // less-than
 264+ 6F9A                              New_Def LESS, "<", is_code, is_normal
 264+ 6F9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 264+ 6F9A             >
 264+ 6F9A             >                // dummy db directives used to calculate length of namec
 264+ 6F9A 3C          >                db      "<"
 264+ 6F9B             >len_NFA         defl    $ - temp_NFA
 264+ 6F9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 264+ 6F9A             >
 264+ 6F9A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 264+ 6F9B 3C          >                db      "<"               // name string in 7-bit ascii, but
 264+ 6F9C             >                org     $-1                 // alter last byte of Name just above to set
 264+ 6F9B BC          >                db      {b $} | END_BIT     // msb as name end
 264+ 6F9C             >
 264+ 6F9C 85 6F       >                dw      last_NFA            // Link to previous definition Name
 264+ 6F9E             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 264+ 6F9E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 264+ 6F9E             >                else
 264+ 6F9E A0 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 264+ 6FA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 264+ 6FA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 264+ 6FA0             >
 264+ 6FA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 265+ 6FA0 D1                           pop     de
 266+ 6FA1 E1                           pop     hl
 267+ 6FA2 7C                           ld      a, h
 268+ 6FA3 EE 80                        xor     $80
 269+ 6FA5 67                           ld      h, a
 270+ 6FA6 7A                           ld      a, d
 271+ 6FA7 EE 80                        xor     $80
 272+ 6FA9 57                           ld      d, a
 273+ 6FAA A7                           and     a
 274+ 6FAB ED 52                        sbc     hl, de
 275+ 6FAD 21 01 00                     ld      hl, 1
 276+ 6FB0 38 01                        jr      c, Less_Skip
 277+ 6FB2 2D                               dec     l
 278+ 6FB3              Less_Skip:
 279+ 6FB3
 280+ 6FB3                              psh1
 280+ 6FB3 E5          >                push    hl
 280+ 6FB4 DD E9       >                jp      (ix)
 281+ 6FB6
 282+ 6FB6              //  ______________________________________________________________________
 283+ 6FB6              //
 284+ 6FB6              // >            n1 n2 -- n3
 285+ 6FB6              // greater than
 286+ 6FB6                              Colon_Def GREATER, ">", is_normal
 286+ 6FB6             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 286+ 6FB6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 286+ 6FB6             >
 286+ 6FB6             >                // dummy db directives used to calculate length of namec
 286+ 6FB6 3E          >                db      ">"
 286+ 6FB7             >len_NFA         defl    $ - temp_NFA
 286+ 6FB7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 286+ 6FB6             >
 286+ 6FB6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 286+ 6FB7 3E          >                db      ">"               // name string in 7-bit ascii, but
 286+ 6FB8             >                org     $-1                 // alter last byte of Name just above to set
 286+ 6FB7 BE          >                db      {b $} | END_BIT     // msb as name end
 286+ 6FB8             >
 286+ 6FB8 9A 6F       >                dw      last_NFA            // Link to previous definition Name
 286+ 6FBA             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 286+ 6FBA CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 286+ 6FBC             >                else
 286+ 6FBC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 286+ 6FBC             >                endif           ; ok        // for other definitions it "points" the correct handler
 286+ 6FBC             >                // Use of "; ok" to suppress "warning[fwdref]"
 286+ 6FBC             >
 286+ 6FBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 287+ 6FBC 3D 6B 9E 6F                  dw      SWAP, LESS              // swap <
 288+ 6FC0 BD 69                        dw      EXIT                    // ;
 289+ 6FC2              //  ______________________________________________________________________
 290+ 6FC2              //
 291+ 6FC2              // min          n1 n2 -- n3
 292+ 6FC2              // minimum between n1 and n2
 293+ 6FC2                              Colon_Def MIN, "MIN" , is_normal
 293+ 6FC2             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 293+ 6FC2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 6FC2             >
 293+ 6FC2             >                // dummy db directives used to calculate length of namec
 293+ 6FC2 4D 49 4E    >                db      "MIN"
 293+ 6FC5             >len_NFA         defl    $ - temp_NFA
 293+ 6FC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 6FC2             >
 293+ 6FC2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 6FC3 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 293+ 6FC6             >                org     $-1                 // alter last byte of Name just above to set
 293+ 6FC5 CE          >                db      {b $} | END_BIT     // msb as name end
 293+ 6FC6             >
 293+ 6FC6 B6 6F       >                dw      last_NFA            // Link to previous definition Name
 293+ 6FC8             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 6FC8 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 6FCA             >                else
 293+ 6FCA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 6FCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 6FCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 6FCA             >
 293+ 6FCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 6FCA AB 6B                        dw      TWO_DUP                 // 2dup
 295+ 6FCC BA 6F                        dw      GREATER                 // >
 296+ 6FCE 7D 64                        dw      ZBRANCH
 297+ 6FD0 04 00                        dw      Min_Skip - $   // if
 298+ 6FD2 3D 6B                        dw          SWAP                //      swap
 299+ 6FD4              Min_Skip:                                       // endif
 300+ 6FD4 15 6B                        dw      DROP                    // drop
 301+ 6FD6 BD 69                        dw      EXIT                    // ;
 302+ 6FD8
 303+ 6FD8              //  ______________________________________________________________________
 304+ 6FD8              //
 305+ 6FD8              // max          n1 n2 -- n3
 306+ 6FD8              // maximum between n1 and n2
 307+ 6FD8                              Colon_Def MAX, "MAX", is_normal
 307+ 6FD8             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 307+ 6FD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 307+ 6FD8             >
 307+ 6FD8             >                // dummy db directives used to calculate length of namec
 307+ 6FD8 4D 41 58    >                db      "MAX"
 307+ 6FDB             >len_NFA         defl    $ - temp_NFA
 307+ 6FDB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 307+ 6FD8             >
 307+ 6FD8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 307+ 6FD9 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 307+ 6FDC             >                org     $-1                 // alter last byte of Name just above to set
 307+ 6FDB D8          >                db      {b $} | END_BIT     // msb as name end
 307+ 6FDC             >
 307+ 6FDC C2 6F       >                dw      last_NFA            // Link to previous definition Name
 307+ 6FDE             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 307+ 6FDE CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 307+ 6FE0             >                else
 307+ 6FE0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 307+ 6FE0             >                endif           ; ok        // for other definitions it "points" the correct handler
 307+ 6FE0             >                // Use of "; ok" to suppress "warning[fwdref]"
 307+ 6FE0             >
 307+ 6FE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 308+ 6FE0 AB 6B                        dw      TWO_DUP                 // 2dup
 309+ 6FE2 9E 6F                        dw      LESS                    // <
 310+ 6FE4 7D 64                        dw      ZBRANCH
 311+ 6FE6 04 00                        dw      Max_Skip - $   // if
 312+ 6FE8 3D 6B                        dw          SWAP                //      swap
 313+ 6FEA              Max_Skip:                                       // endif
 314+ 6FEA 15 6B                        dw      DROP                    // drop
 315+ 6FEC BD 69                        dw      EXIT                    // ;
 316+ 6FEE
 317+ 6FEE              //  ______________________________________________________________________
 318+ 6FEE              //
 319+ 6FEE              // ?dup         n -- 0 | n n
 320+ 6FEE              // duplicate if not zero
 321+ 6FEE                              New_Def QDUP, "?DUP", is_code, is_normal
 321+ 6FEE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 6FEE             >
 321+ 6FEE             >                // dummy db directives used to calculate length of namec
 321+ 6FEE 3F 44 55 50 >                db      "?DUP"
 321+ 6FF2             >len_NFA         defl    $ - temp_NFA
 321+ 6FF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 6FEE             >
 321+ 6FEE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 6FEF 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 321+ 6FF3             >                org     $-1                 // alter last byte of Name just above to set
 321+ 6FF2 D0          >                db      {b $} | END_BIT     // msb as name end
 321+ 6FF3             >
 321+ 6FF3 D8 6F       >                dw      last_NFA            // Link to previous definition Name
 321+ 6FF5             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 6FF5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 321+ 6FF5             >                else
 321+ 6FF5 F7 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 321+ 6FF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 6FF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 6FF7             >
 321+ 6FF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 6FF7              QDup_Ptr:
 323+ 6FF7 E1                           pop     hl
 324+ 6FF8 7C                           ld      a, h
 325+ 6FF9 B5                           or      l
 326+ 6FFA 28 01                        jr      z, QDup_Skip
 327+ 6FFC E5                               push    hl
 328+ 6FFD              QDup_Skip:
 329+ 6FFD                              psh1
 329+ 6FFD E5          >                push    hl
 329+ 6FFE DD E9       >                jp      (ix)
 330+ 7000
 331+ 7000              //  ______________________________________________________________________
 332+ 7000              //
 333+ 7000              // -dup         n -- 0 | n n
 334+ 7000              // duplicate if not zero
 335+ 7000                              New_Def LDUP, "-DUP", QDup_Ptr, is_normal
 335+ 7000             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 335+ 7000             >
 335+ 7000             >                // dummy db directives used to calculate length of namec
 335+ 7000 2D 44 55 50 >                db      "-DUP"
 335+ 7004             >len_NFA         defl    $ - temp_NFA
 335+ 7004             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 335+ 7000             >
 335+ 7000 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 335+ 7001 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 335+ 7005             >                org     $-1                 // alter last byte of Name just above to set
 335+ 7004 D0          >                db      {b $} | END_BIT     // msb as name end
 335+ 7005             >
 335+ 7005 EE 6F       >                dw      last_NFA            // Link to previous definition Name
 335+ 7007             >LDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 335+ 7007 F7 6F       >                dw      QDup_Ptr ; ok        // for primitive definitions  actual code
 335+ 7009             >                else
 335+ 7009 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 335+ 7009             >                endif           ; ok        // for other definitions it "points" the correct handler
 335+ 7009             >                // Use of "; ok" to suppress "warning[fwdref]"
 335+ 7009             >
 335+ 7009             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 336+ 7009
 337+ 7009              //  ______________________________________________________________________
 338+ 7009              //
 339+ 7009              // emit         c --
 340+ 7009                              Colon_Def EMIT, "EMIT", is_normal
 340+ 7009             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 340+ 7009             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 340+ 7009             >
 340+ 7009             >                // dummy db directives used to calculate length of namec
 340+ 7009 45 4D 49 54 >                db      "EMIT"
 340+ 700D             >len_NFA         defl    $ - temp_NFA
 340+ 700D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 340+ 7009             >
 340+ 7009 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 340+ 700A 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 340+ 700E             >                org     $-1                 // alter last byte of Name just above to set
 340+ 700D D4          >                db      {b $} | END_BIT     // msb as name end
 340+ 700E             >
 340+ 700E 00 70       >                dw      last_NFA            // Link to previous definition Name
 340+ 7010             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 340+ 7010 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 340+ 7012             >                else
 340+ 7012 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 340+ 7012             >                endif           ; ok        // for other definitions it "points" the correct handler
 340+ 7012             >                // Use of "; ok" to suppress "warning[fwdref]"
 340+ 7012             >
 340+ 7012             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 341+ 7012 B9 66                        dw      C_EMIT                      // (?emit)
 342+ 7014 F5 6F                        dw      QDUP                        // ?dup
 343+ 7016                                                                  // if
 344+ 7016 7D 64                        dw      ZBRANCH
 345+ 7018 0A 00                        dw      Emit_Skip - $
 346+ 701A 85 66                        dw          EMITC                   //      emitc
 347+ 701C 51 6D                        dw          ONE                     //      1
 348+ 701E 5A 6E BA 6B                  dw          OUT, PLUSSTORE        //      out +!
 349+ 7022              Emit_Skip:                                          // endif
 350+ 7022 BD 69                        dw      EXIT                        // ;
 351+ 7024
 352+ 7024              //  ______________________________________________________________________
 353+ 7024              //
 354+ 7024              // space        --
 355+ 7024                              Colon_Def SPACE, "SPACE", is_normal
 355+ 7024             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 355+ 7024             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 7024             >
 355+ 7024             >                // dummy db directives used to calculate length of namec
 355+ 7024 53 50 41 43 >                db      "SPACE"
 355+ 7028 45          >
 355+ 7029             >len_NFA         defl    $ - temp_NFA
 355+ 7029             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 7024             >
 355+ 7024 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 7025 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 355+ 7029 45          >
 355+ 702A             >                org     $-1                 // alter last byte of Name just above to set
 355+ 7029 C5          >                db      {b $} | END_BIT     // msb as name end
 355+ 702A             >
 355+ 702A 09 70       >                dw      last_NFA            // Link to previous definition Name
 355+ 702C             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 702C CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 355+ 702E             >                else
 355+ 702E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 355+ 702E             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 702E             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 702E             >
 355+ 702E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 702E 73 6D 10 70                  dw      BL, EMIT                // bl emit
 357+ 7032 BD 69                        dw      EXIT                    // ;
 358+ 7034
 359+ 7034              //  ______________________________________________________________________
 360+ 7034              //
 361+ 7034              // traverse     a n -- a
 362+ 7034              // A dictionary entry is structured as follows
 363+ 7034              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 364+ 7034              //      +1   word name, last character is toggled with $80
 365+ 7034              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 366+ 7034              // CFA: +3+n routine address. Colon definitions here have pointer to code
 367+ 7034              // PFA: +5+n "is_code", definitions have no PFA.
 368+ 7034              //
 369+ 7034                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 369+ 7034             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 369+ 7034             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ 7034             >
 369+ 7034             >                // dummy db directives used to calculate length of namec
 369+ 7034 54 52 41 56 >                db      "TRAVERSE"
 369+ 7038 45 52 53 45 >
 369+ 703C             >len_NFA         defl    $ - temp_NFA
 369+ 703C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ 7034             >
 369+ 7034 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ 7035 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 369+ 7039 45 52 53 45 >
 369+ 703D             >                org     $-1                 // alter last byte of Name just above to set
 369+ 703C C5          >                db      {b $} | END_BIT     // msb as name end
 369+ 703D             >
 369+ 703D 24 70       >                dw      last_NFA            // Link to previous definition Name
 369+ 703F             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 703F CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 369+ 7041             >                else
 369+ 7041 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 369+ 7041             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 7041             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 7041             >
 369+ 7041             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 7041 3D 6B                        dw      SWAP                    // swap
 371+ 7043              Traverse_Begin:                                 // begin
 372+ 7043 05 6B 5E 6A                  dw          OVER, PLUS          //      over +
 373+ 7047 43 64 7F 00                  dw          LIT, 127            //      127
 374+ 704B 05 6B F8 6B                  dw          OVER, CFETCH        //      over @
 375+ 704F 9E 6F                        dw          LESS                //      <
 376+ 7051                                                              // until
 377+ 7051 7D 64                        dw      ZBRANCH
 378+ 7053 F0 FF                        dw      Traverse_Begin - $
 379+ 7055 20 6B                        dw      NIP                     //  nip
 380+ 7057 BD 69                        dw      EXIT                    //  ;
 381+ 7059
 382+ 7059              //  ______________________________________________________________________
 383+ 7059              //
 384+ 7059              // latest       -- nfa
 385+ 7059                              Colon_Def LATEST, "LATEST", is_normal
 385+ 7059             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 385+ 7059             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7059             >
 385+ 7059             >                // dummy db directives used to calculate length of namec
 385+ 7059 4C 41 54 45 >                db      "LATEST"
 385+ 705D 53 54       >
 385+ 705F             >len_NFA         defl    $ - temp_NFA
 385+ 705F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7059             >
 385+ 7059 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 705A 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 385+ 705E 53 54       >
 385+ 7060             >                org     $-1                 // alter last byte of Name just above to set
 385+ 705F D4          >                db      {b $} | END_BIT     // msb as name end
 385+ 7060             >
 385+ 7060 34 70       >                dw      last_NFA            // Link to previous definition Name
 385+ 7062             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7062 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7064             >                else
 385+ 7064 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 385+ 7064             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7064             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7064             >
 385+ 7064             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7064 89 6E                        dw      CURRENT                 // current
 387+ 7066 DD 6B DD 6B                  dw      FETCH, FETCH            // @ @
 388+ 706A BD 69                        dw      EXIT                    // ;
 389+ 706C
 390+ 706C              //  ______________________________________________________________________
 391+ 706C              //
 392+ 706C              // lfa          pfa -- lfa
 393+ 706C                              Colon_Def LFA, "LFA", is_normal
 393+ 706C             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 393+ 706C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 706C             >
 393+ 706C             >                // dummy db directives used to calculate length of namec
 393+ 706C 4C 46 41    >                db      "LFA"
 393+ 706F             >len_NFA         defl    $ - temp_NFA
 393+ 706F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 706C             >
 393+ 706C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 706D 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 393+ 7070             >                org     $-1                 // alter last byte of Name just above to set
 393+ 706F C1          >                db      {b $} | END_BIT     // msb as name end
 393+ 7070             >
 393+ 7070 59 70       >                dw      last_NFA            // Link to previous definition Name
 393+ 7072             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7072 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7074             >                else
 393+ 7074 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 7074             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7074             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7074             >
 393+ 7074             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7074 B9 6A                        dw      CELL_MINUS              // cell-
 395+ 7076 B9 6A                        dw      CELL_MINUS              // cell-
 396+ 7078 BD 69                        dw      EXIT                    // ;
 397+ 707A
 398+ 707A              //  ______________________________________________________________________
 399+ 707A              //
 400+ 707A              // cfa          pfa -- cfa
 401+ 707A                              Colon_Def CFA, "CFA", is_normal
 401+ 707A             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 401+ 707A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 401+ 707A             >
 401+ 707A             >                // dummy db directives used to calculate length of namec
 401+ 707A 43 46 41    >                db      "CFA"
 401+ 707D             >len_NFA         defl    $ - temp_NFA
 401+ 707D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 401+ 707A             >
 401+ 707A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 401+ 707B 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 401+ 707E             >                org     $-1                 // alter last byte of Name just above to set
 401+ 707D C1          >                db      {b $} | END_BIT     // msb as name end
 401+ 707E             >
 401+ 707E 6C 70       >                dw      last_NFA            // Link to previous definition Name
 401+ 7080             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 401+ 7080 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 401+ 7082             >                else
 401+ 7082 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 401+ 7082             >                endif           ; ok        // for other definitions it "points" the correct handler
 401+ 7082             >                // Use of "; ok" to suppress "warning[fwdref]"
 401+ 7082             >
 401+ 7082             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 402+ 7082 B9 6A                        dw      CELL_MINUS              // cell-
 403+ 7084 BD 69                        dw      EXIT                    // ;
 404+ 7086
 405+ 7086              //  ______________________________________________________________________
 406+ 7086              //
 407+ 7086              // nfa          pfa -- nfa
 408+ 7086                              Colon_Def NFA, "NFA", is_normal
 408+ 7086             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 408+ 7086             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 408+ 7086             >
 408+ 7086             >                // dummy db directives used to calculate length of namec
 408+ 7086 4E 46 41    >                db      "NFA"
 408+ 7089             >len_NFA         defl    $ - temp_NFA
 408+ 7089             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 408+ 7086             >
 408+ 7086 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 408+ 7087 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 408+ 708A             >                org     $-1                 // alter last byte of Name just above to set
 408+ 7089 C1          >                db      {b $} | END_BIT     // msb as name end
 408+ 708A             >
 408+ 708A 7A 70       >                dw      last_NFA            // Link to previous definition Name
 408+ 708C             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 408+ 708C CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 408+ 708E             >                else
 408+ 708E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 408+ 708E             >                endif           ; ok        // for other definitions it "points" the correct handler
 408+ 708E             >                // Use of "; ok" to suppress "warning[fwdref]"
 408+ 708E             >
 408+ 708E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 409+ 708E 43 64 05 00                  dw      LIT, 5                  // 5
 410+ 7092 6F 6F                        dw      SUBTRACT                // -
 411+ 7094 6A 6D                        dw      NEG_ONE                 // -1
 412+ 7096 3F 70                        dw      TRAVERSE                // traverse
 413+ 7098 BD 69                        dw      EXIT                    // ;
 414+ 709A
 415+ 709A              //  ______________________________________________________________________
 416+ 709A              //
 417+ 709A              // pfa          nfa -- pfa
 418+ 709A                              Colon_Def PFA, "PFA", is_normal
 418+ 709A             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 418+ 709A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 709A             >
 418+ 709A             >                // dummy db directives used to calculate length of namec
 418+ 709A 50 46 41    >                db      "PFA"
 418+ 709D             >len_NFA         defl    $ - temp_NFA
 418+ 709D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 709A             >
 418+ 709A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 709B 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 418+ 709E             >                org     $-1                 // alter last byte of Name just above to set
 418+ 709D C1          >                db      {b $} | END_BIT     // msb as name end
 418+ 709E             >
 418+ 709E 86 70       >                dw      last_NFA            // Link to previous definition Name
 418+ 70A0             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 70A0 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 70A2             >                else
 418+ 70A2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 70A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 70A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 70A2             >
 418+ 70A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 70A2 51 6D                        dw      ONE                     // 1
 420+ 70A4 3F 70                        dw      TRAVERSE                // traverse
 421+ 70A6 43 64 05 00                  dw      LIT, 5                  // 6
 422+ 70AA 5E 6A                        dw      PLUS                    // +
 423+ 70AC BD 69                        dw      EXIT                    // ;
 424+ 70AE
 425+ 70AE              //  ______________________________________________________________________
 426+ 70AE              //
 427+ 70AE              // >body        cfa -- pfa
 428+ 70AE                              Colon_Def TO_BODY, ">BODY", is_normal
 428+ 70AE             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 428+ 70AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 70AE             >
 428+ 70AE             >                // dummy db directives used to calculate length of namec
 428+ 70AE 3E 42 4F 44 >                db      ">BODY"
 428+ 70B2 59          >
 428+ 70B3             >len_NFA         defl    $ - temp_NFA
 428+ 70B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 70AE             >
 428+ 70AE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 70AF 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 428+ 70B3 59          >
 428+ 70B4             >                org     $-1                 // alter last byte of Name just above to set
 428+ 70B3 D9          >                db      {b $} | END_BIT     // msb as name end
 428+ 70B4             >
 428+ 70B4 9A 70       >                dw      last_NFA            // Link to previous definition Name
 428+ 70B6             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 70B6 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 70B8             >                else
 428+ 70B8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 70B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 70B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 70B8             >
 428+ 70B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 70B8 AF 6A                        dw      CELL_PLUS               // cell+
 430+ 70BA BD 69                        dw      EXIT                    // ;
 431+ 70BC
 432+ 70BC              //  ______________________________________________________________________
 433+ 70BC              //
 434+ 70BC              // <name        cfa -- nfa
 435+ 70BC                              Colon_Def TO_NAME, "<NAME", is_normal
 435+ 70BC             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 435+ 70BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 435+ 70BC             >
 435+ 70BC             >                // dummy db directives used to calculate length of namec
 435+ 70BC 3C 4E 41 4D >                db      "<NAME"
 435+ 70C0 45          >
 435+ 70C1             >len_NFA         defl    $ - temp_NFA
 435+ 70C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 435+ 70BC             >
 435+ 70BC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 435+ 70BD 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 435+ 70C1 45          >
 435+ 70C2             >                org     $-1                 // alter last byte of Name just above to set
 435+ 70C1 C5          >                db      {b $} | END_BIT     // msb as name end
 435+ 70C2             >
 435+ 70C2 AE 70       >                dw      last_NFA            // Link to previous definition Name
 435+ 70C4             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 435+ 70C4 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 435+ 70C6             >                else
 435+ 70C6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 435+ 70C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 435+ 70C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 435+ 70C6             >
 435+ 70C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 436+ 70C6 B6 70                        dw      TO_BODY                 // >body
 437+ 70C8 8C 70                        dw      NFA                     // nfa
 438+ 70CA BD 69                        dw      EXIT                    // ;
 439+ 70CC
 440+ 70CC              //  ______________________________________________________________________
 441+ 70CC              //
 442+ 70CC              // !csp         --
 443+ 70CC              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 444+ 70CC                              Colon_Def STORE_CSP, "!CSP", is_normal
 444+ 70CC             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 444+ 70CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 444+ 70CC             >
 444+ 70CC             >                // dummy db directives used to calculate length of namec
 444+ 70CC 21 43 53 50 >                db      "!CSP"
 444+ 70D0             >len_NFA         defl    $ - temp_NFA
 444+ 70D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 444+ 70CC             >
 444+ 70CC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 444+ 70CD 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 444+ 70D1             >                org     $-1                 // alter last byte of Name just above to set
 444+ 70D0 D0          >                db      {b $} | END_BIT     // msb as name end
 444+ 70D1             >
 444+ 70D1 BC 70       >                dw      last_NFA            // Link to previous definition Name
 444+ 70D3             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 444+ 70D3 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 444+ 70D5             >                else
 444+ 70D5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 444+ 70D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 444+ 70D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 444+ 70D5             >
 444+ 70D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 445+ 70D5 87 69                        dw      SPFETCH                 // sp@
 446+ 70D7 B9 6E EA 6B                  dw      CSP, STORE              // csp !
 447+ 70DB BD 69                        dw      EXIT                    // ;
 448+ 70DD
 449+ 70DD              //  ______________________________________________________________________
 450+ 70DD              //
 451+ 70DD              // ?error       f n --
 452+ 70DD              // rase error n if flag f it true
 453+ 70DD                              Colon_Def QERROR, "?ERROR", is_normal
 453+ 70DD             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 453+ 70DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 453+ 70DD             >
 453+ 70DD             >                // dummy db directives used to calculate length of namec
 453+ 70DD 3F 45 52 52 >                db      "?ERROR"
 453+ 70E1 4F 52       >
 453+ 70E3             >len_NFA         defl    $ - temp_NFA
 453+ 70E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 453+ 70DD             >
 453+ 70DD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 453+ 70DE 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 453+ 70E2 4F 52       >
 453+ 70E4             >                org     $-1                 // alter last byte of Name just above to set
 453+ 70E3 D2          >                db      {b $} | END_BIT     // msb as name end
 453+ 70E4             >
 453+ 70E4 CC 70       >                dw      last_NFA            // Link to previous definition Name
 453+ 70E6             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 453+ 70E6 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 453+ 70E8             >                else
 453+ 70E8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 453+ 70E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 453+ 70E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 453+ 70E8             >
 453+ 70E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 454+ 70E8 3D 6B                        dw      SWAP                    // swap
 455+ 70EA                                                              // if
 456+ 70EA 7D 64                        dw      ZBRANCH
 457+ 70EC 08 00                        dw      QError_Else - $
 458+ 70EE F8 75                        dw          ERROR               //      error  ( is a forward-ref )
 459+ 70F0                                                              // else
 460+ 70F0 66 64                        dw      BRANCH
 461+ 70F2 04 00                        dw      QError_Endif - $
 462+ 70F4              QError_Else:
 463+ 70F4 15 6B                        dw          DROP                //      drop
 464+ 70F6              QError_Endif:                                   // endif
 465+ 70F6 BD 69                        dw      EXIT                    // ;
 466+ 70F8
 467+ 70F8              //  ______________________________________________________________________
 468+ 70F8              //
 469+ 70F8              // ?comp       --
 470+ 70F8              // raise msg #17 if not compiling
 471+ 70F8                              Colon_Def QCOMP, "?COMP", is_normal
 471+ 70F8             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 471+ 70F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 471+ 70F8             >
 471+ 70F8             >                // dummy db directives used to calculate length of namec
 471+ 70F8 3F 43 4F 4D >                db      "?COMP"
 471+ 70FC 50          >
 471+ 70FD             >len_NFA         defl    $ - temp_NFA
 471+ 70FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 471+ 70F8             >
 471+ 70F8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 471+ 70F9 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 471+ 70FD 50          >
 471+ 70FE             >                org     $-1                 // alter last byte of Name just above to set
 471+ 70FD D0          >                db      {b $} | END_BIT     // msb as name end
 471+ 70FE             >
 471+ 70FE DD 70       >                dw      last_NFA            // Link to previous definition Name
 471+ 7100             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 471+ 7100 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 471+ 7102             >                else
 471+ 7102 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 471+ 7102             >                endif           ; ok        // for other definitions it "points" the correct handler
 471+ 7102             >                // Use of "; ok" to suppress "warning[fwdref]"
 471+ 7102             >
 471+ 7102             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 472+ 7102 94 6E DD 6B                  dw      STATE, FETCH            // state @
 473+ 7106 1B 6A                        dw      ZEQUAL                  // 0=
 474+ 7108 43 64 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 475+ 710C E6 70                        dw      QERROR                  // ?error
 476+ 710E BD 69                        dw      EXIT                    // ;
 477+ 7110
 478+ 7110              //  ______________________________________________________________________
 479+ 7110              //
 480+ 7110              // ?exec       --
 481+ 7110              // raise msg #18 if compiling
 482+ 7110                              Colon_Def QEXEC, "?EXEC", is_normal
 482+ 7110             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 482+ 7110             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 482+ 7110             >
 482+ 7110             >                // dummy db directives used to calculate length of namec
 482+ 7110 3F 45 58 45 >                db      "?EXEC"
 482+ 7114 43          >
 482+ 7115             >len_NFA         defl    $ - temp_NFA
 482+ 7115             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 482+ 7110             >
 482+ 7110 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 482+ 7111 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 482+ 7115 43          >
 482+ 7116             >                org     $-1                 // alter last byte of Name just above to set
 482+ 7115 C3          >                db      {b $} | END_BIT     // msb as name end
 482+ 7116             >
 482+ 7116 F8 70       >                dw      last_NFA            // Link to previous definition Name
 482+ 7118             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 482+ 7118 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 482+ 711A             >                else
 482+ 711A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 482+ 711A             >                endif           ; ok        // for other definitions it "points" the correct handler
 482+ 711A             >                // Use of "; ok" to suppress "warning[fwdref]"
 482+ 711A             >
 482+ 711A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 483+ 711A 94 6E DD 6B                  dw      STATE, FETCH            // state @
 484+ 711E 43 64 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 485+ 7122 E6 70                        dw      QERROR                  // ?error
 486+ 7124 BD 69                        dw      EXIT                    // ;
 487+ 7126
 488+ 7126              //  ______________________________________________________________________
 489+ 7126              //
 490+ 7126              // ?pairs       n1 n2 --
 491+ 7126              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 492+ 7126                              Colon_Def QPAIRS, "?PAIRS", is_normal
 492+ 7126             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 492+ 7126             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ 7126             >
 492+ 7126             >                // dummy db directives used to calculate length of namec
 492+ 7126 3F 50 41 49 >                db      "?PAIRS"
 492+ 712A 52 53       >
 492+ 712C             >len_NFA         defl    $ - temp_NFA
 492+ 712C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ 7126             >
 492+ 7126 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ 7127 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 492+ 712B 52 53       >
 492+ 712D             >                org     $-1                 // alter last byte of Name just above to set
 492+ 712C D3          >                db      {b $} | END_BIT     // msb as name end
 492+ 712D             >
 492+ 712D 10 71       >                dw      last_NFA            // Link to previous definition Name
 492+ 712F             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 712F CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 492+ 7131             >                else
 492+ 7131 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 492+ 7131             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 7131             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 7131             >
 492+ 7131             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 7131 6F 6F                        dw      SUBTRACT                // -
 494+ 7133 43 64 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 495+ 7137 E6 70                        dw      QERROR                  // ?error
 496+ 7139 BD 69                        dw      EXIT                    // ;
 497+ 713B
 498+ 713B              //  ______________________________________________________________________
 499+ 713B              //
 500+ 713B              // ?csp       --
 501+ 713B              // raise msg #20 if surrent SP in not what previously saved in CSP.
 502+ 713B              // Compiler relies on that for  syntax checking of structures
 503+ 713B                              Colon_Def QCSP, "?CSP", is_normal
 503+ 713B             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 503+ 713B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ 713B             >
 503+ 713B             >                // dummy db directives used to calculate length of namec
 503+ 713B 3F 43 53 50 >                db      "?CSP"
 503+ 713F             >len_NFA         defl    $ - temp_NFA
 503+ 713F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ 713B             >
 503+ 713B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ 713C 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 503+ 7140             >                org     $-1                 // alter last byte of Name just above to set
 503+ 713F D0          >                db      {b $} | END_BIT     // msb as name end
 503+ 7140             >
 503+ 7140 26 71       >                dw      last_NFA            // Link to previous definition Name
 503+ 7142             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 7142 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 7144             >                else
 503+ 7144 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 503+ 7144             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 7144             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 7144             >
 503+ 7144             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 7144 87 69                        dw      SPFETCH                 // sp@
 505+ 7146 B9 6E DD 6B                  dw      CSP, FETCH              // csp @
 506+ 714A 6F 6F                        dw      SUBTRACT                // -
 507+ 714C 43 64 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 508+ 7150 E6 70                        dw      QERROR                  // ?error
 509+ 7152 BD 69                        dw      EXIT                    // ;
 510+ 7154
 511+ 7154              //  ______________________________________________________________________
 512+ 7154              //
 513+ 7154              // ?loading      --
 514+ 7154              // raise msg #22 if not loading
 515+ 7154                              Colon_Def QLOADING, "?LOADING", is_normal
 515+ 7154             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 515+ 7154             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7154             >
 515+ 7154             >                // dummy db directives used to calculate length of namec
 515+ 7154 3F 4C 4F 41 >                db      "?LOADING"
 515+ 7158 44 49 4E 47 >
 515+ 715C             >len_NFA         defl    $ - temp_NFA
 515+ 715C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7154             >
 515+ 7154 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7155 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 515+ 7159 44 49 4E 47 >
 515+ 715D             >                org     $-1                 // alter last byte of Name just above to set
 515+ 715C C7          >                db      {b $} | END_BIT     // msb as name end
 515+ 715D             >
 515+ 715D 3B 71       >                dw      last_NFA            // Link to previous definition Name
 515+ 715F             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 715F CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 515+ 7161             >                else
 515+ 7161 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 515+ 7161             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7161             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7161             >
 515+ 7161             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 516+ 7161 48 6E DD 6B                  dw      BLK, FETCH              // blk @
 517+ 7165 1B 6A                        dw      ZEQUAL                  // 0=
 518+ 7167 43 64 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 519+ 716B E6 70                        dw      QERROR                  // ?error
 520+ 716D BD 69                        dw      EXIT                    // ;
 521+ 716F
 522+ 716F              //  ______________________________________________________________________
 523+ 716F              //
 524+ 716F              // compile      --
 525+ 716F              // compiles the following word
 526+ 716F                              Colon_Def COMPILE, "COMPILE", is_normal
 526+ 716F             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 526+ 716F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 526+ 716F             >
 526+ 716F             >                // dummy db directives used to calculate length of namec
 526+ 716F 43 4F 4D 50 >                db      "COMPILE"
 526+ 7173 49 4C 45    >
 526+ 7176             >len_NFA         defl    $ - temp_NFA
 526+ 7176             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 526+ 716F             >
 526+ 716F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 526+ 7170 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 526+ 7174 49 4C 45    >
 526+ 7177             >                org     $-1                 // alter last byte of Name just above to set
 526+ 7176 C5          >                db      {b $} | END_BIT     // msb as name end
 526+ 7177             >
 526+ 7177 54 71       >                dw      last_NFA            // Link to previous definition Name
 526+ 7179             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 526+ 7179 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 526+ 717B             >                else
 526+ 717B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 526+ 717B             >                endif           ; ok        // for other definitions it "points" the correct handler
 526+ 717B             >                // Use of "; ok" to suppress "warning[fwdref]"
 526+ 717B             >
 526+ 717B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 527+ 717B 00 71                        dw      QCOMP                   // ?comp
 528+ 717D FA 69                        dw      R_TO                    // r>
 529+ 717F 4A 6B AF 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 530+ 7183 E6 69                        dw      TO_R                    // >r
 531+ 7185 DD 6B 37 6F                  dw      FETCH, COMMA            // @ ,
 532+ 7189 BD 69                        dw      EXIT                    // ;
 533+ 718B
 534+ 718B              //  ______________________________________________________________________
 535+ 718B              //
 536+ 718B              // [            --
 537+ 718B              // stop compilation
 538+ 718B                              Colon_Def SQUARED_OPEN, "[", is_immediate
 538+ 718B             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 538+ 718B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 538+ 718B             >
 538+ 718B             >                // dummy db directives used to calculate length of namec
 538+ 718B 5B          >                db      "["
 538+ 718C             >len_NFA         defl    $ - temp_NFA
 538+ 718C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 538+ 718B             >
 538+ 718B C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 538+ 718C 5B          >                db      "["               // name string in 7-bit ascii, but
 538+ 718D             >                org     $-1                 // alter last byte of Name just above to set
 538+ 718C DB          >                db      {b $} | END_BIT     // msb as name end
 538+ 718D             >
 538+ 718D 6F 71       >                dw      last_NFA            // Link to previous definition Name
 538+ 718F             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 538+ 718F CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 538+ 7191             >                else
 538+ 7191 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 538+ 7191             >                endif           ; ok        // for other definitions it "points" the correct handler
 538+ 7191             >                // Use of "; ok" to suppress "warning[fwdref]"
 538+ 7191             >
 538+ 7191             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 539+ 7191 49 6D                        dw      ZERO                    // 0
 540+ 7193 94 6E EA 6B                  dw      STATE, STORE            // state !
 541+ 7197 BD 69                        dw      EXIT                    // ; immediate
 542+ 7199
 543+ 7199              //  ______________________________________________________________________
 544+ 7199              //
 545+ 7199              // ]            --
 546+ 7199              // start compilation
 547+ 7199                              Colon_Def SQUARED_CLOSE, "]", is_normal
 547+ 7199             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 547+ 7199             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 547+ 7199             >
 547+ 7199             >                // dummy db directives used to calculate length of namec
 547+ 7199 5D          >                db      "]"
 547+ 719A             >len_NFA         defl    $ - temp_NFA
 547+ 719A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 547+ 7199             >
 547+ 7199 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 547+ 719A 5D          >                db      "]"               // name string in 7-bit ascii, but
 547+ 719B             >                org     $-1                 // alter last byte of Name just above to set
 547+ 719A DD          >                db      {b $} | END_BIT     // msb as name end
 547+ 719B             >
 547+ 719B 8B 71       >                dw      last_NFA            // Link to previous definition Name
 547+ 719D             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 547+ 719D CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 547+ 719F             >                else
 547+ 719F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 547+ 719F             >                endif           ; ok        // for other definitions it "points" the correct handler
 547+ 719F             >                // Use of "; ok" to suppress "warning[fwdref]"
 547+ 719F             >
 547+ 719F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 548+ 719F 43 64 C0 00                  dw      LIT, $C0                // 192
 549+ 71A3 94 6E EA 6B                  dw      STATE, STORE            // state !
 550+ 71A7 BD 69                        dw      EXIT                    // ;
 551+ 71A9
 552+ 71A9              //  ______________________________________________________________________
 553+ 71A9              //
 554+ 71A9              // smudge       --
 555+ 71A9              // toggle smudge bit of latest definition
 556+ 71A9                              Colon_Def SMUDGE, "SMUDGE", is_normal
 556+ 71A9             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 556+ 71A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 556+ 71A9             >
 556+ 71A9             >                // dummy db directives used to calculate length of namec
 556+ 71A9 53 4D 55 44 >                db      "SMUDGE"
 556+ 71AD 47 45       >
 556+ 71AF             >len_NFA         defl    $ - temp_NFA
 556+ 71AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 556+ 71A9             >
 556+ 71A9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 556+ 71AA 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 556+ 71AE 47 45       >
 556+ 71B0             >                org     $-1                 // alter last byte of Name just above to set
 556+ 71AF C5          >                db      {b $} | END_BIT     // msb as name end
 556+ 71B0             >
 556+ 71B0 99 71       >                dw      last_NFA            // Link to previous definition Name
 556+ 71B2             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 556+ 71B2 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 556+ 71B4             >                else
 556+ 71B4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 556+ 71B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 556+ 71B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 556+ 71B4             >
 556+ 71B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 557+ 71B4 62 70                        dw      LATEST                  // latest
 558+ 71B6 43 64 20 00                  dw      LIT, SMUDGE_BIT         // 32
 559+ 71BA D0 6B                        dw      TOGGLE                  // toggle
 560+ 71BC BD 69                        dw      EXIT                    // ;
 561+ 71BE
 562+ 71BE              //  ______________________________________________________________________
 563+ 71BE              //
 564+ 71BE              // immediate    --
 565+ 71BE              // make immediate the latest definition
 566+ 71BE                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 566+ 71BE             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 566+ 71BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ 71BE             >
 566+ 71BE             >                // dummy db directives used to calculate length of namec
 566+ 71BE 49 4D 4D 45 >                db      "IMMEDIATE"
 566+ 71C2 44 49 41 54 >
 566+ 71C6 45          >
 566+ 71C7             >len_NFA         defl    $ - temp_NFA
 566+ 71C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ 71BE             >
 566+ 71BE 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ 71BF 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 566+ 71C3 44 49 41 54 >
 566+ 71C7 45          >
 566+ 71C8             >                org     $-1                 // alter last byte of Name just above to set
 566+ 71C7 C5          >                db      {b $} | END_BIT     // msb as name end
 566+ 71C8             >
 566+ 71C8 A9 71       >                dw      last_NFA            // Link to previous definition Name
 566+ 71CA             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 71CA CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 71CC             >                else
 566+ 71CC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 566+ 71CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 71CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 71CC             >
 566+ 71CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 71CC 62 70                        dw      LATEST                  // latest
 568+ 71CE 43 64 40 00                  dw      LIT, $40                // 64
 569+ 71D2 D0 6B                        dw      TOGGLE                  // toggle
 570+ 71D4 BD 69                        dw      EXIT                    // ;
 571+ 71D6
 572+ 71D6              //  ______________________________________________________________________
 573+ 71D6              //
 574+ 71D6              // hex          --
 575+ 71D6              // change numeration base
 576+ 71D6                              Colon_Def HEX, "HEX", is_normal
 576+ 71D6             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 576+ 71D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ 71D6             >
 576+ 71D6             >                // dummy db directives used to calculate length of namec
 576+ 71D6 48 45 58    >                db      "HEX"
 576+ 71D9             >len_NFA         defl    $ - temp_NFA
 576+ 71D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ 71D6             >
 576+ 71D6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ 71D7 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 576+ 71DA             >                org     $-1                 // alter last byte of Name just above to set
 576+ 71D9 D8          >                db      {b $} | END_BIT     // msb as name end
 576+ 71DA             >
 576+ 71DA BE 71       >                dw      last_NFA            // Link to previous definition Name
 576+ 71DC             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 71DC CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 71DE             >                else
 576+ 71DE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 576+ 71DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 71DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 71DE             >
 576+ 71DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 71DE 43 64 10 00                  dw      LIT, 16                 // 16
 578+ 71E2 9E 6E EA 6B                  dw      BASE, STORE             // base !
 579+ 71E6 BD 69                        dw      EXIT                    // ;
 580+ 71E8
 581+ 71E8              //  ______________________________________________________________________
 582+ 71E8              //
 583+ 71E8              // decimal      --
 584+ 71E8              // change numeration base
 585+ 71E8                              Colon_Def DECIMAL, "DECIMAL", is_normal
 585+ 71E8             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 585+ 71E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 585+ 71E8             >
 585+ 71E8             >                // dummy db directives used to calculate length of namec
 585+ 71E8 44 45 43 49 >                db      "DECIMAL"
 585+ 71EC 4D 41 4C    >
 585+ 71EF             >len_NFA         defl    $ - temp_NFA
 585+ 71EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 585+ 71E8             >
 585+ 71E8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 585+ 71E9 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 585+ 71ED 4D 41 4C    >
 585+ 71F0             >                org     $-1                 // alter last byte of Name just above to set
 585+ 71EF CC          >                db      {b $} | END_BIT     // msb as name end
 585+ 71F0             >
 585+ 71F0 D6 71       >                dw      last_NFA            // Link to previous definition Name
 585+ 71F2             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 585+ 71F2 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 585+ 71F4             >                else
 585+ 71F4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 585+ 71F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 585+ 71F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 585+ 71F4             >
 585+ 71F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 586+ 71F4 43 64 0A 00                  dw      LIT, 10                 // 10
 587+ 71F8 9E 6E EA 6B                  dw      BASE, STORE             // base !
 588+ 71FC BD 69                        dw      EXIT                    // ;
 589+ 71FE
 590+ 71FE              //  ______________________________________________________________________
 591+ 71FE              //
 592+ 71FE              // (;code)       --
 593+ 71FE              // patch to CFA to call/jump to the "following code"
 594+ 71FE                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 594+ 71FE             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 594+ 71FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ 71FE             >
 594+ 71FE             >                // dummy db directives used to calculate length of namec
 594+ 71FE 28 3B 43 4F >                db      "(;CODE)"
 594+ 7202 44 45 29    >
 594+ 7205             >len_NFA         defl    $ - temp_NFA
 594+ 7205             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ 71FE             >
 594+ 71FE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ 71FF 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 594+ 7203 44 45 29    >
 594+ 7206             >                org     $-1                 // alter last byte of Name just above to set
 594+ 7205 A9          >                db      {b $} | END_BIT     // msb as name end
 594+ 7206             >
 594+ 7206 E8 71       >                dw      last_NFA            // Link to previous definition Name
 594+ 7208             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 7208 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 720A             >                else
 594+ 720A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 594+ 720A             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 720A             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 720A             >
 594+ 720A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 720A FA 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 596+ 720C 62 70                        dw      LATEST                  // latest   ( Word being defined in this moment )
 597+ 720E A0 70 80 70                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 598+ 7212
 599+ 7212
 600+ 7212
 601+ 7212
 602+ 7212
 603+ 7212 EA 6B                        dw      STORE                   // !
 604+ 7214 BD 69                        dw      EXIT                    // ;
 605+ 7216
 606+ 7216              //  ______________________________________________________________________
 607+ 7216              //
 608+ 7216              // ;code        --
 609+ 7216                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 609+ 7216             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 609+ 7216             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ 7216             >
 609+ 7216             >                // dummy db directives used to calculate length of namec
 609+ 7216 3B 43 4F 44 >                db      ";CODE"
 609+ 721A 45          >
 609+ 721B             >len_NFA         defl    $ - temp_NFA
 609+ 721B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ 7216             >
 609+ 7216 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ 7217 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 609+ 721B 45          >
 609+ 721C             >                org     $-1                 // alter last byte of Name just above to set
 609+ 721B C5          >                db      {b $} | END_BIT     // msb as name end
 609+ 721C             >
 609+ 721C FE 71       >                dw      last_NFA            // Link to previous definition Name
 609+ 721E             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 721E CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 7220             >                else
 609+ 7220 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 609+ 7220             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 7220             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 7220             >
 609+ 7220             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 7220 42 71                        dw      QCSP                    // ?csp
 611+ 7222 79 71                        dw      COMPILE                 // compile
 612+ 7224 08 72                        dw      C_SEMICOLON_CODE        // (;code)
 613+ 7226 8F 71                        dw      SQUARED_OPEN            // [
 614+ 7228 F6 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 615+ 722A BD 69                        dw      EXIT                    // ; immediate
 616+ 722C
 617+ 722C              //  ______________________________________________________________________
 618+ 722C              //
 619+ 722C              // <builds      --
 620+ 722C                              Colon_Def CBUILDS, "<BUILDS", is_normal
 620+ 722C             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 620+ 722C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 620+ 722C             >
 620+ 722C             >                // dummy db directives used to calculate length of namec
 620+ 722C 3C 42 55 49 >                db      "<BUILDS"
 620+ 7230 4C 44 53    >
 620+ 7233             >len_NFA         defl    $ - temp_NFA
 620+ 7233             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 620+ 722C             >
 620+ 722C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 620+ 722D 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 620+ 7231 4C 44 53    >
 620+ 7234             >                org     $-1                 // alter last byte of Name just above to set
 620+ 7233 D3          >                db      {b $} | END_BIT     // msb as name end
 620+ 7234             >
 620+ 7234 16 72       >                dw      last_NFA            // Link to previous definition Name
 620+ 7236             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 620+ 7236 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 620+ 7238             >                else
 620+ 7238 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 620+ 7238             >                endif           ; ok        // for other definitions it "points" the correct handler
 620+ 7238             >                // Use of "; ok" to suppress "warning[fwdref]"
 620+ 7238             >
 620+ 7238             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 621+ 7238 49 6D                        dw      ZERO                    // 0
 622+ 723A 05 6D                        dw      CONSTANT                // constant
 623+ 723C BD 69                        dw      EXIT                    // ;
 624+ 723E
 625+ 723E              //  ______________________________________________________________________
 626+ 723E              //
 627+ 723E              // recurse      --
 628+ 723E              //              Colon_Def RECURSE, "RECURSE", is_immediate
 629+ 723E              //              dw      QCOMP                   // ?comp
 630+ 723E              //              dw      LATEST                  // latest
 631+ 723E              //              dw      PFA, CFA                // pfa cfa
 632+ 723E              //              dw      COMMA                   // ,
 633+ 723E              //              dw      EXIT                    // ; immediate
 634+ 723E
 635+ 723E              //  ______________________________________________________________________
 636+ 723E              //
 637+ 723E              // does>     --
 638+ 723E                              Colon_Def DOES_TO, "DOES>", is_normal
 638+ 723E             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 638+ 723E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 638+ 723E             >
 638+ 723E             >                // dummy db directives used to calculate length of namec
 638+ 723E 44 4F 45 53 >                db      "DOES>"
 638+ 7242 3E          >
 638+ 7243             >len_NFA         defl    $ - temp_NFA
 638+ 7243             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 638+ 723E             >
 638+ 723E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 638+ 723F 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 638+ 7243 3E          >
 638+ 7244             >                org     $-1                 // alter last byte of Name just above to set
 638+ 7243 BE          >                db      {b $} | END_BIT     // msb as name end
 638+ 7244             >
 638+ 7244 2C 72       >                dw      last_NFA            // Link to previous definition Name
 638+ 7246             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 638+ 7246 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 638+ 7248             >                else
 638+ 7248 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 638+ 7248             >                endif           ; ok        // for other definitions it "points" the correct handler
 638+ 7248             >                // Use of "; ok" to suppress "warning[fwdref]"
 638+ 7248             >
 638+ 7248             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 639+ 7248 FA 69                        dw      R_TO                    // r>
 640+ 724A 62 70                        dw      LATEST                  // latest
 641+ 724C A0 70                        dw      PFA                     // pfa
 642+ 724E EA 6B                        dw      STORE                   // !
 643+ 7250 08 72                        dw      C_SEMICOLON_CODE        // ;code
 644+ 7252              Does_Ptr:
 645+ 7252                              // via call coded in CFA
 646+ 7252                              ldhlrp
 646+ 7252 2A 30 64    >                ld      hl,(RP_Pointer)
 647+ 7255 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 648+ 7256 70                           ld      (hl), b
 649+ 7257 2B                           dec     hl
 650+ 7258 71                           ld      (hl), c
 651+ 7259                              ldrphl
 651+ 7259 22 30 64    >                ld      (RP_Pointer),hl
 652+ 725C 13                           inc     de
 653+ 725D EB                           ex      de, hl
 654+ 725E 4E                           ld      c, (hl)
 655+ 725F 23                           inc     hl
 656+ 7260 46                           ld      b, (hl)
 657+ 7261 23                           inc     hl
 658+ 7262
 659+ 7262                              psh1
 659+ 7262 E5          >                push    hl
 659+ 7263 DD E9       >                jp      (ix)
 660+ 7265                              // SMUDGE !
 661+ 7265
 662+ 7265              //  ______________________________________________________________________
 663+ 7265              //
 664+ 7265              // count        a -- a2 n
 665+ 7265              // expects a counted string at address a, returns string address and counter
 666+ 7265                              Colon_Def COUNT, "COUNT", is_normal
 666+ 7265             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 666+ 7265             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 666+ 7265             >
 666+ 7265             >                // dummy db directives used to calculate length of namec
 666+ 7265 43 4F 55 4E >                db      "COUNT"
 666+ 7269 54          >
 666+ 726A             >len_NFA         defl    $ - temp_NFA
 666+ 726A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 666+ 7265             >
 666+ 7265 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 666+ 7266 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 666+ 726A 54          >
 666+ 726B             >                org     $-1                 // alter last byte of Name just above to set
 666+ 726A D4          >                db      {b $} | END_BIT     // msb as name end
 666+ 726B             >
 666+ 726B 3E 72       >                dw      last_NFA            // Link to previous definition Name
 666+ 726D             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 666+ 726D CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 666+ 726F             >                else
 666+ 726F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 666+ 726F             >                endif           ; ok        // for other definitions it "points" the correct handler
 666+ 726F             >                // Use of "; ok" to suppress "warning[fwdref]"
 666+ 726F             >
 666+ 726F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 667+ 726F 4A 6B                        dw      DUP                     // dup
 668+ 7271 87 6A                        dw      ONE_PLUS                // 1+
 669+ 7273 3D 6B F8 6B                  dw      SWAP, CFETCH             // swap @
 670+ 7277 BD 69                        dw      EXIT                    // ;
 671+ 7279
 672+ 7279              //  ______________________________________________________________________
 673+ 7279              //
 674+ 7279              // bounds       a n -- a+n n
 675+ 7279              // given an address and a length ( a n ) calculate the bound addresses
 676+ 7279              // suitable for DO-LOOP
 677+ 7279                              Colon_Def BOUNDS, "BOUNDS", is_normal
 677+ 7279             >                New_Def  BOUNDS, "BOUNDS", Enter_Ptr, is_normal ; ok
 677+ 7279             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 677+ 7279             >
 677+ 7279             >                // dummy db directives used to calculate length of namec
 677+ 7279 42 4F 55 4E >                db      "BOUNDS"
 677+ 727D 44 53       >
 677+ 727F             >len_NFA         defl    $ - temp_NFA
 677+ 727F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 677+ 7279             >
 677+ 7279 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 677+ 727A 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 677+ 727E 44 53       >
 677+ 7280             >                org     $-1                 // alter last byte of Name just above to set
 677+ 727F D3          >                db      {b $} | END_BIT     // msb as name end
 677+ 7280             >
 677+ 7280 65 72       >                dw      last_NFA            // Link to previous definition Name
 677+ 7282             >BOUNDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 677+ 7282 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 677+ 7284             >                else
 677+ 7284 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 677+ 7284             >                endif           ; ok        // for other definitions it "points" the correct handler
 677+ 7284             >                // Use of "; ok" to suppress "warning[fwdref]"
 677+ 7284             >
 677+ 7284             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 678+ 7284 05 6B 5E 6A                  dw      OVER, PLUS, SWAP        // over + swap
 678+ 7288 3D 6B
 679+ 728A BD 69                        dw      EXIT                    // ;
 680+ 728C
 681+ 728C              //  ______________________________________________________________________
 682+ 728C              //
 683+ 728C              // type         a n --
 684+ 728C              // Sends to current output channel n characters starting at address a.
 685+ 728C                              Colon_Def TYPE, "TYPE", is_normal
 685+ 728C             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 685+ 728C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 685+ 728C             >
 685+ 728C             >                // dummy db directives used to calculate length of namec
 685+ 728C 54 59 50 45 >                db      "TYPE"
 685+ 7290             >len_NFA         defl    $ - temp_NFA
 685+ 7290             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 685+ 728C             >
 685+ 728C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 685+ 728D 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 685+ 7291             >                org     $-1                 // alter last byte of Name just above to set
 685+ 7290 C5          >                db      {b $} | END_BIT     // msb as name end
 685+ 7291             >
 685+ 7291 79 72       >                dw      last_NFA            // Link to previous definition Name
 685+ 7293             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 685+ 7293 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 685+ 7295             >                else
 685+ 7295 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 685+ 7295             >                endif           ; ok        // for other definitions it "points" the correct handler
 685+ 7295             >                // Use of "; ok" to suppress "warning[fwdref]"
 685+ 7295             >
 685+ 7295             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 686+ 7295 82 72                        dw      BOUNDS                  // bounds
 687+ 7297 D7 64                        dw      C_Q_DO                  // ?do
 688+ 7299 0C 00                        dw      Type_Skip - $
 689+ 729B              Type_Loop:
 690+ 729B 10 65 F8 6B                  dw          I, CFETCH           //      i c@
 691+ 729F 10 70                        dw          EMIT                //      emit
 692+ 72A1 92 64                        dw      C_LOOP                  // loop
 693+ 72A3 F8 FF                        dw      Type_Loop - $
 694+ 72A5              Type_Skip:
 695+ 72A5 BD 69                        dw      EXIT                    // ;
 696+ 72A7
 697+ 72A7              //  ______________________________________________________________________
 698+ 72A7              //
 699+ 72A7              // -trailing    a n1 -- a n2
 700+ 72A7              // Assumes that an n1 bytes-long string is stored at address a
 701+ 72A7              // and the string contains a space delimited word,
 702+ 72A7              // Finds n2 as the position of the first character after the word.
 703+ 72A7                              Colon_Def LTRAILING, "-TRAILING", is_normal
 703+ 72A7             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 703+ 72A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 703+ 72A7             >
 703+ 72A7             >                // dummy db directives used to calculate length of namec
 703+ 72A7 2D 54 52 41 >                db      "-TRAILING"
 703+ 72AB 49 4C 49 4E >
 703+ 72AF 47          >
 703+ 72B0             >len_NFA         defl    $ - temp_NFA
 703+ 72B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 703+ 72A7             >
 703+ 72A7 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 703+ 72A8 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 703+ 72AC 49 4C 49 4E >
 703+ 72B0 47          >
 703+ 72B1             >                org     $-1                 // alter last byte of Name just above to set
 703+ 72B0 C7          >                db      {b $} | END_BIT     // msb as name end
 703+ 72B1             >
 703+ 72B1 8C 72       >                dw      last_NFA            // Link to previous definition Name
 703+ 72B3             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 703+ 72B3 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 703+ 72B5             >                else
 703+ 72B5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 703+ 72B5             >                endif           ; ok        // for other definitions it "points" the correct handler
 703+ 72B5             >                // Use of "; ok" to suppress "warning[fwdref]"
 703+ 72B5             >
 703+ 72B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 704+ 72B5 4A 6B 49 6D                  dw      DUP, ZERO               // dup 0
 705+ 72B9                                                              // do
 706+ 72B9 05 65                        dw      C_DO
 707+ 72BB              LTrailing_Loop:
 708+ 72BB AB 6B 5E 6A                  dw          TWO_DUP, PLUS       //      2dup +
 709+ 72BF 93 6A                        dw          ONE_SUBTRACT        //      1-
 710+ 72C1 F8 6B                        dw          CFETCH              //      c@
 711+ 72C3 73 6D 6F 6F                  dw          BL, SUBTRACT        //      bl -
 712+ 72C7                                                              //      if
 713+ 72C7 7D 64                        dw          ZBRANCH
 714+ 72C9 08 00                        dw          LTrailing_Else - $
 715+ 72CB D3 69                        dw              LEAVE           //          leave
 716+ 72CD 66 64                        dw          BRANCH              //      else
 717+ 72CF 04 00                        dw          LTrailing_Endif - $
 718+ 72D1              LTrailing_Else:
 719+ 72D1 93 6A                        dw              ONE_SUBTRACT    //          1-
 720+ 72D3              LTrailing_Endif:                                //      endif
 721+ 72D3                                                              // loop
 722+ 72D3 92 64                        dw      C_LOOP
 723+ 72D5 E6 FF                        dw      LTrailing_Loop - $
 724+ 72D7 BD 69                        dw      EXIT                    // ;
 725+ 72D9
 726+ 72D9              //  ______________________________________________________________________
 727+ 72D9              //
 728+ 72D9              // accept       a n1 -- n2
 729+ 72D9              // Accepts at most n1 characters from terminal and stores them at address a
 730+ 72D9              // CR stops input. A 'nul' is added as trailer.
 731+ 72D9              // n2 is the string length. n2 is kept in span user variable also.
 732+ 72D9                              Colon_Def ACCEPT, "ACCEPT", is_normal
 732+ 72D9             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 732+ 72D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 732+ 72D9             >
 732+ 72D9             >                // dummy db directives used to calculate length of namec
 732+ 72D9 41 43 43 45 >                db      "ACCEPT"
 732+ 72DD 50 54       >
 732+ 72DF             >len_NFA         defl    $ - temp_NFA
 732+ 72DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 732+ 72D9             >
 732+ 72D9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 732+ 72DA 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 732+ 72DE 50 54       >
 732+ 72E0             >                org     $-1                 // alter last byte of Name just above to set
 732+ 72DF D4          >                db      {b $} | END_BIT     // msb as name end
 732+ 72E0             >
 732+ 72E0 A7 72       >                dw      last_NFA            // Link to previous definition Name
 732+ 72E2             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 732+ 72E2 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 732+ 72E4             >                else
 732+ 72E4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 732+ 72E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 732+ 72E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 732+ 72E4             >
 732+ 72E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 733+ 72E4 05 6B 5E 6A                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 733+ 72E8 05 6B
 734+ 72EA 49 6D 67 6B                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 735+ 72EE                                                              // do
 736+ 72EE 05 65                        dw      C_DO                    //                      ( a  0 )
 737+ 72F0              Accept_Loop:
 738+ 72F0 15 6B 1F 67                  dw          DROP, KEY           //      drop key        ( a  c )
 739+ 72F4 4A 6B                        dw          DUP                 //      dup             ( a  c  c )
 740+ 72F6 43 64 0E 00                  dw          LIT, $0E            //      0E
 741+ 72FA AF 6D                        dw          PLUS_ORIGIN         //      +origin
 742+ 72FC DD 6B                        dw          FETCH               //      @               ( a  c  c  del )
 743+ 72FE 7D 6F                        dw          EQUALS              //      =               ( a  c  c==del )
 744+ 7300                                                              //      if
 745+ 7300 7D 64                        dw          ZBRANCH
 746+ 7302 2A 00                        dw          Accept_Else_0 - $
 747+ 7304 15 6B                        dw              DROP            //          drop        ( a  )
 748+ 7306 4A 6B 10 65                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 748+ 730A 7D 6F
 749+ 730C 4A 6B                        dw              DUP             //          dup         ( a  a==i  a==i )
 750+ 730E FA 69                        dw              R_TO            //          r> 2 - + r>
 751+ 7310 59 6D 6F 6F                  dw              TWO, SUBTRACT, PLUS //      ( decrement index by 1 or 2 )
 751+ 7314 5E 6A
 752+ 7316 E6 69                        dw              TO_R            //
 753+ 7318                                                              //          if
 754+ 7318 7D 64                        dw              ZBRANCH
 755+ 731A 0A 00                        dw              Accept_Else_1 - $
 756+ 731C 43 64 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 757+ 7320                                                              //          else
 758+ 7320 66 64                        dw              BRANCH
 759+ 7322 06 00                        dw              Accept_Endif_1 - $
 760+ 7324              Accept_Else_1:
 761+ 7324 43 64 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 762+ 7328              Accept_Endif_1:                                 //          endif
 763+ 7328 66 64                        dw          BRANCH
 764+ 732A 30 00                        dw          Accept_Endif_0 - $
 765+ 732C              Accept_Else_0:                                  //      else
 766+ 732C 4A 6B                        dw              DUP             //          dup         ( a  c  c )
 767+ 732E 43 64 0D 00                  dw              LIT, 13         //          13
 768+ 7332 7D 6F                        dw              EQUALS          //          =           ( a  c  c==CR )
 769+ 7334                                                              //          if
 770+ 7334 7D 64                        dw              ZBRANCH
 771+ 7336 0E 00                        dw              Accept_Else_2 - $
 772+ 7338 15 6B 73 6D                  dw                  DROP, BL    //              drop bl ( a  bl )
 773+ 733C 49 6D                        dw                  ZERO        //              0       ( a  c  0 )
 774+ 733E D3 69                        dw                  LEAVE       //              leave
 775+ 7340                                                              //          else
 776+ 7340 66 64                        dw              BRANCH
 777+ 7342 04 00                        dw              Accept_Endif_2 - $
 778+ 7344              Accept_Else_2:
 779+ 7344 4A 6B                        dw                  DUP         //              dup     ( a  c  c )
 780+ 7346                                                              //          endif
 781+ 7346              Accept_Endif_2:
 782+ 7346 10 65 06 6C                  dw              I, CSTORE       //          i           ( a  c )
 783+ 734A 4A 6B 73 6D                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 783+ 734E 9E 6F
 784+ 7350                                                              //          if
 785+ 7350 7D 64                        dw              ZBRANCH
 786+ 7352 08 00                        dw              Accept_Endif_3 - $
 787+ 7354 FA 69                        dw                  R_TO        //              r>
 788+ 7356 93 6A                        dw                  ONE_SUBTRACT//              1-
 789+ 7358 E6 69                        dw                  TO_R        //              >r
 790+ 735A                                                              //          endif
 791+ 735A              Accept_Endif_3:
 792+ 735A              Accept_Endif_0:                                 //      endif
 793+ 735A 10 70                        dw          EMIT                //      emit
 794+ 735C 49 6D 10 65                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 794+ 7360 87 6A
 795+ 7362 EA 6B                        dw          STORE               //          ( zero pad )
 796+ 7364 10 65                        dw          I                   //      i
 797+ 7366                                                              // loop
 798+ 7366 92 64                        dw      C_LOOP
 799+ 7368 88 FF                        dw      Accept_Loop - $
 800+ 736A 3D 6B 6F 6F                  dw      SWAP, SUBTRACT          // swap -
 801+ 736E 87 6A                        dw      ONE_PLUS                // 1+
 802+ 7370 4A 6B 09 6F                  dw      DUP, SPAN, STORE        // dup span !
 802+ 7374 EA 6B
 803+ 7376 BD 69                        dw      EXIT                    // ;
 804+ 7378
 805+ 7378              //  ______________________________________________________________________
 806+ 7378              //
 807+ 7378              // expect      a n --
 808+ 7378              // Accepts at most n1 characters from terminal and stores them at address a
 809+ 7378              // CR stops input. A 'nul' is added as trailer.
 810+ 7378              // n2 is the string length. n2 is kept in span user variable also.
 811+ 7378                              Colon_Def EXPECT, "EXPECT", is_normal
 811+ 7378             >                New_Def  EXPECT, "EXPECT", Enter_Ptr, is_normal ; ok
 811+ 7378             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 811+ 7378             >
 811+ 7378             >                // dummy db directives used to calculate length of namec
 811+ 7378 45 58 50 45 >                db      "EXPECT"
 811+ 737C 43 54       >
 811+ 737E             >len_NFA         defl    $ - temp_NFA
 811+ 737E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 811+ 7378             >
 811+ 7378 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 811+ 7379 45 58 50 45 >                db      "EXPECT"               // name string in 7-bit ascii, but
 811+ 737D 43 54       >
 811+ 737F             >                org     $-1                 // alter last byte of Name just above to set
 811+ 737E D4          >                db      {b $} | END_BIT     // msb as name end
 811+ 737F             >
 811+ 737F D9 72       >                dw      last_NFA            // Link to previous definition Name
 811+ 7381             >EXPECT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 811+ 7381 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 811+ 7383             >                else
 811+ 7383 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 811+ 7383             >                endif           ; ok        // for other definitions it "points" the correct handler
 811+ 7383             >                // Use of "; ok" to suppress "warning[fwdref]"
 811+ 7383             >
 811+ 7383             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 812+ 7383 E2 72 15 6B                  dw      ACCEPT, DROP            // accept drop
 813+ 7387 BD 69                        dw      EXIT                    // ;
 814+ 7389
 815+ 7389              //  ______________________________________________________________________
 816+ 7389              //
 817+ 7389              // query        --
 818+ 7389              // Accept at most 80 character from console. CR stops.
 819+ 7389              // Text is stored in TIB. Variable IN is zeroed.
 820+ 7389                              Colon_Def QUERY, "QUERY", is_normal
 820+ 7389             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 820+ 7389             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 820+ 7389             >
 820+ 7389             >                // dummy db directives used to calculate length of namec
 820+ 7389 51 55 45 52 >                db      "QUERY"
 820+ 738D 59          >
 820+ 738E             >len_NFA         defl    $ - temp_NFA
 820+ 738E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 820+ 7389             >
 820+ 7389 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 820+ 738A 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 820+ 738E 59          >
 820+ 738F             >                org     $-1                 // alter last byte of Name just above to set
 820+ 738E D9          >                db      {b $} | END_BIT     // msb as name end
 820+ 738F             >
 820+ 738F 78 73       >                dw      last_NFA            // Link to previous definition Name
 820+ 7391             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 820+ 7391 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 820+ 7393             >                else
 820+ 7393 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 820+ 7393             >                endif           ; ok        // for other definitions it "points" the correct handler
 820+ 7393             >                // Use of "; ok" to suppress "warning[fwdref]"
 820+ 7393             >
 820+ 7393             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 821+ 7393 DC 6D DD 6B                  dw      TIB, FETCH              // tib @
 822+ 7397 43 64 50 00                  dw      LIT, 80                 // 80
 823+ 739B 81 73                        dw      EXPECT                  // expect
 824+ 739D 49 6D 51 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 824+ 73A1 EA 6B
 825+ 73A3 BD 69                        dw      EXIT                    // ;
 826+ 73A5
 827+ 73A5              //  ______________________________________________________________________
 828+ 73A5              //
 829+ 73A5              // fill        a n c --
 830+ 73A5              // If n > 0, fills n locations starting from address a with the value c.
 831+ 73A5                              New_Def FILL, "FILL", is_code, is_normal
 831+ 73A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 831+ 73A5             >
 831+ 73A5             >                // dummy db directives used to calculate length of namec
 831+ 73A5 46 49 4C 4C >                db      "FILL"
 831+ 73A9             >len_NFA         defl    $ - temp_NFA
 831+ 73A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 831+ 73A5             >
 831+ 73A5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 831+ 73A6 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 831+ 73AA             >                org     $-1                 // alter last byte of Name just above to set
 831+ 73A9 CC          >                db      {b $} | END_BIT     // msb as name end
 831+ 73AA             >
 831+ 73AA 89 73       >                dw      last_NFA            // Link to previous definition Name
 831+ 73AC             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 831+ 73AC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 831+ 73AC             >                else
 831+ 73AC AE 73       >                dw      $ + 2   ; ok        // is pointed by CFA
 831+ 73AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 831+ 73AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 831+ 73AE             >
 831+ 73AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 832+ 73AE 69                           ld      l, c
 833+ 73AF 60                           ld      h, b
 834+ 73B0 D1                           pop     de                  // de has character
 835+ 73B1 C1                           pop     bc                  // bc has counter
 836+ 73B2 E3                           ex      (sp), hl            // hl has address, save Instruction Pointer
 837+ 73B3              Fill_Loop:
 838+ 73B3 78                               ld      a, b
 839+ 73B4 B1                               or      c
 840+ 73B5 28 05                        jr      z, Fill_While_End
 841+ 73B7 73                               ld      (hl), e
 842+ 73B8 0B                               dec     bc
 843+ 73B9 23                               inc     hl
 844+ 73BA 18 F7                        jr      Fill_Loop
 845+ 73BC              Fill_While_End:
 846+ 73BC C1                           pop     bc                  // Restore Instruction Pointer
 847+ 73BD
 848+ 73BD                              next
 848+ 73BD DD E9       >                jp      (ix)
 849+ 73BF
 850+ 73BF              //  ______________________________________________________________________
 851+ 73BF              //
 852+ 73BF              // erase        a n --
 853+ 73BF              // If n > 0, fills n locations starting from address a with 'nul' characters.
 854+ 73BF                              Colon_Def ERASE, "ERASE", is_normal
 854+ 73BF             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 854+ 73BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 854+ 73BF             >
 854+ 73BF             >                // dummy db directives used to calculate length of namec
 854+ 73BF 45 52 41 53 >                db      "ERASE"
 854+ 73C3 45          >
 854+ 73C4             >len_NFA         defl    $ - temp_NFA
 854+ 73C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 854+ 73BF             >
 854+ 73BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 854+ 73C0 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 854+ 73C4 45          >
 854+ 73C5             >                org     $-1                 // alter last byte of Name just above to set
 854+ 73C4 C5          >                db      {b $} | END_BIT     // msb as name end
 854+ 73C5             >
 854+ 73C5 A5 73       >                dw      last_NFA            // Link to previous definition Name
 854+ 73C7             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 854+ 73C7 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 854+ 73C9             >                else
 854+ 73C9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 854+ 73C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 854+ 73C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 854+ 73C9             >
 854+ 73C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 855+ 73C9 49 6D AC 73                  dw      ZERO, FILL              // 0 fill
 856+ 73CD BD 69                        dw      EXIT                    // ;
 857+ 73CF
 858+ 73CF              //  ______________________________________________________________________
 859+ 73CF              //
 860+ 73CF              // blanks       a n --
 861+ 73CF              // If n > 0, fills n locations starting from address a with 'nul' characters.
 862+ 73CF                              Colon_Def BLANKS, "BLANKS", is_normal
 862+ 73CF             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 862+ 73CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 862+ 73CF             >
 862+ 73CF             >                // dummy db directives used to calculate length of namec
 862+ 73CF 42 4C 41 4E >                db      "BLANKS"
 862+ 73D3 4B 53       >
 862+ 73D5             >len_NFA         defl    $ - temp_NFA
 862+ 73D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 862+ 73CF             >
 862+ 73CF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 862+ 73D0 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 862+ 73D4 4B 53       >
 862+ 73D6             >                org     $-1                 // alter last byte of Name just above to set
 862+ 73D5 D3          >                db      {b $} | END_BIT     // msb as name end
 862+ 73D6             >
 862+ 73D6 BF 73       >                dw      last_NFA            // Link to previous definition Name
 862+ 73D8             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 862+ 73D8 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 862+ 73DA             >                else
 862+ 73DA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 862+ 73DA             >                endif           ; ok        // for other definitions it "points" the correct handler
 862+ 73DA             >                // Use of "; ok" to suppress "warning[fwdref]"
 862+ 73DA             >
 862+ 73DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 863+ 73DA 73 6D AC 73                  dw      BL, FILL                // bl fill
 864+ 73DE BD 69                        dw      EXIT                    // ;
 865+ 73E0
 866+ 73E0              //  ______________________________________________________________________
 867+ 73E0              //
 868+ 73E0              // hold         c --
 869+ 73E0              // Used between <# and #> to insert a character c in numeric formatting.
 870+ 73E0                              Colon_Def HOLD, "HOLD", is_normal
 870+ 73E0             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 870+ 73E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 870+ 73E0             >
 870+ 73E0             >                // dummy db directives used to calculate length of namec
 870+ 73E0 48 4F 4C 44 >                db      "HOLD"
 870+ 73E4             >len_NFA         defl    $ - temp_NFA
 870+ 73E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 870+ 73E0             >
 870+ 73E0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 870+ 73E1 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 870+ 73E5             >                org     $-1                 // alter last byte of Name just above to set
 870+ 73E4 C4          >                db      {b $} | END_BIT     // msb as name end
 870+ 73E5             >
 870+ 73E5 CF 73       >                dw      last_NFA            // Link to previous definition Name
 870+ 73E7             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 870+ 73E7 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 870+ 73E9             >                else
 870+ 73E9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 870+ 73E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 870+ 73E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 870+ 73E9             >
 870+ 73E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 871+ 73E9 6A 6D                        dw      NEG_ONE                 // -1
 872+ 73EB CA 6E BA 6B                  dw      HLD, PLUSSTORE          // hld +!
 873+ 73EF CA 6E DD 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 873+ 73F3 06 6C
 874+ 73F5 BD 69                        dw      EXIT                    // ;
 875+ 73F7
 876+ 73F7              //  ______________________________________________________________________
 877+ 73F7              //
 878+ 73F7              // pad         -- a
 879+ 73F7              // leaves the buffer text address. This is at a fixed distance over HERE.
 880+ 73F7                              Colon_Def PAD, "PAD", is_normal
 880+ 73F7             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 880+ 73F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 880+ 73F7             >
 880+ 73F7             >                // dummy db directives used to calculate length of namec
 880+ 73F7 50 41 44    >                db      "PAD"
 880+ 73FA             >len_NFA         defl    $ - temp_NFA
 880+ 73FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 880+ 73F7             >
 880+ 73F7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 880+ 73F8 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 880+ 73FB             >                org     $-1                 // alter last byte of Name just above to set
 880+ 73FA C4          >                db      {b $} | END_BIT     // msb as name end
 880+ 73FB             >
 880+ 73FB E0 73       >                dw      last_NFA            // Link to previous definition Name
 880+ 73FD             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 880+ 73FD CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 880+ 73FF             >                else
 880+ 73FF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 880+ 73FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 880+ 73FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 880+ 73FF             >
 880+ 73FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 881+ 73FF 1B 6F                        dw      HERE                    // here
 882+ 7401 43 64 44 00                  dw      LIT, 68                 // 68
 883+ 7405 5E 6A                        dw      PLUS                    // +
 884+ 7407 BD 69                        dw      EXIT                    // ;
 885+ 7409
 886+ 7409              //  ______________________________________________________________________
 887+ 7409              //
 888+ 7409              // word         c -- a
 889+ 7409              // reads characters from input streams until it encouners a c delimiter.
 890+ 7409              // Stores that packet so it starts from HERE
 891+ 7409              // WORD leaves a counter as first byte and ends the packet with two spaces.
 892+ 7409              // Other occurrences of c are ignored.
 893+ 7409              // If BLK is zero, text is taken from terminal buffer TIB.
 894+ 7409              // Otherwise text is taken from the disk-block given by BLK.
 895+ 7409              // "in" variable is incremented of the number of character read.
 896+ 7409              // The number of characters read is given by ENCLOSE.
 897+ 7409                              Colon_Def WORD, "WORD", is_normal
 897+ 7409             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 897+ 7409             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ 7409             >
 897+ 7409             >                // dummy db directives used to calculate length of namec
 897+ 7409 57 4F 52 44 >                db      "WORD"
 897+ 740D             >len_NFA         defl    $ - temp_NFA
 897+ 740D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ 7409             >
 897+ 7409 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ 740A 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 897+ 740E             >                org     $-1                 // alter last byte of Name just above to set
 897+ 740D C4          >                db      {b $} | END_BIT     // msb as name end
 897+ 740E             >
 897+ 740E F7 73       >                dw      last_NFA            // Link to previous definition Name
 897+ 7410             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 7410 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 897+ 7412             >                else
 897+ 7412 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 897+ 7412             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 7412             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 7412             >
 897+ 7412             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 7412 48 6E DD 6B                  dw      BLK, FETCH              // blk @
 899+ 7416                                                              // if
 900+ 7416 7D 64                        dw      ZBRANCH
 901+ 7418 0C 00                        dw      Word_Else - $
 902+ 741A 48 6E DD 6B                  dw          BLK, FETCH          //      blk @
 903+ 741E 6B 7D                        dw          BLOCK               //      block ( forward )
 904+ 7420                                                              // else
 905+ 7420 66 64                        dw      BRANCH
 906+ 7422 06 00                        dw      Word_Endif - $
 907+ 7424              Word_Else:
 908+ 7424 DC 6D DD 6B                  dw         TIB, FETCH           //      tib @
 909+ 7428              Word_Endif:                                     // endif
 910+ 7428 51 6E DD 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 910+ 742C 5E 6A
 911+ 742E 3D 6B F0 65                  dw      SWAP, ENCLOSE           // swap enclose
 912+ 7432 1B 6F 43 64                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 912+ 7436 22 00 D8 73
 913+ 743A 51 6E BA 6B                  dw      TO_IN, PLUSSTORE        // >in @ +
 914+ 743E 05 6B 6F 6F                  dw      OVER, SUBTRACT, TO_R    // over - >r
 914+ 7442 E6 69
 915+ 7444 0E 6A 1B 6F                  dw      R_OP, HERE, CSTORE      // r here c!
 915+ 7448 06 6C
 916+ 744A 5E 6A                        dw      PLUS                    // +
 917+ 744C 1B 6F 87 6A                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 917+ 7450 FA 69
 918+ 7452 AB 68                        dw      CMOVE                   // cmove
 919+ 7454 1B 6F                        dw      HERE                    // here
 920+ 7456 BD 69                        dw      EXIT                    // ;
 921+ 7458
 922+ 7458              //  ______________________________________________________________________
 923+ 7458              //
 924+ 7458              // (.")         --
 925+ 7458              // Direct procedure compiled by ." and  .(  It executes TYPE.
 926+ 7458                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 926+ 7458             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 926+ 7458             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 926+ 7458             >
 926+ 7458             >                // dummy db directives used to calculate length of namec
 926+ 7458 28 2E 22 29 >                db      '(.")'
 926+ 745C             >len_NFA         defl    $ - temp_NFA
 926+ 745C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 926+ 7458             >
 926+ 7458 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 926+ 7459 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 926+ 745D             >                org     $-1                 // alter last byte of Name just above to set
 926+ 745C A9          >                db      {b $} | END_BIT     // msb as name end
 926+ 745D             >
 926+ 745D 09 74       >                dw      last_NFA            // Link to previous definition Name
 926+ 745F             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 926+ 745F CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 926+ 7461             >                else
 926+ 7461 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 926+ 7461             >                endif           ; ok        // for other definitions it "points" the correct handler
 926+ 7461             >                // Use of "; ok" to suppress "warning[fwdref]"
 926+ 7461             >
 926+ 7461             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 927+ 7461 0E 6A 6D 72                  dw      R_OP, COUNT             // r count
 928+ 7465 4A 6B 87 6A                  dw      DUP, ONE_PLUS           // dup 1+
 929+ 7469 FA 69 5E 6A                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 929+ 746D E6 69
 930+ 746F 93 72                        dw      TYPE                    // type
 931+ 7471 BD 69                        dw      EXIT                    // ;
 932+ 7473
 933+ 7473              //  ______________________________________________________________________
 934+ 7473              //
 935+ 7473              // char         -- c
 936+ 7473              // get first character from next input word
 937+ 7473                              Colon_Def CHAR,  "CHAR", is_normal
 937+ 7473             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 937+ 7473             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 937+ 7473             >
 937+ 7473             >                // dummy db directives used to calculate length of namec
 937+ 7473 43 48 41 52 >                db      "CHAR"
 937+ 7477             >len_NFA         defl    $ - temp_NFA
 937+ 7477             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 937+ 7473             >
 937+ 7473 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 937+ 7474 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 937+ 7478             >                org     $-1                 // alter last byte of Name just above to set
 937+ 7477 D2          >                db      {b $} | END_BIT     // msb as name end
 937+ 7478             >
 937+ 7478 58 74       >                dw      last_NFA            // Link to previous definition Name
 937+ 747A             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 937+ 747A CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 937+ 747C             >                else
 937+ 747C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 937+ 747C             >                endif           ; ok        // for other definitions it "points" the correct handler
 937+ 747C             >                // Use of "; ok" to suppress "warning[fwdref]"
 937+ 747C             >
 937+ 747C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 938+ 747C 73 6D 10 74                  dw      BL, WORD                // bl word
 939+ 7480 87 6A F8 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 940+ 7484 BD 69                        dw      EXIT                    // ;
 941+ 7486
 942+ 7486              //  ______________________________________________________________________
 943+ 7486              //
 944+ 7486              // ,"           --
 945+ 7486              // compiles a string terminated by " as a counted string from next input stream
 946+ 7486                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 946+ 7486             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 946+ 7486             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 946+ 7486             >
 946+ 7486             >                // dummy db directives used to calculate length of namec
 946+ 7486 2C 22       >                db      ',"'
 946+ 7488             >len_NFA         defl    $ - temp_NFA
 946+ 7488             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 946+ 7486             >
 946+ 7486 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 946+ 7487 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 946+ 7489             >                org     $-1                 // alter last byte of Name just above to set
 946+ 7488 A2          >                db      {b $} | END_BIT     // msb as name end
 946+ 7489             >
 946+ 7489 73 74       >                dw      last_NFA            // Link to previous definition Name
 946+ 748B             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 946+ 748B CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 946+ 748D             >                else
 946+ 748D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 946+ 748D             >                endif           ; ok        // for other definitions it "points" the correct handler
 946+ 748D             >                // Use of "; ok" to suppress "warning[fwdref]"
 946+ 748D             >
 946+ 748D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 947+ 748D 43 64 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 948+ 7491 10 74                        dw      WORD                    // word
 949+ 7493 F8 6B 87 6A                  dw      CFETCH, ONE_PLUS        // c@ 1+
 950+ 7497 2B 6F                        dw      ALLOT                   // allot
 951+ 7499 49 6D 48 6F                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
 952+ 749D BD 69                        dw      EXIT
 953+ 749F
 954+ 749F              //  ______________________________________________________________________
 955+ 749F              //
 956+ 749F              // .c           c --
 957+ 749F              // intermediate general purpose string builder, used by ." and .(
 958+ 749F                              Colon_Def DOT_C,  ".C", is_immediate
 958+ 749F             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
 958+ 749F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 958+ 749F             >
 958+ 749F             >                // dummy db directives used to calculate length of namec
 958+ 749F 2E 43       >                db      ".C"
 958+ 74A1             >len_NFA         defl    $ - temp_NFA
 958+ 74A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 958+ 749F             >
 958+ 749F C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 958+ 74A0 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
 958+ 74A2             >                org     $-1                 // alter last byte of Name just above to set
 958+ 74A1 C3          >                db      {b $} | END_BIT     // msb as name end
 958+ 74A2             >
 958+ 74A2 86 74       >                dw      last_NFA            // Link to previous definition Name
 958+ 74A4             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 958+ 74A4 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 958+ 74A6             >                else
 958+ 74A6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 958+ 74A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 958+ 74A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 958+ 74A6             >
 958+ 74A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 959+ 74A6 94 6E DD 6B                  dw      STATE, FETCH            // state @
 960+ 74AA                                                              // if
 961+ 74AA 7D 64                        dw      ZBRANCH
 962+ 74AC 12 00                        dw      Dot_C_Else - $
 963+ 74AE 79 71 5F 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
 964+ 74B2 10 74 F8 6B                  dw          WORD, CFETCH        //      word c@
 965+ 74B6 87 6A 2B 6F                  dw          ONE_PLUS, ALLOT     //      1+ allot
 966+ 74BA                                                              // else
 967+ 74BA 66 64                        dw      BRANCH
 968+ 74BC 08 00                        dw      Dot_C_Endif - $
 969+ 74BE              Dot_C_Else:
 970+ 74BE 10 74 6D 72                  dw          WORD, COUNT, TYPE   //      word count type
 970+ 74C2 93 72
 971+ 74C4              Dot_C_Endif:                                    // endif
 972+ 74C4 BD 69                        dw      EXIT                    ;
 973+ 74C6
 974+ 74C6              //  ______________________________________________________________________
 975+ 74C6              //
 976+ 74C6              // ."           c --
 977+ 74C6                              Colon_Def DOT_QUOTE,  '."', is_immediate
 977+ 74C6             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
 977+ 74C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 977+ 74C6             >
 977+ 74C6             >                // dummy db directives used to calculate length of namec
 977+ 74C6 2E 22       >                db      '."'
 977+ 74C8             >len_NFA         defl    $ - temp_NFA
 977+ 74C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 977+ 74C6             >
 977+ 74C6 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 977+ 74C7 2E 22       >                db      '."'               // name string in 7-bit ascii, but
 977+ 74C9             >                org     $-1                 // alter last byte of Name just above to set
 977+ 74C8 A2          >                db      {b $} | END_BIT     // msb as name end
 977+ 74C9             >
 977+ 74C9 9F 74       >                dw      last_NFA            // Link to previous definition Name
 977+ 74CB             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 977+ 74CB CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 977+ 74CD             >                else
 977+ 74CD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 977+ 74CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 977+ 74CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 977+ 74CD             >
 977+ 74CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 978+ 74CD 43 64 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 979+ 74D1 A4 74                        dw      DOT_C                   // [compile] .c
 980+ 74D3 BD 69                        dw      EXIT                    // ; immediate
 981+ 74D5
 982+ 74D5              //  ______________________________________________________________________
 983+ 74D5              //
 984+ 74D5              // .(           c --
 985+ 74D5                              Colon_Def DOT_BRACKET,  ".(", is_immediate
 985+ 74D5             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
 985+ 74D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 985+ 74D5             >
 985+ 74D5             >                // dummy db directives used to calculate length of namec
 985+ 74D5 2E 28       >                db      ".("
 985+ 74D7             >len_NFA         defl    $ - temp_NFA
 985+ 74D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 985+ 74D5             >
 985+ 74D5 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 985+ 74D6 2E 28       >                db      ".("               // name string in 7-bit ascii, but
 985+ 74D8             >                org     $-1                 // alter last byte of Name just above to set
 985+ 74D7 A8          >                db      {b $} | END_BIT     // msb as name end
 985+ 74D8             >
 985+ 74D8 C6 74       >                dw      last_NFA            // Link to previous definition Name
 985+ 74DA             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 985+ 74DA CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 985+ 74DC             >                else
 985+ 74DC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 985+ 74DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 985+ 74DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 985+ 74DC             >
 985+ 74DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 986+ 74DC 43 64 29 00                  dw      LIT, ")"                // [char] )
 987+ 74E0 A4 74                        dw      DOT_C                   // [compile] .c
 988+ 74E2 BD 69                        dw      EXIT                    // ; immediate
 989+ 74E4
 990+ 74E4              //  ______________________________________________________________________
 991+ 74E4              //
 992+ 74E4              // (sgn)        a -- a f
 993+ 74E4              // determines if char in addr a is a sign (+ or -), and in that case increments
 994+ 74E4              // a flag. Returns f as the sign, true for negative, false for positive.
 995+ 74E4              // called by NUMBER and (EXP)
 996+ 74E4                              Colon_Def CSGN,  "(SGN)", is_normal
 996+ 74E4             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
 996+ 74E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 996+ 74E4             >
 996+ 74E4             >                // dummy db directives used to calculate length of namec
 996+ 74E4 28 53 47 4E >                db      "(SGN)"
 996+ 74E8 29          >
 996+ 74E9             >len_NFA         defl    $ - temp_NFA
 996+ 74E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 996+ 74E4             >
 996+ 74E4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 996+ 74E5 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
 996+ 74E9 29          >
 996+ 74EA             >                org     $-1                 // alter last byte of Name just above to set
 996+ 74E9 A9          >                db      {b $} | END_BIT     // msb as name end
 996+ 74EA             >
 996+ 74EA D5 74       >                dw      last_NFA            // Link to previous definition Name
 996+ 74EC             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 996+ 74EC CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 996+ 74EE             >                else
 996+ 74EE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 996+ 74EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 996+ 74EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 996+ 74EE             >
 996+ 74EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 997+ 74EE 4A 6B 87 6A                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
 997+ 74F2 F8 6B
 998+ 74F4 4A 6B 43 64                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
 998+ 74F8 2D 00 7D 6F
 999+ 74FC                                                              // if
1000+ 74FC 7D 64                        dw      ZBRANCH
1001+ 74FE 12 00                        dw      CSgn_Else_0 - $
1002+ 7500 15 6B                        dw          DROP                //      drop
1003+ 7502 87 6A                        dw          ONE_PLUS            //      1+
1004+ 7504 51 6D A7 6E                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1004+ 7508 BA 6B
1005+ 750A 51 6D                        dw          ONE                 //      1
1006+ 750C                                                              // else
1007+ 750C 66 64                        dw      BRANCH
1008+ 750E 16 00                        dw      CSgn_Endif_0 - $
1009+ 7510              CSgn_Else_0:
1010+ 7510 43 64 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1010+ 7514 7D 6F
1011+ 7516                                                              //      if
1012+ 7516 7D 64                        dw          ZBRANCH
1013+ 7518 0A 00                        dw          CSgn_Endif_1 - $
1014+ 751A 87 6A                        dw              ONE_PLUS        //          1+
1015+ 751C 51 6D A7 6E                  dw              ONE, DPL        //          1 dpl
1016+ 7520 BA 6B                        dw              PLUSSTORE       //          +!
1017+ 7522              CSgn_Endif_1                                    //      endif
1018+ 7522 49 6D                        dw          ZERO                //      0
1019+ 7524              CSgn_Endif_0:                                   // endif
1020+ 7524 BD 69                        dw      EXIT
1021+ 7526
1022+ 7526              //  ______________________________________________________________________
1023+ 7526              //
1024+ 7526              // (number)     d a -- d1 a1
1025+ 7526              // using the current BASE parse characters stored in address a
1026+ 7526              // accumulating a double precision integer d
1027+ 7526              // the process stops at the first not-convertible character
1028+ 7526              // A double-number is kept in CPU registers as HLDE.
1029+ 7526              // On the stack a double number is treated as two single numbers
1030+ 7526              // where HL is on the top of the stack and DE is the second from top,
1031+ 7526              // so in the stack memory it appears as LHED.
1032+ 7526              // Instead, in 2VARIABLE a double number is stored as EDLH.
1033+ 7526                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1033+ 7526             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1033+ 7526             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1033+ 7526             >
1033+ 7526             >                // dummy db directives used to calculate length of namec
1033+ 7526 28 4E 55 4D >                db      "(NUMBER)"
1033+ 752A 42 45 52 29 >
1033+ 752E             >len_NFA         defl    $ - temp_NFA
1033+ 752E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1033+ 7526             >
1033+ 7526 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1033+ 7527 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1033+ 752B 42 45 52 29 >
1033+ 752F             >                org     $-1                 // alter last byte of Name just above to set
1033+ 752E A9          >                db      {b $} | END_BIT     // msb as name end
1033+ 752F             >
1033+ 752F E4 74       >                dw      last_NFA            // Link to previous definition Name
1033+ 7531             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1033+ 7531 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1033+ 7533             >                else
1033+ 7533 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1033+ 7533             >                endif           ; ok        // for other definitions it "points" the correct handler
1033+ 7533             >                // Use of "; ok" to suppress "warning[fwdref]"
1033+ 7533             >
1033+ 7533             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1034+ 7533                                                              // begin
1035+ 7533              CNumber_Begin:
1036+ 7533 87 6A                        dw          ONE_PLUS            //      1+
1037+ 7535 4A 6B E6 69                  dw          DUP, TO_R           //      dup >r
1038+ 7539 F8 6B                        dw          CFETCH              //      @
1039+ 753B 9E 6E DD 6B                  dw          BASE, FETCH         //      base @
1040+ 753F 23 65                        dw          DIGIT               //      digit
1041+ 7541                                                              // while
1042+ 7541 7D 64                        dw      ZBRANCH
1043+ 7543 2C 00                        dw      CNumber_While_end - $
1044+ 7545 3D 6B                        dw          SWAP                //      swap
1045+ 7547 9E 6E DD 6B                  dw          BASE, FETCH         //      base @
1046+ 754B E0 68                        dw          UM_MUL              //      um*
1047+ 754D 15 6B 57 6B                  dw          DROP, ROT           //      drop rot
1048+ 7551 9E 6E DD 6B                  dw          BASE, FETCH         //      base @
1049+ 7555 E0 68                        dw          UM_MUL              //      um*
1050+ 7557 6B 6A                        dw          DPLUS               //      d+
1051+ 7559 A7 6E DD 6B                  dw          DPL, FETCH          //      dpl @
1052+ 755D 87 6A                        dw          ONE_PLUS            //      1+
1053+ 755F                                                              //      if
1054+ 755F 7D 64                        dw          ZBRANCH
1055+ 7561 08 00                        dw          CNumber_Endif - $
1056+ 7563 51 6D A7 6E                  dw              ONE, DPL        //          1 dpl
1057+ 7567 BA 6B                        dw              PLUSSTORE       //          +!
1058+ 7569              CNumber_Endif:                                  //      endif
1059+ 7569 FA 69                        dw             R_TO             //      r>  ( balance rp )
1060+ 756B 66 64                        dw      BRANCH
1061+ 756D C6 FF                        dw      CNumber_Begin - $
1062+ 756F              CNumber_While_end:                              // repeat
1063+ 756F FA 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1064+ 7571 BD 69                        dw      EXIT                    // ;
1065+ 7573
1066+ 7573              //  ______________________________________________________________________
1067+ 7573              //
1068+ 7573              // number       a -- d
1069+ 7573                              Colon_Def NUMBER,  "NUMBER", is_normal
1069+ 7573             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1069+ 7573             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1069+ 7573             >
1069+ 7573             >                // dummy db directives used to calculate length of namec
1069+ 7573 4E 55 4D 42 >                db      "NUMBER"
1069+ 7577 45 52       >
1069+ 7579             >len_NFA         defl    $ - temp_NFA
1069+ 7579             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1069+ 7573             >
1069+ 7573 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1069+ 7574 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1069+ 7578 45 52       >
1069+ 757A             >                org     $-1                 // alter last byte of Name just above to set
1069+ 7579 D2          >                db      {b $} | END_BIT     // msb as name end
1069+ 757A             >
1069+ 757A 26 75       >                dw      last_NFA            // Link to previous definition Name
1069+ 757C             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1069+ 757C CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1069+ 757E             >                else
1069+ 757E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1069+ 757E             >                endif           ; ok        // for other definitions it "points" the correct handler
1069+ 757E             >                // Use of "; ok" to suppress "warning[fwdref]"
1069+ 757E             >
1069+ 757E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1070+ 757E 49 6D 49 6D                  dw      ZERO, ZERO              // 0 0
1071+ 7582 57 6B                        dw      ROT                     // rot
1072+ 7584 EC 74 E6 69                  dw      CSGN, TO_R              // (sgn) >r
1073+ 7588 6A 6D A7 6E                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1073+ 758C EA 6B
1074+ 758E 31 75                        dw      CNUMBER                 // (number)
1075+ 7590 4A 6B F8 6B                  dw      DUP, CFETCH             // dup c@
1076+ 7594 43 64 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1076+ 7598 7D 6F
1077+ 759A                                                              // if
1078+ 759A 7D 64                        dw      ZBRANCH
1079+ 759C 0A 00                        dw      Number_Endif_1 - $
1080+ 759E 49 6D A7 6E                  dw          ZERO, DPL, STORE    //      0 dpl !
1080+ 75A2 EA 6B
1081+ 75A4 31 75                        dw          CNUMBER             //      (number)
1082+ 75A6              Number_Endif_1:                                 // endif
1083+ 75A6 F8 6B 73 6D                  dw      CFETCH, BL              // c@ bl
1084+ 75AA 6F 6F 49 6D                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1084+ 75AE E6 70
1085+ 75B0 FA 69                        dw      R_TO                    // r>
1086+ 75B2                                                              // if
1087+ 75B2 7D 64                        dw      ZBRANCH
1088+ 75B4 04 00                        dw      Number_Endif_2 - $
1089+ 75B6 E7 6A                        dw          DMINUS              //      dminus
1090+ 75B8              Number_Endif_2:                                 // endif
1091+ 75B8 BD 69                        dw      EXIT                    // ;
1092+ 75BA
1093+ 75BA              //  ______________________________________________________________________
1094+ 75BA              //
1095+ 75BA              // -find        a -- d
1096+ 75BA                              Colon_Def LFIND,  "-FIND", is_normal
1096+ 75BA             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1096+ 75BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1096+ 75BA             >
1096+ 75BA             >                // dummy db directives used to calculate length of namec
1096+ 75BA 2D 46 49 4E >                db      "-FIND"
1096+ 75BE 44          >
1096+ 75BF             >len_NFA         defl    $ - temp_NFA
1096+ 75BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1096+ 75BA             >
1096+ 75BA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1096+ 75BB 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1096+ 75BF 44          >
1096+ 75C0             >                org     $-1                 // alter last byte of Name just above to set
1096+ 75BF C4          >                db      {b $} | END_BIT     // msb as name end
1096+ 75C0             >
1096+ 75C0 73 75       >                dw      last_NFA            // Link to previous definition Name
1096+ 75C2             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1096+ 75C2 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1096+ 75C4             >                else
1096+ 75C4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1096+ 75C4             >                endif           ; ok        // for other definitions it "points" the correct handler
1096+ 75C4             >                // Use of "; ok" to suppress "warning[fwdref]"
1096+ 75C4             >
1096+ 75C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1097+ 75C4 73 6D 10 74                  dw      BL, WORD                // bl word
1098+ 75C8 7C 6E DD 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1098+ 75CC DD 6B
1099+ 75CE 98 65                        dw      C_FIND                  // (find)
1100+ 75D0 F5 6F                        dw      QDUP                    // ?dup
1101+ 75D2 1B 6A                        dw      ZEQUAL                  // 0=
1102+ 75D4                                                              // if
1103+ 75D4 7D 64                        dw      ZBRANCH
1104+ 75D6 08 00                        dw      LFind_Endif - $
1105+ 75D8 1B 6F                        dw          HERE                //      here
1106+ 75DA 62 70                        dw          LATEST              //      latest
1107+ 75DC 98 65                        dw          C_FIND              //      (find)
1108+ 75DE              LFind_Endif:                                    // endif
1109+ 75DE BD 69                        dw      EXIT                    // ;
1110+ 75E0
1111+ 75E0              //  ______________________________________________________________________
1112+ 75E0              //
1113+ 75E0              // (abort)      --
1114+ 75E0                              Colon_Def CABORT,  "(ABORT)", is_normal
1114+ 75E0             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1114+ 75E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1114+ 75E0             >
1114+ 75E0             >                // dummy db directives used to calculate length of namec
1114+ 75E0 28 41 42 4F >                db      "(ABORT)"
1114+ 75E4 52 54 29    >
1114+ 75E7             >len_NFA         defl    $ - temp_NFA
1114+ 75E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1114+ 75E0             >
1114+ 75E0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1114+ 75E1 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1114+ 75E5 52 54 29    >
1114+ 75E8             >                org     $-1                 // alter last byte of Name just above to set
1114+ 75E7 A9          >                db      {b $} | END_BIT     // msb as name end
1114+ 75E8             >
1114+ 75E8 BA 75       >                dw      last_NFA            // Link to previous definition Name
1114+ 75EA             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1114+ 75EA CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1114+ 75EC             >                else
1114+ 75EC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1114+ 75EC             >                endif           ; ok        // for other definitions it "points" the correct handler
1114+ 75EC             >                // Use of "; ok" to suppress "warning[fwdref]"
1114+ 75EC             >
1114+ 75EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1115+ 75EC B1 78                        dw      ABORT                   // abort
1116+ 75EE BD 69                        dw      EXIT                    // ;
1117+ 75F0
1118+ 75F0              //  ______________________________________________________________________
1119+ 75F0              //
1120+ 75F0              // error        n --
1121+ 75F0              // raise an error
1122+ 75F0              // if WARNING is 0, prints "MSG#n".
1123+ 75F0              // if WARNING is 1, prints line n of screen 4.
1124+ 75F0              // if WARNING is -1 does (ABORT) that normally does ABORT
1125+ 75F0              // value can be negative or beyond block 4.
1126+ 75F0                              Colon_Def ERROR,  "ERROR", is_normal
1126+ 75F0             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1126+ 75F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1126+ 75F0             >
1126+ 75F0             >                // dummy db directives used to calculate length of namec
1126+ 75F0 45 52 52 4F >                db      "ERROR"
1126+ 75F4 52          >
1126+ 75F5             >len_NFA         defl    $ - temp_NFA
1126+ 75F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1126+ 75F0             >
1126+ 75F0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1126+ 75F1 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1126+ 75F5 52          >
1126+ 75F6             >                org     $-1                 // alter last byte of Name just above to set
1126+ 75F5 D2          >                db      {b $} | END_BIT     // msb as name end
1126+ 75F6             >
1126+ 75F6 E0 75       >                dw      last_NFA            // Link to previous definition Name
1126+ 75F8             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1126+ 75F8 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1126+ 75FA             >                else
1126+ 75FA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1126+ 75FA             >                endif           ; ok        // for other definitions it "points" the correct handler
1126+ 75FA             >                // Use of "; ok" to suppress "warning[fwdref]"
1126+ 75FA             >
1126+ 75FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1127+ 75FA F4 6D DD 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1127+ 75FE 36 6A
1128+ 7600                                                              // if
1129+ 7600 7D 64                        dw      ZBRANCH
1130+ 7602 04 00                        dw      Error_Endif_1 - $
1131+ 7604 EA 75                        dw          CABORT              //      (abort)
1132+ 7606              Error_Endif_1:                                  // endif
1133+ 7606 1B 6F 6D 72                  dw      HERE, COUNT, TYPE       // here count type
1133+ 760A 93 72
1134+ 760C 5F 74                        dw      C_DOT_QUOTE             // .( ? )
1135+ 760E 02 3F 20                     db      2, "? "
1136+ 7611 96 7A                        dw      MESSAGE                 // message  ( forward )
1137+ 7613 CB 6D DD 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1137+ 7617 96 69
1138+ 7619 48 6E DD 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1138+ 761D F5 6F
1139+ 761F                                                              // if
1140+ 761F 7D 64                        dw      ZBRANCH
1141+ 7621 08 00                        dw      Error_Endif_2 - $
1142+ 7623 51 6E DD 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1142+ 7627 3D 6B
1143+ 7629              Error_Endif_2:                                  // endif
1144+ 7629 70 78                        dw      QUIT                    // quit ( forward )
1145+ 762B BD 69                        dw      EXIT                    // ;
1146+ 762D              //  ______________________________________________________________________
1147+ 762D              //
1148+ 762D              // id.          nfa --
1149+ 762D                              Colon_Def ID_DOT,  "ID.", is_normal
1149+ 762D             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1149+ 762D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1149+ 762D             >
1149+ 762D             >                // dummy db directives used to calculate length of namec
1149+ 762D 49 44 2E    >                db      "ID."
1149+ 7630             >len_NFA         defl    $ - temp_NFA
1149+ 7630             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1149+ 762D             >
1149+ 762D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1149+ 762E 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1149+ 7631             >                org     $-1                 // alter last byte of Name just above to set
1149+ 7630 AE          >                db      {b $} | END_BIT     // msb as name end
1149+ 7631             >
1149+ 7631 F0 75       >                dw      last_NFA            // Link to previous definition Name
1149+ 7633             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1149+ 7633 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1149+ 7635             >                else
1149+ 7635 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1149+ 7635             >                endif           ; ok        // for other definitions it "points" the correct handler
1149+ 7635             >                // Use of "; ok" to suppress "warning[fwdref]"
1149+ 7635             >
1149+ 7635             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1150+ 7635 FD 73 43 64                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1150+ 7639 20 00 43 64
1150+ 763D 60 00
1151+ 763F AC 73                        dw      FILL                    // fill
1152+ 7641 4A 6B A0 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1152+ 7645 72 70
1153+ 7647 05 6B 6F 6F                  dw      OVER, SUBTRACT          // over -
1154+ 764B FD 73 3D 6B                  dw      PAD, SWAP               // pad swap
1155+ 764F AB 68                        dw      CMOVE                   // cmove
1156+ 7651 FD 73 6D 72                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1156+ 7655 43 64 1F 00
1157+ 7659 4F 69                        dw      AND_OP                  // and  ( use only lower bits )
1158+ 765B 93 72 2C 70                  dw      TYPE, SPACE             // type
1159+ 765F BD 69                        dw      EXIT                    // ;
1160+ 7661
1161+ 7661              //  ______________________________________________________________________
1162+ 7661              //
1163+ 7661              // code         -- cccc
1164+ 7661                              Colon_Def CODE,  "CODE", is_normal
1164+ 7661             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1164+ 7661             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1164+ 7661             >
1164+ 7661             >                // dummy db directives used to calculate length of namec
1164+ 7661 43 4F 44 45 >                db      "CODE"
1164+ 7665             >len_NFA         defl    $ - temp_NFA
1164+ 7665             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1164+ 7661             >
1164+ 7661 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1164+ 7662 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1164+ 7666             >                org     $-1                 // alter last byte of Name just above to set
1164+ 7665 C5          >                db      {b $} | END_BIT     // msb as name end
1164+ 7666             >
1164+ 7666 2D 76       >                dw      last_NFA            // Link to previous definition Name
1164+ 7668             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1164+ 7668 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1164+ 766A             >                else
1164+ 766A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1164+ 766A             >                endif           ; ok        // for other definitions it "points" the correct handler
1164+ 766A             >                // Use of "; ok" to suppress "warning[fwdref]"
1164+ 766A             >
1164+ 766A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1165+ 766A C2 75                        dw      LFIND                   // -find
1166+ 766C                                                              // if
1167+ 766C 7D 64                        dw      ZBRANCH
1168+ 766E 10 00                        dw      Code_Endif - $
1169+ 7670 15 6B                        dw          DROP                //      drop
1170+ 7672 C4 70 33 76                  dw          TO_NAME, ID_DOT     //      >name id.
1171+ 7676 43 64 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1171+ 767A 96 7A
1172+ 767C 2C 70                        dw          SPACE               //      space
1173+ 767E              Code_Endif:                                     // endif
1174+ 767E 1B 6F                        dw      HERE                    // here
1175+ 7680                                                              // ( ---- here begins NFA ---- )
1176+ 7680 4A 6B F8 6B                  dw      DUP, CFETCH             // dup c@
1177+ 7684 E7 6D DD 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1177+ 7688 C8 6F
1178+ 768A 87 6A 2B 6F                  dw      ONE_PLUS, ALLOT         // 1+ allot
1179+ 768E 4A 6B                        dw      DUP                     // dup
1180+ 7690 43 64                        dw      LIT
1181+ 7692 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1182+ 7694 D0 6B                        dw      TOGGLE                  // toggle
1183+ 7696 1B 6F 93 6A                  dw      HERE, ONE_SUBTRACT     // here 1- ( last character )
1184+ 769A 43 64 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1184+ 769E D0 6B
1185+ 76A0                                                              // ( ---- here is LFA ---- )
1186+ 76A0 62 70 37 6F                  dw      LATEST, COMMA           // latest ,
1187+ 76A4 89 6E DD 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1187+ 76A8 EA 6B
1188+ 76AA 1B 6F AF 6A                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1188+ 76AE 37 6F
1189+ 76B0 BD 69                        dw      EXIT                    // ;
1190+ 76B2
1191+ 76B2              //  ______________________________________________________________________
1192+ 76B2              //
1193+ 76B2              // create       -- cccc     ( compile time )
1194+ 76B2              //              -- a        ( run time )
1195+ 76B2                              Colon_Def CREATE,  "CREATE", is_normal
1195+ 76B2             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1195+ 76B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1195+ 76B2             >
1195+ 76B2             >                // dummy db directives used to calculate length of namec
1195+ 76B2 43 52 45 41 >                db      "CREATE"
1195+ 76B6 54 45       >
1195+ 76B8             >len_NFA         defl    $ - temp_NFA
1195+ 76B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1195+ 76B2             >
1195+ 76B2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1195+ 76B3 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1195+ 76B7 54 45       >
1195+ 76B9             >                org     $-1                 // alter last byte of Name just above to set
1195+ 76B8 C5          >                db      {b $} | END_BIT     // msb as name end
1195+ 76B9             >
1195+ 76B9 61 76       >                dw      last_NFA            // Link to previous definition Name
1195+ 76BB             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1195+ 76BB CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1195+ 76BD             >                else
1195+ 76BD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1195+ 76BD             >                endif           ; ok        // for other definitions it "points" the correct handler
1195+ 76BD             >                // Use of "; ok" to suppress "warning[fwdref]"
1195+ 76BD             >
1195+ 76BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1196+ 76BD 68 76 B2 71                  dw      CODE, SMUDGE        // code smudge
1197+ 76C1
1198+ 76C1
1199+ 76C1 08 72                        dw      C_SEMICOLON_CODE
1200+ 76C3                              // this routine is called from the call coded in CFA
1201+ 76C3              Create_Ptr:
1202+ 76C3 13                           inc     de
1203+ 76C4 D5                           push    de                  // balance TOS before overwrite it
1204+ 76C5
1205+ 76C5                              next
1205+ 76C5 DD E9       >                jp      (ix)
1206+ 76C7
1207+ 76C7              //  ______________________________________________________________________
1208+ 76C7              //
1209+ 76C7              // [compile]    -- cccc     ( compile time )
1210+ 76C7                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1210+ 76C7             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1210+ 76C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1210+ 76C7             >
1210+ 76C7             >                // dummy db directives used to calculate length of namec
1210+ 76C7 5B 43 4F 4D >                db      "[COMPILE]"
1210+ 76CB 50 49 4C 45 >
1210+ 76CF 5D          >
1210+ 76D0             >len_NFA         defl    $ - temp_NFA
1210+ 76D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1210+ 76C7             >
1210+ 76C7 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1210+ 76C8 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1210+ 76CC 50 49 4C 45 >
1210+ 76D0 5D          >
1210+ 76D1             >                org     $-1                 // alter last byte of Name just above to set
1210+ 76D0 DD          >                db      {b $} | END_BIT     // msb as name end
1210+ 76D1             >
1210+ 76D1 B2 76       >                dw      last_NFA            // Link to previous definition Name
1210+ 76D3             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1210+ 76D3 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1210+ 76D5             >                else
1210+ 76D5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1210+ 76D5             >                endif           ; ok        // for other definitions it "points" the correct handler
1210+ 76D5             >                // Use of "; ok" to suppress "warning[fwdref]"
1210+ 76D5             >
1210+ 76D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1211+ 76D5 C2 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1212+ 76D7 1B 6A                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1213+ 76D9 49 6D E6 70                  dw      ZERO, QERROR            // 0 ?error
1214+ 76DD 15 6B                        dw      DROP                    // drop       (  cfa  )
1215+ 76DF 37 6F                        dw      COMMA                   // ,
1216+ 76E1 BD 69                        dw      EXIT                    // ; immediate
1217+ 76E3
1218+ 76E3              //  ______________________________________________________________________
1219+ 76E3              //
1220+ 76E3              // literal      n --      ( compile time )
1221+ 76E3                              Colon_Def LITERAL,  "LITERAL", is_immediate
1221+ 76E3             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1221+ 76E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1221+ 76E3             >
1221+ 76E3             >                // dummy db directives used to calculate length of namec
1221+ 76E3 4C 49 54 45 >                db      "LITERAL"
1221+ 76E7 52 41 4C    >
1221+ 76EA             >len_NFA         defl    $ - temp_NFA
1221+ 76EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1221+ 76E3             >
1221+ 76E3 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1221+ 76E4 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1221+ 76E8 52 41 4C    >
1221+ 76EB             >                org     $-1                 // alter last byte of Name just above to set
1221+ 76EA CC          >                db      {b $} | END_BIT     // msb as name end
1221+ 76EB             >
1221+ 76EB C7 76       >                dw      last_NFA            // Link to previous definition Name
1221+ 76ED             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1221+ 76ED CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1221+ 76EF             >                else
1221+ 76EF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1221+ 76EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1221+ 76EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1221+ 76EF             >
1221+ 76EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1222+ 76EF 94 6E DD 6B                  dw      STATE, FETCH            // state @
1223+ 76F3                                                              // if
1224+ 76F3 7D 64                        dw      ZBRANCH
1225+ 76F5 08 00                        dw      Literal_Endif - $
1226+ 76F7 79 71 43 64                  dw          COMPILE, LIT        //      compile lit
1227+ 76FB 37 6F                        dw          COMMA               //      ,
1228+ 76FD              Literal_Endif:                                  // endif
1229+ 76FD BD 69                        dw      EXIT                    // ; immediate
1230+ 76FF
1231+ 76FF              //  ______________________________________________________________________
1232+ 76FF              //
1233+ 76FF              // dliteral     n --      ( compile time )
1234+ 76FF                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1234+ 76FF             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1234+ 76FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1234+ 76FF             >
1234+ 76FF             >                // dummy db directives used to calculate length of namec
1234+ 76FF 44 4C 49 54 >                db      "DLITERAL"
1234+ 7703 45 52 41 4C >
1234+ 7707             >len_NFA         defl    $ - temp_NFA
1234+ 7707             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1234+ 76FF             >
1234+ 76FF C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1234+ 7700 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1234+ 7704 45 52 41 4C >
1234+ 7708             >                org     $-1                 // alter last byte of Name just above to set
1234+ 7707 CC          >                db      {b $} | END_BIT     // msb as name end
1234+ 7708             >
1234+ 7708 E3 76       >                dw      last_NFA            // Link to previous definition Name
1234+ 770A             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1234+ 770A CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1234+ 770C             >                else
1234+ 770C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1234+ 770C             >                endif           ; ok        // for other definitions it "points" the correct handler
1234+ 770C             >                // Use of "; ok" to suppress "warning[fwdref]"
1234+ 770C             >
1234+ 770C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1235+ 770C 94 6E DD 6B                  dw      STATE, FETCH            // state @
1236+ 7710                                                              // if
1237+ 7710 7D 64                        dw      ZBRANCH
1238+ 7712 08 00                        dw      DLiteral_Endif - $
1239+ 7714 3D 6B                        dw          SWAP                //      swap
1240+ 7716 ED 76 ED 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1241+ 771A              DLiteral_Endif:                                 // endif
1242+ 771A BD 69                        dw      EXIT                    // ; immediate
1243+ 771C
1244+ 771C              //  ______________________________________________________________________
1245+ 771C              //
1246+ 771C              // [char]       n --      ( compile time )
1247+ 771C              // inside colon definition, gets first character from next input word
1248+ 771C              // and compiles it as literal.
1249+ 771C                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1249+ 771C             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1249+ 771C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1249+ 771C             >
1249+ 771C             >                // dummy db directives used to calculate length of namec
1249+ 771C 5B 43 48 41 >                db      "[CHAR]"
1249+ 7720 52 5D       >
1249+ 7722             >len_NFA         defl    $ - temp_NFA
1249+ 7722             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1249+ 771C             >
1249+ 771C C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1249+ 771D 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1249+ 7721 52 5D       >
1249+ 7723             >                org     $-1                 // alter last byte of Name just above to set
1249+ 7722 DD          >                db      {b $} | END_BIT     // msb as name end
1249+ 7723             >
1249+ 7723 FF 76       >                dw      last_NFA            // Link to previous definition Name
1249+ 7725             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1249+ 7725 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1249+ 7727             >                else
1249+ 7727 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1249+ 7727             >                endif           ; ok        // for other definitions it "points" the correct handler
1249+ 7727             >                // Use of "; ok" to suppress "warning[fwdref]"
1249+ 7727             >
1249+ 7727             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1250+ 7727 7A 74 ED 76                  dw      CHAR, LITERAL           // char [compile] literal
1251+ 772B BD 69                        dw      EXIT                    // ; immediate
1252+ 772D
1253+ 772D              //  ______________________________________________________________________
1254+ 772D              //
1255+ 772D              // 0x00         n --      ( compile time )
1256+ 772D                              Colon_Def NUL_WORD,  $00, is_immediate
1256+ 772D             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1256+ 772D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1256+ 772D             >
1256+ 772D             >                // dummy db directives used to calculate length of namec
1256+ 772D 00          >                db      $00
1256+ 772E             >len_NFA         defl    $ - temp_NFA
1256+ 772E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1256+ 772D             >
1256+ 772D C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1256+ 772E 00          >                db      $00               // name string in 7-bit ascii, but
1256+ 772F             >                org     $-1                 // alter last byte of Name just above to set
1256+ 772E 80          >                db      {b $} | END_BIT     // msb as name end
1256+ 772F             >
1256+ 772F 1C 77       >                dw      last_NFA            // Link to previous definition Name
1256+ 7731             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1256+ 7731 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1256+ 7733             >                else
1256+ 7733 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1256+ 7733             >                endif           ; ok        // for other definitions it "points" the correct handler
1256+ 7733             >                // Use of "; ok" to suppress "warning[fwdref]"
1256+ 7733             >
1256+ 7733             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1257+ 7733 48 6E DD 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1257+ 7737 51 6D
1258+ 7739 BA 6F                        dw      GREATER                 // > if
1259+ 773B                                                              // if
1260+ 773B 7D 64                        dw      ZBRANCH
1261+ 773D 28 00                        dw      Nul_Else_1 - $
1262+ 773F 51 6D 48 6E                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1262+ 7743 BA 6B
1263+ 7745 49 6D 51 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
1263+ 7749 EA 6B
1264+ 774B 48 6E DD 6B                  dw          BLK, FETCH          //      blk @
1265+ 774F 95 6D                        dw          BSCR                //      b/scr
1266+ 7751 93 6A                        dw          ONE_SUBTRACT        //      1 -
1267+ 7753 4F 69                        dw          AND_OP              //      and  ( this is tricky )
1268+ 7755 1B 6A                        dw          ZEQUAL              //      0=
1269+ 7757                                                              //      if
1270+ 7757 7D 64                        dw          ZBRANCH
1271+ 7759 08 00                        dw          Nul_Endif_2 - $
1272+ 775B 18 71                        dw              QEXEC           //          ?exec
1273+ 775D FA 69 15 6B                  dw              R_TO, DROP      //          r> drop
1274+ 7761              Nul_Endif_2:                                    //      endif
1275+ 7761 66 64                        dw      BRANCH
1276+ 7763 06 00                        dw      Nul_Endif_1 - $
1277+ 7765              Nul_Else_1:                                     // else
1278+ 7765 FA 69 15 6B                  dw          R_TO, DROP          //      r> drop
1279+ 7769              Nul_Endif_1:                                    // endif
1280+ 7769 BD 69                        dw      EXIT                    // ;
1281+ 776B
1282+ 776B              //  ______________________________________________________________________
1283+ 776B              //
1284+ 776B              // ?stack       --
1285+ 776B              // Raise error #1 if stack is empty and you pop it
1286+ 776B              // Raise error #7 if stack is full.
1287+ 776B              // This means SP must always stay between HERE and FFFF
1288+ 776B              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1289+ 776B              // for Next 8K MMU paging this is $DOE8
1290+ 776B                              Colon_Def QSTACK, "?STACK", is_normal
1290+ 776B             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1290+ 776B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1290+ 776B             >
1290+ 776B             >                // dummy db directives used to calculate length of namec
1290+ 776B 3F 53 54 41 >                db      "?STACK"
1290+ 776F 43 4B       >
1290+ 7771             >len_NFA         defl    $ - temp_NFA
1290+ 7771             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1290+ 776B             >
1290+ 776B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1290+ 776C 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1290+ 7770 43 4B       >
1290+ 7772             >                org     $-1                 // alter last byte of Name just above to set
1290+ 7771 CB          >                db      {b $} | END_BIT     // msb as name end
1290+ 7772             >
1290+ 7772 2D 77       >                dw      last_NFA            // Link to previous definition Name
1290+ 7774             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1290+ 7774 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1290+ 7776             >                else
1290+ 7776 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1290+ 7776             >                endif           ; ok        // for other definitions it "points" the correct handler
1290+ 7776             >                // Use of "; ok" to suppress "warning[fwdref]"
1290+ 7776             >
1290+ 7776             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1291+ 7776 87 69                        dw      SPFETCH                 // sp@
1292+ 7778 CB 6D DD 6B                  dw      S0, FETCH               // s0 @
1293+ 777C 3D 6B 8A 6F                  dw      SWAP, ULESS             // swap u<
1294+ 7780 51 6D E6 70                  dw      ONE, QERROR             // 1 ?error
1295+ 7784 1B 6F                        dw      HERE                    // here
1296+ 7786 CB 6D DD 6B                  dw      S0, FETCH, LESS         // s0 @ <
1296+ 778A 9E 6F
1297+ 778C                                                              // if
1298+ 778C 7D 64                        dw      ZBRANCH
1299+ 778E 14 00                        dw      QStack_Endif - $
1300+ 7790 87 69                        dw          SPFETCH             //      sp@
1301+ 7792 1B 6F 43 64                  dw          HERE, LIT, 128      //      here 128
1301+ 7796 80 00
1302+ 7798 5E 6A 8A 6F                  dw          PLUS, ULESS         //      plus u<
1303+ 779C 43 64 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1303+ 77A0 E6 70
1304+ 77A2              QStack_Endif:                                   // endif
1305+ 77A2 BD 69                        dw      EXIT                    // ;
1306+ 77A4
1307+ 77A4
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
 110  77A4                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
   1+ 77A4              //  ______________________________________________________________________
   2+ 77A4              //
   3+ 77A4              //  L2.asm
   4+ 77A4              //
   5+ 77A4              //  Level-2
   6+ 77A4              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 77A4              //  ______________________________________________________________________
   8+ 77A4
   9+ 77A4
  10+ 77A4              //  ______________________________________________________________________
  11+ 77A4              //
  12+ 77A4              // interpret    --
  13+ 77A4              // This is the text interpreter.
  14+ 77A4              // It executes or compiles, depending on STATE, the text coming from
  15+ 77A4              // current input stream.
  16+ 77A4              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 77A4              // the word is interpreted as numeric and converted, using current BASE,
  18+ 77A4              // leaving on top of stack a single or double precision number, depending
  19+ 77A4              // on the presence of a decimal point.
  20+ 77A4              // If the number conversion fails, the terminal is notified with ? followed
  21+ 77A4              // by the offending word.
  22+ 77A4                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 77A4             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 77A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 77A4             >
  22+ 77A4             >                // dummy db directives used to calculate length of namec
  22+ 77A4 49 4E 54 45 >                db      "INTERPRET"
  22+ 77A8 52 50 52 45 >
  22+ 77AC 54          >
  22+ 77AD             >len_NFA         defl    $ - temp_NFA
  22+ 77AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 77A4             >
  22+ 77A4 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 77A5 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 77A9 52 50 52 45 >
  22+ 77AD 54          >
  22+ 77AE             >                org     $-1                 // alter last byte of Name just above to set
  22+ 77AD D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 77AE             >
  22+ 77AE 6B 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 77B0             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 77B0 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 77B2             >                else
  22+ 77B2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  22+ 77B2             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 77B2             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 77B2             >
  22+ 77B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 77B2
  24+ 77B2              Interpret_Begin:                                        // begin
  25+ 77B2 C2 75                        dw          LFIND                       //      -find
  26+ 77B4                                                                      //      if
  27+ 77B4 7D 64                        dw          ZBRANCH
  28+ 77B6 1A 00                        dw          Interpret_Else_1 - $
  29+ 77B8 94 6E DD 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 77BC 9E 6F
  30+ 77BE                                                                      //          if
  31+ 77BE 7D 64                        dw              ZBRANCH
  32+ 77C0 08 00                        dw              Interpret_Else_2 - $
  33+ 77C2 37 6F                        dw                  COMMA               //              ,
  34+ 77C4                                                                      //          else
  35+ 77C4 66 64                        dw              BRANCH
  36+ 77C6 06 00                        dw              Interpret_Endif_2 - $
  37+ 77C8              Interpret_Else_2:
  38+ 77C8 58 64 F6 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77CC              Interpret_Endif_2:                                      //          endif
  40+ 77CC                                                                      //      else
  41+ 77CC 66 64                        dw          BRANCH
  42+ 77CE 1A 00                        dw          Interpret_Endif_1 - $
  43+ 77D0              Interpret_Else_1:
  44+ 77D0 1B 6F 7C 75                  dw              HERE, NUMBER            //          here number
  45+ 77D4 A7 6E DD 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77D8 87 6A
  46+ 77DA                                                                      //          if
  47+ 77DA 7D 64                        dw              ZBRANCH
  48+ 77DC 08 00                        dw              Interpret_Else_3 - $
  49+ 77DE              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77DE              //                                                      //              if
  51+ 77DE              //              dw                  ZBRANCH
  52+ 77DE              //              dw                  Interpret_Endif_4 - $
  53+ 77DE              //              dw                      ONE, ZERO       //                  1 0
  54+ 77DE              //              dw                      TWO_DROP        //                  2drop
  55+ 77DE              //Interpret_Endif_4:                                      //              endif
  56+ 77DE 0A 77                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77E0                                                                      //          else
  58+ 77E0 66 64                        dw              BRANCH
  59+ 77E2 06 00                        dw              Interpret_Endif_3 - $
  60+ 77E4              Interpret_Else_3:
  61+ 77E4 15 6B                        dw                  DROP                //              drop
  62+ 77E6 ED 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77E8              Interpret_Endif_3:                                      //          endif
  64+ 77E8              Interpret_Endif_1:                                      //      endif
  65+ 77E8 74 77                        dw          QSTACK                      //      ?stack
  66+ 77EA A6 67                        dw          QTERMINAL                   //      ?terminal
  67+ 77EC                                                                      //      if
  68+ 77EC 7D 64                        dw          ZBRANCH
  69+ 77EE 04 00                        dw          Interpret_Endif_5 - $
  70+ 77F0 EA 75                        dw              CABORT                  //          (abort)
  71+ 77F2              Interpret_Endif_5:                                      //      endif
  72+ 77F2 66 64                        dw      BRANCH
  73+ 77F4 BE FF                        dw      Interpret_Begin - $
  74+ 77F6 BD 69                        dw      EXIT                            // ;
  75+ 77F8
  76+ 77F8              //  ______________________________________________________________________
  77+ 77F8              //
  78+ 77F8              // vocabulary   -- cccc     ( compile time )
  79+ 77F8              // Defining word used in the form   VOCABULARY cccc
  80+ 77F8              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 77F8              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 77F8              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 77F8              // so new definitions can be inserted in that vocabulary.
  84+ 77F8                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 77F8             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 77F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 77F8             >
  84+ 77F8             >                // dummy db directives used to calculate length of namec
  84+ 77F8 56 4F 43 41 >                db      "VOCABULARY"
  84+ 77FC 42 55 4C 41 >
  84+ 7800 52 59       >
  84+ 7802             >len_NFA         defl    $ - temp_NFA
  84+ 7802             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 77F8             >
  84+ 77F8 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 77F9 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 77FD 42 55 4C 41 >
  84+ 7801 52 59       >
  84+ 7803             >                org     $-1                 // alter last byte of Name just above to set
  84+ 7802 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 7803             >
  84+ 7803 A4 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 7805             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 7805 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 7807             >                else
  84+ 7807 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  84+ 7807             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 7807             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 7807             >
  84+ 7807             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 7807
  86+ 7807 36 72                        dw      CBUILDS
  87+ 7809
  88+ 7809 43 64 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 780D 37 6F
  89+ 780F 89 6E DD 6B                  dw      CURRENT, FETCH          // current @
  90+ 7813 B9 6A 37 6F                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 7817 1B 6F                        dw      HERE                    // here
  92+ 7819 15 6E DD 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 781D 37 6F
  93+ 781F 15 6E EA 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 7823
  95+ 7823 46 72                        dw      DOES_TO                 // does>
  96+ 7825              Vocabulary_Does:
  97+ 7825 AF 6A                        dw      CELL_PLUS               // cell+
  98+ 7827 7C 6E EA 6B                  dw      CONTEXT, STORE          // context !
  99+ 782B BD 69                        dw      EXIT                    // ;
 100+ 782D
 101+ 782D              //  ______________________________________________________________________
 102+ 782D              //
 103+ 782D              // forth        --
 104+ 782D              // Name of the first vocabulary.
 105+ 782D              // It makes FORTH the CONTEXT vocabulary.
 106+ 782D              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 782D              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 782D              // of a colon definition to be able to select the vocabulary.
 109+ 782D
 110+ 782D                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 782D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 782D             >
 110+ 782D             >                // dummy db directives used to calculate length of namec
 110+ 782D 46 4F 52 54 >                db      "FORTH"
 110+ 7831 48          >
 110+ 7832             >len_NFA         defl    $ - temp_NFA
 110+ 7832             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 782D             >
 110+ 782D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 782E 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 7832 48          >
 110+ 7833             >                org     $-1                 // alter last byte of Name just above to set
 110+ 7832 C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 7833             >
 110+ 7833 F8 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 7835             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 7835 52 72       >                dw      Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 7837             >                else
 110+ 7837 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 110+ 7837             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 7837             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 7837             >
 110+ 7837             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 7837 25 78                        dw      Vocabulary_Does
 112+ 7839 81 A0                        db      $81, $A0
 113+ 783B              Forth_Latest_Ptr:
 114+ 783B 2F 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 783D              Voclink_Ptr:
 116+ 783D 00 00                        dw      0
 117+ 783F              // Any new vocabulary is structured as follow:
 118+ 783F              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 783F              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 783F              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 783F              //       at creations it points to the null-word of its parent vocabulary
 122+ 783F              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 783F              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 783F              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 783F              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 783F              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 783F              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 783F
 129+ 783F              //  ______________________________________________________________________
 130+ 783F              //
 131+ 783F              // definitions  --
 132+ 783F              // Used in the form  cccc DEFINITIONS
 133+ 783F              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 783F              // vocabulary cccc.
 135+ 783F                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 783F             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 783F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 783F             >
 135+ 783F             >                // dummy db directives used to calculate length of namec
 135+ 783F 44 45 46 49 >                db      "DEFINITIONS"
 135+ 7843 4E 49 54 49 >
 135+ 7847 4F 4E 53    >
 135+ 784A             >len_NFA         defl    $ - temp_NFA
 135+ 784A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 783F             >
 135+ 783F 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7840 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 7844 4E 49 54 49 >
 135+ 7848 4F 4E 53    >
 135+ 784B             >                org     $-1                 // alter last byte of Name just above to set
 135+ 784A D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 784B             >
 135+ 784B 2D 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 784D             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 784D CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 784F             >                else
 135+ 784F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 135+ 784F             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 784F             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 784F             >
 135+ 784F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 784F 7C 6E DD 6B                  dw      CONTEXT, FETCH          // context @
 137+ 7853 89 6E EA 6B                  dw      CURRENT, STORE          // current !
 138+ 7857 BD 69                        dw      EXIT                    // ;
 139+ 7859
 140+ 7859              //  ______________________________________________________________________
 141+ 7859              //
 142+ 7859              // (            -- cccc )
 143+ 7859              // the following text is interpreted as a comment until a closing )
 144+ 7859                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7859             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7859             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7859             >
 144+ 7859             >                // dummy db directives used to calculate length of namec
 144+ 7859 28          >                db      "("
 144+ 785A             >len_NFA         defl    $ - temp_NFA
 144+ 785A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7859             >
 144+ 7859 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 785A 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 785B             >                org     $-1                 // alter last byte of Name just above to set
 144+ 785A A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 785B             >
 144+ 785B 3F 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 785D             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 785D CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 785F             >                else
 144+ 785F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 785F             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 785F             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 785F             >
 144+ 785F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 785F 43 64 29 00                  dw      LIT, ")"                // [char] )
 146+ 7863 10 74 15 6B                  dw      WORD, DROP              // word drop
 147+ 7867 BD 69                        dw      EXIT                    // ;
 148+ 7869
 149+ 7869              //  ______________________________________________________________________
 150+ 7869              //
 151+ 7869              // quit         --
 152+ 7869              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7869                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7869             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7869             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7869             >
 153+ 7869             >                // dummy db directives used to calculate length of namec
 153+ 7869 51 55 49 54 >                db      "QUIT"
 153+ 786D             >len_NFA         defl    $ - temp_NFA
 153+ 786D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7869             >
 153+ 7869 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 786A 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 786E             >                org     $-1                 // alter last byte of Name just above to set
 153+ 786D D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 786E             >
 153+ 786E 59 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7870             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7870 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 7872             >                else
 153+ 7872 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 7872             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 7872             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 7872             >
 153+ 7872             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 7872
 155+ 7872 FF 6E DD 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7876 49 68 15 6B                  dw      F_CLOSE, DROP           // f_close drop
 157+ 787A 49 6D FF 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 787E EA 6B
 158+ 7880 49 6D 48 6E                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 7884 EA 6B
 159+ 7886 8F 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 7888                                                              // begin
 161+ 7888              Quit_Begin:
 162+ 7888 D3 6D DD 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 788C B0 69
 163+ 788E 9C 68                        dw      CR                      //      cr
 164+ 7890 91 73                        dw      QUERY                   //      query
 165+ 7892              Next_Breakpoint_1:
 166+ 7892 B0 77                        dw      INTERPRET               //      interpret
 167+ 7894 94 6E DD 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 7898 1B 6A
 168+ 789A                                                              //      if
 169+ 789A 7D 64                        dw      ZBRANCH
 170+ 789C 07 00                        dw      Quit_Endif - $
 171+ 789E 5F 74                        dw          C_DOT_QUOTE
 172+ 78A0 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 78A3              Quit_Endif:                                     //      else
 174+ 78A3                                                              // again
 175+ 78A3 66 64                        dw      BRANCH
 176+ 78A5 E3 FF                        dw      Quit_Begin - $
 177+ 78A7 BD 69                        dw      EXIT                    // ;
 178+ 78A9
 179+ 78A9              //  ______________________________________________________________________
 180+ 78A9              //
 181+ 78A9              // abort        --
 182+ 78A9                              Colon_Def ABORT, "ABORT", is_normal
 182+ 78A9             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 78A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 78A9             >
 182+ 78A9             >                // dummy db directives used to calculate length of namec
 182+ 78A9 41 42 4F 52 >                db      "ABORT"
 182+ 78AD 54          >
 182+ 78AE             >len_NFA         defl    $ - temp_NFA
 182+ 78AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 78A9             >
 182+ 78A9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 78AA 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 78AE 54          >
 182+ 78AF             >                org     $-1                 // alter last byte of Name just above to set
 182+ 78AE D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 78AF             >
 182+ 78AF 69 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 78B1             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 78B1 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 78B3             >                else
 182+ 78B3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 78B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 78B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 78B3             >
 182+ 78B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78B3 CB 6D DD 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 78B7 96 69
 184+ 78B9 F2 71                        dw      DECIMAL                 // decimal
 185+ 78BB 35 78                        dw      FORTH                   // [compile] forth
 186+ 78BD 4D 78                        dw      DEFINITIONS             // definitions
 187+ 78BF              Autoexec_Ptr:
 188+ 78BF 4D 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78C1 70 78                        dw      QUIT                    // quit
 190+ 78C3 BD 69                        dw      EXIT                    // ;
 191+ 78C5
 192+ 78C5              //  ______________________________________________________________________
 193+ 78C5              //
 194+ 78C5              // warm         --
 195+ 78C5                              Colon_Def WARM, "WARM", is_normal
 195+ 78C5             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78C5             >
 195+ 78C5             >                // dummy db directives used to calculate length of namec
 195+ 78C5 57 41 52 4D >                db      "WARM"
 195+ 78C9             >len_NFA         defl    $ - temp_NFA
 195+ 78C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78C5             >
 195+ 78C5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78C6 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78CA             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78C9 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78CA             >
 195+ 78CA A9 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78CC             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78CC CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78CE             >                else
 195+ 78CE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 78CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78CE             >
 195+ 78CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78CE 53 7C                        dw      BLK_INIT                // blk-init
 197+ 78D0 17 84                        dw      SPLASH                  // splash
 198+ 78D2 43 64 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78D6 10 70
 199+ 78D8 B1 78                        dw      ABORT                   // abort
 200+ 78DA BD 69                        dw      EXIT                    // exit
 201+ 78DC
 202+ 78DC              //  ______________________________________________________________________
 203+ 78DC              //
 204+ 78DC              // cold         --
 205+ 78DC                              Colon_Def COLD, "COLD", is_normal
 205+ 78DC             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78DC             >
 205+ 78DC             >                // dummy db directives used to calculate length of namec
 205+ 78DC 43 4F 4C 44 >                db      "COLD"
 205+ 78E0             >len_NFA         defl    $ - temp_NFA
 205+ 78E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78DC             >
 205+ 78DC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78DD 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78E1             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78E0 C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78E1             >
 205+ 78E1 C5 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78E3             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78E3 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78E5             >                else
 205+ 78E5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 205+ 78E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78E5             >
 205+ 78E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78E5 43 64 12 64                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78E9 43 64 2E 64                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78ED DD 6B                        dw      FETCH                   // @
 209+ 78EF 43 64 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78F3 5E 6A
 210+ 78F5 43 64 14 00                  dw      LIT, 20                 // 20
 211+ 78F9 AB 68                        dw      CMOVE
 212+ 78FB 43 64 0C 64                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 78FF DD 6B                        dw      FETCH                   // @
 214+ 7901 43 64 3B 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 7905 EA 6B                        dw      STORE                   // !
 216+ 7907 49 6D 3F 6E                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 790B EA 6B
 217+ 790D 20 6E DD 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 7911 4A 6B
 218+ 7913 D3 6E EA 6B                  dw      USE, STORE              // use !
 219+ 7917 DD 6E EA 6B                  dw      PREV, STORE             // prev !
 220+ 791B 43 64 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 791F F0 6E EA 6B
 221+ 7923              //              dw      LIT, 8
 222+ 7923              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 7923 59 6D 11 6F                  dw      TWO, HP, STORE          // 2 hp !
 223+ 7927 EA 6B
 224+ 7929 CC 78        Warm_Start:     dw      WARM
 225+ 792B E3 78        Cold_Start:     dw      COLD
 226+ 792D BD 69                        dw      EXIT
 227+ 792F
 228+ 792F              //  ______________________________________________________________________
 229+ 792F              WarmRoutine:
 230+ 792F              ColdRoutine:
 231+ 792F DD 21 32 64                  ld      ix, Next_Ptr
 232+ 7933 D9                           exx
 233+ 7934 E5                           push    hl
 234+ 7935 D9                           exx
 235+ 7936
 236+ 7936 ED 73 08 64                  ld      (SP_Basic), sp
 237+ 793A ED 7B 12 64                  ld      sp, (S0_origin)
 238+ 793E              //              nop
 239+ 793E 2A 14 64                     ld      hl, (R0_origin)
 240+ 7941              //              nop
 241+ 7941                              ldrphl
 241+ 7941 22 30 64    >                ld      (RP_Pointer),hl
 242+ 7944 01 29 79                     ld      bc, Warm_Start
 243+ 7947 38 02                        jr      c, Warm_Skip
 244+ 7949 03                           inc     bc
 245+ 794A 03                           inc     bc
 246+ 794B              Warm_Skip:
 247+ 794B                              next
 247+ 794B DD E9       >                jp      (ix)
 248+ 794D
 249+ 794D              //  ______________________________________________________________________
 250+ 794D              //
 251+ 794D              // basic        --
 252+ 794D                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 794D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 794D             >
 252+ 794D             >                // dummy db directives used to calculate length of namec
 252+ 794D 42 41 53 49 >                db      "BASIC"
 252+ 7951 43          >
 252+ 7952             >len_NFA         defl    $ - temp_NFA
 252+ 7952             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 794D             >
 252+ 794D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 794E 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 7952 43          >
 252+ 7953             >                org     $-1                 // alter last byte of Name just above to set
 252+ 7952 C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 7953             >
 252+ 7953 DC 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 7955             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 7955 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 252+ 7955             >                else
 252+ 7955 57 79       >                dw      $ + 2   ; ok        // is pointed by CFA
 252+ 7957             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 7957             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 7957             >
 252+ 7957             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 7957 C1                           pop     bc
 254+ 7958 21 00 00                     ld      hl, 0
 255+ 795B 39                           add     hl, sp
 256+ 795C ED 7B 08 64                  ld      sp, (SP_Basic)
 257+ 7960              //              nop
 258+ 7960 22 08 64                     ld      (SP_Basic),hl
 259+ 7963 D9                           exx
 260+ 7964 E1                           pop     hl
 261+ 7965 D9                           exx
 262+ 7966 C9                           ret     // to Basic
 263+ 7967
 264+ 7967              //  ______________________________________________________________________
 265+ 7967              //
 266+ 7967              // +-           n1 n2 -- n3
 267+ 7967              // leaves n1 with the sign of n2 as n3.
 268+ 7967                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 7967             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 7967             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 7967             >
 268+ 7967             >                // dummy db directives used to calculate length of namec
 268+ 7967 2B 2D       >                db      "+-"
 268+ 7969             >len_NFA         defl    $ - temp_NFA
 268+ 7969             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 7967             >
 268+ 7967 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 7968 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 796A             >                org     $-1                 // alter last byte of Name just above to set
 268+ 7969 AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 796A             >
 268+ 796A 4D 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 796C             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 796C CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 796E             >                else
 268+ 796E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 268+ 796E             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 796E             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 796E             >
 268+ 796E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 796E 36 6A                        dw      ZLESS                   // 0<
 270+ 7970                                                              // if
 271+ 7970 7D 64                        dw      ZBRANCH
 272+ 7972 04 00                        dw      Plus_Minus_Endif - $
 273+ 7974 D1 6A                        dw          MINUS               //      minus
 274+ 7976              Plus_Minus_Endif:                               // endif
 275+ 7976 BD 69                        dw      EXIT                    // ;
 276+ 7978
 277+ 7978              //  ______________________________________________________________________
 278+ 7978              //
 279+ 7978              // d+-          d1 n -- d2
 280+ 7978              // leaves d1 with the sign of n as d2.
 281+ 7978                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 7978             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 7978             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 7978             >
 281+ 7978             >                // dummy db directives used to calculate length of namec
 281+ 7978 44 2B 2D    >                db      "D+-"
 281+ 797B             >len_NFA         defl    $ - temp_NFA
 281+ 797B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 7978             >
 281+ 7978 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 7979 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 797C             >                org     $-1                 // alter last byte of Name just above to set
 281+ 797B AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 797C             >
 281+ 797C 67 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 797E             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 797E CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 7980             >                else
 281+ 7980 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 281+ 7980             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 7980             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 7980             >
 281+ 7980             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 7980 36 6A                        dw      ZLESS                   // 0<
 283+ 7982                                                              // if
 284+ 7982 7D 64                        dw      ZBRANCH
 285+ 7984 04 00                        dw      DPlus_Minus_Endif - $
 286+ 7986 E7 6A                        dw          DMINUS              //      dminus
 287+ 7988              DPlus_Minus_Endif:                              // endif
 288+ 7988 BD 69                        dw      EXIT                    // ;
 289+ 798A
 290+ 798A              //  ______________________________________________________________________
 291+ 798A              //
 292+ 798A              // abs          n1 -- n2
 293+ 798A                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 798A             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 798A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 798A             >
 293+ 798A             >                // dummy db directives used to calculate length of namec
 293+ 798A 41 42 53    >                db      "ABS"
 293+ 798D             >len_NFA         defl    $ - temp_NFA
 293+ 798D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 798A             >
 293+ 798A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 798B 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 798E             >                org     $-1                 // alter last byte of Name just above to set
 293+ 798D D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 798E             >
 293+ 798E 78 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 7990             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 7990 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 7992             >                else
 293+ 7992 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 7992             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 7992             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 7992             >
 293+ 7992             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 7992 4A 6B                        dw      DUP                     // dup
 295+ 7994 6C 79                        dw      PLUS_MINUS              // +-
 296+ 7996 BD 69                        dw      EXIT                    // ;
 297+ 7998
 298+ 7998              //  ______________________________________________________________________
 299+ 7998              //
 300+ 7998              // dabs         d1 -- d2
 301+ 7998                              Colon_Def DABS, "DABS", is_normal
 301+ 7998             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 7998             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 7998             >
 301+ 7998             >                // dummy db directives used to calculate length of namec
 301+ 7998 44 41 42 53 >                db      "DABS"
 301+ 799C             >len_NFA         defl    $ - temp_NFA
 301+ 799C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 7998             >
 301+ 7998 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 7999 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 799D             >                org     $-1                 // alter last byte of Name just above to set
 301+ 799C D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 799D             >
 301+ 799D 8A 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 799F             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 799F CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 79A1             >                else
 301+ 79A1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 79A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 79A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 79A1             >
 301+ 79A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 79A1 4A 6B                        dw      DUP                     // dup
 303+ 79A3 7E 79                        dw      DPLUS_MINUS             // d+-
 304+ 79A5 BD 69                        dw      EXIT                    // ;
 305+ 79A7
 306+ 79A7              //  ______________________________________________________________________
 307+ 79A7              //
 308+ 79A7              // m*           n1 n2 -- d
 309+ 79A7              // multiply two integer giving a double
 310+ 79A7                              Colon_Def MMUL, "M*", is_normal
 310+ 79A7             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 79A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 79A7             >
 310+ 79A7             >                // dummy db directives used to calculate length of namec
 310+ 79A7 4D 2A       >                db      "M*"
 310+ 79A9             >len_NFA         defl    $ - temp_NFA
 310+ 79A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 79A7             >
 310+ 79A7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 79A8 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 79AA             >                org     $-1                 // alter last byte of Name just above to set
 310+ 79A9 AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 79AA             >
 310+ 79AA 98 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 79AC             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 79AC CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 79AE             >                else
 310+ 79AE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 79AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 79AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 79AE             >
 310+ 79AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 79AE AB 6B 74 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 79B2 E6 69
 312+ 79B4 90 79 3D 6B                  dw      ABS_OP, SWAP            // abs swap
 313+ 79B8 90 79 E0 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79BC FA 69 7E 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79C0 BD 69                        dw      EXIT                    // ;
 316+ 79C2
 317+ 79C2              //  ______________________________________________________________________
 318+ 79C2              //
 319+ 79C2              // m/mod        d n -- q r
 320+ 79C2              // multiply two integer giving a double
 321+ 79C2                              Colon_Def MDIVM, "M/MOD", is_normal
 321+ 79C2             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 321+ 79C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 79C2             >
 321+ 79C2             >                // dummy db directives used to calculate length of namec
 321+ 79C2 4D 2F 4D 4F >                db      "M/MOD"
 321+ 79C6 44          >
 321+ 79C7             >len_NFA         defl    $ - temp_NFA
 321+ 79C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 79C2             >
 321+ 79C2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 79C3 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 321+ 79C7 44          >
 321+ 79C8             >                org     $-1                 // alter last byte of Name just above to set
 321+ 79C7 C4          >                db      {b $} | END_BIT     // msb as name end
 321+ 79C8             >
 321+ 79C8 A7 79       >                dw      last_NFA            // Link to previous definition Name
 321+ 79CA             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 79CA CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 321+ 79CC             >                else
 321+ 79CC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 321+ 79CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 79CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 79CC             >
 321+ 79CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 79CC 05 6B E6 69                  dw      OVER, TO_R, TO_R        // over >r >r
 322+ 79D0 E6 69
 323+ 79D2 9F 79 0E 6A                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 323+ 79D6 90 79
 324+ 79D8 11 69                        dw      UMDIVMOD                // um/mod
 325+ 79DA FA 69                        dw      R_TO                    // r>
 326+ 79DC 0E 6A 74 69                  dw      R_OP, XOR_OP            // r xor
 327+ 79E0 6C 79 3D 6B                  dw      PLUS_MINUS, SWAP        // +- swap
 328+ 79E4 FA 69                        dw      R_TO                    // r>
 329+ 79E6 6C 79 3D 6B                  dw      PLUS_MINUS, SWAP        // +- swap
 330+ 79EA BD 69                        dw      EXIT                    // ;
 331+ 79EC
 332+ 79EC              //  ______________________________________________________________________
 333+ 79EC              //
 334+ 79EC              // m/           d n -- q
 335+ 79EC              // multiply two integer giving a double
 336+ 79EC                              Colon_Def MDIV, "M/", is_normal
 336+ 79EC             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 336+ 79EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ 79EC             >
 336+ 79EC             >                // dummy db directives used to calculate length of namec
 336+ 79EC 4D 2F       >                db      "M/"
 336+ 79EE             >len_NFA         defl    $ - temp_NFA
 336+ 79EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ 79EC             >
 336+ 79EC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ 79ED 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 336+ 79EF             >                org     $-1                 // alter last byte of Name just above to set
 336+ 79EE AF          >                db      {b $} | END_BIT     // msb as name end
 336+ 79EF             >
 336+ 79EF C2 79       >                dw      last_NFA            // Link to previous definition Name
 336+ 79F1             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 79F1 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 336+ 79F3             >                else
 336+ 79F3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 336+ 79F3             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 79F3             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 79F3             >
 336+ 79F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 79F3 CA 79 20 6B                  dw      MDIVM, NIP
 338+ 79F7 BD 69                        dw      EXIT                    // ;
 339+ 79F9
 340+ 79F9              //  ______________________________________________________________________
 341+ 79F9              //
 342+ 79F9              // *            n1 n2 -- n3
 343+ 79F9              // multiply two integer
 344+ 79F9                              Colon_Def MUL, "*", is_normal
 344+ 79F9             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 344+ 79F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ 79F9             >
 344+ 79F9             >                // dummy db directives used to calculate length of namec
 344+ 79F9 2A          >                db      "*"
 344+ 79FA             >len_NFA         defl    $ - temp_NFA
 344+ 79FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ 79F9             >
 344+ 79F9 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ 79FA 2A          >                db      "*"               // name string in 7-bit ascii, but
 344+ 79FB             >                org     $-1                 // alter last byte of Name just above to set
 344+ 79FA AA          >                db      {b $} | END_BIT     // msb as name end
 344+ 79FB             >
 344+ 79FB EC 79       >                dw      last_NFA            // Link to previous definition Name
 344+ 79FD             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 79FD CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 79FF             >                else
 344+ 79FF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 344+ 79FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 79FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 79FF             >
 344+ 79FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 79FF AC 79 15 6B                  dw      MMUL, DROP              // m* drop
 346+ 7A03 BD 69                        dw      EXIT                    // ;
 347+ 7A05
 348+ 7A05              //  ______________________________________________________________________
 349+ 7A05              //
 350+ 7A05              // /mod         n1 n2 -- n3 n4
 351+ 7A05              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 352+ 7A05              // The remainder has the sign of n1
 353+ 7A05                              Colon_Def DIVMOD, "/MOD", is_normal
 353+ 7A05             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 353+ 7A05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ 7A05             >
 353+ 7A05             >                // dummy db directives used to calculate length of namec
 353+ 7A05 2F 4D 4F 44 >                db      "/MOD"
 353+ 7A09             >len_NFA         defl    $ - temp_NFA
 353+ 7A09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ 7A05             >
 353+ 7A05 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ 7A06 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 353+ 7A0A             >                org     $-1                 // alter last byte of Name just above to set
 353+ 7A09 C4          >                db      {b $} | END_BIT     // msb as name end
 353+ 7A0A             >
 353+ 7A0A F9 79       >                dw      last_NFA            // Link to previous definition Name
 353+ 7A0C             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 7A0C CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 353+ 7A0E             >                else
 353+ 7A0E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 353+ 7A0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 7A0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 7A0E             >
 353+ 7A0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 7A0E E6 69 5B 6F                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 354+ 7A12 FA 69
 355+ 7A14 CA 79                        dw      MDIVM                   // m/mod
 356+ 7A16 BD 69                        dw      EXIT                    // ;
 357+ 7A18
 358+ 7A18              //  ______________________________________________________________________
 359+ 7A18              //
 360+ 7A18              // /            n1 n2 -- n3
 361+ 7A18              // division
 362+ 7A18                              Colon_Def DIV, "/", is_normal
 362+ 7A18             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 362+ 7A18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 362+ 7A18             >
 362+ 7A18             >                // dummy db directives used to calculate length of namec
 362+ 7A18 2F          >                db      "/"
 362+ 7A19             >len_NFA         defl    $ - temp_NFA
 362+ 7A19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 362+ 7A18             >
 362+ 7A18 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 362+ 7A19 2F          >                db      "/"               // name string in 7-bit ascii, but
 362+ 7A1A             >                org     $-1                 // alter last byte of Name just above to set
 362+ 7A19 AF          >                db      {b $} | END_BIT     // msb as name end
 362+ 7A1A             >
 362+ 7A1A 05 7A       >                dw      last_NFA            // Link to previous definition Name
 362+ 7A1C             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 362+ 7A1C CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 362+ 7A1E             >                else
 362+ 7A1E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 362+ 7A1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 362+ 7A1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 362+ 7A1E             >
 362+ 7A1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 363+ 7A1E 0C 7A 20 6B                  dw      DIVMOD, NIP             // /mod nip
 364+ 7A22 BD 69                        dw      EXIT                    // ;
 365+ 7A24
 366+ 7A24              //  ______________________________________________________________________
 367+ 7A24              //
 368+ 7A24              // mod          n1 n2 -- n3
 369+ 7A24                              Colon_Def MOD, "MOD", is_normal
 369+ 7A24             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 369+ 7A24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ 7A24             >
 369+ 7A24             >                // dummy db directives used to calculate length of namec
 369+ 7A24 4D 4F 44    >                db      "MOD"
 369+ 7A27             >len_NFA         defl    $ - temp_NFA
 369+ 7A27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ 7A24             >
 369+ 7A24 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ 7A25 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 369+ 7A28             >                org     $-1                 // alter last byte of Name just above to set
 369+ 7A27 C4          >                db      {b $} | END_BIT     // msb as name end
 369+ 7A28             >
 369+ 7A28 18 7A       >                dw      last_NFA            // Link to previous definition Name
 369+ 7A2A             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 7A2A CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 369+ 7A2C             >                else
 369+ 7A2C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 369+ 7A2C             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 7A2C             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 7A2C             >
 369+ 7A2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 7A2C 0C 7A 15 6B                  dw      DIVMOD, DROP            // /mod drop
 371+ 7A30 BD 69                        dw      EXIT                    // ;
 372+ 7A32
 373+ 7A32              //  ______________________________________________________________________
 374+ 7A32              //
 375+ 7A32              // */mod        n1 n2 n3 -- n4 n5
 376+ 7A32              // leaves the quotient n5 and the remainder n4 of the operation
 377+ 7A32              // (n1 * n2) / n3. The intermediate passage through a double number
 378+ 7A32              // avoids loss of precision
 379+ 7A32                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 379+ 7A32             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 379+ 7A32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ 7A32             >
 379+ 7A32             >                // dummy db directives used to calculate length of namec
 379+ 7A32 2A 2F 4D 4F >                db      "*/MOD"
 379+ 7A36 44          >
 379+ 7A37             >len_NFA         defl    $ - temp_NFA
 379+ 7A37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ 7A32             >
 379+ 7A32 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ 7A33 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 379+ 7A37 44          >
 379+ 7A38             >                org     $-1                 // alter last byte of Name just above to set
 379+ 7A37 C4          >                db      {b $} | END_BIT     // msb as name end
 379+ 7A38             >
 379+ 7A38 24 7A       >                dw      last_NFA            // Link to previous definition Name
 379+ 7A3A             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 7A3A CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 379+ 7A3C             >                else
 379+ 7A3C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 379+ 7A3C             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 7A3C             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 7A3C             >
 379+ 7A3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 7A3C E6 69 AC 79                  dw      TO_R, MMUL              // >r  m*
 381+ 7A40 FA 69 CA 79                  dw      R_TO, MDIVM             // r>  m/mod
 382+ 7A44 BD 69                        dw      EXIT                    // ;
 383+ 7A46
 384+ 7A46              //  ______________________________________________________________________
 385+ 7A46              //
 386+ 7A46              // */          n1 n2 n3 -- n4
 387+ 7A46              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 388+ 7A46                              Colon_Def MUL_DIV, "*/", is_normal
 388+ 7A46             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 388+ 7A46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ 7A46             >
 388+ 7A46             >                // dummy db directives used to calculate length of namec
 388+ 7A46 2A 2F       >                db      "*/"
 388+ 7A48             >len_NFA         defl    $ - temp_NFA
 388+ 7A48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ 7A46             >
 388+ 7A46 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ 7A47 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 388+ 7A49             >                org     $-1                 // alter last byte of Name just above to set
 388+ 7A48 AF          >                db      {b $} | END_BIT     // msb as name end
 388+ 7A49             >
 388+ 7A49 32 7A       >                dw      last_NFA            // Link to previous definition Name
 388+ 7A4B             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 7A4B CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 7A4D             >                else
 388+ 7A4D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 388+ 7A4D             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 7A4D             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 7A4D             >
 388+ 7A4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 7A4D 3A 7A                        dw     MUL_DIV_MOD              // */mod
 390+ 7A4F 20 6B                        dw     NIP                      // nip
 391+ 7A51 BD 69                        dw     EXIT                     // ;
 392+ 7A53
 393+ 7A53
 394+ 7A53              //  ______________________________________________________________________
 395+ 7A53              //
 396+ 7A53              // m/mod        ud1 u2 -- u3 ud4
 397+ 7A53              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 398+ 7A53              // All terms are unsigned.
 399+ 7A53              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 400+ 7A53              //              dw      TO_R                    // >r           ( ud1 )
 401+ 7A53              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 402+ 7A53              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 403+ 7A53              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 404+ 7A53              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 405+ 7A53              //              dw      EXIT                    // ;
 406+ 7A53
 407+ 7A53              //  ______________________________________________________________________
 408+ 7A53              //
 409+ 7A53              // (line)       n1 n2 -- a b
 410+ 7A53              // sends the line n1 of block n2 to the disk buffer.
 411+ 7A53              // it returns the address a and ca counter b = C/L meaning a whole line.
 412+ 7A53                              Colon_Def CLINE, "(LINE)", is_normal
 412+ 7A53             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 412+ 7A53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 412+ 7A53             >
 412+ 7A53             >                // dummy db directives used to calculate length of namec
 412+ 7A53 28 4C 49 4E >                db      "(LINE)"
 412+ 7A57 45 29       >
 412+ 7A59             >len_NFA         defl    $ - temp_NFA
 412+ 7A59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 412+ 7A53             >
 412+ 7A53 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 412+ 7A54 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 412+ 7A58 45 29       >
 412+ 7A5A             >                org     $-1                 // alter last byte of Name just above to set
 412+ 7A59 A9          >                db      {b $} | END_BIT     // msb as name end
 412+ 7A5A             >
 412+ 7A5A 46 7A       >                dw      last_NFA            // Link to previous definition Name
 412+ 7A5C             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 412+ 7A5C CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 412+ 7A5E             >                else
 412+ 7A5E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 412+ 7A5E             >                endif           ; ok        // for other definitions it "points" the correct handler
 412+ 7A5E             >                // Use of "; ok" to suppress "warning[fwdref]"
 412+ 7A5E             >
 412+ 7A5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 413+ 7A5E E6 69                        dw      TO_R                    // >r
 414+ 7A60 F6 6C                        dw      NOOP                    // noop
 415+ 7A62 7D 6D                        dw      CL                      // c/l
 416+ 7A64 89 6D 3A 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 417+ 7A68 FA 69                        dw      R_TO                    // r>
 418+ 7A6A 95 6D FD 79                  dw      BSCR, MUL, PLUS         // b/scr * +
 418+ 7A6E 5E 6A
 419+ 7A70 6B 7D                        dw      BLOCK                   // block   ( forward )
 420+ 7A72 5E 6A                        dw      PLUS                    // +
 421+ 7A74 F6 6C                        dw      NOOP                    // noop
 422+ 7A76 7D 6D                        dw      CL                      // c/l
 423+ 7A78 BD 69                        dw      EXIT                    // ;
 424+ 7A7A
 425+ 7A7A              //  ______________________________________________________________________
 426+ 7A7A              //
 427+ 7A7A              // .line        n1 n2 --
 428+ 7A7A              // Sends to output line  n1  of screen n2.
 429+ 7A7A                              Colon_Def DOT_LINE, ".LINE", is_normal
 429+ 7A7A             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 429+ 7A7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 429+ 7A7A             >
 429+ 7A7A             >                // dummy db directives used to calculate length of namec
 429+ 7A7A 2E 4C 49 4E >                db      ".LINE"
 429+ 7A7E 45          >
 429+ 7A7F             >len_NFA         defl    $ - temp_NFA
 429+ 7A7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 429+ 7A7A             >
 429+ 7A7A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 429+ 7A7B 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 429+ 7A7F 45          >
 429+ 7A80             >                org     $-1                 // alter last byte of Name just above to set
 429+ 7A7F C5          >                db      {b $} | END_BIT     // msb as name end
 429+ 7A80             >
 429+ 7A80 53 7A       >                dw      last_NFA            // Link to previous definition Name
 429+ 7A82             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 429+ 7A82 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 429+ 7A84             >                else
 429+ 7A84 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 429+ 7A84             >                endif           ; ok        // for other definitions it "points" the correct handler
 429+ 7A84             >                // Use of "; ok" to suppress "warning[fwdref]"
 429+ 7A84             >
 429+ 7A84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 430+ 7A84 5C 7A B3 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 430+ 7A88 93 72
 431+ 7A8A BD 69                        dw      EXIT                    // ;
 432+ 7A8C
 433+ 7A8C              //  ______________________________________________________________________
 434+ 7A8C              //
 435+ 7A8C              // message       n1 n2 --
 436+ 7A8C              // prints error message to current channel.
 437+ 7A8C              // if WARNING is 0, prints "MSG#n".
 438+ 7A8C              // if WARNING is 1, prints line n of screen 4.
 439+ 7A8C              // if WARNING is -1, see ERROR
 440+ 7A8C              // value can be negative or beyond block 4.
 441+ 7A8C                              Colon_Def MESSAGE, "MESSAGE", is_normal
 441+ 7A8C             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 441+ 7A8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 441+ 7A8C             >
 441+ 7A8C             >                // dummy db directives used to calculate length of namec
 441+ 7A8C 4D 45 53 53 >                db      "MESSAGE"
 441+ 7A90 41 47 45    >
 441+ 7A93             >len_NFA         defl    $ - temp_NFA
 441+ 7A93             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 441+ 7A8C             >
 441+ 7A8C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 441+ 7A8D 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 441+ 7A91 41 47 45    >
 441+ 7A94             >                org     $-1                 // alter last byte of Name just above to set
 441+ 7A93 C5          >                db      {b $} | END_BIT     // msb as name end
 441+ 7A94             >
 441+ 7A94 7A 7A       >                dw      last_NFA            // Link to previous definition Name
 441+ 7A96             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 441+ 7A96 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 441+ 7A98             >                else
 441+ 7A98 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 441+ 7A98             >                endif           ; ok        // for other definitions it "points" the correct handler
 441+ 7A98             >                // Use of "; ok" to suppress "warning[fwdref]"
 441+ 7A98             >
 441+ 7A98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 442+ 7A98 F4 6D DD 6B                  dw      WARNING, FETCH          // warning @
 443+ 7A9C                                                              // if
 444+ 7A9C 7D 64                        dw      ZBRANCH
 445+ 7A9E 18 00                        dw      Message_Else - $
 446+ 7AA0 43 64 04 00                  dw          LIT, 4              //      4
 447+ 7AA4 6F 6E DD 6B                  dw          OFFSET, FETCH       //      offset @
 448+ 7AA8 95 6D 1C 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 448+ 7AAC 6F 6F
 449+ 7AAE 82 7A                        dw          DOT_LINE            //      .line
 450+ 7AB0 2C 70                        dw          SPACE               //      space
 451+ 7AB2                                                              // else
 452+ 7AB2
 453+ 7AB2 66 64                        dw      BRANCH
 454+ 7AB4 0B 00                        dw      Message_ENdif - $
 455+ 7AB6              Message_Else:
 456+ 7AB6 5F 74                        dw          C_DOT_QUOTE         //      .( msg#)
 457+ 7AB8 04 6D 73 67                  db          4, "msg#"
 457+ 7ABC 23
 458+ 7ABD 16 83                        dw          DOT                 //      .  ( forward )
 459+ 7ABF              Message_ENdif:                                  // endif
 460+ 7ABF BD 69                        dw      EXIT                    // ;
 461+ 7AC1
 462+ 7AC1
 463+ 7AC1              //  ______________________________________________________________________
 464+ 7AC1              //
 465+ 7AC1              // device
 466+ 7AC1                              Variable_Def DEVICE,   "DEVICE",   2
 466+ 7AC1             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 466+ 7AC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 466+ 7AC1             >
 466+ 7AC1             >                // dummy db directives used to calculate length of namec
 466+ 7AC1 44 45 56 49 >                db      "DEVICE"
 466+ 7AC5 43 45       >
 466+ 7AC7             >len_NFA         defl    $ - temp_NFA
 466+ 7AC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 466+ 7AC1             >
 466+ 7AC1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 466+ 7AC2 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 466+ 7AC6 43 45       >
 466+ 7AC8             >                org     $-1                 // alter last byte of Name just above to set
 466+ 7AC7 C5          >                db      {b $} | END_BIT     // msb as name end
 466+ 7AC8             >
 466+ 7AC8 8C 7A       >                dw      last_NFA            // Link to previous definition Name
 466+ 7ACA             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 466+ 7ACA 26 6D       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 466+ 7ACC             >                else
 466+ 7ACC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 466+ 7ACC             >                endif           ; ok        // for other definitions it "points" the correct handler
 466+ 7ACC             >                // Use of "; ok" to suppress "warning[fwdref]"
 466+ 7ACC             >
 466+ 7ACC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 466+ 7ACC 02 00       >                dw      2
 467+ 7ACE
 468+ 7ACE              //  ______________________________________________________________________
 469+ 7ACE              //
 470+ 7ACE              // inkey        -- c | 0
 471+ 7ACE              // call ROM inkey$ routine, returns c or "zero".
 472+ 7ACE
 473+ 7ACE                              New_Def INKEY, "INKEY", is_code, is_normal
 473+ 7ACE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 473+ 7ACE             >
 473+ 7ACE             >                // dummy db directives used to calculate length of namec
 473+ 7ACE 49 4E 4B 45 >                db      "INKEY"
 473+ 7AD2 59          >
 473+ 7AD3             >len_NFA         defl    $ - temp_NFA
 473+ 7AD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 473+ 7ACE             >
 473+ 7ACE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 473+ 7ACF 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 473+ 7AD3 59          >
 473+ 7AD4             >                org     $-1                 // alter last byte of Name just above to set
 473+ 7AD3 D9          >                db      {b $} | END_BIT     // msb as name end
 473+ 7AD4             >
 473+ 7AD4 C1 7A       >                dw      last_NFA            // Link to previous definition Name
 473+ 7AD6             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 473+ 7AD6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 473+ 7AD6             >                else
 473+ 7AD6 D8 7A       >                dw      $ + 2   ; ok        // is pointed by CFA
 473+ 7AD8             >                endif           ; ok        // for other definitions it "points" the correct handler
 473+ 7AD8             >                // Use of "; ok" to suppress "warning[fwdref]"
 473+ 7AD8             >
 473+ 7AD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 474+ 7AD8
 475+ 7AD8 C5                           push    bc
 476+ 7AD9 ED 73 2C 64                  ld      (SP_Saved), sp
 477+ 7ADD 31 FE 63                     ld      sp, Cold_origin - 2
 478+ 7AE0 DD E5                        push    ix
 479+ 7AE2 CD E6 15                     call    $15E6                   // instead of 15E9
 480+ 7AE5 DD E1                        pop     ix
 481+ 7AE7 ED 7B 2C 64                  ld      sp, (SP_Saved)
 482+ 7AEB 6F                           ld      l, a
 483+ 7AEC 26 00                        ld      h, 0
 484+ 7AEE C1                           pop     bc
 485+ 7AEF                              psh1
 485+ 7AEF E5          >                push    hl
 485+ 7AF0 DD E9       >                jp      (ix)
 486+ 7AF2
 487+ 7AF2              //  ______________________________________________________________________
 488+ 7AF2              //
 489+ 7AF2              // select      n --
 490+ 7AF2              // selects the given channel number
 491+ 7AF2
 492+ 7AF2                              New_Def SELECT, "SELECT", is_code, is_normal
 492+ 7AF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ 7AF2             >
 492+ 7AF2             >                // dummy db directives used to calculate length of namec
 492+ 7AF2 53 45 4C 45 >                db      "SELECT"
 492+ 7AF6 43 54       >
 492+ 7AF8             >len_NFA         defl    $ - temp_NFA
 492+ 7AF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ 7AF2             >
 492+ 7AF2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ 7AF3 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 492+ 7AF7 43 54       >
 492+ 7AF9             >                org     $-1                 // alter last byte of Name just above to set
 492+ 7AF8 D4          >                db      {b $} | END_BIT     // msb as name end
 492+ 7AF9             >
 492+ 7AF9 CE 7A       >                dw      last_NFA            // Link to previous definition Name
 492+ 7AFB             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 7AFB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 492+ 7AFB             >                else
 492+ 7AFB FD 7A       >                dw      $ + 2   ; ok        // is pointed by CFA
 492+ 7AFD             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 7AFD             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 7AFD             >
 492+ 7AFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 7AFD E1                           pop     hl
 494+ 7AFE C5                           push    bc
 495+ 7AFF 7D                           ld      a, l
 496+ 7B00 ED 73 2C 64                  ld      (SP_Saved), sp
 497+ 7B04 31 FE 63                     ld      sp, Cold_origin - 2
 498+ 7B07 DD E5                        push    ix
 499+ 7B09 CD 01 16                     call    $1601
 500+ 7B0C DD E1                        pop     ix
 501+ 7B0E ED 7B 2C 64                  ld      sp, (SP_Saved)
 502+ 7B12 C1                           pop     bc
 503+ 7B13
 504+ 7B13                              next
 504+ 7B13 DD E9       >                jp      (ix)
 505+ 7B15
 506+ 7B15              //  ______________________________________________________________________
 507+ 7B15
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
 111  7B15                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
   1+ 7B15              //  ______________________________________________________________________
   2+ 7B15              //
   3+ 7B15              //  next-opt.asm
   4+ 7B15              //
   5+ 7B15              //  ZX Spectrum Next - peculiar definitions
   6+ 7B15              //  ______________________________________________________________________
   7+ 7B15
   8+ 7B15              //  ______________________________________________________________________
   9+ 7B15              //
  10+ 7B15              // reg@         n -- b
  11+ 7B15              // read Next REGister n giving byte b
  12+ 7B15
  13+ 7B15                              Colon_Def REG_FETCH, "REG@", is_normal
  13+ 7B15             >                New_Def  REG_FETCH, "REG@", Enter_Ptr, is_normal ; ok
  13+ 7B15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7B15             >
  13+ 7B15             >                // dummy db directives used to calculate length of namec
  13+ 7B15 52 45 47 40 >                db      "REG@"
  13+ 7B19             >len_NFA         defl    $ - temp_NFA
  13+ 7B19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7B15             >
  13+ 7B15 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7B16 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7B1A             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7B19 C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7B1A             >
  13+ 7B1A F2 7A       >                dw      last_NFA            // Link to previous definition Name
  13+ 7B1C             >REG_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7B1C CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 7B1E             >                else
  13+ 7B1E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 7B1E             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7B1E             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7B1E             >
  13+ 7B1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7B1E 43 64 3B 24                  dw      LIT, $243B
  15+ 7B22 50 6C                        dw      PSTORE
  16+ 7B24 43 64 3B 25                  dw      LIT, $253B
  17+ 7B28 3D 6C                        dw      PFETCH
  18+ 7B2A BD 69                        dw      EXIT
  19+ 7B2C
  20+ 7B2C              //  ______________________________________________________________________
  21+ 7B2C              //
  22+ 7B2C              // reg!         b n --
  23+ 7B2C              // write value b to Next REGister n
  24+ 7B2C
  25+ 7B2C                              Colon_Def REG_STORE, "REG!", is_normal
  25+ 7B2C             >                New_Def  REG_STORE, "REG!", Enter_Ptr, is_normal ; ok
  25+ 7B2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  25+ 7B2C             >
  25+ 7B2C             >                // dummy db directives used to calculate length of namec
  25+ 7B2C 52 45 47 21 >                db      "REG!"
  25+ 7B30             >len_NFA         defl    $ - temp_NFA
  25+ 7B30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  25+ 7B2C             >
  25+ 7B2C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  25+ 7B2D 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  25+ 7B31             >                org     $-1                 // alter last byte of Name just above to set
  25+ 7B30 A1          >                db      {b $} | END_BIT     // msb as name end
  25+ 7B31             >
  25+ 7B31 15 7B       >                dw      last_NFA            // Link to previous definition Name
  25+ 7B33             >REG_STORE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  25+ 7B33 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  25+ 7B35             >                else
  25+ 7B35 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  25+ 7B35             >                endif           ; ok        // for other definitions it "points" the correct handler
  25+ 7B35             >                // Use of "; ok" to suppress "warning[fwdref]"
  25+ 7B35             >
  25+ 7B35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  26+ 7B35 43 64 3B 24                  dw      LIT, $243B
  27+ 7B39 50 6C                        dw      PSTORE
  28+ 7B3B 43 64 3B 25                  dw      LIT, $253B
  29+ 7B3F 50 6C                        dw      PSTORE
  30+ 7B41 BD 69                        dw      EXIT
  31+ 7B43
  32+ 7B43              //  ______________________________________________________________________
  33+ 7B43              //
  34+ 7B43              // mmu7@        -- n
  35+ 7B43              // query current page in MMU7 8K-RAM : 0 and 223
  36+ 7B43
  37+ 7B43                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  37+ 7B43             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  37+ 7B43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  37+ 7B43             >
  37+ 7B43             >                // dummy db directives used to calculate length of namec
  37+ 7B43 4D 4D 55 37 >                db      "MMU7@"
  37+ 7B47 40          >
  37+ 7B48             >len_NFA         defl    $ - temp_NFA
  37+ 7B48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  37+ 7B43             >
  37+ 7B43 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  37+ 7B44 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  37+ 7B48 40          >
  37+ 7B49             >                org     $-1                 // alter last byte of Name just above to set
  37+ 7B48 C0          >                db      {b $} | END_BIT     // msb as name end
  37+ 7B49             >
  37+ 7B49 2C 7B       >                dw      last_NFA            // Link to previous definition Name
  37+ 7B4B             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  37+ 7B4B CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  37+ 7B4D             >                else
  37+ 7B4D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  37+ 7B4D             >                endif           ; ok        // for other definitions it "points" the correct handler
  37+ 7B4D             >                // Use of "; ok" to suppress "warning[fwdref]"
  37+ 7B4D             >
  37+ 7B4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  38+ 7B4D 43 64 57 00                  dw      LIT, 87, REG_FETCH
  38+ 7B51 1C 7B
  39+ 7B53 BD 69                        dw      EXIT
  40+ 7B55
  41+ 7B55              //  ______________________________________________________________________
  42+ 7B55              //
  43+ 7B55              // mmu7!        n --
  44+ 7B55              // set MMU7 8K-RAM page to n given between 0 and 223
  45+ 7B55              // optimized version that uses NEXTREG n,A Z80n op-code.
  46+ 7B55
  47+ 7B55                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  47+ 7B55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7B55             >
  47+ 7B55             >                // dummy db directives used to calculate length of namec
  47+ 7B55 4D 4D 55 37 >                db      "MMU7!"
  47+ 7B59 21          >
  47+ 7B5A             >len_NFA         defl    $ - temp_NFA
  47+ 7B5A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7B55             >
  47+ 7B55 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7B56 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  47+ 7B5A 21          >
  47+ 7B5B             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7B5A A1          >                db      {b $} | END_BIT     // msb as name end
  47+ 7B5B             >
  47+ 7B5B 43 7B       >                dw      last_NFA            // Link to previous definition Name
  47+ 7B5D             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7B5D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  47+ 7B5D             >                else
  47+ 7B5D 5F 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  47+ 7B5F             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7B5F             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7B5F             >
  47+ 7B5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7B5F E1                           pop     hl
  49+ 7B60 7D                           ld      a, l
  50+ 7B61 ED 92 57                     nextreg 87, a
  51+ 7B64
  52+ 7B64                              next
  52+ 7B64 DD E9       >                jp      (ix)
  53+ 7B66
  54+ 7B66              //  ______________________________________________________________________
  55+ 7B66              //
  56+ 7B66              // >far         ha -- a n
  57+ 7B66              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  58+ 7B66              // take lower bits of H and L as an offset from E000h
  59+ 7B66              // then return address  a  between E000h-FFFFh
  60+ 7B66              // and page number n  between 64-71 (40h-47h)
  61+ 7B66              // For example, in hex:
  62+ 7B66              //   0000 >FAR  gives  40.E000
  63+ 7B66              //   1FFF >FAR  gives  40.FFFF
  64+ 7B66              //   2000 >FAR  gives  41.E000
  65+ 7B66              //   3FFF >FAR  gives  41.FFFF
  66+ 7B66              //   EFFF >FAR  gives  47.EFFF
  67+ 7B66              //   FFFF >FAR  gives  47.FFFF
  68+ 7B66              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  69+ 7B66              //                pop     de
  70+ 7B66              //                ld      a, d
  71+ 7B66              //                and     $E0
  72+ 7B66              //                rlca
  73+ 7B66              //                rlca
  74+ 7B66              //                rlca
  75+ 7B66              //                add     $40
  76+ 7B66              //                ld      l, a
  77+ 7B66              //                ld      h, 0
  78+ 7B66              //                ld      a, d
  79+ 7B66              //                or      $E0
  80+ 7B66              //                ld      d, a
  81+ 7B66              //                push    hl
  82+ 7B66              //                push    de
  83+ 7B66              //                next
  84+ 7B66
  85+ 7B66              //  ______________________________________________________________________
  86+ 7B66              //
  87+ 7B66              // <far         a n  -- ha
  88+ 7B66              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  89+ 7B66              // reverse of >FAR: encodes a FAR address compressing
  90+ 7B66              // to bits 765 of H, lower bits of HL address offset from E000h
  91+ 7B66              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
  92+ 7B66              //                pop     de                  // page number in e
  93+ 7B66              //                pop     hl                  // address in hl
  94+ 7B66              //                ld      a, e
  95+ 7B66              //                sub     $40                 // reduced to 0-7
  96+ 7B66              //                rrca
  97+ 7B66              //                rrca
  98+ 7B66              //                rrca
  99+ 7B66              //                ld      d, a                // save to d bits 765
 100+ 7B66              //                ld      a, h                // drops
 101+ 7B66              //                and     $1F
 102+ 7B66              //                or      d
 103+ 7B66              //                ld      h, a
 104+ 7B66              //
 105+ 7B66              //                psh1
 106+ 7B66
 107+ 7B66              //  ______________________________________________________________________
 108+ 7B66              //
 109+ 7B66              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 110+ 7B66              // NextZXOS call wrapper.
 111+ 7B66              //  n1 = hl register parameter value
 112+ 7B66              //  n2 = de register parameter value
 113+ 7B66              //  n3 = bc register parameter value
 114+ 7B66              //  n4 =  a register parameter value
 115+ 7B66              //   a = routine address in ROM 3
 116+ 7B66              // ----
 117+ 7B66              //  n5 = hl returned value
 118+ 7B66              //  n6 = de returned value
 119+ 7B66              //  n7 = bc returned value
 120+ 7B66              //  n8 =  a returned value
 121+ 7B66              //   f
 122+ 7B66                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 122+ 7B66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 7B66             >
 122+ 7B66             >                // dummy db directives used to calculate length of namec
 122+ 7B66 4D 5F 50 33 >                db      "M_P3DOS"
 122+ 7B6A 44 4F 53    >
 122+ 7B6D             >len_NFA         defl    $ - temp_NFA
 122+ 7B6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 7B66             >
 122+ 7B66 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 7B67 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 122+ 7B6B 44 4F 53    >
 122+ 7B6E             >                org     $-1                 // alter last byte of Name just above to set
 122+ 7B6D D3          >                db      {b $} | END_BIT     // msb as name end
 122+ 7B6E             >
 122+ 7B6E 55 7B       >                dw      last_NFA            // Link to previous definition Name
 122+ 7B70             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 7B70 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 122+ 7B70             >                else
 122+ 7B70 72 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 7B72             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 7B72             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 7B72             >
 122+ 7B72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 7B72 D1                           pop     de                  // dos call entry address in de
 124+ 7B73 E1                           pop     hl                  // a register
 125+ 7B74 7D                           ld      a, l
 126+ 7B75 D9                           exx
 127+ 7B76 C1                           pop     bc
 128+ 7B77 D1                           pop     de
 129+ 7B78 E1                           pop     hl
 130+ 7B79 D9                           exx
 131+ 7B7A
 132+ 7B7A C5                           push    bc
 133+ 7B7B DD E5                        push    ix
 134+ 7B7D
 135+ 7B7D ED 73 2C 64                  ld      (SP_Saved), sp
 136+ 7B81 31 FE 63                     ld      sp, Cold_origin - 2
 137+ 7B84 0E 07                        ld      c, 7                // use 7 RAM Bank
 138+ 7B86
 139+ 7B86 CF                           rst     08
 140+ 7B87 94                           db      $94
 141+ 7B88
 142+ 7B88 ED 7B 2C 64                  ld      sp, (SP_Saved)
 143+ 7B8C DD E5                        push    ix
 144+ 7B8E E1                           pop     hl
 145+ 7B8F 22 2A 64                     ld      (IX_Echo), hl
 146+ 7B92              //              nop
 147+ 7B92 DD E1                        pop     ix
 148+ 7B94 E3                           ex      (sp), hl            // hl argument and retrieve bc
 149+ 7B95 D5                           push    de
 150+ 7B96 C5                           push    bc
 151+ 7B97 4D                           ld      c, l
 152+ 7B98 44                           ld      b, h
 153+ 7B99
 154+ 7B99 26 00                        ld      h, 0
 155+ 7B9B 6F                           ld      l, a
 156+ 7B9C E5                           push    hl
 157+ 7B9D ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 158+ 7B9F 23                           inc     hl                  //  0 for OK ; 1 for ko
 159+ 7BA0
 160+ 7BA0                              psh1
 160+ 7BA0 E5          >                push    hl
 160+ 7BA1 DD E9       >                jp      (ix)
 161+ 7BA3
 162+ 7BA3              //  ______________________________________________________________________
 163+ 7BA3              //
 164+ 7BA3              // blk-fh
 165+ 7BA3                              Variable_Def BLK_FH,   "BLK-FH",   1
 165+ 7BA3             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 165+ 7BA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 7BA3             >
 165+ 7BA3             >                // dummy db directives used to calculate length of namec
 165+ 7BA3 42 4C 4B 2D >                db      "BLK-FH"
 165+ 7BA7 46 48       >
 165+ 7BA9             >len_NFA         defl    $ - temp_NFA
 165+ 7BA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 7BA3             >
 165+ 7BA3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 7BA4 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 165+ 7BA8 46 48       >
 165+ 7BAA             >                org     $-1                 // alter last byte of Name just above to set
 165+ 7BA9 C8          >                db      {b $} | END_BIT     // msb as name end
 165+ 7BAA             >
 165+ 7BAA 66 7B       >                dw      last_NFA            // Link to previous definition Name
 165+ 7BAC             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 7BAC 26 6D       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 165+ 7BAE             >                else
 165+ 7BAE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 7BAE             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 7BAE             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 7BAE             >
 165+ 7BAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 7BAE 01 00       >                dw      1
 166+ 7BB0
 167+ 7BB0                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 167+ 7BB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 7BB0             >
 167+ 7BB0             >                // dummy db directives used to calculate length of namec
 167+ 7BB0 42 4C 4B 2D >                db      "BLK-FNAME"
 167+ 7BB4 46 4E 41 4D >
 167+ 7BB8 45          >
 167+ 7BB9             >len_NFA         defl    $ - temp_NFA
 167+ 7BB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 7BB0             >
 167+ 7BB0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 7BB1 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 167+ 7BB5 46 4E 41 4D >
 167+ 7BB9 45          >
 167+ 7BBA             >                org     $-1                 // alter last byte of Name just above to set
 167+ 7BB9 C5          >                db      {b $} | END_BIT     // msb as name end
 167+ 7BBA             >
 167+ 7BBA A3 7B       >                dw      last_NFA            // Link to previous definition Name
 167+ 7BBC             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 7BBC C3 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 167+ 7BBE             >                else
 167+ 7BBE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 7BBE             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 7BBE             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 7BBE             >
 167+ 7BBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 7BBE 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 168+ 7BC2 6F 63 6B 73
 168+ 7BC6 2D 36 34 2E
 168+ 7BCA 62 69 6E 00
 169+ 7BCE 00 00 00...                  ds      24
 170+ 7BE6
 171+ 7BE6              //  ______________________________________________________________________
 172+ 7BE6              //
 173+ 7BE6              // blk-seek     n --
 174+ 7BE6              // seek block n  within blocks!.bin  file
 175+ 7BE6                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 175+ 7BE6             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 175+ 7BE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 7BE6             >
 175+ 7BE6             >                // dummy db directives used to calculate length of namec
 175+ 7BE6 42 4C 4B 2D >                db      "BLK-SEEK"
 175+ 7BEA 53 45 45 4B >
 175+ 7BEE             >len_NFA         defl    $ - temp_NFA
 175+ 7BEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 7BE6             >
 175+ 7BE6 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 7BE7 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 175+ 7BEB 53 45 45 4B >
 175+ 7BEF             >                org     $-1                 // alter last byte of Name just above to set
 175+ 7BEE CB          >                db      {b $} | END_BIT     // msb as name end
 175+ 7BEF             >
 175+ 7BEF B0 7B       >                dw      last_NFA            // Link to previous definition Name
 175+ 7BF1             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 7BF1 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 175+ 7BF3             >                else
 175+ 7BF3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 7BF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 7BF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 7BF3             >
 175+ 7BF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 7BF3 89 6D AC 79                  dw  BBUF, MMUL
 177+ 7BF7 AC 7B DD 6B                  dw  BLK_FH, FETCH
 178+ 7BFB C8 67                        dw  F_SEEK
 179+ 7BFD 43 64 2D 00                  dw  LIT, $2D, QERROR
 179+ 7C01 E6 70
 180+ 7C03 BD 69                        dw  EXIT
 181+ 7C05
 182+ 7C05              //  ______________________________________________________________________
 183+ 7C05              //
 184+ 7C05              // blk-read     n --
 185+ 7C05              // seek block n  within blocks!.bin  file
 186+ 7C05                              Colon_Def BLK_READ, "BLK-READ", is_normal
 186+ 7C05             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 186+ 7C05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ 7C05             >
 186+ 7C05             >                // dummy db directives used to calculate length of namec
 186+ 7C05 42 4C 4B 2D >                db      "BLK-READ"
 186+ 7C09 52 45 41 44 >
 186+ 7C0D             >len_NFA         defl    $ - temp_NFA
 186+ 7C0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ 7C05             >
 186+ 7C05 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ 7C06 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 186+ 7C0A 52 45 41 44 >
 186+ 7C0E             >                org     $-1                 // alter last byte of Name just above to set
 186+ 7C0D C4          >                db      {b $} | END_BIT     // msb as name end
 186+ 7C0E             >
 186+ 7C0E E6 7B       >                dw      last_NFA            // Link to previous definition Name
 186+ 7C10             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 7C10 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 186+ 7C12             >                else
 186+ 7C12 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 186+ 7C12             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 7C12             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 7C12             >
 186+ 7C12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 7C12 F1 7B                        dw  BLK_SEEK
 188+ 7C14 89 6D                        dw  BBUF
 189+ 7C16 AC 7B DD 6B                  dw  BLK_FH, FETCH
 190+ 7C1A 0B 68                        dw  F_READ
 191+ 7C1C 43 64 2E 00                  dw  LIT, $2E, QERROR
 191+ 7C20 E6 70
 192+ 7C22 15 6B                        dw  DROP
 193+ 7C24 BD 69                        dw  EXIT
 194+ 7C26
 195+ 7C26              //  ______________________________________________________________________
 196+ 7C26              //
 197+ 7C26              // blk-write     n --
 198+ 7C26              // seek block n  within blocks!.bin  file
 199+ 7C26                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 199+ 7C26             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 199+ 7C26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 199+ 7C26             >
 199+ 7C26             >                // dummy db directives used to calculate length of namec
 199+ 7C26 42 4C 4B 2D >                db      "BLK-WRITE"
 199+ 7C2A 57 52 49 54 >
 199+ 7C2E 45          >
 199+ 7C2F             >len_NFA         defl    $ - temp_NFA
 199+ 7C2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 199+ 7C26             >
 199+ 7C26 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 199+ 7C27 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 199+ 7C2B 57 52 49 54 >
 199+ 7C2F 45          >
 199+ 7C30             >                org     $-1                 // alter last byte of Name just above to set
 199+ 7C2F C5          >                db      {b $} | END_BIT     // msb as name end
 199+ 7C30             >
 199+ 7C30 05 7C       >                dw      last_NFA            // Link to previous definition Name
 199+ 7C32             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 199+ 7C32 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 199+ 7C34             >                else
 199+ 7C34 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 199+ 7C34             >                endif           ; ok        // for other definitions it "points" the correct handler
 199+ 7C34             >                // Use of "; ok" to suppress "warning[fwdref]"
 199+ 7C34             >
 199+ 7C34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 200+ 7C34 F1 7B                        dw  BLK_SEEK
 201+ 7C36 89 6D                        dw  BBUF
 202+ 7C38 AC 7B DD 6B                  dw  BLK_FH, FETCH
 203+ 7C3C 2A 68                        dw  F_WRITE
 204+ 7C3E 43 64 2F 00                  dw  LIT, $2F, QERROR
 204+ 7C42 E6 70
 205+ 7C44 15 6B                        dw  DROP
 206+ 7C46 BD 69                        dw  EXIT
 207+ 7C48
 208+ 7C48              //  ______________________________________________________________________
 209+ 7C48              //
 210+ 7C48              // blk-init     n --
 211+ 7C48              // seek block n  within blocks!.bin  file
 212+ 7C48                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 212+ 7C48             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 212+ 7C48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 7C48             >
 212+ 7C48             >                // dummy db directives used to calculate length of namec
 212+ 7C48 42 4C 4B 2D >                db      "BLK-INIT"
 212+ 7C4C 49 4E 49 54 >
 212+ 7C50             >len_NFA         defl    $ - temp_NFA
 212+ 7C50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 7C48             >
 212+ 7C48 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 7C49 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 212+ 7C4D 49 4E 49 54 >
 212+ 7C51             >                org     $-1                 // alter last byte of Name just above to set
 212+ 7C50 D4          >                db      {b $} | END_BIT     // msb as name end
 212+ 7C51             >
 212+ 7C51 26 7C       >                dw      last_NFA            // Link to previous definition Name
 212+ 7C53             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 7C53 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 212+ 7C55             >                else
 212+ 7C55 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 212+ 7C55             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 7C55             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 7C55             >
 212+ 7C55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 7C55 AC 7B DD 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 213+ 7C59 49 68 15 6B
 214+ 7C5D BC 7B 87 6A                  dw  BLK_FNAME, ONE_PLUS
 215+ 7C61 1B 6F 61 6D                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 215+ 7C65 63 68
 216+ 7C67 43 64 2C 00                  dw  LIT, $2C, QERROR
 216+ 7C6B E6 70
 217+ 7C6D AC 7B EA 6B                  dw  BLK_FH, STORE
 218+ 7C71 BD 69                        dw  EXIT
 219+ 7C73
 220+ 7C73              //  ______________________________________________________________________
 221+ 7C73              //
 222+ 7C73              // #sec
 223+ 7C73              // number of 512 Byte "sector" available on thie sysstem.
 224+ 7C73              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 225+ 7C73
 226+ 7C73                              Constant_Def NSEC , "#SEC", 32767
 226+ 7C73             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 226+ 7C73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 226+ 7C73             >
 226+ 7C73             >                // dummy db directives used to calculate length of namec
 226+ 7C73 23 53 45 43 >                db      "#SEC"
 226+ 7C77             >len_NFA         defl    $ - temp_NFA
 226+ 7C77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 226+ 7C73             >
 226+ 7C73 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 226+ 7C74 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 226+ 7C78             >                org     $-1                 // alter last byte of Name just above to set
 226+ 7C77 C3          >                db      {b $} | END_BIT     // msb as name end
 226+ 7C78             >
 226+ 7C78 48 7C       >                dw      last_NFA            // Link to previous definition Name
 226+ 7C7A             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 226+ 7C7A 0D 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 226+ 7C7C             >                else
 226+ 7C7C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 226+ 7C7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 226+ 7C7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 226+ 7C7C             >
 226+ 7C7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 7C7C FF 7F       >                dw      32767
 227+ 7C7E
 228+ 7C7E              //  ______________________________________________________________________
 229+ 7C7E
 230+ 7C7E
 231+ 7C7E
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
 112  7C7E                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
   1+ 7C7E              //  ______________________________________________________________________
   2+ 7C7E              //
   3+ 7C7E              //  L3.asm
   4+ 7C7E              //
   5+ 7C7E              //  Continuation of L2.asm
   6+ 7C7E              //  I/O Block definitions
   7+ 7C7E              //  ______________________________________________________________________
   8+ 7C7E
   9+ 7C7E
  10+ 7C7E              //  ______________________________________________________________________
  11+ 7C7E              //
  12+ 7C7E              // r/w          a n f --
  13+ 7C7E              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C7E                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C7E             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C7E             >
  14+ 7C7E             >                // dummy db directives used to calculate length of namec
  14+ 7C7E 52 2F 57    >                db      "R/W"
  14+ 7C81             >len_NFA         defl    $ - temp_NFA
  14+ 7C81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C7E             >
  14+ 7C7E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C7F 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C82             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C81 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C82             >
  14+ 7C82 73 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C84             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C84 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C86             >                else
  14+ 7C86 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  14+ 7C86             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C86             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C86             >
  14+ 7C86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C86 E6 69                        dw      TO_R                    // >r
  16+ 7C88 93 6A                        dw      ONE_SUBTRACT            // 1-
  17+ 7C8A 4A 6B 36 6A                  dw      DUP, ZLESS              // dup 0<
  18+ 7C8E 05 6B 7A 7C                  dw      OVER, NSEC              // over #sec
  19+ 7C92 93 6A BA 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7C96 61 69                        dw      OR_OP                   // or
  21+ 7C98 43 64 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7C9C E6 70
  22+ 7C9E FA 69                        dw      R_TO                    // r>
  23+ 7CA0                                                              // if
  24+ 7CA0 7D 64                        dw      ZBRANCH
  25+ 7CA2 08 00                        dw      Read_Write_Else - $
  26+ 7CA4 10 7C                        dw          BLK_READ            //      blk-read
  27+ 7CA6 66 64                        dw      BRANCH
  28+ 7CA8 04 00                        dw      Read_Write_Endif - $
  29+ 7CAA              Read_Write_Else:                                // else
  30+ 7CAA 32 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CAC              Read_Write_Endif:                               // endif
  32+ 7CAC BD 69                        dw      EXIT                    // ;
  33+ 7CAE
  34+ 7CAE
  35+ 7CAE              //  ______________________________________________________________________
  36+ 7CAE              //
  37+ 7CAE              // +buf        a1 -- a2 f
  38+ 7CAE              // advences to next buffer, cyclically rotating along them
  39+ 7CAE                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CAE             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CAE             >
  39+ 7CAE             >                // dummy db directives used to calculate length of namec
  39+ 7CAE 2B 42 55 46 >                db      "+BUF"
  39+ 7CB2             >len_NFA         defl    $ - temp_NFA
  39+ 7CB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CAE             >
  39+ 7CAE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CAF 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CB3             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CB2 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CB3             >
  39+ 7CB3 7E 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CB5             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CB5 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CB7             >                else
  39+ 7CB7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  39+ 7CB7             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CB7             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CB7             >
  39+ 7CB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CB7 43 64 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CBB 5E 6A
  41+ 7CBD 4A 6B 2B 6E                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CC1 DD 6B
  42+ 7CC3 7D 6F                        dw      EQUALS                  // =
  43+ 7CC5                                                              // if
  44+ 7CC5 7D 64                        dw      ZBRANCH
  45+ 7CC7 08 00                        dw      PBuf_Endif - $
  46+ 7CC9 15 6B                        dw          DROP                //      drop
  47+ 7CCB 20 6E DD 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CCF              PBuf_Endif:                                     // endif
  49+ 7CCF 4A 6B DD 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CD3 DD 6B
  50+ 7CD5 6F 6F                        dw      SUBTRACT                // -
  51+ 7CD7 BD 69                        dw      EXIT                    // ;
  52+ 7CD9
  53+ 7CD9              //  ______________________________________________________________________
  54+ 7CD9              //
  55+ 7CD9              // update       --
  56+ 7CD9              // mark the last used block to be written to disk
  57+ 7CD9                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CD9             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CD9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CD9             >
  57+ 7CD9             >                // dummy db directives used to calculate length of namec
  57+ 7CD9 55 50 44 41 >                db      "UPDATE"
  57+ 7CDD 54 45       >
  57+ 7CDF             >len_NFA         defl    $ - temp_NFA
  57+ 7CDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CD9             >
  57+ 7CD9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CDA 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CDE 54 45       >
  57+ 7CE0             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CDF C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CE0             >
  57+ 7CE0 AE 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CE2             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CE2 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CE4             >                else
  57+ 7CE4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7CE4             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CE4             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CE4             >
  57+ 7CE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CE4 DD 6E DD 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7CE8 DD 6B
  59+ 7CEA 43 64 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7CEE 61 69
  60+ 7CF0 DD 6E DD 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7CF4 EA 6B
  61+ 7CF6 BD 69                        dw      EXIT                    // ;
  62+ 7CF8
  63+ 7CF8
  64+ 7CF8              //  ______________________________________________________________________
  65+ 7CF8              //
  66+ 7CF8              // empty-buffers --
  67+ 7CF8                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7CF8             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7CF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7CF8             >
  67+ 7CF8             >                // dummy db directives used to calculate length of namec
  67+ 7CF8 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7CFC 59 2D 42 55 >
  67+ 7D00 46 46 45 52 >
  67+ 7D04 53          >
  67+ 7D05             >len_NFA         defl    $ - temp_NFA
  67+ 7D05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7CF8             >
  67+ 7CF8 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7CF9 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7CFD 59 2D 42 55 >
  67+ 7D01 46 46 45 52 >
  67+ 7D05 53          >
  67+ 7D06             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D05 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D06             >
  67+ 7D06 D9 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D08             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D08 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D0A             >                else
  67+ 7D0A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  67+ 7D0A             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D0A             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D0A             >
  67+ 7D0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D0A 20 6E DD 6B                  dw      FIRST, FETCH            // first @
  69+ 7D0E 2B 6E DD 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D12 05 6B 6F 6F                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D16 C7 73
  71+ 7D18 BD 69                        dw      EXIT                    // ;
  72+ 7D1A
  73+ 7D1A              //  ______________________________________________________________________
  74+ 7D1A              //
  75+ 7D1A              // buffer       n -- a
  76+ 7D1A              // read block n and gives the address to a buffer
  77+ 7D1A              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D1A              // disk before reading the block n.
  79+ 7D1A
  80+ 7D1A                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D1A             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D1A             >
  80+ 7D1A             >                // dummy db directives used to calculate length of namec
  80+ 7D1A 42 55 46 46 >                db      "BUFFER"
  80+ 7D1E 45 52       >
  80+ 7D20             >len_NFA         defl    $ - temp_NFA
  80+ 7D20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D1A             >
  80+ 7D1A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D1B 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D1F 45 52       >
  80+ 7D21             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D20 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D21             >
  80+ 7D21 F8 7C       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D23             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D23 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D25             >                else
  80+ 7D25 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  80+ 7D25             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D25             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D25             >
  80+ 7D25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D25 D3 6E DD 6B                  dw      USE, FETCH              // use @
  82+ 7D29 4A 6B E6 69                  dw      DUP, TO_R               // dup >r
  83+ 7D2D                                                              // begin
  84+ 7D2D              Buffer_Begin:
  85+ 7D2D B5 7C                        dw          PBUF                //      +buf
  86+ 7D2F                                                              // until
  87+ 7D2F 7D 64                        dw      ZBRANCH
  88+ 7D31 FC FF                        dw      Buffer_Begin - $
  89+ 7D33 D3 6E EA 6B                  dw      USE, STORE              // use !
  90+ 7D37 0E 6A DD 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D3B 36 6A
  91+ 7D3D                                                              // if
  92+ 7D3D 7D 64                        dw      ZBRANCH
  93+ 7D3F 14 00                        dw      Buffer_Endif - $
  94+ 7D41 0E 6A AF 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D45 0E 6A DD 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D49 43 64 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D4D 4F 69                        dw          AND_OP              //      and
  98+ 7D4F 49 6D 84 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D53              Buffer_Endif:                                   // endif
 100+ 7D53 0E 6A EA 6B                  dw      R_OP, STORE             // r !
 101+ 7D57 0E 6A DD 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D5B EA 6B
 102+ 7D5D FA 69 AF 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D61 BD 69                        dw      EXIT                    // ;
 104+ 7D63
 105+ 7D63              //  ______________________________________________________________________
 106+ 7D63              //
 107+ 7D63              // block        n -- a
 108+ 7D63              // Leaves the buffer address that contains the block n.
 109+ 7D63              // If the block is not already present, it will be loaded from disk
 110+ 7D63              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D63              // disk before reading the block n.
 112+ 7D63              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D63
 114+ 7D63                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D63             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D63             >
 114+ 7D63             >                // dummy db directives used to calculate length of namec
 114+ 7D63 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D67 4B          >
 114+ 7D68             >len_NFA         defl    $ - temp_NFA
 114+ 7D68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D63             >
 114+ 7D63 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D64 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D68 4B          >
 114+ 7D69             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D68 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D69             >
 114+ 7D69 1A 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D6B             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D6B CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D6D             >                else
 114+ 7D6D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 114+ 7D6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D6D             >
 114+ 7D6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D6D 6F 6E DD 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D71 5E 6A E6 69                  dw      PLUS, TO_R              // + >r
 117+ 7D75 DD 6E DD 6B                  dw      PREV, FETCH             // prev @
 118+ 7D79 4A 6B DD 6B                  dw      DUP, FETCH              // dup @
 119+ 7D7D 0E 6A 6F 6F                  dw      R_OP, SUBTRACT          // r -
 120+ 7D81 4A 6B 5E 6A                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7D85                                                              // if
 122+ 7D85 7D 64                        dw        ZBRANCH
 123+ 7D87 34 00                        dw        Block_Endif_1 - $
 124+ 7D89              Block_Begin:                                    //      begin
 125+ 7D89 B5 7C 1B 6A                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7D8D                                                              //          if
 127+ 7D8D 7D 64                        dw          ZBRANCH
 128+ 7D8F 14 00                        dw          Block_Endif_2 - $
 129+ 7D91 15 6B                        dw              DROP            //              drop
 130+ 7D93 0E 6A 23 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7D97 4A 6B                        dw              DUP             //              dup
 132+ 7D99 0E 6A 51 6D                  dw              R_OP, ONE       //              r 1
 133+ 7D9D 84 7C                        dw              READ_WRITE      //              r/w
 134+ 7D9F 59 6D 6F 6F                  dw              TWO, SUBTRACT   //              2 -
 135+ 7DA3              Block_Endif_2:                                  //          endif
 136+ 7DA3 4A 6B DD 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DA7 0E 6A
 137+ 7DA9 6F 6F 4A 6B                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DAD 5E 6A 1B 6A                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DB1                                                              //      until
 140+ 7DB1 7D 64                        dw        ZBRANCH
 141+ 7DB3 D6 FF                        dw        Block_Begin - $
 142+ 7DB5 4A 6B DD 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DB9 EA 6B
 143+ 7DBB              Block_Endif_1:                                  // endif
 144+ 7DBB FA 69 15 6B                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DBF AF 6A
 145+ 7DC1 BD 69                        dw      EXIT                    // ;
 146+ 7DC3
 147+ 7DC3              //  ______________________________________________________________________
 148+ 7DC3              //
 149+ 7DC3              // #buff        -- n
 150+ 7DC3              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DC3                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DC3             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DC3             >
 151+ 7DC3             >                // dummy db directives used to calculate length of namec
 151+ 7DC3 23 42 55 46 >                db      "#BUFF"
 151+ 7DC7 46          >
 151+ 7DC8             >len_NFA         defl    $ - temp_NFA
 151+ 7DC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DC3             >
 151+ 7DC3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DC4 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DC8 46          >
 151+ 7DC9             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DC8 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DC9             >
 151+ 7DC9 63 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DCB             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DCB 0D 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DCD             >                else
 151+ 7DCD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 7DCD             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DCD             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DCD             >
 151+ 7DCD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DCD 07 00       >                dw      7
 152+ 7DCF
 153+ 7DCF              //  ______________________________________________________________________
 154+ 7DCF              //
 155+ 7DCF              // flush        --
 156+ 7DCF                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DCF             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DCF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DCF             >
 156+ 7DCF             >                // dummy db directives used to calculate length of namec
 156+ 7DCF 46 4C 55 53 >                db      "FLUSH"
 156+ 7DD3 48          >
 156+ 7DD4             >len_NFA         defl    $ - temp_NFA
 156+ 7DD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DCF             >
 156+ 7DCF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DD0 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DD4 48          >
 156+ 7DD5             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DD4 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DD5             >
 156+ 7DD5 C3 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DD7             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DD7 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DD9             >                else
 156+ 7DD9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 7DD9             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DD9             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DD9             >
 156+ 7DD9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DD9 CB 7D 87 6A                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DDD 49 6D
 158+ 7DDF              Flush_Do:                                       // do
 159+ 7DDF 05 65                        dw      C_DO
 160+ 7DE1 49 6D 23 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7DE5 15 6B
 161+ 7DE7                                                              // loop
 162+ 7DE7 92 64 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7DEB AC 7B DD 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7DEF 86 68 15 6B                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7DF3 BD 69                        dw      EXIT                    // exit
 166+ 7DF5
 167+ 7DF5              //  ______________________________________________________________________
 168+ 7DF5              //
 169+ 7DF5              // f_getline    a m fh -- n
 170+ 7DF5              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7DF5              // Address a is left for subsequent processing
 172+ 7DF5              // and n as the actual number of byte read, that is the length of line
 173+ 7DF5                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7DF5             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7DF5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7DF5             >
 173+ 7DF5             >                // dummy db directives used to calculate length of namec
 173+ 7DF5 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7DF9 54 4C 49 4E >
 173+ 7DFD 45          >
 173+ 7DFE             >len_NFA         defl    $ - temp_NFA
 173+ 7DFE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7DF5             >
 173+ 7DF5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7DF6 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7DFA 54 4C 49 4E >
 173+ 7DFE 45          >
 173+ 7DFF             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7DFE C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7DFF             >
 173+ 7DFF CF 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E01             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E01 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E03             >                else
 173+ 7E03 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 7E03             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E03             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E03             >
 173+ 7E03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E03 E6 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E05 2D 6B                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E07 0E 6A ED 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E0B 43 64 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E0F E6 70
 178+ 7E11
 179+ 7E11 99 6B 05 6B                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E15 87 6A 3D 6B                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E19
 182+ 7E19 0E 6A 0B 68                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E1D 43 64 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E21 E6 70
 184+ 7E23                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E23 7D 64                        dw      ZBRANCH
 186+ 7E25 36 00                        dw      FGetline_Else - $
 187+ 7E27 43 64 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E2B F0 65
 188+ 7E2D 15 6B 20 6B                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E31 3D 6B                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E33 43 64 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E37 F0 65
 191+ 7E39 15 6B 20 6B                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E3D 57 6B C8 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E41 4A 6B E6 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 194+ 7E45 99 6B FA 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 195+ 7E49 49 6D 6B 6A                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 196+ 7E4D FA 69 C8 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 197+ 7E51 43 64 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 197+ 7E55 E6 70
 198+ 7E57                                                              // else
 199+ 7E57 66 64                        dw      BRANCH
 200+ 7E59 0C 00                        dw      FGetline_Endif - $
 201+ 7E5B              FGetline_Else:
 202+ 7E5B FA 69                        dw          R_TO                //      r>              ( m d a fh )
 203+ 7E5D 99 6B 8B 6B                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 204+ 7E61 15 6B 49 6D                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 205+ 7E65              FGetline_Endif:                                 // endif
 206+ 7E65 E6 69 4A 6B                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 206+ 7E69 4A 6B
 207+ 7E6B 87 6A 3D 6B                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 208+ 7E6F 0E 6A AB 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 209+ 7E73 AB 6B 5E 6A                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 210+ 7E77 49 6D 3D 6B                  dw      ZERO, SWAP              // 0 swap
 211+ 7E7B B9 6A EA 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 212+ 7E7F 0E 6A 5E 6A                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 212+ 7E83 93 6A
 213+ 7E85 3D 6B 0E 6A                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 213+ 7E89 6F 6F
 214+ 7E8B D8 73                        dw      BLANKS                  // blanks
 215+ 7E8D FA 69                        dw      R_TO                    // r>                   ( n )
 216+ 7E8F BD 69                        dw      EXIT                    // ;
 217+ 7E91
 218+ 7E91              //  ______________________________________________________________________
 219+ 7E91              //
 220+ 7E91              // f_include    fh --
 221+ 7E91              // Given a filehandle includes the source from file
 222+ 7E91                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 222+ 7E91             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 222+ 7E91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 7E91             >
 222+ 7E91             >                // dummy db directives used to calculate length of namec
 222+ 7E91 46 5F 49 4E >                db      "F_INCLUDE"
 222+ 7E95 43 4C 55 44 >
 222+ 7E99 45          >
 222+ 7E9A             >len_NFA         defl    $ - temp_NFA
 222+ 7E9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 7E91             >
 222+ 7E91 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 7E92 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 222+ 7E96 43 4C 55 44 >
 222+ 7E9A 45          >
 222+ 7E9B             >                org     $-1                 // alter last byte of Name just above to set
 222+ 7E9A C5          >                db      {b $} | END_BIT     // msb as name end
 222+ 7E9B             >
 222+ 7E9B F5 7D       >                dw      last_NFA            // Link to previous definition Name
 222+ 7E9D             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 7E9D CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 7E9F             >                else
 222+ 7E9F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 222+ 7E9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 7E9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 7E9F             >
 222+ 7E9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 7E9F 48 6E DD 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 223+ 7EA3 E6 69
 224+ 7EA5 51 6E DD 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 224+ 7EA9 E6 69
 225+ 7EAB FF 6E DD 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 225+ 7EAF E6 69
 226+ 7EB1 0E 6A                        dw      R_OP                    // r
 227+ 7EB3                                                              // if
 228+ 7EB3 7D 64                        dw      ZBRANCH
 229+ 7EB5 10 00                        dw      FInclude_Else_1 - $
 230+ 7EB7 0E 6A ED 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 231+ 7EBB 43 64 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 231+ 7EBF E6 70
 232+ 7EC1                                                              // else
 233+ 7EC1 66 64                        dw      BRANCH
 234+ 7EC3 06 00                        dw      FInclude_Endif_1 - $
 235+ 7EC5              FInclude_Else_1:
 236+ 7EC5 49 6D 49 6D                  dw          ZERO, ZERO          //      0 0
 237+ 7EC9                                                              // endif
 238+ 7EC9              FInclude_Endif_1:
 239+ 7EC9 E6 69 E6 69                  dw      TO_R, TO_R              // >r >r
 240+ 7ECD FF 6E EA 6B                  dw      SOURCE_ID, STORE        // source-id !
 241+ 7ED1              FInclude_Begin:                                 // begin
 242+ 7ED1 51 6D 6B 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 242+ 7ED5 89 6D
 243+ 7ED7 AB 6B D8 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 244+ 7EDB 3D 6B 87 6A                  dw          SWAP, ONE_PLUS      //      swap 1+
 245+ 7EDF 3D 6B B9 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 246+ 7EE3 FF 6E DD 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 247+ 7EE7 01 7E                        dw          F_GETLINE           //      f_getline
 248+ 7EE9                                                              // while
 249+ 7EE9 7D 64                        dw      ZBRANCH
 250+ 7EEB 14 00                        dw      FInclude_Repeat - $
 251+ 7EED 51 6D 48 6E                  dw          ONE, BLK, STORE     //      1 blk !
 251+ 7EF1 EA 6B
 252+ 7EF3 49 6D 51 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
 252+ 7EF7 EA 6B
 253+ 7EF9 B0 77                        dw          INTERPRET           //      interpret
 254+ 7EFB 66 64                        dw      BRANCH
 255+ 7EFD D4 FF                        dw      FInclude_Begin - $
 256+ 7EFF              FInclude_Repeat:                                // repeat
 257+ 7EFF FF 6E DD 6B                  dw      SOURCE_ID, FETCH        // source-id @
 258+ 7F03 49 6D FF 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 258+ 7F07 EA 6B
 259+ 7F09 49 68                        dw      F_CLOSE                 // f_close
 260+ 7F0B 43 64 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 260+ 7F0F E6 70
 261+ 7F11 FA 69 FA 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 261+ 7F15 FA 69
 262+ 7F17 4A 6B FF 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 262+ 7F1B EA 6B
 263+ 7F1D                                                              // if
 264+ 7F1D 7D 64                        dw      ZBRANCH
 265+ 7F1F 12 00                        dw      FInclude_Else_2 - $
 266+ 7F21 FF 6E DD 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 267+ 7F25 C8 67                        dw          F_SEEK              //      f_seek
 268+ 7F27 43 64 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 268+ 7F2B E6 70
 269+ 7F2D                                                              // else
 270+ 7F2D 66 64                        dw      BRANCH
 271+ 7F2F 04 00                        dw      FInclude_Endif_2 - $
 272+ 7F31              FInclude_Else_2:
 273+ 7F31 8B 6B                        dw          TWO_DROP            //      2drop
 274+ 7F33              FInclude_Endif_2:                               // endif
 275+ 7F33 FA 69 51 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 275+ 7F37 EA 6B
 276+ 7F39 FA 69 48 6E                  dw      R_TO, BLK, STORE        // r> blk !
 276+ 7F3D EA 6B
 277+ 7F3F BD 69                        dw      EXIT                    // ;
 278+ 7F41
 279+ 7F41              //  ______________________________________________________________________
 280+ 7F41              //
 281+ 7F41              // open<         -- fh
 282+ 7F41              // Open the following filename and return it file-handle
 283+ 7F41              // Used in the form OPEN CCCC
 284+ 7F41                              Colon_Def OPEN_FH, "OPEN<", is_normal
 284+ 7F41             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 284+ 7F41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ 7F41             >
 284+ 7F41             >                // dummy db directives used to calculate length of namec
 284+ 7F41 4F 50 45 4E >                db      "OPEN<"
 284+ 7F45 3C          >
 284+ 7F46             >len_NFA         defl    $ - temp_NFA
 284+ 7F46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ 7F41             >
 284+ 7F41 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ 7F42 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 284+ 7F46 3C          >
 284+ 7F47             >                org     $-1                 // alter last byte of Name just above to set
 284+ 7F46 BC          >                db      {b $} | END_BIT     // msb as name end
 284+ 7F47             >
 284+ 7F47 91 7E       >                dw      last_NFA            // Link to previous definition Name
 284+ 7F49             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 7F49 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 284+ 7F4B             >                else
 284+ 7F4B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 284+ 7F4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 7F4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 7F4B             >
 284+ 7F4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 7F4B 73 6D                        dw      BL
 286+ 7F4D 10 74 6D 72                  dw      WORD, COUNT, OVER       // bl word count over
 286+ 7F51 05 6B
 287+ 7F53 5E 6A 49 6D                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 287+ 7F57 3D 6B EA 6B
 288+ 7F5B FD 73 51 6D                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 288+ 7F5F 63 68
 289+ 7F61 43 64 2B 00                  dw      LIT, 43                 // 43
 290+ 7F65 E6 70                        dw      QERROR                  // ?error
 291+ 7F67 BD 69                        dw      EXIT                    // ;
 292+ 7F69
 293+ 7F69              //  ______________________________________________________________________
 294+ 7F69              //
 295+ 7F69              // include      -- cccc
 296+ 7F69              // Include the following filename
 297+ 7F69                              Colon_Def INCLUDE, "INCLUDE", is_normal
 297+ 7F69             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 297+ 7F69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 297+ 7F69             >
 297+ 7F69             >                // dummy db directives used to calculate length of namec
 297+ 7F69 49 4E 43 4C >                db      "INCLUDE"
 297+ 7F6D 55 44 45    >
 297+ 7F70             >len_NFA         defl    $ - temp_NFA
 297+ 7F70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 297+ 7F69             >
 297+ 7F69 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 297+ 7F6A 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 297+ 7F6E 55 44 45    >
 297+ 7F71             >                org     $-1                 // alter last byte of Name just above to set
 297+ 7F70 C5          >                db      {b $} | END_BIT     // msb as name end
 297+ 7F71             >
 297+ 7F71 41 7F       >                dw      last_NFA            // Link to previous definition Name
 297+ 7F73             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 297+ 7F73 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 297+ 7F75             >                else
 297+ 7F75 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 297+ 7F75             >                endif           ; ok        // for other definitions it "points" the correct handler
 297+ 7F75             >                // Use of "; ok" to suppress "warning[fwdref]"
 297+ 7F75             >
 297+ 7F75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 298+ 7F75 49 7F                        dw      OPEN_FH                 // open
 299+ 7F77 4A 6B 9D 7E                  dw      DUP, F_INCLUDE          // dup f_include
 300+ 7F7B 49 68 15 6B                  dw      F_CLOSE, DROP           // f_close drop
 301+ 7F7F BD 69                        dw      EXIT                    // ;
 302+ 7F81
 303+ 7F81              //  ______________________________________________________________________
 304+ 7F81              //
 305+ 7F81              // needs
 306+ 7F81              // check for cccc exists in vocabulary
 307+ 7F81              // if it doesn't then  INCLUDE  inc/cccc.F
 308+ 7F81
 309+ 7F81              // temp filename cccc.f as counted string zero-padded
 310+ 7F81                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 310+ 7F81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 7F81             >
 310+ 7F81             >                // dummy db directives used to calculate length of namec
 310+ 7F81 4E 45 45 44 >                db      "NEEDS-W"
 310+ 7F85 53 2D 57    >
 310+ 7F88             >len_NFA         defl    $ - temp_NFA
 310+ 7F88             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 7F81             >
 310+ 7F81 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 7F82 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 310+ 7F86 53 2D 57    >
 310+ 7F89             >                org     $-1                 // alter last byte of Name just above to set
 310+ 7F88 D7          >                db      {b $} | END_BIT     // msb as name end
 310+ 7F89             >
 310+ 7F89 69 7F       >                dw      last_NFA            // Link to previous definition Name
 310+ 7F8B             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 7F8B C3 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 310+ 7F8D             >                else
 310+ 7F8D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 7F8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 7F8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 7F8D             >
 310+ 7F8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 7F8D 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 312+ 7FB0              // temp complete path+filename
 313+ 7FB0                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 313+ 7FB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 313+ 7FB0             >
 313+ 7FB0             >                // dummy db directives used to calculate length of namec
 313+ 7FB0 4E 45 45 44 >                db      "NEEDS-FN"
 313+ 7FB4 53 2D 46 4E >
 313+ 7FB8             >len_NFA         defl    $ - temp_NFA
 313+ 7FB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 313+ 7FB0             >
 313+ 7FB0 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 313+ 7FB1 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 313+ 7FB5 53 2D 46 4E >
 313+ 7FB9             >                org     $-1                 // alter last byte of Name just above to set
 313+ 7FB8 CE          >                db      {b $} | END_BIT     // msb as name end
 313+ 7FB9             >
 313+ 7FB9 81 7F       >                dw      last_NFA            // Link to previous definition Name
 313+ 7FBB             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 313+ 7FBB C3 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 313+ 7FBD             >                else
 313+ 7FBD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 313+ 7FBD             >                endif           ; ok        // for other definitions it "points" the correct handler
 313+ 7FBD             >                // Use of "; ok" to suppress "warning[fwdref]"
 313+ 7FBD             >
 313+ 7FBD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 314+ 7FBD 00 00 00...                  ds      40
 315+ 7FE5              // constant path
 316+ 7FE5                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 316+ 7FE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7FE5             >
 316+ 7FE5             >                // dummy db directives used to calculate length of namec
 316+ 7FE5 4E 45 45 44 >                db      "NEEDS-INC"
 316+ 7FE9 53 2D 49 4E >
 316+ 7FED 43          >
 316+ 7FEE             >len_NFA         defl    $ - temp_NFA
 316+ 7FEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7FE5             >
 316+ 7FE5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7FE6 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 316+ 7FEA 53 2D 49 4E >
 316+ 7FEE 43          >
 316+ 7FEF             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7FEE C3          >                db      {b $} | END_BIT     // msb as name end
 316+ 7FEF             >
 316+ 7FEF B0 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7FF1             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7FF1 C3 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7FF3             >                else
 316+ 7FF3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 316+ 7FF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7FF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7FF3             >
 316+ 7FF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7FF3 04 69 6E 63                  db      4, "inc/", 0
 317+ 7FF7 2F 00
 318+ 7FF9                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 318+ 7FF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ 7FF9             >
 318+ 7FF9             >                // dummy db directives used to calculate length of namec
 318+ 7FF9 4E 45 45 44 >                db      "NEEDS-LIB"
 318+ 7FFD 53 2D 4C 49 >
 318+ 8001 42          >
 318+ 8002             >len_NFA         defl    $ - temp_NFA
 318+ 8002             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ 7FF9             >
 318+ 7FF9 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ 7FFA 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 318+ 7FFE 53 2D 4C 49 >
 318+ 8002 42          >
 318+ 8003             >                org     $-1                 // alter last byte of Name just above to set
 318+ 8002 C2          >                db      {b $} | END_BIT     // msb as name end
 318+ 8003             >
 318+ 8003 E5 7F       >                dw      last_NFA            // Link to previous definition Name
 318+ 8005             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 8005 C3 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 318+ 8007             >                else
 318+ 8007 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 318+ 8007             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 8007             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 8007             >
 318+ 8007             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 8007 04 6C 69 62                  db      4, "lib/", 0
 319+ 800B 2F 00
 320+ 800D
 321+ 800D              // Concatenate path at a and filename and include it
 322+ 800D              // No error is issued if filename doesn't exist.
 323+ 800D                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 323+ 800D             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 323+ 800D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 323+ 800D             >
 323+ 800D             >                // dummy db directives used to calculate length of namec
 323+ 800D 4E 45 45 44 >                db      "NEEDS/"
 323+ 8011 53 2F       >
 323+ 8013             >len_NFA         defl    $ - temp_NFA
 323+ 8013             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 323+ 800D             >
 323+ 800D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 323+ 800E 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 323+ 8012 53 2F       >
 323+ 8014             >                org     $-1                 // alter last byte of Name just above to set
 323+ 8013 AF          >                db      {b $} | END_BIT     // msb as name end
 323+ 8014             >
 323+ 8014 F9 7F       >                dw      last_NFA            // Link to previous definition Name
 323+ 8016             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 323+ 8016 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 323+ 8018             >                else
 323+ 8018 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 323+ 8018             >                endif           ; ok        // for other definitions it "points" the correct handler
 323+ 8018             >                // Use of "; ok" to suppress "warning[fwdref]"
 323+ 8018             >
 323+ 8018             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 324+ 8018 6D 72 2D 6B                  dw      COUNT, TUCK             // n a n
 325+ 801C BB 7F 3D 6B                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 325+ 8020 AB 68
 326+ 8022 BB 7F 5E 6A                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 327+ 8026 8B 7F 87 6A                  dw      NEEDS_W, ONE_PLUS, SWAP
 327+ 802A 3D 6B
 328+ 802C 43 64 23 00                  dw      LIT, 35
 329+ 8030 AB 68                        dw      CMOVE
 330+ 8032 BB 7F                        dw      NEEDS_FN
 331+ 8034 FD 73 51 6D                  dw      PAD, ONE, F_OPEN
 331+ 8038 63 68
 332+ 803A 1B 6A                        dw      ZEQUAL
 333+ 803C 7D 64                        dw      ZBRANCH
 334+ 803E 08 00                        dw      Needs_1 - $
 335+ 8040 9D 7E                        dw          F_INCLUDE
 336+ 8042 66 64                        dw      BRANCH
 337+ 8044 04 00                        dw      Needs_2 - $
 338+ 8046              Needs_1:
 339+ 8046              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 340+ 8046              //              dw          LIT, 43, MESSAGE
 341+ 8046 15 6B                        dw          DROP
 342+ 8048              Needs_2:
 343+ 8048 BD 69                        dw      EXIT                    // ;
 344+ 804A
 345+ 804A
 346+ 804A                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 346+ 804A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 346+ 804A             >
 346+ 804A             >                // dummy db directives used to calculate length of namec
 346+ 804A 4E 43 44 4D >                db      "NCDM"
 346+ 804E             >len_NFA         defl    $ - temp_NFA
 346+ 804E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 346+ 804A             >
 346+ 804A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 346+ 804B 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 346+ 804F             >                org     $-1                 // alter last byte of Name just above to set
 346+ 804E CD          >                db      {b $} | END_BIT     // msb as name end
 346+ 804F             >
 346+ 804F 0D 80       >                dw      last_NFA            // Link to previous definition Name
 346+ 8051             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 346+ 8051 C3 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 346+ 8053             >                else
 346+ 8053 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 346+ 8053             >                endif           ; ok        // for other definitions it "points" the correct handler
 346+ 8053             >                // Use of "; ok" to suppress "warning[fwdref]"
 346+ 8053             >
 346+ 8053             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 347+ 8053 5E 60 25 26                  db $5E, $60, $25, $26, $24, $5F, $7B, $7D, $7E
 347+ 8057 24 5F 7B 7D
 347+ 805B 7E
 348+ 805C
 349+ 805C                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 349+ 805C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 349+ 805C             >
 349+ 805C             >                // dummy db directives used to calculate length of namec
 349+ 805C 4E 44 4F 4D >                db      "NDOM"
 349+ 8060             >len_NFA         defl    $ - temp_NFA
 349+ 8060             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 349+ 805C             >
 349+ 805C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 349+ 805D 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 349+ 8061             >                org     $-1                 // alter last byte of Name just above to set
 349+ 8060 CD          >                db      {b $} | END_BIT     // msb as name end
 349+ 8061             >
 349+ 8061 4A 80       >                dw      last_NFA            // Link to previous definition Name
 349+ 8063             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 349+ 8063 C3 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 349+ 8065             >                else
 349+ 8065 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 349+ 8065             >                endif           ; ok        // for other definitions it "points" the correct handler
 349+ 8065             >                // Use of "; ok" to suppress "warning[fwdref]"
 349+ 8065             >
 349+ 8065             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 350+ 8065 3A 3F 2F 2A                  db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 350+ 8069 7C 5C 3C 3E
 350+ 806D 22
 351+ 806E
 352+ 806E
 353+ 806E              // Replace illegal character in filename using the map here above
 354+ 806E              // at the moment we need only  "
 355+ 806E                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 355+ 806E             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 355+ 806E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 806E             >
 355+ 806E             >                // dummy db directives used to calculate length of namec
 355+ 806E 4E 45 45 44 >                db      "NEEDS-CH"
 355+ 8072 53 2D 43 48 >
 355+ 8076             >len_NFA         defl    $ - temp_NFA
 355+ 8076             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 806E             >
 355+ 806E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 806F 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 355+ 8073 53 2D 43 48 >
 355+ 8077             >                org     $-1                 // alter last byte of Name just above to set
 355+ 8076 C8          >                db      {b $} | END_BIT     // msb as name end
 355+ 8077             >
 355+ 8077 5C 80       >                dw      last_NFA            // Link to previous definition Name
 355+ 8079             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 8079 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 355+ 807B             >                else
 355+ 807B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 355+ 807B             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 807B             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 807B             >
 355+ 807B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 807B 8B 7F 6D 72                  dw      NEEDS_W, COUNT, BOUNDS
 356+ 807F 82 72
 357+ 8081 05 65                        dw      C_DO
 358+ 8083              Needs_3:
 359+ 8083 51 80 63 80                  dw          NCDM, NDOM, LIT, 9
 359+ 8087 43 64 09 00
 360+ 808B 10 65 F8 6B                  dw          I, CFETCH
 361+ 808F 2A 66                        dw          C_MAP
 362+ 8091 10 65 06 6C                  dw          I, CSTORE
 363+ 8095              Needs_4:
 364+ 8095 92 64                        dw      C_LOOP
 365+ 8097 EC FF                        dw      Needs_3 - $
 366+ 8099 BD 69                        dw      EXIT
 367+ 809B
 368+ 809B
 369+ 809B              // include  "path/cccc.f" if cccc is not defined
 370+ 809B              // filename cccc.f is temporary stored at NEEDS-W
 371+ 809B                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 371+ 809B             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 371+ 809B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 371+ 809B             >
 371+ 809B             >                // dummy db directives used to calculate length of namec
 371+ 809B 4E 45 45 44 >                db      "NEEDS-F"
 371+ 809F 53 2D 46    >
 371+ 80A2             >len_NFA         defl    $ - temp_NFA
 371+ 80A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 371+ 809B             >
 371+ 809B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 371+ 809C 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 371+ 80A0 53 2D 46    >
 371+ 80A3             >                org     $-1                 // alter last byte of Name just above to set
 371+ 80A2 C6          >                db      {b $} | END_BIT     // msb as name end
 371+ 80A3             >
 371+ 80A3 6E 80       >                dw      last_NFA            // Link to previous definition Name
 371+ 80A5             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 371+ 80A5 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 371+ 80A7             >                else
 371+ 80A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 371+ 80A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 371+ 80A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 371+ 80A7             >
 371+ 80A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 372+ 80A7 C2 75                        dw      LFIND
 373+ 80A9 7D 64                        dw      ZBRANCH
 374+ 80AB 0A 00                        dw      Needs_5 - $
 375+ 80AD
 376+ 80AD 15 6B 8B 6B                  dw          DROP, TWO_DROP
 377+ 80B1 66 64                        dw      BRANCH
 378+ 80B3 2A 00                        dw      Needs_6 - $
 379+ 80B5              Needs_5:
 380+ 80B5 8B 7F                        dw          NEEDS_W
 381+ 80B7 43 64 23 00                  dw          LIT, 35
 382+ 80BB C7 73                        dw          ERASE                   // a
 383+ 80BD 1B 6F F8 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 383+ 80C1 87 6A
 384+ 80C3 1B 6F 05 6B                  dw          HERE, OVER              // a n here n
 385+ 80C7 8B 7F 3D 6B                  dw          NEEDS_W, SWAP, CMOVE    // a n
 385+ 80CB AB 68
 386+ 80CD 79 80                        dw          NEEDS_CHECK
 387+ 80CF 8B 7F 5E 6A                  dw          NEEDS_W, PLUS           // a a1+1
 388+ 80D3 43 64 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 389+ 80D7 3D 6B EA 6B                  dw          SWAP, STORE             // a
 390+ 80DB 16 80                        dw          NEEDS_SLASH
 391+ 80DD              Needs_6:
 392+ 80DD BD 69                        dw      EXIT
 393+ 80DF
 394+ 80DF
 395+ 80DF              // check for cccc exists in vocabulary
 396+ 80DF              // if it doesn't then  INCLUDE  inc/cccc.F
 397+ 80DF              // search in inc subdirectory
 398+ 80DF                              Colon_Def NEEDS, "NEEDS", is_normal
 398+ 80DF             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 398+ 80DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 398+ 80DF             >
 398+ 80DF             >                // dummy db directives used to calculate length of namec
 398+ 80DF 4E 45 45 44 >                db      "NEEDS"
 398+ 80E3 53          >
 398+ 80E4             >len_NFA         defl    $ - temp_NFA
 398+ 80E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 398+ 80DF             >
 398+ 80DF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 398+ 80E0 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 398+ 80E4 53          >
 398+ 80E5             >                org     $-1                 // alter last byte of Name just above to set
 398+ 80E4 D3          >                db      {b $} | END_BIT     // msb as name end
 398+ 80E5             >
 398+ 80E5 9B 80       >                dw      last_NFA            // Link to previous definition Name
 398+ 80E7             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 398+ 80E7 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 398+ 80E9             >                else
 398+ 80E9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 398+ 80E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 398+ 80E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 398+ 80E9             >
 398+ 80E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 399+ 80E9 51 6E DD 6B                  dw      TO_IN, FETCH
 400+ 80ED 4A 6B                        dw      DUP
 401+ 80EF F1 7F A5 80                  dw      NEEDS_INC, NEEDS_PATH
 402+ 80F3 51 6E EA 6B                  dw      TO_IN, STORE
 403+ 80F7 05 80 A5 80                  dw      NEEDS_LIB, NEEDS_PATH
 404+ 80FB 51 6E EA 6B                  dw      TO_IN, STORE
 405+ 80FF C2 75                        dw      LFIND
 406+ 8101 7D 64                        dw      ZBRANCH
 407+ 8103 08 00                        dw      Needs_10 - $
 408+ 8105 8B 6B                        dw          TWO_DROP
 409+ 8107 66 64                        dw      BRANCH
 410+ 8109 10 00                        dw      Needs_11 - $
 411+ 810B              Needs_10:
 412+ 810B 8B 7F 6D 72                  dw      NEEDS_W, COUNT, TYPE, SPACE
 412+ 810F 93 72 2C 70
 413+ 8113 43 64 2B 00                  dw      LIT, 43, MESSAGE
 413+ 8117 96 7A
 414+ 8119              Needs_11:
 415+ 8119 BD 69                        dw      EXIT
 416+ 811B
 417+ 811B
 418+ 811B              //  ______________________________________________________________________
 419+ 811B              //
 420+ 811B              // load+        n --
 421+ 811B                              Colon_Def LOAD_P, "LOAD+", is_normal
 421+ 811B             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 421+ 811B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 811B             >
 421+ 811B             >                // dummy db directives used to calculate length of namec
 421+ 811B 4C 4F 41 44 >                db      "LOAD+"
 421+ 811F 2B          >
 421+ 8120             >len_NFA         defl    $ - temp_NFA
 421+ 8120             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 811B             >
 421+ 811B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 811C 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 421+ 8120 2B          >
 421+ 8121             >                org     $-1                 // alter last byte of Name just above to set
 421+ 8120 AB          >                db      {b $} | END_BIT     // msb as name end
 421+ 8121             >
 421+ 8121 DF 80       >                dw      last_NFA            // Link to previous definition Name
 421+ 8123             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 8123 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 421+ 8125             >                else
 421+ 8125 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 421+ 8125             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 8125             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 8125             >
 421+ 8125             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 8125 48 6E DD 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 422+ 8129 E6 69
 423+ 812B 51 6E DD 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 423+ 812F E6 69
 424+ 8131
 425+ 8131 49 6D 51 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 425+ 8135 EA 6B
 426+ 8137 95 6D FD 79                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 426+ 813B 48 6E EA 6B
 427+ 813F B0 77                        dw      INTERPRET               // interpret
 428+ 8141
 429+ 8141 FA 69 51 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 429+ 8145 EA 6B
 430+ 8147 FA 69 48 6E                  dw      R_TO, BLK, STORE        // r> blk !
 430+ 814B EA 6B
 431+ 814D BD 69                        dw      EXIT                    // ;
 432+ 814F
 433+ 814F              //  ______________________________________________________________________
 434+ 814F              //
 435+ 814F              // -->          --
 436+ 814F                              Colon_Def LOAD_NEXT, "-->", is_immediate
 436+ 814F             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 436+ 814F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 436+ 814F             >
 436+ 814F             >                // dummy db directives used to calculate length of namec
 436+ 814F 2D 2D 3E    >                db      "-->"
 436+ 8152             >len_NFA         defl    $ - temp_NFA
 436+ 8152             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 436+ 814F             >
 436+ 814F C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 436+ 8150 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 436+ 8153             >                org     $-1                 // alter last byte of Name just above to set
 436+ 8152 BE          >                db      {b $} | END_BIT     // msb as name end
 436+ 8153             >
 436+ 8153 1B 81       >                dw      last_NFA            // Link to previous definition Name
 436+ 8155             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 436+ 8155 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 436+ 8157             >                else
 436+ 8157 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 436+ 8157             >                endif           ; ok        // for other definitions it "points" the correct handler
 436+ 8157             >                // Use of "; ok" to suppress "warning[fwdref]"
 436+ 8157             >
 436+ 8157             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 437+ 8157 5F 71                        dw      QLOADING                // ?loading
 438+ 8159 49 6D 51 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 438+ 815D EA 6B
 439+ 815F 95 6D                        dw      BSCR                    // b/scr
 440+ 8161 48 6E DD 6B                  dw      BLK, FETCH              // blk @
 441+ 8165 05 6B                        dw      OVER                    // over
 442+ 8167 2A 7A                        dw      MOD                     // mod
 443+ 8169 6F 6F                        dw      SUBTRACT                // -
 444+ 816B 48 6E BA 6B                  dw      BLK, PLUSSTORE          // +!
 445+ 816F BD 69                        dw      EXIT                    // ;
 446+ 8171
 447+ 8171              //  ______________________________________________________________________
 448+ 8171              //
 449+ 8171              // '            -- xt
 450+ 8171                              Colon_Def TICK, "'", is_normal
 450+ 8171             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 450+ 8171             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 450+ 8171             >
 450+ 8171             >                // dummy db directives used to calculate length of namec
 450+ 8171 27          >                db      "'"
 450+ 8172             >len_NFA         defl    $ - temp_NFA
 450+ 8172             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 450+ 8171             >
 450+ 8171 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 450+ 8172 27          >                db      "'"               // name string in 7-bit ascii, but
 450+ 8173             >                org     $-1                 // alter last byte of Name just above to set
 450+ 8172 A7          >                db      {b $} | END_BIT     // msb as name end
 450+ 8173             >
 450+ 8173 4F 81       >                dw      last_NFA            // Link to previous definition Name
 450+ 8175             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 450+ 8175 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 450+ 8177             >                else
 450+ 8177 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 450+ 8177             >                endif           ; ok        // for other definitions it "points" the correct handler
 450+ 8177             >                // Use of "; ok" to suppress "warning[fwdref]"
 450+ 8177             >
 450+ 8177             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 451+ 8177 C2 75                        dw      LFIND                   // -find
 452+ 8179 1B 6A                        dw      ZEQUAL                  // 0=
 453+ 817B 49 6D E6 70                  dw      ZERO, QERROR            // 0 ?error
 454+ 817F 15 6B                        dw      DROP                    // drop
 455+ 8181 BD 69                        dw      EXIT                    // ;
 456+ 8183
 457+ 8183              //  ______________________________________________________________________
 458+ 8183              //
 459+ 8183              // forget       -- cccc
 460+ 8183                              Colon_Def FORGET, "FORGET", is_normal
 460+ 8183             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 460+ 8183             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 460+ 8183             >
 460+ 8183             >                // dummy db directives used to calculate length of namec
 460+ 8183 46 4F 52 47 >                db      "FORGET"
 460+ 8187 45 54       >
 460+ 8189             >len_NFA         defl    $ - temp_NFA
 460+ 8189             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 460+ 8183             >
 460+ 8183 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 460+ 8184 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 460+ 8188 45 54       >
 460+ 818A             >                org     $-1                 // alter last byte of Name just above to set
 460+ 8189 D4          >                db      {b $} | END_BIT     // msb as name end
 460+ 818A             >
 460+ 818A 71 81       >                dw      last_NFA            // Link to previous definition Name
 460+ 818C             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 460+ 818C CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 460+ 818E             >                else
 460+ 818E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 460+ 818E             >                endif           ; ok        // for other definitions it "points" the correct handler
 460+ 818E             >                // Use of "; ok" to suppress "warning[fwdref]"
 460+ 818E             >
 460+ 818E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 461+ 818E 89 6E DD 6B                  dw      CURRENT, FETCH          // current @
 462+ 8192 7C 6E DD 6B                  dw      CONTEXT, FETCH          // context @
 463+ 8196 6F 6F 43 64                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 463+ 819A 17 00 E6 70
 464+ 819E 75 81 B6 70                  dw      TICK, TO_BODY           // ' >body
 465+ 81A2 4A 6B FF 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 465+ 81A6 DD 6B
 466+ 81A8 8A 6F 43 64                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 466+ 81AC 15 00 E6 70
 467+ 81B0 4A 6B 8C 70                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 467+ 81B4 07 6E EA 6B
 468+ 81B8 72 70 DD 6B                  dw      LFA, FETCH              // lfa @
 469+ 81BC 7C 6E DD 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 469+ 81C0 EA 6B
 470+ 81C2 BD 69                        dw      EXIT                    // ;
 471+ 81C4
 472+ 81C4              //  ______________________________________________________________________
 473+ 81C4              //
 474+ 81C4              // marker       -- cccc
 475+ 81C4                              Colon_Def MARKER, "MARKER", is_immediate
 475+ 81C4             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 475+ 81C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 475+ 81C4             >
 475+ 81C4             >                // dummy db directives used to calculate length of namec
 475+ 81C4 4D 41 52 4B >                db      "MARKER"
 475+ 81C8 45 52       >
 475+ 81CA             >len_NFA         defl    $ - temp_NFA
 475+ 81CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 475+ 81C4             >
 475+ 81C4 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 475+ 81C5 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 475+ 81C9 45 52       >
 475+ 81CB             >                org     $-1                 // alter last byte of Name just above to set
 475+ 81CA D2          >                db      {b $} | END_BIT     // msb as name end
 475+ 81CB             >
 475+ 81CB 83 81       >                dw      last_NFA            // Link to previous definition Name
 475+ 81CD             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 475+ 81CD CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 475+ 81CF             >                else
 475+ 81CF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 475+ 81CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 475+ 81CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 475+ 81CF             >
 475+ 81CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 476+ 81CF 36 72                        dw      CBUILDS
 477+ 81D1 15 6E DD 6B                  dw      VOC_LINK, FETCH, COMMA
 477+ 81D5 37 6F
 478+ 81D7 89 6E DD 6B                  dw      CURRENT, FETCH, COMMA
 478+ 81DB 37 6F
 479+ 81DD 7C 6E DD 6B                  dw      CONTEXT, FETCH, COMMA
 479+ 81E1 37 6F
 480+ 81E3 62 70 37 6F                  dw      LATEST, COMMA
 481+ 81E7 62 70 A0 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 481+ 81EB 72 70 DD 6B
 481+ 81EF 37 6F
 482+ 81F1 46 72                        dw      DOES_TO
 483+ 81F3 4A 6B DD 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 483+ 81F7 15 6E EA 6B
 483+ 81FB AF 6A
 484+ 81FD 4A 6B DD 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 484+ 8201 89 6E EA 6B
 484+ 8205 AF 6A
 485+ 8207 4A 6B DD 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 485+ 820B 7C 6E EA 6B
 485+ 820F AF 6A
 486+ 8211 4A 6B DD 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 486+ 8215 07 6E EA 6B
 486+ 8219 AF 6A
 487+ 821B DD 6B 89 6E                  dw           FETCH, CURRENT, FETCH, STORE
 487+ 821F DD 6B EA 6B
 488+ 8223 BD 69                        dw      EXIT
 489+ 8225
 490+ 8225              //  ______________________________________________________________________
 491+ 8225              //
 492+ 8225              // spaces       n --
 493+ 8225                              Colon_Def SPACES, "SPACES", is_normal
 493+ 8225             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 493+ 8225             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 493+ 8225             >
 493+ 8225             >                // dummy db directives used to calculate length of namec
 493+ 8225 53 50 41 43 >                db      "SPACES"
 493+ 8229 45 53       >
 493+ 822B             >len_NFA         defl    $ - temp_NFA
 493+ 822B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 493+ 8225             >
 493+ 8225 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 493+ 8226 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 493+ 822A 45 53       >
 493+ 822C             >                org     $-1                 // alter last byte of Name just above to set
 493+ 822B D3          >                db      {b $} | END_BIT     // msb as name end
 493+ 822C             >
 493+ 822C C4 81       >                dw      last_NFA            // Link to previous definition Name
 493+ 822E             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 493+ 822E CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 493+ 8230             >                else
 493+ 8230 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 493+ 8230             >                endif           ; ok        // for other definitions it "points" the correct handler
 493+ 8230             >                // Use of "; ok" to suppress "warning[fwdref]"
 493+ 8230             >
 493+ 8230             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 494+ 8230 49 6D DE 6F                  dw      ZERO, MAX
 495+ 8234 49 6D D7 64                  dw      ZERO, C_Q_DO
 496+ 8238 08 00                        dw      Spaces_Leave - $
 497+ 823A              Spaces_Loop:
 498+ 823A 2C 70                        dw          SPACE
 499+ 823C 92 64                        dw      C_LOOP
 500+ 823E FC FF                        dw      Spaces_Loop - $
 501+ 8240              Spaces_Leave:
 502+ 8240 BD 69                        dw      EXIT                    // ;
 503+ 8242
 504+ 8242              //  ______________________________________________________________________
 505+ 8242              //
 506+ 8242              // <#           --
 507+ 8242                              Colon_Def BEGIN_DASH, "<#", is_normal
 507+ 8242             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 507+ 8242             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 507+ 8242             >
 507+ 8242             >                // dummy db directives used to calculate length of namec
 507+ 8242 3C 23       >                db      "<#"
 507+ 8244             >len_NFA         defl    $ - temp_NFA
 507+ 8244             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 507+ 8242             >
 507+ 8242 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 507+ 8243 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 507+ 8245             >                org     $-1                 // alter last byte of Name just above to set
 507+ 8244 A3          >                db      {b $} | END_BIT     // msb as name end
 507+ 8245             >
 507+ 8245 25 82       >                dw      last_NFA            // Link to previous definition Name
 507+ 8247             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 507+ 8247 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 507+ 8249             >                else
 507+ 8249 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 507+ 8249             >                endif           ; ok        // for other definitions it "points" the correct handler
 507+ 8249             >                // Use of "; ok" to suppress "warning[fwdref]"
 507+ 8249             >
 507+ 8249             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 508+ 8249 FD 73 CA 6E                  dw      PAD, HLD, STORE
 508+ 824D EA 6B
 509+ 824F BD 69                        dw      EXIT
 510+ 8251
 511+ 8251              //  ______________________________________________________________________
 512+ 8251              //
 513+ 8251              // #>           --
 514+ 8251                              Colon_Def DASH_END, "#>", is_normal
 514+ 8251             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 514+ 8251             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 514+ 8251             >
 514+ 8251             >                // dummy db directives used to calculate length of namec
 514+ 8251 23 3E       >                db      "#>"
 514+ 8253             >len_NFA         defl    $ - temp_NFA
 514+ 8253             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 514+ 8251             >
 514+ 8251 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 514+ 8252 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 514+ 8254             >                org     $-1                 // alter last byte of Name just above to set
 514+ 8253 BE          >                db      {b $} | END_BIT     // msb as name end
 514+ 8254             >
 514+ 8254 42 82       >                dw      last_NFA            // Link to previous definition Name
 514+ 8256             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 514+ 8256 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 514+ 8258             >                else
 514+ 8258 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 514+ 8258             >                endif           ; ok        // for other definitions it "points" the correct handler
 514+ 8258             >                // Use of "; ok" to suppress "warning[fwdref]"
 514+ 8258             >
 514+ 8258             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 8258 8B 6B                        dw      TWO_DROP
 516+ 825A CA 6E DD 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 516+ 825E FD 73 05 6B
 516+ 8262 6F 6F
 517+ 8264 BD 69                        dw      EXIT
 518+ 8266
 519+ 8266              //  ______________________________________________________________________
 520+ 8266              //
 521+ 8266              // sign         n d -- d
 522+ 8266                              Colon_Def SIGN, "SIGN", is_normal
 522+ 8266             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 522+ 8266             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 8266             >
 522+ 8266             >                // dummy db directives used to calculate length of namec
 522+ 8266 53 49 47 4E >                db      "SIGN"
 522+ 826A             >len_NFA         defl    $ - temp_NFA
 522+ 826A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 8266             >
 522+ 8266 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 8267 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 522+ 826B             >                org     $-1                 // alter last byte of Name just above to set
 522+ 826A CE          >                db      {b $} | END_BIT     // msb as name end
 522+ 826B             >
 522+ 826B 51 82       >                dw      last_NFA            // Link to previous definition Name
 522+ 826D             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 826D CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 522+ 826F             >                else
 522+ 826F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 522+ 826F             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 826F             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 826F             >
 522+ 826F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 826F 57 6B 36 6A                  dw      ROT, ZLESS
 524+ 8273 7D 64                        dw      ZBRANCH
 525+ 8275 08 00                        dw      Sign_Endif - $
 526+ 8277 43 64 2D 00                  dw          LIT, 45, HOLD
 526+ 827B E7 73
 527+ 827D              Sign_Endif:
 528+ 827D BD 69                        dw      EXIT
 529+ 827F
 530+ 827F              //  ______________________________________________________________________
 531+ 827F              //
 532+ 827F              // #           d1 -- d2
 533+ 827F                              Colon_Def DASH, "#", is_normal
 533+ 827F             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 533+ 827F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 533+ 827F             >
 533+ 827F             >                // dummy db directives used to calculate length of namec
 533+ 827F 23          >                db      "#"
 533+ 8280             >len_NFA         defl    $ - temp_NFA
 533+ 8280             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 533+ 827F             >
 533+ 827F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 533+ 8280 23          >                db      "#"               // name string in 7-bit ascii, but
 533+ 8281             >                org     $-1                 // alter last byte of Name just above to set
 533+ 8280 A3          >                db      {b $} | END_BIT     // msb as name end
 533+ 8281             >
 533+ 8281 66 82       >                dw      last_NFA            // Link to previous definition Name
 533+ 8283             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 533+ 8283 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 533+ 8285             >                else
 533+ 8285 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 533+ 8285             >                endif           ; ok        // for other definitions it "points" the correct handler
 533+ 8285             >                // Use of "; ok" to suppress "warning[fwdref]"
 533+ 8285             >
 533+ 8285             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 534+ 8285 9E 6E DD 6B                  dw      BASE, FETCH
 535+ 8289
 536+ 8289 E6 69                        dw      TO_R                    // >r           ( ud1 )
 537+ 828B 49 6D 0E 6A                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 537+ 828F 11 69
 538+ 8291 FA 69 3D 6B                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 538+ 8295 E6 69
 539+ 8297 11 69                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 540+ 8299 FA 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 541+ 829B
 542+ 829B 57 6B                        dw      ROT
 543+ 829D 43 64 09 00                  dw      LIT, 9, OVER, LESS
 543+ 82A1 05 6B 9E 6F
 544+ 82A5 7D 64                        dw      ZBRANCH
 545+ 82A7 08 00                        dw      Dash_Endif - $
 546+ 82A9 43 64 07 00                  dw          LIT, 7, PLUS
 546+ 82AD 5E 6A
 547+ 82AF              Dash_Endif:
 548+ 82AF
 549+ 82AF 43 64 30 00                  dw      LIT, 48, PLUS, HOLD
 549+ 82B3 5E 6A E7 73
 550+ 82B7 BD 69                        dw      EXIT
 551+ 82B9
 552+ 82B9              //  ______________________________________________________________________
 553+ 82B9              //
 554+ 82B9              // #s           d1 -- d2
 555+ 82B9                              Colon_Def DASHES, "#S", is_normal
 555+ 82B9             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 555+ 82B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 555+ 82B9             >
 555+ 82B9             >                // dummy db directives used to calculate length of namec
 555+ 82B9 23 53       >                db      "#S"
 555+ 82BB             >len_NFA         defl    $ - temp_NFA
 555+ 82BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 555+ 82B9             >
 555+ 82B9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 555+ 82BA 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 555+ 82BC             >                org     $-1                 // alter last byte of Name just above to set
 555+ 82BB D3          >                db      {b $} | END_BIT     // msb as name end
 555+ 82BC             >
 555+ 82BC 7F 82       >                dw      last_NFA            // Link to previous definition Name
 555+ 82BE             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 555+ 82BE CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 555+ 82C0             >                else
 555+ 82C0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 555+ 82C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 555+ 82C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 555+ 82C0             >
 555+ 82C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 556+ 82C0              Dashes_Begin:
 557+ 82C0 83 82 AB 6B                  dw      DASH, TWO_DUP
 558+ 82C4 61 69 1B 6A                  dw          OR_OP, ZEQUAL
 559+ 82C8 7D 64                        dw      ZBRANCH
 560+ 82CA F6 FF                        dw      Dashes_Begin - $
 561+ 82CC BD 69                        dw      EXIT
 562+ 82CE
 563+ 82CE              //  ______________________________________________________________________
 564+ 82CE              //
 565+ 82CE              // d.r          d n --
 566+ 82CE                              Colon_Def D_DOT_R, "D.R", is_normal
 566+ 82CE             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 566+ 82CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ 82CE             >
 566+ 82CE             >                // dummy db directives used to calculate length of namec
 566+ 82CE 44 2E 52    >                db      "D.R"
 566+ 82D1             >len_NFA         defl    $ - temp_NFA
 566+ 82D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ 82CE             >
 566+ 82CE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ 82CF 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 566+ 82D2             >                org     $-1                 // alter last byte of Name just above to set
 566+ 82D1 D2          >                db      {b $} | END_BIT     // msb as name end
 566+ 82D2             >
 566+ 82D2 B9 82       >                dw      last_NFA            // Link to previous definition Name
 566+ 82D4             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 82D4 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 82D6             >                else
 566+ 82D6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 566+ 82D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 82D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 82D6             >
 566+ 82D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 82D6 E6 69                        dw      TO_R
 568+ 82D8 3D 6B 05 6B                  dw      SWAP, OVER, DABS
 568+ 82DC 9F 79
 569+ 82DE 47 82 BE 82                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 569+ 82E2 6D 82 56 82
 570+ 82E6 FA 69                        dw      R_TO
 571+ 82E8 05 6B 6F 6F                  dw      OVER, SUBTRACT, SPACES, TYPE
 571+ 82EC 2E 82 93 72
 572+ 82F0 BD 69                        dw      EXIT
 573+ 82F2
 574+ 82F2              //  ______________________________________________________________________
 575+ 82F2              //
 576+ 82F2              // .r           n1 n2 --
 577+ 82F2                              Colon_Def DOT_R, ".R", is_normal
 577+ 82F2             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 577+ 82F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 577+ 82F2             >
 577+ 82F2             >                // dummy db directives used to calculate length of namec
 577+ 82F2 2E 52       >                db      ".R"
 577+ 82F4             >len_NFA         defl    $ - temp_NFA
 577+ 82F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 577+ 82F2             >
 577+ 82F2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 577+ 82F3 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 577+ 82F5             >                org     $-1                 // alter last byte of Name just above to set
 577+ 82F4 D2          >                db      {b $} | END_BIT     // msb as name end
 577+ 82F5             >
 577+ 82F5 CE 82       >                dw      last_NFA            // Link to previous definition Name
 577+ 82F7             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 577+ 82F7 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 577+ 82F9             >                else
 577+ 82F9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 577+ 82F9             >                endif           ; ok        // for other definitions it "points" the correct handler
 577+ 82F9             >                // Use of "; ok" to suppress "warning[fwdref]"
 577+ 82F9             >
 577+ 82F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 578+ 82F9 E6 69                        dw      TO_R
 579+ 82FB 5B 6F FA 69                  dw      S_TO_D, R_TO
 580+ 82FF D4 82                        dw      D_DOT_R
 581+ 8301 BD 69                        dw      EXIT
 582+ 8303
 583+ 8303              //  ______________________________________________________________________
 584+ 8303              //
 585+ 8303              // d.           d --
 586+ 8303                              Colon_Def D_DOT, "D.", is_normal
 586+ 8303             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 586+ 8303             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ 8303             >
 586+ 8303             >                // dummy db directives used to calculate length of namec
 586+ 8303 44 2E       >                db      "D."
 586+ 8305             >len_NFA         defl    $ - temp_NFA
 586+ 8305             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ 8303             >
 586+ 8303 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ 8304 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 586+ 8306             >                org     $-1                 // alter last byte of Name just above to set
 586+ 8305 AE          >                db      {b $} | END_BIT     // msb as name end
 586+ 8306             >
 586+ 8306 F2 82       >                dw      last_NFA            // Link to previous definition Name
 586+ 8308             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 8308 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 586+ 830A             >                else
 586+ 830A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 586+ 830A             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 830A             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 830A             >
 586+ 830A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 830A 49 6D D4 82                  dw      ZERO, D_DOT_R, SPACE
 587+ 830E 2C 70
 588+ 8310 BD 69                        dw      EXIT
 589+ 8312
 590+ 8312              //  ______________________________________________________________________
 591+ 8312              //
 592+ 8312              // .            n --
 593+ 8312                              Colon_Def DOT, ".", is_normal
 593+ 8312             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 593+ 8312             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 593+ 8312             >
 593+ 8312             >                // dummy db directives used to calculate length of namec
 593+ 8312 2E          >                db      "."
 593+ 8313             >len_NFA         defl    $ - temp_NFA
 593+ 8313             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 593+ 8312             >
 593+ 8312 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 593+ 8313 2E          >                db      "."               // name string in 7-bit ascii, but
 593+ 8314             >                org     $-1                 // alter last byte of Name just above to set
 593+ 8313 AE          >                db      {b $} | END_BIT     // msb as name end
 593+ 8314             >
 593+ 8314 03 83       >                dw      last_NFA            // Link to previous definition Name
 593+ 8316             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 593+ 8316 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 593+ 8318             >                else
 593+ 8318 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 593+ 8318             >                endif           ; ok        // for other definitions it "points" the correct handler
 593+ 8318             >                // Use of "; ok" to suppress "warning[fwdref]"
 593+ 8318             >
 593+ 8318             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 594+ 8318 5B 6F 08 83                  dw      S_TO_D, D_DOT
 595+ 831C BD 69                        dw      EXIT
 596+ 831E
 597+ 831E              //  ______________________________________________________________________
 598+ 831E              //
 599+ 831E              // ?            n --
 600+ 831E                              Colon_Def QUESTION, "?", is_normal
 600+ 831E             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 600+ 831E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 600+ 831E             >
 600+ 831E             >                // dummy db directives used to calculate length of namec
 600+ 831E 3F          >                db      "?"
 600+ 831F             >len_NFA         defl    $ - temp_NFA
 600+ 831F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 600+ 831E             >
 600+ 831E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 600+ 831F 3F          >                db      "?"               // name string in 7-bit ascii, but
 600+ 8320             >                org     $-1                 // alter last byte of Name just above to set
 600+ 831F BF          >                db      {b $} | END_BIT     // msb as name end
 600+ 8320             >
 600+ 8320 12 83       >                dw      last_NFA            // Link to previous definition Name
 600+ 8322             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 600+ 8322 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 600+ 8324             >                else
 600+ 8324 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 600+ 8324             >                endif           ; ok        // for other definitions it "points" the correct handler
 600+ 8324             >                // Use of "; ok" to suppress "warning[fwdref]"
 600+ 8324             >
 600+ 8324             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 601+ 8324 DD 6B 16 83                  dw      FETCH, DOT
 602+ 8328 BD 69                        dw      EXIT
 603+ 832A
 604+ 832A              //  ______________________________________________________________________
 605+ 832A              //
 606+ 832A              // u.           u --
 607+ 832A                              Colon_Def U_DOT, "U.", is_normal
 607+ 832A             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 607+ 832A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ 832A             >
 607+ 832A             >                // dummy db directives used to calculate length of namec
 607+ 832A 55 2E       >                db      "U."
 607+ 832C             >len_NFA         defl    $ - temp_NFA
 607+ 832C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ 832A             >
 607+ 832A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ 832B 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 607+ 832D             >                org     $-1                 // alter last byte of Name just above to set
 607+ 832C AE          >                db      {b $} | END_BIT     // msb as name end
 607+ 832D             >
 607+ 832D 1E 83       >                dw      last_NFA            // Link to previous definition Name
 607+ 832F             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 832F CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 8331             >                else
 607+ 8331 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 607+ 8331             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 8331             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 8331             >
 607+ 8331             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 8331 49 6D 08 83                  dw      ZERO, D_DOT
 609+ 8335 BD 69                        dw      EXIT
 610+ 8337
 611+ 8337              //  ______________________________________________________________________
 612+ 8337              //
 613+ 8337              // words        --
 614+ 8337                              Colon_Def WORDS, "WORDS", is_normal
 614+ 8337             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 614+ 8337             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ 8337             >
 614+ 8337             >                // dummy db directives used to calculate length of namec
 614+ 8337 57 4F 52 44 >                db      "WORDS"
 614+ 833B 53          >
 614+ 833C             >len_NFA         defl    $ - temp_NFA
 614+ 833C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ 8337             >
 614+ 8337 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ 8338 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 614+ 833C 53          >
 614+ 833D             >                org     $-1                 // alter last byte of Name just above to set
 614+ 833C D3          >                db      {b $} | END_BIT     // msb as name end
 614+ 833D             >
 614+ 833D 2A 83       >                dw      last_NFA            // Link to previous definition Name
 614+ 833F             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 833F CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 614+ 8341             >                else
 614+ 8341 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 614+ 8341             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 8341             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 8341             >
 614+ 8341             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 8341 43 64 80 00                  dw      LIT, 128, OUT, STORE
 615+ 8345 5A 6E EA 6B
 616+ 8349 7C 6E DD 6B                  dw      CONTEXT, FETCH, FETCH
 616+ 834D DD 6B
 617+ 834F              Words_Begin:
 618+ 834F 4A 6B F8 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 618+ 8353 43 64 1F 00
 618+ 8357 4F 69
 619+ 8359 5A 6E DD 6B                  dw          OUT, FETCH, PLUS
 619+ 835D 5E 6A
 620+ 835F 7D 6D 9E 6F                  dw          CL, LESS, ZEQUAL
 620+ 8363 1B 6A
 621+ 8365 7D 64                        dw          ZBRANCH
 622+ 8367 0A 00                        dw          Words_Endif - $
 623+ 8369 9C 68 49 6D                  dw              CR, ZERO, OUT, STORE
 623+ 836D 5A 6E EA 6B
 624+ 8371              Words_Endif:
 625+ 8371 4A 6B 33 76                  dw          DUP, ID_DOT
 626+ 8375 A0 70 72 70                  dw          PFA, LFA, FETCH
 626+ 8379 DD 6B
 627+ 837B 4A 6B 1B 6A                  dw          DUP, ZEQUAL
 628+ 837F A6 67 61 69                  dw          QTERMINAL, OR_OP
 629+ 8383 7D 64                        dw      ZBRANCH
 630+ 8385 CA FF                        dw      Words_Begin - $
 631+ 8387 15 6B                        dw      DROP
 632+ 8389 BD 69                        dw      EXIT
 633+ 838B
 634+ 838B              //  ______________________________________________________________________
 635+ 838B              //
 636+ 838B              // list         n --
 637+ 838B                              Colon_Def LIST, "LIST", is_normal
 637+ 838B             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 637+ 838B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 637+ 838B             >
 637+ 838B             >                // dummy db directives used to calculate length of namec
 637+ 838B 4C 49 53 54 >                db      "LIST"
 637+ 838F             >len_NFA         defl    $ - temp_NFA
 637+ 838F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 637+ 838B             >
 637+ 838B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 637+ 838C 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 637+ 8390             >                org     $-1                 // alter last byte of Name just above to set
 637+ 838F D4          >                db      {b $} | END_BIT     // msb as name end
 637+ 8390             >
 637+ 8390 37 83       >                dw      last_NFA            // Link to previous definition Name
 637+ 8392             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 637+ 8392 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 637+ 8394             >                else
 637+ 8394 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 637+ 8394             >                endif           ; ok        // for other definitions it "points" the correct handler
 637+ 8394             >                // Use of "; ok" to suppress "warning[fwdref]"
 637+ 8394             >
 637+ 8394             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 638+ 8394 F2 71 9C 68                  dw      DECIMAL, CR
 639+ 8398 4A 6B 63 6E                  dw      DUP, SCR, STORE
 639+ 839C EA 6B
 640+ 839E 5F 74                        dw      C_DOT_QUOTE
 641+ 83A0 05 53 63 72                  db      5, "Scr# "
 641+ 83A4 23 20
 642+ 83A6 16 83                        dw      DOT
 643+ 83A8 A1 6D 49 6D                  dw      LSCR, ZERO, C_DO
 643+ 83AC 05 65
 644+ 83AE              List_Loop:
 645+ 83AE 9C 68                        dw          CR
 646+ 83B0 10 65 61 6D                  dw          I, THREE
 647+ 83B4 F7 82 2C 70                  dw          DOT_R, SPACE
 648+ 83B8 10 65 63 6E                  dw          I, SCR, FETCH, DOT_LINE
 648+ 83BC DD 6B 82 7A
 649+ 83C0 A6 67                        dw          QTERMINAL
 650+ 83C2 7D 64                        dw          ZBRANCH
 651+ 83C4 04 00                        dw          List_Endif - $
 652+ 83C6 D3 69                        dw              LEAVE
 653+ 83C8              List_Endif:
 654+ 83C8 92 64                        dw      C_LOOP
 655+ 83CA E4 FF                        dw      List_Loop - $
 656+ 83CC 9C 68                        dw      CR
 657+ 83CE BD 69                        dw      EXIT
 658+ 83D0
 659+ 83D0              //  ______________________________________________________________________
 660+ 83D0              //
 661+ 83D0              // index        n1 n2 --
 662+ 83D0                              Colon_Def INDEX, "INDEX", is_normal
 662+ 83D0             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 662+ 83D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 662+ 83D0             >
 662+ 83D0             >                // dummy db directives used to calculate length of namec
 662+ 83D0 49 4E 44 45 >                db      "INDEX"
 662+ 83D4 58          >
 662+ 83D5             >len_NFA         defl    $ - temp_NFA
 662+ 83D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 662+ 83D0             >
 662+ 83D0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 662+ 83D1 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 662+ 83D5 58          >
 662+ 83D6             >                org     $-1                 // alter last byte of Name just above to set
 662+ 83D5 D8          >                db      {b $} | END_BIT     // msb as name end
 662+ 83D6             >
 662+ 83D6 8B 83       >                dw      last_NFA            // Link to previous definition Name
 662+ 83D8             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 662+ 83D8 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 662+ 83DA             >                else
 662+ 83DA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 662+ 83DA             >                endif           ; ok        // for other definitions it "points" the correct handler
 662+ 83DA             >                // Use of "; ok" to suppress "warning[fwdref]"
 662+ 83DA             >
 662+ 83DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 663+ 83DA 87 6A 3D 6B                  dw      ONE_PLUS, SWAP, C_DO
 663+ 83DE 05 65
 664+ 83E0              Index_Loop:
 665+ 83E0 9C 68 10 65                  dw          CR, I, THREE
 665+ 83E4 61 6D
 666+ 83E6 F7 82 2C 70                  dw          DOT_R, SPACE
 667+ 83EA 49 6D 10 65                  dw          ZERO, I, DOT_LINE
 667+ 83EE 82 7A
 668+ 83F0 A6 67                        dw          QTERMINAL
 669+ 83F2 7D 64                        dw          ZBRANCH
 670+ 83F4 04 00                        dw          Index_Endif - $
 671+ 83F6 D3 69                        dw              LEAVE
 672+ 83F8              Index_Endif:
 673+ 83F8 92 64                        dw      C_LOOP
 674+ 83FA E6 FF                        dw      Index_Loop - $
 675+ 83FC BD 69                        dw      EXIT
 676+ 83FE
 677+ 83FE              //  ______________________________________________________________________
 678+ 83FE              //
 679+ 83FE              // cls          --
 680+ 83FE                              Colon_Def CLS, "CLS", is_normal
 680+ 83FE             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 680+ 83FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 680+ 83FE             >
 680+ 83FE             >                // dummy db directives used to calculate length of namec
 680+ 83FE 43 4C 53    >                db      "CLS"
 680+ 8401             >len_NFA         defl    $ - temp_NFA
 680+ 8401             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 680+ 83FE             >
 680+ 83FE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 680+ 83FF 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 680+ 8402             >                org     $-1                 // alter last byte of Name just above to set
 680+ 8401 D3          >                db      {b $} | END_BIT     // msb as name end
 680+ 8402             >
 680+ 8402 D0 83       >                dw      last_NFA            // Link to previous definition Name
 680+ 8404             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 680+ 8404 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 680+ 8406             >                else
 680+ 8406 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 680+ 8406             >                endif           ; ok        // for other definitions it "points" the correct handler
 680+ 8406             >                // Use of "; ok" to suppress "warning[fwdref]"
 680+ 8406             >
 680+ 8406             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 681+ 8406 43 64 0E 00                  dw      LIT, $0E, EMITC
 681+ 840A 85 66
 682+ 840C BD 69                        dw      EXIT
 683+ 840E
 684+ 840E              //  ______________________________________________________________________
 685+ 840E              //
 686+ 840E              // splash       --
 687+ 840E                              Colon_Def SPLASH, "SPLASH", is_normal
 687+ 840E             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 687+ 840E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 687+ 840E             >
 687+ 840E             >                // dummy db directives used to calculate length of namec
 687+ 840E 53 50 4C 41 >                db      "SPLASH"
 687+ 8412 53 48       >
 687+ 8414             >len_NFA         defl    $ - temp_NFA
 687+ 8414             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 687+ 840E             >
 687+ 840E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 687+ 840F 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 687+ 8413 53 48       >
 687+ 8415             >                org     $-1                 // alter last byte of Name just above to set
 687+ 8414 C8          >                db      {b $} | END_BIT     // msb as name end
 687+ 8415             >
 687+ 8415 FE 83       >                dw      last_NFA            // Link to previous definition Name
 687+ 8417             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 687+ 8417 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 687+ 8419             >                else
 687+ 8419 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 687+ 8419             >                endif           ; ok        // for other definitions it "points" the correct handler
 687+ 8419             >                // Use of "; ok" to suppress "warning[fwdref]"
 687+ 8419             >
 687+ 8419             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 688+ 8419 04 84                        dw      CLS
 689+ 841B 5F 74                        dw      C_DOT_QUOTE
 690+ 841D 45                           db      69
 691+ 841E 76 2D 46 6F                  db      "v-Forth 1.5 NextZXOS version", 13
 691+ 8422 72 74 68 20
 691+ 8426 31 2E 35 20
 691+ 842A 4E 65 78 74
 691+ 842E 5A 58 4F 53
 691+ 8432 20 76 65 72
 691+ 8436 73 69 6F 6E
 691+ 843A 0D
 692+ 843B 62 75 69 6C                  db      "build 20210627", 13
 692+ 843F 64 20 32 30
 692+ 8443 32 31 30 36
 692+ 8447 32 37 0D
 693+ 844A 31 39 39 30                  db      "1990-2021 Matteo Vitturi", 13
 693+ 844E 2D 32 30 32
 693+ 8452 31 20 4D 61
 693+ 8456 74 74 65 6F
 693+ 845A 20 56 69 74
 693+ 845E 74 75 72 69
 693+ 8462 0D
 694+ 8463 BD 69                        dw      EXIT
 695+ 8465
 696+ 8465              //  ______________________________________________________________________
 697+ 8465              //
 698+ 8465              // video        --
 699+ 8465                              Colon_Def VIDEO, "VIDEO", is_normal
 699+ 8465             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 699+ 8465             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 699+ 8465             >
 699+ 8465             >                // dummy db directives used to calculate length of namec
 699+ 8465 56 49 44 45 >                db      "VIDEO"
 699+ 8469 4F          >
 699+ 846A             >len_NFA         defl    $ - temp_NFA
 699+ 846A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 699+ 8465             >
 699+ 8465 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 699+ 8466 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 699+ 846A 4F          >
 699+ 846B             >                org     $-1                 // alter last byte of Name just above to set
 699+ 846A CF          >                db      {b $} | END_BIT     // msb as name end
 699+ 846B             >
 699+ 846B 0E 84       >                dw      last_NFA            // Link to previous definition Name
 699+ 846D             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 699+ 846D CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 699+ 846F             >                else
 699+ 846F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 699+ 846F             >                endif           ; ok        // for other definitions it "points" the correct handler
 699+ 846F             >                // Use of "; ok" to suppress "warning[fwdref]"
 699+ 846F             >
 699+ 846F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 700+ 846F 59 6D 4A 6B                  dw      TWO, DUP, DEVICE, STORE
 700+ 8473 CA 7A EA 6B
 701+ 8477 FB 7A                        dw      SELECT
 702+ 8479 BD 69                        dw      EXIT
 703+ 847B
 704+ 847B              //  ______________________________________________________________________
 705+ 847B              //
 706+ 847B              // accept-      a n1 -- n2
 707+ 847B                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 707+ 847B             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 707+ 847B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 707+ 847B             >
 707+ 847B             >                // dummy db directives used to calculate length of namec
 707+ 847B 41 43 43 45 >                db      "ACCEPT-"
 707+ 847F 50 54 2D    >
 707+ 8482             >len_NFA         defl    $ - temp_NFA
 707+ 8482             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 707+ 847B             >
 707+ 847B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 707+ 847C 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 707+ 8480 50 54 2D    >
 707+ 8483             >                org     $-1                 // alter last byte of Name just above to set
 707+ 8482 AD          >                db      {b $} | END_BIT     // msb as name end
 707+ 8483             >
 707+ 8483 65 84       >                dw      last_NFA            // Link to previous definition Name
 707+ 8485             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 707+ 8485 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 707+ 8487             >                else
 707+ 8487 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 707+ 8487             >                endif           ; ok        // for other definitions it "points" the correct handler
 707+ 8487             >                // Use of "; ok" to suppress "warning[fwdref]"
 707+ 8487             >
 707+ 8487             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 708+ 8487 E6 69                        dw      TO_R
 709+ 8489 49 6D                        dw      ZERO
 710+ 848B 3D 6B                        dw      SWAP
 711+ 848D 4A 6B                        dw      DUP
 712+ 848F FA 69                        dw      R_TO
 713+ 8491 5E 6A                        dw      PLUS
 714+ 8493 3D 6B                        dw      SWAP
 715+ 8495 05 65                        dw      C_DO
 716+ 8497              AcceptN_Loop:
 717+ 8497 4B 7B                        dw          MMU7_FETCH
 718+ 8499 D6 7A                        dw          INKEY
 719+ 849B 3D 6B 5D 7B                  dw          SWAP, MMU7_STORE
 720+ 849F 4A 6B 1B 6A                  dw          DUP, ZEQUAL
 721+ 84A3 7D 64                        dw          ZBRANCH
 722+ 84A5 06 00                        dw          AcceptN_Endif_1 - $
 723+ 84A7 6D 84 70 78                  dw              VIDEO, QUIT
 724+ 84AB              AcceptN_Endif_1:
 725+ 84AB 4A 6B 43 64                  dw          DUP, LIT, 13, EQUALS
 725+ 84AF 0D 00 7D 6F
 726+ 84B3 7D 64                        dw          ZBRANCH
 727+ 84B5 06 00                        dw          AcceptN_Endif_2 - $
 728+ 84B7 15 6B 49 6D                  dw              DROP, ZERO
 729+ 84BB              AcceptN_Endif_2:
 730+ 84BB 4A 6B 43 64                  dw          DUP, LIT, 10, EQUALS
 730+ 84BF 0A 00 7D 6F
 731+ 84C3 7D 64                        dw          ZBRANCH
 732+ 84C5 06 00                        dw          AcceptN_Endif_3 - $
 733+ 84C7 15 6B 49 6D                  dw              DROP, ZERO
 734+ 84CB              AcceptN_Endif_3:
 735+ 84CB 4A 6B 1B 6A                  dw          DUP, ZEQUAL
 736+ 84CF 7D 64                        dw          ZBRANCH
 737+ 84D1 04 00                        dw          AcceptN_Endif_4 - $
 738+ 84D3 D3 69                        dw              LEAVE
 739+ 84D5              AcceptN_Endif_4:
 740+ 84D5 10 65 06 6C                  dw          I, CSTORE, ONE_PLUS
 740+ 84D9 87 6A
 741+ 84DB 92 64                        dw      C_LOOP
 742+ 84DD BA FF                        dw      AcceptN_Loop -$
 743+ 84DF BD 69                        dw      EXIT
 744+ 84E1
 745+ 84E1              //  ______________________________________________________________________
 746+ 84E1              //
 747+ 84E1              // load-        n --
 748+ 84E1              // Provided that a stream n is OPEN# via the standart BASIC
 749+ 84E1              // it accepts text from stream #n to the normal INTERPRET
 750+ 84E1              // up to now, text-file must end with QUIT
 751+ 84E1                              Colon_Def LOAD_N, "LOAD-", is_normal
 751+ 84E1             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 751+ 84E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 751+ 84E1             >
 751+ 84E1             >                // dummy db directives used to calculate length of namec
 751+ 84E1 4C 4F 41 44 >                db      "LOAD-"
 751+ 84E5 2D          >
 751+ 84E6             >len_NFA         defl    $ - temp_NFA
 751+ 84E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 751+ 84E1             >
 751+ 84E1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 751+ 84E2 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 751+ 84E6 2D          >
 751+ 84E7             >                org     $-1                 // alter last byte of Name just above to set
 751+ 84E6 AD          >                db      {b $} | END_BIT     // msb as name end
 751+ 84E7             >
 751+ 84E7 7B 84       >                dw      last_NFA            // Link to previous definition Name
 751+ 84E9             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 751+ 84E9 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 751+ 84EB             >                else
 751+ 84EB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 751+ 84EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 751+ 84EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 751+ 84EB             >
 751+ 84EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 752+ 84EB FF 6E EA 6B                  dw      SOURCE_ID, STORE
 753+ 84EF              Load_N_Begin:
 754+ 84EF DC 6D DD 6B                  dw          TIB, FETCH
 755+ 84F3 4A 6B 43 64                  dw          DUP, LIT, 80
 755+ 84F7 50 00
 756+ 84F9 AB 6B D8 73                  dw          TWO_DUP, BLANKS
 757+ 84FD FF 6E DD 6B                  dw          SOURCE_ID, FETCH
 758+ 8501 90 79 4A 6B                  dw          ABS_OP, DUP, DEVICE, STORE
 758+ 8505 CA 7A EA 6B
 759+ 8509 FB 7A                        dw          SELECT
 760+ 850B 85 84                        dw          ACCEPT_N
 761+ 850D 6D 84                        dw          VIDEO
 762+ 850F 8B 6B                        dw          TWO_DROP
 763+ 8511 49 6D 48 6E                  dw          ZERO, BLK, STORE
 763+ 8515 EA 6B
 764+ 8517 49 6D 51 6E                  dw          ZERO, TO_IN, STORE
 764+ 851B EA 6B
 765+ 851D B0 77                        dw          INTERPRET
 766+ 851F A6 67                        dw          QTERMINAL
 767+ 8521 7D 64                        dw      ZBRANCH
 768+ 8523 CC FF                        dw      Load_N_Begin - $
 769+ 8525 BD 69                        dw      EXIT
 770+ 8527
 771+ 8527              //  ______________________________________________________________________
 772+ 8527              //
 773+ 8527              // load         n --
 774+ 8527              // if n is positive, it loads screen #n (as usual)
 775+ 8527              // if n is negative, it connects stream #n to the normal INTERPRET
 776+ 8527              // this second way is useful if you want to load any kind of file
 777+ 8527              // provied that it is OPEN# the usual BASIC way.
 778+ 8527                              Colon_Def LOAD, "LOAD", is_normal
 778+ 8527             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 778+ 8527             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 778+ 8527             >
 778+ 8527             >                // dummy db directives used to calculate length of namec
 778+ 8527 4C 4F 41 44 >                db      "LOAD"
 778+ 852B             >len_NFA         defl    $ - temp_NFA
 778+ 852B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 778+ 8527             >
 778+ 8527 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 778+ 8528 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 778+ 852C             >                org     $-1                 // alter last byte of Name just above to set
 778+ 852B C4          >                db      {b $} | END_BIT     // msb as name end
 778+ 852C             >
 778+ 852C E1 84       >                dw      last_NFA            // Link to previous definition Name
 778+ 852E             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 778+ 852E CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 778+ 8530             >                else
 778+ 8530 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 778+ 8530             >                endif           ; ok        // for other definitions it "points" the correct handler
 778+ 8530             >                // Use of "; ok" to suppress "warning[fwdref]"
 778+ 8530             >
 778+ 8530             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 779+ 8530 4A 6B 36 6A                  dw      DUP, ZLESS
 780+ 8534 7D 64                        dw      ZBRANCH
 781+ 8536 08 00                        dw      Load_Else - $
 782+ 8538 E9 84                        dw          LOAD_N
 783+ 853A 66 64                        dw      BRANCH
 784+ 853C 04 00                        dw      Load_Endif - $
 785+ 853E              Load_Else:
 786+ 853E 23 81                        dw          LOAD_P
 787+ 8540              Load_Endif:
 788+ 8540 BD 69                        dw      EXIT
 789+ 8542
 790+ 8542
 791+ 8542              //  ______________________________________________________________________
 792+ 8542              //
 793+ 8542              // autoexec     --
 794+ 8542              // this word is called the first time the Forth system boot to
 795+ 8542              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 796+ 8542                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 796+ 8542             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 796+ 8542             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 796+ 8542             >
 796+ 8542             >                // dummy db directives used to calculate length of namec
 796+ 8542 41 55 54 4F >                db      "AUTOEXEC"
 796+ 8546 45 58 45 43 >
 796+ 854A             >len_NFA         defl    $ - temp_NFA
 796+ 854A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 796+ 8542             >
 796+ 8542 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 796+ 8543 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 796+ 8547 45 58 45 43 >
 796+ 854B             >                org     $-1                 // alter last byte of Name just above to set
 796+ 854A C3          >                db      {b $} | END_BIT     // msb as name end
 796+ 854B             >
 796+ 854B 27 85       >                dw      last_NFA            // Link to previous definition Name
 796+ 854D             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 796+ 854D CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 796+ 854F             >                else
 796+ 854F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 796+ 854F             >                endif           ; ok        // for other definitions it "points" the correct handler
 796+ 854F             >                // Use of "; ok" to suppress "warning[fwdref]"
 796+ 854F             >
 796+ 854F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 797+ 854F 43 64 0B 00                  dw      LIT, 11
 798+ 8553 43 64 F6 6C                  dw      LIT, NOOP
 799+ 8557 43 64 BF 78                  dw      LIT, Autoexec_Ptr
 800+ 855B EA 6B                        dw      STORE
 801+ 855D 2E 85                        dw      LOAD
 802+ 855F 70 78                        dw      QUIT
 803+ 8561 BD 69                        dw      EXIT
 804+ 8563
 805+ 8563
 806+ 8563              //  ______________________________________________________________________
 807+ 8563              //
 808+ 8563              // bye     --
 809+ 8563              //
 810+ 8563                              Colon_Def BYE, "BYE", is_normal
 810+ 8563             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 810+ 8563             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 810+ 8563             >
 810+ 8563             >                // dummy db directives used to calculate length of namec
 810+ 8563 42 59 45    >                db      "BYE"
 810+ 8566             >len_NFA         defl    $ - temp_NFA
 810+ 8566             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 810+ 8563             >
 810+ 8563 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 810+ 8564 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 810+ 8567             >                org     $-1                 // alter last byte of Name just above to set
 810+ 8566 C5          >                db      {b $} | END_BIT     // msb as name end
 810+ 8567             >
 810+ 8567 42 85       >                dw      last_NFA            // Link to previous definition Name
 810+ 8569             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 810+ 8569 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 810+ 856B             >                else
 810+ 856B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 810+ 856B             >                endif           ; ok        // for other definitions it "points" the correct handler
 810+ 856B             >                // Use of "; ok" to suppress "warning[fwdref]"
 810+ 856B             >
 810+ 856B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 811+ 856B D7 7D                        dw      FLUSH
 812+ 856D 08 7D                        dw      EMPTY_BUFFERS
 813+ 856F AC 7B DD 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 813+ 8573 49 68 15 6B
 814+ 8577 49 6D AF 6D                  dw      ZERO, PLUS_ORIGIN
 815+ 857B 55 79                        dw      BASIC
 816+ 857D
 817+ 857D              //  ______________________________________________________________________
 818+ 857D              //
 819+ 857D              // invv     --
 820+ 857D              //
 821+ 857D              //              Colon_Def INVV, "INVV", is_normal
 822+ 857D              //              dw      LIT, 20, EMITC, ONE, EMITC
 823+ 857D              //              dw      EXIT
 824+ 857D
 825+ 857D              //  ______________________________________________________________________
 826+ 857D              //
 827+ 857D              // truv     --
 828+ 857D              //
 829+ 857D              //              Colon_Def TRUV, "TRUV", is_normal
 830+ 857D              //              dw      LIT, 20, EMITC, ZERO, EMITC
 831+ 857D              //              dw      EXIT
 832+ 857D
 833+ 857D              //  ______________________________________________________________________
 834+ 857D              //
 835+ 857D              // mark     --
 836+ 857D              //
 837+ 857D              //              Colon_Def MARK, "MARK", is_normal
 838+ 857D              //              dw      INVV, TYPE, TRUV
 839+ 857D              //              dw      EXIT
 840+ 857D
 841+ 857D              //  ______________________________________________________________________
 842+ 857D              //
 843+ 857D              // back     --
 844+ 857D              //
 845+ 857D                              Colon_Def BACK, "BACK", is_normal
 845+ 857D             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 845+ 857D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 845+ 857D             >
 845+ 857D             >                // dummy db directives used to calculate length of namec
 845+ 857D 42 41 43 4B >                db      "BACK"
 845+ 8581             >len_NFA         defl    $ - temp_NFA
 845+ 8581             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 845+ 857D             >
 845+ 857D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 845+ 857E 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 845+ 8582             >                org     $-1                 // alter last byte of Name just above to set
 845+ 8581 CB          >                db      {b $} | END_BIT     // msb as name end
 845+ 8582             >
 845+ 8582 63 85       >                dw      last_NFA            // Link to previous definition Name
 845+ 8584             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 845+ 8584 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 845+ 8586             >                else
 845+ 8586 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 845+ 8586             >                endif           ; ok        // for other definitions it "points" the correct handler
 845+ 8586             >                // Use of "; ok" to suppress "warning[fwdref]"
 845+ 8586             >
 845+ 8586             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 846+ 8586 1B 6F 6F 6F                  dw      HERE, SUBTRACT, COMMA
 846+ 858A 37 6F
 847+ 858C BD 69                        dw      EXIT
 848+ 858E
 849+ 858E              //  ______________________________________________________________________
 850+ 858E              //
 851+ 858E              // if          ( -- a 2 ) \ compile-time
 852+ 858E              // IF ... THEN
 853+ 858E              // IF ... ELSE ... ENDIF
 854+ 858E                              Colon_Def IF, "IF", is_immediate
 854+ 858E             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 854+ 858E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 854+ 858E             >
 854+ 858E             >                // dummy db directives used to calculate length of namec
 854+ 858E 49 46       >                db      "IF"
 854+ 8590             >len_NFA         defl    $ - temp_NFA
 854+ 8590             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 854+ 858E             >
 854+ 858E C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 854+ 858F 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 854+ 8591             >                org     $-1                 // alter last byte of Name just above to set
 854+ 8590 C6          >                db      {b $} | END_BIT     // msb as name end
 854+ 8591             >
 854+ 8591 7D 85       >                dw      last_NFA            // Link to previous definition Name
 854+ 8593             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 854+ 8593 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 854+ 8595             >                else
 854+ 8595 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 854+ 8595             >                endif           ; ok        // for other definitions it "points" the correct handler
 854+ 8595             >                // Use of "; ok" to suppress "warning[fwdref]"
 854+ 8595             >
 854+ 8595             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 855+ 8595 79 71 7D 64                  dw      COMPILE, ZBRANCH
 856+ 8599 1B 6F 49 6D                  dw      HERE, ZERO, COMMA
 856+ 859D 37 6F
 857+ 859F 59 6D                        dw      TWO
 858+ 85A1 BD 69                        dw      EXIT
 859+ 85A3
 860+ 85A3              //  ______________________________________________________________________
 861+ 85A3              //
 862+ 85A3              // endif        ( a 2 -- ) \ compile-time
 863+ 85A3              //
 864+ 85A3                              Colon_Def ENDIF, "ENDIF", is_immediate
 864+ 85A3             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 864+ 85A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 864+ 85A3             >
 864+ 85A3             >                // dummy db directives used to calculate length of namec
 864+ 85A3 45 4E 44 49 >                db      "ENDIF"
 864+ 85A7 46          >
 864+ 85A8             >len_NFA         defl    $ - temp_NFA
 864+ 85A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 864+ 85A3             >
 864+ 85A3 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 864+ 85A4 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 864+ 85A8 46          >
 864+ 85A9             >                org     $-1                 // alter last byte of Name just above to set
 864+ 85A8 C6          >                db      {b $} | END_BIT     // msb as name end
 864+ 85A9             >
 864+ 85A9 8E 85       >                dw      last_NFA            // Link to previous definition Name
 864+ 85AB             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 864+ 85AB CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 864+ 85AD             >                else
 864+ 85AD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 864+ 85AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 864+ 85AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 864+ 85AD             >
 864+ 85AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 865+ 85AD 00 71                        dw      QCOMP
 866+ 85AF 59 6D 2F 71                  dw      TWO, QPAIRS
 867+ 85B3 1B 6F 05 6B                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 867+ 85B7 6F 6F 3D 6B
 867+ 85BB EA 6B
 868+ 85BD BD 69                        dw      EXIT
 869+ 85BF
 870+ 85BF              //  ______________________________________________________________________
 871+ 85BF              //
 872+ 85BF              // then        ( a 2 -- ) \ compile-time
 873+ 85BF              //
 874+ 85BF                              Colon_Def THEN, "THEN", is_immediate
 874+ 85BF             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 874+ 85BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 874+ 85BF             >
 874+ 85BF             >                // dummy db directives used to calculate length of namec
 874+ 85BF 54 48 45 4E >                db      "THEN"
 874+ 85C3             >len_NFA         defl    $ - temp_NFA
 874+ 85C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 874+ 85BF             >
 874+ 85BF C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 874+ 85C0 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 874+ 85C4             >                org     $-1                 // alter last byte of Name just above to set
 874+ 85C3 CE          >                db      {b $} | END_BIT     // msb as name end
 874+ 85C4             >
 874+ 85C4 A3 85       >                dw      last_NFA            // Link to previous definition Name
 874+ 85C6             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 874+ 85C6 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 874+ 85C8             >                else
 874+ 85C8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 874+ 85C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 874+ 85C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 874+ 85C8             >
 874+ 85C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 875+ 85C8 AB 85                        dw      ENDIF
 876+ 85CA BD 69                        dw      EXIT
 877+ 85CC
 878+ 85CC              //  ______________________________________________________________________
 879+ 85CC              //
 880+ 85CC              // else        ( a1 2 -- a2 2 ) \ compile-time
 881+ 85CC              //
 882+ 85CC                              Colon_Def ELSE, "ELSE", is_immediate
 882+ 85CC             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 882+ 85CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 882+ 85CC             >
 882+ 85CC             >                // dummy db directives used to calculate length of namec
 882+ 85CC 45 4C 53 45 >                db      "ELSE"
 882+ 85D0             >len_NFA         defl    $ - temp_NFA
 882+ 85D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 882+ 85CC             >
 882+ 85CC C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 882+ 85CD 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 882+ 85D1             >                org     $-1                 // alter last byte of Name just above to set
 882+ 85D0 C5          >                db      {b $} | END_BIT     // msb as name end
 882+ 85D1             >
 882+ 85D1 BF 85       >                dw      last_NFA            // Link to previous definition Name
 882+ 85D3             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 882+ 85D3 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 882+ 85D5             >                else
 882+ 85D5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 882+ 85D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 882+ 85D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 882+ 85D5             >
 882+ 85D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 883+ 85D5 00 71                        dw      QCOMP
 884+ 85D7 59 6D 2F 71                  dw      TWO, QPAIRS
 885+ 85DB 79 71 66 64                  dw      COMPILE, BRANCH
 886+ 85DF 1B 6F 49 6D                  dw      HERE, ZERO, COMMA
 886+ 85E3 37 6F
 887+ 85E5 3D 6B 59 6D                  dw      SWAP, TWO, ENDIF
 887+ 85E9 AB 85
 888+ 85EB 59 6D                        dw      TWO
 889+ 85ED BD 69                        dw      EXIT
 890+ 85EF
 891+ 85EF              //  ______________________________________________________________________
 892+ 85EF              //
 893+ 85EF              // begin        ( -- a 1 ) \ compile-time
 894+ 85EF              // BEGIN ... AGAIN
 895+ 85EF              // BEGIN ... f UNTIL
 896+ 85EF              // BEGIN ... f WHILE ... REPEAT
 897+ 85EF                              Colon_Def BEGIN, "BEGIN", is_immediate
 897+ 85EF             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 897+ 85EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ 85EF             >
 897+ 85EF             >                // dummy db directives used to calculate length of namec
 897+ 85EF 42 45 47 49 >                db      "BEGIN"
 897+ 85F3 4E          >
 897+ 85F4             >len_NFA         defl    $ - temp_NFA
 897+ 85F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ 85EF             >
 897+ 85EF C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ 85F0 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 897+ 85F4 4E          >
 897+ 85F5             >                org     $-1                 // alter last byte of Name just above to set
 897+ 85F4 CE          >                db      {b $} | END_BIT     // msb as name end
 897+ 85F5             >
 897+ 85F5 CC 85       >                dw      last_NFA            // Link to previous definition Name
 897+ 85F7             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 85F7 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 897+ 85F9             >                else
 897+ 85F9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 897+ 85F9             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 85F9             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 85F9             >
 897+ 85F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 85F9 00 71                        dw      QCOMP
 899+ 85FB 1B 6F                        dw      HERE
 900+ 85FD 51 6D                        dw      ONE
 901+ 85FF BD 69                        dw      EXIT
 902+ 8601
 903+ 8601              //  ______________________________________________________________________
 904+ 8601              //
 905+ 8601              // again        ( a 1 -- ) \ compile-time
 906+ 8601                              Colon_Def AGAIN, "AGAIN", is_immediate
 906+ 8601             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 906+ 8601             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 906+ 8601             >
 906+ 8601             >                // dummy db directives used to calculate length of namec
 906+ 8601 41 47 41 49 >                db      "AGAIN"
 906+ 8605 4E          >
 906+ 8606             >len_NFA         defl    $ - temp_NFA
 906+ 8606             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 906+ 8601             >
 906+ 8601 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 906+ 8602 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 906+ 8606 4E          >
 906+ 8607             >                org     $-1                 // alter last byte of Name just above to set
 906+ 8606 CE          >                db      {b $} | END_BIT     // msb as name end
 906+ 8607             >
 906+ 8607 EF 85       >                dw      last_NFA            // Link to previous definition Name
 906+ 8609             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 906+ 8609 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 906+ 860B             >                else
 906+ 860B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 906+ 860B             >                endif           ; ok        // for other definitions it "points" the correct handler
 906+ 860B             >                // Use of "; ok" to suppress "warning[fwdref]"
 906+ 860B             >
 906+ 860B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 907+ 860B 00 71                        dw      QCOMP
 908+ 860D 51 6D 2F 71                  dw      ONE, QPAIRS
 909+ 8611 79 71 66 64                  dw      COMPILE, BRANCH
 910+ 8615 84 85                        dw      BACK
 911+ 8617 BD 69                        dw      EXIT
 912+ 8619
 913+ 8619              //  ______________________________________________________________________
 914+ 8619              //
 915+ 8619              // until        ( a 1 -- ) \ compile-time
 916+ 8619                              Colon_Def UNTIL, "UNTIL", is_immediate
 916+ 8619             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 916+ 8619             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 916+ 8619             >
 916+ 8619             >                // dummy db directives used to calculate length of namec
 916+ 8619 55 4E 54 49 >                db      "UNTIL"
 916+ 861D 4C          >
 916+ 861E             >len_NFA         defl    $ - temp_NFA
 916+ 861E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 916+ 8619             >
 916+ 8619 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 916+ 861A 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 916+ 861E 4C          >
 916+ 861F             >                org     $-1                 // alter last byte of Name just above to set
 916+ 861E CC          >                db      {b $} | END_BIT     // msb as name end
 916+ 861F             >
 916+ 861F 01 86       >                dw      last_NFA            // Link to previous definition Name
 916+ 8621             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 916+ 8621 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 916+ 8623             >                else
 916+ 8623 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 916+ 8623             >                endif           ; ok        // for other definitions it "points" the correct handler
 916+ 8623             >                // Use of "; ok" to suppress "warning[fwdref]"
 916+ 8623             >
 916+ 8623             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 917+ 8623 00 71                        dw      QCOMP
 918+ 8625 51 6D 2F 71                  dw      ONE, QPAIRS
 919+ 8629 79 71 7D 64                  dw      COMPILE, ZBRANCH
 920+ 862D 84 85                        dw      BACK
 921+ 862F BD 69                        dw      EXIT
 922+ 8631
 923+ 8631              //  ______________________________________________________________________
 924+ 8631              //
 925+ 8631              // end          ( a 1 -- ) \ compile-time
 926+ 8631                              Colon_Def END, "END", is_immediate
 926+ 8631             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 926+ 8631             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 926+ 8631             >
 926+ 8631             >                // dummy db directives used to calculate length of namec
 926+ 8631 45 4E 44    >                db      "END"
 926+ 8634             >len_NFA         defl    $ - temp_NFA
 926+ 8634             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 926+ 8631             >
 926+ 8631 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 926+ 8632 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 926+ 8635             >                org     $-1                 // alter last byte of Name just above to set
 926+ 8634 C4          >                db      {b $} | END_BIT     // msb as name end
 926+ 8635             >
 926+ 8635 19 86       >                dw      last_NFA            // Link to previous definition Name
 926+ 8637             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 926+ 8637 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 926+ 8639             >                else
 926+ 8639 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 926+ 8639             >                endif           ; ok        // for other definitions it "points" the correct handler
 926+ 8639             >                // Use of "; ok" to suppress "warning[fwdref]"
 926+ 8639             >
 926+ 8639             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 927+ 8639 21 86                        dw      UNTIL
 928+ 863B BD 69                        dw      EXIT
 929+ 863D
 930+ 863D              //  ______________________________________________________________________
 931+ 863D              //
 932+ 863D              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 933+ 863D                              Colon_Def WHILE, "WHILE", is_immediate
 933+ 863D             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 933+ 863D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 933+ 863D             >
 933+ 863D             >                // dummy db directives used to calculate length of namec
 933+ 863D 57 48 49 4C >                db      "WHILE"
 933+ 8641 45          >
 933+ 8642             >len_NFA         defl    $ - temp_NFA
 933+ 8642             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 933+ 863D             >
 933+ 863D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 933+ 863E 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 933+ 8642 45          >
 933+ 8643             >                org     $-1                 // alter last byte of Name just above to set
 933+ 8642 C5          >                db      {b $} | END_BIT     // msb as name end
 933+ 8643             >
 933+ 8643 31 86       >                dw      last_NFA            // Link to previous definition Name
 933+ 8645             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 933+ 8645 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 933+ 8647             >                else
 933+ 8647 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 933+ 8647             >                endif           ; ok        // for other definitions it "points" the correct handler
 933+ 8647             >                // Use of "; ok" to suppress "warning[fwdref]"
 933+ 8647             >
 933+ 8647             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 934+ 8647 93 85                        dw      IF
 935+ 8649 9F 6A                        dw      TWO_PLUS // ( that is 4 )
 936+ 864B BD 69                        dw      EXIT
 937+ 864D
 938+ 864D              //  ______________________________________________________________________
 939+ 864D              //
 940+ 864D              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 941+ 864D                              Colon_Def REPEAT, "REPEAT", is_immediate
 941+ 864D             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 941+ 864D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 941+ 864D             >
 941+ 864D             >                // dummy db directives used to calculate length of namec
 941+ 864D 52 45 50 45 >                db      "REPEAT"
 941+ 8651 41 54       >
 941+ 8653             >len_NFA         defl    $ - temp_NFA
 941+ 8653             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 941+ 864D             >
 941+ 864D C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 941+ 864E 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 941+ 8652 41 54       >
 941+ 8654             >                org     $-1                 // alter last byte of Name just above to set
 941+ 8653 D4          >                db      {b $} | END_BIT     // msb as name end
 941+ 8654             >
 941+ 8654 3D 86       >                dw      last_NFA            // Link to previous definition Name
 941+ 8656             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 941+ 8656 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 941+ 8658             >                else
 941+ 8658 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 941+ 8658             >                endif           ; ok        // for other definitions it "points" the correct handler
 941+ 8658             >                // Use of "; ok" to suppress "warning[fwdref]"
 941+ 8658             >
 941+ 8658             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 942+ 8658 99 6B                        dw      TWO_SWAP
 943+ 865A 09 86                        dw      AGAIN
 944+ 865C 59 6D 6F 6F                  dw      TWO, SUBTRACT
 945+ 8660 AB 85                        dw      ENDIF
 946+ 8662 BD 69                        dw      EXIT
 947+ 8664
 948+ 8664              //  ______________________________________________________________________
 949+ 8664              //
 950+ 8664              // ?do-
 951+ 8664              // special version of "BACK" used by ?DO and LOOP
 952+ 8664                              Colon_Def C_DO_BACK, "?DO-", is_normal
 952+ 8664             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 952+ 8664             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 952+ 8664             >
 952+ 8664             >                // dummy db directives used to calculate length of namec
 952+ 8664 3F 44 4F 2D >                db      "?DO-"
 952+ 8668             >len_NFA         defl    $ - temp_NFA
 952+ 8668             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 952+ 8664             >
 952+ 8664 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 952+ 8665 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 952+ 8669             >                org     $-1                 // alter last byte of Name just above to set
 952+ 8668 AD          >                db      {b $} | END_BIT     // msb as name end
 952+ 8669             >
 952+ 8669 4D 86       >                dw      last_NFA            // Link to previous definition Name
 952+ 866B             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 952+ 866B CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 952+ 866D             >                else
 952+ 866D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 952+ 866D             >                endif           ; ok        // for other definitions it "points" the correct handler
 952+ 866D             >                // Use of "; ok" to suppress "warning[fwdref]"
 952+ 866D             >
 952+ 866D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 953+ 866D 84 85                        dw      BACK
 954+ 866F 87 69 B9 6E                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 954+ 8673 DD 6B 6F 6F
 955+ 8677 7D 64                        dw      ZBRANCH
 956+ 8679 06 00                        dw      CDoBack_Endif - $
 957+ 867B 9F 6A AB 85                  dw          TWO_PLUS, ENDIF
 958+ 867F              CDoBack_Endif:
 959+ 867F 42 71 B9 6E                  dw      QCSP, CSP, STORE
 959+ 8683 EA 6B
 960+ 8685 BD 69                        dw      EXIT
 961+ 8687
 962+ 8687              //  ______________________________________________________________________
 963+ 8687              //
 964+ 8687              // do
 965+ 8687              // DO  ... LOOP
 966+ 8687              // DO  ... n +LOOP
 967+ 8687              // ?DO ... LOOP
 968+ 8687              // ?DO ... n +LOOP
 969+ 8687                              Colon_Def DO, "DO", is_immediate
 969+ 8687             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 969+ 8687             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 969+ 8687             >
 969+ 8687             >                // dummy db directives used to calculate length of namec
 969+ 8687 44 4F       >                db      "DO"
 969+ 8689             >len_NFA         defl    $ - temp_NFA
 969+ 8689             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 969+ 8687             >
 969+ 8687 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 969+ 8688 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 969+ 868A             >                org     $-1                 // alter last byte of Name just above to set
 969+ 8689 CF          >                db      {b $} | END_BIT     // msb as name end
 969+ 868A             >
 969+ 868A 64 86       >                dw      last_NFA            // Link to previous definition Name
 969+ 868C             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 969+ 868C CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 969+ 868E             >                else
 969+ 868E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 969+ 868E             >                endif           ; ok        // for other definitions it "points" the correct handler
 969+ 868E             >                // Use of "; ok" to suppress "warning[fwdref]"
 969+ 868E             >
 969+ 868E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 970+ 868E 79 71 05 65                  dw      COMPILE, C_DO
 971+ 8692 B9 6E DD 6B                  dw      CSP, FETCH, STORE_CSP
 971+ 8696 D3 70
 972+ 8698 1B 6F 61 6D                  dw      HERE, THREE
 973+ 869C BD 69                        dw      EXIT
 974+ 869E
 975+ 869E              //  ______________________________________________________________________
 976+ 869E              //
 977+ 869E              // loop
 978+ 869E                              Colon_Def LOOP, "LOOP", is_immediate
 978+ 869E             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 978+ 869E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ 869E             >
 978+ 869E             >                // dummy db directives used to calculate length of namec
 978+ 869E 4C 4F 4F 50 >                db      "LOOP"
 978+ 86A2             >len_NFA         defl    $ - temp_NFA
 978+ 86A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ 869E             >
 978+ 869E C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ 869F 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 978+ 86A3             >                org     $-1                 // alter last byte of Name just above to set
 978+ 86A2 D0          >                db      {b $} | END_BIT     // msb as name end
 978+ 86A3             >
 978+ 86A3 87 86       >                dw      last_NFA            // Link to previous definition Name
 978+ 86A5             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 86A5 CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 978+ 86A7             >                else
 978+ 86A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 978+ 86A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 86A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 86A7             >
 978+ 86A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 86A7 61 6D 2F 71                  dw      THREE, QPAIRS
 980+ 86AB 79 71 92 64                  dw      COMPILE, C_LOOP
 981+ 86AF 6B 86                        dw      C_DO_BACK
 982+ 86B1 BD 69                        dw      EXIT
 983+ 86B3
 984+ 86B3              //  ______________________________________________________________________
 985+ 86B3              //
 986+ 86B3              // +loop
 987+ 86B3                              Colon_Def PLOOP, "+LOOP", is_immediate
 987+ 86B3             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 987+ 86B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 987+ 86B3             >
 987+ 86B3             >                // dummy db directives used to calculate length of namec
 987+ 86B3 2B 4C 4F 4F >                db      "+LOOP"
 987+ 86B7 50          >
 987+ 86B8             >len_NFA         defl    $ - temp_NFA
 987+ 86B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 987+ 86B3             >
 987+ 86B3 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 987+ 86B4 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 987+ 86B8 50          >
 987+ 86B9             >                org     $-1                 // alter last byte of Name just above to set
 987+ 86B8 D0          >                db      {b $} | END_BIT     // msb as name end
 987+ 86B9             >
 987+ 86B9 9E 86       >                dw      last_NFA            // Link to previous definition Name
 987+ 86BB             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 987+ 86BB CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 987+ 86BD             >                else
 987+ 86BD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 987+ 86BD             >                endif           ; ok        // for other definitions it "points" the correct handler
 987+ 86BD             >                // Use of "; ok" to suppress "warning[fwdref]"
 987+ 86BD             >
 987+ 86BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 988+ 86BD 61 6D 2F 71                  dw      THREE, QPAIRS
 989+ 86C1 79 71 C9 64                  dw      COMPILE, C_PLOOP
 990+ 86C5 6B 86                        dw      C_DO_BACK
 991+ 86C7 BD 69                        dw      EXIT
 992+ 86C9
 993+ 86C9              //  ______________________________________________________________________
 994+ 86C9              //
 995+ 86C9              // ?do
 996+ 86C9                              Colon_Def QDO, "?DO", is_immediate
 996+ 86C9             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 996+ 86C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 996+ 86C9             >
 996+ 86C9             >                // dummy db directives used to calculate length of namec
 996+ 86C9 3F 44 4F    >                db      "?DO"
 996+ 86CC             >len_NFA         defl    $ - temp_NFA
 996+ 86CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 996+ 86C9             >
 996+ 86C9 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 996+ 86CA 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 996+ 86CD             >                org     $-1                 // alter last byte of Name just above to set
 996+ 86CC CF          >                db      {b $} | END_BIT     // msb as name end
 996+ 86CD             >
 996+ 86CD B3 86       >                dw      last_NFA            // Link to previous definition Name
 996+ 86CF             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 996+ 86CF CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 996+ 86D1             >                else
 996+ 86D1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 996+ 86D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 996+ 86D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 996+ 86D1             >
 996+ 86D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 997+ 86D1 79 71 D7 64                  dw      COMPILE, C_Q_DO
 998+ 86D5 B9 6E DD 6B                  dw      CSP, FETCH, STORE_CSP
 998+ 86D9 D3 70
 999+ 86DB 1B 6F 49 6D                  dw      HERE, ZERO, COMMA, ZERO
 999+ 86DF 37 6F 49 6D
1000+ 86E3 1B 6F 61 6D                  dw      HERE, THREE
1001+ 86E7 BD 69                        dw      EXIT
1002+ 86E9
1003+ 86E9              Latest_Definition:
1004+ 86E9              //  ______________________________________________________________________
1005+ 86E9              //
1006+ 86E9              // \
1007+ 86E9                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1007+ 86E9             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1007+ 86E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1007+ 86E9             >
1007+ 86E9             >                // dummy db directives used to calculate length of namec
1007+ 86E9 5C          >                db      "\\"
1007+ 86EA             >len_NFA         defl    $ - temp_NFA
1007+ 86EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1007+ 86E9             >
1007+ 86E9 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1007+ 86EA 5C          >                db      "\\"               // name string in 7-bit ascii, but
1007+ 86EB             >                org     $-1                 // alter last byte of Name just above to set
1007+ 86EA DC          >                db      {b $} | END_BIT     // msb as name end
1007+ 86EB             >
1007+ 86EB C9 86       >                dw      last_NFA            // Link to previous definition Name
1007+ 86ED             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1007+ 86ED CE 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1007+ 86EF             >                else
1007+ 86EF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1007+ 86EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1007+ 86EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1007+ 86EF             >
1007+ 86EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1008+ 86EF 48 6E DD 6B                  dw      BLK, FETCH
1009+ 86F3 7D 64                        dw      ZBRANCH
1010+ 86F5 30 00                        dw      Backslash_Else_1 - $
1011+ 86F7 48 6E DD 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1011+ 86FB 51 6D BA 6F
1012+ 86FF 7D 64                        dw          ZBRANCH
1013+ 8701 18 00                        dw          Backslash_Else_2 - $
1014+ 8703 51 6E DD 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1014+ 8707 7D 6D 2A 7A
1014+ 870B 7D 6D
1015+ 870D 3D 6B 6F 6F                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1015+ 8711 51 6E BA 6B
1016+ 8715 66 64                        dw          BRANCH
1017+ 8717 0A 00                        dw          Backslash_Endif_2 - $
1018+ 8719              Backslash_Else_2:
1019+ 8719 89 6D B9 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1019+ 871D 51 6E EA 6B
1020+ 8721              Backslash_Endif_2:
1021+ 8721 66 64                        dw      BRANCH
1022+ 8723 0A 00                        dw      Backslash_Endif_1 - $
1023+ 8725              Backslash_Else_1:
1024+ 8725 43 64 50 00                  dw          LIT, 80, TO_IN, STORE
1024+ 8729 51 6E EA 6B
1025+ 872D              Backslash_Endif_1:
1026+ 872D BD 69                        dw      EXIT
1027+ 872F
1028+ 872F              Fence_Word:
1029+ 872F              //  ______________________________________________________________________
1030+ 872F              //
1031+ 872F
1032+ 872F 00           Here_Dictionary db      0
1033+ 8730
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
 113  8730
 114  8730              // now we save the compiled file so we can either run it or debug it
 115  8730                              SAVENEX OPEN "output/main.nex", ORIGIN
 116  8730                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 117  8730                              SAVENEX CFG  0
 118  8730                              SAVENEX BANK 2, 0
 119  8730                              SAVENEX AUTO
 120  8730                              SAVENEX CLOSE
 121  8730
 122  8730              //              PAGE 7 ;set 7 page to current slot
 123  8730              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 124  8730              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 125  8730
 126  8730              //              SAVETAP "output/F15j.tap", CODE, "forth15j", $6400, 9000
 127  8730
 128  8730                              SAVEBIN "output/forth15j.bin", ORIGIN, 9400
 129  8730
 130  8730                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
