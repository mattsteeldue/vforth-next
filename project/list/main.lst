# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              // v-Forth 1.6 NextZXOS version
   7  0000              // build 2021606
   8  0000              //
   9  0000              //
  10  0000              //  NextZXOS version
  11  0000              //  ______________________________________________________________________
  12  0000              //
  13  0000              //  This work is available as-is with no whatsoever warranty.
  14  0000              //  Copying, modifying and distributing this software is allowed
  15  0000              //  provided that the copyright notice is kept.
  16  0000              //  ______________________________________________________________________
  17  0000              //
  18  0000              //  by Matteo Vitturi, 1990-2021
  19  0000              //
  20  0000              //  https://sites.google.com/view/vforth/vforth15-next
  21  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  22  0000              //
  23  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  24  0000              //  Each line of this source list mustn't exceed 80 bytes.
  25  0000              //  Z80N (ZX Spectrum Next) extension is available.
  26  0000              //
  27  0000              //  This list has been tested using the following configuration:
  28  0000              //      - CSpect emulator V.2.12.30
  29  0000              //  ______________________________________________________________________
  30  0000              //
  31  0000              //  Z80 Registers usage map
  32  0000              //
  33  0000              //  AF
  34  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  35  0000              //  DE - Top of Stack element. The second from top is pointed by SP
  36  0000              //  HL - Working
  37  0000              //
  38  0000              //  AF'- Sometime used for backup purpose
  39  0000              //  BC'- Not used
  40  0000              //  DE'- Not used
  41  0000              //  HL'- Not used: (saved at startup)
  42  0000              //
  43  0000              //  SP - Calculator Stack Pointer
  44  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  45  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  46  0000              //
  47  0000              //  ______________________________________________________________________
  48  0000              //
  49  0000              //  _________________
  50  0000              //
  51  0000              //  FORTH DEFINITIONS
  52  0000              //  _________________
  53  0000
  54  0000                              OPT     --zxnext
  55  0000              //  ______________________________________________________________________
  56  0000              //
  57  0000              // this controls some debugging code in L0.asm
  58  0000              //  0 for final binary release.
  59  0000              //  1 for debugging with Visual Studio Code and DeZog
  60  0000              // -1 for for binary comparison with Forth generated code.
  61  0000              DEBUGGING       equ     -1
  62  0000              //
  63  0000              //  ______________________________________________________________________
  64  0000
  65  0000                              if ( -1 == DEBUGGING )
  66  0000              ORIGIN          equ     $6380                   // for binary comparison
  67  0000                              endif
  68  0000              //  ______________________________________________________________________
  69  0000
  70  0000                              if (  0 == DEBUGGING )
  71  0000 ~            ORIGIN          equ     $6400                   // binary
  72  0000                              endif
  73  0000              //  ______________________________________________________________________
  74  0000
  75  0000                              if (  1 == DEBUGGING )
  76  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  77  0000                              endif
  78  0000              //  ______________________________________________________________________
  79  0000
  80  0000                              DEVICE  ZXSPECTRUMNEXT
  81  0000
  82  0000                              ORG     ORIGIN
  83  6380
  84  6380                              if ( -1 == DEBUGGING )
  85  6380 00 00 00...                  ds 128                            // for binary comparison
  86  6384                              endif
  87  6400
  88  6400              //  ______________________________________________________________________
  89  6400              //
  90  6400              //  Naming convention for Label vs Forth correspondance
  91  6400              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  92  6400              //    - Leading "0" is converted into "Z_"
  93  6400              //    - Leading "(" is converted into "C_", closing bracket is omitted
  94  6400              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  95  6400              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  96  6400              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  97  6400              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  98  6400              //    - Greater-Than sign ">" in _GREATER or TO_ depending
  99  6400              //    - Equal sign "=" is converted in EQUAL
 100  6400              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 101  6400              //    - Asterisk sign "*" is converted in _MUL or STAR
 102  6400              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 103  6400              //    - Exclamation mark "!" is converted in STORE
 104  6400              //    - At-Sign "@" is converted in FETCH
 105  6400              //    - Words that collides with Assembler are normally suffixed with "_OP"
 106  6400
 107  6400                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
   1+ 6400              //  ______________________________________________________________________
   2+ 6400              //
   3+ 6400              //  system.asm
   4+ 6400              //  ______________________________________________________________________
   5+ 6400
   6+ 6400              // Registers:
   7+ 6400              //
   8+ 6400              //      BC: Instruction Pointer
   9+ 6400              //      DE:
  10+ 6400              //      HL: W register
  11+ 6400              //      SP: Calc stack Pointer
  12+ 6400              //      IX: Inner-Interpreter Address
  13+ 6400
  14+ 6400              //  ______________________________________________________________________
  15+ 6400              //
  16+ 6400              // ZX-Spectrum standard system variables
  17+ 6400              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6400              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6400              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6400              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6400
  22+ 6400              //  ______________________________________________________________________
  23+ 6400              //
  24+ 6400              // Flag constants
  25+ 6400              TRUE_FLAG       equ     $FFFF
  26+ 6400              FALSE_FLAG      equ     $0000
  27+ 6400
  28+ 6400              //  ______________________________________________________________________
  29+ 6400              //
  30+ 6400              // Ascii char constants
  31+ 6400              NUL_CHAR        equ     $00
  32+ 6400              COMMA_CHAR      equ     $06
  33+ 6400              BACKSPACE_CHAR  equ     $08
  34+ 6400              CR_CHAR         equ     $0D
  35+ 6400              BLANK_CHAR      equ     $20
  36+ 6400              QUOTE_CHAR      equ     "'"
  37+ 6400              DQUOTE_CHAR     equ     '"'
  38+ 6400              UNDERSCORE_CHAR equ     $5F
  39+ 6400              SOLIDBLOCK_CHAR equ     $8F
  40+ 6400              HALFBLOCK_CHAR  equ     $8C
  41+ 6400              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6400              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6400
  44+ 6400
  45+ 6400              //  ______________________________________________________________________
  46+ 6400              //
  47+ 6400
  48+ 6400                              // emulate something like:  ld hl,rp
  49+ 6400              ldhlrp          macro
  50+ 6400 ~                            ld      hl,(RP_Pointer)
  51+ 6400                              endm
  52+ 6400
  53+ 6400                              // emulate something like:  ld rp,hl
  54+ 6400              ldrphl          macro
  55+ 6400 ~                            ld      (RP_Pointer),hl
  56+ 6400                              endm
  57+ 6400
  58+ 6400              //  ______________________________________________________________________
  59+ 6400              //
  60+ 6400              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6400              next            macro
  62+ 6400 ~                            jp      (ix)
  63+ 6400                              endm
  64+ 6400
  65+ 6400              psh1            macro
  66+ 6400 ~                            push    hl
  67+ 6400 ~                            jp      (ix)
  68+ 6400                              endm
  69+ 6400
  70+ 6400              psh2            macro
  71+ 6400 ~                            push    de
  72+ 6400 ~                            push    hl
  73+ 6400 ~                            jp      (ix)
  74+ 6400                              endm
  75+ 6400
  76+ 6400              //  ______________________________________________________________________
  77+ 6400              //
  78+ 6400              // Bit constants in length-byte
  79+ 6400
  80+ 6400              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6400              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6400              END_BIT         equ     %10000000               // $80
  83+ 6400
  84+ 6400
  85+ 6400              //  ______________________________________________________________________
  86+ 6400              //
  87+ 6400              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6400              //  pointers
  89+ 6400              temp_NFA        defl    0
  90+ 6400              last_NFA        defl    0
  91+ 6400              len_NFA         defl    0
  92+ 6400
  93+ 6400              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6400              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6400              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6400
  97+ 6400              //  ______________________________________________________________________
  98+ 6400              //
  99+ 6400              //  Create a new "low-level" definition
 100+ 6400              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6400              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6400              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6400              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6400              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6400              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6400              //  This macro acts much like the standard Forth definition CREATE
 107+ 6400
 108+ 6400              New_Def         macro   label, namec, runcode, bits
 109+ 6400 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6400 ~
 111+ 6400 ~                            // dummy db directives used to calculate length of namec
 112+ 6400 ~                            db      namec
 113+ 6400 ~            len_NFA         defl    $ - temp_NFA
 114+ 6400 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6400 ~
 116+ 6400 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6400 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6400 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6400 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6400 ~
 121+ 6400 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6400 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6400 ~                            dw      runcode ; ok        // for primitive definitions  actual code
 124+ 6400 ~                            else
 125+ 6400 ~                            dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6400 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6400 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6400 ~
 129+ 6400 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6400                              endm
 131+ 6400
 132+ 6400              //  ______________________________________________________________________
 133+ 6400              //
 134+ 6400              // Create a "constant"
 135+ 6400              // The constant value is compiled in first PFA cell
 136+ 6400              Constant_Def    macro   label, namec, constant_value
 137+ 6400 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6400 ~                            dw      constant_value
 139+ 6400                              endm
 140+ 6400
 141+ 6400              //  ______________________________________________________________________
 142+ 6400              //
 143+ 6400              // Create a "variable"
 144+ 6400              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6400              // this allow creation of "variables" which content is  of any length
 146+ 6400              Variable_Def    macro   label, namec, initial_value
 147+ 6400 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6400 ~                            dw      initial_value
 149+ 6400                              endm
 150+ 6400
 151+ 6400              //  ______________________________________________________________________
 152+ 6400              //
 153+ 6400              // Create a "user"
 154+ 6400              // It uses a single byte as offset to calculate the address of the variable
 155+ 6400              User_Def        macro   label, namec, offset_value
 156+ 6400 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6400 ~                            db      offset_value
 158+ 6400                              endm
 159+ 6400
 160+ 6400              //  ______________________________________________________________________
 161+ 6400              //
 162+ 6400              // Create a "colon-definition"
 163+ 6400              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6400              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6400              Colon_Def       macro   label, namec, bits
 166+ 6400 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6400                              endm
 168+ 6400
 169+ 6400              //  ______________________________________________________________________
 170+ 6400              //
 171+ 6400
 172+ 6400              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6400              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6400              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6400              USER_system:    equ     $D188               // User variables zone.
 176+ 6400              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6400              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6400
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
 108  6400                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
   1+ 6400              //  ______________________________________________________________________
   2+ 6400              //
   3+ 6400              //  L0.asm
   4+ 6400              //
   5+ 6400              //  Origin-Area and Level-0 definitions
   6+ 6400              //  ______________________________________________________________________
   7+ 6400
   8+ 6400
   9+ 6400              Cold_origin:
  10+ 6400 A7                           and     a
  11+ 6401 C3 52 79                     jp      ColdRoutine
  12+ 6404              Warm_origin:
  13+ 6404 37                           scf
  14+ 6405 C3 52 79                     jp      WarmRoutine
  15+ 6408
  16+ 6408              // +008
  17+ 6408 E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 640A
  19+ 640A              // +00A
  20+ 640A 00 0E                        dw      $0E00
  21+ 640C
  22+ 640C              // +00C
  23+ 640C 26 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 640E
  25+ 640E              // +00E
  26+ 640E 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6410
  28+ 6410              // +010
  29+ 6410 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6412
  31+ 6412              // +012
  32+ 6412 E8 D0        S0_origin:      dw      S0_system
  33+ 6414 88 D1        R0_origin:      dw      R0_system
  34+ 6416 E8 D0        TIB_origin:     dw      TIB_system
  35+ 6418 1F 00        WIDTH_origin:   dw      31
  36+ 641A 01 00        WARNING_origin: dw      1
  37+ 641C 6C 87        FENCE_origin:   dw      Fence_Word
  38+ 641E 6C 87        DP_origin       dw      Fence_Word
  39+ 6420 60 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6422 E4 D1                        dw      FIRST_system
  41+ 6424 00 E0                        dw      LIMIT_system
  42+ 6426
  43+ 6426              // +026
  44+ 6426 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 6427 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 6428 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 6429 00                           db      0
  48+ 642A
  49+ 642A              // +02A
  50+ 642A 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 642C
  52+ 642C              // +02C
  53+ 642C 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 642E
  55+ 642E              // +02E
  56+ 642E 88 D1        USER_Pointer:   dw      USER_system
  57+ 6430
  58+ 6430              // +030
  59+ 6430 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6432
  61+ 6432              // +32
  62+ 6432              // SP_Basic        dw      0
  63+ 6432
  64+ 6432
  65+ 6432              //  ______________________________________________________________________
  66+ 6432
  67+ 6432              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6432              // instead of their equivalent long sequences.
  69+ 6432
  70+ 6432              //  ______________________________________________________________________
  71+ 6432
  72+ 6432              // address for "next" - inner interpreter
  73+ 6432              // This address must always be pointed by IX
  74+ 6432              // "next" macro simply does a  jp(ix)  instruction
  75+ 6432
  76+ 6432              // Psh2_Ptr:       push    de
  77+ 6432              // Psh1_Ptr:       push    hl
  78+ 6432
  79+ 6432              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6432
  81+ 6432                              if ( 1 == DEBUGGING )
  82+ 6432 ~                            ld      hl, Next_Breakpoint_1
  83+ 6432 ~                            and     a
  84+ 6432 ~                            sbc     hl, bc
  85+ 6432 ~                            jr      nz, Next_Continue
  86+ 6432 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6432                              endif
  88+ 6432
  89+ 6432              Next_Continue:
  90+ 6432 0A                           ld      a, (bc)
  91+ 6433 03                           inc     bc
  92+ 6434 6F                           ld      l, a
  93+ 6435 0A                           ld      a, (bc)
  94+ 6436 03                           inc     bc
  95+ 6437 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 6438
  97+ 6438              // Execute xt i.e. CFA held in HL
  98+ 6438              Exec_Ptr:
  99+ 6438 5E                           ld      e, (hl)
 100+ 6439 23                           inc     hl
 101+ 643A 56                           ld      d, (hl)
 102+ 643B EB                           ex      de, hl
 103+ 643C E9                           jp      (hl)                // and jump to it
 104+ 643D                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 643D
 106+ 643D              //  ______________________________________________________________________
 107+ 643D              //
 108+ 643D              // lit          -- x
 109+ 643D              // puts on top of stack the value of the following word.
 110+ 643D              // it is compiled in colon definition before a literal number
 111+ 643D
 112+ 643D                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 643D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 643D             >
 112+ 643D             >                // dummy db directives used to calculate length of namec
 112+ 643D 4C 49 54    >                db      "LIT"
 112+ 6440             >len_NFA         defl    $ - temp_NFA
 112+ 6440             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 643D             >
 112+ 643D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 643E 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 6441             >                org     $-1                 // alter last byte of Name just above to set
 112+ 6440 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 6441             >
 112+ 6441 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 6443             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 6443 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 112+ 6443             >                else
 112+ 6443 45 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 112+ 6445             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 6445             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 6445             >
 112+ 6445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 6445
 114+ 6445 0A                           ld      a, (bc)
 115+ 6446 03                           inc     bc
 116+ 6447 6F                           ld      l, a
 117+ 6448 0A                           ld      a, (bc)
 118+ 6449 03                           inc     bc
 119+ 644A 67                           ld      h, a
 120+ 644B                              psh1
 120+ 644B E5          >                push    hl
 120+ 644C DD E9       >                jp      (ix)
 121+ 644E
 122+ 644E              //  ______________________________________________________________________
 123+ 644E              //
 124+ 644E              // execute      i*x xt -- j*x
 125+ 644E              // execution token. usually xt is given by CFA
 126+ 644E
 127+ 644E                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 644E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 644E             >
 127+ 644E             >                // dummy db directives used to calculate length of namec
 127+ 644E 45 58 45 43 >                db      "EXECUTE"
 127+ 6452 55 54 45    >
 127+ 6455             >len_NFA         defl    $ - temp_NFA
 127+ 6455             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 644E             >
 127+ 644E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 644F 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 6453 55 54 45    >
 127+ 6456             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6455 C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 6456             >
 127+ 6456 3D 64       >                dw      last_NFA            // Link to previous definition Name
 127+ 6458             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6458 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 127+ 6458             >                else
 127+ 6458 5A 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 645A             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 645A             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 645A             >
 127+ 645A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 645A E1                           pop     hl
 129+ 645B 18 DB                        jr      Exec_Ptr
 130+ 645D
 131+ 645D
 132+ 645D              //  ______________________________________________________________________
 133+ 645D              //
 134+ 645D              // branch       --
 135+ 645D              // unconditional branch in colon definition using the following cell as an offset from current IP value
 136+ 645D              // compiled by ELSE, AGAIN and some other immediate words
 137+ 645D
 138+ 645D                              New_Def BRANCH, "BRANCH", is_code, is_normal
 138+ 645D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ 645D             >
 138+ 645D             >                // dummy db directives used to calculate length of namec
 138+ 645D 42 52 41 4E >                db      "BRANCH"
 138+ 6461 43 48       >
 138+ 6463             >len_NFA         defl    $ - temp_NFA
 138+ 6463             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ 645D             >
 138+ 645D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ 645E 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 138+ 6462 43 48       >
 138+ 6464             >                org     $-1                 // alter last byte of Name just above to set
 138+ 6463 C8          >                db      {b $} | END_BIT     // msb as name end
 138+ 6464             >
 138+ 6464 4E 64       >                dw      last_NFA            // Link to previous definition Name
 138+ 6466             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 6466 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 138+ 6466             >                else
 138+ 6466 68 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 138+ 6468             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 6468             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 6468             >
 138+ 6468             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6468              Branch_Ptr:
 140+ 6468 60                           ld      h, b
 141+ 6469 69                           ld      l, c
 142+ 646A 5E                           ld      e, (hl)
 143+ 646B 23                           inc     hl
 144+ 646C 56                           ld      d, (hl)
 145+ 646D 2B                           dec     hl                  // offset is calculated from current IP
 146+ 646E 19                           add     hl, de
 147+ 646F 4D                           ld      c, l
 148+ 6470 44                           ld      b, h
 149+ 6471                              next
 149+ 6471 DD E9       >                jp      (ix)
 150+ 6473
 151+ 6473
 152+ 6473              //  ______________________________________________________________________
 153+ 6473              //
 154+ 6473              // 0branch      f --
 155+ 6473              // conditional branch if the top-of-stack is ZERO or FALSE.
 156+ 6473              // compiled by IF, UNTIL and some other immediate words
 157+ 6473
 158+ 6473                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 158+ 6473             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6473             >
 158+ 6473             >                // dummy db directives used to calculate length of namec
 158+ 6473 30 42 52 41 >                db      "0BRANCH"
 158+ 6477 4E 43 48    >
 158+ 647A             >len_NFA         defl    $ - temp_NFA
 158+ 647A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6473             >
 158+ 6473 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6474 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 158+ 6478 4E 43 48    >
 158+ 647B             >                org     $-1                 // alter last byte of Name just above to set
 158+ 647A C8          >                db      {b $} | END_BIT     // msb as name end
 158+ 647B             >
 158+ 647B 5D 64       >                dw      last_NFA            // Link to previous definition Name
 158+ 647D             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 647D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 158+ 647D             >                else
 158+ 647D 7F 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 647F             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 647F             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 647F             >
 158+ 647F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 647F              ZBranch_Ptr:
 160+ 647F E1                           pop     hl
 161+ 6480 7D                           ld      a, l
 162+ 6481 B4                           or      h
 163+ 6482 CA 68 64                     jp      z, Branch_Ptr
 164+ 6485 03                           inc     bc                  // if not branch, skip offset cell.
 165+ 6486 03                           inc     bc
 166+ 6487                              next
 166+ 6487 DD E9       >                jp      (ix)
 167+ 6489
 168+ 6489              //  ______________________________________________________________________
 169+ 6489              //
 170+ 6489              // (loop)       --
 171+ 6489              // compiled by +LOOP. it uses the top two values of return-stack to
 172+ 6489              // keep track of index and limit
 173+ 6489                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 173+ 6489             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6489             >
 173+ 6489             >                // dummy db directives used to calculate length of namec
 173+ 6489 28 4C 4F 4F >                db      "(LOOP)"
 173+ 648D 50 29       >
 173+ 648F             >len_NFA         defl    $ - temp_NFA
 173+ 648F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6489             >
 173+ 6489 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 648A 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 173+ 648E 50 29       >
 173+ 6490             >                org     $-1                 // alter last byte of Name just above to set
 173+ 648F A9          >                db      {b $} | END_BIT     // msb as name end
 173+ 6490             >
 173+ 6490 73 64       >                dw      last_NFA            // Link to previous definition Name
 173+ 6492             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6492 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 173+ 6492             >                else
 173+ 6492 94 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6494             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6494             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6494             >
 173+ 6494             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6494
 175+ 6494
 176+ 6494 11 01 00                     ld      de, 1               // bc contains increment of 1
 177+ 6497
 178+ 6497
 179+ 6497
 180+ 6497
 181+ 6497
 182+ 6497
 183+ 6497
 184+ 6497
 185+ 6497              Loop_Ptr:
 186+ 6497                              ldhlrp                      // ld hl,rp macro 30h +Origin
 186+ 6497 2A 30 64    >                ld      hl,(RP_Pointer)
 187+ 649A 7E                           ld      a, (hl)             // hl points to loop-index, add increment de to it.
 188+ 649B 83                           add     e
 189+ 649C 77                           ld      (hl), a
 190+ 649D 5F                           ld      e, a
 191+ 649E 23                           inc     hl
 192+ 649F 7E                           ld      a, (hl)
 193+ 64A0 8A                           adc     d
 194+ 64A1 77                           ld      (hl),a
 195+ 64A2 23                           inc     hl                  // hl now points to loop-limit
 196+ 64A3 CB 7A                        bit     7, d                // keep increment-sign just before overwriting d
 197+ 64A5 57                           ld      d, a
 198+ 64A6 20 07                        jr      nz, Loop_NegativeIncrement
 199+ 64A8
 200+ 64A8 7B                               ld      a, e
 201+ 64A9 96                               sub     (hl)
 202+ 64AA 7A                               ld      a, d
 203+ 64AB 23                               inc     hl
 204+ 64AC 9E                               sbc     (hl)
 205+ 64AD 18 05                        jr      Loop_Endif              // else
 206+ 64AF              Loop_NegativeIncrement:
 207+ 64AF 7E                               ld      a, (hl)
 208+ 64B0 93                               sub     e
 209+ 64B1 23                               inc     hl
 210+ 64B2 7E                               ld      a, (hl)
 211+ 64B3 9A                               sbc     d
 212+ 64B4              Loop_Endif:
 213+ 64B4
 214+ 64B4 FA 68 64                     jp      m, Branch_Ptr       // perform branch consuming following cell
 215+ 64B7
 216+ 64B7 23                           inc     hl
 217+ 64B8                              ldrphl                      // ld rp,hl macro 30h +Origin
 217+ 64B8 22 30 64    >                ld      (RP_Pointer),hl
 218+ 64BB
 219+ 64BB 03                           inc     bc                  // skip branch-style offset
 220+ 64BC 03                           inc     bc
 221+ 64BD                              next
 221+ 64BD DD E9       >                jp      (ix)
 222+ 64BF
 223+ 64BF              //  ______________________________________________________________________
 224+ 64BF              //
 225+ 64BF              // (+loop)       n --
 226+ 64BF              // same as (LOOP) but index is incremented by n (instead of just 1)
 227+ 64BF              // compiled by +LOOP.
 228+ 64BF                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 228+ 64BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 228+ 64BF             >
 228+ 64BF             >                // dummy db directives used to calculate length of namec
 228+ 64BF 28 2B 4C 4F >                db      "(+LOOP)"
 228+ 64C3 4F 50 29    >
 228+ 64C6             >len_NFA         defl    $ - temp_NFA
 228+ 64C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 228+ 64BF             >
 228+ 64BF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 228+ 64C0 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 228+ 64C4 4F 50 29    >
 228+ 64C7             >                org     $-1                 // alter last byte of Name just above to set
 228+ 64C6 A9          >                db      {b $} | END_BIT     // msb as name end
 228+ 64C7             >
 228+ 64C7 89 64       >                dw      last_NFA            // Link to previous definition Name
 228+ 64C9             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 228+ 64C9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 228+ 64C9             >                else
 228+ 64C9 CB 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 228+ 64CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 228+ 64CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 228+ 64CB             >
 228+ 64CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 229+ 64CB D1                           pop     de
 230+ 64CC C3 97 64                     jp      Loop_Ptr
 231+ 64CF
 232+ 64CF              //  ______________________________________________________________________
 233+ 64CF              //
 234+ 64CF              // (?do)        lim ind --
 235+ 64CF              // compiled by ?DO to make a loop checking for lim == ind first
 236+ 64CF              // at run-time (?DO) must be followed by a BRANCH offset
 237+ 64CF              // used to skip the loop if lim == ind
 238+ 64CF                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 238+ 64CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 238+ 64CF             >
 238+ 64CF             >                // dummy db directives used to calculate length of namec
 238+ 64CF 28 3F 44 4F >                db      "(?DO)"
 238+ 64D3 29          >
 238+ 64D4             >len_NFA         defl    $ - temp_NFA
 238+ 64D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 238+ 64CF             >
 238+ 64CF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 238+ 64D0 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 238+ 64D4 29          >
 238+ 64D5             >                org     $-1                 // alter last byte of Name just above to set
 238+ 64D4 A9          >                db      {b $} | END_BIT     // msb as name end
 238+ 64D5             >
 238+ 64D5 BF 64       >                dw      last_NFA            // Link to previous definition Name
 238+ 64D7             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 238+ 64D7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 238+ 64D7             >                else
 238+ 64D7 D9 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 238+ 64D9             >                endif           ; ok        // for other definitions it "points" the correct handler
 238+ 64D9             >                // Use of "; ok" to suppress "warning[fwdref]"
 238+ 64D9             >
 238+ 64D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 239+ 64D9 D1                           pop     de                  // de has the index
 240+ 64DA E1                           pop     hl                  // hl has the limit
 241+ 64DB E5                           push    hl
 242+ 64DC D5                           push    de
 243+ 64DD A7                           and     a                   // reset carry flag
 244+ 64DE ED 52                        sbc     hl, de              // compute limit - index
 245+ 64E0 20 05                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 246+ 64E2 D1                               pop     de
 247+ 64E3 E1                               pop     hl
 248+ 64E4
 249+ 64E4 C3 68 64                         jp      Branch_Ptr          // perform branch consuming following cell
 250+ 64E7              Do_Ptr:
 251+ 64E7                              ldhlrp                      // prepare RP
 251+ 64E7 2A 30 64    >                ld      hl,(RP_Pointer)
 252+ 64EA 2B                           dec     hl
 253+ 64EB 2B                           dec     hl
 254+ 64EC 2B                           dec     hl
 255+ 64ED 2B                           dec     hl
 256+ 64EE                              ldrphl
 256+ 64EE 22 30 64    >                ld      (RP_Pointer),hl
 257+ 64F1
 258+ 64F1                              // store index as top RP
 259+ 64F1 D1                           pop     de
 260+ 64F2 73                           ld      (hl), e
 261+ 64F3 23                           inc     hl
 262+ 64F4 72                           ld      (hl), d
 263+ 64F5 23                           inc     hl
 264+ 64F6                              // stores lim as second from top RP
 265+ 64F6 D1                           pop     de
 266+ 64F7 73                           ld      (hl), e
 267+ 64F8 23                           inc     hl
 268+ 64F9 72                           ld      (hl), d
 269+ 64FA
 270+ 64FA                              // skip branch-style offseet
 271+ 64FA 03                           inc     bc
 272+ 64FB 03                           inc     bc
 273+ 64FC                              next
 273+ 64FC DD E9       >                jp      (ix)
 274+ 64FE
 275+ 64FE              //  ______________________________________________________________________
 276+ 64FE              //
 277+ 64FE              // (do)        lim ind --
 278+ 64FE              // compiled by DO to make a loop checking for lim == ind first
 279+ 64FE              // this is a simpler version of (?DO)
 280+ 64FE                              New_Def C_DO, "(DO)", is_code, is_normal
 280+ 64FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 280+ 64FE             >
 280+ 64FE             >                // dummy db directives used to calculate length of namec
 280+ 64FE 28 44 4F 29 >                db      "(DO)"
 280+ 6502             >len_NFA         defl    $ - temp_NFA
 280+ 6502             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 280+ 64FE             >
 280+ 64FE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 280+ 64FF 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 280+ 6503             >                org     $-1                 // alter last byte of Name just above to set
 280+ 6502 A9          >                db      {b $} | END_BIT     // msb as name end
 280+ 6503             >
 280+ 6503 CF 64       >                dw      last_NFA            // Link to previous definition Name
 280+ 6505             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 280+ 6505 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 280+ 6505             >                else
 280+ 6505 07 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 280+ 6507             >                endif           ; ok        // for other definitions it "points" the correct handler
 280+ 6507             >                // Use of "; ok" to suppress "warning[fwdref]"
 280+ 6507             >
 280+ 6507             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 281+ 6507 0B                           dec     bc                  // prepare IP beforehand
 282+ 6508 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 283+ 6509 C3 E7 64                     jp      Do_Ptr
 284+ 650C
 285+ 650C              //  ______________________________________________________________________
 286+ 650C              //
 287+ 650C              // i            -- n
 288+ 650C              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 289+ 650C              // the current value of the index-loop
 290+ 650C                              New_Def I, "I", is_code, is_normal
 290+ 650C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 650C             >
 290+ 650C             >                // dummy db directives used to calculate length of namec
 290+ 650C 49          >                db      "I"
 290+ 650D             >len_NFA         defl    $ - temp_NFA
 290+ 650D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 650C             >
 290+ 650C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 650D 49          >                db      "I"               // name string in 7-bit ascii, but
 290+ 650E             >                org     $-1                 // alter last byte of Name just above to set
 290+ 650D C9          >                db      {b $} | END_BIT     // msb as name end
 290+ 650E             >
 290+ 650E FE 64       >                dw      last_NFA            // Link to previous definition Name
 290+ 6510             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 6510 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 290+ 6510             >                else
 290+ 6510 12 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 6512             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 6512             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 6512             >
 290+ 6512             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 6512              I_Ptr:
 292+ 6512
 293+ 6512                              ldhlrp
 293+ 6512 2A 30 64    >                ld      hl,(RP_Pointer)
 294+ 6515 5E                           ld      e, (hl)
 295+ 6516 23                           inc     hl
 296+ 6517 56                           ld      d, (hl)
 297+ 6518 D5                           push    de
 298+ 6519                              next
 298+ 6519 DD E9       >                jp      (ix)
 299+ 651B
 300+ 651B              //  ______________________________________________________________________
 301+ 651B              //
 302+ 651B              // digit        c n -- u 1  |  0
 303+ 651B              // convert a character c using base n
 304+ 651B              // returns a unsigned number and a true flag
 305+ 651B              // or just a false flag if the conversion fails
 306+ 651B                              New_Def DIGIT, "DIGIT", is_code, is_normal
 306+ 651B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 306+ 651B             >
 306+ 651B             >                // dummy db directives used to calculate length of namec
 306+ 651B 44 49 47 49 >                db      "DIGIT"
 306+ 651F 54          >
 306+ 6520             >len_NFA         defl    $ - temp_NFA
 306+ 6520             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 306+ 651B             >
 306+ 651B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 306+ 651C 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 306+ 6520 54          >
 306+ 6521             >                org     $-1                 // alter last byte of Name just above to set
 306+ 6520 D4          >                db      {b $} | END_BIT     // msb as name end
 306+ 6521             >
 306+ 6521 0C 65       >                dw      last_NFA            // Link to previous definition Name
 306+ 6523             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 306+ 6523 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 306+ 6523             >                else
 306+ 6523 25 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 306+ 6525             >                endif           ; ok        // for other definitions it "points" the correct handler
 306+ 6525             >                // Use of "; ok" to suppress "warning[fwdref]"
 306+ 6525             >
 306+ 6525             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 307+ 6525 E1                           pop     hl                  // l has the base
 308+ 6526 D1                           pop     de                  // e has the digit
 309+ 6527 7B                           ld      a, e
 310+ 6528 FE 60                        cp      $60                 // check if lowercase
 311+ 652A 38 02                        jr      c, Digit_Uppercase
 312+ 652C D6 20                            sub     $20                 // quick'n'dirty uppercase
 313+ 652E              Digit_Uppercase:
 314+ 652E D6 30                        sub     $30
 315+ 6530 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 316+ 6532 FE 0A                            cp      $0A
 317+ 6534 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 318+ 6536 D6 07                                sub     7                   // try hex and subtract 7
 319+ 6538 FE 0A                                cp      $0A
 320+ 653A 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 321+ 653C
 322+ 653C              Digit_Decimal:
 323+ 653C                              // compare digit
 324+ 653C BD                           cp      l                   // compare with base
 325+ 653D
 326+ 653D 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 327+ 653F 5F                               ld      e, a                // digit is returned as second from TOS
 328+ 6540 21 01 00                         ld      hl, 1
 329+ 6543
 330+ 6543                                  psh2
 330+ 6543 D5          >                push    de
 330+ 6544 E5          >                push    hl
 330+ 6545 DD E9       >                jp      (ix)
 331+ 6547              Digit_Fail:
 332+ 6547 21 00 00                     ld      hl, 0
 333+ 654A                              psh1
 333+ 654A E5          >                push    hl
 333+ 654B DD E9       >                jp      (ix)
 334+ 654D
 335+ 654D              //  ______________________________________________________________________
 336+ 654D              //
 337+ 654D              //  parametric uppercase routine
 338+ 654D              //  depending on the following op-code the routine can be by-passed
 339+ 654D              //  changing the behaviour of some callers.
 340+ 654D              //  If it is "ret" then the system is Case-Sensitive
 341+ 654D              //  If it is "Nop" then the system is Case-Insensitive
 342+ 654D              //  Only A register is touched.
 343+ 654D 00           Case_Sensitive: nop                         // Default is case-insensitive.
 344+ 654E              Case_Upper:
 345+ 654E FE 61                        cp      LC_A_CHAR           // lower-case "a"
 346+ 6550 D8                           ret     c                   // no change if A < "a"
 347+ 6551 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 348+ 6553 D0                           ret     nc                  // no change if A > "z"
 349+ 6554 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 350+ 6556 C9                           ret
 351+ 6557
 352+ 6557              //  ______________________________________________________________________
 353+ 6557              //
 354+ 6557              //  caseon      --
 355+ 6557              // set system case-sensitivity on
 356+ 6557              // it patches a RET/NOP at the beginning of the uppercase-routine
 357+ 6557                              New_Def CASEON, "CASEON", is_code, is_normal
 357+ 6557             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ 6557             >
 357+ 6557             >                // dummy db directives used to calculate length of namec
 357+ 6557 43 41 53 45 >                db      "CASEON"
 357+ 655B 4F 4E       >
 357+ 655D             >len_NFA         defl    $ - temp_NFA
 357+ 655D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ 6557             >
 357+ 6557 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ 6558 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 357+ 655C 4F 4E       >
 357+ 655E             >                org     $-1                 // alter last byte of Name just above to set
 357+ 655D CE          >                db      {b $} | END_BIT     // msb as name end
 357+ 655E             >
 357+ 655E 1B 65       >                dw      last_NFA            // Link to previous definition Name
 357+ 6560             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 6560 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 357+ 6560             >                else
 357+ 6560 62 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 357+ 6562             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 6562             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 6562             >
 357+ 6562             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 6562 3E C9                        ld      a, $C9              // "ret"
 359+ 6564 32 4D 65                     ld      (Case_Sensitive), a
 360+ 6567                              next
 360+ 6567 DD E9       >                jp      (ix)
 361+ 6569
 362+ 6569              //  ______________________________________________________________________
 363+ 6569              //
 364+ 6569              //  caseoff     --
 365+ 6569              // set system case-sensitivity on
 366+ 6569              // it patches a RET/NOP at the beginning of the uppercase-routine
 367+ 6569                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 367+ 6569             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 367+ 6569             >
 367+ 6569             >                // dummy db directives used to calculate length of namec
 367+ 6569 43 41 53 45 >                db      "CASEOFF"
 367+ 656D 4F 46 46    >
 367+ 6570             >len_NFA         defl    $ - temp_NFA
 367+ 6570             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 367+ 6569             >
 367+ 6569 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 367+ 656A 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 367+ 656E 4F 46 46    >
 367+ 6571             >                org     $-1                 // alter last byte of Name just above to set
 367+ 6570 C6          >                db      {b $} | END_BIT     // msb as name end
 367+ 6571             >
 367+ 6571 57 65       >                dw      last_NFA            // Link to previous definition Name
 367+ 6573             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 367+ 6573 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 367+ 6573             >                else
 367+ 6573 75 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 367+ 6575             >                endif           ; ok        // for other definitions it "points" the correct handler
 367+ 6575             >                // Use of "; ok" to suppress "warning[fwdref]"
 367+ 6575             >
 367+ 6575             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 368+ 6575 3E 00                        ld      a, $00              // "nop"
 369+ 6577 32 4D 65                     ld      (Case_Sensitive), a
 370+ 657A                              next
 370+ 657A DD E9       >                jp      (ix)
 371+ 657C
 372+ 657C              //  ______________________________________________________________________
 373+ 657C              //
 374+ 657C              //  upper       c1 -- c1 | c2
 375+ 657C              // character on top of stack is forced to Uppercase.
 376+ 657C                              New_Def UPPER, "UPPER", is_code, is_normal
 376+ 657C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 376+ 657C             >
 376+ 657C             >                // dummy db directives used to calculate length of namec
 376+ 657C 55 50 50 45 >                db      "UPPER"
 376+ 6580 52          >
 376+ 6581             >len_NFA         defl    $ - temp_NFA
 376+ 6581             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 376+ 657C             >
 376+ 657C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 376+ 657D 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 376+ 6581 52          >
 376+ 6582             >                org     $-1                 // alter last byte of Name just above to set
 376+ 6581 D2          >                db      {b $} | END_BIT     // msb as name end
 376+ 6582             >
 376+ 6582 69 65       >                dw      last_NFA            // Link to previous definition Name
 376+ 6584             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 376+ 6584 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 376+ 6584             >                else
 376+ 6584 86 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 376+ 6586             >                endif           ; ok        // for other definitions it "points" the correct handler
 376+ 6586             >                // Use of "; ok" to suppress "warning[fwdref]"
 376+ 6586             >
 376+ 6586             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 377+ 6586 E1                           pop     hl
 378+ 6587 7D                           ld      a, l
 379+ 6588 CD 4E 65                     call    Case_Upper
 380+ 658B 6F                           ld      l, a
 381+ 658C
 382+ 658C                              psh1
 382+ 658C E5          >                push    hl
 382+ 658D DD E9       >                jp      (ix)
 383+ 658F
 384+ 658F              //  ______________________________________________________________________
 385+ 658F              //
 386+ 658F              // (find)       addr voc -- addr 0 | cfa b 1
 387+ 658F              // vocabulary search,
 388+ 658F              // - voc is starting word's NFA
 389+ 658F              // - addr is the string to be searched for
 390+ 658F              // On success, it returns the CFA of found word, the first NFA byte
 391+ 658F              // (which contains length and some flags) and a true flag.
 392+ 658F              // On fail, a false flag  (no more: leaves addr unchanged)
 393+ 658F                              New_Def C_FIND, "(FIND)", is_code, is_normal
 393+ 658F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 658F             >
 393+ 658F             >                // dummy db directives used to calculate length of namec
 393+ 658F 28 46 49 4E >                db      "(FIND)"
 393+ 6593 44 29       >
 393+ 6595             >len_NFA         defl    $ - temp_NFA
 393+ 6595             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 658F             >
 393+ 658F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 6590 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 393+ 6594 44 29       >
 393+ 6596             >                org     $-1                 // alter last byte of Name just above to set
 393+ 6595 A9          >                db      {b $} | END_BIT     // msb as name end
 393+ 6596             >
 393+ 6596 7C 65       >                dw      last_NFA            // Link to previous definition Name
 393+ 6598             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 6598 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 393+ 6598             >                else
 393+ 6598 9A 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 659A             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 659A             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 659A             >
 393+ 659A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 659A                                                              // de has dictionary pointer
 395+ 659A D1                               pop     de
 396+ 659B              Find_VocabularyLoop:
 397+ 659B E1                               pop     hl                  // string pointer to search for
 398+ 659C E5                               push    hl                  // keep it on stack too for the end.
 399+ 659D 1A                               ld      a, (de)             // save NFA length byte
 400+ 659E 08                               ex      af,af'              // for later use (!)
 401+ 659F 1A                               ld      a, (de)             // reload NFA length byte
 402+ 65A0 AE                               xor     (hl)                // check if same length
 403+ 65A1 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 404+ 65A3                                  // word an text haven't the same length, skip to next vocabulary entry
 405+ 65A3 20 2C                            jr      nz, Find_DifferentLenght
 406+ 65A5
 407+ 65A5              Find_ThisWord:  // begin loop
 408+ 65A5 23                                   inc     hl
 409+ 65A6 13                                   inc     de
 410+ 65A7 1A                                   ld      a, (de)
 411+ 65A8                                      // case insensitive option - begin
 412+ 65A8 C5                                   push    bc
 413+ 65A9 E6 80                                and     $80                 // split A in msb and the rest
 414+ 65AB 47                                   ld      b, a
 415+ 65AC 1A                                   ld      a, (de)
 416+ 65AD E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 417+ 65AF CD 4D 65                             call    Case_Sensitive      // uppercase routine
 418+ 65B2 4F                                   ld      c, a
 419+ 65B3 7E                                   ld      a, (hl)
 420+ 65B4 CD 4D 65                             call    Case_Sensitive      // uppercase routine
 421+ 65B7 A9                                   xor     c
 422+ 65B8 A8                                   xor     b
 423+ 65B9 C1                                   pop     bc
 424+ 65BA                                      // case insensitive option - end
 425+ 65BA 87                                   add     a                   // ignore msb during compare
 426+ 65BB 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 427+ 65BD
 428+ 65BD                                  // loop back until last byte msb is found set
 429+ 65BD                                  // that bit marks the ending char of this word
 430+ 65BD 30 E6                            jr      nc, Find_ThisWord
 431+ 65BF
 432+ 65BF                                  // match found !
 433+ 65BF 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 434+ 65C2 19                                   add     hl, de
 435+ 65C3 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 436+ 65C4 08                                   ex      af, af'             // retrieve NFA byte (!)
 437+ 65C5 5F                                   ld      e, a
 438+ 65C6 16 00                                ld      d, 0
 439+ 65C8
 440+ 65C8
 441+ 65C8 21 01 00                             ld      hl, 1
 442+ 65CB                                      psh2
 442+ 65CB D5          >                push    de
 442+ 65CC E5          >                push    hl
 442+ 65CD DD E9       >                jp      (ix)
 443+ 65CF
 444+ 65CF              Find_DidntMatch: // didn't match (*)
 445+ 65CF 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 446+ 65D1
 447+ 65D1              Find_DifferentLenght:
 448+ 65D1                              // consume chars until the end of the word
 449+ 65D1                              // that is last byte msb is found set
 450+ 65D1 13                               inc     de
 451+ 65D2 1A                               ld      a, (de)
 452+ 65D3 87                               add     a, a
 453+ 65D4 30 FB                        jr      nc, Find_DifferentLenght
 454+ 65D6
 455+ 65D6              Find_WordEnd:   // word-end  found (**)
 456+ 65D6                              // take LFA and use it
 457+ 65D6 13                           inc     de
 458+ 65D7 EB                           ex      de, hl
 459+ 65D8 5E                           ld      e, (hl)
 460+ 65D9 23                           inc     hl
 461+ 65DA 56                           ld      d, (hl)
 462+ 65DB 7A                           ld      a, d
 463+ 65DC B3                           or      e
 464+ 65DD
 465+ 65DD                          // loop until end of vocabulary
 466+ 65DD 20 BC                    jr      nz, Find_VocabularyLoop
 467+ 65DF
 468+ 65DF E1                       pop     hl              // with this, it leaves addr unchanged
 469+ 65E0 21 00 00                 ld      hl, FALSE_FLAG
 470+ 65E3
 471+ 65E3                          psh1
 471+ 65E3 E5          >                push    hl
 471+ 65E4 DD E9       >                jp      (ix)
 472+ 65E6
 473+ 65E6              //  ______________________________________________________________________
 474+ 65E6              //
 475+ 65E6              // enclose      a c -- a  n1 n2 n3
 476+ 65E6              // starting from a, using delimiter c, determines the offsets:
 477+ 65E6              //   n1   the first character non-delimiter
 478+ 65E6              //   n2   the first delimiter after the text
 479+ 65E6              //   n3   the first character non enclosed.
 480+ 65E6              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 481+ 65E6              // an uncoditional delimiter.
 482+ 65E6              // Examples:
 483+ 65E6              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 484+ 65E6              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 485+ 65E6              // iii:	c  c  'nul'          -- 2  3  2
 486+ 65E6                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 486+ 65E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 486+ 65E6             >
 486+ 65E6             >                // dummy db directives used to calculate length of namec
 486+ 65E6 45 4E 43 4C >                db      "ENCLOSE"
 486+ 65EA 4F 53 45    >
 486+ 65ED             >len_NFA         defl    $ - temp_NFA
 486+ 65ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 486+ 65E6             >
 486+ 65E6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 486+ 65E7 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 486+ 65EB 4F 53 45    >
 486+ 65EE             >                org     $-1                 // alter last byte of Name just above to set
 486+ 65ED C5          >                db      {b $} | END_BIT     // msb as name end
 486+ 65EE             >
 486+ 65EE 8F 65       >                dw      last_NFA            // Link to previous definition Name
 486+ 65F0             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 486+ 65F0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 486+ 65F0             >                else
 486+ 65F0 F2 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 486+ 65F2             >                endif           ; ok        // for other definitions it "points" the correct handler
 486+ 65F2             >                // Use of "; ok" to suppress "warning[fwdref]"
 486+ 65F2             >
 486+ 65F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 487+ 65F2 D1                           pop     de                  //  e has the character
 488+ 65F3 E1                           pop     hl                  // hl has the string address
 489+ 65F4 E5                           push    hl
 490+ 65F5 7B                           ld      a, e
 491+ 65F6 11 FF FF                     ld      de, -1              // let's start from -1
 492+ 65F9 2B                           dec     hl
 493+ 65FA              Enclose_NonDelimiter:
 494+ 65FA                              // find first non delimiter
 495+ 65FA 23                               inc     hl
 496+ 65FB 13                               inc     de
 497+ 65FC BE                               cp      (hl)
 498+ 65FD 28 FB                        jr      z, Enclose_NonDelimiter
 499+ 65FF D5                           push    de
 500+ 6600
 501+ 6600 C5                           push    bc                  // save Instruction Pointer
 502+ 6601
 503+ 6601 4F                           ld      c, a                // save char
 504+ 6602 7E                           ld      a, (hl)
 505+ 6603 A7                           and     a                   // stop if 0x00
 506+ 6604 20 07                        jr      nz, Enclose_NextChar
 507+ 6606
 508+ 6606                              /// case iii. no more character in string
 509+ 6606 C1                               pop     bc                  // restore Instruction Pointer
 510+ 6607 13                               inc     de
 511+ 6608 D5                               push    de
 512+ 6609 1B                               dec     de
 513+ 660A D5                               push    de
 514+ 660B                                  next
 514+ 660B DD E9       >                jp      (ix)
 515+ 660D              Enclose_NextChar:
 516+ 660D 79                               ld      a, c
 517+ 660E 23                               inc     hl
 518+ 660F 13                               inc     de
 519+ 6610 BE                               cp      (hl)
 520+ 6611 20 06                            jr      nz, Enclose_NonSeparator
 521+ 6613
 522+ 6613                                      // case i. first non enclosed
 523+ 6613 C1                                   pop     bc                  // restore Instruction Pointer
 524+ 6614 D5                                   push    de
 525+ 6615 13                                   inc     de
 526+ 6616 D5                                   push    de
 527+ 6617                                      next
 527+ 6617 DD E9       >                jp      (ix)
 528+ 6619              Enclose_NonSeparator:
 529+ 6619 7E                               ld      a, (hl)
 530+ 661A A7                               and     a
 531+ 661B 20 F0                        jr      nz, Enclose_NextChar
 532+ 661D
 533+ 661D                              // case ii. separator & terminator
 534+ 661D C1                           pop     bc                  // restore Instruction Pointer
 535+ 661E D5                           push    de
 536+ 661F D5                           push    de
 537+ 6620                              next
 537+ 6620 DD E9       >                jp      (ix)
 538+ 6622
 539+ 6622              //  ______________________________________________________________________
 540+ 6622              //
 541+ 6622              // (map)        a2 a1 n c1 -- c2
 542+ 6622              // translate character c using mapping string a2 and a2
 543+ 6622              // c2 = c2 if it is not translated. n is the length of bot a1 and a2.
 544+ 6622                              New_Def C_MAP, "(MAP)", is_code, is_normal
 544+ 6622             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 544+ 6622             >
 544+ 6622             >                // dummy db directives used to calculate length of namec
 544+ 6622 28 4D 41 50 >                db      "(MAP)"
 544+ 6626 29          >
 544+ 6627             >len_NFA         defl    $ - temp_NFA
 544+ 6627             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 544+ 6622             >
 544+ 6622 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 544+ 6623 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 544+ 6627 29          >
 544+ 6628             >                org     $-1                 // alter last byte of Name just above to set
 544+ 6627 A9          >                db      {b $} | END_BIT     // msb as name end
 544+ 6628             >
 544+ 6628 E6 65       >                dw      last_NFA            // Link to previous definition Name
 544+ 662A             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 544+ 662A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 544+ 662A             >                else
 544+ 662A 2C 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 544+ 662C             >                endif           ; ok        // for other definitions it "points" the correct handler
 544+ 662C             >                // Use of "; ok" to suppress "warning[fwdref]"
 544+ 662C             >
 544+ 662C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 545+ 662C D9                           exx
 546+ 662D E1                           pop     hl
 547+ 662E 7D                           ld      a, l
 548+ 662F C1                           pop     bc
 549+ 6630 E1                           pop     hl
 550+ 6631 50                           ld      d, b
 551+ 6632 59                           ld      e, c
 552+ 6633 ED B1                        cpir
 553+ 6635 E1                           pop     hl
 554+ 6636 20 05                        jr      nz, C_Map_Then
 554+ 6638
 555+ 6638 19                               add     hl, de
 556+ 6639 2B                               dec     hl
 557+ 663A ED 42                            sbc     hl, bc
 558+ 663C 7E                               ld      a, (hl)
 559+ 663D              C_Map_Then:
 560+ 663D 6F                           ld      l, a
 561+ 663E 26 00                        ld      h, 0
 562+ 6640 E5                           push    hl
 563+ 6641 D9                           exx
 564+ 6642                              next
 564+ 6642 DD E9       >                jp      (ix)
 565+ 6644
 566+ 6644              //  ______________________________________________________________________
 567+ 6644              //
 568+ 6644              // (compare)    a1 a2 n -- b
 569+ 6644              // this word performs a lexicographic compare of n bytes of text at address a1
 570+ 6644              // with n bytes of text at address a2. It returns numeric a value:
 571+ 6644              //  0 : if strings are equal
 572+ 6644              // +1 : if string at a1 greater than string at a2
 573+ 6644              // -1 : if string at a1 less than string at a2
 574+ 6644              // strings can be 256 bytes in length at most.
 575+ 6644                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 575+ 6644             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ 6644             >
 575+ 6644             >                // dummy db directives used to calculate length of namec
 575+ 6644 28 43 4F 4D >                db      "(COMPARE)"
 575+ 6648 50 41 52 45 >
 575+ 664C 29          >
 575+ 664D             >len_NFA         defl    $ - temp_NFA
 575+ 664D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ 6644             >
 575+ 6644 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ 6645 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 575+ 6649 50 41 52 45 >
 575+ 664D 29          >
 575+ 664E             >                org     $-1                 // alter last byte of Name just above to set
 575+ 664D A9          >                db      {b $} | END_BIT     // msb as name end
 575+ 664E             >
 575+ 664E 22 66       >                dw      last_NFA            // Link to previous definition Name
 575+ 6650             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 6650 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 575+ 6650             >                else
 575+ 6650 52 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 575+ 6652             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 6652             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 6652             >
 575+ 6652             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 6652 E1                           pop     hl                  // Number of bytes
 577+ 6653 7D                           ld      a, l
 578+ 6654 E1                           pop     hl                  // hl points string a2
 579+ 6655 D1                           pop     de                  // hl points string a1
 580+ 6656 C5                           push    bc                  // Instruction pointer on stack
 581+ 6657 47                           ld      b, a
 582+ 6658              C_Compare_Loop:
 583+ 6658 7E                               ld      a, (hl)
 584+ 6659 CD 4D 65                         call    Case_Sensitive
 585+ 665C 4F                               ld      c, a
 586+ 665D 1A                               ld      a, (de)
 587+ 665E CD 4D 65                         call    Case_Sensitive
 588+ 6661 B9                               cp      c
 589+ 6662 13                               inc     de
 590+ 6663 23                               inc     hl
 591+ 6664 28 0E                            jr      z, C_Compare_Equal
 592+ 6666 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 593+ 6668 21 01 00                                 ld      hl, 1               // a1 gt a2
 594+ 666B 18 03                                jr      C_Compare_Then      // Else
 595+ 666D              C_Compare_NotLessThan:
 596+ 666D 21 FF FF                                 ld      hl, -1              // a1 lt a2
 597+ 6670              C_Compare_Then:                                 // Endif
 598+ 6670 C1                                   pop     bc              // restore Instruction Pointer
 599+ 6671
 600+ 6671                                      psh1
 600+ 6671 E5          >                push    hl
 600+ 6672 DD E9       >                jp      (ix)
 601+ 6674
 602+ 6674              C_Compare_Equal:
 603+ 6674 10 E2                        djnz    C_Compare_Loop
 604+ 6676 21 00 00                     ld      hl, 0               // a1 eq a2
 605+ 6679 C1                           pop     bc                  // restore Instruction Pointer
 606+ 667A
 607+ 667A                              psh1
 607+ 667A E5          >                push    hl
 607+ 667B DD E9       >                jp      (ix)
 608+ 667D
 609+ 667D              //  ______________________________________________________________________
 610+ 667D              //
 611+ 667D              // emitc        c --
 612+ 667D              // low level emit, calls ROM routine at #10 to send a character to
 613+ 667D              // the the current channel (see SELECT to change stream-channel)
 614+ 667D                              New_Def EMITC, "EMITC", is_code, is_normal
 614+ 667D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ 667D             >
 614+ 667D             >                // dummy db directives used to calculate length of namec
 614+ 667D 45 4D 49 54 >                db      "EMITC"
 614+ 6681 43          >
 614+ 6682             >len_NFA         defl    $ - temp_NFA
 614+ 6682             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ 667D             >
 614+ 667D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ 667E 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 614+ 6682 43          >
 614+ 6683             >                org     $-1                 // alter last byte of Name just above to set
 614+ 6682 C3          >                db      {b $} | END_BIT     // msb as name end
 614+ 6683             >
 614+ 6683 44 66       >                dw      last_NFA            // Link to previous definition Name
 614+ 6685             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 6685 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 614+ 6685             >                else
 614+ 6685 87 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 614+ 6687             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 6687             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 6687             >
 614+ 6687             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 6687 E1                           pop     hl
 616+ 6688 7D                           ld      a, l
 617+ 6689              Emitc_Ptr:
 618+ 6689 C5                           push    bc
 619+ 668A DD E5                        push    ix
 620+ 668C D7                           rst     $10
 621+ 668D DD E1                        pop     ix
 622+ 668F C1                           pop     bc
 623+ 6690 3E FF                        ld      a, 255            // max possible
 624+ 6692 32 8C 5C                     ld      (SCR_CT), a
 625+ 6695
 626+ 6695                              next
 626+ 6695 DD E9       >                jp      (ix)
 627+ 6697
 628+ 6697              Emitc_Vec:
 629+ 6697 DC 66                        dw      C_Emit_Printable  // comma
 630+ 6699 E2 66                        dw      C_Emit_Bel        // bel
 631+ 669B DC 66                        dw      C_Emit_Printable  // bs
 632+ 669D F7 66                        dw      C_Emit_Tab        // tab
 633+ 669F DC 66                        dw      C_Emit_Printable  // cr
 634+ 66A1 FD 66                        dw      C_Emit_NL         // lf (unix newline)
 635+ 66A3 DC 66                        dw      C_Emit_Printable  // blank
 636+ 66A5 DC 66                        dw      C_Emit_Printable  // blank
 637+ 66A7
 638+ 66A7              Emit_Selector_Start:
 639+ 66A7 06                           db      $06                 // comma
 640+ 66A8 07                           db      $07                 // bel
 641+ 66A9 08                           db      $08                 // bs
 642+ 66AA 09                           db      $09                 // tab
 643+ 66AB 0D                           db      $0D                 // cr
 644+ 66AC 0A                           db      $0A                 // lf (unix newline)
 645+ 66AD 20                           db      $20
 646+ 66AE              Emit_Selector_End:
 647+ 66AE 20                           db      $20
 648+ 66AF
 649+ 66AF              //  ______________________________________________________________________
 650+ 66AF              //
 651+ 66AF              // (?emit)      c1 -- c2 | c1
 652+ 66AF              // decode a character to be sent via EMIT
 653+ 66AF              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 654+ 66AF              // the routine should resolve anything and convert the character anyway.
 655+ 66AF                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 655+ 66AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 655+ 66AF             >
 655+ 66AF             >                // dummy db directives used to calculate length of namec
 655+ 66AF 28 3F 45 4D >                db      "(?EMIT)"
 655+ 66B3 49 54 29    >
 655+ 66B6             >len_NFA         defl    $ - temp_NFA
 655+ 66B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 655+ 66AF             >
 655+ 66AF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 655+ 66B0 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 655+ 66B4 49 54 29    >
 655+ 66B7             >                org     $-1                 // alter last byte of Name just above to set
 655+ 66B6 A9          >                db      {b $} | END_BIT     // msb as name end
 655+ 66B7             >
 655+ 66B7 7D 66       >                dw      last_NFA            // Link to previous definition Name
 655+ 66B9             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 655+ 66B9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 655+ 66B9             >                else
 655+ 66B9 BB 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 655+ 66BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 655+ 66BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 655+ 66BB             >
 655+ 66BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 656+ 66BB D1                           pop     de
 657+ 66BC 7B                           ld      a, e                //  de has c1
 658+ 66BD E6 7F                        and     $7F                 // 7-bit ascii only
 659+ 66BF C5                           push    bc                  // save Instruction Pointer
 660+ 66C0 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 661+ 66C3 21 AE 66                     ld      hl, Emit_Selector_End
 662+ 66C6 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 663+ 66C8 20 0B                        jr      nz, C_Emit_Not_Found
 664+ 66CA                                  // Found then decode it
 665+ 66CA 21 97 66                         ld      hl, Emitc_Vec
 666+ 66CD 09                               add     hl, bc
 667+ 66CE 09                               add     hl, bc
 668+ 66CF 5E                               ld      e, (hl)
 669+ 66D0 23                               inc     hl
 670+ 66D1 56                               ld      d, (hl)
 671+ 66D2 EB                               ex      de, hl
 672+ 66D3 C1                               pop     bc                  // restore Instruction Pointer
 673+ 66D4 E9                               jp      (hl)                // one of the following labels
 674+ 66D5              C_Emit_Not_Found:
 675+ 66D5 C1                           pop     bc                  // restore Instruction Pointer
 676+ 66D6 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 677+ 66D8 30 02                        jr      nc, C_Emit_Printable
 678+ 66DA 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 679+ 66DC              C_Emit_Printable:
 680+ 66DC 6F                           ld      l, a
 681+ 66DD 26 00                        ld      h, 0
 682+ 66DF
 683+ 66DF                              psh1
 683+ 66DF E5          >                push    hl
 683+ 66E0 DD E9       >                jp      (ix)
 684+ 66E2
 685+ 66E2              C_Emit_Bel:
 686+ 66E2 C5                           push    bc                  // save Instruction Pointer
 687+ 66E3 11 00 01                     ld      de, $0100
 688+ 66E6 21 00 02                     ld      hl, $0200
 689+ 66E9 DD E5                        push    ix                  // save Next Pointer
 690+ 66EB CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 691+ 66EE DD E1                        pop     ix                  // restore Next Pointer
 692+ 66F0 C1                           pop     bc                  // restore Instruction Pointer
 693+ 66F1 21 00 00                     ld      hl, NUL_CHAR
 694+ 66F4
 695+ 66F4                              psh1
 695+ 66F4 E5          >                push    hl
 695+ 66F5 DD E9       >                jp      (ix)
 696+ 66F7
 697+ 66F7 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 698+ 66FA
 699+ 66FA                              psh1
 699+ 66FA E5          >                push    hl
 699+ 66FB DD E9       >                jp      (ix)
 700+ 66FD
 701+ 66FD 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 702+ 6700
 703+ 6700                              psh1
 703+ 6700 E5          >                push    hl
 703+ 6701 DD E9       >                jp      (ix)
 704+ 6703
 705+ 6703              //  ______________________________________________________________________
 706+ 6703
 707+ 6703              Key_Table:
 708+ 6703 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 709+ 6704 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 710+ 6705 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 711+ 6706 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 712+ 6707 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 713+ 6708 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 714+ 6709 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 715+ 670A AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 716+ 670B C7                           db      $C7                 //  8: <=
 717+ 670C C8                           db      $C8                 //  9: >=
 718+ 670D C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 719+ 670E              Key_MapTo:
 720+ 670E 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 721+ 670F 20                           db      $20                 //  9: not used
 722+ 6710 20                           db      $20                 //  8: not used
 723+ 6711 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 724+ 6712 5D                           db      $5D                 //  6: SYMBOL+U : ]
 725+ 6713 5B                           db      $5B                 //  5: SYMBOL+Y : [
 726+ 6714 7D                           db      $7D                 //  4: SYMBOL+G : }
 727+ 6715 7B                           db      $7B                 //  3: SYMBOL+F : {
 728+ 6716 5C                           db      $5C                 //  2: SYMBOl+D : //
 729+ 6717 7C                           db      $7C                 //  1: SYMBOL+S : |
 730+ 6718 7E                           db      $7E                 //  0: SYMBOL+A : ~
 731+ 6719
 732+ 6719              //  ______________________________________________________________________
 733+ 6719              //
 734+ 6719              // key          -- c
 735+ 6719              // wait for a keypress
 736+ 6719              // This definition need Standard ROM Interrupt to be served
 737+ 6719
 738+ 6719                              New_Def KEY, "KEY", is_code, is_normal
 738+ 6719             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 738+ 6719             >
 738+ 6719             >                // dummy db directives used to calculate length of namec
 738+ 6719 4B 45 59    >                db      "KEY"
 738+ 671C             >len_NFA         defl    $ - temp_NFA
 738+ 671C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 738+ 6719             >
 738+ 6719 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 738+ 671A 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 738+ 671D             >                org     $-1                 // alter last byte of Name just above to set
 738+ 671C D9          >                db      {b $} | END_BIT     // msb as name end
 738+ 671D             >
 738+ 671D AF 66       >                dw      last_NFA            // Link to previous definition Name
 738+ 671F             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 738+ 671F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 738+ 671F             >                else
 738+ 671F 21 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 738+ 6721             >                endif           ; ok        // for other definitions it "points" the correct handler
 738+ 6721             >                // Use of "; ok" to suppress "warning[fwdref]"
 738+ 6721             >
 738+ 6721             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 739+ 6721
 740+ 6721 C5                           push    bc                  // save Instruction Pointer
 741+ 6722 DD E5                        push    ix
 742+ 6724
 743+ 6724 ED 73 2C 64                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 744+ 6728 31 FE 63                     ld      sp, Cold_origin - 2 // maybe $4000 in the future...
 745+ 672B FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 746+ 672F
 747+ 672F              Key_Wait:
 748+ 672F 76                               halt
 749+ 6730 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 750+ 6732 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 751+ 6735
 752+ 6735                                  // software-flash: flips face every 320 ms
 753+ 6735 3E 10                            ld      a, $10              // Timing based
 754+ 6737 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 755+ 673A
 756+ 673A 3A 26 64                         ld      a, (Block_Face)     // see origin.asm
 757+ 673D 20 0C                            jr      nz, Key_Cursor
 758+ 673F 3A 27 64                             ld      a, (Half_Face)      // see origin.asm
 759+ 6742 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 760+ 6746 28 03                                jr      z, Key_Cursor
 761+ 6748 3A 28 64                                 ld      a, (Underscore_Face) // see origin
 762+ 674B              Key_Cursor:
 763+ 674B D7                               rst     $10
 764+ 674C 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 765+ 674E D7                               rst     $10
 766+ 674F
 767+ 674F FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 768+ 6753 28 DA                        jr      z, Key_Wait
 769+ 6755
 770+ 6755 76                           halt    // this is to sync flashing cursor.
 771+ 6756
 772+ 6756 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 773+ 6758 D7                           rst     $10
 774+ 6759 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 775+ 675B D7                           rst     $10
 776+ 675C 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 777+ 675F
 778+ 675F                              // decode character from above table
 779+ 675F 21 03 67                     ld      hl, Key_Table
 780+ 6762 01 0B 00                     ld      bc, $000B
 781+ 6765 ED B1                        cpir
 782+ 6767 20 05                        jr      nz, Key_DontMap
 783+ 6769 21 0E 67                         ld      hl, Key_MapTo
 784+ 676C 09                               add     hl, bc
 785+ 676D 7E                               ld      a, (hl)
 786+ 676E FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 787+ 6770 20 09                        jr      nz, Key_NoCapsLock
 788+ 6772 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 789+ 6775 7E                               ld      a, (hl)
 790+ 6776 EE 08                            xor     $08
 791+ 6778 77                               ld      (hl), a
 792+ 6779 3E 00                            ld      a, NUL_CHAR
 793+ 677B 6F           Key_NoCapsLock: ld      l, a
 794+ 677C 26 00                        ld      h, 0                // Prepare TOS
 795+ 677E
 796+ 677E 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 797+ 6781 1F                           rra
 798+ 6782 1F                           rra
 799+ 6783 1F                           rra
 800+ 6784 F6 18                        or      $18                 // quick'n'dirty click
 801+ 6786 D3 FE                        out     ($fe), a
 802+ 6788 06 00                        ld      b, 0
 803+ 678A 10 FE                        djnz    $                   // wait loop
 804+ 678C EE 18                        xor     $18
 805+ 678E D3 FE                        out     ($fe), a
 806+ 6790
 807+ 6790 ED 7B 2C 64                  ld      sp, (SP_Saved)
 808+ 6794
 809+ 6794 DD E1                        pop     ix
 810+ 6796 C1                           pop     bc                  // Restore Instruction Pointer
 811+ 6797
 812+ 6797                              psh1
 812+ 6797 E5          >                push    hl
 812+ 6798 DD E9       >                jp      (ix)
 813+ 679A
 814+ 679A              //  ______________________________________________________________________
 815+ 679A              //
 816+ 679A              // ?terminal    -- FALSE | TRUE
 817+ 679A              // test for BREAK keypress
 818+ 679A                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 818+ 679A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 818+ 679A             >
 818+ 679A             >                // dummy db directives used to calculate length of namec
 818+ 679A 3F 54 45 52 >                db      "?TERMINAL"
 818+ 679E 4D 49 4E 41 >
 818+ 67A2 4C          >
 818+ 67A3             >len_NFA         defl    $ - temp_NFA
 818+ 67A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 818+ 679A             >
 818+ 679A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 818+ 679B 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 818+ 679F 4D 49 4E 41 >
 818+ 67A3 4C          >
 818+ 67A4             >                org     $-1                 // alter last byte of Name just above to set
 818+ 67A3 CC          >                db      {b $} | END_BIT     // msb as name end
 818+ 67A4             >
 818+ 67A4 19 67       >                dw      last_NFA            // Link to previous definition Name
 818+ 67A6             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 818+ 67A6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 818+ 67A6             >                else
 818+ 67A6 A8 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 818+ 67A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 818+ 67A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 818+ 67A8             >
 818+ 67A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 819+ 67A8 21 00 00                     ld      hl, 0
 820+ 67AB ED 73 2C 64                  ld      (SP_Saved), sp
 821+ 67AF 31 FE 63                     ld      sp, Cold_origin - 2
 822+ 67B2 CD 54 1F                     call    $1F54
 823+ 67B5 ED 7B 2C 64                  ld      sp, (SP_Saved)
 824+ 67B9
 825+ 67B9 38 01                        jr      c, QTerminal_NoBreak
 826+ 67BB 2C                               inc     l                  // quick TRUE_FLAG
 827+ 67BC              QTerminal_NoBreak:
 828+ 67BC
 829+ 67BC                              psh1
 829+ 67BC E5          >                push    hl
 829+ 67BD DD E9       >                jp      (ix)
 830+ 67BF
 831+ 67BF
 832+ 67BF              //  ______________________________________________________________________
 833+ 67BF              //
 834+ 67BF              // ZX Spectrum Next - Low Level disk primitives.
 835+ 67BF              // this include is "here" for backward compatibility
 836+ 67BF
 837+ 67BF                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
   1++67BF              //  ______________________________________________________________________
   2++67BF              //
   3++67BF              //  next-opt.asm
   4++67BF              //
   5++67BF              //  ZX Spectrum Next - peculiar definitions
   6++67BF              //  ______________________________________________________________________
   7++67BF
   8++67BF              //  ______________________________________________________________________
   9++67BF              //
  10++67BF              // f_seek       d u -- f
  11++67BF              // Seek to position d in file-handle u.
  12++67BF              // Return a false-flag 0 on success, True flag on error
  13++67BF                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++67BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++67BF             >
  13++67BF             >                // dummy db directives used to calculate length of namec
  13++67BF 46 5F 53 45 >                db      "F_SEEK"
  13++67C3 45 4B       >
  13++67C5             >len_NFA         defl    $ - temp_NFA
  13++67C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++67BF             >
  13++67BF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++67C0 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++67C4 45 4B       >
  13++67C6             >                org     $-1                 // alter last byte of Name just above to set
  13++67C5 CB          >                db      {b $} | END_BIT     // msb as name end
  13++67C6             >
  13++67C6 9A 67       >                dw      last_NFA            // Link to previous definition Name
  13++67C8             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++67C8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13++67C8             >                else
  13++67C8 CA 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  13++67CA             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++67CA             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++67CA             >
  13++67CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++67CA E1                           pop     hl                  // file-handle
  15++67CB 7D                           ld      a, l                // file-handle
  16++67CC 60                           ld      h, b                // save Intruction Pointer
  17++67CD 69                           ld      l, c
  18++67CE C1                           pop     bc                  // bc has high-word of d
  19++67CF D1                           pop     de
  20++67D0 DD E5                        push    ix
  21++67D2 E5                           push    hl                  // save Instruction Pointer
  22++67D3 DD 21 00 00                  ld      ix, 0
  23++67D7 CF                           rst     $08
  24++67D8 9F                           db      $9F
  25++67D9 C1                           pop     bc                  // restore Instruction Pointer
  26++67DA DD E1                        pop     ix
  27++67DC ED 62                        sbc     hl, hl              // to get 0 or -1
  28++67DE
  29++67DE                              psh1
  29++67DE E5          >                push    hl
  29++67DF DD E9       >                jp      (ix)
  30++67E1
  31++67E1              //  ______________________________________________________________________
  32++67E1              //
  33++67E1              // f_fgetpos    u -- d f
  34++67E1              // Seek to position d in file-handle u.
  35++67E1              // Return a false-flag 0 on success, True flag on error
  36++67E1                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  36++67E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  36++67E1             >
  36++67E1             >                // dummy db directives used to calculate length of namec
  36++67E1 46 5F 46 47 >                db      "F_FGETPOS"
  36++67E5 45 54 50 4F >
  36++67E9 53          >
  36++67EA             >len_NFA         defl    $ - temp_NFA
  36++67EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  36++67E1             >
  36++67E1 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  36++67E2 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  36++67E6 45 54 50 4F >
  36++67EA 53          >
  36++67EB             >                org     $-1                 // alter last byte of Name just above to set
  36++67EA D3          >                db      {b $} | END_BIT     // msb as name end
  36++67EB             >
  36++67EB BF 67       >                dw      last_NFA            // Link to previous definition Name
  36++67ED             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  36++67ED ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  36++67ED             >                else
  36++67ED EF 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  36++67EF             >                endif           ; ok        // for other definitions it "points" the correct handler
  36++67EF             >                // Use of "; ok" to suppress "warning[fwdref]"
  36++67EF             >
  36++67EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  37++67EF E1                           pop     hl
  38++67F0 7D                           ld      a, l                // file-handle
  39++67F1 DD E5                        push    ix
  40++67F3 C5                           push    bc
  41++67F4 CF                           rst     $08
  42++67F5 A0                           db      $A0
  43++67F6 E1                           pop     hl                  // restore Instruction Pointer
  44++67F7 DD E1                        pop     ix
  45++67F9 D5                           push    de
  46++67FA C5                           push    bc
  47++67FB 44                           ld      b, h                // restore Instruction Pointer
  48++67FC 4D                           ld      c, l
  49++67FD ED 62                        sbc     hl, hl
  50++67FF
  51++67FF                              psh1
  51++67FF E5          >                push    hl
  51++6800 DD E9       >                jp      (ix)
  52++6802
  53++6802              //  ______________________________________________________________________
  54++6802              //
  55++6802              // f_read       a b u -- n f
  56++6802              // Read b bytes from file-handle u to address a
  57++6802              // Return the actual number n of bytes read
  58++6802              // Return 0 on success, True flag on error
  59++6802                              New_Def F_READ, "F_READ", is_code, is_normal
  59++6802             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59++6802             >
  59++6802             >                // dummy db directives used to calculate length of namec
  59++6802 46 5F 52 45 >                db      "F_READ"
  59++6806 41 44       >
  59++6808             >len_NFA         defl    $ - temp_NFA
  59++6808             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59++6802             >
  59++6802 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59++6803 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  59++6807 41 44       >
  59++6809             >                org     $-1                 // alter last byte of Name just above to set
  59++6808 C4          >                db      {b $} | END_BIT     // msb as name end
  59++6809             >
  59++6809 E1 67       >                dw      last_NFA            // Link to previous definition Name
  59++680B             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  59++680B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  59++680B             >                else
  59++680B 0D 68       >                dw      $ + 2   ; ok        // is pointed by CFA
  59++680D             >                endif           ; ok        // for other definitions it "points" the correct handler
  59++680D             >                // Use of "; ok" to suppress "warning[fwdref]"
  59++680D             >
  59++680D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60++680D
  61++680D 50                           ld      d, b
  62++680E 59                           ld      e, c
  63++680F E1                           pop     hl
  64++6810 7D                           ld      a, l                // file-handle
  65++6811 C1                           pop     bc                  // bc has bytes to read
  66++6812 DD E3                        ex      (sp), ix            // ix has address
  67++6814 D5                           push    de                  // Save Instruction pointer
  68++6815 CF                           rst     $08
  69++6816 9D                           db      $9D
  70++6817 C1                           pop     bc                  // Restore Instruction pointer
  71++6818 DD E1                        pop     ix                  // Restore ix
  72++681A D5                           push    de                  // bytes written
  73++681B ED 62                        sbc     hl, hl
  74++681D
  75++681D                              psh1
  75++681D E5          >                push    hl
  75++681E DD E9       >                jp      (ix)
  76++6820
  77++6820              //  ______________________________________________________________________
  78++6820              //
  79++6820              // f_write      a b u -- n f
  80++6820              // Write bytes currently stored at address a to file-handle u.
  81++6820              // Return the actual n bytes written and 0 on success, True flag on error.
  82++6820                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
  82++6820             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82++6820             >
  82++6820             >                // dummy db directives used to calculate length of namec
  82++6820 46 5F 57 52 >                db      "F_WRITE"
  82++6824 49 54 45    >
  82++6827             >len_NFA         defl    $ - temp_NFA
  82++6827             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82++6820             >
  82++6820 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82++6821 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
  82++6825 49 54 45    >
  82++6828             >                org     $-1                 // alter last byte of Name just above to set
  82++6827 C5          >                db      {b $} | END_BIT     // msb as name end
  82++6828             >
  82++6828 02 68       >                dw      last_NFA            // Link to previous definition Name
  82++682A             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  82++682A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  82++682A             >                else
  82++682A 2C 68       >                dw      $ + 2   ; ok        // is pointed by CFA
  82++682C             >                endif           ; ok        // for other definitions it "points" the correct handler
  82++682C             >                // Use of "; ok" to suppress "warning[fwdref]"
  82++682C             >
  82++682C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83++682C
  84++682C 50                           ld      d, b
  85++682D 59                           ld      e, c
  86++682E E1                           pop     hl
  87++682F 7D                           ld      a, l                // file-handle
  88++6830 C1                           pop     bc                  // bc has bytes to read
  89++6831 DD E3                        ex      (sp), ix            // ix has address
  90++6833 D5                           push    de                  // Save Instruction pointer
  91++6834 CF                           rst     $08
  92++6835 9E                           db      $9E
  93++6836 C1                           pop     bc                  // Restore Instruction pointer
  94++6837 DD E1                        pop     ix                  // Restore ix
  95++6839 D5                           push    de                  // bytes written
  96++683A ED 62                        sbc     hl, hl
  97++683C
  98++683C                              psh1
  98++683C E5          >                push    hl
  98++683D DD E9       >                jp      (ix)
  99++683F
 100++683F              //  ______________________________________________________________________
 101++683F              //
 102++683F              // f_close      u -- f
 103++683F              // Close file-handle u.
 104++683F              // Return 0 on success, True flag on error
 105++683F
 106++683F                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
 106++683F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 106++683F             >
 106++683F             >                // dummy db directives used to calculate length of namec
 106++683F 46 5F 43 4C >                db      "F_CLOSE"
 106++6843 4F 53 45    >
 106++6846             >len_NFA         defl    $ - temp_NFA
 106++6846             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 106++683F             >
 106++683F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 106++6840 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
 106++6844 4F 53 45    >
 106++6847             >                org     $-1                 // alter last byte of Name just above to set
 106++6846 C5          >                db      {b $} | END_BIT     // msb as name end
 106++6847             >
 106++6847 20 68       >                dw      last_NFA            // Link to previous definition Name
 106++6849             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 106++6849 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 106++6849             >                else
 106++6849 4B 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 106++684B             >                endif           ; ok        // for other definitions it "points" the correct handler
 106++684B             >                // Use of "; ok" to suppress "warning[fwdref]"
 106++684B             >
 106++684B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 107++684B
 108++684B E1                           pop     hl
 109++684C 7D                           ld      a, l                // file-handle
 110++684D DD E5                        push    ix
 111++684F C5                           push    bc                  // Save Instruction pointer
 112++6850 CF                           rst     $08
 113++6851 9B                           db      $9B
 114++6852 C1                           pop     bc
 115++6853 DD E1                        pop     ix
 116++6855 ED 62                        sbc     hl, hl
 117++6857
 118++6857                              psh1
 118++6857 E5          >                push    hl
 118++6858 DD E9       >                jp      (ix)
 119++685A
 120++685A              //  ______________________________________________________________________
 121++685A              //
 122++685A              // f_open       a1 a2 b -- u f
 123++685A              // open a file
 124++685A              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 125++685A              // a2 is address to an 8-byte header data used in some cases.
 126++685A              // b is access mode-byte, that is a combination of:
 127++685A              // any/all of:
 128++685A              //   esx_mode_read          $01 request read access
 129++685A              //   esx_mode_write         $02 request write access
 130++685A              //   esx_mode_use_header    $40 read/write +3DOS header
 131++685A              // plus one of:
 132++685A              //   esx_mode_open_exist    $00 only open existing file
 133++685A              //   esx_mode_open_creat    $08 open existing or create file
 134++685A              //   esx_mode_creat_noexist $04 create new file, error if exists
 135++685A              //   esx_mode_creat_trunc   $0c create new file, delete existing
 136++685A              // Return file-handle u and 0 on success, True flag on error
 137++685A                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 137++685A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137++685A             >
 137++685A             >                // dummy db directives used to calculate length of namec
 137++685A 46 5F 4F 50 >                db      "F_OPEN"
 137++685E 45 4E       >
 137++6860             >len_NFA         defl    $ - temp_NFA
 137++6860             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137++685A             >
 137++685A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137++685B 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 137++685F 45 4E       >
 137++6861             >                org     $-1                 // alter last byte of Name just above to set
 137++6860 CE          >                db      {b $} | END_BIT     // msb as name end
 137++6861             >
 137++6861 3F 68       >                dw      last_NFA            // Link to previous definition Name
 137++6863             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137++6863 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 137++6863             >                else
 137++6863 65 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 137++6865             >                endif           ; ok        // for other definitions it "points" the correct handler
 137++6865             >                // Use of "; ok" to suppress "warning[fwdref]"
 137++6865             >
 137++6865             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138++6865 60                           ld      h, b                // Save Instruction pointer
 139++6866 69                           ld      l, c
 140++6867 C1                           pop     bc                  // file-mode
 141++6868 41                           ld      b, c                // file-mode
 142++6869 D1                           pop     de                  // 8-bytes buffer if any
 143++686A DD E3                        ex      (sp), ix            // filespec nul-terminated
 144++686C E5                           push    hl                  // Save Instruction pointer
 145++686D 3E 2A                        ld      a, "*"
 146++686F CF                           rst     $08
 147++6870 9A                           db      $9A
 148++6871 C1                           pop     bc
 149++6872 DD E1                        pop     ix
 150++6874 ED 62                        sbc     hl, hl
 151++6876 5F                           ld      e, a
 152++6877 16 00                        ld      d, 0
 153++6879
 154++6879
 155++6879                              psh2
 155++6879 D5          >                push    de
 155++687A E5          >                push    hl
 155++687B DD E9       >                jp      (ix)
 156++687D
 157++687D              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 158++687D              //   \ FILENAME 1+ PAD 1 F_OPEN
 159++687D              //   \ DROP
 160++687D              //   \ F_CLOSE
 161++687D
 162++687D              //  ______________________________________________________________________
 163++687D              //
 164++687D              // f_sync      u -- f
 165++687D              // Close file-handle u.
 166++687D              // Return 0 on success, True flag on error
 167++687D
 168++687D                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
 168++687D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168++687D             >
 168++687D             >                // dummy db directives used to calculate length of namec
 168++687D 46 5F 53 59 >                db      "F_SYNC"
 168++6881 4E 43       >
 168++6883             >len_NFA         defl    $ - temp_NFA
 168++6883             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168++687D             >
 168++687D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168++687E 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
 168++6882 4E 43       >
 168++6884             >                org     $-1                 // alter last byte of Name just above to set
 168++6883 C3          >                db      {b $} | END_BIT     // msb as name end
 168++6884             >
 168++6884 5A 68       >                dw      last_NFA            // Link to previous definition Name
 168++6886             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 168++6886 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 168++6886             >                else
 168++6886 88 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 168++6888             >                endif           ; ok        // for other definitions it "points" the correct handler
 168++6888             >                // Use of "; ok" to suppress "warning[fwdref]"
 168++6888             >
 168++6888             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169++6888 E1                           pop     hl
 170++6889 7D                           ld      a, l                // file-handle
 171++688A DD E5                        push    ix
 172++688C C5                           push    bc
 173++688D CF                           rst     $08
 174++688E 9C                           db      $9C
 175++688F C1                           pop     bc
 176++6890 DD E1                        pop     ix
 177++6892 ED 62                        sbc     hl, hl
 178++6894
 179++6894                              psh1
 179++6894 E5          >                push    hl
 179++6895 DD E9       >                jp      (ix)
 180++6897
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
 838+ 6897
 839+ 6897
 840+ 6897              //  ______________________________________________________________________
 841+ 6897              //
 842+ 6897              // cr           --
 843+ 6897              // send a CR via EMITC
 844+ 6897                              New_Def CR, "CR", is_code, is_normal
 844+ 6897             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 844+ 6897             >
 844+ 6897             >                // dummy db directives used to calculate length of namec
 844+ 6897 43 52       >                db      "CR"
 844+ 6899             >len_NFA         defl    $ - temp_NFA
 844+ 6899             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 844+ 6897             >
 844+ 6897 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 844+ 6898 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 844+ 689A             >                org     $-1                 // alter last byte of Name just above to set
 844+ 6899 D2          >                db      {b $} | END_BIT     // msb as name end
 844+ 689A             >
 844+ 689A 7D 68       >                dw      last_NFA            // Link to previous definition Name
 844+ 689C             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 844+ 689C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 844+ 689C             >                else
 844+ 689C 9E 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 844+ 689E             >                endif           ; ok        // for other definitions it "points" the correct handler
 844+ 689E             >                // Use of "; ok" to suppress "warning[fwdref]"
 844+ 689E             >
 844+ 689E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 845+ 689E
 846+ 689E 3E 0D                        ld      a, CR_CHAR
 847+ 68A0 C3 89 66                     jp      Emitc_Ptr
 848+ 68A3
 849+ 68A3              //  ______________________________________________________________________
 850+ 68A3              //
 851+ 68A3              // cmove    a1 a2 u --
 852+ 68A3              // If u > 0, moves memory content starting at address a1 for n bytes long
 853+ 68A3              // storing then starting at address addr2.
 854+ 68A3              // The content of a1 is moved first. See CMOVE> also.
 855+ 68A3                              New_Def CMOVE, "CMOVE", is_code, is_normal
 855+ 68A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 855+ 68A3             >
 855+ 68A3             >                // dummy db directives used to calculate length of namec
 855+ 68A3 43 4D 4F 56 >                db      "CMOVE"
 855+ 68A7 45          >
 855+ 68A8             >len_NFA         defl    $ - temp_NFA
 855+ 68A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 855+ 68A3             >
 855+ 68A3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 855+ 68A4 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 855+ 68A8 45          >
 855+ 68A9             >                org     $-1                 // alter last byte of Name just above to set
 855+ 68A8 C5          >                db      {b $} | END_BIT     // msb as name end
 855+ 68A9             >
 855+ 68A9 97 68       >                dw      last_NFA            // Link to previous definition Name
 855+ 68AB             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 855+ 68AB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 855+ 68AB             >                else
 855+ 68AB AD 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 855+ 68AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 855+ 68AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 855+ 68AD             >
 855+ 68AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 856+ 68AD 60                           ld      h, b
 857+ 68AE 69                           ld      l, c
 858+ 68AF
 859+ 68AF C1                           pop     bc                  // bc has counter
 860+ 68B0 D1                           pop     de                  // de now has dest
 861+ 68B1 E3                           ex      (sp), hl            // hl has source, save Instruction Pointer
 862+ 68B2 78                           ld      a, b
 863+ 68B3 B1                           or      c
 864+ 68B4 28 02                        jr      z, Cmove_NoMove
 865+ 68B6 ED B0                            ldir
 866+ 68B8              Cmove_NoMove:
 867+ 68B8 C1                           pop     bc                  // Restore Instruction Pointer
 868+ 68B9
 869+ 68B9                              next
 869+ 68B9 DD E9       >                jp      (ix)
 870+ 68BB
 871+ 68BB              //  ______________________________________________________________________
 872+ 68BB              //
 873+ 68BB              // cmove>    a1 a2 u --
 874+ 68BB              // If u > 0, moves memory content starting at address a1 for n bytes long
 875+ 68BB              // storing then starting at address addr2.
 876+ 68BB              // The content of a1 is moved last. See cmove.
 877+ 68BB                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 877+ 68BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 877+ 68BB             >
 877+ 68BB             >                // dummy db directives used to calculate length of namec
 877+ 68BB 43 4D 4F 56 >                db      "CMOVE>"
 877+ 68BF 45 3E       >
 877+ 68C1             >len_NFA         defl    $ - temp_NFA
 877+ 68C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 877+ 68BB             >
 877+ 68BB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 877+ 68BC 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 877+ 68C0 45 3E       >
 877+ 68C2             >                org     $-1                 // alter last byte of Name just above to set
 877+ 68C1 BE          >                db      {b $} | END_BIT     // msb as name end
 877+ 68C2             >
 877+ 68C2 A3 68       >                dw      last_NFA            // Link to previous definition Name
 877+ 68C4             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 877+ 68C4 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 877+ 68C4             >                else
 877+ 68C4 C6 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 877+ 68C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 877+ 68C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 877+ 68C6             >
 877+ 68C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 878+ 68C6 60                           ld      h, b
 879+ 68C7 69                           ld      l, c
 880+ 68C8
 881+ 68C8 C1                           pop     bc                  // bc has counter
 882+ 68C9 D1                           pop     de                  // de has dest
 883+ 68CA E3                           ex      (sp), hl            // hl has source, save Instruction Pointer
 884+ 68CB 78                           ld      a, b
 885+ 68CC B1                           or      c
 886+ 68CD 28 08                        jr      z, CmoveV_NoMove
 887+ 68CF EB                               ex      de, hl              // compute address to
 888+ 68D0 09                               add     hl, bc              // operate backward
 889+ 68D1 2B                               dec     hl
 890+ 68D2 EB                               ex      de, hl
 891+ 68D3 09                               add     hl, bc
 892+ 68D4 2B                               dec     hl
 893+ 68D5 ED B8                            lddr                        // backward
 894+ 68D7              CmoveV_NoMove:
 895+ 68D7 C1                           pop     bc                  // Restore Instruction Pointer
 896+ 68D8
 897+ 68D8                              next
 897+ 68D8 DD E9       >                jp      (ix)
 898+ 68DA
 899+ 68DA              //  ______________________________________________________________________
 900+ 68DA              //
 901+ 68DA              // um*      u1 u2 -- ud
 902+ 68DA              // Unsigned multiplication
 903+ 68DA              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 904+ 68DA              // On the stack a double number is treated as two single numbers
 905+ 68DA              // where DE is on the top of the stack and HL is the second from top,
 906+ 68DA              // Instead, in 2VARIABLE a double number is stored as EDLH.
 907+ 68DA              // this definition could use "MUL" Z80N new op-code.
 908+ 68DA                              New_Def UM_MUL, "UM*", is_code, is_normal
 908+ 68DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 908+ 68DA             >
 908+ 68DA             >                // dummy db directives used to calculate length of namec
 908+ 68DA 55 4D 2A    >                db      "UM*"
 908+ 68DD             >len_NFA         defl    $ - temp_NFA
 908+ 68DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 908+ 68DA             >
 908+ 68DA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 908+ 68DB 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 908+ 68DE             >                org     $-1                 // alter last byte of Name just above to set
 908+ 68DD AA          >                db      {b $} | END_BIT     // msb as name end
 908+ 68DE             >
 908+ 68DE BB 68       >                dw      last_NFA            // Link to previous definition Name
 908+ 68E0             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 908+ 68E0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 908+ 68E0             >                else
 908+ 68E0 E2 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 908+ 68E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 908+ 68E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 908+ 68E2             >
 908+ 68E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 909+ 68E2 D1                           pop     de                    // de has u2 operand
 910+ 68E3 E1                           pop     hl                    // hl has u1 operand
 911+ 68E4 C5                           push    bc                    // Save Instruction Pointer
 912+ 68E5 45                           ld      b, l
 913+ 68E6 4B                           ld      c, e
 914+ 68E7 5D                           ld      e, l
 915+ 68E8 6A                           ld      l, d
 916+ 68E9 E5                           push    hl
 917+ 68EA 69                           ld      l, c
 918+ 68EB ED 30                        mul
 919+ 68ED EB                           ex      de, hl
 920+ 68EE ED 30                        mul
 921+ 68F0 AF                           xor     a
 922+ 68F1 19                           add     hl, de
 923+ 68F2 8F                           adc     a
 924+ 68F3 59                           ld      e, c
 925+ 68F4 50                           ld      d, b
 926+ 68F5 ED 30                        mul
 927+ 68F7 47                           ld      b, a
 928+ 68F8 4C                           ld      c, h
 929+ 68F9 7A                           ld      a, d
 930+ 68FA 85                           add     l
 931+ 68FB 67                           ld      h, a
 932+ 68FC 6B                           ld      l, e
 933+ 68FD D1                           pop     de
 934+ 68FE ED 30                        mul
 935+ 6900 EB                           ex      de, hl
 936+ 6901 ED 4A                        adc     hl, bc
 937+ 6903 C1                           pop     bc
 938+ 6904 D5                           push    de
 939+ 6905 E5                           push    hl
 940+ 6906                              next
 940+ 6906 DD E9       >                jp      (ix)
 941+ 6908
 942+ 6908              //  ______________________________________________________________________
 943+ 6908              //
 944+ 6908              // um/mod      ud u1 -- q r
 945+ 6908              // divides ud into u1 giving quotient q and remainder r
 946+ 6908              // algorithm takes 16 bit at a time starting from msb
 947+ 6908              // DE grows from lsb upward with quotient result
 948+ 6908              // HL keeps the remainder at each stage of division
 949+ 6908              // each loop 'lowers' the next binary digit to form the current dividend
 950+ 6908                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
 950+ 6908             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 950+ 6908             >
 950+ 6908             >                // dummy db directives used to calculate length of namec
 950+ 6908 55 4D 2F 4D >                db      "UM/MOD"
 950+ 690C 4F 44       >
 950+ 690E             >len_NFA         defl    $ - temp_NFA
 950+ 690E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 950+ 6908             >
 950+ 6908 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 950+ 6909 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
 950+ 690D 4F 44       >
 950+ 690F             >                org     $-1                 // alter last byte of Name just above to set
 950+ 690E C4          >                db      {b $} | END_BIT     // msb as name end
 950+ 690F             >
 950+ 690F DA 68       >                dw      last_NFA            // Link to previous definition Name
 950+ 6911             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 950+ 6911 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 950+ 6911             >                else
 950+ 6911 13 69       >                dw      $ + 2   ; ok        // is pointed by CFA
 950+ 6913             >                endif           ; ok        // for other definitions it "points" the correct handler
 950+ 6913             >                // Use of "; ok" to suppress "warning[fwdref]"
 950+ 6913             >
 950+ 6913             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 951+ 6913 60                           ld      h, b
 952+ 6914 69                           ld      l, c                    // Save Instruction Pointer
 953+ 6915
 954+ 6915 C1                           pop     bc                      // divisor
 955+ 6916
 956+ 6916 D1                           pop     de                      // < high part
 957+ 6917 E3                           ex      (sp), hl                // < low part and > save bc
 958+ 6918 EB                           ex      de, hl                  //
 959+ 6919 7D                           ld      a, l                    // check without changing arguments
 960+ 691A 91                           sub     c                       // if divisor is greater than high part
 961+ 691B 7C                           ld      a, h                    // so quotient will be in range
 962+ 691C 98                           sbc     a, b
 963+ 691D 30 23                        jr      nc, Um_DivMod_OutOfRange
 964+ 691F 3E 10                            ld      a, 16
 965+ 6921              Um_DivMod_Loop:
 966+ 6921 A7                                   and     a
 967+ 6922 CB 13                                rl      e
 968+ 6924 CB 12                                rl      d
 969+ 6926 CB 15                                rl      l
 970+ 6928 CB 14                                rl      h
 971+ 692A 30 05                                jr      nc, Um_DivMod_Carry
 972+ 692C A7                                       and     a
 973+ 692D ED 42                                    sbc     hl, bc
 974+ 692F 18 07                                jr      Um_DivMod_Endif    // else
 975+ 6931              Um_DivMod_Carry:
 976+ 6931 A7                                       and     a
 977+ 6932 ED 42                                    sbc     hl, bc
 978+ 6934 30 02                                    jr      nc, Um_DivMod_Endif
 979+ 6936 09                                           add     hl, bc
 980+ 6937 1B                                           dec     de
 981+ 6938              Um_DivMod_Endif:                                   // endif
 982+ 6938 13                                   inc     de
 983+ 6939 3D                                   dec     a
 984+ 693A 20 E5                            jr      nz, Um_DivMod_Loop
 985+ 693C EB                               ex      de, hl
 986+ 693D              Um_DivMod_Bailout:
 987+ 693D C1                               pop     bc                  // restore Instruction Pointer
 988+ 693E D5                               push    de                  // de := remanider
 989+ 693F E5                               push    hl                  // hl := quotient
 990+ 6940                                  next
 990+ 6940 DD E9       >                jp      (ix)
 991+ 6942
 992+ 6942              Um_DivMod_OutOfRange:
 993+ 6942 21 FF FF                     ld      hl, -1
 994+ 6945 54                           ld      d, h
 995+ 6946 5D                           ld      e, l
 996+ 6947 18 F4                        jr      Um_DivMod_Bailout
 997+ 6949
 998+ 6949              //  ______________________________________________________________________
 999+ 6949              //
1000+ 6949              // and          n1 n2 -- n3
1001+ 6949              // bit logical AND. Returns n3 as n1 & n2
1002+ 6949                              New_Def AND_OP, "AND", is_code, is_normal
1002+ 6949             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1002+ 6949             >
1002+ 6949             >                // dummy db directives used to calculate length of namec
1002+ 6949 41 4E 44    >                db      "AND"
1002+ 694C             >len_NFA         defl    $ - temp_NFA
1002+ 694C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1002+ 6949             >
1002+ 6949 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1002+ 694A 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1002+ 694D             >                org     $-1                 // alter last byte of Name just above to set
1002+ 694C C4          >                db      {b $} | END_BIT     // msb as name end
1002+ 694D             >
1002+ 694D 08 69       >                dw      last_NFA            // Link to previous definition Name
1002+ 694F             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1002+ 694F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1002+ 694F             >                else
1002+ 694F 51 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1002+ 6951             >                endif           ; ok        // for other definitions it "points" the correct handler
1002+ 6951             >                // Use of "; ok" to suppress "warning[fwdref]"
1002+ 6951             >
1002+ 6951             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1003+ 6951 D1                           pop     de
1004+ 6952 E1                           pop     hl
1005+ 6953 7B                           ld      a, e
1006+ 6954 A5                           and     l
1007+ 6955 6F                           ld      l, a
1008+ 6956 7A                           ld      a, d
1009+ 6957 A4                           and     h
1010+ 6958 67                           ld      h, a
1011+ 6959
1012+ 6959                              psh1
1012+ 6959 E5          >                push    hl
1012+ 695A DD E9       >                jp      (ix)
1013+ 695C
1014+ 695C              //  ______________________________________________________________________
1015+ 695C              //
1016+ 695C              // or           n1 n2 -- n3
1017+ 695C              // bit logical OR. Returns n3 as n1 | n2
1018+ 695C                              New_Def OR_OP, "OR", is_code, is_normal
1018+ 695C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1018+ 695C             >
1018+ 695C             >                // dummy db directives used to calculate length of namec
1018+ 695C 4F 52       >                db      "OR"
1018+ 695E             >len_NFA         defl    $ - temp_NFA
1018+ 695E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1018+ 695C             >
1018+ 695C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1018+ 695D 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1018+ 695F             >                org     $-1                 // alter last byte of Name just above to set
1018+ 695E D2          >                db      {b $} | END_BIT     // msb as name end
1018+ 695F             >
1018+ 695F 49 69       >                dw      last_NFA            // Link to previous definition Name
1018+ 6961             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1018+ 6961 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1018+ 6961             >                else
1018+ 6961 63 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1018+ 6963             >                endif           ; ok        // for other definitions it "points" the correct handler
1018+ 6963             >                // Use of "; ok" to suppress "warning[fwdref]"
1018+ 6963             >
1018+ 6963             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1019+ 6963 D1                           pop     de
1020+ 6964 E1                           pop     hl
1021+ 6965 7B                           ld      a, e
1022+ 6966 B5                           or      l
1023+ 6967 6F                           ld      l, a
1024+ 6968 7A                           ld      a, d
1025+ 6969 B4                           or      h
1026+ 696A 67                           ld      h, a
1027+ 696B
1028+ 696B                              psh1
1028+ 696B E5          >                push    hl
1028+ 696C DD E9       >                jp      (ix)
1029+ 696E
1030+ 696E              //  ______________________________________________________________________
1031+ 696E              //
1032+ 696E              // xor          n1 n2 -- n3
1033+ 696E              // bit logical OR. Returns n3 as n1 ^ n2
1034+ 696E                              New_Def XOR_OP, "XOR", is_code, is_normal
1034+ 696E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1034+ 696E             >
1034+ 696E             >                // dummy db directives used to calculate length of namec
1034+ 696E 58 4F 52    >                db      "XOR"
1034+ 6971             >len_NFA         defl    $ - temp_NFA
1034+ 6971             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1034+ 696E             >
1034+ 696E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1034+ 696F 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1034+ 6972             >                org     $-1                 // alter last byte of Name just above to set
1034+ 6971 D2          >                db      {b $} | END_BIT     // msb as name end
1034+ 6972             >
1034+ 6972 5C 69       >                dw      last_NFA            // Link to previous definition Name
1034+ 6974             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1034+ 6974 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1034+ 6974             >                else
1034+ 6974 76 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1034+ 6976             >                endif           ; ok        // for other definitions it "points" the correct handler
1034+ 6976             >                // Use of "; ok" to suppress "warning[fwdref]"
1034+ 6976             >
1034+ 6976             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1035+ 6976 D1                           pop     de
1036+ 6977 E1                           pop     hl
1037+ 6978 7B                           ld      a, e
1038+ 6979 AD                           xor     l
1039+ 697A 6F                           ld      l, a
1040+ 697B 7A                           ld      a, d
1041+ 697C AC                           xor     h
1042+ 697D 67                           ld      h, a
1043+ 697E
1044+ 697E                              psh1
1044+ 697E E5          >                push    hl
1044+ 697F DD E9       >                jp      (ix)
1045+ 6981
1046+ 6981              //  ______________________________________________________________________
1047+ 6981              //
1048+ 6981              // sp@      -- a
1049+ 6981              // returns on top of stack the value of SP before execution
1050+ 6981                              New_Def SPFETCH, "SP@", is_code, is_normal
1050+ 6981             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1050+ 6981             >
1050+ 6981             >                // dummy db directives used to calculate length of namec
1050+ 6981 53 50 40    >                db      "SP@"
1050+ 6984             >len_NFA         defl    $ - temp_NFA
1050+ 6984             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1050+ 6981             >
1050+ 6981 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1050+ 6982 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1050+ 6985             >                org     $-1                 // alter last byte of Name just above to set
1050+ 6984 C0          >                db      {b $} | END_BIT     // msb as name end
1050+ 6985             >
1050+ 6985 6E 69       >                dw      last_NFA            // Link to previous definition Name
1050+ 6987             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1050+ 6987 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1050+ 6987             >                else
1050+ 6987 89 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1050+ 6989             >                endif           ; ok        // for other definitions it "points" the correct handler
1050+ 6989             >                // Use of "; ok" to suppress "warning[fwdref]"
1050+ 6989             >
1050+ 6989             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1051+ 6989
1052+ 6989 21 00 00                     ld      hl, 0
1053+ 698C 39                           add     hl, sp
1054+ 698D
1055+ 698D                              psh1
1055+ 698D E5          >                push    hl
1055+ 698E DD E9       >                jp      (ix)
1056+ 6990
1057+ 6990              //  ______________________________________________________________________
1058+ 6990              //
1059+ 6990              // sp!      a --
1060+ 6990              // restore SP to the initial value passed
1061+ 6990              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1062+ 6990                              New_Def SPSTORE, "SP!", is_code, is_normal
1062+ 6990             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1062+ 6990             >
1062+ 6990             >                // dummy db directives used to calculate length of namec
1062+ 6990 53 50 21    >                db      "SP!"
1062+ 6993             >len_NFA         defl    $ - temp_NFA
1062+ 6993             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1062+ 6990             >
1062+ 6990 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1062+ 6991 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1062+ 6994             >                org     $-1                 // alter last byte of Name just above to set
1062+ 6993 A1          >                db      {b $} | END_BIT     // msb as name end
1062+ 6994             >
1062+ 6994 81 69       >                dw      last_NFA            // Link to previous definition Name
1062+ 6996             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1062+ 6996 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1062+ 6996             >                else
1062+ 6996 98 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1062+ 6998             >                endif           ; ok        // for other definitions it "points" the correct handler
1062+ 6998             >                // Use of "; ok" to suppress "warning[fwdref]"
1062+ 6998             >
1062+ 6998             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1063+ 6998 E1                           pop     hl
1064+ 6999 F9                           ld      sp, hl
1065+ 699A
1066+ 699A                              next
1066+ 699A DD E9       >                jp      (ix)
1067+ 699C
1068+ 699C              //  ______________________________________________________________________
1069+ 699C              //
1070+ 699C              // rp@      -- a
1071+ 699C              // returns on top of stack the value of Return-Pointer
1072+ 699C                              New_Def RPFETCH, "RP@", is_code, is_normal
1072+ 699C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1072+ 699C             >
1072+ 699C             >                // dummy db directives used to calculate length of namec
1072+ 699C 52 50 40    >                db      "RP@"
1072+ 699F             >len_NFA         defl    $ - temp_NFA
1072+ 699F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1072+ 699C             >
1072+ 699C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1072+ 699D 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1072+ 69A0             >                org     $-1                 // alter last byte of Name just above to set
1072+ 699F C0          >                db      {b $} | END_BIT     // msb as name end
1072+ 69A0             >
1072+ 69A0 90 69       >                dw      last_NFA            // Link to previous definition Name
1072+ 69A2             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1072+ 69A2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1072+ 69A2             >                else
1072+ 69A2 A4 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1072+ 69A4             >                endif           ; ok        // for other definitions it "points" the correct handler
1072+ 69A4             >                // Use of "; ok" to suppress "warning[fwdref]"
1072+ 69A4             >
1072+ 69A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1073+ 69A4
1074+ 69A4                              ldhlrp
1074+ 69A4 2A 30 64    >                ld      hl,(RP_Pointer)
1075+ 69A7
1076+ 69A7                              psh1
1076+ 69A7 E5          >                push    hl
1076+ 69A8 DD E9       >                jp      (ix)
1077+ 69AA
1078+ 69AA              //  ______________________________________________________________________
1079+ 69AA              //
1080+ 69AA              // rp!      a --
1081+ 69AA              // restore RP to the initial value passed
1082+ 69AA              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1083+ 69AA                              New_Def RPSTORE, "RP!", is_code, is_normal
1083+ 69AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1083+ 69AA             >
1083+ 69AA             >                // dummy db directives used to calculate length of namec
1083+ 69AA 52 50 21    >                db      "RP!"
1083+ 69AD             >len_NFA         defl    $ - temp_NFA
1083+ 69AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1083+ 69AA             >
1083+ 69AA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1083+ 69AB 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1083+ 69AE             >                org     $-1                 // alter last byte of Name just above to set
1083+ 69AD A1          >                db      {b $} | END_BIT     // msb as name end
1083+ 69AE             >
1083+ 69AE 9C 69       >                dw      last_NFA            // Link to previous definition Name
1083+ 69B0             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1083+ 69B0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1083+ 69B0             >                else
1083+ 69B0 B2 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1083+ 69B2             >                endif           ; ok        // for other definitions it "points" the correct handler
1083+ 69B2             >                // Use of "; ok" to suppress "warning[fwdref]"
1083+ 69B2             >
1083+ 69B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1084+ 69B2 E1                           pop     hl
1085+ 69B3                              ldrphl
1085+ 69B3 22 30 64    >                ld      (RP_Pointer),hl
1086+ 69B6
1087+ 69B6                              next
1087+ 69B6 DD E9       >                jp      (ix)
1088+ 69B8
1089+ 69B8              //  ______________________________________________________________________
1090+ 69B8              //
1091+ 69B8              // ;s      --
1092+ 69B8              // exits back to the caller word
1093+ 69B8                              New_Def EXIT, ";S", is_code, is_normal
1093+ 69B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1093+ 69B8             >
1093+ 69B8             >                // dummy db directives used to calculate length of namec
1093+ 69B8 3B 53       >                db      ";S"
1093+ 69BA             >len_NFA         defl    $ - temp_NFA
1093+ 69BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1093+ 69B8             >
1093+ 69B8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1093+ 69B9 3B 53       >                db      ";S"               // name string in 7-bit ascii, but
1093+ 69BB             >                org     $-1                 // alter last byte of Name just above to set
1093+ 69BA D3          >                db      {b $} | END_BIT     // msb as name end
1093+ 69BB             >
1093+ 69BB AA 69       >                dw      last_NFA            // Link to previous definition Name
1093+ 69BD             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1093+ 69BD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1093+ 69BD             >                else
1093+ 69BD BF 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1093+ 69BF             >                endif           ; ok        // for other definitions it "points" the correct handler
1093+ 69BF             >                // Use of "; ok" to suppress "warning[fwdref]"
1093+ 69BF             >
1093+ 69BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1094+ 69BF                              ldhlrp                      // Get Return Stack Pointer
1094+ 69BF 2A 30 64    >                ld      hl,(RP_Pointer)
1095+ 69C2 4E                           ld      c, (hl)             // pop Instruction Pointer
1096+ 69C3 23                           inc     hl                  // from Return Stack
1097+ 69C4 46                           ld      b, (hl)
1098+ 69C5 23                           inc     hl
1099+ 69C6                              ldrphl                      // Set Return Stack Pointer
1099+ 69C6 22 30 64    >                ld      (RP_Pointer),hl
1100+ 69C9                              next
1100+ 69C9 DD E9       >                jp      (ix)
1101+ 69CB
1102+ 69CB              //  ______________________________________________________________________
1103+ 69CB              //
1104+ 69CB              // leave        --
1105+ 69CB              // set the limit-of-loop equal to the current index
1106+ 69CB              // this forces to leave from loop at the end of the current iteration
1107+ 69CB                              New_Def LEAVE, "LEAVE", is_code, is_normal
1107+ 69CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1107+ 69CB             >
1107+ 69CB             >                // dummy db directives used to calculate length of namec
1107+ 69CB 4C 45 41 56 >                db      "LEAVE"
1107+ 69CF 45          >
1107+ 69D0             >len_NFA         defl    $ - temp_NFA
1107+ 69D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1107+ 69CB             >
1107+ 69CB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1107+ 69CC 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
1107+ 69D0 45          >
1107+ 69D1             >                org     $-1                 // alter last byte of Name just above to set
1107+ 69D0 C5          >                db      {b $} | END_BIT     // msb as name end
1107+ 69D1             >
1107+ 69D1 B8 69       >                dw      last_NFA            // Link to previous definition Name
1107+ 69D3             >LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1107+ 69D3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1107+ 69D3             >                else
1107+ 69D3 D5 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1107+ 69D5             >                endif           ; ok        // for other definitions it "points" the correct handler
1107+ 69D5             >                // Use of "; ok" to suppress "warning[fwdref]"
1107+ 69D5             >
1107+ 69D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1108+ 69D5
1109+ 69D5                              ldhlrp
1109+ 69D5 2A 30 64    >                ld      hl,(RP_Pointer)
1110+ 69D8 5E                           ld      e, (hl)
1111+ 69D9 23                           inc     hl
1112+ 69DA 56                           ld      d, (hl)
1113+ 69DB 23                           inc     hl
1114+ 69DC 73                           ld      (hl), e
1115+ 69DD 23                           inc     hl
1116+ 69DE 72                           ld      (hl), d
1117+ 69DF
1118+ 69DF                              next
1118+ 69DF DD E9       >                jp      (ix)
1119+ 69E1
1120+ 69E1              //  ______________________________________________________________________
1121+ 69E1              //
1122+ 69E1              // >r      n --
1123+ 69E1              // pop from calculator-stack and push into return-stack
1124+ 69E1                              New_Def TO_R, ">R", is_code, is_normal
1124+ 69E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1124+ 69E1             >
1124+ 69E1             >                // dummy db directives used to calculate length of namec
1124+ 69E1 3E 52       >                db      ">R"
1124+ 69E3             >len_NFA         defl    $ - temp_NFA
1124+ 69E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1124+ 69E1             >
1124+ 69E1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1124+ 69E2 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1124+ 69E4             >                org     $-1                 // alter last byte of Name just above to set
1124+ 69E3 D2          >                db      {b $} | END_BIT     // msb as name end
1124+ 69E4             >
1124+ 69E4 CB 69       >                dw      last_NFA            // Link to previous definition Name
1124+ 69E6             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1124+ 69E6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1124+ 69E6             >                else
1124+ 69E6 E8 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1124+ 69E8             >                endif           ; ok        // for other definitions it "points" the correct handler
1124+ 69E8             >                // Use of "; ok" to suppress "warning[fwdref]"
1124+ 69E8             >
1124+ 69E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1125+ 69E8 D1                           pop     de
1126+ 69E9                              ldhlrp
1126+ 69E9 2A 30 64    >                ld      hl,(RP_Pointer)
1127+ 69EC 2B                           dec     hl
1128+ 69ED 72                           ld      (hl), d             // store current TOS
1129+ 69EE 2B                           dec     hl                  // to Return Stack
1130+ 69EF 73                           ld      (hl), e
1131+ 69F0                              ldrphl
1131+ 69F0 22 30 64    >                ld      (RP_Pointer),hl
1132+ 69F3
1133+ 69F3                              next
1133+ 69F3 DD E9       >                jp      (ix)
1134+ 69F5
1135+ 69F5              //  ______________________________________________________________________
1136+ 69F5              //
1137+ 69F5              // r>      -- n
1138+ 69F5              // pop from return-stack and push into calculator-stack
1139+ 69F5                              New_Def R_TO, "R>", is_code, is_normal
1139+ 69F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1139+ 69F5             >
1139+ 69F5             >                // dummy db directives used to calculate length of namec
1139+ 69F5 52 3E       >                db      "R>"
1139+ 69F7             >len_NFA         defl    $ - temp_NFA
1139+ 69F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1139+ 69F5             >
1139+ 69F5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1139+ 69F6 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1139+ 69F8             >                org     $-1                 // alter last byte of Name just above to set
1139+ 69F7 BE          >                db      {b $} | END_BIT     // msb as name end
1139+ 69F8             >
1139+ 69F8 E1 69       >                dw      last_NFA            // Link to previous definition Name
1139+ 69FA             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1139+ 69FA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1139+ 69FA             >                else
1139+ 69FA FC 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1139+ 69FC             >                endif           ; ok        // for other definitions it "points" the correct handler
1139+ 69FC             >                // Use of "; ok" to suppress "warning[fwdref]"
1139+ 69FC             >
1139+ 69FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1140+ 69FC
1141+ 69FC                              ldhlrp
1141+ 69FC 2A 30 64    >                ld      hl,(RP_Pointer)
1142+ 69FF 5E                           ld      e, (hl)             // retrieve from Return Stack
1143+ 6A00 23                           inc     hl
1144+ 6A01 56                           ld      d, (hl)
1145+ 6A02 23                           inc     hl
1146+ 6A03                              ldrphl
1146+ 6A03 22 30 64    >                ld      (RP_Pointer),hl
1147+ 6A06 D5                           push    de
1148+ 6A07                              next
1148+ 6A07 DD E9       >                jp      (ix)
1149+ 6A09
1150+ 6A09              //  ______________________________________________________________________
1151+ 6A09              //
1152+ 6A09              // r            -- n
1153+ 6A09              // return on top of stack the value of top of return-stack
1154+ 6A09              // Since this is the same as I, we alter R's CFA to jump there
1155+ 6A09                              New_Def R_OP, "R@", I_Ptr, is_normal
1155+ 6A09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1155+ 6A09             >
1155+ 6A09             >                // dummy db directives used to calculate length of namec
1155+ 6A09 52 40       >                db      "R@"
1155+ 6A0B             >len_NFA         defl    $ - temp_NFA
1155+ 6A0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1155+ 6A09             >
1155+ 6A09 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1155+ 6A0A 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1155+ 6A0C             >                org     $-1                 // alter last byte of Name just above to set
1155+ 6A0B C0          >                db      {b $} | END_BIT     // msb as name end
1155+ 6A0C             >
1155+ 6A0C F5 69       >                dw      last_NFA            // Link to previous definition Name
1155+ 6A0E             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1155+ 6A0E 12 65       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1155+ 6A10             >                else
1155+ 6A10 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1155+ 6A10             >                endif           ; ok        // for other definitions it "points" the correct handler
1155+ 6A10             >                // Use of "; ok" to suppress "warning[fwdref]"
1155+ 6A10             >
1155+ 6A10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1156+ 6A10
1157+ 6A10              //  ______________________________________________________________________
1158+ 6A10              //
1159+ 6A10              // r            -- n
1160+ 6A10              // return on top of stack the value of top of return-stack
1161+ 6A10              // Since this is the same as I, we alter R's CFA to jump there
1162+ 6A10                              New_Def R_OLD, "R", I_Ptr, is_normal
1162+ 6A10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1162+ 6A10             >
1162+ 6A10             >                // dummy db directives used to calculate length of namec
1162+ 6A10 52          >                db      "R"
1162+ 6A11             >len_NFA         defl    $ - temp_NFA
1162+ 6A11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1162+ 6A10             >
1162+ 6A10 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1162+ 6A11 52          >                db      "R"               // name string in 7-bit ascii, but
1162+ 6A12             >                org     $-1                 // alter last byte of Name just above to set
1162+ 6A11 D2          >                db      {b $} | END_BIT     // msb as name end
1162+ 6A12             >
1162+ 6A12 09 6A       >                dw      last_NFA            // Link to previous definition Name
1162+ 6A14             >R_OLD:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1162+ 6A14 12 65       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1162+ 6A16             >                else
1162+ 6A16 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1162+ 6A16             >                endif           ; ok        // for other definitions it "points" the correct handler
1162+ 6A16             >                // Use of "; ok" to suppress "warning[fwdref]"
1162+ 6A16             >
1162+ 6A16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1163+ 6A16
1164+ 6A16              //  ______________________________________________________________________
1165+ 6A16              //
1166+ 6A16              // 0=           n -- f
1167+ 6A16              // true (non zero) if n is zero, false (0) elsewere
1168+ 6A16                              New_Def ZEQUAL, "0=", is_code, is_normal
1168+ 6A16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1168+ 6A16             >
1168+ 6A16             >                // dummy db directives used to calculate length of namec
1168+ 6A16 30 3D       >                db      "0="
1168+ 6A18             >len_NFA         defl    $ - temp_NFA
1168+ 6A18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1168+ 6A16             >
1168+ 6A16 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1168+ 6A17 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1168+ 6A19             >                org     $-1                 // alter last byte of Name just above to set
1168+ 6A18 BD          >                db      {b $} | END_BIT     // msb as name end
1168+ 6A19             >
1168+ 6A19 10 6A       >                dw      last_NFA            // Link to previous definition Name
1168+ 6A1B             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1168+ 6A1B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1168+ 6A1B             >                else
1168+ 6A1B 1D 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1168+ 6A1D             >                endif           ; ok        // for other definitions it "points" the correct handler
1168+ 6A1D             >                // Use of "; ok" to suppress "warning[fwdref]"
1168+ 6A1D             >
1168+ 6A1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1169+ 6A1D E1                           pop     hl
1170+ 6A1E 7D                           ld      a, l
1171+ 6A1F B4                           or      h
1172+ 6A20 21 00 00                     ld      hl, FALSE_FLAG
1173+ 6A23 20 01                        jr      nz, ZEqual_Skip
1174+ 6A25 2C                               inc     l
1175+ 6A26              ZEqual_Skip:
1176+ 6A26                              psh1
1176+ 6A26 E5          >                push    hl
1176+ 6A27 DD E9       >                jp      (ix)
1177+ 6A29
1178+ 6A29              //  ______________________________________________________________________
1179+ 6A29              //
1180+ 6A29              // 0<           n -- f
1181+ 6A29              // true (non zero) if n is less than zero, false (0) elsewere
1182+ 6A29                              New_Def ZLESS, "0<", is_code, is_normal
1182+ 6A29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1182+ 6A29             >
1182+ 6A29             >                // dummy db directives used to calculate length of namec
1182+ 6A29 30 3C       >                db      "0<"
1182+ 6A2B             >len_NFA         defl    $ - temp_NFA
1182+ 6A2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1182+ 6A29             >
1182+ 6A29 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1182+ 6A2A 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1182+ 6A2C             >                org     $-1                 // alter last byte of Name just above to set
1182+ 6A2B BC          >                db      {b $} | END_BIT     // msb as name end
1182+ 6A2C             >
1182+ 6A2C 16 6A       >                dw      last_NFA            // Link to previous definition Name
1182+ 6A2E             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1182+ 6A2E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1182+ 6A2E             >                else
1182+ 6A2E 30 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1182+ 6A30             >                endif           ; ok        // for other definitions it "points" the correct handler
1182+ 6A30             >                // Use of "; ok" to suppress "warning[fwdref]"
1182+ 6A30             >
1182+ 6A30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1183+ 6A30 E1                           pop     hl
1184+ 6A31 29                           add     hl, hl
1185+ 6A32 21 00 00                     ld      hl, 0
1186+ 6A35 30 01                        jr      nc, ZLess_Skip
1187+ 6A37 2C                               inc     l
1188+ 6A38              ZLess_Skip:
1189+ 6A38                              psh1
1189+ 6A38 E5          >                push    hl
1189+ 6A39 DD E9       >                jp      (ix)
1190+ 6A3B
1191+ 6A3B              //  ______________________________________________________________________
1192+ 6A3B              //
1193+ 6A3B              // 0>           n -- f
1194+ 6A3B              // true (non zero) if n is less than zero, false (0) elsewere
1195+ 6A3B                              New_Def ZGREATER, "0>", is_code, is_normal
1195+ 6A3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1195+ 6A3B             >
1195+ 6A3B             >                // dummy db directives used to calculate length of namec
1195+ 6A3B 30 3E       >                db      "0>"
1195+ 6A3D             >len_NFA         defl    $ - temp_NFA
1195+ 6A3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1195+ 6A3B             >
1195+ 6A3B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1195+ 6A3C 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1195+ 6A3E             >                org     $-1                 // alter last byte of Name just above to set
1195+ 6A3D BE          >                db      {b $} | END_BIT     // msb as name end
1195+ 6A3E             >
1195+ 6A3E 29 6A       >                dw      last_NFA            // Link to previous definition Name
1195+ 6A40             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1195+ 6A40 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1195+ 6A40             >                else
1195+ 6A40 42 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1195+ 6A42             >                endif           ; ok        // for other definitions it "points" the correct handler
1195+ 6A42             >                // Use of "; ok" to suppress "warning[fwdref]"
1195+ 6A42             >
1195+ 6A42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1196+ 6A42 E1                           pop     hl
1197+ 6A43 7D                           ld      a, l
1198+ 6A44 B4                           or      h
1199+ 6A45 29                           add     hl, hl
1200+ 6A46 21 00 00                     ld      hl, FALSE_FLAG
1201+ 6A49 38 04                        jr      c, ZGreater_Skip
1202+ 6A4B A7                               and     a
1203+ 6A4C 28 01                            jr      z, ZGreater_Skip
1204+ 6A4E 2C                                   inc     l
1205+ 6A4F              ZGreater_Skip:
1206+ 6A4F                              psh1
1206+ 6A4F E5          >                push    hl
1206+ 6A50 DD E9       >                jp      (ix)
1207+ 6A52
1208+ 6A52              //  ______________________________________________________________________
1209+ 6A52              //
1210+ 6A52              // +            n1 n2 -- n3
1211+ 6A52              // returns the unsigned sum of two top values
1212+ 6A52                              New_Def PLUS, "+", is_code, is_normal
1212+ 6A52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ 6A52             >
1212+ 6A52             >                // dummy db directives used to calculate length of namec
1212+ 6A52 2B          >                db      "+"
1212+ 6A53             >len_NFA         defl    $ - temp_NFA
1212+ 6A53             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ 6A52             >
1212+ 6A52 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ 6A53 2B          >                db      "+"               // name string in 7-bit ascii, but
1212+ 6A54             >                org     $-1                 // alter last byte of Name just above to set
1212+ 6A53 AB          >                db      {b $} | END_BIT     // msb as name end
1212+ 6A54             >
1212+ 6A54 3B 6A       >                dw      last_NFA            // Link to previous definition Name
1212+ 6A56             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 6A56 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1212+ 6A56             >                else
1212+ 6A56 58 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1212+ 6A58             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 6A58             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 6A58             >
1212+ 6A58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 6A58 E1                           pop     hl
1214+ 6A59 D1                           pop     de
1215+ 6A5A 19                           add     hl, de
1216+ 6A5B
1217+ 6A5B                              psh1
1217+ 6A5B E5          >                push    hl
1217+ 6A5C DD E9       >                jp      (ix)
1218+ 6A5E
1219+ 6A5E
1220+ 6A5E              //  ______________________________________________________________________
1221+ 6A5E              //
1222+ 6A5E              // d+           d1 d2 -- d3
1223+ 6A5E              // returns the unsigned sum of two top double-numbers
1224+ 6A5E              //      d2  d1
1225+ 6A5E              //      h l h l
1226+ 6A5E              // SP   LHEDLHED
1227+ 6A5E              // SP  +01234567
1228+ 6A5E                              New_Def DPLUS, "D+", is_code, is_normal
1228+ 6A5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1228+ 6A5E             >
1228+ 6A5E             >                // dummy db directives used to calculate length of namec
1228+ 6A5E 44 2B       >                db      "D+"
1228+ 6A60             >len_NFA         defl    $ - temp_NFA
1228+ 6A60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1228+ 6A5E             >
1228+ 6A5E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1228+ 6A5F 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1228+ 6A61             >                org     $-1                 // alter last byte of Name just above to set
1228+ 6A60 AB          >                db      {b $} | END_BIT     // msb as name end
1228+ 6A61             >
1228+ 6A61 52 6A       >                dw      last_NFA            // Link to previous definition Name
1228+ 6A63             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1228+ 6A63 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1228+ 6A63             >                else
1228+ 6A63 65 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1228+ 6A65             >                endif           ; ok        // for other definitions it "points" the correct handler
1228+ 6A65             >                // Use of "; ok" to suppress "warning[fwdref]"
1228+ 6A65             >
1228+ 6A65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1229+ 6A65
1230+ 6A65 21 07 00                     ld      hl, 7
1231+ 6A68 39                           add     hl, sp
1232+ 6A69 56                           ld      d, (hl)
1233+ 6A6A 70                           ld      (hl), b             // Save IP
1234+ 6A6B 2B                           dec     hl
1235+ 6A6C 5E                           ld      e, (hl)
1236+ 6A6D 71                           ld      (hl), c             // de := d1.L
1237+ 6A6E C1                           pop     bc                  // bc := d2.H
1238+ 6A6F E1                           pop     hl                  // hl := d2.L
1239+ 6A70 19                           add     hl, de              // hl := d2.L + d1.L
1240+ 6A71 EB                           ex      de, hl              // de := lower
1241+ 6A72 E1                           pop     hl                  // d1.H
1242+ 6A73 ED 4A                        adc     hl, bc              // d1.H + d2.H
1243+ 6A75 C1                           pop     bc                  // Restore IP
1244+ 6A76
1245+ 6A76
1246+ 6A76                              psh2
1246+ 6A76 D5          >                push    de
1246+ 6A77 E5          >                push    hl
1246+ 6A78 DD E9       >                jp      (ix)
1247+ 6A7A
1248+ 6A7A              //  ______________________________________________________________________
1249+ 6A7A              //
1250+ 6A7A              // 1+           n1 -- n2
1251+ 6A7A              // increment by 1 top of stack
1252+ 6A7A                              New_Def ONE_PLUS, "1+", is_code, is_normal
1252+ 6A7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1252+ 6A7A             >
1252+ 6A7A             >                // dummy db directives used to calculate length of namec
1252+ 6A7A 31 2B       >                db      "1+"
1252+ 6A7C             >len_NFA         defl    $ - temp_NFA
1252+ 6A7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1252+ 6A7A             >
1252+ 6A7A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1252+ 6A7B 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1252+ 6A7D             >                org     $-1                 // alter last byte of Name just above to set
1252+ 6A7C AB          >                db      {b $} | END_BIT     // msb as name end
1252+ 6A7D             >
1252+ 6A7D 5E 6A       >                dw      last_NFA            // Link to previous definition Name
1252+ 6A7F             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1252+ 6A7F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1252+ 6A7F             >                else
1252+ 6A7F 81 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1252+ 6A81             >                endif           ; ok        // for other definitions it "points" the correct handler
1252+ 6A81             >                // Use of "; ok" to suppress "warning[fwdref]"
1252+ 6A81             >
1252+ 6A81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1253+ 6A81 E1                           pop     hl
1254+ 6A82 23                           inc     hl
1255+ 6A83
1256+ 6A83                              psh1
1256+ 6A83 E5          >                push    hl
1256+ 6A84 DD E9       >                jp      (ix)
1257+ 6A86
1258+ 6A86              //  ______________________________________________________________________
1259+ 6A86              //
1260+ 6A86              // 1-           n1 -- n2
1261+ 6A86              // decrement by 1 top of stack
1262+ 6A86                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1262+ 6A86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1262+ 6A86             >
1262+ 6A86             >                // dummy db directives used to calculate length of namec
1262+ 6A86 31 2D       >                db      "1-"
1262+ 6A88             >len_NFA         defl    $ - temp_NFA
1262+ 6A88             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1262+ 6A86             >
1262+ 6A86 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1262+ 6A87 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1262+ 6A89             >                org     $-1                 // alter last byte of Name just above to set
1262+ 6A88 AD          >                db      {b $} | END_BIT     // msb as name end
1262+ 6A89             >
1262+ 6A89 7A 6A       >                dw      last_NFA            // Link to previous definition Name
1262+ 6A8B             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1262+ 6A8B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1262+ 6A8B             >                else
1262+ 6A8B 8D 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1262+ 6A8D             >                endif           ; ok        // for other definitions it "points" the correct handler
1262+ 6A8D             >                // Use of "; ok" to suppress "warning[fwdref]"
1262+ 6A8D             >
1262+ 6A8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1263+ 6A8D E1                           pop     hl
1264+ 6A8E 2B                           dec     hl
1265+ 6A8F
1266+ 6A8F                              psh1
1266+ 6A8F E5          >                push    hl
1266+ 6A90 DD E9       >                jp      (ix)
1267+ 6A92
1268+ 6A92              //  ______________________________________________________________________
1269+ 6A92              //
1270+ 6A92              // 2+           n1 -- n2
1271+ 6A92              // increment by 2 top of stack
1272+ 6A92                              New_Def TWO_PLUS, "2+", is_code, is_normal
1272+ 6A92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1272+ 6A92             >
1272+ 6A92             >                // dummy db directives used to calculate length of namec
1272+ 6A92 32 2B       >                db      "2+"
1272+ 6A94             >len_NFA         defl    $ - temp_NFA
1272+ 6A94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1272+ 6A92             >
1272+ 6A92 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1272+ 6A93 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1272+ 6A95             >                org     $-1                 // alter last byte of Name just above to set
1272+ 6A94 AB          >                db      {b $} | END_BIT     // msb as name end
1272+ 6A95             >
1272+ 6A95 86 6A       >                dw      last_NFA            // Link to previous definition Name
1272+ 6A97             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1272+ 6A97 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1272+ 6A97             >                else
1272+ 6A97 99 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1272+ 6A99             >                endif           ; ok        // for other definitions it "points" the correct handler
1272+ 6A99             >                // Use of "; ok" to suppress "warning[fwdref]"
1272+ 6A99             >
1272+ 6A99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1273+ 6A99              Two_Plus:
1274+ 6A99 E1                           pop     hl
1275+ 6A9A 23                           inc     hl
1276+ 6A9B 23                           inc     hl
1277+ 6A9C
1278+ 6A9C                              psh1
1278+ 6A9C E5          >                push    hl
1278+ 6A9D DD E9       >                jp      (ix)
1279+ 6A9F
1280+ 6A9F              //  ______________________________________________________________________
1281+ 6A9F              //
1282+ 6A9F              // cell+        a1 -- a2
1283+ 6A9F              // increment by 2 top of stack
1284+ 6A9F                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1284+ 6A9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1284+ 6A9F             >
1284+ 6A9F             >                // dummy db directives used to calculate length of namec
1284+ 6A9F 43 45 4C 4C >                db      "CELL+"
1284+ 6AA3 2B          >
1284+ 6AA4             >len_NFA         defl    $ - temp_NFA
1284+ 6AA4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1284+ 6A9F             >
1284+ 6A9F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1284+ 6AA0 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1284+ 6AA4 2B          >
1284+ 6AA5             >                org     $-1                 // alter last byte of Name just above to set
1284+ 6AA4 AB          >                db      {b $} | END_BIT     // msb as name end
1284+ 6AA5             >
1284+ 6AA5 92 6A       >                dw      last_NFA            // Link to previous definition Name
1284+ 6AA7             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1284+ 6AA7 99 6A       >                dw      Two_Plus ; ok        // for primitive definitions  actual code
1284+ 6AA9             >                else
1284+ 6AA9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1284+ 6AA9             >                endif           ; ok        // for other definitions it "points" the correct handler
1284+ 6AA9             >                // Use of "; ok" to suppress "warning[fwdref]"
1284+ 6AA9             >
1284+ 6AA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1285+ 6AA9
1286+ 6AA9              //  ______________________________________________________________________
1287+ 6AA9              //
1288+ 6AA9              // align        a1 -- a2
1289+ 6AA9              // align memory : not used
1290+ 6AA9              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1291+ 6AA9              //            next
1292+ 6AA9
1293+ 6AA9              //  ______________________________________________________________________
1294+ 6AA9              //
1295+ 6AA9              // cell-        a1 -- a2
1296+ 6AA9              // decrement by 2 top of stack
1297+ 6AA9                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1297+ 6AA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1297+ 6AA9             >
1297+ 6AA9             >                // dummy db directives used to calculate length of namec
1297+ 6AA9 43 45 4C 4C >                db      "CELL-"
1297+ 6AAD 2D          >
1297+ 6AAE             >len_NFA         defl    $ - temp_NFA
1297+ 6AAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1297+ 6AA9             >
1297+ 6AA9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1297+ 6AAA 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1297+ 6AAE 2D          >
1297+ 6AAF             >                org     $-1                 // alter last byte of Name just above to set
1297+ 6AAE AD          >                db      {b $} | END_BIT     // msb as name end
1297+ 6AAF             >
1297+ 6AAF 9F 6A       >                dw      last_NFA            // Link to previous definition Name
1297+ 6AB1             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1297+ 6AB1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1297+ 6AB1             >                else
1297+ 6AB1 B3 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1297+ 6AB3             >                endif           ; ok        // for other definitions it "points" the correct handler
1297+ 6AB3             >                // Use of "; ok" to suppress "warning[fwdref]"
1297+ 6AB3             >
1297+ 6AB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1298+ 6AB3 E1                           pop     hl
1299+ 6AB4 2B                           dec     hl
1300+ 6AB5 2B                           dec     hl
1301+ 6AB6
1302+ 6AB6                              psh1
1302+ 6AB6 E5          >                push    hl
1302+ 6AB7 DD E9       >                jp      (ix)
1303+ 6AB9
1304+ 6AB9              //  ______________________________________________________________________
1305+ 6AB9              //
1306+ 6AB9              // negate        n1 -- n2
1307+ 6AB9              // change the sign of number
1308+ 6AB9                              New_Def MINUS, "NEGATE", is_code, is_normal
1308+ 6AB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1308+ 6AB9             >
1308+ 6AB9             >                // dummy db directives used to calculate length of namec
1308+ 6AB9 4E 45 47 41 >                db      "NEGATE"
1308+ 6ABD 54 45       >
1308+ 6ABF             >len_NFA         defl    $ - temp_NFA
1308+ 6ABF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1308+ 6AB9             >
1308+ 6AB9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1308+ 6ABA 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1308+ 6ABE 54 45       >
1308+ 6AC0             >                org     $-1                 // alter last byte of Name just above to set
1308+ 6ABF C5          >                db      {b $} | END_BIT     // msb as name end
1308+ 6AC0             >
1308+ 6AC0 A9 6A       >                dw      last_NFA            // Link to previous definition Name
1308+ 6AC2             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1308+ 6AC2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1308+ 6AC2             >                else
1308+ 6AC2 C4 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1308+ 6AC4             >                endif           ; ok        // for other definitions it "points" the correct handler
1308+ 6AC4             >                // Use of "; ok" to suppress "warning[fwdref]"
1308+ 6AC4             >
1308+ 6AC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1309+ 6AC4 21 00 00                     ld      hl, 0               // subtract from 0
1310+ 6AC7 D1                           pop     de
1311+ 6AC8 B7                           or      a
1312+ 6AC9 ED 52                        sbc     hl, de
1313+ 6ACB
1314+ 6ACB                              psh1
1314+ 6ACB E5          >                push    hl
1314+ 6ACC DD E9       >                jp      (ix)
1315+ 6ACE
1316+ 6ACE              //  ______________________________________________________________________
1317+ 6ACE              //
1318+ 6ACE              // dminus       d1 -- d2
1319+ 6ACE              // change the sign of a double number
1320+ 6ACE                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1320+ 6ACE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1320+ 6ACE             >
1320+ 6ACE             >                // dummy db directives used to calculate length of namec
1320+ 6ACE 44 4E 45 47 >                db      "DNEGATE"
1320+ 6AD2 41 54 45    >
1320+ 6AD5             >len_NFA         defl    $ - temp_NFA
1320+ 6AD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1320+ 6ACE             >
1320+ 6ACE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1320+ 6ACF 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1320+ 6AD3 41 54 45    >
1320+ 6AD6             >                org     $-1                 // alter last byte of Name just above to set
1320+ 6AD5 C5          >                db      {b $} | END_BIT     // msb as name end
1320+ 6AD6             >
1320+ 6AD6 B9 6A       >                dw      last_NFA            // Link to previous definition Name
1320+ 6AD8             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1320+ 6AD8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1320+ 6AD8             >                else
1320+ 6AD8 DA 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1320+ 6ADA             >                endif           ; ok        // for other definitions it "points" the correct handler
1320+ 6ADA             >                // Use of "; ok" to suppress "warning[fwdref]"
1320+ 6ADA             >
1320+ 6ADA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1321+ 6ADA E1                           pop     hl                  // d1.H
1322+ 6ADB D1                           pop     de                  // d1.L
1323+ 6ADC C5                           push    bc                  // Save Instruction Pointer
1324+ 6ADD 44                           ld      b, h
1325+ 6ADE 4D                           ld      c, l                // bc := d1.L
1326+ 6ADF AF                           xor     a
1327+ 6AE0 67                           ld      h, a
1328+ 6AE1 6F                           ld      l, a
1329+ 6AE2 ED 52                        sbc     hl, de              // subtact from zero
1330+ 6AE4 D1                           pop     de                  // Retrieve Instruction Pointer
1331+ 6AE5 E5                           push    hl                  // > d2-L
1332+ 6AE6 67                           ld      h, a
1333+ 6AE7 6F                           ld      l, a
1334+ 6AE8 ED 42                        sbc     hl, bc              // subtract from zero with carry
1335+ 6AEA                                                          // > d2-H
1336+ 6AEA 42                           ld      b, d
1337+ 6AEB 4B                           ld      c, e
1338+ 6AEC                              psh1
1338+ 6AEC E5          >                push    hl
1338+ 6AED DD E9       >                jp      (ix)
1339+ 6AEF
1340+ 6AEF              //  ______________________________________________________________________
1341+ 6AEF              //
1342+ 6AEF              // over         n1 n2 -- n1 n2 n1
1343+ 6AEF              // copy the second value of stack and put it on top.
1344+ 6AEF                              New_Def OVER, "OVER", is_code, is_normal
1344+ 6AEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1344+ 6AEF             >
1344+ 6AEF             >                // dummy db directives used to calculate length of namec
1344+ 6AEF 4F 56 45 52 >                db      "OVER"
1344+ 6AF3             >len_NFA         defl    $ - temp_NFA
1344+ 6AF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1344+ 6AEF             >
1344+ 6AEF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1344+ 6AF0 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1344+ 6AF4             >                org     $-1                 // alter last byte of Name just above to set
1344+ 6AF3 D2          >                db      {b $} | END_BIT     // msb as name end
1344+ 6AF4             >
1344+ 6AF4 CE 6A       >                dw      last_NFA            // Link to previous definition Name
1344+ 6AF6             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1344+ 6AF6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1344+ 6AF6             >                else
1344+ 6AF6 F8 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1344+ 6AF8             >                endif           ; ok        // for other definitions it "points" the correct handler
1344+ 6AF8             >                // Use of "; ok" to suppress "warning[fwdref]"
1344+ 6AF8             >
1344+ 6AF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1345+ 6AF8 D1                           pop     de                  //   n2
1346+ 6AF9 E1                           pop     hl                  // < n1
1347+ 6AFA E5                           push    hl                  // > n1
1348+ 6AFB D5                           push    de                  // > n2
1349+ 6AFC E5                           push    hl                  // > n1
1350+ 6AFD                              next
1350+ 6AFD DD E9       >                jp      (ix)
1351+ 6AFF
1352+ 6AFF              //  ______________________________________________________________________
1353+ 6AFF              //
1354+ 6AFF              // drop         n1 --
1355+ 6AFF              // drops the top of stack
1356+ 6AFF                              New_Def DROP, "DROP", is_code, is_normal
1356+ 6AFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1356+ 6AFF             >
1356+ 6AFF             >                // dummy db directives used to calculate length of namec
1356+ 6AFF 44 52 4F 50 >                db      "DROP"
1356+ 6B03             >len_NFA         defl    $ - temp_NFA
1356+ 6B03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1356+ 6AFF             >
1356+ 6AFF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1356+ 6B00 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1356+ 6B04             >                org     $-1                 // alter last byte of Name just above to set
1356+ 6B03 D0          >                db      {b $} | END_BIT     // msb as name end
1356+ 6B04             >
1356+ 6B04 EF 6A       >                dw      last_NFA            // Link to previous definition Name
1356+ 6B06             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1356+ 6B06 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1356+ 6B06             >                else
1356+ 6B06 08 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1356+ 6B08             >                endif           ; ok        // for other definitions it "points" the correct handler
1356+ 6B08             >                // Use of "; ok" to suppress "warning[fwdref]"
1356+ 6B08             >
1356+ 6B08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1357+ 6B08 E1                           pop     hl                  // < n1 and discard previous TOS
1358+ 6B09                              next
1358+ 6B09 DD E9       >                jp      (ix)
1359+ 6B0B
1360+ 6B0B              //  ______________________________________________________________________
1361+ 6B0B              //
1362+ 6B0B              // nip          n1 n2 -- n2
1363+ 6B0B              // drops the second elemento on the stack
1364+ 6B0B                              New_Def NIP, "NIP", is_code, is_normal
1364+ 6B0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1364+ 6B0B             >
1364+ 6B0B             >                // dummy db directives used to calculate length of namec
1364+ 6B0B 4E 49 50    >                db      "NIP"
1364+ 6B0E             >len_NFA         defl    $ - temp_NFA
1364+ 6B0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1364+ 6B0B             >
1364+ 6B0B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1364+ 6B0C 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1364+ 6B0F             >                org     $-1                 // alter last byte of Name just above to set
1364+ 6B0E D0          >                db      {b $} | END_BIT     // msb as name end
1364+ 6B0F             >
1364+ 6B0F FF 6A       >                dw      last_NFA            // Link to previous definition Name
1364+ 6B11             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1364+ 6B11 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1364+ 6B11             >                else
1364+ 6B11 13 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1364+ 6B13             >                endif           ; ok        // for other definitions it "points" the correct handler
1364+ 6B13             >                // Use of "; ok" to suppress "warning[fwdref]"
1364+ 6B13             >
1364+ 6B13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1365+ 6B13
1366+ 6B13 E1                           pop     hl                  // < n1 discarded
1367+ 6B14 E3                           ex      (sp), hl
1368+ 6B15                              next
1368+ 6B15 DD E9       >                jp      (ix)
1369+ 6B17
1370+ 6B17              //  ______________________________________________________________________
1371+ 6B17              //
1372+ 6B17              // tuck         n1 n2 -- n2 n1 n2
1373+ 6B17              // copy the top element after the second.
1374+ 6B17                              New_Def TUCK, "TUCK", is_code, is_normal
1374+ 6B17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1374+ 6B17             >
1374+ 6B17             >                // dummy db directives used to calculate length of namec
1374+ 6B17 54 55 43 4B >                db      "TUCK"
1374+ 6B1B             >len_NFA         defl    $ - temp_NFA
1374+ 6B1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1374+ 6B17             >
1374+ 6B17 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1374+ 6B18 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1374+ 6B1C             >                org     $-1                 // alter last byte of Name just above to set
1374+ 6B1B CB          >                db      {b $} | END_BIT     // msb as name end
1374+ 6B1C             >
1374+ 6B1C 0B 6B       >                dw      last_NFA            // Link to previous definition Name
1374+ 6B1E             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1374+ 6B1E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1374+ 6B1E             >                else
1374+ 6B1E 20 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1374+ 6B20             >                endif           ; ok        // for other definitions it "points" the correct handler
1374+ 6B20             >                // Use of "; ok" to suppress "warning[fwdref]"
1374+ 6B20             >
1374+ 6B20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1375+ 6B20 E1                           pop     hl
1376+ 6B21 D1                           pop     de                  // < n1
1377+ 6B22 E5                           push    hl                  // > n2  and TOS
1378+ 6B23 D5                           push    de                  // > n1
1379+ 6B24 E5                           push    hl
1380+ 6B25                              next
1380+ 6B25 DD E9       >                jp      (ix)
1381+ 6B27
1382+ 6B27              //  ______________________________________________________________________
1383+ 6B27              //
1384+ 6B27              // swap         n1 n2 -- n2 n1
1385+ 6B27              // swaps the two values on top of stack
1386+ 6B27                              New_Def SWAP, "SWAP", is_code, is_normal
1386+ 6B27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1386+ 6B27             >
1386+ 6B27             >                // dummy db directives used to calculate length of namec
1386+ 6B27 53 57 41 50 >                db      "SWAP"
1386+ 6B2B             >len_NFA         defl    $ - temp_NFA
1386+ 6B2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1386+ 6B27             >
1386+ 6B27 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1386+ 6B28 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1386+ 6B2C             >                org     $-1                 // alter last byte of Name just above to set
1386+ 6B2B D0          >                db      {b $} | END_BIT     // msb as name end
1386+ 6B2C             >
1386+ 6B2C 17 6B       >                dw      last_NFA            // Link to previous definition Name
1386+ 6B2E             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1386+ 6B2E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1386+ 6B2E             >                else
1386+ 6B2E 30 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1386+ 6B30             >                endif           ; ok        // for other definitions it "points" the correct handler
1386+ 6B30             >                // Use of "; ok" to suppress "warning[fwdref]"
1386+ 6B30             >
1386+ 6B30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1387+ 6B30 E1                           pop     hl                  // < n1
1388+ 6B31 E3                           ex      (sp),hl             // > n2
1389+ 6B32 E5                           push    hl                  // copy n1 to TOS
1390+ 6B33                              next
1390+ 6B33 DD E9       >                jp      (ix)
1391+ 6B35
1392+ 6B35              //  ______________________________________________________________________
1393+ 6B35              //
1394+ 6B35              // dup         n -- n n
1395+ 6B35              // duplicates the top value of stack
1396+ 6B35                              New_Def DUP, "DUP", is_code, is_normal
1396+ 6B35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1396+ 6B35             >
1396+ 6B35             >                // dummy db directives used to calculate length of namec
1396+ 6B35 44 55 50    >                db      "DUP"
1396+ 6B38             >len_NFA         defl    $ - temp_NFA
1396+ 6B38             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1396+ 6B35             >
1396+ 6B35 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1396+ 6B36 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1396+ 6B39             >                org     $-1                 // alter last byte of Name just above to set
1396+ 6B38 D0          >                db      {b $} | END_BIT     // msb as name end
1396+ 6B39             >
1396+ 6B39 27 6B       >                dw      last_NFA            // Link to previous definition Name
1396+ 6B3B             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1396+ 6B3B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1396+ 6B3B             >                else
1396+ 6B3B 3D 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1396+ 6B3D             >                endif           ; ok        // for other definitions it "points" the correct handler
1396+ 6B3D             >                // Use of "; ok" to suppress "warning[fwdref]"
1396+ 6B3D             >
1396+ 6B3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1397+ 6B3D E1                           pop     hl
1398+ 6B3E E5                           push    hl                  // > n duplicate TOS
1399+ 6B3F E5                           push    hl
1400+ 6B40                              next
1400+ 6B40 DD E9       >                jp      (ix)
1401+ 6B42
1402+ 6B42              //  ______________________________________________________________________
1403+ 6B42              //
1404+ 6B42              // rot         n1 n2 n3 -- n2 n3 n1
1405+ 6B42              // Rotates the 3 top values of stack by picking the 3rd in access-order
1406+ 6B42              // and putting it on top. The other two are shifted down one place.
1407+ 6B42                              New_Def ROT, "ROT", is_code, is_normal
1407+ 6B42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1407+ 6B42             >
1407+ 6B42             >                // dummy db directives used to calculate length of namec
1407+ 6B42 52 4F 54    >                db      "ROT"
1407+ 6B45             >len_NFA         defl    $ - temp_NFA
1407+ 6B45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1407+ 6B42             >
1407+ 6B42 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1407+ 6B43 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1407+ 6B46             >                org     $-1                 // alter last byte of Name just above to set
1407+ 6B45 D4          >                db      {b $} | END_BIT     // msb as name end
1407+ 6B46             >
1407+ 6B46 35 6B       >                dw      last_NFA            // Link to previous definition Name
1407+ 6B48             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1407+ 6B48 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1407+ 6B48             >                else
1407+ 6B48 4A 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1407+ 6B4A             >                endif           ; ok        // for other definitions it "points" the correct handler
1407+ 6B4A             >                // Use of "; ok" to suppress "warning[fwdref]"
1407+ 6B4A             >
1407+ 6B4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1408+ 6B4A D1                           pop     de                  // < n2
1409+ 6B4B E1                           pop     hl                  // < n1
1410+ 6B4C E3                           ex      (sp),hl             // > n2
1411+ 6B4D D5                           push    de                  // > n3
1412+ 6B4E E5                           push    hl                  // copy n1 to TOS
1413+ 6B4F                              next
1413+ 6B4F DD E9       >                jp      (ix)
1414+ 6B51
1415+ 6B51              //  ______________________________________________________________________
1416+ 6B51              //
1417+ 6B51              // pick        n1 -- nx
1418+ 6B51              // picks the nth element from TOS
1419+ 6B51                              New_Def PICK, "PICK", is_code, is_normal
1419+ 6B51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1419+ 6B51             >
1419+ 6B51             >                // dummy db directives used to calculate length of namec
1419+ 6B51 50 49 43 4B >                db      "PICK"
1419+ 6B55             >len_NFA         defl    $ - temp_NFA
1419+ 6B55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1419+ 6B51             >
1419+ 6B51 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1419+ 6B52 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1419+ 6B56             >                org     $-1                 // alter last byte of Name just above to set
1419+ 6B55 CB          >                db      {b $} | END_BIT     // msb as name end
1419+ 6B56             >
1419+ 6B56 42 6B       >                dw      last_NFA            // Link to previous definition Name
1419+ 6B58             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1419+ 6B58 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1419+ 6B58             >                else
1419+ 6B58 5A 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1419+ 6B5A             >                endif           ; ok        // for other definitions it "points" the correct handler
1419+ 6B5A             >                // Use of "; ok" to suppress "warning[fwdref]"
1419+ 6B5A             >
1419+ 6B5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1420+ 6B5A E1                           pop     hl                  // take TOS as index
1421+ 6B5B 29                           add     hl, hl              // as cells
1422+ 6B5C 39                           add     hl, sp              // from Stack Pointer
1423+ 6B5D 7E                           ld      a, (hl)             // replace TOS
1424+ 6B5E 23                           inc     hl
1425+ 6B5F 66                           ld      h, (hl)
1426+ 6B60 6F                           ld      l, a
1427+ 6B61
1428+ 6B61                              psh1
1428+ 6B61 E5          >                push    hl
1428+ 6B62 DD E9       >                jp      (ix)
1429+ 6B64
1430+ 6B64
1431+ 6B64              //  ______________________________________________________________________
1432+ 6B64              //
1433+ 6B64              // 2over        d1 d2 -- d1 d2 d1
1434+ 6B64              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1435+ 6B64              // copy the second double of stack and put on top.
1436+ 6B64                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1436+ 6B64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1436+ 6B64             >
1436+ 6B64             >                // dummy db directives used to calculate length of namec
1436+ 6B64 32 4F 56 45 >                db      "2OVER"
1436+ 6B68 52          >
1436+ 6B69             >len_NFA         defl    $ - temp_NFA
1436+ 6B69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1436+ 6B64             >
1436+ 6B64 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1436+ 6B65 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1436+ 6B69 52          >
1436+ 6B6A             >                org     $-1                 // alter last byte of Name just above to set
1436+ 6B69 D2          >                db      {b $} | END_BIT     // msb as name end
1436+ 6B6A             >
1436+ 6B6A 51 6B       >                dw      last_NFA            // Link to previous definition Name
1436+ 6B6C             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1436+ 6B6C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1436+ 6B6C             >                else
1436+ 6B6C 6E 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1436+ 6B6E             >                endif           ; ok        // for other definitions it "points" the correct handler
1436+ 6B6E             >                // Use of "; ok" to suppress "warning[fwdref]"
1436+ 6B6E             >
1436+ 6B6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1437+ 6B6E
1438+ 6B6E 21 07 00                     ld      hl, 7
1439+ 6B71 39                           add     hl, sp
1440+ 6B72 56                           ld      d, (hl)
1441+ 6B73 2B                           dec     hl
1442+ 6B74 5E                           ld      e, (hl)             // d1-L
1443+ 6B75 D5                           push    de
1444+ 6B76 2B                           dec     hl
1445+ 6B77 56                           ld      d, (hl)
1446+ 6B78 2B                           dec     hl
1447+ 6B79 5E                           ld      e, (hl)             // d1-H
1448+ 6B7A D5                           push    de
1449+ 6B7B                              next
1449+ 6B7B DD E9       >                jp      (ix)
1450+ 6B7D
1451+ 6B7D              //  ______________________________________________________________________
1452+ 6B7D              //
1453+ 6B7D              // 2drop        d --
1454+ 6B7D              //              n1 n2 --
1455+ 6B7D              // drops the top double from stack
1456+ 6B7D                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1456+ 6B7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1456+ 6B7D             >
1456+ 6B7D             >                // dummy db directives used to calculate length of namec
1456+ 6B7D 32 44 52 4F >                db      "2DROP"
1456+ 6B81 50          >
1456+ 6B82             >len_NFA         defl    $ - temp_NFA
1456+ 6B82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1456+ 6B7D             >
1456+ 6B7D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1456+ 6B7E 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1456+ 6B82 50          >
1456+ 6B83             >                org     $-1                 // alter last byte of Name just above to set
1456+ 6B82 D0          >                db      {b $} | END_BIT     // msb as name end
1456+ 6B83             >
1456+ 6B83 64 6B       >                dw      last_NFA            // Link to previous definition Name
1456+ 6B85             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1456+ 6B85 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1456+ 6B85             >                else
1456+ 6B85 87 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1456+ 6B87             >                endif           ; ok        // for other definitions it "points" the correct handler
1456+ 6B87             >                // Use of "; ok" to suppress "warning[fwdref]"
1456+ 6B87             >
1456+ 6B87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1457+ 6B87 E1                           pop     hl
1458+ 6B88 E1                           pop     hl
1459+ 6B89                              next
1459+ 6B89 DD E9       >                jp      (ix)
1460+ 6B8B
1461+ 6B8B              //  ______________________________________________________________________
1462+ 6B8B              //
1463+ 6B8B              // 2nip         d1 d2 -- d2
1464+ 6B8B              //              n1 n2 n3 n4 -- n3 n4
1465+ 6B8B              // drops the second double on the stack
1466+ 6B8B              //              New_Def TWO_NIP, 4, "2nip"
1467+ 6B8B              //              ...
1468+ 6B8B
1469+ 6B8B              //  ______________________________________________________________________
1470+ 6B8B              //
1471+ 6B8B              // 2tuck         d1 d2 -- d2 d1 d2
1472+ 6B8B              // copy the top element after the second.
1473+ 6B8B              //              New_Def TWO_TUCK, 5, "2tuck"
1474+ 6B8B              //              ...
1475+ 6B8B
1476+ 6B8B              //  ______________________________________________________________________
1477+ 6B8B              //
1478+ 6B8B              // 2swap         d1 d2 -- d2 d1
1479+ 6B8B              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1480+ 6B8B              // swaps the two doubles on top of stack
1481+ 6B8B                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1481+ 6B8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1481+ 6B8B             >
1481+ 6B8B             >                // dummy db directives used to calculate length of namec
1481+ 6B8B 32 53 57 41 >                db      "2SWAP"
1481+ 6B8F 50          >
1481+ 6B90             >len_NFA         defl    $ - temp_NFA
1481+ 6B90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1481+ 6B8B             >
1481+ 6B8B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1481+ 6B8C 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1481+ 6B90 50          >
1481+ 6B91             >                org     $-1                 // alter last byte of Name just above to set
1481+ 6B90 D0          >                db      {b $} | END_BIT     // msb as name end
1481+ 6B91             >
1481+ 6B91 7D 6B       >                dw      last_NFA            // Link to previous definition Name
1481+ 6B93             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1481+ 6B93 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1481+ 6B93             >                else
1481+ 6B93 95 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1481+ 6B95             >                endif           ; ok        // for other definitions it "points" the correct handler
1481+ 6B95             >                // Use of "; ok" to suppress "warning[fwdref]"
1481+ 6B95             >
1481+ 6B95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1482+ 6B95 F1                           pop     af                  //   d2-H
1483+ 6B96 E1                           pop     hl                  // < d2-L
1484+ 6B97 D1                           pop     de                  // < d1-H
1485+ 6B98 E3                           ex      (sp), hl            // < d1-L > d2-L
1486+ 6B99 F5                           push    af                  // > d2-H
1487+ 6B9A E5                           push    hl                  // > d1-L
1488+ 6B9B D5                           push    de
1489+ 6B9C
1490+ 6B9C                              next
1490+ 6B9C DD E9       >                jp      (ix)
1491+ 6B9E
1492+ 6B9E              //  ______________________________________________________________________
1493+ 6B9E              //
1494+ 6B9E              // 2dup         d -- d d
1495+ 6B9E              //              n1 n2 -- n1 n2 n1 n2
1496+ 6B9E              // duplicates the top double of stack
1497+ 6B9E                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1497+ 6B9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1497+ 6B9E             >
1497+ 6B9E             >                // dummy db directives used to calculate length of namec
1497+ 6B9E 32 44 55 50 >                db      "2DUP"
1497+ 6BA2             >len_NFA         defl    $ - temp_NFA
1497+ 6BA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1497+ 6B9E             >
1497+ 6B9E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1497+ 6B9F 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1497+ 6BA3             >                org     $-1                 // alter last byte of Name just above to set
1497+ 6BA2 D0          >                db      {b $} | END_BIT     // msb as name end
1497+ 6BA3             >
1497+ 6BA3 8B 6B       >                dw      last_NFA            // Link to previous definition Name
1497+ 6BA5             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1497+ 6BA5 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1497+ 6BA5             >                else
1497+ 6BA5 A7 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1497+ 6BA7             >                endif           ; ok        // for other definitions it "points" the correct handler
1497+ 6BA7             >                // Use of "; ok" to suppress "warning[fwdref]"
1497+ 6BA7             >
1497+ 6BA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1498+ 6BA7 E1                           pop     hl                  // < d-H
1499+ 6BA8 D1                           pop     de                  // < d-L
1500+ 6BA9 D5                           push    de                  // < d-L
1501+ 6BAA E5                           push    hl                  // > d-H
1502+ 6BAB D5                           push    de                  // > d-L
1503+ 6BAC E5                           push    hl                  // > d-H
1504+ 6BAD                              next
1504+ 6BAD DD E9       >                jp      (ix)
1505+ 6BAF
1506+ 6BAF              //  ______________________________________________________________________
1507+ 6BAF              //
1508+ 6BAF              // 2rot         d1 d2 d3 -- d2 d3 d1
1509+ 6BAF              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1510+ 6BAF              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1511+ 6BAF              // and putting it on top. The other two are shifted down one place.
1512+ 6BAF              //              New_Def TWO?ROT, 4, "2rot"
1513+ 6BAF              //              ...
1514+ 6BAF                              New_Def TWO_ROT, "2ROT", is_code, is_normal
1514+ 6BAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1514+ 6BAF             >
1514+ 6BAF             >                // dummy db directives used to calculate length of namec
1514+ 6BAF 32 52 4F 54 >                db      "2ROT"
1514+ 6BB3             >len_NFA         defl    $ - temp_NFA
1514+ 6BB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1514+ 6BAF             >
1514+ 6BAF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1514+ 6BB0 32 52 4F 54 >                db      "2ROT"               // name string in 7-bit ascii, but
1514+ 6BB4             >                org     $-1                 // alter last byte of Name just above to set
1514+ 6BB3 D4          >                db      {b $} | END_BIT     // msb as name end
1514+ 6BB4             >
1514+ 6BB4 9E 6B       >                dw      last_NFA            // Link to previous definition Name
1514+ 6BB6             >TWO_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1514+ 6BB6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1514+ 6BB6             >                else
1514+ 6BB6 B8 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1514+ 6BB8             >                endif           ; ok        // for other definitions it "points" the correct handler
1514+ 6BB8             >                // Use of "; ok" to suppress "warning[fwdref]"
1514+ 6BB8             >
1514+ 6BB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1515+ 6BB8
1516+ 6BB8              //      d3  |d2  |d1  |
1517+ 6BB8              //      h l |h l |h l |
1518+ 6BB8              // SP   LHED|LHED|LHED|
1519+ 6BB8              // SP  +0123|4567|89ab|
1520+ 6BB8 21 0B 00                     ld      hl, $000B
1521+ 6BBB 39                           add     hl, sp
1522+ 6BBC 56                           ld      d, (hl)
1523+ 6BBD 2B                           dec     hl
1524+ 6BBE 5E                           ld      e, (hl)
1525+ 6BBF 2B                           dec     hl
1526+ 6BC0 D5                           push    de
1527+ 6BC1 56                           ld      d, (hl)
1528+ 6BC2 2B                           dec     hl
1529+ 6BC3 5E                           ld      e, (hl)
1530+ 6BC4 2B                           dec     hl
1531+ 6BC5 D5                           push    de
1532+ 6BC6
1533+ 6BC6              //      d1  |d3  |d2  |d1  |
1534+ 6BC6              //      h l |h l |h l |h l |
1535+ 6BC6              // SP   LHED|LHED|LHED|LHED|
1536+ 6BC6              // SP       +0123|4567|89ab|
1537+ 6BC6
1538+ 6BC6 54                           ld      d, h
1539+ 6BC7 5D                           ld      e, l
1540+ 6BC8 13                           inc     de
1541+ 6BC9 13                           inc     de
1542+ 6BCA 13                           inc     de
1543+ 6BCB 13                           inc     de
1544+ 6BCC C5                           push    bc
1545+ 6BCD 01 0C 00                     ld      bc, $000C
1546+ 6BD0 ED B8                        lddr
1547+ 6BD2 C1                           pop     bc
1548+ 6BD3 D1                           pop     de
1549+ 6BD4 D1                           pop     de
1550+ 6BD5
1551+ 6BD5                              next
1551+ 6BD5 DD E9       >                jp      (ix)
1552+ 6BD7
1553+ 6BD7
1554+ 6BD7              //  ______________________________________________________________________
1555+ 6BD7              //
1556+ 6BD7              // +!           n a --
1557+ 6BD7              // Sums to the content of address a the number n.
1558+ 6BD7              // It is the same of  a @ n + a !
1559+ 6BD7                              New_Def PLUSSTORE, "+!", is_code, is_normal
1559+ 6BD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1559+ 6BD7             >
1559+ 6BD7             >                // dummy db directives used to calculate length of namec
1559+ 6BD7 2B 21       >                db      "+!"
1559+ 6BD9             >len_NFA         defl    $ - temp_NFA
1559+ 6BD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1559+ 6BD7             >
1559+ 6BD7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1559+ 6BD8 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1559+ 6BDA             >                org     $-1                 // alter last byte of Name just above to set
1559+ 6BD9 A1          >                db      {b $} | END_BIT     // msb as name end
1559+ 6BDA             >
1559+ 6BDA AF 6B       >                dw      last_NFA            // Link to previous definition Name
1559+ 6BDC             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1559+ 6BDC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1559+ 6BDC             >                else
1559+ 6BDC DE 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1559+ 6BDE             >                endif           ; ok        // for other definitions it "points" the correct handler
1559+ 6BDE             >                // Use of "; ok" to suppress "warning[fwdref]"
1559+ 6BDE             >
1559+ 6BDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1560+ 6BDE E1                           pop     hl                  // hl is the address
1561+ 6BDF D1                           pop     de                  // de is the number
1562+ 6BE0 7E                           ld      a, (hl)
1563+ 6BE1 83                           add     e
1564+ 6BE2 77                           ld      (hl), a
1565+ 6BE3 23                           inc     hl
1566+ 6BE4 7E                           ld      a, (hl)
1567+ 6BE5 8A                           adc     d
1568+ 6BE6 77                           ld      (hl), a
1569+ 6BE7
1570+ 6BE7                              next
1570+ 6BE7 DD E9       >                jp      (ix)
1571+ 6BE9
1572+ 6BE9              //  ______________________________________________________________________
1573+ 6BE9              //
1574+ 6BE9              // toggle       a n --
1575+ 6BE9              // Complements (xor) the byte at addrress  a  with the model n.
1576+ 6BE9                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1576+ 6BE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1576+ 6BE9             >
1576+ 6BE9             >                // dummy db directives used to calculate length of namec
1576+ 6BE9 54 4F 47 47 >                db      "TOGGLE"
1576+ 6BED 4C 45       >
1576+ 6BEF             >len_NFA         defl    $ - temp_NFA
1576+ 6BEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1576+ 6BE9             >
1576+ 6BE9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1576+ 6BEA 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1576+ 6BEE 4C 45       >
1576+ 6BF0             >                org     $-1                 // alter last byte of Name just above to set
1576+ 6BEF C5          >                db      {b $} | END_BIT     // msb as name end
1576+ 6BF0             >
1576+ 6BF0 D7 6B       >                dw      last_NFA            // Link to previous definition Name
1576+ 6BF2             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1576+ 6BF2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1576+ 6BF2             >                else
1576+ 6BF2 F4 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1576+ 6BF4             >                endif           ; ok        // for other definitions it "points" the correct handler
1576+ 6BF4             >                // Use of "; ok" to suppress "warning[fwdref]"
1576+ 6BF4             >
1576+ 6BF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1577+ 6BF4 D1                           pop     de
1578+ 6BF5 E1                           pop     hl
1579+ 6BF6 7E                           ld      a, (hl)
1580+ 6BF7 AB                           xor     e
1581+ 6BF8 77                           ld      (hl), a
1582+ 6BF9
1583+ 6BF9                              next
1583+ 6BF9 DD E9       >                jp      (ix)
1584+ 6BFB
1585+ 6BFB              //  ______________________________________________________________________
1586+ 6BFB              //
1587+ 6BFB              // @            a -- n
1588+ 6BFB              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1589+ 6BFB                              New_Def FETCH, "@", is_code, is_normal
1589+ 6BFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1589+ 6BFB             >
1589+ 6BFB             >                // dummy db directives used to calculate length of namec
1589+ 6BFB 40          >                db      "@"
1589+ 6BFC             >len_NFA         defl    $ - temp_NFA
1589+ 6BFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1589+ 6BFB             >
1589+ 6BFB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1589+ 6BFC 40          >                db      "@"               // name string in 7-bit ascii, but
1589+ 6BFD             >                org     $-1                 // alter last byte of Name just above to set
1589+ 6BFC C0          >                db      {b $} | END_BIT     // msb as name end
1589+ 6BFD             >
1589+ 6BFD E9 6B       >                dw      last_NFA            // Link to previous definition Name
1589+ 6BFF             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1589+ 6BFF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1589+ 6BFF             >                else
1589+ 6BFF 01 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1589+ 6C01             >                endif           ; ok        // for other definitions it "points" the correct handler
1589+ 6C01             >                // Use of "; ok" to suppress "warning[fwdref]"
1589+ 6C01             >
1589+ 6C01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1590+ 6C01 E1                           pop     hl
1591+ 6C02 5E                           ld      e, (hl)             // low-byte
1592+ 6C03 23                           inc     hl
1593+ 6C04 56                           ld      d, (hl)             // high-byte
1594+ 6C05 D5                           push    de
1595+ 6C06                              next
1595+ 6C06 DD E9       >                jp      (ix)
1596+ 6C08
1597+ 6C08              //  ______________________________________________________________________
1598+ 6C08              //
1599+ 6C08              // !            n a --
1600+ 6C08              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1601+ 6C08                              New_Def STORE, "!", is_code, is_normal
1601+ 6C08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1601+ 6C08             >
1601+ 6C08             >                // dummy db directives used to calculate length of namec
1601+ 6C08 21          >                db      "!"
1601+ 6C09             >len_NFA         defl    $ - temp_NFA
1601+ 6C09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1601+ 6C08             >
1601+ 6C08 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1601+ 6C09 21          >                db      "!"               // name string in 7-bit ascii, but
1601+ 6C0A             >                org     $-1                 // alter last byte of Name just above to set
1601+ 6C09 A1          >                db      {b $} | END_BIT     // msb as name end
1601+ 6C0A             >
1601+ 6C0A FB 6B       >                dw      last_NFA            // Link to previous definition Name
1601+ 6C0C             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1601+ 6C0C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1601+ 6C0C             >                else
1601+ 6C0C 0E 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1601+ 6C0E             >                endif           ; ok        // for other definitions it "points" the correct handler
1601+ 6C0E             >                // Use of "; ok" to suppress "warning[fwdref]"
1601+ 6C0E             >
1601+ 6C0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1602+ 6C0E E1                           pop     hl                  // address
1603+ 6C0F D1                           pop     de                  // < n
1604+ 6C10 73                           ld      (hl), e             // low-byte
1605+ 6C11 23                           inc     hl
1606+ 6C12 72                           ld      (hl), d             // high-byte
1607+ 6C13
1608+ 6C13                              next
1608+ 6C13 DD E9       >                jp      (ix)
1609+ 6C15
1610+ 6C15              //  ______________________________________________________________________
1611+ 6C15              //
1612+ 6C15              // c@           a -- c
1613+ 6C15              // fetch a character n from address a
1614+ 6C15                              New_Def CFETCH, "C@", is_code, is_normal
1614+ 6C15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1614+ 6C15             >
1614+ 6C15             >                // dummy db directives used to calculate length of namec
1614+ 6C15 43 40       >                db      "C@"
1614+ 6C17             >len_NFA         defl    $ - temp_NFA
1614+ 6C17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1614+ 6C15             >
1614+ 6C15 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1614+ 6C16 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1614+ 6C18             >                org     $-1                 // alter last byte of Name just above to set
1614+ 6C17 C0          >                db      {b $} | END_BIT     // msb as name end
1614+ 6C18             >
1614+ 6C18 08 6C       >                dw      last_NFA            // Link to previous definition Name
1614+ 6C1A             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1614+ 6C1A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1614+ 6C1A             >                else
1614+ 6C1A 1C 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1614+ 6C1C             >                endif           ; ok        // for other definitions it "points" the correct handler
1614+ 6C1C             >                // Use of "; ok" to suppress "warning[fwdref]"
1614+ 6C1C             >
1614+ 6C1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1615+ 6C1C E1                           pop     hl
1616+ 6C1D 6E                           ld      l, (hl)             // low-byte
1617+ 6C1E 26 00                        ld      h, 0
1618+ 6C20
1619+ 6C20                              psh1
1619+ 6C20 E5          >                push    hl
1619+ 6C21 DD E9       >                jp      (ix)
1620+ 6C23
1621+ 6C23              //  ______________________________________________________________________
1622+ 6C23              //
1623+ 6C23              // c!           c a --
1624+ 6C23              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1625+ 6C23                              New_Def CSTORE, "C!", is_code, is_normal
1625+ 6C23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1625+ 6C23             >
1625+ 6C23             >                // dummy db directives used to calculate length of namec
1625+ 6C23 43 21       >                db      "C!"
1625+ 6C25             >len_NFA         defl    $ - temp_NFA
1625+ 6C25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1625+ 6C23             >
1625+ 6C23 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1625+ 6C24 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1625+ 6C26             >                org     $-1                 // alter last byte of Name just above to set
1625+ 6C25 A1          >                db      {b $} | END_BIT     // msb as name end
1625+ 6C26             >
1625+ 6C26 15 6C       >                dw      last_NFA            // Link to previous definition Name
1625+ 6C28             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1625+ 6C28 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1625+ 6C28             >                else
1625+ 6C28 2A 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1625+ 6C2A             >                endif           ; ok        // for other definitions it "points" the correct handler
1625+ 6C2A             >                // Use of "; ok" to suppress "warning[fwdref]"
1625+ 6C2A             >
1625+ 6C2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1626+ 6C2A E1                           pop     hl                  // < address
1627+ 6C2B D1                           pop     de
1628+ 6C2C 73                           ld      (hl), e             // low-byte
1629+ 6C2D
1630+ 6C2D                              next
1630+ 6C2D DD E9       >                jp      (ix)
1631+ 6C2F
1632+ 6C2F              //  ______________________________________________________________________
1633+ 6C2F              //
1634+ 6C2F              // 2@           a -- d
1635+ 6C2F              // fetch a 32 bits number d from address a and leaves it on top of the
1636+ 6C2F              // stack as two single numbers, high part as top of the stack.
1637+ 6C2F              // A double number is normally kept in CPU registers as HLDE.
1638+ 6C2F              // On stack a double number is treated as two single numbers
1639+ 6C2F              // where BC is on the top of the stack and HL is the second from top,
1640+ 6C2F              // so the sign of the number can be checked on top of stack
1641+ 6C2F              // and in the stack memory it appears as LHED.
1642+ 6C2F              // Instead, a 32 bits number d is kept in memory as EDLH
1643+ 6C2F              // with the lowest significant word in the lower location
1644+ 6C2F              // and the highest significant word in the higher location.
1645+ 6C2F              // fetch 32 bit number n from address a.
1646+ 6C2F                              New_Def TWO_FETCH, "2@", is_code, is_normal
1646+ 6C2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1646+ 6C2F             >
1646+ 6C2F             >                // dummy db directives used to calculate length of namec
1646+ 6C2F 32 40       >                db      "2@"
1646+ 6C31             >len_NFA         defl    $ - temp_NFA
1646+ 6C31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1646+ 6C2F             >
1646+ 6C2F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1646+ 6C30 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1646+ 6C32             >                org     $-1                 // alter last byte of Name just above to set
1646+ 6C31 C0          >                db      {b $} | END_BIT     // msb as name end
1646+ 6C32             >
1646+ 6C32 23 6C       >                dw      last_NFA            // Link to previous definition Name
1646+ 6C34             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1646+ 6C34 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1646+ 6C34             >                else
1646+ 6C34 36 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1646+ 6C36             >                endif           ; ok        // for other definitions it "points" the correct handler
1646+ 6C36             >                // Use of "; ok" to suppress "warning[fwdref]"
1646+ 6C36             >
1646+ 6C36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1647+ 6C36 E1                           pop     hl                  // address
1648+ 6C37 5E                           ld      e, (hl)             // low-byte
1649+ 6C38 23                           inc     hl
1650+ 6C39 56                           ld      d, (hl)             // high-byte
1651+ 6C3A
1652+ 6C3A 23                           inc     hl
1653+ 6C3B 7E                           ld      a, (hl)             // low-byte
1654+ 6C3C 23                           inc     hl
1655+ 6C3D 66                           ld      h, (hl)             // high-byte
1656+ 6C3E 6F                           ld      l, a
1657+ 6C3F                              psh2
1657+ 6C3F D5          >                push    de
1657+ 6C40 E5          >                push    hl
1657+ 6C41 DD E9       >                jp      (ix)
1658+ 6C43
1659+ 6C43              //  ______________________________________________________________________
1660+ 6C43              //
1661+ 6C43              // 2!           d a --
1662+ 6C43              // stores a 32 bits number d from address a and leaves it on top of the
1663+ 6C43              // stack as two single numbers, high part as top of the stack.
1664+ 6C43              // A double number is normally kept in CPU registers as HLDE.
1665+ 6C43              // On stack a double number is treated as two single numbers
1666+ 6C43              // where BC is on the top of the stack and HL is the second from top,
1667+ 6C43              // so the sign of the number can be checked on top of stack
1668+ 6C43              // and in the stack memory it appears as LHED.
1669+ 6C43              // Instead, a 32 bits number d is kept in memory as EDLH
1670+ 6C43              // with the lowest significant word in the lower location
1671+ 6C43              // and the highest significant word in the higher location.
1672+ 6C43              // fetch 32 bit number n from address a.
1673+ 6C43                              New_Def TWO_STORE, "2!", is_code, is_normal
1673+ 6C43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1673+ 6C43             >
1673+ 6C43             >                // dummy db directives used to calculate length of namec
1673+ 6C43 32 21       >                db      "2!"
1673+ 6C45             >len_NFA         defl    $ - temp_NFA
1673+ 6C45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1673+ 6C43             >
1673+ 6C43 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1673+ 6C44 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1673+ 6C46             >                org     $-1                 // alter last byte of Name just above to set
1673+ 6C45 A1          >                db      {b $} | END_BIT     // msb as name end
1673+ 6C46             >
1673+ 6C46 2F 6C       >                dw      last_NFA            // Link to previous definition Name
1673+ 6C48             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1673+ 6C48 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1673+ 6C48             >                else
1673+ 6C48 4A 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1673+ 6C4A             >                endif           ; ok        // for other definitions it "points" the correct handler
1673+ 6C4A             >                // Use of "; ok" to suppress "warning[fwdref]"
1673+ 6C4A             >
1673+ 6C4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1674+ 6C4A 60                           ld      h, b
1675+ 6C4B 69                           ld      l, c
1676+ 6C4C D1                           pop     de                  // de has address
1677+ 6C4D C1                           pop     bc                  // < high-part
1678+ 6C4E E3                           ex      (sp), hl            // < low-part > Instruction Pointer
1679+ 6C4F EB                           ex      de, hl
1680+ 6C50 73                           ld      (hl), e
1681+ 6C51 23                           inc     hl
1682+ 6C52 72                           ld      (hl), d
1683+ 6C53 23                           inc     hl
1684+ 6C54 71                           ld      (hl), c
1685+ 6C55 23                           inc     hl
1686+ 6C56 70                           ld      (hl), b
1687+ 6C57 C1                           pop     bc                  // Restore Instruction Pointer
1688+ 6C58
1689+ 6C58                              next
1689+ 6C58 DD E9       >                jp      (ix)
1690+ 6C5A
1691+ 6C5A              //  ______________________________________________________________________
1692+ 6C5A              //
1693+ 6C5A              // p@           a -- c
1694+ 6C5A              // Read one byte from port a and leave the result on top of stack
1695+ 6C5A                              New_Def PFETCH, "P@", is_code, is_normal
1695+ 6C5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1695+ 6C5A             >
1695+ 6C5A             >                // dummy db directives used to calculate length of namec
1695+ 6C5A 50 40       >                db      "P@"
1695+ 6C5C             >len_NFA         defl    $ - temp_NFA
1695+ 6C5C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1695+ 6C5A             >
1695+ 6C5A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1695+ 6C5B 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1695+ 6C5D             >                org     $-1                 // alter last byte of Name just above to set
1695+ 6C5C C0          >                db      {b $} | END_BIT     // msb as name end
1695+ 6C5D             >
1695+ 6C5D 43 6C       >                dw      last_NFA            // Link to previous definition Name
1695+ 6C5F             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1695+ 6C5F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1695+ 6C5F             >                else
1695+ 6C5F 61 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1695+ 6C61             >                endif           ; ok        // for other definitions it "points" the correct handler
1695+ 6C61             >                // Use of "; ok" to suppress "warning[fwdref]"
1695+ 6C61             >
1695+ 6C61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1696+ 6C61 50                           ld      d, b
1697+ 6C62 59                           ld      e, c
1698+ 6C63
1699+ 6C63 C1                           pop     bc
1700+ 6C64 26 00                        ld      h, 0
1701+ 6C66 ED 68                        in      l, (c)
1702+ 6C68 42                           ld      b, d
1703+ 6C69 4B                           ld      c, e
1704+ 6C6A                              psh1
1704+ 6C6A E5          >                push    hl
1704+ 6C6B DD E9       >                jp      (ix)
1705+ 6C6D
1706+ 6C6D              //  ______________________________________________________________________
1707+ 6C6D              //
1708+ 6C6D              // p!           c a --
1709+ 6C6D              // Send one byte (top of stack) to port a
1710+ 6C6D                              New_Def PSTORE, "P!", is_code, is_normal
1710+ 6C6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1710+ 6C6D             >
1710+ 6C6D             >                // dummy db directives used to calculate length of namec
1710+ 6C6D 50 21       >                db      "P!"
1710+ 6C6F             >len_NFA         defl    $ - temp_NFA
1710+ 6C6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1710+ 6C6D             >
1710+ 6C6D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1710+ 6C6E 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1710+ 6C70             >                org     $-1                 // alter last byte of Name just above to set
1710+ 6C6F A1          >                db      {b $} | END_BIT     // msb as name end
1710+ 6C70             >
1710+ 6C70 5A 6C       >                dw      last_NFA            // Link to previous definition Name
1710+ 6C72             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1710+ 6C72 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1710+ 6C72             >                else
1710+ 6C72 74 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1710+ 6C74             >                endif           ; ok        // for other definitions it "points" the correct handler
1710+ 6C74             >                // Use of "; ok" to suppress "warning[fwdref]"
1710+ 6C74             >
1710+ 6C74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1711+ 6C74 50                           ld      d, b
1712+ 6C75 59                           ld      e, c
1713+ 6C76
1714+ 6C76 C1                           pop     bc
1715+ 6C77 E1                           pop     hl                  // < c
1716+ 6C78 ED 69                        out     (c), l              // low-byte
1717+ 6C7A 42                           ld      b, d
1718+ 6C7B 4B                           ld      c, e
1719+ 6C7C
1720+ 6C7C                              next
1720+ 6C7C DD E9       >                jp      (ix)
1721+ 6C7E
1722+ 6C7E
1723+ 6C7E              //  ______________________________________________________________________
1724+ 6C7E              //
1725+ 6C7E              // 2*           n1 -- n2
1726+ 6C7E              // doubles the number at top of stack
1727+ 6C7E                              New_Def TWO_MUL, "2*", is_code, is_normal
1727+ 6C7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1727+ 6C7E             >
1727+ 6C7E             >                // dummy db directives used to calculate length of namec
1727+ 6C7E 32 2A       >                db      "2*"
1727+ 6C80             >len_NFA         defl    $ - temp_NFA
1727+ 6C80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1727+ 6C7E             >
1727+ 6C7E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1727+ 6C7F 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1727+ 6C81             >                org     $-1                 // alter last byte of Name just above to set
1727+ 6C80 AA          >                db      {b $} | END_BIT     // msb as name end
1727+ 6C81             >
1727+ 6C81 6D 6C       >                dw      last_NFA            // Link to previous definition Name
1727+ 6C83             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1727+ 6C83 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1727+ 6C83             >                else
1727+ 6C83 85 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1727+ 6C85             >                endif           ; ok        // for other definitions it "points" the correct handler
1727+ 6C85             >                // Use of "; ok" to suppress "warning[fwdref]"
1727+ 6C85             >
1727+ 6C85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1728+ 6C85              Two_Mul_Ptr:
1729+ 6C85 E1                           pop     hl
1730+ 6C86 29                           add     hl, hl
1731+ 6C87
1732+ 6C87                              psh1
1732+ 6C87 E5          >                push    hl
1732+ 6C88 DD E9       >                jp      (ix)
1733+ 6C8A
1734+ 6C8A              //  ______________________________________________________________________
1735+ 6C8A              //
1736+ 6C8A              // 2/           n1 -- n2
1737+ 6C8A              // halves the top of stack, sign is unchanged
1738+ 6C8A                              New_Def TWO_DIV, "2/", is_code, is_normal
1738+ 6C8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1738+ 6C8A             >
1738+ 6C8A             >                // dummy db directives used to calculate length of namec
1738+ 6C8A 32 2F       >                db      "2/"
1738+ 6C8C             >len_NFA         defl    $ - temp_NFA
1738+ 6C8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1738+ 6C8A             >
1738+ 6C8A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1738+ 6C8B 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1738+ 6C8D             >                org     $-1                 // alter last byte of Name just above to set
1738+ 6C8C AF          >                db      {b $} | END_BIT     // msb as name end
1738+ 6C8D             >
1738+ 6C8D 7E 6C       >                dw      last_NFA            // Link to previous definition Name
1738+ 6C8F             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1738+ 6C8F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1738+ 6C8F             >                else
1738+ 6C8F 91 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1738+ 6C91             >                endif           ; ok        // for other definitions it "points" the correct handler
1738+ 6C91             >                // Use of "; ok" to suppress "warning[fwdref]"
1738+ 6C91             >
1738+ 6C91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1739+ 6C91 E1                           pop     hl
1740+ 6C92 CB 2C                        sra     h
1741+ 6C94 CB 1D                        rr      l
1742+ 6C96
1743+ 6C96                              psh1
1743+ 6C96 E5          >                push    hl
1743+ 6C97 DD E9       >                jp      (ix)
1744+ 6C99
1745+ 6C99              //  ______________________________________________________________________
1746+ 6C99              //
1747+ 6C99              // lshift       n1 u -- n2
1748+ 6C99              // bit left shift of u bits
1749+ 6C99                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1749+ 6C99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1749+ 6C99             >
1749+ 6C99             >                // dummy db directives used to calculate length of namec
1749+ 6C99 4C 53 48 49 >                db      "LSHIFT"
1749+ 6C9D 46 54       >
1749+ 6C9F             >len_NFA         defl    $ - temp_NFA
1749+ 6C9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1749+ 6C99             >
1749+ 6C99 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1749+ 6C9A 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1749+ 6C9E 46 54       >
1749+ 6CA0             >                org     $-1                 // alter last byte of Name just above to set
1749+ 6C9F D4          >                db      {b $} | END_BIT     // msb as name end
1749+ 6CA0             >
1749+ 6CA0 8A 6C       >                dw      last_NFA            // Link to previous definition Name
1749+ 6CA2             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1749+ 6CA2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1749+ 6CA2             >                else
1749+ 6CA2 A4 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1749+ 6CA4             >                endif           ; ok        // for other definitions it "points" the correct handler
1749+ 6CA4             >                // Use of "; ok" to suppress "warning[fwdref]"
1749+ 6CA4             >
1749+ 6CA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1750+ 6CA4 D1                           pop     de
1751+ 6CA5
1752+ 6CA5 E1                           pop     hl
1753+ 6CA6 7B                           ld      a, e
1754+ 6CA7 B7                           or      a
1755+ 6CA8 28 04                        jr      z, Lshift_Zero
1756+ 6CAA              Lshift_Loop:
1757+ 6CAA 29                                   add     hl, hl
1758+ 6CAB 3D                                   dec     a
1759+ 6CAC 20 FC                            jr      nz, Lshift_Loop
1760+ 6CAE              Lshift_Zero:
1761+ 6CAE
1762+ 6CAE
1763+ 6CAE                              psh1
1763+ 6CAE E5          >                push    hl
1763+ 6CAF DD E9       >                jp      (ix)
1764+ 6CB1
1765+ 6CB1              //  ______________________________________________________________________
1766+ 6CB1              //
1767+ 6CB1              // rshift       n1 u -- n2
1768+ 6CB1              // bit right shift of u bits
1769+ 6CB1                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1769+ 6CB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1769+ 6CB1             >
1769+ 6CB1             >                // dummy db directives used to calculate length of namec
1769+ 6CB1 52 53 48 49 >                db      "RSHIFT"
1769+ 6CB5 46 54       >
1769+ 6CB7             >len_NFA         defl    $ - temp_NFA
1769+ 6CB7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1769+ 6CB1             >
1769+ 6CB1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1769+ 6CB2 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1769+ 6CB6 46 54       >
1769+ 6CB8             >                org     $-1                 // alter last byte of Name just above to set
1769+ 6CB7 D4          >                db      {b $} | END_BIT     // msb as name end
1769+ 6CB8             >
1769+ 6CB8 99 6C       >                dw      last_NFA            // Link to previous definition Name
1769+ 6CBA             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1769+ 6CBA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1769+ 6CBA             >                else
1769+ 6CBA BC 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1769+ 6CBC             >                endif           ; ok        // for other definitions it "points" the correct handler
1769+ 6CBC             >                // Use of "; ok" to suppress "warning[fwdref]"
1769+ 6CBC             >
1769+ 6CBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1770+ 6CBC D1                           pop     de
1771+ 6CBD
1772+ 6CBD E1                           pop     hl
1773+ 6CBE 7B                           ld      a, e
1774+ 6CBF B7                           or      a
1775+ 6CC0 28 07                        jr      z, Rshift_Zero
1776+ 6CC2              Rshift_Loop:
1777+ 6CC2 CB 3C                                srl     h
1778+ 6CC4 CB 1D                                rr      l
1779+ 6CC6 3D                                   dec     a
1780+ 6CC7 20 F9                            jr      nz, Rshift_Loop
1781+ 6CC9              Rshift_Zero:
1782+ 6CC9
1783+ 6CC9
1784+ 6CC9                              psh1
1784+ 6CC9 E5          >                push    hl
1784+ 6CCA DD E9       >                jp      (ix)
1785+ 6CCC
1786+ 6CCC              //  ______________________________________________________________________
1787+ 6CCC              //
1788+ 6CCC              // cells        n1 -- n2
1789+ 6CCC              // decrement by 2 top of stack
1790+ 6CCC                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1790+ 6CCC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1790+ 6CCC             >
1790+ 6CCC             >                // dummy db directives used to calculate length of namec
1790+ 6CCC 43 45 4C 4C >                db      "CELLS"
1790+ 6CD0 53          >
1790+ 6CD1             >len_NFA         defl    $ - temp_NFA
1790+ 6CD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1790+ 6CCC             >
1790+ 6CCC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1790+ 6CCD 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1790+ 6CD1 53          >
1790+ 6CD2             >                org     $-1                 // alter last byte of Name just above to set
1790+ 6CD1 D3          >                db      {b $} | END_BIT     // msb as name end
1790+ 6CD2             >
1790+ 6CD2 B1 6C       >                dw      last_NFA            // Link to previous definition Name
1790+ 6CD4             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1790+ 6CD4 85 6C       >                dw      Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1790+ 6CD6             >                else
1790+ 6CD6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1790+ 6CD6             >                endif           ; ok        // for other definitions it "points" the correct handler
1790+ 6CD6             >                // Use of "; ok" to suppress "warning[fwdref]"
1790+ 6CD6             >
1790+ 6CD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1791+ 6CD6
1792+ 6CD6
1793+ 6CD6              //  ______________________________________________________________________
1794+ 6CD6
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
 109  6CD6                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
   1+ 6CD6              //  ______________________________________________________________________
   2+ 6CD6              //
   3+ 6CD6              //  L1.asm
   4+ 6CD6              //
   5+ 6CD6              //  Level-1 definitions and derivate
   6+ 6CD6              //  ______________________________________________________________________
   7+ 6CD6
   8+ 6CD6              //  ______________________________________________________________________
   9+ 6CD6              //
  10+ 6CD6              // :            -- cccc     ( compile time )
  11+ 6CD6              //              i*x -- j*x  ( run time )
  12+ 6CD6              // Colon Definition
  13+ 6CD6                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6CD6             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6CD6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6CD6             >
  13+ 6CD6             >                // dummy db directives used to calculate length of namec
  13+ 6CD6 3A          >                db      ":"
  13+ 6CD7             >len_NFA         defl    $ - temp_NFA
  13+ 6CD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6CD6             >
  13+ 6CD6 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6CD7 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6CD8             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6CD7 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6CD8             >
  13+ 6CD8 CC 6C       >                dw      last_NFA            // Link to previous definition Name
  13+ 6CDA             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6CDA F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6CDC             >                else
  13+ 6CDC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 6CDC             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6CDC             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6CDC             >
  13+ 6CDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6CDC
  15+ 6CDC 3A 71                        dw      QEXEC                   // ?exec
  16+ 6CDE F5 70                        dw      STORE_CSP               // !csp
  17+ 6CE0 AB 6E FF 6B                  dw      CURRENT, FETCH          // current @
  18+ 6CE4 9E 6E 0C 6C                  dw      CONTEXT, STORE          // context !
  19+ 6CE8 D0 76                        dw      CREATE                  // create  ( forward )
  20+ 6CEA D4 71                        dw      SMUDGE                  // dmudge
  21+ 6CEC BF 71                        dw      SQUARED_CLOSE           // ]
  22+ 6CEE 2A 72                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6CF0                                                              // ... immediate
  24+ 6CF0              Enter_Ptr:
  25+ 6CF0                              // via call coded in CFA
  26+ 6CF0                              ldhlrp
  26+ 6CF0 2A 30 64    >                ld      hl,(RP_Pointer)
  27+ 6CF3 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6CF4 70                           ld      (hl), b
  29+ 6CF5 2B                           dec     hl
  30+ 6CF6 71                           ld      (hl), c
  31+ 6CF7                              ldrphl
  31+ 6CF7 22 30 64    >                ld      (RP_Pointer),hl
  32+ 6CFA 13                           inc     de
  33+ 6CFB 4B                           ld      c, e
  34+ 6CFC 42                           ld      b, d
  35+ 6CFD                              next
  35+ 6CFD DD E9       >                jp      (ix)
  36+ 6CFF
  37+ 6CFF              //  ______________________________________________________________________
  38+ 6CFF              //
  39+ 6CFF              // ;            --
  40+ 6CFF              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6CFF                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6CFF             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6CFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6CFF             >
  41+ 6CFF             >                // dummy db directives used to calculate length of namec
  41+ 6CFF 3B          >                db      ";"
  41+ 6D00             >len_NFA         defl    $ - temp_NFA
  41+ 6D00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6CFF             >
  41+ 6CFF C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6D00 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6D01             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6D00 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6D01             >
  41+ 6D01 D6 6C       >                dw      last_NFA            // Link to previous definition Name
  41+ 6D03             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6D03 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6D05             >                else
  41+ 6D05 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  41+ 6D05             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6D05             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6D05             >
  41+ 6D05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6D05
  43+ 6D05 64 71                        dw      QCSP                    // ?csp
  44+ 6D07 9B 71 BD 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6D0B D4 71                        dw      SMUDGE                  // smudge
  46+ 6D0D B1 71                        dw      SQUARED_OPEN            // [
  47+ 6D0F BD 69                        dw      EXIT                    // ; immediate
  48+ 6D11
  49+ 6D11              //  ______________________________________________________________________
  50+ 6D11              //
  51+ 6D11              // noop         --
  52+ 6D11
  53+ 6D11                              Colon_Def NOOP, "NOOP", is_normal
  53+ 6D11             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 6D11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6D11             >
  53+ 6D11             >                // dummy db directives used to calculate length of namec
  53+ 6D11 4E 4F 4F 50 >                db      "NOOP"
  53+ 6D15             >len_NFA         defl    $ - temp_NFA
  53+ 6D15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6D11             >
  53+ 6D11 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6D12 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6D16             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6D15 D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6D16             >
  53+ 6D16 FF 6C       >                dw      last_NFA            // Link to previous definition Name
  53+ 6D18             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6D18 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 6D1A             >                else
  53+ 6D1A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  53+ 6D1A             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6D1A             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6D1A             >
  53+ 6D1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6D1A BD 69                        dw      EXIT
  55+ 6D1C
  56+ 6D1C              //  ______________________________________________________________________
  57+ 6D1C              //
  58+ 6D1C              // constant     n -- cccc     ( compile time )
  59+ 6D1C              //              -- n          ( run time )
  60+ 6D1C              // Constant definition.
  61+ 6D1C                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6D1C             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6D1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6D1C             >
  61+ 6D1C             >                // dummy db directives used to calculate length of namec
  61+ 6D1C 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6D20 54 41 4E 54 >
  61+ 6D24             >len_NFA         defl    $ - temp_NFA
  61+ 6D24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6D1C             >
  61+ 6D1C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6D1D 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6D21 54 41 4E 54 >
  61+ 6D25             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6D24 D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6D25             >
  61+ 6D25 11 6D       >                dw      last_NFA            // Link to previous definition Name
  61+ 6D27             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6D27 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6D29             >                else
  61+ 6D29 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  61+ 6D29             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6D29             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6D29             >
  61+ 6D29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6D29
  63+ 6D29 D0 76                        dw      CREATE                  // create
  64+ 6D2B 59 6F                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6D2D 2A 72                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6D2F              Constant_Ptr:
  67+ 6D2F
  68+ 6D2F 13                           inc     de
  69+ 6D30 EB                           ex      de, hl
  70+ 6D31
  71+ 6D31 5E                           ld      e, (hl)
  72+ 6D32 23                           inc     hl
  73+ 6D33 56                           ld      d, (hl)
  74+ 6D34 D5                           push    de
  75+ 6D35                              next
  75+ 6D35 DD E9       >                jp      (ix)
  76+ 6D37
  77+ 6D37              //  ______________________________________________________________________
  78+ 6D37              //
  79+ 6D37              // variable     n -- cccc     ( compile time )
  80+ 6D37              //              -- a          ( run time )
  81+ 6D37              // Variable definition, n is the initial value.
  82+ 6D37                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6D37             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6D37             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6D37             >
  82+ 6D37             >                // dummy db directives used to calculate length of namec
  82+ 6D37 56 41 52 49 >                db      "VARIABLE"
  82+ 6D3B 41 42 4C 45 >
  82+ 6D3F             >len_NFA         defl    $ - temp_NFA
  82+ 6D3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6D37             >
  82+ 6D37 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6D38 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6D3C 41 42 4C 45 >
  82+ 6D40             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6D3F C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6D40             >
  82+ 6D40 1C 6D       >                dw      last_NFA            // Link to previous definition Name
  82+ 6D42             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6D42 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6D44             >                else
  82+ 6D44 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  82+ 6D44             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6D44             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6D44             >
  82+ 6D44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6D44
  84+ 6D44 27 6D                        dw      CONSTANT                // constant
  85+ 6D46 2A 72                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6D48              Variable_Ptr:
  87+ 6D48
  88+ 6D48 13                           inc     de
  89+ 6D49 D5                           push    de                  // balance TOS before overwrite it
  90+ 6D4A
  91+ 6D4A                              next
  91+ 6D4A DD E9       >                jp      (ix)
  92+ 6D4C
  93+ 6D4C              //  ______________________________________________________________________
  94+ 6D4C              //
  95+ 6D4C              // user         b -- cccc     ( compile time )
  96+ 6D4C              //              -- a          ( run time )
  97+ 6D4C              // User variable definition
  98+ 6D4C                              Colon_Def USER, "USER", is_normal
  98+ 6D4C             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6D4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6D4C             >
  98+ 6D4C             >                // dummy db directives used to calculate length of namec
  98+ 6D4C 55 53 45 52 >                db      "USER"
  98+ 6D50             >len_NFA         defl    $ - temp_NFA
  98+ 6D50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6D4C             >
  98+ 6D4C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6D4D 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6D51             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6D50 D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6D51             >
  98+ 6D51 37 6D       >                dw      last_NFA            // Link to previous definition Name
  98+ 6D53             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6D53 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6D55             >                else
  98+ 6D55 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  98+ 6D55             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6D55             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6D55             >
  98+ 6D55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6D55
 100+ 6D55 D0 76                        dw      CREATE                  // create
 101+ 6D57 6A 6F                        dw      CCOMMA                  // c,
 102+ 6D59 2A 72                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6D5B
 104+ 6D5B
 105+ 6D5B              User_Ptr:
 106+ 6D5B                              // via call coded in CFA
 107+ 6D5B 13                           inc     de
 108+ 6D5C EB                           ex      de, hl
 109+ 6D5D 5E                           ld      e, (hl)
 110+ 6D5E 16 00                        ld      d, 0
 111+ 6D60 2A 2E 64                     ld      hl, (USER_Pointer)
 112+ 6D63 19                           add     hl, de
 113+ 6D64
 114+ 6D64                              psh1
 114+ 6D64 E5          >                push    hl
 114+ 6D65 DD E9       >                jp      (ix)
 115+ 6D67
 116+ 6D67              //  ______________________________________________________________________
 117+ 6D67              //
 118+ 6D67                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6D67             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6D67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6D67             >
 118+ 6D67             >                // dummy db directives used to calculate length of namec
 118+ 6D67 30          >                db      "0"
 118+ 6D68             >len_NFA         defl    $ - temp_NFA
 118+ 6D68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6D67             >
 118+ 6D67 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6D68 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6D69             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6D68 B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6D69             >
 118+ 6D69 4C 6D       >                dw      last_NFA            // Link to previous definition Name
 118+ 6D6B             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6D6B 2F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6D6D             >                else
 118+ 6D6D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 118+ 6D6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6D6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6D6D             >
 118+ 6D6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6D6D 00 00       >                dw      0
 119+ 6D6F                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6D6F             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6D6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6D6F             >
 119+ 6D6F             >                // dummy db directives used to calculate length of namec
 119+ 6D6F 31          >                db      "1"
 119+ 6D70             >len_NFA         defl    $ - temp_NFA
 119+ 6D70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6D6F             >
 119+ 6D6F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6D70 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6D71             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6D70 B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6D71             >
 119+ 6D71 67 6D       >                dw      last_NFA            // Link to previous definition Name
 119+ 6D73             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6D73 2F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6D75             >                else
 119+ 6D75 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 119+ 6D75             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6D75             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6D75             >
 119+ 6D75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6D75 01 00       >                dw      1
 120+ 6D77                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6D77             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6D77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6D77             >
 120+ 6D77             >                // dummy db directives used to calculate length of namec
 120+ 6D77 32          >                db      "2"
 120+ 6D78             >len_NFA         defl    $ - temp_NFA
 120+ 6D78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6D77             >
 120+ 6D77 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6D78 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6D79             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6D78 B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6D79             >
 120+ 6D79 6F 6D       >                dw      last_NFA            // Link to previous definition Name
 120+ 6D7B             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6D7B 2F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6D7D             >                else
 120+ 6D7D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 120+ 6D7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6D7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6D7D             >
 120+ 6D7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6D7D 02 00       >                dw      2
 121+ 6D7F                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6D7F             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6D7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6D7F             >
 121+ 6D7F             >                // dummy db directives used to calculate length of namec
 121+ 6D7F 33          >                db      "3"
 121+ 6D80             >len_NFA         defl    $ - temp_NFA
 121+ 6D80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6D7F             >
 121+ 6D7F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6D80 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6D81             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6D80 B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6D81             >
 121+ 6D81 77 6D       >                dw      last_NFA            // Link to previous definition Name
 121+ 6D83             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6D83 2F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6D85             >                else
 121+ 6D85 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 6D85             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6D85             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6D85             >
 121+ 6D85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6D85 03 00       >                dw      3
 122+ 6D87                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6D87             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6D87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6D87             >
 122+ 6D87             >                // dummy db directives used to calculate length of namec
 122+ 6D87 2D 31       >                db      "-1"
 122+ 6D89             >len_NFA         defl    $ - temp_NFA
 122+ 6D89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6D87             >
 122+ 6D87 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6D88 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6D8A             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6D89 B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6D8A             >
 122+ 6D8A 7F 6D       >                dw      last_NFA            // Link to previous definition Name
 122+ 6D8C             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6D8C 2F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6D8E             >                else
 122+ 6D8E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 6D8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6D8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6D8E             >
 122+ 6D8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6D8E FF FF       >                dw      -1
 123+ 6D90                              Constant_Def BL         ,   "BL"    , $20
 123+ 6D90             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6D90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6D90             >
 123+ 6D90             >                // dummy db directives used to calculate length of namec
 123+ 6D90 42 4C       >                db      "BL"
 123+ 6D92             >len_NFA         defl    $ - temp_NFA
 123+ 6D92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6D90             >
 123+ 6D90 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6D91 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6D93             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6D92 CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6D93             >
 123+ 6D93 87 6D       >                dw      last_NFA            // Link to previous definition Name
 123+ 6D95             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6D95 2F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6D97             >                else
 123+ 6D97 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 123+ 6D97             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6D97             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6D97             >
 123+ 6D97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6D97 20 00       >                dw      $20
 124+ 6D99                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6D99             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6D99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6D99             >
 124+ 6D99             >                // dummy db directives used to calculate length of namec
 124+ 6D99 43 2F 4C    >                db      "C/L"
 124+ 6D9C             >len_NFA         defl    $ - temp_NFA
 124+ 6D9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6D99             >
 124+ 6D99 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6D9A 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6D9D             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6D9C CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6D9D             >
 124+ 6D9D 90 6D       >                dw      last_NFA            // Link to previous definition Name
 124+ 6D9F             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6D9F 2F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6DA1             >                else
 124+ 6DA1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 124+ 6DA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6DA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6DA1             >
 124+ 6DA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6DA1 40 00       >                dw      64
 125+ 6DA3                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6DA3             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6DA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6DA3             >
 125+ 6DA3             >                // dummy db directives used to calculate length of namec
 125+ 6DA3 42 2F 42 55 >                db      "B/BUF"
 125+ 6DA7 46          >
 125+ 6DA8             >len_NFA         defl    $ - temp_NFA
 125+ 6DA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6DA3             >
 125+ 6DA3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6DA4 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6DA8 46          >
 125+ 6DA9             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6DA8 C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6DA9             >
 125+ 6DA9 99 6D       >                dw      last_NFA            // Link to previous definition Name
 125+ 6DAB             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6DAB 2F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6DAD             >                else
 125+ 6DAD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 125+ 6DAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6DAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6DAD             >
 125+ 6DAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6DAD 00 02       >                dw      512
 126+ 6DAF                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6DAF             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6DAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6DAF             >
 126+ 6DAF             >                // dummy db directives used to calculate length of namec
 126+ 6DAF 42 2F 53 43 >                db      "B/SCR"
 126+ 6DB3 52          >
 126+ 6DB4             >len_NFA         defl    $ - temp_NFA
 126+ 6DB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6DAF             >
 126+ 6DAF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6DB0 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6DB4 52          >
 126+ 6DB5             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6DB4 D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6DB5             >
 126+ 6DB5 A3 6D       >                dw      last_NFA            // Link to previous definition Name
 126+ 6DB7             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6DB7 2F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6DB9             >                else
 126+ 6DB9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6DB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6DB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6DB9             >
 126+ 6DB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6DB9 02 00       >                dw      2
 127+ 6DBB                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6DBB             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6DBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6DBB             >
 127+ 6DBB             >                // dummy db directives used to calculate length of namec
 127+ 6DBB 4C 2F 53 43 >                db      "L/SCR"
 127+ 6DBF 52          >
 127+ 6DC0             >len_NFA         defl    $ - temp_NFA
 127+ 6DC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6DBB             >
 127+ 6DBB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6DBC 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6DC0 52          >
 127+ 6DC1             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6DC0 D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6DC1             >
 127+ 6DC1 AF 6D       >                dw      last_NFA            // Link to previous definition Name
 127+ 6DC3             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6DC3 2F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6DC5             >                else
 127+ 6DC5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 6DC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6DC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6DC5             >
 127+ 6DC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6DC5 10 00       >                dw      16
 128+ 6DC7
 129+ 6DC7              //  ______________________________________________________________________
 130+ 6DC7              //
 131+ 6DC7              // +origin         --
 132+ 6DC7                              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 132+ 6DC7             >                New_Def  PLUS_ORIGIN, "+ORIGIN", Enter_Ptr, is_normal ; ok
 132+ 6DC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 6DC7             >
 132+ 6DC7             >                // dummy db directives used to calculate length of namec
 132+ 6DC7 2B 4F 52 49 >                db      "+ORIGIN"
 132+ 6DCB 47 49 4E    >
 132+ 6DCE             >len_NFA         defl    $ - temp_NFA
 132+ 6DCE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 6DC7             >
 132+ 6DC7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 6DC8 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 132+ 6DCC 47 49 4E    >
 132+ 6DCF             >                org     $-1                 // alter last byte of Name just above to set
 132+ 6DCE CE          >                db      {b $} | END_BIT     // msb as name end
 132+ 6DCF             >
 132+ 6DCF BB 6D       >                dw      last_NFA            // Link to previous definition Name
 132+ 6DD1             >PLUS_ORIGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 6DD1 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 132+ 6DD3             >                else
 132+ 6DD3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 132+ 6DD3             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 6DD3             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 6DD3             >
 132+ 6DD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 6DD3 43 64 00 64                  dw      LIT, Cold_origin        // [ hex 6400 ] literal
 134+ 6DD7 56 6A                        dw      PLUS                    // +
 135+ 6DD9 BD 69                        dw      EXIT                    // ;
 136+ 6DDB
 137+ 6DDB              //  ______________________________________________________________________
 138+ 6DDB              //
 139+ 6DDB                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 139+ 6DDB             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 139+ 6DDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 6DDB             >
 139+ 6DDB             >                // dummy db directives used to calculate length of namec
 139+ 6DDB 28 4E 45 58 >                db      "(NEXT)"
 139+ 6DDF 54 29       >
 139+ 6DE1             >len_NFA         defl    $ - temp_NFA
 139+ 6DE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 6DDB             >
 139+ 6DDB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 6DDC 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 139+ 6DE0 54 29       >
 139+ 6DE2             >                org     $-1                 // alter last byte of Name just above to set
 139+ 6DE1 A9          >                db      {b $} | END_BIT     // msb as name end
 139+ 6DE2             >
 139+ 6DE2 C7 6D       >                dw      last_NFA            // Link to previous definition Name
 139+ 6DE4             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 6DE4 2F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 139+ 6DE6             >                else
 139+ 6DE6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 139+ 6DE6             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 6DE6             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 6DE6             >
 139+ 6DE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6DE6 32 64       >                dw      Next_Ptr
 140+ 6DE8
 141+ 6DE8              //  ______________________________________________________________________
 142+ 6DE8              //
 143+ 6DE8
 144+ 6DE8                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 144+ 6DE8             >                New_Def  S0, "S0", User_Ptr, is_normal
 144+ 6DE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 6DE8             >
 144+ 6DE8             >                // dummy db directives used to calculate length of namec
 144+ 6DE8 53 30       >                db      "S0"
 144+ 6DEA             >len_NFA         defl    $ - temp_NFA
 144+ 6DEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 6DE8             >
 144+ 6DE8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 6DE9 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 144+ 6DEB             >                org     $-1                 // alter last byte of Name just above to set
 144+ 6DEA B0          >                db      {b $} | END_BIT     // msb as name end
 144+ 6DEB             >
 144+ 6DEB DB 6D       >                dw      last_NFA            // Link to previous definition Name
 144+ 6DED             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 6DED 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 144+ 6DEF             >                else
 144+ 6DEF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 6DEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 6DEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 6DEF             >
 144+ 6DEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 6DEF 06          >                db      06
 145+ 6DF0                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 145+ 6DF0             >                New_Def  R0, "R0", User_Ptr, is_normal
 145+ 6DF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 145+ 6DF0             >
 145+ 6DF0             >                // dummy db directives used to calculate length of namec
 145+ 6DF0 52 30       >                db      "R0"
 145+ 6DF2             >len_NFA         defl    $ - temp_NFA
 145+ 6DF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 145+ 6DF0             >
 145+ 6DF0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 145+ 6DF1 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 145+ 6DF3             >                org     $-1                 // alter last byte of Name just above to set
 145+ 6DF2 B0          >                db      {b $} | END_BIT     // msb as name end
 145+ 6DF3             >
 145+ 6DF3 E8 6D       >                dw      last_NFA            // Link to previous definition Name
 145+ 6DF5             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 145+ 6DF5 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 145+ 6DF7             >                else
 145+ 6DF7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 145+ 6DF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 145+ 6DF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 145+ 6DF7             >
 145+ 6DF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 6DF7 08          >                db      08
 146+ 6DF8                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 146+ 6DF8             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 146+ 6DF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 6DF8             >
 146+ 6DF8             >                // dummy db directives used to calculate length of namec
 146+ 6DF8 54 49 42    >                db      "TIB"
 146+ 6DFB             >len_NFA         defl    $ - temp_NFA
 146+ 6DFB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 6DF8             >
 146+ 6DF8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 6DF9 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 146+ 6DFC             >                org     $-1                 // alter last byte of Name just above to set
 146+ 6DFB C2          >                db      {b $} | END_BIT     // msb as name end
 146+ 6DFC             >
 146+ 6DFC F0 6D       >                dw      last_NFA            // Link to previous definition Name
 146+ 6DFE             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 6DFE 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 146+ 6E00             >                else
 146+ 6E00 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 146+ 6E00             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 6E00             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 6E00             >
 146+ 6E00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 6E00 0A          >                db      10
 147+ 6E01                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 147+ 6E01             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 147+ 6E01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147+ 6E01             >
 147+ 6E01             >                // dummy db directives used to calculate length of namec
 147+ 6E01 57 49 44 54 >                db      "WIDTH"
 147+ 6E05 48          >
 147+ 6E06             >len_NFA         defl    $ - temp_NFA
 147+ 6E06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147+ 6E01             >
 147+ 6E01 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147+ 6E02 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 147+ 6E06 48          >
 147+ 6E07             >                org     $-1                 // alter last byte of Name just above to set
 147+ 6E06 C8          >                db      {b $} | END_BIT     // msb as name end
 147+ 6E07             >
 147+ 6E07 F8 6D       >                dw      last_NFA            // Link to previous definition Name
 147+ 6E09             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 147+ 6E09 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 147+ 6E0B             >                else
 147+ 6E0B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 147+ 6E0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 147+ 6E0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 147+ 6E0B             >
 147+ 6E0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 147+ 6E0B 0C          >                db      12
 148+ 6E0C                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 148+ 6E0C             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 148+ 6E0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 148+ 6E0C             >
 148+ 6E0C             >                // dummy db directives used to calculate length of namec
 148+ 6E0C 57 41 52 4E >                db      "WARNING"
 148+ 6E10 49 4E 47    >
 148+ 6E13             >len_NFA         defl    $ - temp_NFA
 148+ 6E13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 148+ 6E0C             >
 148+ 6E0C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 148+ 6E0D 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 148+ 6E11 49 4E 47    >
 148+ 6E14             >                org     $-1                 // alter last byte of Name just above to set
 148+ 6E13 C7          >                db      {b $} | END_BIT     // msb as name end
 148+ 6E14             >
 148+ 6E14 01 6E       >                dw      last_NFA            // Link to previous definition Name
 148+ 6E16             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 148+ 6E16 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 148+ 6E18             >                else
 148+ 6E18 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 148+ 6E18             >                endif           ; ok        // for other definitions it "points" the correct handler
 148+ 6E18             >                // Use of "; ok" to suppress "warning[fwdref]"
 148+ 6E18             >
 148+ 6E18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 148+ 6E18 0E          >                db      14
 149+ 6E19                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 149+ 6E19             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 149+ 6E19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 149+ 6E19             >
 149+ 6E19             >                // dummy db directives used to calculate length of namec
 149+ 6E19 46 45 4E 43 >                db      "FENCE"
 149+ 6E1D 45          >
 149+ 6E1E             >len_NFA         defl    $ - temp_NFA
 149+ 6E1E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 149+ 6E19             >
 149+ 6E19 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 149+ 6E1A 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 149+ 6E1E 45          >
 149+ 6E1F             >                org     $-1                 // alter last byte of Name just above to set
 149+ 6E1E C5          >                db      {b $} | END_BIT     // msb as name end
 149+ 6E1F             >
 149+ 6E1F 0C 6E       >                dw      last_NFA            // Link to previous definition Name
 149+ 6E21             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 149+ 6E21 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 149+ 6E23             >                else
 149+ 6E23 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 149+ 6E23             >                endif           ; ok        // for other definitions it "points" the correct handler
 149+ 6E23             >                // Use of "; ok" to suppress "warning[fwdref]"
 149+ 6E23             >
 149+ 6E23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 149+ 6E23 10          >                db      16
 150+ 6E24                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 150+ 6E24             >                New_Def  DP, "DP", User_Ptr, is_normal
 150+ 6E24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ 6E24             >
 150+ 6E24             >                // dummy db directives used to calculate length of namec
 150+ 6E24 44 50       >                db      "DP"
 150+ 6E26             >len_NFA         defl    $ - temp_NFA
 150+ 6E26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ 6E24             >
 150+ 6E24 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ 6E25 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 150+ 6E27             >                org     $-1                 // alter last byte of Name just above to set
 150+ 6E26 D0          >                db      {b $} | END_BIT     // msb as name end
 150+ 6E27             >
 150+ 6E27 19 6E       >                dw      last_NFA            // Link to previous definition Name
 150+ 6E29             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6E29 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 150+ 6E2B             >                else
 150+ 6E2B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 150+ 6E2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6E2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6E2B             >
 150+ 6E2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6E2B 12          >                db      18
 151+ 6E2C                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 151+ 6E2C             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 151+ 6E2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6E2C             >
 151+ 6E2C             >                // dummy db directives used to calculate length of namec
 151+ 6E2C 56 4F 43 2D >                db      "VOC-LINK"
 151+ 6E30 4C 49 4E 4B >
 151+ 6E34             >len_NFA         defl    $ - temp_NFA
 151+ 6E34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6E2C             >
 151+ 6E2C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6E2D 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 151+ 6E31 4C 49 4E 4B >
 151+ 6E35             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6E34 CB          >                db      {b $} | END_BIT     // msb as name end
 151+ 6E35             >
 151+ 6E35 24 6E       >                dw      last_NFA            // Link to previous definition Name
 151+ 6E37             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6E37 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6E39             >                else
 151+ 6E39 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 6E39             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6E39             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6E39             >
 151+ 6E39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6E39 14          >                db      20
 152+ 6E3A                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 152+ 6E3A             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 152+ 6E3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6E3A             >
 152+ 6E3A             >                // dummy db directives used to calculate length of namec
 152+ 6E3A 46 49 52 53 >                db      "FIRST"
 152+ 6E3E 54          >
 152+ 6E3F             >len_NFA         defl    $ - temp_NFA
 152+ 6E3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6E3A             >
 152+ 6E3A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6E3B 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 152+ 6E3F 54          >
 152+ 6E40             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6E3F D4          >                db      {b $} | END_BIT     // msb as name end
 152+ 6E40             >
 152+ 6E40 2C 6E       >                dw      last_NFA            // Link to previous definition Name
 152+ 6E42             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6E42 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6E44             >                else
 152+ 6E44 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 152+ 6E44             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6E44             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6E44             >
 152+ 6E44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6E44 16          >                db      22
 153+ 6E45                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 153+ 6E45             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 153+ 6E45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6E45             >
 153+ 6E45             >                // dummy db directives used to calculate length of namec
 153+ 6E45 4C 49 4D 49 >                db      "LIMIT"
 153+ 6E49 54          >
 153+ 6E4A             >len_NFA         defl    $ - temp_NFA
 153+ 6E4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6E45             >
 153+ 6E45 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6E46 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 153+ 6E4A 54          >
 153+ 6E4B             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6E4A D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 6E4B             >
 153+ 6E4B 3A 6E       >                dw      last_NFA            // Link to previous definition Name
 153+ 6E4D             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6E4D 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6E4F             >                else
 153+ 6E4F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 6E4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6E4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6E4F             >
 153+ 6E4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6E4F 18          >                db      24
 154+ 6E50                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 154+ 6E50             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 154+ 6E50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6E50             >
 154+ 6E50             >                // dummy db directives used to calculate length of namec
 154+ 6E50 45 58 50    >                db      "EXP"
 154+ 6E53             >len_NFA         defl    $ - temp_NFA
 154+ 6E53             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6E50             >
 154+ 6E50 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6E51 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 154+ 6E54             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6E53 D0          >                db      {b $} | END_BIT     // msb as name end
 154+ 6E54             >
 154+ 6E54 45 6E       >                dw      last_NFA            // Link to previous definition Name
 154+ 6E56             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6E56 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6E58             >                else
 154+ 6E58 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 154+ 6E58             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6E58             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6E58             >
 154+ 6E58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6E58 1A          >                db      26
 155+ 6E59                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 155+ 6E59             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 155+ 6E59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6E59             >
 155+ 6E59             >                // dummy db directives used to calculate length of namec
 155+ 6E59 4E 4D 4F 44 >                db      "NMODE"
 155+ 6E5D 45          >
 155+ 6E5E             >len_NFA         defl    $ - temp_NFA
 155+ 6E5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6E59             >
 155+ 6E59 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6E5A 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 155+ 6E5E 45          >
 155+ 6E5F             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6E5E C5          >                db      {b $} | END_BIT     // msb as name end
 155+ 6E5F             >
 155+ 6E5F 50 6E       >                dw      last_NFA            // Link to previous definition Name
 155+ 6E61             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6E61 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6E63             >                else
 155+ 6E63 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 155+ 6E63             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6E63             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6E63             >
 155+ 6E63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6E63 1C          >                db      28
 156+ 6E64                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 156+ 6E64             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 156+ 6E64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6E64             >
 156+ 6E64             >                // dummy db directives used to calculate length of namec
 156+ 6E64 42 4C 4B    >                db      "BLK"
 156+ 6E67             >len_NFA         defl    $ - temp_NFA
 156+ 6E67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6E64             >
 156+ 6E64 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6E65 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 156+ 6E68             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6E67 CB          >                db      {b $} | END_BIT     // msb as name end
 156+ 6E68             >
 156+ 6E68 59 6E       >                dw      last_NFA            // Link to previous definition Name
 156+ 6E6A             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6E6A 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6E6C             >                else
 156+ 6E6C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 6E6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6E6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6E6C             >
 156+ 6E6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6E6C 1E          >                db      30
 157+ 6E6D                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 157+ 6E6D             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 157+ 6E6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6E6D             >
 157+ 6E6D             >                // dummy db directives used to calculate length of namec
 157+ 6E6D 3E 49 4E    >                db      ">IN"
 157+ 6E70             >len_NFA         defl    $ - temp_NFA
 157+ 6E70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6E6D             >
 157+ 6E6D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6E6E 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 157+ 6E71             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6E70 CE          >                db      {b $} | END_BIT     // msb as name end
 157+ 6E71             >
 157+ 6E71 64 6E       >                dw      last_NFA            // Link to previous definition Name
 157+ 6E73             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6E73 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6E75             >                else
 157+ 6E75 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 157+ 6E75             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6E75             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6E75             >
 157+ 6E75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6E75 20          >                db      32
 158+ 6E76                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 158+ 6E76             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 158+ 6E76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6E76             >
 158+ 6E76             >                // dummy db directives used to calculate length of namec
 158+ 6E76 4F 55 54    >                db      "OUT"
 158+ 6E79             >len_NFA         defl    $ - temp_NFA
 158+ 6E79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6E76             >
 158+ 6E76 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6E77 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 158+ 6E7A             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6E79 D4          >                db      {b $} | END_BIT     // msb as name end
 158+ 6E7A             >
 158+ 6E7A 6D 6E       >                dw      last_NFA            // Link to previous definition Name
 158+ 6E7C             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6E7C 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6E7E             >                else
 158+ 6E7E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6E7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6E7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6E7E             >
 158+ 6E7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6E7E 22          >                db      34
 159+ 6E7F                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 159+ 6E7F             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 159+ 6E7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6E7F             >
 159+ 6E7F             >                // dummy db directives used to calculate length of namec
 159+ 6E7F 53 43 52    >                db      "SCR"
 159+ 6E82             >len_NFA         defl    $ - temp_NFA
 159+ 6E82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6E7F             >
 159+ 6E7F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6E80 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 159+ 6E83             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6E82 D2          >                db      {b $} | END_BIT     // msb as name end
 159+ 6E83             >
 159+ 6E83 76 6E       >                dw      last_NFA            // Link to previous definition Name
 159+ 6E85             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6E85 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6E87             >                else
 159+ 6E87 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 159+ 6E87             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6E87             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6E87             >
 159+ 6E87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6E87 24          >                db      36
 160+ 6E88                              User_Def OFFSET     , "OFFSET"    , 38 //
 160+ 6E88             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 160+ 6E88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6E88             >
 160+ 6E88             >                // dummy db directives used to calculate length of namec
 160+ 6E88 4F 46 46 53 >                db      "OFFSET"
 160+ 6E8C 45 54       >
 160+ 6E8E             >len_NFA         defl    $ - temp_NFA
 160+ 6E8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6E88             >
 160+ 6E88 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6E89 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 160+ 6E8D 45 54       >
 160+ 6E8F             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6E8E D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6E8F             >
 160+ 6E8F 7F 6E       >                dw      last_NFA            // Link to previous definition Name
 160+ 6E91             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6E91 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6E93             >                else
 160+ 6E93 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 160+ 6E93             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6E93             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6E93             >
 160+ 6E93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6E93 26          >                db      38
 161+ 6E94                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 161+ 6E94             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 161+ 6E94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6E94             >
 161+ 6E94             >                // dummy db directives used to calculate length of namec
 161+ 6E94 43 4F 4E 54 >                db      "CONTEXT"
 161+ 6E98 45 58 54    >
 161+ 6E9B             >len_NFA         defl    $ - temp_NFA
 161+ 6E9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6E94             >
 161+ 6E94 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6E95 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 161+ 6E99 45 58 54    >
 161+ 6E9C             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6E9B D4          >                db      {b $} | END_BIT     // msb as name end
 161+ 6E9C             >
 161+ 6E9C 88 6E       >                dw      last_NFA            // Link to previous definition Name
 161+ 6E9E             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6E9E 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6EA0             >                else
 161+ 6EA0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 161+ 6EA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6EA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6EA0             >
 161+ 6EA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6EA0 28          >                db      40
 162+ 6EA1                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 162+ 6EA1             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 162+ 6EA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6EA1             >
 162+ 6EA1             >                // dummy db directives used to calculate length of namec
 162+ 6EA1 43 55 52 52 >                db      "CURRENT"
 162+ 6EA5 45 4E 54    >
 162+ 6EA8             >len_NFA         defl    $ - temp_NFA
 162+ 6EA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6EA1             >
 162+ 6EA1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6EA2 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 162+ 6EA6 45 4E 54    >
 162+ 6EA9             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6EA8 D4          >                db      {b $} | END_BIT     // msb as name end
 162+ 6EA9             >
 162+ 6EA9 94 6E       >                dw      last_NFA            // Link to previous definition Name
 162+ 6EAB             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6EAB 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6EAD             >                else
 162+ 6EAD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 162+ 6EAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6EAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6EAD             >
 162+ 6EAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6EAD 2A          >                db      42
 163+ 6EAE                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 163+ 6EAE             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 163+ 6EAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6EAE             >
 163+ 6EAE             >                // dummy db directives used to calculate length of namec
 163+ 6EAE 53 54 41 54 >                db      "STATE"
 163+ 6EB2 45          >
 163+ 6EB3             >len_NFA         defl    $ - temp_NFA
 163+ 6EB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6EAE             >
 163+ 6EAE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6EAF 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 163+ 6EB3 45          >
 163+ 6EB4             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6EB3 C5          >                db      {b $} | END_BIT     // msb as name end
 163+ 6EB4             >
 163+ 6EB4 A1 6E       >                dw      last_NFA            // Link to previous definition Name
 163+ 6EB6             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6EB6 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6EB8             >                else
 163+ 6EB8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 163+ 6EB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6EB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6EB8             >
 163+ 6EB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6EB8 2C          >                db      44
 164+ 6EB9                              User_Def BASE       , "BASE"      , 46 //
 164+ 6EB9             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 164+ 6EB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6EB9             >
 164+ 6EB9             >                // dummy db directives used to calculate length of namec
 164+ 6EB9 42 41 53 45 >                db      "BASE"
 164+ 6EBD             >len_NFA         defl    $ - temp_NFA
 164+ 6EBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6EB9             >
 164+ 6EB9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6EBA 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 164+ 6EBE             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6EBD C5          >                db      {b $} | END_BIT     // msb as name end
 164+ 6EBE             >
 164+ 6EBE AE 6E       >                dw      last_NFA            // Link to previous definition Name
 164+ 6EC0             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6EC0 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6EC2             >                else
 164+ 6EC2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 6EC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6EC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6EC2             >
 164+ 6EC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6EC2 2E          >                db      46
 165+ 6EC3                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 165+ 6EC3             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 165+ 6EC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6EC3             >
 165+ 6EC3             >                // dummy db directives used to calculate length of namec
 165+ 6EC3 44 50 4C    >                db      "DPL"
 165+ 6EC6             >len_NFA         defl    $ - temp_NFA
 165+ 6EC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6EC3             >
 165+ 6EC3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6EC4 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 165+ 6EC7             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6EC6 CC          >                db      {b $} | END_BIT     // msb as name end
 165+ 6EC7             >
 165+ 6EC7 B9 6E       >                dw      last_NFA            // Link to previous definition Name
 165+ 6EC9             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6EC9 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6ECB             >                else
 165+ 6ECB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 6ECB             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6ECB             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6ECB             >
 165+ 6ECB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6ECB 30          >                db      48
 166+ 6ECC                              User_Def FLD        , "FLD"       , 50 // output field width
 166+ 6ECC             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 166+ 6ECC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6ECC             >
 166+ 6ECC             >                // dummy db directives used to calculate length of namec
 166+ 6ECC 46 4C 44    >                db      "FLD"
 166+ 6ECF             >len_NFA         defl    $ - temp_NFA
 166+ 6ECF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6ECC             >
 166+ 6ECC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6ECD 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 166+ 6ED0             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6ECF C4          >                db      {b $} | END_BIT     // msb as name end
 166+ 6ED0             >
 166+ 6ED0 C3 6E       >                dw      last_NFA            // Link to previous definition Name
 166+ 6ED2             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6ED2 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6ED4             >                else
 166+ 6ED4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 6ED4             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6ED4             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6ED4             >
 166+ 6ED4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6ED4 32          >                db      50
 167+ 6ED5                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 167+ 6ED5             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 167+ 6ED5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6ED5             >
 167+ 6ED5             >                // dummy db directives used to calculate length of namec
 167+ 6ED5 43 53 50    >                db      "CSP"
 167+ 6ED8             >len_NFA         defl    $ - temp_NFA
 167+ 6ED8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6ED5             >
 167+ 6ED5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6ED6 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 167+ 6ED9             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6ED8 D0          >                db      {b $} | END_BIT     // msb as name end
 167+ 6ED9             >
 167+ 6ED9 CC 6E       >                dw      last_NFA            // Link to previous definition Name
 167+ 6EDB             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6EDB 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6EDD             >                else
 167+ 6EDD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 6EDD             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6EDD             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6EDD             >
 167+ 6EDD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6EDD 34          >                db      52
 168+ 6EDE                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 168+ 6EDE             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 168+ 6EDE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6EDE             >
 168+ 6EDE             >                // dummy db directives used to calculate length of namec
 168+ 6EDE 52 23       >                db      "R#"
 168+ 6EE0             >len_NFA         defl    $ - temp_NFA
 168+ 6EE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6EDE             >
 168+ 6EDE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6EDF 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 168+ 6EE1             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6EE0 A3          >                db      {b $} | END_BIT     // msb as name end
 168+ 6EE1             >
 168+ 6EE1 D5 6E       >                dw      last_NFA            // Link to previous definition Name
 168+ 6EE3             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6EE3 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6EE5             >                else
 168+ 6EE5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 168+ 6EE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6EE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6EE5             >
 168+ 6EE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6EE5 36          >                db      54
 169+ 6EE6                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 169+ 6EE6             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 169+ 6EE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6EE6             >
 169+ 6EE6             >                // dummy db directives used to calculate length of namec
 169+ 6EE6 48 4C 44    >                db      "HLD"
 169+ 6EE9             >len_NFA         defl    $ - temp_NFA
 169+ 6EE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6EE6             >
 169+ 6EE6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6EE7 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 169+ 6EEA             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6EE9 C4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6EEA             >
 169+ 6EEA DE 6E       >                dw      last_NFA            // Link to previous definition Name
 169+ 6EEC             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6EEC 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6EEE             >                else
 169+ 6EEE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 169+ 6EEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6EEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6EEE             >
 169+ 6EEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6EEE 38          >                db      56
 170+ 6EEF                              User_Def USE        , "USE"       , 58 // address of last used block
 170+ 6EEF             >                New_Def  USE, "USE", User_Ptr, is_normal
 170+ 6EEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6EEF             >
 170+ 6EEF             >                // dummy db directives used to calculate length of namec
 170+ 6EEF 55 53 45    >                db      "USE"
 170+ 6EF2             >len_NFA         defl    $ - temp_NFA
 170+ 6EF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6EEF             >
 170+ 6EEF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6EF0 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 170+ 6EF3             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6EF2 C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 6EF3             >
 170+ 6EF3 E6 6E       >                dw      last_NFA            // Link to previous definition Name
 170+ 6EF5             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6EF5 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6EF7             >                else
 170+ 6EF7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 170+ 6EF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6EF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6EF7             >
 170+ 6EF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6EF7 3A          >                db      58
 171+ 6EF8                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 171+ 6EF8             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 171+ 6EF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6EF8             >
 171+ 6EF8             >                // dummy db directives used to calculate length of namec
 171+ 6EF8 50 52 45 56 >                db      "PREV"
 171+ 6EFC             >len_NFA         defl    $ - temp_NFA
 171+ 6EFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6EF8             >
 171+ 6EF8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6EF9 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 171+ 6EFD             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6EFC D6          >                db      {b $} | END_BIT     // msb as name end
 171+ 6EFD             >
 171+ 6EFD EF 6E       >                dw      last_NFA            // Link to previous definition Name
 171+ 6EFF             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6EFF 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6F01             >                else
 171+ 6F01 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 171+ 6F01             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6F01             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6F01             >
 171+ 6F01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6F01 3C          >                db      60
 172+ 6F02                              User_Def LP         , "LP"        , 62 // line printer (not used)
 172+ 6F02             >                New_Def  LP, "LP", User_Ptr, is_normal
 172+ 6F02             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6F02             >
 172+ 6F02             >                // dummy db directives used to calculate length of namec
 172+ 6F02 4C 50       >                db      "LP"
 172+ 6F04             >len_NFA         defl    $ - temp_NFA
 172+ 6F04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6F02             >
 172+ 6F02 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6F03 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 172+ 6F05             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6F04 D0          >                db      {b $} | END_BIT     // msb as name end
 172+ 6F05             >
 172+ 6F05 F8 6E       >                dw      last_NFA            // Link to previous definition Name
 172+ 6F07             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6F07 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6F09             >                else
 172+ 6F09 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 172+ 6F09             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6F09             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6F09             >
 172+ 6F09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6F09 3E          >                db      62
 173+ 6F0A                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 173+ 6F0A             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 173+ 6F0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6F0A             >
 173+ 6F0A             >                // dummy db directives used to calculate length of namec
 173+ 6F0A 50 4C 41 43 >                db      "PLACE"
 173+ 6F0E 45          >
 173+ 6F0F             >len_NFA         defl    $ - temp_NFA
 173+ 6F0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6F0A             >
 173+ 6F0A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6F0B 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 173+ 6F0F 45          >
 173+ 6F10             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6F0F C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 6F10             >
 173+ 6F10 02 6F       >                dw      last_NFA            // Link to previous definition Name
 173+ 6F12             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6F12 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6F14             >                else
 173+ 6F14 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6F14             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6F14             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6F14             >
 173+ 6F14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6F14 40          >                db      64
 174+ 6F15                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 174+ 6F15             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 174+ 6F15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6F15             >
 174+ 6F15             >                // dummy db directives used to calculate length of namec
 174+ 6F15 53 4F 55 52 >                db      "SOURCE-ID"
 174+ 6F19 43 45 2D 49 >
 174+ 6F1D 44          >
 174+ 6F1E             >len_NFA         defl    $ - temp_NFA
 174+ 6F1E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6F15             >
 174+ 6F15 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6F16 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 174+ 6F1A 43 45 2D 49 >
 174+ 6F1E 44          >
 174+ 6F1F             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6F1E C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6F1F             >
 174+ 6F1F 0A 6F       >                dw      last_NFA            // Link to previous definition Name
 174+ 6F21             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6F21 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6F23             >                else
 174+ 6F23 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 6F23             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6F23             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6F23             >
 174+ 6F23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6F23 42          >                db      66
 175+ 6F24                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 175+ 6F24             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 175+ 6F24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6F24             >
 175+ 6F24             >                // dummy db directives used to calculate length of namec
 175+ 6F24 53 50 41 4E >                db      "SPAN"
 175+ 6F28             >len_NFA         defl    $ - temp_NFA
 175+ 6F28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6F24             >
 175+ 6F24 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6F25 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 175+ 6F29             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6F28 CE          >                db      {b $} | END_BIT     // msb as name end
 175+ 6F29             >
 175+ 6F29 15 6F       >                dw      last_NFA            // Link to previous definition Name
 175+ 6F2B             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6F2B 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6F2D             >                else
 175+ 6F2D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 6F2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6F2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6F2D             >
 175+ 6F2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6F2D 44          >                db      68
 176+ 6F2E                              User_Def HP         , "HP"        , 70 // heap-pointer address
 176+ 6F2E             >                New_Def  HP, "HP", User_Ptr, is_normal
 176+ 6F2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6F2E             >
 176+ 6F2E             >                // dummy db directives used to calculate length of namec
 176+ 6F2E 48 50       >                db      "HP"
 176+ 6F30             >len_NFA         defl    $ - temp_NFA
 176+ 6F30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6F2E             >
 176+ 6F2E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6F2F 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 176+ 6F31             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6F30 D0          >                db      {b $} | END_BIT     // msb as name end
 176+ 6F31             >
 176+ 6F31 24 6F       >                dw      last_NFA            // Link to previous definition Name
 176+ 6F33             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6F33 5B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6F35             >                else
 176+ 6F35 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 6F35             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6F35             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6F35             >
 176+ 6F35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6F35 46          >                db      70
 177+ 6F36
 178+ 6F36              //  ______________________________________________________________________
 179+ 6F36              //
 180+ 6F36              // here         -- a
 181+ 6F36                              Colon_Def HERE, "HERE", is_normal
 181+ 6F36             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 181+ 6F36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6F36             >
 181+ 6F36             >                // dummy db directives used to calculate length of namec
 181+ 6F36 48 45 52 45 >                db      "HERE"
 181+ 6F3A             >len_NFA         defl    $ - temp_NFA
 181+ 6F3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6F36             >
 181+ 6F36 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6F37 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 181+ 6F3B             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6F3A C5          >                db      {b $} | END_BIT     // msb as name end
 181+ 6F3B             >
 181+ 6F3B 2E 6F       >                dw      last_NFA            // Link to previous definition Name
 181+ 6F3D             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6F3D F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 181+ 6F3F             >                else
 181+ 6F3F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 181+ 6F3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6F3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6F3F             >
 181+ 6F3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6F3F 29 6E FF 6B                  dw      DP, FETCH               // dp @
 183+ 6F43 BD 69                        dw      EXIT                    // ;
 184+ 6F45
 185+ 6F45              //  ______________________________________________________________________
 186+ 6F45              //
 187+ 6F45              // allot        n --
 188+ 6F45                              Colon_Def ALLOT, "ALLOT", is_normal
 188+ 6F45             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 188+ 6F45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 6F45             >
 188+ 6F45             >                // dummy db directives used to calculate length of namec
 188+ 6F45 41 4C 4C 4F >                db      "ALLOT"
 188+ 6F49 54          >
 188+ 6F4A             >len_NFA         defl    $ - temp_NFA
 188+ 6F4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 6F45             >
 188+ 6F45 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 6F46 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 188+ 6F4A 54          >
 188+ 6F4B             >                org     $-1                 // alter last byte of Name just above to set
 188+ 6F4A D4          >                db      {b $} | END_BIT     // msb as name end
 188+ 6F4B             >
 188+ 6F4B 36 6F       >                dw      last_NFA            // Link to previous definition Name
 188+ 6F4D             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6F4D F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 188+ 6F4F             >                else
 188+ 6F4F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 188+ 6F4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6F4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6F4F             >
 188+ 6F4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 189+ 6F4F 29 6E DC 6B                  dw      DP,  PLUSSTORE          // dp +!
 190+ 6F53 BD 69                        dw      EXIT                    // ;
 191+ 6F55
 192+ 6F55              //  ______________________________________________________________________
 193+ 6F55              //
 194+ 6F55              // comma        n --
 195+ 6F55                              Colon_Def COMMA, ",", is_normal
 195+ 6F55             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 195+ 6F55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 6F55             >
 195+ 6F55             >                // dummy db directives used to calculate length of namec
 195+ 6F55 2C          >                db      ","
 195+ 6F56             >len_NFA         defl    $ - temp_NFA
 195+ 6F56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 6F55             >
 195+ 6F55 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 6F56 2C          >                db      ","               // name string in 7-bit ascii, but
 195+ 6F57             >                org     $-1                 // alter last byte of Name just above to set
 195+ 6F56 AC          >                db      {b $} | END_BIT     // msb as name end
 195+ 6F57             >
 195+ 6F57 45 6F       >                dw      last_NFA            // Link to previous definition Name
 195+ 6F59             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 6F59 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 6F5B             >                else
 195+ 6F5B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 6F5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 6F5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 6F5B             >
 195+ 6F5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 6F5B 3D 6F 0C 6C                  dw      HERE, STORE             // here !
 197+ 6F5F 7B 6D 4D 6F                  dw      TWO, ALLOT              // 2 allot
 198+ 6F63 BD 69                        dw      EXIT                    // ;
 199+ 6F65
 200+ 6F65              //  ______________________________________________________________________
 201+ 6F65              //
 202+ 6F65              // ccomma       c --
 203+ 6F65                              Colon_Def CCOMMA, "C,", is_normal
 203+ 6F65             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 203+ 6F65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 203+ 6F65             >
 203+ 6F65             >                // dummy db directives used to calculate length of namec
 203+ 6F65 43 2C       >                db      "C,"
 203+ 6F67             >len_NFA         defl    $ - temp_NFA
 203+ 6F67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 203+ 6F65             >
 203+ 6F65 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 203+ 6F66 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 203+ 6F68             >                org     $-1                 // alter last byte of Name just above to set
 203+ 6F67 AC          >                db      {b $} | END_BIT     // msb as name end
 203+ 6F68             >
 203+ 6F68 55 6F       >                dw      last_NFA            // Link to previous definition Name
 203+ 6F6A             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 203+ 6F6A F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 203+ 6F6C             >                else
 203+ 6F6C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 203+ 6F6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 203+ 6F6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 203+ 6F6C             >
 203+ 6F6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 204+ 6F6C 3D 6F 28 6C                  dw      HERE, CSTORE            // here c!
 205+ 6F70 73 6D 4D 6F                  dw      ONE, ALLOT              // 1 allot
 206+ 6F74 BD 69                        dw      EXIT                    // ;
 207+ 6F76
 208+ 6F76              //  ______________________________________________________________________
 209+ 6F76              //
 210+ 6F76              // s->d         n -- d
 211+ 6F76              // converts a single precision integer in a double precision
 212+ 6F76                              New_Def S_TO_D, "S->D", is_code, is_normal
 212+ 6F76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 6F76             >
 212+ 6F76             >                // dummy db directives used to calculate length of namec
 212+ 6F76 53 2D 3E 44 >                db      "S->D"
 212+ 6F7A             >len_NFA         defl    $ - temp_NFA
 212+ 6F7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 6F76             >
 212+ 6F76 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 6F77 53 2D 3E 44 >                db      "S->D"               // name string in 7-bit ascii, but
 212+ 6F7B             >                org     $-1                 // alter last byte of Name just above to set
 212+ 6F7A C4          >                db      {b $} | END_BIT     // msb as name end
 212+ 6F7B             >
 212+ 6F7B 65 6F       >                dw      last_NFA            // Link to previous definition Name
 212+ 6F7D             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 6F7D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 212+ 6F7D             >                else
 212+ 6F7D 7F 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 212+ 6F7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 6F7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 6F7F             >
 212+ 6F7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 6F7F D1                           pop     de
 214+ 6F80 21 00 00                     ld      hl, 0
 215+ 6F83 7A                           ld      a, d
 216+ 6F84 E6 80                        and     $80
 217+ 6F86 28 01                        jr      z, S_to_D_Skip
 218+ 6F88 2B                           dec     hl                  // $FFFF
 219+ 6F89              S_to_D_Skip:
 220+ 6F89 D5                           push    de
 221+ 6F8A E5                           push    hl
 222+ 6F8B                              next
 222+ 6F8B DD E9       >                jp      (ix)
 223+ 6F8D
 224+ 6F8D              //  ______________________________________________________________________
 225+ 6F8D              //
 226+ 6F8D              // -            n1 n2 -- n3
 227+ 6F8D              // subtraction
 228+ 6F8D                              New_Def SUBTRACT, "-", is_code, is_normal
 228+ 6F8D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 228+ 6F8D             >
 228+ 6F8D             >                // dummy db directives used to calculate length of namec
 228+ 6F8D 2D          >                db      "-"
 228+ 6F8E             >len_NFA         defl    $ - temp_NFA
 228+ 6F8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 228+ 6F8D             >
 228+ 6F8D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 228+ 6F8E 2D          >                db      "-"               // name string in 7-bit ascii, but
 228+ 6F8F             >                org     $-1                 // alter last byte of Name just above to set
 228+ 6F8E AD          >                db      {b $} | END_BIT     // msb as name end
 228+ 6F8F             >
 228+ 6F8F 76 6F       >                dw      last_NFA            // Link to previous definition Name
 228+ 6F91             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 228+ 6F91 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 228+ 6F91             >                else
 228+ 6F91 93 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 228+ 6F93             >                endif           ; ok        // for other definitions it "points" the correct handler
 228+ 6F93             >                // Use of "; ok" to suppress "warning[fwdref]"
 228+ 6F93             >
 228+ 6F93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 229+ 6F93 D1                           pop     de
 230+ 6F94 E1                           pop     hl
 231+ 6F95 A7                           and     a
 232+ 6F96 ED 52                        sbc     hl, de
 233+ 6F98
 234+ 6F98                              psh1
 234+ 6F98 E5          >                push    hl
 234+ 6F99 DD E9       >                jp      (ix)
 235+ 6F9B
 236+ 6F9B              //  ______________________________________________________________________
 237+ 6F9B              //
 238+ 6F9B              // =            n1 n2 -- n3
 239+ 6F9B              // equals
 240+ 6F9B                              Colon_Def EQUALS, "=", is_normal
 240+ 6F9B             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 240+ 6F9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 240+ 6F9B             >
 240+ 6F9B             >                // dummy db directives used to calculate length of namec
 240+ 6F9B 3D          >                db      "="
 240+ 6F9C             >len_NFA         defl    $ - temp_NFA
 240+ 6F9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 240+ 6F9B             >
 240+ 6F9B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 240+ 6F9C 3D          >                db      "="               // name string in 7-bit ascii, but
 240+ 6F9D             >                org     $-1                 // alter last byte of Name just above to set
 240+ 6F9C BD          >                db      {b $} | END_BIT     // msb as name end
 240+ 6F9D             >
 240+ 6F9D 8D 6F       >                dw      last_NFA            // Link to previous definition Name
 240+ 6F9F             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 240+ 6F9F F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 240+ 6FA1             >                else
 240+ 6FA1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 240+ 6FA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 240+ 6FA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 240+ 6FA1             >
 240+ 6FA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 241+ 6FA1 91 6F 1B 6A                  dw      SUBTRACT, ZEQUAL        // - 0=
 242+ 6FA5 BD 69                        dw      EXIT                    // ;
 243+ 6FA7
 244+ 6FA7              //  ______________________________________________________________________
 245+ 6FA7              //
 246+ 6FA7              // u<           u1 u2 -- u3
 247+ 6FA7              // unsigned less-than
 248+ 6FA7                              New_Def ULESS, "U<", is_code, is_normal
 248+ 6FA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 6FA7             >
 248+ 6FA7             >                // dummy db directives used to calculate length of namec
 248+ 6FA7 55 3C       >                db      "U<"
 248+ 6FA9             >len_NFA         defl    $ - temp_NFA
 248+ 6FA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 6FA7             >
 248+ 6FA7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 6FA8 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 248+ 6FAA             >                org     $-1                 // alter last byte of Name just above to set
 248+ 6FA9 BC          >                db      {b $} | END_BIT     // msb as name end
 248+ 6FAA             >
 248+ 6FAA 9B 6F       >                dw      last_NFA            // Link to previous definition Name
 248+ 6FAC             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 6FAC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 248+ 6FAC             >                else
 248+ 6FAC AE 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 248+ 6FAE             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 6FAE             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 6FAE             >
 248+ 6FAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 6FAE D1                           pop     de
 250+ 6FAF E1                           pop     hl
 251+ 6FB0 A7                           and     a
 252+ 6FB1 ED 52                        sbc     hl, de
 253+ 6FB3 21 01 00                     ld      hl, 1
 254+ 6FB6 38 01                        jr      c, ULess_Skip
 255+ 6FB8 2D                               dec     l
 256+ 6FB9              ULess_Skip:
 257+ 6FB9
 258+ 6FB9                              psh1
 258+ 6FB9 E5          >                push    hl
 258+ 6FBA DD E9       >                jp      (ix)
 259+ 6FBC
 260+ 6FBC              //  ______________________________________________________________________
 261+ 6FBC              //
 262+ 6FBC              // <           n1 n2 -- n3
 263+ 6FBC              // less-than
 264+ 6FBC                              New_Def LESS, "<", is_code, is_normal
 264+ 6FBC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 264+ 6FBC             >
 264+ 6FBC             >                // dummy db directives used to calculate length of namec
 264+ 6FBC 3C          >                db      "<"
 264+ 6FBD             >len_NFA         defl    $ - temp_NFA
 264+ 6FBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 264+ 6FBC             >
 264+ 6FBC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 264+ 6FBD 3C          >                db      "<"               // name string in 7-bit ascii, but
 264+ 6FBE             >                org     $-1                 // alter last byte of Name just above to set
 264+ 6FBD BC          >                db      {b $} | END_BIT     // msb as name end
 264+ 6FBE             >
 264+ 6FBE A7 6F       >                dw      last_NFA            // Link to previous definition Name
 264+ 6FC0             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 264+ 6FC0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 264+ 6FC0             >                else
 264+ 6FC0 C2 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 264+ 6FC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 264+ 6FC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 264+ 6FC2             >
 264+ 6FC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 265+ 6FC2 D1                           pop     de
 266+ 6FC3 E1                           pop     hl
 267+ 6FC4 7C                           ld      a, h
 268+ 6FC5 EE 80                        xor     $80
 269+ 6FC7 67                           ld      h, a
 270+ 6FC8 7A                           ld      a, d
 271+ 6FC9 EE 80                        xor     $80
 272+ 6FCB 57                           ld      d, a
 273+ 6FCC A7                           and     a
 274+ 6FCD ED 52                        sbc     hl, de
 275+ 6FCF 21 01 00                     ld      hl, 1
 276+ 6FD2 38 01                        jr      c, Less_Skip
 277+ 6FD4 2D                               dec     l
 278+ 6FD5              Less_Skip:
 279+ 6FD5
 280+ 6FD5                              psh1
 280+ 6FD5 E5          >                push    hl
 280+ 6FD6 DD E9       >                jp      (ix)
 281+ 6FD8
 282+ 6FD8              //  ______________________________________________________________________
 283+ 6FD8              //
 284+ 6FD8              // >            n1 n2 -- n3
 285+ 6FD8              // greater than
 286+ 6FD8                              Colon_Def GREATER, ">", is_normal
 286+ 6FD8             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 286+ 6FD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 286+ 6FD8             >
 286+ 6FD8             >                // dummy db directives used to calculate length of namec
 286+ 6FD8 3E          >                db      ">"
 286+ 6FD9             >len_NFA         defl    $ - temp_NFA
 286+ 6FD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 286+ 6FD8             >
 286+ 6FD8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 286+ 6FD9 3E          >                db      ">"               // name string in 7-bit ascii, but
 286+ 6FDA             >                org     $-1                 // alter last byte of Name just above to set
 286+ 6FD9 BE          >                db      {b $} | END_BIT     // msb as name end
 286+ 6FDA             >
 286+ 6FDA BC 6F       >                dw      last_NFA            // Link to previous definition Name
 286+ 6FDC             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 286+ 6FDC F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 286+ 6FDE             >                else
 286+ 6FDE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 286+ 6FDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 286+ 6FDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 286+ 6FDE             >
 286+ 6FDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 287+ 6FDE 2E 6B C0 6F                  dw      SWAP, LESS              // swap <
 288+ 6FE2 BD 69                        dw      EXIT                    // ;
 289+ 6FE4              //  ______________________________________________________________________
 290+ 6FE4              //
 291+ 6FE4              // min          n1 n2 -- n3
 292+ 6FE4              // minimum between n1 and n2
 293+ 6FE4                              Colon_Def MIN, "MIN" , is_normal
 293+ 6FE4             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 293+ 6FE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 6FE4             >
 293+ 6FE4             >                // dummy db directives used to calculate length of namec
 293+ 6FE4 4D 49 4E    >                db      "MIN"
 293+ 6FE7             >len_NFA         defl    $ - temp_NFA
 293+ 6FE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 6FE4             >
 293+ 6FE4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 6FE5 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 293+ 6FE8             >                org     $-1                 // alter last byte of Name just above to set
 293+ 6FE7 CE          >                db      {b $} | END_BIT     // msb as name end
 293+ 6FE8             >
 293+ 6FE8 D8 6F       >                dw      last_NFA            // Link to previous definition Name
 293+ 6FEA             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 6FEA F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 6FEC             >                else
 293+ 6FEC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 6FEC             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 6FEC             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 6FEC             >
 293+ 6FEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 6FEC A5 6B                        dw      TWO_DUP                 // 2dup
 295+ 6FEE DC 6F                        dw      GREATER                 // >
 296+ 6FF0 7D 64                        dw      ZBRANCH
 297+ 6FF2 04 00                        dw      Min_Skip - $   // if
 298+ 6FF4 2E 6B                        dw          SWAP                //      swap
 299+ 6FF6              Min_Skip:                                       // endif
 300+ 6FF6 06 6B                        dw      DROP                    // drop
 301+ 6FF8 BD 69                        dw      EXIT                    // ;
 302+ 6FFA
 303+ 6FFA              //  ______________________________________________________________________
 304+ 6FFA              //
 305+ 6FFA              // max          n1 n2 -- n3
 306+ 6FFA              // maximum between n1 and n2
 307+ 6FFA                              Colon_Def MAX, "MAX", is_normal
 307+ 6FFA             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 307+ 6FFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 307+ 6FFA             >
 307+ 6FFA             >                // dummy db directives used to calculate length of namec
 307+ 6FFA 4D 41 58    >                db      "MAX"
 307+ 6FFD             >len_NFA         defl    $ - temp_NFA
 307+ 6FFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 307+ 6FFA             >
 307+ 6FFA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 307+ 6FFB 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 307+ 6FFE             >                org     $-1                 // alter last byte of Name just above to set
 307+ 6FFD D8          >                db      {b $} | END_BIT     // msb as name end
 307+ 6FFE             >
 307+ 6FFE E4 6F       >                dw      last_NFA            // Link to previous definition Name
 307+ 7000             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 307+ 7000 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 307+ 7002             >                else
 307+ 7002 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 307+ 7002             >                endif           ; ok        // for other definitions it "points" the correct handler
 307+ 7002             >                // Use of "; ok" to suppress "warning[fwdref]"
 307+ 7002             >
 307+ 7002             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 308+ 7002 A5 6B                        dw      TWO_DUP                 // 2dup
 309+ 7004 C0 6F                        dw      LESS                    // <
 310+ 7006 7D 64                        dw      ZBRANCH
 311+ 7008 04 00                        dw      Max_Skip - $   // if
 312+ 700A 2E 6B                        dw          SWAP                //      swap
 313+ 700C              Max_Skip:                                       // endif
 314+ 700C 06 6B                        dw      DROP                    // drop
 315+ 700E BD 69                        dw      EXIT                    // ;
 316+ 7010
 317+ 7010              //  ______________________________________________________________________
 318+ 7010              //
 319+ 7010              // -dup         n -- 0 | n n
 320+ 7010              // duplicate if not zero
 321+ 7010                              New_Def LDUP, "-DUP", is_code, is_normal
 321+ 7010             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 7010             >
 321+ 7010             >                // dummy db directives used to calculate length of namec
 321+ 7010 2D 44 55 50 >                db      "-DUP"
 321+ 7014             >len_NFA         defl    $ - temp_NFA
 321+ 7014             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 7010             >
 321+ 7010 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 7011 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 321+ 7015             >                org     $-1                 // alter last byte of Name just above to set
 321+ 7014 D0          >                db      {b $} | END_BIT     // msb as name end
 321+ 7015             >
 321+ 7015 FA 6F       >                dw      last_NFA            // Link to previous definition Name
 321+ 7017             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 7017 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 321+ 7017             >                else
 321+ 7017 19 70       >                dw      $ + 2   ; ok        // is pointed by CFA
 321+ 7019             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 7019             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 7019             >
 321+ 7019             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 7019              QDup_Ptr:
 323+ 7019 E1                           pop     hl
 324+ 701A 7C                           ld      a, h
 325+ 701B B5                           or      l
 326+ 701C 28 01                        jr      z, QDup_Skip
 327+ 701E E5                               push    hl
 328+ 701F              QDup_Skip:
 329+ 701F                              psh1
 329+ 701F E5          >                push    hl
 329+ 7020 DD E9       >                jp      (ix)
 330+ 7022
 331+ 7022              //  ______________________________________________________________________
 332+ 7022              //
 333+ 7022              // ?dup         n -- 0 | n n
 334+ 7022              // duplicate if not zero
 335+ 7022                              New_Def QDUP, "?DUP", QDup_Ptr, is_normal
 335+ 7022             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 335+ 7022             >
 335+ 7022             >                // dummy db directives used to calculate length of namec
 335+ 7022 3F 44 55 50 >                db      "?DUP"
 335+ 7026             >len_NFA         defl    $ - temp_NFA
 335+ 7026             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 335+ 7022             >
 335+ 7022 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 335+ 7023 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 335+ 7027             >                org     $-1                 // alter last byte of Name just above to set
 335+ 7026 D0          >                db      {b $} | END_BIT     // msb as name end
 335+ 7027             >
 335+ 7027 10 70       >                dw      last_NFA            // Link to previous definition Name
 335+ 7029             >QDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 335+ 7029 19 70       >                dw      QDup_Ptr ; ok        // for primitive definitions  actual code
 335+ 702B             >                else
 335+ 702B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 335+ 702B             >                endif           ; ok        // for other definitions it "points" the correct handler
 335+ 702B             >                // Use of "; ok" to suppress "warning[fwdref]"
 335+ 702B             >
 335+ 702B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 336+ 702B
 337+ 702B              //  ______________________________________________________________________
 338+ 702B              //
 339+ 702B              // emit         c --
 340+ 702B                              Colon_Def EMIT, "EMIT", is_normal
 340+ 702B             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 340+ 702B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 340+ 702B             >
 340+ 702B             >                // dummy db directives used to calculate length of namec
 340+ 702B 45 4D 49 54 >                db      "EMIT"
 340+ 702F             >len_NFA         defl    $ - temp_NFA
 340+ 702F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 340+ 702B             >
 340+ 702B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 340+ 702C 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 340+ 7030             >                org     $-1                 // alter last byte of Name just above to set
 340+ 702F D4          >                db      {b $} | END_BIT     // msb as name end
 340+ 7030             >
 340+ 7030 22 70       >                dw      last_NFA            // Link to previous definition Name
 340+ 7032             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 340+ 7032 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 340+ 7034             >                else
 340+ 7034 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 340+ 7034             >                endif           ; ok        // for other definitions it "points" the correct handler
 340+ 7034             >                // Use of "; ok" to suppress "warning[fwdref]"
 340+ 7034             >
 340+ 7034             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 341+ 7034 B9 66                        dw      C_EMIT                      // (?emit)
 342+ 7036 17 70                        dw      LDUP                        // ?dup
 343+ 7038                                                                  // if
 344+ 7038 7D 64                        dw      ZBRANCH
 345+ 703A 0A 00                        dw      Emit_Skip - $
 346+ 703C 85 66                        dw          EMITC                   //      emitc
 347+ 703E 73 6D                        dw          ONE                     //      1
 348+ 7040 7C 6E DC 6B                  dw          OUT, PLUSSTORE        //      out +!
 349+ 7044              Emit_Skip:                                          // endif
 350+ 7044 BD 69                        dw      EXIT                        // ;
 351+ 7046
 352+ 7046              //  ______________________________________________________________________
 353+ 7046              //
 354+ 7046              // space        --
 355+ 7046                              Colon_Def SPACE, "SPACE", is_normal
 355+ 7046             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 355+ 7046             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 7046             >
 355+ 7046             >                // dummy db directives used to calculate length of namec
 355+ 7046 53 50 41 43 >                db      "SPACE"
 355+ 704A 45          >
 355+ 704B             >len_NFA         defl    $ - temp_NFA
 355+ 704B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 7046             >
 355+ 7046 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 7047 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 355+ 704B 45          >
 355+ 704C             >                org     $-1                 // alter last byte of Name just above to set
 355+ 704B C5          >                db      {b $} | END_BIT     // msb as name end
 355+ 704C             >
 355+ 704C 2B 70       >                dw      last_NFA            // Link to previous definition Name
 355+ 704E             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 704E F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 355+ 7050             >                else
 355+ 7050 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 355+ 7050             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 7050             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 7050             >
 355+ 7050             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 7050 95 6D 32 70                  dw      BL, EMIT                // bl emit
 357+ 7054 BD 69                        dw      EXIT                    // ;
 358+ 7056
 359+ 7056              //  ______________________________________________________________________
 360+ 7056              //
 361+ 7056              // traverse     a n -- a
 362+ 7056              // A dictionary entry is structured as follows
 363+ 7056              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 364+ 7056              //      +1   word name, last character is toggled with $80
 365+ 7056              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 366+ 7056              // CFA: +3+n routine address. Colon definitions here have pointer to code
 367+ 7056              // PFA: +5+n "is_code", definitions have no PFA.
 368+ 7056              //
 369+ 7056                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 369+ 7056             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 369+ 7056             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ 7056             >
 369+ 7056             >                // dummy db directives used to calculate length of namec
 369+ 7056 54 52 41 56 >                db      "TRAVERSE"
 369+ 705A 45 52 53 45 >
 369+ 705E             >len_NFA         defl    $ - temp_NFA
 369+ 705E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ 7056             >
 369+ 7056 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ 7057 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 369+ 705B 45 52 53 45 >
 369+ 705F             >                org     $-1                 // alter last byte of Name just above to set
 369+ 705E C5          >                db      {b $} | END_BIT     // msb as name end
 369+ 705F             >
 369+ 705F 46 70       >                dw      last_NFA            // Link to previous definition Name
 369+ 7061             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 7061 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 369+ 7063             >                else
 369+ 7063 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 369+ 7063             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 7063             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 7063             >
 369+ 7063             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 7063 2E 6B                        dw      SWAP                    // swap
 371+ 7065              Traverse_Begin:                                 // begin
 372+ 7065 F6 6A 56 6A                  dw          OVER, PLUS          //      over +
 373+ 7069 43 64 7F 00                  dw          LIT, 127            //      127
 374+ 706D F6 6A 1A 6C                  dw          OVER, CFETCH        //      over @
 375+ 7071 C0 6F                        dw          LESS                //      <
 376+ 7073                                                              // until
 377+ 7073 7D 64                        dw      ZBRANCH
 378+ 7075 F0 FF                        dw      Traverse_Begin - $
 379+ 7077 11 6B                        dw      NIP                     //  nip
 380+ 7079 BD 69                        dw      EXIT                    //  ;
 381+ 707B
 382+ 707B              //  ______________________________________________________________________
 383+ 707B              //
 384+ 707B              // latest       -- nfa
 385+ 707B                              Colon_Def LATEST, "LATEST", is_normal
 385+ 707B             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 385+ 707B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 707B             >
 385+ 707B             >                // dummy db directives used to calculate length of namec
 385+ 707B 4C 41 54 45 >                db      "LATEST"
 385+ 707F 53 54       >
 385+ 7081             >len_NFA         defl    $ - temp_NFA
 385+ 7081             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 707B             >
 385+ 707B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 707C 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 385+ 7080 53 54       >
 385+ 7082             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7081 D4          >                db      {b $} | END_BIT     // msb as name end
 385+ 7082             >
 385+ 7082 56 70       >                dw      last_NFA            // Link to previous definition Name
 385+ 7084             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7084 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7086             >                else
 385+ 7086 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 385+ 7086             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7086             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7086             >
 385+ 7086             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7086 AB 6E                        dw      CURRENT                 // current
 387+ 7088 FF 6B FF 6B                  dw      FETCH, FETCH            // @ @
 388+ 708C BD 69                        dw      EXIT                    // ;
 389+ 708E
 390+ 708E              //  ______________________________________________________________________
 391+ 708E              //
 392+ 708E              // lfa          pfa -- lfa
 393+ 708E                              Colon_Def LFA, "LFA", is_normal
 393+ 708E             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 393+ 708E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 708E             >
 393+ 708E             >                // dummy db directives used to calculate length of namec
 393+ 708E 4C 46 41    >                db      "LFA"
 393+ 7091             >len_NFA         defl    $ - temp_NFA
 393+ 7091             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 708E             >
 393+ 708E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 708F 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 393+ 7092             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7091 C1          >                db      {b $} | END_BIT     // msb as name end
 393+ 7092             >
 393+ 7092 7B 70       >                dw      last_NFA            // Link to previous definition Name
 393+ 7094             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7094 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7096             >                else
 393+ 7096 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 7096             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7096             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7096             >
 393+ 7096             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7096 B1 6A                        dw      CELL_MINUS              // cell-
 395+ 7098 B1 6A                        dw      CELL_MINUS              // cell-
 396+ 709A BD 69                        dw      EXIT                    // ;
 397+ 709C
 398+ 709C              //  ______________________________________________________________________
 399+ 709C              //
 400+ 709C              // cfa          pfa -- cfa
 401+ 709C                              Colon_Def CFA, "CFA", is_normal
 401+ 709C             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 401+ 709C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 401+ 709C             >
 401+ 709C             >                // dummy db directives used to calculate length of namec
 401+ 709C 43 46 41    >                db      "CFA"
 401+ 709F             >len_NFA         defl    $ - temp_NFA
 401+ 709F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 401+ 709C             >
 401+ 709C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 401+ 709D 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 401+ 70A0             >                org     $-1                 // alter last byte of Name just above to set
 401+ 709F C1          >                db      {b $} | END_BIT     // msb as name end
 401+ 70A0             >
 401+ 70A0 8E 70       >                dw      last_NFA            // Link to previous definition Name
 401+ 70A2             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 401+ 70A2 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 401+ 70A4             >                else
 401+ 70A4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 401+ 70A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 401+ 70A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 401+ 70A4             >
 401+ 70A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 402+ 70A4 B1 6A                        dw      CELL_MINUS              // cell-
 403+ 70A6 BD 69                        dw      EXIT                    // ;
 404+ 70A8
 405+ 70A8              //  ______________________________________________________________________
 406+ 70A8              //
 407+ 70A8              // nfa          pfa -- nfa
 408+ 70A8                              Colon_Def NFA, "NFA", is_normal
 408+ 70A8             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 408+ 70A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 408+ 70A8             >
 408+ 70A8             >                // dummy db directives used to calculate length of namec
 408+ 70A8 4E 46 41    >                db      "NFA"
 408+ 70AB             >len_NFA         defl    $ - temp_NFA
 408+ 70AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 408+ 70A8             >
 408+ 70A8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 408+ 70A9 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 408+ 70AC             >                org     $-1                 // alter last byte of Name just above to set
 408+ 70AB C1          >                db      {b $} | END_BIT     // msb as name end
 408+ 70AC             >
 408+ 70AC 9C 70       >                dw      last_NFA            // Link to previous definition Name
 408+ 70AE             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 408+ 70AE F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 408+ 70B0             >                else
 408+ 70B0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 408+ 70B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 408+ 70B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 408+ 70B0             >
 408+ 70B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 409+ 70B0 43 64 05 00                  dw      LIT, 5                  // 5
 410+ 70B4 91 6F                        dw      SUBTRACT                // -
 411+ 70B6 8C 6D                        dw      NEG_ONE                 // -1
 412+ 70B8 61 70                        dw      TRAVERSE                // traverse
 413+ 70BA BD 69                        dw      EXIT                    // ;
 414+ 70BC
 415+ 70BC              //  ______________________________________________________________________
 416+ 70BC              //
 417+ 70BC              // pfa          nfa -- pfa
 418+ 70BC                              Colon_Def PFA, "PFA", is_normal
 418+ 70BC             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 418+ 70BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 70BC             >
 418+ 70BC             >                // dummy db directives used to calculate length of namec
 418+ 70BC 50 46 41    >                db      "PFA"
 418+ 70BF             >len_NFA         defl    $ - temp_NFA
 418+ 70BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 70BC             >
 418+ 70BC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 70BD 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 418+ 70C0             >                org     $-1                 // alter last byte of Name just above to set
 418+ 70BF C1          >                db      {b $} | END_BIT     // msb as name end
 418+ 70C0             >
 418+ 70C0 A8 70       >                dw      last_NFA            // Link to previous definition Name
 418+ 70C2             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 70C2 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 70C4             >                else
 418+ 70C4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 70C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 70C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 70C4             >
 418+ 70C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 70C4 73 6D                        dw      ONE                     // 1
 420+ 70C6 61 70                        dw      TRAVERSE                // traverse
 421+ 70C8 43 64 05 00                  dw      LIT, 5                  // 6
 422+ 70CC 56 6A                        dw      PLUS                    // +
 423+ 70CE BD 69                        dw      EXIT                    // ;
 424+ 70D0
 425+ 70D0              //  ______________________________________________________________________
 426+ 70D0              //
 427+ 70D0              // >body        cfa -- pfa
 428+ 70D0                              Colon_Def TO_BODY, ">BODY", is_normal
 428+ 70D0             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 428+ 70D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 70D0             >
 428+ 70D0             >                // dummy db directives used to calculate length of namec
 428+ 70D0 3E 42 4F 44 >                db      ">BODY"
 428+ 70D4 59          >
 428+ 70D5             >len_NFA         defl    $ - temp_NFA
 428+ 70D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 70D0             >
 428+ 70D0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 70D1 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 428+ 70D5 59          >
 428+ 70D6             >                org     $-1                 // alter last byte of Name just above to set
 428+ 70D5 D9          >                db      {b $} | END_BIT     // msb as name end
 428+ 70D6             >
 428+ 70D6 BC 70       >                dw      last_NFA            // Link to previous definition Name
 428+ 70D8             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 70D8 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 70DA             >                else
 428+ 70DA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 70DA             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 70DA             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 70DA             >
 428+ 70DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 70DA A7 6A                        dw      CELL_PLUS               // cell+
 430+ 70DC BD 69                        dw      EXIT                    // ;
 431+ 70DE
 432+ 70DE              //  ______________________________________________________________________
 433+ 70DE              //
 434+ 70DE              // <name        cfa -- nfa
 435+ 70DE                              Colon_Def TO_NAME, "<NAME", is_normal
 435+ 70DE             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 435+ 70DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 435+ 70DE             >
 435+ 70DE             >                // dummy db directives used to calculate length of namec
 435+ 70DE 3C 4E 41 4D >                db      "<NAME"
 435+ 70E2 45          >
 435+ 70E3             >len_NFA         defl    $ - temp_NFA
 435+ 70E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 435+ 70DE             >
 435+ 70DE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 435+ 70DF 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 435+ 70E3 45          >
 435+ 70E4             >                org     $-1                 // alter last byte of Name just above to set
 435+ 70E3 C5          >                db      {b $} | END_BIT     // msb as name end
 435+ 70E4             >
 435+ 70E4 D0 70       >                dw      last_NFA            // Link to previous definition Name
 435+ 70E6             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 435+ 70E6 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 435+ 70E8             >                else
 435+ 70E8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 435+ 70E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 435+ 70E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 435+ 70E8             >
 435+ 70E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 436+ 70E8 D8 70                        dw      TO_BODY                 // >body
 437+ 70EA AE 70                        dw      NFA                     // nfa
 438+ 70EC BD 69                        dw      EXIT                    // ;
 439+ 70EE
 440+ 70EE              //  ______________________________________________________________________
 441+ 70EE              //
 442+ 70EE              // !csp         --
 443+ 70EE              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 444+ 70EE                              Colon_Def STORE_CSP, "!CSP", is_normal
 444+ 70EE             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 444+ 70EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 444+ 70EE             >
 444+ 70EE             >                // dummy db directives used to calculate length of namec
 444+ 70EE 21 43 53 50 >                db      "!CSP"
 444+ 70F2             >len_NFA         defl    $ - temp_NFA
 444+ 70F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 444+ 70EE             >
 444+ 70EE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 444+ 70EF 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 444+ 70F3             >                org     $-1                 // alter last byte of Name just above to set
 444+ 70F2 D0          >                db      {b $} | END_BIT     // msb as name end
 444+ 70F3             >
 444+ 70F3 DE 70       >                dw      last_NFA            // Link to previous definition Name
 444+ 70F5             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 444+ 70F5 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 444+ 70F7             >                else
 444+ 70F7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 444+ 70F7             >                endif           ; ok        // for other definitions it "points" the correct handler
 444+ 70F7             >                // Use of "; ok" to suppress "warning[fwdref]"
 444+ 70F7             >
 444+ 70F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 445+ 70F7 87 69                        dw      SPFETCH                 // sp@
 446+ 70F9 DB 6E 0C 6C                  dw      CSP, STORE              // csp !
 447+ 70FD BD 69                        dw      EXIT                    // ;
 448+ 70FF
 449+ 70FF              //  ______________________________________________________________________
 450+ 70FF              //
 451+ 70FF              // ?error       f n --
 452+ 70FF              // rase error n if flag f it true
 453+ 70FF                              Colon_Def QERROR, "?ERROR", is_normal
 453+ 70FF             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 453+ 70FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 453+ 70FF             >
 453+ 70FF             >                // dummy db directives used to calculate length of namec
 453+ 70FF 3F 45 52 52 >                db      "?ERROR"
 453+ 7103 4F 52       >
 453+ 7105             >len_NFA         defl    $ - temp_NFA
 453+ 7105             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 453+ 70FF             >
 453+ 70FF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 453+ 7100 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 453+ 7104 4F 52       >
 453+ 7106             >                org     $-1                 // alter last byte of Name just above to set
 453+ 7105 D2          >                db      {b $} | END_BIT     // msb as name end
 453+ 7106             >
 453+ 7106 EE 70       >                dw      last_NFA            // Link to previous definition Name
 453+ 7108             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 453+ 7108 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 453+ 710A             >                else
 453+ 710A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 453+ 710A             >                endif           ; ok        // for other definitions it "points" the correct handler
 453+ 710A             >                // Use of "; ok" to suppress "warning[fwdref]"
 453+ 710A             >
 453+ 710A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 454+ 710A 2E 6B                        dw      SWAP                    // swap
 455+ 710C                                                              // if
 456+ 710C 7D 64                        dw      ZBRANCH
 457+ 710E 08 00                        dw      QError_Else - $
 458+ 7110 0D 76                        dw          ERROR               //      error  ( is a forward-ref )
 459+ 7112                                                              // else
 460+ 7112 66 64                        dw      BRANCH
 461+ 7114 04 00                        dw      QError_Endif - $
 462+ 7116              QError_Else:
 463+ 7116 06 6B                        dw          DROP                //      drop
 464+ 7118              QError_Endif:                                   // endif
 465+ 7118 BD 69                        dw      EXIT                    // ;
 466+ 711A
 467+ 711A              //  ______________________________________________________________________
 468+ 711A              //
 469+ 711A              // ?comp       --
 470+ 711A              // raise msg #17 if not compiling
 471+ 711A                              Colon_Def QCOMP, "?COMP", is_normal
 471+ 711A             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 471+ 711A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 471+ 711A             >
 471+ 711A             >                // dummy db directives used to calculate length of namec
 471+ 711A 3F 43 4F 4D >                db      "?COMP"
 471+ 711E 50          >
 471+ 711F             >len_NFA         defl    $ - temp_NFA
 471+ 711F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 471+ 711A             >
 471+ 711A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 471+ 711B 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 471+ 711F 50          >
 471+ 7120             >                org     $-1                 // alter last byte of Name just above to set
 471+ 711F D0          >                db      {b $} | END_BIT     // msb as name end
 471+ 7120             >
 471+ 7120 FF 70       >                dw      last_NFA            // Link to previous definition Name
 471+ 7122             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 471+ 7122 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 471+ 7124             >                else
 471+ 7124 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 471+ 7124             >                endif           ; ok        // for other definitions it "points" the correct handler
 471+ 7124             >                // Use of "; ok" to suppress "warning[fwdref]"
 471+ 7124             >
 471+ 7124             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 472+ 7124 B6 6E FF 6B                  dw      STATE, FETCH            // state @
 473+ 7128 1B 6A                        dw      ZEQUAL                  // 0=
 474+ 712A 43 64 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 475+ 712E 08 71                        dw      QERROR                  // ?error
 476+ 7130 BD 69                        dw      EXIT                    // ;
 477+ 7132
 478+ 7132              //  ______________________________________________________________________
 479+ 7132              //
 480+ 7132              // ?exec       --
 481+ 7132              // raise msg #18 if compiling
 482+ 7132                              Colon_Def QEXEC, "?EXEC", is_normal
 482+ 7132             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 482+ 7132             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 482+ 7132             >
 482+ 7132             >                // dummy db directives used to calculate length of namec
 482+ 7132 3F 45 58 45 >                db      "?EXEC"
 482+ 7136 43          >
 482+ 7137             >len_NFA         defl    $ - temp_NFA
 482+ 7137             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 482+ 7132             >
 482+ 7132 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 482+ 7133 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 482+ 7137 43          >
 482+ 7138             >                org     $-1                 // alter last byte of Name just above to set
 482+ 7137 C3          >                db      {b $} | END_BIT     // msb as name end
 482+ 7138             >
 482+ 7138 1A 71       >                dw      last_NFA            // Link to previous definition Name
 482+ 713A             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 482+ 713A F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 482+ 713C             >                else
 482+ 713C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 482+ 713C             >                endif           ; ok        // for other definitions it "points" the correct handler
 482+ 713C             >                // Use of "; ok" to suppress "warning[fwdref]"
 482+ 713C             >
 482+ 713C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 483+ 713C B6 6E FF 6B                  dw      STATE, FETCH            // state @
 484+ 7140 43 64 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 485+ 7144 08 71                        dw      QERROR                  // ?error
 486+ 7146 BD 69                        dw      EXIT                    // ;
 487+ 7148
 488+ 7148              //  ______________________________________________________________________
 489+ 7148              //
 490+ 7148              // ?pairs       n1 n2 --
 491+ 7148              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 492+ 7148                              Colon_Def QPAIRS, "?PAIRS", is_normal
 492+ 7148             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 492+ 7148             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ 7148             >
 492+ 7148             >                // dummy db directives used to calculate length of namec
 492+ 7148 3F 50 41 49 >                db      "?PAIRS"
 492+ 714C 52 53       >
 492+ 714E             >len_NFA         defl    $ - temp_NFA
 492+ 714E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ 7148             >
 492+ 7148 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ 7149 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 492+ 714D 52 53       >
 492+ 714F             >                org     $-1                 // alter last byte of Name just above to set
 492+ 714E D3          >                db      {b $} | END_BIT     // msb as name end
 492+ 714F             >
 492+ 714F 32 71       >                dw      last_NFA            // Link to previous definition Name
 492+ 7151             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 7151 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 492+ 7153             >                else
 492+ 7153 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 492+ 7153             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 7153             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 7153             >
 492+ 7153             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 7153 91 6F                        dw      SUBTRACT                // -
 494+ 7155 43 64 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 495+ 7159 08 71                        dw      QERROR                  // ?error
 496+ 715B BD 69                        dw      EXIT                    // ;
 497+ 715D
 498+ 715D              //  ______________________________________________________________________
 499+ 715D              //
 500+ 715D              // ?csp       --
 501+ 715D              // raise msg #20 if surrent SP in not what previously saved in CSP.
 502+ 715D              // Compiler relies on that for  syntax checking of structures
 503+ 715D                              Colon_Def QCSP, "?CSP", is_normal
 503+ 715D             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 503+ 715D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ 715D             >
 503+ 715D             >                // dummy db directives used to calculate length of namec
 503+ 715D 3F 43 53 50 >                db      "?CSP"
 503+ 7161             >len_NFA         defl    $ - temp_NFA
 503+ 7161             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ 715D             >
 503+ 715D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ 715E 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 503+ 7162             >                org     $-1                 // alter last byte of Name just above to set
 503+ 7161 D0          >                db      {b $} | END_BIT     // msb as name end
 503+ 7162             >
 503+ 7162 48 71       >                dw      last_NFA            // Link to previous definition Name
 503+ 7164             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 7164 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 7166             >                else
 503+ 7166 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 503+ 7166             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 7166             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 7166             >
 503+ 7166             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 7166 87 69                        dw      SPFETCH                 // sp@
 505+ 7168 DB 6E FF 6B                  dw      CSP, FETCH              // csp @
 506+ 716C 91 6F                        dw      SUBTRACT                // -
 507+ 716E 43 64 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 508+ 7172 08 71                        dw      QERROR                  // ?error
 509+ 7174 BD 69                        dw      EXIT                    // ;
 510+ 7176
 511+ 7176              //  ______________________________________________________________________
 512+ 7176              //
 513+ 7176              // ?loading      --
 514+ 7176              // raise msg #22 if not loading
 515+ 7176                              Colon_Def QLOADING, "?LOADING", is_normal
 515+ 7176             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 515+ 7176             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7176             >
 515+ 7176             >                // dummy db directives used to calculate length of namec
 515+ 7176 3F 4C 4F 41 >                db      "?LOADING"
 515+ 717A 44 49 4E 47 >
 515+ 717E             >len_NFA         defl    $ - temp_NFA
 515+ 717E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7176             >
 515+ 7176 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7177 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 515+ 717B 44 49 4E 47 >
 515+ 717F             >                org     $-1                 // alter last byte of Name just above to set
 515+ 717E C7          >                db      {b $} | END_BIT     // msb as name end
 515+ 717F             >
 515+ 717F 5D 71       >                dw      last_NFA            // Link to previous definition Name
 515+ 7181             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7181 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 515+ 7183             >                else
 515+ 7183 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 515+ 7183             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7183             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7183             >
 515+ 7183             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 516+ 7183 6A 6E FF 6B                  dw      BLK, FETCH              // blk @
 517+ 7187 1B 6A                        dw      ZEQUAL                  // 0=
 518+ 7189 43 64 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 519+ 718D 08 71                        dw      QERROR                  // ?error
 520+ 718F BD 69                        dw      EXIT                    // ;
 521+ 7191
 522+ 7191              //  ______________________________________________________________________
 523+ 7191              //
 524+ 7191              // compile      --
 525+ 7191              // compiles the following word
 526+ 7191                              Colon_Def COMPILE, "COMPILE", is_normal
 526+ 7191             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 526+ 7191             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 526+ 7191             >
 526+ 7191             >                // dummy db directives used to calculate length of namec
 526+ 7191 43 4F 4D 50 >                db      "COMPILE"
 526+ 7195 49 4C 45    >
 526+ 7198             >len_NFA         defl    $ - temp_NFA
 526+ 7198             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 526+ 7191             >
 526+ 7191 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 526+ 7192 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 526+ 7196 49 4C 45    >
 526+ 7199             >                org     $-1                 // alter last byte of Name just above to set
 526+ 7198 C5          >                db      {b $} | END_BIT     // msb as name end
 526+ 7199             >
 526+ 7199 76 71       >                dw      last_NFA            // Link to previous definition Name
 526+ 719B             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 526+ 719B F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 526+ 719D             >                else
 526+ 719D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 526+ 719D             >                endif           ; ok        // for other definitions it "points" the correct handler
 526+ 719D             >                // Use of "; ok" to suppress "warning[fwdref]"
 526+ 719D             >
 526+ 719D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 527+ 719D 22 71                        dw      QCOMP                   // ?comp
 528+ 719F FA 69                        dw      R_TO                    // r>
 529+ 71A1 3B 6B A7 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 530+ 71A5 E6 69                        dw      TO_R                    // >r
 531+ 71A7 FF 6B 59 6F                  dw      FETCH, COMMA            // @ ,
 532+ 71AB BD 69                        dw      EXIT                    // ;
 533+ 71AD
 534+ 71AD              //  ______________________________________________________________________
 535+ 71AD              //
 536+ 71AD              // [            --
 537+ 71AD              // stop compilation
 538+ 71AD                              Colon_Def SQUARED_OPEN, "[", is_immediate
 538+ 71AD             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 538+ 71AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 538+ 71AD             >
 538+ 71AD             >                // dummy db directives used to calculate length of namec
 538+ 71AD 5B          >                db      "["
 538+ 71AE             >len_NFA         defl    $ - temp_NFA
 538+ 71AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 538+ 71AD             >
 538+ 71AD C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 538+ 71AE 5B          >                db      "["               // name string in 7-bit ascii, but
 538+ 71AF             >                org     $-1                 // alter last byte of Name just above to set
 538+ 71AE DB          >                db      {b $} | END_BIT     // msb as name end
 538+ 71AF             >
 538+ 71AF 91 71       >                dw      last_NFA            // Link to previous definition Name
 538+ 71B1             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 538+ 71B1 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 538+ 71B3             >                else
 538+ 71B3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 538+ 71B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 538+ 71B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 538+ 71B3             >
 538+ 71B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 539+ 71B3 6B 6D                        dw      ZERO                    // 0
 540+ 71B5 B6 6E 0C 6C                  dw      STATE, STORE            // state !
 541+ 71B9 BD 69                        dw      EXIT                    // ; immediate
 542+ 71BB
 543+ 71BB              //  ______________________________________________________________________
 544+ 71BB              //
 545+ 71BB              // ]            --
 546+ 71BB              // start compilation
 547+ 71BB                              Colon_Def SQUARED_CLOSE, "]", is_normal
 547+ 71BB             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 547+ 71BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 547+ 71BB             >
 547+ 71BB             >                // dummy db directives used to calculate length of namec
 547+ 71BB 5D          >                db      "]"
 547+ 71BC             >len_NFA         defl    $ - temp_NFA
 547+ 71BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 547+ 71BB             >
 547+ 71BB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 547+ 71BC 5D          >                db      "]"               // name string in 7-bit ascii, but
 547+ 71BD             >                org     $-1                 // alter last byte of Name just above to set
 547+ 71BC DD          >                db      {b $} | END_BIT     // msb as name end
 547+ 71BD             >
 547+ 71BD AD 71       >                dw      last_NFA            // Link to previous definition Name
 547+ 71BF             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 547+ 71BF F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 547+ 71C1             >                else
 547+ 71C1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 547+ 71C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 547+ 71C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 547+ 71C1             >
 547+ 71C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 548+ 71C1 43 64 C0 00                  dw      LIT, $C0                // 192
 549+ 71C5 B6 6E 0C 6C                  dw      STATE, STORE            // state !
 550+ 71C9 BD 69                        dw      EXIT                    // ;
 551+ 71CB
 552+ 71CB              //  ______________________________________________________________________
 553+ 71CB              //
 554+ 71CB              // smudge       --
 555+ 71CB              // toggle smudge bit of latest definition
 556+ 71CB                              Colon_Def SMUDGE, "SMUDGE", is_normal
 556+ 71CB             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 556+ 71CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 556+ 71CB             >
 556+ 71CB             >                // dummy db directives used to calculate length of namec
 556+ 71CB 53 4D 55 44 >                db      "SMUDGE"
 556+ 71CF 47 45       >
 556+ 71D1             >len_NFA         defl    $ - temp_NFA
 556+ 71D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 556+ 71CB             >
 556+ 71CB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 556+ 71CC 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 556+ 71D0 47 45       >
 556+ 71D2             >                org     $-1                 // alter last byte of Name just above to set
 556+ 71D1 C5          >                db      {b $} | END_BIT     // msb as name end
 556+ 71D2             >
 556+ 71D2 BB 71       >                dw      last_NFA            // Link to previous definition Name
 556+ 71D4             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 556+ 71D4 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 556+ 71D6             >                else
 556+ 71D6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 556+ 71D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 556+ 71D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 556+ 71D6             >
 556+ 71D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 557+ 71D6 84 70                        dw      LATEST                  // latest
 558+ 71D8 43 64 20 00                  dw      LIT, SMUDGE_BIT         // 32
 559+ 71DC F2 6B                        dw      TOGGLE                  // toggle
 560+ 71DE BD 69                        dw      EXIT                    // ;
 561+ 71E0
 562+ 71E0              //  ______________________________________________________________________
 563+ 71E0              //
 564+ 71E0              // immediate    --
 565+ 71E0              // make immediate the latest definition
 566+ 71E0                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 566+ 71E0             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 566+ 71E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ 71E0             >
 566+ 71E0             >                // dummy db directives used to calculate length of namec
 566+ 71E0 49 4D 4D 45 >                db      "IMMEDIATE"
 566+ 71E4 44 49 41 54 >
 566+ 71E8 45          >
 566+ 71E9             >len_NFA         defl    $ - temp_NFA
 566+ 71E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ 71E0             >
 566+ 71E0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ 71E1 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 566+ 71E5 44 49 41 54 >
 566+ 71E9 45          >
 566+ 71EA             >                org     $-1                 // alter last byte of Name just above to set
 566+ 71E9 C5          >                db      {b $} | END_BIT     // msb as name end
 566+ 71EA             >
 566+ 71EA CB 71       >                dw      last_NFA            // Link to previous definition Name
 566+ 71EC             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 71EC F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 71EE             >                else
 566+ 71EE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 566+ 71EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 71EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 71EE             >
 566+ 71EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 71EE 84 70                        dw      LATEST                  // latest
 568+ 71F0 43 64 40 00                  dw      LIT, $40                // 64
 569+ 71F4 F2 6B                        dw      TOGGLE                  // toggle
 570+ 71F6 BD 69                        dw      EXIT                    // ;
 571+ 71F8
 572+ 71F8              //  ______________________________________________________________________
 573+ 71F8              //
 574+ 71F8              // hex          --
 575+ 71F8              // change numeration base
 576+ 71F8                              Colon_Def HEX, "HEX", is_normal
 576+ 71F8             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 576+ 71F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ 71F8             >
 576+ 71F8             >                // dummy db directives used to calculate length of namec
 576+ 71F8 48 45 58    >                db      "HEX"
 576+ 71FB             >len_NFA         defl    $ - temp_NFA
 576+ 71FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ 71F8             >
 576+ 71F8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ 71F9 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 576+ 71FC             >                org     $-1                 // alter last byte of Name just above to set
 576+ 71FB D8          >                db      {b $} | END_BIT     // msb as name end
 576+ 71FC             >
 576+ 71FC E0 71       >                dw      last_NFA            // Link to previous definition Name
 576+ 71FE             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 71FE F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 7200             >                else
 576+ 7200 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 576+ 7200             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 7200             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 7200             >
 576+ 7200             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 7200 43 64 10 00                  dw      LIT, 16                 // 16
 578+ 7204 C0 6E 0C 6C                  dw      BASE, STORE             // base !
 579+ 7208 BD 69                        dw      EXIT                    // ;
 580+ 720A
 581+ 720A              //  ______________________________________________________________________
 582+ 720A              //
 583+ 720A              // decimal      --
 584+ 720A              // change numeration base
 585+ 720A                              Colon_Def DECIMAL, "DECIMAL", is_normal
 585+ 720A             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 585+ 720A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 585+ 720A             >
 585+ 720A             >                // dummy db directives used to calculate length of namec
 585+ 720A 44 45 43 49 >                db      "DECIMAL"
 585+ 720E 4D 41 4C    >
 585+ 7211             >len_NFA         defl    $ - temp_NFA
 585+ 7211             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 585+ 720A             >
 585+ 720A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 585+ 720B 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 585+ 720F 4D 41 4C    >
 585+ 7212             >                org     $-1                 // alter last byte of Name just above to set
 585+ 7211 CC          >                db      {b $} | END_BIT     // msb as name end
 585+ 7212             >
 585+ 7212 F8 71       >                dw      last_NFA            // Link to previous definition Name
 585+ 7214             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 585+ 7214 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 585+ 7216             >                else
 585+ 7216 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 585+ 7216             >                endif           ; ok        // for other definitions it "points" the correct handler
 585+ 7216             >                // Use of "; ok" to suppress "warning[fwdref]"
 585+ 7216             >
 585+ 7216             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 586+ 7216 43 64 0A 00                  dw      LIT, 10                 // 10
 587+ 721A C0 6E 0C 6C                  dw      BASE, STORE             // base !
 588+ 721E BD 69                        dw      EXIT                    // ;
 589+ 7220
 590+ 7220              //  ______________________________________________________________________
 591+ 7220              //
 592+ 7220              // (;code)       --
 593+ 7220              // patch to CFA to call/jump to the "following code"
 594+ 7220                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 594+ 7220             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 594+ 7220             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ 7220             >
 594+ 7220             >                // dummy db directives used to calculate length of namec
 594+ 7220 28 3B 43 4F >                db      "(;CODE)"
 594+ 7224 44 45 29    >
 594+ 7227             >len_NFA         defl    $ - temp_NFA
 594+ 7227             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ 7220             >
 594+ 7220 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ 7221 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 594+ 7225 44 45 29    >
 594+ 7228             >                org     $-1                 // alter last byte of Name just above to set
 594+ 7227 A9          >                db      {b $} | END_BIT     // msb as name end
 594+ 7228             >
 594+ 7228 0A 72       >                dw      last_NFA            // Link to previous definition Name
 594+ 722A             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 722A F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 722C             >                else
 594+ 722C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 594+ 722C             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 722C             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 722C             >
 594+ 722C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 722C FA 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 596+ 722E 84 70                        dw      LATEST                  // latest   ( Word being defined in this moment )
 597+ 7230 C2 70 A2 70                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 598+ 7234
 599+ 7234
 600+ 7234
 601+ 7234
 602+ 7234
 603+ 7234 0C 6C                        dw      STORE                   // !
 604+ 7236 BD 69                        dw      EXIT                    // ;
 605+ 7238
 606+ 7238              //  ______________________________________________________________________
 607+ 7238              //
 608+ 7238              // ;code        --
 609+ 7238                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 609+ 7238             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 609+ 7238             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ 7238             >
 609+ 7238             >                // dummy db directives used to calculate length of namec
 609+ 7238 3B 43 4F 44 >                db      ";CODE"
 609+ 723C 45          >
 609+ 723D             >len_NFA         defl    $ - temp_NFA
 609+ 723D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ 7238             >
 609+ 7238 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ 7239 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 609+ 723D 45          >
 609+ 723E             >                org     $-1                 // alter last byte of Name just above to set
 609+ 723D C5          >                db      {b $} | END_BIT     // msb as name end
 609+ 723E             >
 609+ 723E 20 72       >                dw      last_NFA            // Link to previous definition Name
 609+ 7240             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 7240 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 7242             >                else
 609+ 7242 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 609+ 7242             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 7242             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 7242             >
 609+ 7242             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 7242 64 71                        dw      QCSP                    // ?csp
 611+ 7244 9B 71                        dw      COMPILE                 // compile
 612+ 7246 2A 72                        dw      C_SEMICOLON_CODE        // (;code)
 613+ 7248 B1 71                        dw      SQUARED_OPEN            // [
 614+ 724A 18 6D                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 615+ 724C BD 69                        dw      EXIT                    // ; immediate
 616+ 724E
 617+ 724E              //  ______________________________________________________________________
 618+ 724E              //
 619+ 724E              // <builds      --
 620+ 724E                              Colon_Def CBUILDS, "<BUILDS", is_normal
 620+ 724E             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 620+ 724E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 620+ 724E             >
 620+ 724E             >                // dummy db directives used to calculate length of namec
 620+ 724E 3C 42 55 49 >                db      "<BUILDS"
 620+ 7252 4C 44 53    >
 620+ 7255             >len_NFA         defl    $ - temp_NFA
 620+ 7255             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 620+ 724E             >
 620+ 724E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 620+ 724F 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 620+ 7253 4C 44 53    >
 620+ 7256             >                org     $-1                 // alter last byte of Name just above to set
 620+ 7255 D3          >                db      {b $} | END_BIT     // msb as name end
 620+ 7256             >
 620+ 7256 38 72       >                dw      last_NFA            // Link to previous definition Name
 620+ 7258             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 620+ 7258 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 620+ 725A             >                else
 620+ 725A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 620+ 725A             >                endif           ; ok        // for other definitions it "points" the correct handler
 620+ 725A             >                // Use of "; ok" to suppress "warning[fwdref]"
 620+ 725A             >
 620+ 725A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 621+ 725A 6B 6D                        dw      ZERO                    // 0
 622+ 725C 27 6D                        dw      CONSTANT                // constant
 623+ 725E BD 69                        dw      EXIT                    // ;
 624+ 7260
 625+ 7260              //  ______________________________________________________________________
 626+ 7260              //
 627+ 7260              // recurse      --
 628+ 7260              //              Colon_Def RECURSE, "RECURSE", is_immediate
 629+ 7260              //              dw      QCOMP                   // ?comp
 630+ 7260              //              dw      LATEST                  // latest
 631+ 7260              //              dw      PFA, CFA                // pfa cfa
 632+ 7260              //              dw      COMMA                   // ,
 633+ 7260              //              dw      EXIT                    // ; immediate
 634+ 7260
 635+ 7260              //  ______________________________________________________________________
 636+ 7260              //
 637+ 7260              // does>     --
 638+ 7260                              Colon_Def DOES_TO, "DOES>", is_normal
 638+ 7260             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 638+ 7260             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 638+ 7260             >
 638+ 7260             >                // dummy db directives used to calculate length of namec
 638+ 7260 44 4F 45 53 >                db      "DOES>"
 638+ 7264 3E          >
 638+ 7265             >len_NFA         defl    $ - temp_NFA
 638+ 7265             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 638+ 7260             >
 638+ 7260 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 638+ 7261 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 638+ 7265 3E          >
 638+ 7266             >                org     $-1                 // alter last byte of Name just above to set
 638+ 7265 BE          >                db      {b $} | END_BIT     // msb as name end
 638+ 7266             >
 638+ 7266 4E 72       >                dw      last_NFA            // Link to previous definition Name
 638+ 7268             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 638+ 7268 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 638+ 726A             >                else
 638+ 726A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 638+ 726A             >                endif           ; ok        // for other definitions it "points" the correct handler
 638+ 726A             >                // Use of "; ok" to suppress "warning[fwdref]"
 638+ 726A             >
 638+ 726A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 639+ 726A FA 69                        dw      R_TO                    // r>
 640+ 726C 84 70                        dw      LATEST                  // latest
 641+ 726E C2 70                        dw      PFA                     // pfa
 642+ 7270 0C 6C                        dw      STORE                   // !
 643+ 7272 2A 72                        dw      C_SEMICOLON_CODE        // ;code
 644+ 7274              Does_Ptr:
 645+ 7274                              // via call coded in CFA
 646+ 7274                              ldhlrp
 646+ 7274 2A 30 64    >                ld      hl,(RP_Pointer)
 647+ 7277 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 648+ 7278 70                           ld      (hl), b
 649+ 7279 2B                           dec     hl
 650+ 727A 71                           ld      (hl), c
 651+ 727B                              ldrphl
 651+ 727B 22 30 64    >                ld      (RP_Pointer),hl
 652+ 727E 13                           inc     de
 653+ 727F EB                           ex      de, hl
 654+ 7280 4E                           ld      c, (hl)
 655+ 7281 23                           inc     hl
 656+ 7282 46                           ld      b, (hl)
 657+ 7283 23                           inc     hl
 658+ 7284
 659+ 7284                              psh1
 659+ 7284 E5          >                push    hl
 659+ 7285 DD E9       >                jp      (ix)
 660+ 7287                              // SMUDGE !
 661+ 7287
 662+ 7287              //  ______________________________________________________________________
 663+ 7287              //
 664+ 7287              // count        a -- a2 n
 665+ 7287              // expects a counted string at address a, returns string address and counter
 666+ 7287                              Colon_Def COUNT, "COUNT", is_normal
 666+ 7287             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 666+ 7287             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 666+ 7287             >
 666+ 7287             >                // dummy db directives used to calculate length of namec
 666+ 7287 43 4F 55 4E >                db      "COUNT"
 666+ 728B 54          >
 666+ 728C             >len_NFA         defl    $ - temp_NFA
 666+ 728C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 666+ 7287             >
 666+ 7287 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 666+ 7288 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 666+ 728C 54          >
 666+ 728D             >                org     $-1                 // alter last byte of Name just above to set
 666+ 728C D4          >                db      {b $} | END_BIT     // msb as name end
 666+ 728D             >
 666+ 728D 60 72       >                dw      last_NFA            // Link to previous definition Name
 666+ 728F             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 666+ 728F F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 666+ 7291             >                else
 666+ 7291 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 666+ 7291             >                endif           ; ok        // for other definitions it "points" the correct handler
 666+ 7291             >                // Use of "; ok" to suppress "warning[fwdref]"
 666+ 7291             >
 666+ 7291             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 667+ 7291 3B 6B                        dw      DUP                     // dup
 668+ 7293 7F 6A                        dw      ONE_PLUS                // 1+
 669+ 7295 2E 6B 1A 6C                  dw      SWAP, CFETCH             // swap @
 670+ 7299 BD 69                        dw      EXIT                    // ;
 671+ 729B
 672+ 729B              //  ______________________________________________________________________
 673+ 729B              //
 674+ 729B              // type         a n --
 675+ 729B              // Sends to current output channel n characters starting at address a.
 676+ 729B                              Colon_Def TYPE, "TYPE", is_normal
 676+ 729B             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 676+ 729B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 676+ 729B             >
 676+ 729B             >                // dummy db directives used to calculate length of namec
 676+ 729B 54 59 50 45 >                db      "TYPE"
 676+ 729F             >len_NFA         defl    $ - temp_NFA
 676+ 729F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 676+ 729B             >
 676+ 729B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 676+ 729C 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 676+ 72A0             >                org     $-1                 // alter last byte of Name just above to set
 676+ 729F C5          >                db      {b $} | END_BIT     // msb as name end
 676+ 72A0             >
 676+ 72A0 87 72       >                dw      last_NFA            // Link to previous definition Name
 676+ 72A2             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 676+ 72A2 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 676+ 72A4             >                else
 676+ 72A4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 676+ 72A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 676+ 72A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 676+ 72A4             >
 676+ 72A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 677+ 72A4 F6 6A                        dw      OVER                    // over
 678+ 72A6 56 6A                        dw      PLUS                    // +
 679+ 72A8 2E 6B                        dw      SWAP                    // swap
 680+ 72AA D7 64                        dw      C_Q_DO                  // ?do
 681+ 72AC 0C 00                        dw      Type_Skip - $
 682+ 72AE              Type_Loop:
 683+ 72AE 10 65 1A 6C                  dw          I, CFETCH           //      i c@
 684+ 72B2 32 70                        dw          EMIT                //      emit
 685+ 72B4 92 64                        dw      C_LOOP                  // loop
 686+ 72B6 F8 FF                        dw      Type_Loop - $
 687+ 72B8              Type_Skip:
 688+ 72B8 BD 69                        dw      EXIT                    // ;
 689+ 72BA
 690+ 72BA              //  ______________________________________________________________________
 691+ 72BA              //
 692+ 72BA              // -trailing    a n1 -- a n2
 693+ 72BA              // Assumes that an n1 bytes-long string is stored at address a
 694+ 72BA              // and the string contains a space delimited word,
 695+ 72BA              // Finds n2 as the position of the first character after the word.
 696+ 72BA                              Colon_Def LTRAILING, "-TRAILING", is_normal
 696+ 72BA             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 696+ 72BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 696+ 72BA             >
 696+ 72BA             >                // dummy db directives used to calculate length of namec
 696+ 72BA 2D 54 52 41 >                db      "-TRAILING"
 696+ 72BE 49 4C 49 4E >
 696+ 72C2 47          >
 696+ 72C3             >len_NFA         defl    $ - temp_NFA
 696+ 72C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 696+ 72BA             >
 696+ 72BA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 696+ 72BB 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 696+ 72BF 49 4C 49 4E >
 696+ 72C3 47          >
 696+ 72C4             >                org     $-1                 // alter last byte of Name just above to set
 696+ 72C3 C7          >                db      {b $} | END_BIT     // msb as name end
 696+ 72C4             >
 696+ 72C4 9B 72       >                dw      last_NFA            // Link to previous definition Name
 696+ 72C6             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 696+ 72C6 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 696+ 72C8             >                else
 696+ 72C8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 696+ 72C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 696+ 72C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 696+ 72C8             >
 696+ 72C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 697+ 72C8 3B 6B 6B 6D                  dw      DUP, ZERO               // dup 0
 698+ 72CC                                                              // do
 699+ 72CC 05 65                        dw      C_DO
 700+ 72CE              LTrailing_Loop:
 701+ 72CE A5 6B 56 6A                  dw          TWO_DUP, PLUS       //      2dup +
 702+ 72D2 8B 6A                        dw          ONE_SUBTRACT        //      1-
 703+ 72D4 1A 6C                        dw          CFETCH              //      c@
 704+ 72D6 95 6D 91 6F                  dw          BL, SUBTRACT        //      bl -
 705+ 72DA                                                              //      if
 706+ 72DA 7D 64                        dw          ZBRANCH
 707+ 72DC 08 00                        dw          LTrailing_Else - $
 708+ 72DE D3 69                        dw              LEAVE           //          leave
 709+ 72E0 66 64                        dw          BRANCH              //      else
 710+ 72E2 04 00                        dw          LTrailing_Endif - $
 711+ 72E4              LTrailing_Else:
 712+ 72E4 8B 6A                        dw              ONE_SUBTRACT    //          1-
 713+ 72E6              LTrailing_Endif:                                //      endif
 714+ 72E6                                                              // loop
 715+ 72E6 92 64                        dw      C_LOOP
 716+ 72E8 E6 FF                        dw      LTrailing_Loop - $
 717+ 72EA BD 69                        dw      EXIT                    // ;
 718+ 72EC
 719+ 72EC              //  ______________________________________________________________________
 720+ 72EC              //
 721+ 72EC              // accept       a n1 -- n2
 722+ 72EC              // Accepts at most n1 characters from terminal and stores them at address a
 723+ 72EC              // CR stops input. A 'nul' is added as trailer.
 724+ 72EC              // n2 is the string length. n2 is kept in span user variable also.
 725+ 72EC                              Colon_Def ACCEPT, "ACCEPT", is_normal
 725+ 72EC             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 725+ 72EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 725+ 72EC             >
 725+ 72EC             >                // dummy db directives used to calculate length of namec
 725+ 72EC 41 43 43 45 >                db      "ACCEPT"
 725+ 72F0 50 54       >
 725+ 72F2             >len_NFA         defl    $ - temp_NFA
 725+ 72F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 725+ 72EC             >
 725+ 72EC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 725+ 72ED 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 725+ 72F1 50 54       >
 725+ 72F3             >                org     $-1                 // alter last byte of Name just above to set
 725+ 72F2 D4          >                db      {b $} | END_BIT     // msb as name end
 725+ 72F3             >
 725+ 72F3 BA 72       >                dw      last_NFA            // Link to previous definition Name
 725+ 72F5             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 725+ 72F5 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 725+ 72F7             >                else
 725+ 72F7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 725+ 72F7             >                endif           ; ok        // for other definitions it "points" the correct handler
 725+ 72F7             >                // Use of "; ok" to suppress "warning[fwdref]"
 725+ 72F7             >
 725+ 72F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 726+ 72F7 F6 6A 56 6A                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 726+ 72FB F6 6A
 727+ 72FD 6B 6D 48 6B                  dw      ZERO, ROT, ROT          //                      ( a  0     a+n1  a )
 727+ 7301 48 6B
 728+ 7303                                                              // do
 729+ 7303 05 65                        dw      C_DO                    //                      ( a  0 )
 730+ 7305              Accept_Loop:
 731+ 7305 06 6B 1F 67                  dw          DROP, KEY           //      drop key        ( a  c )
 732+ 7309 3B 6B                        dw          DUP                 //      dup             ( a  c  c )
 733+ 730B 43 64 0E 00                  dw          LIT, $0E            //      0E
 734+ 730F D1 6D                        dw          PLUS_ORIGIN         //      +origin
 735+ 7311 FF 6B                        dw          FETCH               //      @               ( a  c  c  del )
 736+ 7313 9F 6F                        dw          EQUALS              //      =               ( a  c  c==del )
 737+ 7315                                                              //      if
 738+ 7315 7D 64                        dw          ZBRANCH
 739+ 7317 2A 00                        dw          Accept_Else_0 - $
 740+ 7319 06 6B                        dw              DROP            //          drop        ( a  )
 741+ 731B 3B 6B 10 65                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 741+ 731F 9F 6F
 742+ 7321 3B 6B                        dw              DUP             //          dup         ( a  a==i  a==i )
 743+ 7323 FA 69                        dw              R_TO            //          r> 2 - + r>
 744+ 7325 7B 6D 91 6F                  dw              TWO, SUBTRACT, PLUS //      ( decrement index by 1 or 2 )
 744+ 7329 56 6A
 745+ 732B E6 69                        dw              TO_R            //
 746+ 732D                                                              //          if
 747+ 732D 7D 64                        dw              ZBRANCH
 748+ 732F 0A 00                        dw              Accept_Else_1 - $
 749+ 7331 43 64 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 750+ 7335                                                              //          else
 751+ 7335 66 64                        dw              BRANCH
 752+ 7337 06 00                        dw              Accept_Endif_1 - $
 753+ 7339              Accept_Else_1:
 754+ 7339 43 64 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 755+ 733D              Accept_Endif_1:                                 //          endif
 756+ 733D 66 64                        dw          BRANCH
 757+ 733F 30 00                        dw          Accept_Endif_0 - $
 758+ 7341              Accept_Else_0:                                  //      else
 759+ 7341 3B 6B                        dw              DUP             //          dup         ( a  c  c )
 760+ 7343 43 64 0D 00                  dw              LIT, 13         //          13
 761+ 7347 9F 6F                        dw              EQUALS          //          =           ( a  c  c==CR )
 762+ 7349                                                              //          if
 763+ 7349 7D 64                        dw              ZBRANCH
 764+ 734B 0E 00                        dw              Accept_Else_2 - $
 765+ 734D 06 6B 95 6D                  dw                  DROP, BL    //              drop bl ( a  bl )
 766+ 7351 6B 6D                        dw                  ZERO        //              0       ( a  c  0 )
 767+ 7353 D3 69                        dw                  LEAVE       //              leave
 768+ 7355                                                              //          else
 769+ 7355 66 64                        dw              BRANCH
 770+ 7357 04 00                        dw              Accept_Endif_2 - $
 771+ 7359              Accept_Else_2:
 772+ 7359 3B 6B                        dw                  DUP         //              dup     ( a  c  c )
 773+ 735B                                                              //          endif
 774+ 735B              Accept_Endif_2:
 775+ 735B 10 65 28 6C                  dw              I, CSTORE       //          i           ( a  c )
 776+ 735F 3B 6B 95 6D                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 776+ 7363 C0 6F
 777+ 7365                                                              //          if
 778+ 7365 7D 64                        dw              ZBRANCH
 779+ 7367 08 00                        dw              Accept_Endif_3 - $
 780+ 7369 FA 69                        dw                  R_TO        //              r>
 781+ 736B 8B 6A                        dw                  ONE_SUBTRACT//              1-
 782+ 736D E6 69                        dw                  TO_R        //              >r
 783+ 736F                                                              //          endif
 784+ 736F              Accept_Endif_3:
 785+ 736F              Accept_Endif_0:                                 //      endif
 786+ 736F 32 70                        dw          EMIT                //      emit
 787+ 7371 6B 6D 10 65                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 787+ 7375 7F 6A
 788+ 7377 0C 6C                        dw          STORE               //          ( zero pad )
 789+ 7379 10 65                        dw          I                   //      i
 790+ 737B                                                              // loop
 791+ 737B 92 64                        dw      C_LOOP
 792+ 737D 88 FF                        dw      Accept_Loop - $
 793+ 737F 2E 6B 91 6F                  dw      SWAP, SUBTRACT          // swap -
 794+ 7383 7F 6A                        dw      ONE_PLUS                // 1+
 795+ 7385 3B 6B 2B 6F                  dw      DUP, SPAN, STORE        // dup span !
 795+ 7389 0C 6C
 796+ 738B BD 69                        dw      EXIT                    // ;
 797+ 738D
 798+ 738D              //  ______________________________________________________________________
 799+ 738D              //
 800+ 738D              // expect      a n --
 801+ 738D              // Accepts at most n1 characters from terminal and stores them at address a
 802+ 738D              // CR stops input. A 'nul' is added as trailer.
 803+ 738D              // n2 is the string length. n2 is kept in span user variable also.
 804+ 738D                              Colon_Def EXPECT, "EXPECT", is_normal
 804+ 738D             >                New_Def  EXPECT, "EXPECT", Enter_Ptr, is_normal ; ok
 804+ 738D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 804+ 738D             >
 804+ 738D             >                // dummy db directives used to calculate length of namec
 804+ 738D 45 58 50 45 >                db      "EXPECT"
 804+ 7391 43 54       >
 804+ 7393             >len_NFA         defl    $ - temp_NFA
 804+ 7393             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 804+ 738D             >
 804+ 738D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 804+ 738E 45 58 50 45 >                db      "EXPECT"               // name string in 7-bit ascii, but
 804+ 7392 43 54       >
 804+ 7394             >                org     $-1                 // alter last byte of Name just above to set
 804+ 7393 D4          >                db      {b $} | END_BIT     // msb as name end
 804+ 7394             >
 804+ 7394 EC 72       >                dw      last_NFA            // Link to previous definition Name
 804+ 7396             >EXPECT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 804+ 7396 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 804+ 7398             >                else
 804+ 7398 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 804+ 7398             >                endif           ; ok        // for other definitions it "points" the correct handler
 804+ 7398             >                // Use of "; ok" to suppress "warning[fwdref]"
 804+ 7398             >
 804+ 7398             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 805+ 7398 F5 72 06 6B                  dw      ACCEPT, DROP            // accept drop
 806+ 739C BD 69                        dw      EXIT                    // ;
 807+ 739E
 808+ 739E              //  ______________________________________________________________________
 809+ 739E              //
 810+ 739E              // query        --
 811+ 739E              // Accept at most 80 character from console. CR stops.
 812+ 739E              // Text is stored in TIB. Variable IN is zeroed.
 813+ 739E                              Colon_Def QUERY, "QUERY", is_normal
 813+ 739E             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 813+ 739E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 813+ 739E             >
 813+ 739E             >                // dummy db directives used to calculate length of namec
 813+ 739E 51 55 45 52 >                db      "QUERY"
 813+ 73A2 59          >
 813+ 73A3             >len_NFA         defl    $ - temp_NFA
 813+ 73A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 813+ 739E             >
 813+ 739E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 813+ 739F 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 813+ 73A3 59          >
 813+ 73A4             >                org     $-1                 // alter last byte of Name just above to set
 813+ 73A3 D9          >                db      {b $} | END_BIT     // msb as name end
 813+ 73A4             >
 813+ 73A4 8D 73       >                dw      last_NFA            // Link to previous definition Name
 813+ 73A6             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 813+ 73A6 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 813+ 73A8             >                else
 813+ 73A8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 813+ 73A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 813+ 73A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 813+ 73A8             >
 813+ 73A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 814+ 73A8 FE 6D FF 6B                  dw      TIB, FETCH              // tib @
 815+ 73AC 43 64 50 00                  dw      LIT, 80                 // 80
 816+ 73B0 96 73                        dw      EXPECT                  // expect
 817+ 73B2 6B 6D 73 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 817+ 73B6 0C 6C
 818+ 73B8 BD 69                        dw      EXIT                    // ;
 819+ 73BA
 820+ 73BA              //  ______________________________________________________________________
 821+ 73BA              //
 822+ 73BA              // fill        a n c --
 823+ 73BA              // If n > 0, fills n locations starting from address a with the value c.
 824+ 73BA                              New_Def FILL, "FILL", is_code, is_normal
 824+ 73BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 824+ 73BA             >
 824+ 73BA             >                // dummy db directives used to calculate length of namec
 824+ 73BA 46 49 4C 4C >                db      "FILL"
 824+ 73BE             >len_NFA         defl    $ - temp_NFA
 824+ 73BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 824+ 73BA             >
 824+ 73BA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 824+ 73BB 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 824+ 73BF             >                org     $-1                 // alter last byte of Name just above to set
 824+ 73BE CC          >                db      {b $} | END_BIT     // msb as name end
 824+ 73BF             >
 824+ 73BF 9E 73       >                dw      last_NFA            // Link to previous definition Name
 824+ 73C1             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 824+ 73C1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 824+ 73C1             >                else
 824+ 73C1 C3 73       >                dw      $ + 2   ; ok        // is pointed by CFA
 824+ 73C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 824+ 73C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 824+ 73C3             >
 824+ 73C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 825+ 73C3 69                           ld      l, c
 826+ 73C4 60                           ld      h, b
 827+ 73C5 D1                           pop     de                  // de has character
 828+ 73C6 C1                           pop     bc                  // bc has counter
 829+ 73C7 E3                           ex      (sp), hl            // hl has address, save Instruction Pointer
 830+ 73C8              Fill_Loop:
 831+ 73C8 78                               ld      a, b
 832+ 73C9 B1                               or      c
 833+ 73CA 28 05                        jr      z, Fill_While_End
 834+ 73CC 73                               ld      (hl), e
 835+ 73CD 0B                               dec     bc
 836+ 73CE 23                               inc     hl
 837+ 73CF 18 F7                        jr      Fill_Loop
 838+ 73D1              Fill_While_End:
 839+ 73D1 C1                           pop     bc                  // Restore Instruction Pointer
 840+ 73D2
 841+ 73D2                              next
 841+ 73D2 DD E9       >                jp      (ix)
 842+ 73D4
 843+ 73D4              //  ______________________________________________________________________
 844+ 73D4              //
 845+ 73D4              // erase        a n --
 846+ 73D4              // If n > 0, fills n locations starting from address a with 'nul' characters.
 847+ 73D4                              Colon_Def ERASE, "ERASE", is_normal
 847+ 73D4             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 847+ 73D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 847+ 73D4             >
 847+ 73D4             >                // dummy db directives used to calculate length of namec
 847+ 73D4 45 52 41 53 >                db      "ERASE"
 847+ 73D8 45          >
 847+ 73D9             >len_NFA         defl    $ - temp_NFA
 847+ 73D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 847+ 73D4             >
 847+ 73D4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 847+ 73D5 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 847+ 73D9 45          >
 847+ 73DA             >                org     $-1                 // alter last byte of Name just above to set
 847+ 73D9 C5          >                db      {b $} | END_BIT     // msb as name end
 847+ 73DA             >
 847+ 73DA BA 73       >                dw      last_NFA            // Link to previous definition Name
 847+ 73DC             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 847+ 73DC F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 847+ 73DE             >                else
 847+ 73DE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 847+ 73DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 847+ 73DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 847+ 73DE             >
 847+ 73DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 848+ 73DE 6B 6D C1 73                  dw      ZERO, FILL              // 0 fill
 849+ 73E2 BD 69                        dw      EXIT                    // ;
 850+ 73E4
 851+ 73E4              //  ______________________________________________________________________
 852+ 73E4              //
 853+ 73E4              // blanks       a n --
 854+ 73E4              // If n > 0, fills n locations starting from address a with 'nul' characters.
 855+ 73E4                              Colon_Def BLANKS, "BLANKS", is_normal
 855+ 73E4             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 855+ 73E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 855+ 73E4             >
 855+ 73E4             >                // dummy db directives used to calculate length of namec
 855+ 73E4 42 4C 41 4E >                db      "BLANKS"
 855+ 73E8 4B 53       >
 855+ 73EA             >len_NFA         defl    $ - temp_NFA
 855+ 73EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 855+ 73E4             >
 855+ 73E4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 855+ 73E5 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 855+ 73E9 4B 53       >
 855+ 73EB             >                org     $-1                 // alter last byte of Name just above to set
 855+ 73EA D3          >                db      {b $} | END_BIT     // msb as name end
 855+ 73EB             >
 855+ 73EB D4 73       >                dw      last_NFA            // Link to previous definition Name
 855+ 73ED             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 855+ 73ED F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 855+ 73EF             >                else
 855+ 73EF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 855+ 73EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 855+ 73EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 855+ 73EF             >
 855+ 73EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 856+ 73EF 95 6D C1 73                  dw      BL, FILL                // bl fill
 857+ 73F3 BD 69                        dw      EXIT                    // ;
 858+ 73F5
 859+ 73F5              //  ______________________________________________________________________
 860+ 73F5              //
 861+ 73F5              // hold         c --
 862+ 73F5              // Used between <# and #> to insert a character c in numeric formatting.
 863+ 73F5                              Colon_Def HOLD, "HOLD", is_normal
 863+ 73F5             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 863+ 73F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 863+ 73F5             >
 863+ 73F5             >                // dummy db directives used to calculate length of namec
 863+ 73F5 48 4F 4C 44 >                db      "HOLD"
 863+ 73F9             >len_NFA         defl    $ - temp_NFA
 863+ 73F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 863+ 73F5             >
 863+ 73F5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 863+ 73F6 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 863+ 73FA             >                org     $-1                 // alter last byte of Name just above to set
 863+ 73F9 C4          >                db      {b $} | END_BIT     // msb as name end
 863+ 73FA             >
 863+ 73FA E4 73       >                dw      last_NFA            // Link to previous definition Name
 863+ 73FC             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 863+ 73FC F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 863+ 73FE             >                else
 863+ 73FE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 863+ 73FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 863+ 73FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 863+ 73FE             >
 863+ 73FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 864+ 73FE 8C 6D                        dw      NEG_ONE                 // -1
 865+ 7400 EC 6E DC 6B                  dw      HLD, PLUSSTORE          // hld +!
 866+ 7404 EC 6E FF 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 866+ 7408 28 6C
 867+ 740A BD 69                        dw      EXIT                    // ;
 868+ 740C
 869+ 740C              //  ______________________________________________________________________
 870+ 740C              //
 871+ 740C              // pad         -- a
 872+ 740C              // leaves the buffer text address. This is at a fixed distance over HERE.
 873+ 740C                              Colon_Def PAD, "PAD", is_normal
 873+ 740C             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 873+ 740C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 873+ 740C             >
 873+ 740C             >                // dummy db directives used to calculate length of namec
 873+ 740C 50 41 44    >                db      "PAD"
 873+ 740F             >len_NFA         defl    $ - temp_NFA
 873+ 740F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 873+ 740C             >
 873+ 740C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 873+ 740D 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 873+ 7410             >                org     $-1                 // alter last byte of Name just above to set
 873+ 740F C4          >                db      {b $} | END_BIT     // msb as name end
 873+ 7410             >
 873+ 7410 F5 73       >                dw      last_NFA            // Link to previous definition Name
 873+ 7412             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 873+ 7412 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 873+ 7414             >                else
 873+ 7414 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 873+ 7414             >                endif           ; ok        // for other definitions it "points" the correct handler
 873+ 7414             >                // Use of "; ok" to suppress "warning[fwdref]"
 873+ 7414             >
 873+ 7414             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 874+ 7414 3D 6F                        dw      HERE                    // here
 875+ 7416 43 64 44 00                  dw      LIT, 68                 // 68
 876+ 741A 56 6A                        dw      PLUS                    // +
 877+ 741C BD 69                        dw      EXIT                    // ;
 878+ 741E
 879+ 741E              //  ______________________________________________________________________
 880+ 741E              //
 881+ 741E              // word         c -- a
 882+ 741E              // reads characters from input streams until it encouners a c delimiter.
 883+ 741E              // Stores that packet so it starts from HERE
 884+ 741E              // WORD leaves a counter as first byte and ends the packet with two spaces.
 885+ 741E              // Other occurrences of c are ignored.
 886+ 741E              // If BLK is zero, text is taken from terminal buffer TIB.
 887+ 741E              // Otherwise text is taken from the disk-block given by BLK.
 888+ 741E              // "in" variable is incremented of the number of character read.
 889+ 741E              // The number of characters read is given by ENCLOSE.
 890+ 741E                              Colon_Def WORD, "WORD", is_normal
 890+ 741E             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 890+ 741E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 890+ 741E             >
 890+ 741E             >                // dummy db directives used to calculate length of namec
 890+ 741E 57 4F 52 44 >                db      "WORD"
 890+ 7422             >len_NFA         defl    $ - temp_NFA
 890+ 7422             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 890+ 741E             >
 890+ 741E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 890+ 741F 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 890+ 7423             >                org     $-1                 // alter last byte of Name just above to set
 890+ 7422 C4          >                db      {b $} | END_BIT     // msb as name end
 890+ 7423             >
 890+ 7423 0C 74       >                dw      last_NFA            // Link to previous definition Name
 890+ 7425             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 890+ 7425 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 890+ 7427             >                else
 890+ 7427 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 890+ 7427             >                endif           ; ok        // for other definitions it "points" the correct handler
 890+ 7427             >                // Use of "; ok" to suppress "warning[fwdref]"
 890+ 7427             >
 890+ 7427             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 891+ 7427 6A 6E FF 6B                  dw      BLK, FETCH              // blk @
 892+ 742B                                                              // if
 893+ 742B 7D 64                        dw      ZBRANCH
 894+ 742D 0C 00                        dw      Word_Else - $
 895+ 742F 6A 6E FF 6B                  dw          BLK, FETCH          //      blk @
 896+ 7433 9C 7D                        dw          BLOCK               //      block ( forward )
 897+ 7435                                                              // else
 898+ 7435 66 64                        dw      BRANCH
 899+ 7437 06 00                        dw      Word_Endif - $
 900+ 7439              Word_Else:
 901+ 7439 FE 6D FF 6B                  dw         TIB, FETCH           //      tib @
 902+ 743D              Word_Endif:                                     // endif
 903+ 743D 73 6E FF 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 903+ 7441 56 6A
 904+ 7443 2E 6B F0 65                  dw      SWAP, ENCLOSE           // swap enclose
 905+ 7447 3D 6F 43 64                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 905+ 744B 22 00 ED 73
 906+ 744F 73 6E DC 6B                  dw      TO_IN, PLUSSTORE        // >in @ +
 907+ 7453 F6 6A 91 6F                  dw      OVER, SUBTRACT, TO_R    // over - >r
 907+ 7457 E6 69
 908+ 7459 0E 6A 3D 6F                  dw      R_OP, HERE, CSTORE      // r here c!
 908+ 745D 28 6C
 909+ 745F 56 6A                        dw      PLUS                    // +
 910+ 7461 3D 6F 7F 6A                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 910+ 7465 FA 69
 911+ 7467 AB 68                        dw      CMOVE                   // cmove
 912+ 7469 3D 6F                        dw      HERE                    // here
 913+ 746B BD 69                        dw      EXIT                    // ;
 914+ 746D
 915+ 746D              //  ______________________________________________________________________
 916+ 746D              //
 917+ 746D              // (.")         --
 918+ 746D              // Direct procedure compiled by ." and  .(  It executes TYPE.
 919+ 746D                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 919+ 746D             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 919+ 746D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 919+ 746D             >
 919+ 746D             >                // dummy db directives used to calculate length of namec
 919+ 746D 28 2E 22 29 >                db      '(.")'
 919+ 7471             >len_NFA         defl    $ - temp_NFA
 919+ 7471             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 919+ 746D             >
 919+ 746D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 919+ 746E 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 919+ 7472             >                org     $-1                 // alter last byte of Name just above to set
 919+ 7471 A9          >                db      {b $} | END_BIT     // msb as name end
 919+ 7472             >
 919+ 7472 1E 74       >                dw      last_NFA            // Link to previous definition Name
 919+ 7474             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 919+ 7474 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 919+ 7476             >                else
 919+ 7476 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 919+ 7476             >                endif           ; ok        // for other definitions it "points" the correct handler
 919+ 7476             >                // Use of "; ok" to suppress "warning[fwdref]"
 919+ 7476             >
 919+ 7476             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 920+ 7476 0E 6A 8F 72                  dw      R_OP, COUNT             // r count
 921+ 747A 3B 6B 7F 6A                  dw      DUP, ONE_PLUS           // dup 1+
 922+ 747E FA 69 56 6A                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 922+ 7482 E6 69
 923+ 7484 A2 72                        dw      TYPE                    // type
 924+ 7486 BD 69                        dw      EXIT                    // ;
 925+ 7488
 926+ 7488              //  ______________________________________________________________________
 927+ 7488              //
 928+ 7488              // char         -- c
 929+ 7488              // get first character from next input word
 930+ 7488                              Colon_Def CHAR,  "CHAR", is_normal
 930+ 7488             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 930+ 7488             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 930+ 7488             >
 930+ 7488             >                // dummy db directives used to calculate length of namec
 930+ 7488 43 48 41 52 >                db      "CHAR"
 930+ 748C             >len_NFA         defl    $ - temp_NFA
 930+ 748C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 930+ 7488             >
 930+ 7488 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 930+ 7489 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 930+ 748D             >                org     $-1                 // alter last byte of Name just above to set
 930+ 748C D2          >                db      {b $} | END_BIT     // msb as name end
 930+ 748D             >
 930+ 748D 6D 74       >                dw      last_NFA            // Link to previous definition Name
 930+ 748F             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 930+ 748F F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 930+ 7491             >                else
 930+ 7491 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 930+ 7491             >                endif           ; ok        // for other definitions it "points" the correct handler
 930+ 7491             >                // Use of "; ok" to suppress "warning[fwdref]"
 930+ 7491             >
 930+ 7491             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 931+ 7491 95 6D 25 74                  dw      BL, WORD                // bl word
 932+ 7495 7F 6A 1A 6C                  dw      ONE_PLUS, CFETCH        // 1+ c@
 933+ 7499 BD 69                        dw      EXIT                    // ;
 934+ 749B
 935+ 749B              //  ______________________________________________________________________
 936+ 749B              //
 937+ 749B              // ,"           --
 938+ 749B              // compiles a string terminated by " as a counted string from next input stream
 939+ 749B                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 939+ 749B             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 939+ 749B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 939+ 749B             >
 939+ 749B             >                // dummy db directives used to calculate length of namec
 939+ 749B 2C 22       >                db      ',"'
 939+ 749D             >len_NFA         defl    $ - temp_NFA
 939+ 749D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 939+ 749B             >
 939+ 749B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 939+ 749C 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 939+ 749E             >                org     $-1                 // alter last byte of Name just above to set
 939+ 749D A2          >                db      {b $} | END_BIT     // msb as name end
 939+ 749E             >
 939+ 749E 88 74       >                dw      last_NFA            // Link to previous definition Name
 939+ 74A0             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 939+ 74A0 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 939+ 74A2             >                else
 939+ 74A2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 939+ 74A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 939+ 74A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 939+ 74A2             >
 939+ 74A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 940+ 74A2 43 64 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 941+ 74A6 25 74                        dw      WORD                    // word
 942+ 74A8 1A 6C 7F 6A                  dw      CFETCH, ONE_PLUS        // c@ 1+
 943+ 74AC 4D 6F                        dw      ALLOT                   // allot
 944+ 74AE 6B 6D 6A 6F                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
 945+ 74B2 BD 69                        dw      EXIT
 946+ 74B4
 947+ 74B4              //  ______________________________________________________________________
 948+ 74B4              //
 949+ 74B4              // .c           c --
 950+ 74B4              // intermediate general purpose string builder, used by ." and .(
 951+ 74B4                              Colon_Def DOT_C,  ".C", is_immediate
 951+ 74B4             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
 951+ 74B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 951+ 74B4             >
 951+ 74B4             >                // dummy db directives used to calculate length of namec
 951+ 74B4 2E 43       >                db      ".C"
 951+ 74B6             >len_NFA         defl    $ - temp_NFA
 951+ 74B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 951+ 74B4             >
 951+ 74B4 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 951+ 74B5 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
 951+ 74B7             >                org     $-1                 // alter last byte of Name just above to set
 951+ 74B6 C3          >                db      {b $} | END_BIT     // msb as name end
 951+ 74B7             >
 951+ 74B7 9B 74       >                dw      last_NFA            // Link to previous definition Name
 951+ 74B9             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 951+ 74B9 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 951+ 74BB             >                else
 951+ 74BB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 951+ 74BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 951+ 74BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 951+ 74BB             >
 951+ 74BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 952+ 74BB B6 6E FF 6B                  dw      STATE, FETCH            // state @
 953+ 74BF                                                              // if
 954+ 74BF 7D 64                        dw      ZBRANCH
 955+ 74C1 12 00                        dw      Dot_C_Else - $
 956+ 74C3 9B 71 74 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
 957+ 74C7 25 74 1A 6C                  dw          WORD, CFETCH        //      word c@
 958+ 74CB 7F 6A 4D 6F                  dw          ONE_PLUS, ALLOT     //      1+ allot
 959+ 74CF                                                              // else
 960+ 74CF 66 64                        dw      BRANCH
 961+ 74D1 08 00                        dw      Dot_C_Endif - $
 962+ 74D3              Dot_C_Else:
 963+ 74D3 25 74 8F 72                  dw          WORD, COUNT, TYPE   //      word count type
 963+ 74D7 A2 72
 964+ 74D9              Dot_C_Endif:                                    // endif
 965+ 74D9 BD 69                        dw      EXIT                    ;
 966+ 74DB
 967+ 74DB              //  ______________________________________________________________________
 968+ 74DB              //
 969+ 74DB              // ."           c --
 970+ 74DB                              Colon_Def DOT_QUOTE,  '."', is_immediate
 970+ 74DB             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
 970+ 74DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 970+ 74DB             >
 970+ 74DB             >                // dummy db directives used to calculate length of namec
 970+ 74DB 2E 22       >                db      '."'
 970+ 74DD             >len_NFA         defl    $ - temp_NFA
 970+ 74DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 970+ 74DB             >
 970+ 74DB C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 970+ 74DC 2E 22       >                db      '."'               // name string in 7-bit ascii, but
 970+ 74DE             >                org     $-1                 // alter last byte of Name just above to set
 970+ 74DD A2          >                db      {b $} | END_BIT     // msb as name end
 970+ 74DE             >
 970+ 74DE B4 74       >                dw      last_NFA            // Link to previous definition Name
 970+ 74E0             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 970+ 74E0 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 970+ 74E2             >                else
 970+ 74E2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 970+ 74E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 970+ 74E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 970+ 74E2             >
 970+ 74E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 971+ 74E2 43 64 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 972+ 74E6 B9 74                        dw      DOT_C                   // [compile] .c
 973+ 74E8 BD 69                        dw      EXIT                    // ; immediate
 974+ 74EA
 975+ 74EA              //  ______________________________________________________________________
 976+ 74EA              //
 977+ 74EA              // .(           c --
 978+ 74EA                              Colon_Def DOT_BRACKET,  ".(", is_immediate
 978+ 74EA             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
 978+ 74EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ 74EA             >
 978+ 74EA             >                // dummy db directives used to calculate length of namec
 978+ 74EA 2E 28       >                db      ".("
 978+ 74EC             >len_NFA         defl    $ - temp_NFA
 978+ 74EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ 74EA             >
 978+ 74EA C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ 74EB 2E 28       >                db      ".("               // name string in 7-bit ascii, but
 978+ 74ED             >                org     $-1                 // alter last byte of Name just above to set
 978+ 74EC A8          >                db      {b $} | END_BIT     // msb as name end
 978+ 74ED             >
 978+ 74ED DB 74       >                dw      last_NFA            // Link to previous definition Name
 978+ 74EF             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 74EF F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 978+ 74F1             >                else
 978+ 74F1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 978+ 74F1             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 74F1             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 74F1             >
 978+ 74F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 74F1 43 64 29 00                  dw      LIT, ")"                // [char] )
 980+ 74F5 B9 74                        dw      DOT_C                   // [compile] .c
 981+ 74F7 BD 69                        dw      EXIT                    // ; immediate
 982+ 74F9
 983+ 74F9              //  ______________________________________________________________________
 984+ 74F9              //
 985+ 74F9              // (sgn)        a -- a f
 986+ 74F9              // determines if char in addr a is a sign (+ or -), and in that case increments
 987+ 74F9              // a flag. Returns f as the sign, true for negative, false for positive.
 988+ 74F9              // called by NUMBER and (EXP)
 989+ 74F9                              Colon_Def CSGN,  "(SGN)", is_normal
 989+ 74F9             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
 989+ 74F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 989+ 74F9             >
 989+ 74F9             >                // dummy db directives used to calculate length of namec
 989+ 74F9 28 53 47 4E >                db      "(SGN)"
 989+ 74FD 29          >
 989+ 74FE             >len_NFA         defl    $ - temp_NFA
 989+ 74FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 989+ 74F9             >
 989+ 74F9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 989+ 74FA 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
 989+ 74FE 29          >
 989+ 74FF             >                org     $-1                 // alter last byte of Name just above to set
 989+ 74FE A9          >                db      {b $} | END_BIT     // msb as name end
 989+ 74FF             >
 989+ 74FF EA 74       >                dw      last_NFA            // Link to previous definition Name
 989+ 7501             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 989+ 7501 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 989+ 7503             >                else
 989+ 7503 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 989+ 7503             >                endif           ; ok        // for other definitions it "points" the correct handler
 989+ 7503             >                // Use of "; ok" to suppress "warning[fwdref]"
 989+ 7503             >
 989+ 7503             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 990+ 7503 3B 6B 7F 6A                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
 990+ 7507 1A 6C
 991+ 7509 3B 6B 43 64                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
 991+ 750D 2D 00 9F 6F
 992+ 7511                                                              // if
 993+ 7511 7D 64                        dw      ZBRANCH
 994+ 7513 12 00                        dw      CSgn_Else_0 - $
 995+ 7515 06 6B                        dw          DROP                //      drop
 996+ 7517 7F 6A                        dw          ONE_PLUS            //      1+
 997+ 7519 73 6D C9 6E                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
 997+ 751D DC 6B
 998+ 751F 73 6D                        dw          ONE                 //      1
 999+ 7521                                                              // else
1000+ 7521 66 64                        dw      BRANCH
1001+ 7523 16 00                        dw      CSgn_Endif_0 - $
1002+ 7525              CSgn_Else_0:
1003+ 7525 43 64 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1003+ 7529 9F 6F
1004+ 752B                                                              //      if
1005+ 752B 7D 64                        dw          ZBRANCH
1006+ 752D 0A 00                        dw          CSgn_Endif_1 - $
1007+ 752F 7F 6A                        dw              ONE_PLUS        //          1+
1008+ 7531 73 6D C9 6E                  dw              ONE, DPL        //          1 dpl
1009+ 7535 DC 6B                        dw              PLUSSTORE       //          +!
1010+ 7537              CSgn_Endif_1                                    //      endif
1011+ 7537 6B 6D                        dw          ZERO                //      0
1012+ 7539              CSgn_Endif_0:                                   // endif
1013+ 7539 BD 69                        dw      EXIT
1014+ 753B
1015+ 753B              //  ______________________________________________________________________
1016+ 753B              //
1017+ 753B              // (number)     d a -- d1 a1
1018+ 753B              // using the current BASE parse characters stored in address a
1019+ 753B              // accumulating a double precision integer d
1020+ 753B              // the process stops at the first not-convertible character
1021+ 753B              // A double-number is kept in CPU registers as HLDE.
1022+ 753B              // On the stack a double number is treated as two single numbers
1023+ 753B              // where HL is on the top of the stack and DE is the second from top,
1024+ 753B              // so in the stack memory it appears as LHED.
1025+ 753B              // Instead, in 2VARIABLE a double number is stored as EDLH.
1026+ 753B                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1026+ 753B             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1026+ 753B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1026+ 753B             >
1026+ 753B             >                // dummy db directives used to calculate length of namec
1026+ 753B 28 4E 55 4D >                db      "(NUMBER)"
1026+ 753F 42 45 52 29 >
1026+ 7543             >len_NFA         defl    $ - temp_NFA
1026+ 7543             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1026+ 753B             >
1026+ 753B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1026+ 753C 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1026+ 7540 42 45 52 29 >
1026+ 7544             >                org     $-1                 // alter last byte of Name just above to set
1026+ 7543 A9          >                db      {b $} | END_BIT     // msb as name end
1026+ 7544             >
1026+ 7544 F9 74       >                dw      last_NFA            // Link to previous definition Name
1026+ 7546             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1026+ 7546 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1026+ 7548             >                else
1026+ 7548 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1026+ 7548             >                endif           ; ok        // for other definitions it "points" the correct handler
1026+ 7548             >                // Use of "; ok" to suppress "warning[fwdref]"
1026+ 7548             >
1026+ 7548             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1027+ 7548                                                              // begin
1028+ 7548              CNumber_Begin:
1029+ 7548 7F 6A                        dw          ONE_PLUS            //      1+
1030+ 754A 3B 6B E6 69                  dw          DUP, TO_R           //      dup >r
1031+ 754E 1A 6C                        dw          CFETCH              //      @
1032+ 7550 C0 6E FF 6B                  dw          BASE, FETCH         //      base @
1033+ 7554 23 65                        dw          DIGIT               //      digit
1034+ 7556                                                              // while
1035+ 7556 7D 64                        dw      ZBRANCH
1036+ 7558 2C 00                        dw      CNumber_While_end - $
1037+ 755A 2E 6B                        dw          SWAP                //      swap
1038+ 755C C0 6E FF 6B                  dw          BASE, FETCH         //      base @
1039+ 7560 E0 68                        dw          UM_MUL              //      um*
1040+ 7562 06 6B 48 6B                  dw          DROP, ROT           //      drop rot
1041+ 7566 C0 6E FF 6B                  dw          BASE, FETCH         //      base @
1042+ 756A E0 68                        dw          UM_MUL              //      um*
1043+ 756C 63 6A                        dw          DPLUS               //      d+
1044+ 756E C9 6E FF 6B                  dw          DPL, FETCH          //      dpl @
1045+ 7572 7F 6A                        dw          ONE_PLUS            //      1+
1046+ 7574                                                              //      if
1047+ 7574 7D 64                        dw          ZBRANCH
1048+ 7576 08 00                        dw          CNumber_Endif - $
1049+ 7578 73 6D C9 6E                  dw              ONE, DPL        //          1 dpl
1050+ 757C DC 6B                        dw              PLUSSTORE       //          +!
1051+ 757E              CNumber_Endif:                                  //      endif
1052+ 757E FA 69                        dw             R_TO             //      r>  ( balance rp )
1053+ 7580 66 64                        dw      BRANCH
1054+ 7582 C6 FF                        dw      CNumber_Begin - $
1055+ 7584              CNumber_While_end:                              // repeat
1056+ 7584 FA 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1057+ 7586 BD 69                        dw      EXIT                    // ;
1058+ 7588
1059+ 7588              //  ______________________________________________________________________
1060+ 7588              //
1061+ 7588              // number       a -- d
1062+ 7588                              Colon_Def NUMBER,  "NUMBER", is_normal
1062+ 7588             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1062+ 7588             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1062+ 7588             >
1062+ 7588             >                // dummy db directives used to calculate length of namec
1062+ 7588 4E 55 4D 42 >                db      "NUMBER"
1062+ 758C 45 52       >
1062+ 758E             >len_NFA         defl    $ - temp_NFA
1062+ 758E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1062+ 7588             >
1062+ 7588 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1062+ 7589 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1062+ 758D 45 52       >
1062+ 758F             >                org     $-1                 // alter last byte of Name just above to set
1062+ 758E D2          >                db      {b $} | END_BIT     // msb as name end
1062+ 758F             >
1062+ 758F 3B 75       >                dw      last_NFA            // Link to previous definition Name
1062+ 7591             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1062+ 7591 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1062+ 7593             >                else
1062+ 7593 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1062+ 7593             >                endif           ; ok        // for other definitions it "points" the correct handler
1062+ 7593             >                // Use of "; ok" to suppress "warning[fwdref]"
1062+ 7593             >
1062+ 7593             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1063+ 7593 6B 6D 6B 6D                  dw      ZERO, ZERO              // 0 0
1064+ 7597 48 6B                        dw      ROT                     // rot
1065+ 7599 01 75 E6 69                  dw      CSGN, TO_R              // (sgn) >r
1066+ 759D 8C 6D C9 6E                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1066+ 75A1 0C 6C
1067+ 75A3 46 75                        dw      CNUMBER                 // (number)
1068+ 75A5 3B 6B 1A 6C                  dw      DUP, CFETCH             // dup c@
1069+ 75A9 43 64 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1069+ 75AD 9F 6F
1070+ 75AF                                                              // if
1071+ 75AF 7D 64                        dw      ZBRANCH
1072+ 75B1 0A 00                        dw      Number_Endif_1 - $
1073+ 75B3 6B 6D C9 6E                  dw          ZERO, DPL, STORE    //      0 dpl !
1073+ 75B7 0C 6C
1074+ 75B9 46 75                        dw          CNUMBER             //      (number)
1075+ 75BB              Number_Endif_1:                                 // endif
1076+ 75BB 1A 6C 95 6D                  dw      CFETCH, BL              // c@ bl
1077+ 75BF 91 6F 6B 6D                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1077+ 75C3 08 71
1078+ 75C5 FA 69                        dw      R_TO                    // r>
1079+ 75C7                                                              // if
1080+ 75C7 7D 64                        dw      ZBRANCH
1081+ 75C9 04 00                        dw      Number_Endif_2 - $
1082+ 75CB D8 6A                        dw          DMINUS              //      dminus
1083+ 75CD              Number_Endif_2:                                 // endif
1084+ 75CD BD 69                        dw      EXIT                    // ;
1085+ 75CF
1086+ 75CF              //  ______________________________________________________________________
1087+ 75CF              //
1088+ 75CF              // -find        a -- d
1089+ 75CF                              Colon_Def LFIND,  "-FIND", is_normal
1089+ 75CF             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1089+ 75CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1089+ 75CF             >
1089+ 75CF             >                // dummy db directives used to calculate length of namec
1089+ 75CF 2D 46 49 4E >                db      "-FIND"
1089+ 75D3 44          >
1089+ 75D4             >len_NFA         defl    $ - temp_NFA
1089+ 75D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1089+ 75CF             >
1089+ 75CF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1089+ 75D0 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1089+ 75D4 44          >
1089+ 75D5             >                org     $-1                 // alter last byte of Name just above to set
1089+ 75D4 C4          >                db      {b $} | END_BIT     // msb as name end
1089+ 75D5             >
1089+ 75D5 88 75       >                dw      last_NFA            // Link to previous definition Name
1089+ 75D7             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1089+ 75D7 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1089+ 75D9             >                else
1089+ 75D9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1089+ 75D9             >                endif           ; ok        // for other definitions it "points" the correct handler
1089+ 75D9             >                // Use of "; ok" to suppress "warning[fwdref]"
1089+ 75D9             >
1089+ 75D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1090+ 75D9 95 6D 25 74                  dw      BL, WORD                // bl word
1091+ 75DD 9E 6E FF 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1091+ 75E1 FF 6B
1092+ 75E3 98 65                        dw      C_FIND                  // (find)
1093+ 75E5 29 70                        dw      QDUP                    // ?dup
1094+ 75E7 1B 6A                        dw      ZEQUAL                  // 0=
1095+ 75E9                                                              // if
1096+ 75E9 7D 64                        dw      ZBRANCH
1097+ 75EB 08 00                        dw      LFind_Endif - $
1098+ 75ED 3D 6F                        dw          HERE                //      here
1099+ 75EF 84 70                        dw          LATEST              //      latest
1100+ 75F1 98 65                        dw          C_FIND              //      (find)
1101+ 75F3              LFind_Endif:                                    // endif
1102+ 75F3 BD 69                        dw      EXIT                    // ;
1103+ 75F5
1104+ 75F5              //  ______________________________________________________________________
1105+ 75F5              //
1106+ 75F5              // (abort)      --
1107+ 75F5                              Colon_Def CABORT,  "(ABORT)", is_normal
1107+ 75F5             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1107+ 75F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1107+ 75F5             >
1107+ 75F5             >                // dummy db directives used to calculate length of namec
1107+ 75F5 28 41 42 4F >                db      "(ABORT)"
1107+ 75F9 52 54 29    >
1107+ 75FC             >len_NFA         defl    $ - temp_NFA
1107+ 75FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1107+ 75F5             >
1107+ 75F5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1107+ 75F6 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1107+ 75FA 52 54 29    >
1107+ 75FD             >                org     $-1                 // alter last byte of Name just above to set
1107+ 75FC A9          >                db      {b $} | END_BIT     // msb as name end
1107+ 75FD             >
1107+ 75FD CF 75       >                dw      last_NFA            // Link to previous definition Name
1107+ 75FF             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1107+ 75FF F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1107+ 7601             >                else
1107+ 7601 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1107+ 7601             >                endif           ; ok        // for other definitions it "points" the correct handler
1107+ 7601             >                // Use of "; ok" to suppress "warning[fwdref]"
1107+ 7601             >
1107+ 7601             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1108+ 7601 D4 78                        dw      ABORT                   // abort
1109+ 7603 BD 69                        dw      EXIT                    // ;
1110+ 7605
1111+ 7605              //  ______________________________________________________________________
1112+ 7605              //
1113+ 7605              // error        n --
1114+ 7605              // raise an error
1115+ 7605              // if WARNING is 0, prints "MSG#n".
1116+ 7605              // if WARNING is 1, prints line n of screen 4.
1117+ 7605              // if WARNING is -1 does (ABORT) that normally does ABORT
1118+ 7605              // value can be negative or beyond block 4.
1119+ 7605                              Colon_Def ERROR,  "ERROR", is_normal
1119+ 7605             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1119+ 7605             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1119+ 7605             >
1119+ 7605             >                // dummy db directives used to calculate length of namec
1119+ 7605 45 52 52 4F >                db      "ERROR"
1119+ 7609 52          >
1119+ 760A             >len_NFA         defl    $ - temp_NFA
1119+ 760A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1119+ 7605             >
1119+ 7605 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1119+ 7606 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1119+ 760A 52          >
1119+ 760B             >                org     $-1                 // alter last byte of Name just above to set
1119+ 760A D2          >                db      {b $} | END_BIT     // msb as name end
1119+ 760B             >
1119+ 760B F5 75       >                dw      last_NFA            // Link to previous definition Name
1119+ 760D             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1119+ 760D F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1119+ 760F             >                else
1119+ 760F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1119+ 760F             >                endif           ; ok        // for other definitions it "points" the correct handler
1119+ 760F             >                // Use of "; ok" to suppress "warning[fwdref]"
1119+ 760F             >
1119+ 760F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1120+ 760F 16 6E FF 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1120+ 7613 2E 6A
1121+ 7615                                                              // if
1122+ 7615 7D 64                        dw      ZBRANCH
1123+ 7617 04 00                        dw      Error_Endif_1 - $
1124+ 7619 FF 75                        dw          CABORT              //      (abort)
1125+ 761B              Error_Endif_1:                                  // endif
1126+ 761B 3D 6F 8F 72                  dw      HERE, COUNT, TYPE       // here count type
1126+ 761F A2 72
1127+ 7621 74 74                        dw      C_DOT_QUOTE             // .( ? )
1128+ 7623 02 3F 20                     db      2, "? "
1129+ 7626 C7 7A                        dw      MESSAGE                 // message  ( forward )
1130+ 7628 ED 6D FF 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1130+ 762C 96 69
1131+ 762E 6A 6E FF 6B                  dw      BLK, FETCH, LDUP        // blk @ -dup
1131+ 7632 17 70
1132+ 7634                                                              // if
1133+ 7634 7D 64                        dw      ZBRANCH
1134+ 7636 08 00                        dw      Error_Endif_2 - $
1135+ 7638 73 6E FF 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1135+ 763C 2E 6B
1136+ 763E              Error_Endif_2:                                  // endif
1137+ 763E 93 78                        dw      QUIT                    // quit ( forward )
1138+ 7640 BD 69                        dw      EXIT                    // ;
1139+ 7642              //  ______________________________________________________________________
1140+ 7642              //
1141+ 7642              // id.          nfa --
1142+ 7642                              Colon_Def ID_DOT,  "ID.", is_normal
1142+ 7642             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1142+ 7642             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1142+ 7642             >
1142+ 7642             >                // dummy db directives used to calculate length of namec
1142+ 7642 49 44 2E    >                db      "ID."
1142+ 7645             >len_NFA         defl    $ - temp_NFA
1142+ 7645             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1142+ 7642             >
1142+ 7642 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1142+ 7643 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1142+ 7646             >                org     $-1                 // alter last byte of Name just above to set
1142+ 7645 AE          >                db      {b $} | END_BIT     // msb as name end
1142+ 7646             >
1142+ 7646 05 76       >                dw      last_NFA            // Link to previous definition Name
1142+ 7648             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1142+ 7648 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1142+ 764A             >                else
1142+ 764A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1142+ 764A             >                endif           ; ok        // for other definitions it "points" the correct handler
1142+ 764A             >                // Use of "; ok" to suppress "warning[fwdref]"
1142+ 764A             >
1142+ 764A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1143+ 764A 12 74 43 64                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1143+ 764E 20 00 43 64
1143+ 7652 60 00
1144+ 7654 C1 73                        dw      FILL                    // fill
1145+ 7656 3B 6B C2 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1145+ 765A 94 70
1146+ 765C F6 6A 91 6F                  dw      OVER, SUBTRACT          // over -
1147+ 7660 12 74 2E 6B                  dw      PAD, SWAP               // pad swap
1148+ 7664 AB 68                        dw      CMOVE                   // cmove
1149+ 7666 12 74 8F 72                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1149+ 766A 43 64 1F 00
1150+ 766E 4F 69                        dw      AND_OP                  // and  ( use only lower bits )
1151+ 7670 A2 72 4E 70                  dw      TYPE, SPACE             // type
1152+ 7674 BD 69                        dw      EXIT                    // ;
1153+ 7676
1154+ 7676              //  ______________________________________________________________________
1155+ 7676              //
1156+ 7676              // code         -- cccc
1157+ 7676                              Colon_Def CODE,  "CODE", is_normal
1157+ 7676             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1157+ 7676             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1157+ 7676             >
1157+ 7676             >                // dummy db directives used to calculate length of namec
1157+ 7676 43 4F 44 45 >                db      "CODE"
1157+ 767A             >len_NFA         defl    $ - temp_NFA
1157+ 767A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1157+ 7676             >
1157+ 7676 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1157+ 7677 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1157+ 767B             >                org     $-1                 // alter last byte of Name just above to set
1157+ 767A C5          >                db      {b $} | END_BIT     // msb as name end
1157+ 767B             >
1157+ 767B 42 76       >                dw      last_NFA            // Link to previous definition Name
1157+ 767D             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1157+ 767D F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1157+ 767F             >                else
1157+ 767F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1157+ 767F             >                endif           ; ok        // for other definitions it "points" the correct handler
1157+ 767F             >                // Use of "; ok" to suppress "warning[fwdref]"
1157+ 767F             >
1157+ 767F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1158+ 767F D7 75                        dw      LFIND                   // -find
1159+ 7681                                                              // if
1160+ 7681 7D 64                        dw      ZBRANCH
1161+ 7683 10 00                        dw      Code_Endif - $
1162+ 7685 06 6B                        dw          DROP                //      drop
1163+ 7687 E6 70 48 76                  dw          TO_NAME, ID_DOT     //      >name id.
1164+ 768B 43 64 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1164+ 768F C7 7A
1165+ 7691 4E 70                        dw          SPACE               //      space
1166+ 7693              Code_Endif:                                     // endif
1167+ 7693 3D 6F                        dw      HERE                    // here
1168+ 7695                                                              // ( ---- here begins NFA ---- )
1169+ 7695 3B 6B 1A 6C                  dw      DUP, CFETCH             // dup c@
1170+ 7699 09 6E FF 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1170+ 769D EA 6F
1171+ 769F 7F 6A 4D 6F                  dw      ONE_PLUS, ALLOT         // 1+ allot
1172+ 76A3 3B 6B                        dw      DUP                     // dup
1173+ 76A5 43 64                        dw      LIT
1174+ 76A7 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1175+ 76A9 F2 6B                        dw      TOGGLE                  // toggle
1176+ 76AB 3D 6F 8B 6A                  dw      HERE, ONE_SUBTRACT     // here 1- ( last character )
1177+ 76AF 43 64 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1177+ 76B3 F2 6B
1178+ 76B5                                                              // ( ---- here is LFA ---- )
1179+ 76B5 84 70 59 6F                  dw      LATEST, COMMA           // latest ,
1180+ 76B9 AB 6E FF 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1180+ 76BD 0C 6C
1181+ 76BF 3D 6F A7 6A                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1181+ 76C3 59 6F
1182+ 76C5 BD 69                        dw      EXIT                    // ;
1183+ 76C7
1184+ 76C7              //  ______________________________________________________________________
1185+ 76C7              //
1186+ 76C7              // create       -- cccc     ( compile time )
1187+ 76C7              //              -- a        ( run time )
1188+ 76C7                              Colon_Def CREATE,  "CREATE", is_normal
1188+ 76C7             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1188+ 76C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1188+ 76C7             >
1188+ 76C7             >                // dummy db directives used to calculate length of namec
1188+ 76C7 43 52 45 41 >                db      "CREATE"
1188+ 76CB 54 45       >
1188+ 76CD             >len_NFA         defl    $ - temp_NFA
1188+ 76CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1188+ 76C7             >
1188+ 76C7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1188+ 76C8 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1188+ 76CC 54 45       >
1188+ 76CE             >                org     $-1                 // alter last byte of Name just above to set
1188+ 76CD C5          >                db      {b $} | END_BIT     // msb as name end
1188+ 76CE             >
1188+ 76CE 76 76       >                dw      last_NFA            // Link to previous definition Name
1188+ 76D0             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1188+ 76D0 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1188+ 76D2             >                else
1188+ 76D2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1188+ 76D2             >                endif           ; ok        // for other definitions it "points" the correct handler
1188+ 76D2             >                // Use of "; ok" to suppress "warning[fwdref]"
1188+ 76D2             >
1188+ 76D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1189+ 76D2 7D 76 D4 71                  dw      CODE, SMUDGE        // code smudge
1190+ 76D6
1191+ 76D6
1192+ 76D6 2A 72                        dw      C_SEMICOLON_CODE
1193+ 76D8                              // this routine is called from the call coded in CFA
1194+ 76D8              Create_Ptr:
1195+ 76D8 13                           inc     de
1196+ 76D9 D5                           push    de                  // balance TOS before overwrite it
1197+ 76DA
1198+ 76DA                              next
1198+ 76DA DD E9       >                jp      (ix)
1199+ 76DC
1200+ 76DC              //  ______________________________________________________________________
1201+ 76DC              //
1202+ 76DC              // [compile]    -- cccc     ( compile time )
1203+ 76DC                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1203+ 76DC             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1203+ 76DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1203+ 76DC             >
1203+ 76DC             >                // dummy db directives used to calculate length of namec
1203+ 76DC 5B 43 4F 4D >                db      "[COMPILE]"
1203+ 76E0 50 49 4C 45 >
1203+ 76E4 5D          >
1203+ 76E5             >len_NFA         defl    $ - temp_NFA
1203+ 76E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1203+ 76DC             >
1203+ 76DC C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1203+ 76DD 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1203+ 76E1 50 49 4C 45 >
1203+ 76E5 5D          >
1203+ 76E6             >                org     $-1                 // alter last byte of Name just above to set
1203+ 76E5 DD          >                db      {b $} | END_BIT     // msb as name end
1203+ 76E6             >
1203+ 76E6 C7 76       >                dw      last_NFA            // Link to previous definition Name
1203+ 76E8             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1203+ 76E8 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1203+ 76EA             >                else
1203+ 76EA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1203+ 76EA             >                endif           ; ok        // for other definitions it "points" the correct handler
1203+ 76EA             >                // Use of "; ok" to suppress "warning[fwdref]"
1203+ 76EA             >
1203+ 76EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1204+ 76EA D7 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1205+ 76EC 1B 6A                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1206+ 76EE 6B 6D 08 71                  dw      ZERO, QERROR            // 0 ?error
1207+ 76F2 06 6B                        dw      DROP                    // drop       (  cfa  )
1208+ 76F4 59 6F                        dw      COMMA                   // ,
1209+ 76F6 BD 69                        dw      EXIT                    // ; immediate
1210+ 76F8
1211+ 76F8              //  ______________________________________________________________________
1212+ 76F8              //
1213+ 76F8              // literal      n --      ( compile time )
1214+ 76F8                              Colon_Def LITERAL,  "LITERAL", is_immediate
1214+ 76F8             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1214+ 76F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1214+ 76F8             >
1214+ 76F8             >                // dummy db directives used to calculate length of namec
1214+ 76F8 4C 49 54 45 >                db      "LITERAL"
1214+ 76FC 52 41 4C    >
1214+ 76FF             >len_NFA         defl    $ - temp_NFA
1214+ 76FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1214+ 76F8             >
1214+ 76F8 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1214+ 76F9 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1214+ 76FD 52 41 4C    >
1214+ 7700             >                org     $-1                 // alter last byte of Name just above to set
1214+ 76FF CC          >                db      {b $} | END_BIT     // msb as name end
1214+ 7700             >
1214+ 7700 DC 76       >                dw      last_NFA            // Link to previous definition Name
1214+ 7702             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1214+ 7702 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1214+ 7704             >                else
1214+ 7704 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1214+ 7704             >                endif           ; ok        // for other definitions it "points" the correct handler
1214+ 7704             >                // Use of "; ok" to suppress "warning[fwdref]"
1214+ 7704             >
1214+ 7704             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1215+ 7704 B6 6E FF 6B                  dw      STATE, FETCH            // state @
1216+ 7708                                                              // if
1217+ 7708 7D 64                        dw      ZBRANCH
1218+ 770A 08 00                        dw      Literal_Endif - $
1219+ 770C 9B 71 43 64                  dw          COMPILE, LIT        //      compile lit
1220+ 7710 59 6F                        dw          COMMA               //      ,
1221+ 7712              Literal_Endif:                                  // endif
1222+ 7712 BD 69                        dw      EXIT                    // ; immediate
1223+ 7714
1224+ 7714              //  ______________________________________________________________________
1225+ 7714              //
1226+ 7714              // dliteral     n --      ( compile time )
1227+ 7714                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1227+ 7714             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1227+ 7714             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1227+ 7714             >
1227+ 7714             >                // dummy db directives used to calculate length of namec
1227+ 7714 44 4C 49 54 >                db      "DLITERAL"
1227+ 7718 45 52 41 4C >
1227+ 771C             >len_NFA         defl    $ - temp_NFA
1227+ 771C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1227+ 7714             >
1227+ 7714 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1227+ 7715 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1227+ 7719 45 52 41 4C >
1227+ 771D             >                org     $-1                 // alter last byte of Name just above to set
1227+ 771C CC          >                db      {b $} | END_BIT     // msb as name end
1227+ 771D             >
1227+ 771D F8 76       >                dw      last_NFA            // Link to previous definition Name
1227+ 771F             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1227+ 771F F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1227+ 7721             >                else
1227+ 7721 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1227+ 7721             >                endif           ; ok        // for other definitions it "points" the correct handler
1227+ 7721             >                // Use of "; ok" to suppress "warning[fwdref]"
1227+ 7721             >
1227+ 7721             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1228+ 7721 B6 6E FF 6B                  dw      STATE, FETCH            // state @
1229+ 7725                                                              // if
1230+ 7725 7D 64                        dw      ZBRANCH
1231+ 7727 08 00                        dw      DLiteral_Endif - $
1232+ 7729 2E 6B                        dw          SWAP                //      swap
1233+ 772B 02 77 02 77                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1234+ 772F              DLiteral_Endif:                                 // endif
1235+ 772F BD 69                        dw      EXIT                    // ; immediate
1236+ 7731
1237+ 7731              //  ______________________________________________________________________
1238+ 7731              //
1239+ 7731              // [char]       n --      ( compile time )
1240+ 7731              // inside colon definition, gets first character from next input word
1241+ 7731              // and compiles it as literal.
1242+ 7731                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1242+ 7731             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1242+ 7731             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1242+ 7731             >
1242+ 7731             >                // dummy db directives used to calculate length of namec
1242+ 7731 5B 43 48 41 >                db      "[CHAR]"
1242+ 7735 52 5D       >
1242+ 7737             >len_NFA         defl    $ - temp_NFA
1242+ 7737             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1242+ 7731             >
1242+ 7731 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1242+ 7732 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1242+ 7736 52 5D       >
1242+ 7738             >                org     $-1                 // alter last byte of Name just above to set
1242+ 7737 DD          >                db      {b $} | END_BIT     // msb as name end
1242+ 7738             >
1242+ 7738 14 77       >                dw      last_NFA            // Link to previous definition Name
1242+ 773A             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1242+ 773A F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1242+ 773C             >                else
1242+ 773C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1242+ 773C             >                endif           ; ok        // for other definitions it "points" the correct handler
1242+ 773C             >                // Use of "; ok" to suppress "warning[fwdref]"
1242+ 773C             >
1242+ 773C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1243+ 773C 8F 74 02 77                  dw      CHAR, LITERAL           // char [compile] literal
1244+ 7740 BD 69                        dw      EXIT                    // ; immediate
1245+ 7742
1246+ 7742              //  ______________________________________________________________________
1247+ 7742              //
1248+ 7742              // 0x00         n --      ( compile time )
1249+ 7742                              Colon_Def NUL_WORD,  $00, is_immediate
1249+ 7742             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1249+ 7742             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1249+ 7742             >
1249+ 7742             >                // dummy db directives used to calculate length of namec
1249+ 7742 00          >                db      $00
1249+ 7743             >len_NFA         defl    $ - temp_NFA
1249+ 7743             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1249+ 7742             >
1249+ 7742 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1249+ 7743 00          >                db      $00               // name string in 7-bit ascii, but
1249+ 7744             >                org     $-1                 // alter last byte of Name just above to set
1249+ 7743 80          >                db      {b $} | END_BIT     // msb as name end
1249+ 7744             >
1249+ 7744 31 77       >                dw      last_NFA            // Link to previous definition Name
1249+ 7746             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1249+ 7746 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1249+ 7748             >                else
1249+ 7748 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1249+ 7748             >                endif           ; ok        // for other definitions it "points" the correct handler
1249+ 7748             >                // Use of "; ok" to suppress "warning[fwdref]"
1249+ 7748             >
1249+ 7748             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1250+ 7748 6A 6E FF 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1250+ 774C 73 6D
1251+ 774E DC 6F                        dw      GREATER                 // > if
1252+ 7750                                                              // if
1253+ 7750 7D 64                        dw      ZBRANCH
1254+ 7752 28 00                        dw      Nul_Else_1 - $
1255+ 7754 73 6D 6A 6E                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1255+ 7758 DC 6B
1256+ 775A 6B 6D 73 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
1256+ 775E 0C 6C
1257+ 7760 6A 6E FF 6B                  dw          BLK, FETCH          //      blk @
1258+ 7764 B7 6D                        dw          BSCR                //      b/scr
1259+ 7766 8B 6A                        dw          ONE_SUBTRACT        //      1 -
1260+ 7768 4F 69                        dw          AND_OP              //      and  ( this is tricky )
1261+ 776A 1B 6A                        dw          ZEQUAL              //      0=
1262+ 776C                                                              //      if
1263+ 776C 7D 64                        dw          ZBRANCH
1264+ 776E 08 00                        dw          Nul_Endif_2 - $
1265+ 7770 3A 71                        dw              QEXEC           //          ?exec
1266+ 7772 FA 69 06 6B                  dw              R_TO, DROP      //          r> drop
1267+ 7776              Nul_Endif_2:                                    //      endif
1268+ 7776 66 64                        dw      BRANCH
1269+ 7778 06 00                        dw      Nul_Endif_1 - $
1270+ 777A              Nul_Else_1:                                     // else
1271+ 777A FA 69 06 6B                  dw          R_TO, DROP          //      r> drop
1272+ 777E              Nul_Endif_1:                                    // endif
1273+ 777E BD 69                        dw      EXIT                    // ;
1274+ 7780
1275+ 7780              //  ______________________________________________________________________
1276+ 7780              //
1277+ 7780              // ?stack       --
1278+ 7780              // Raise error #1 if stack is empty and you pop it
1279+ 7780              // Raise error #7 if stack is full.
1280+ 7780              // This means SP must always stay between HERE and FFFF
1281+ 7780              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1282+ 7780              // for Next 8K MMU paging this is $DOE8
1283+ 7780                              Colon_Def QSTACK, "?STACK", is_normal
1283+ 7780             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1283+ 7780             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1283+ 7780             >
1283+ 7780             >                // dummy db directives used to calculate length of namec
1283+ 7780 3F 53 54 41 >                db      "?STACK"
1283+ 7784 43 4B       >
1283+ 7786             >len_NFA         defl    $ - temp_NFA
1283+ 7786             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1283+ 7780             >
1283+ 7780 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1283+ 7781 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1283+ 7785 43 4B       >
1283+ 7787             >                org     $-1                 // alter last byte of Name just above to set
1283+ 7786 CB          >                db      {b $} | END_BIT     // msb as name end
1283+ 7787             >
1283+ 7787 42 77       >                dw      last_NFA            // Link to previous definition Name
1283+ 7789             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1283+ 7789 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1283+ 778B             >                else
1283+ 778B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1283+ 778B             >                endif           ; ok        // for other definitions it "points" the correct handler
1283+ 778B             >                // Use of "; ok" to suppress "warning[fwdref]"
1283+ 778B             >
1283+ 778B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1284+ 778B 87 69                        dw      SPFETCH                 // sp@
1285+ 778D ED 6D FF 6B                  dw      S0, FETCH               // s0 @
1286+ 7791 2E 6B AC 6F                  dw      SWAP, ULESS             // swap u<
1287+ 7795 73 6D 08 71                  dw      ONE, QERROR             // 1 ?error
1288+ 7799 3D 6F                        dw      HERE                    // here
1289+ 779B ED 6D FF 6B                  dw      S0, FETCH, LESS         // s0 @ <
1289+ 779F C0 6F
1290+ 77A1                                                              // if
1291+ 77A1 7D 64                        dw      ZBRANCH
1292+ 77A3 14 00                        dw      QStack_Endif - $
1293+ 77A5 87 69                        dw          SPFETCH             //      sp@
1294+ 77A7 3D 6F 43 64                  dw          HERE, LIT, 128      //      here 128
1294+ 77AB 80 00
1295+ 77AD 56 6A AC 6F                  dw          PLUS, ULESS         //      plus u<
1296+ 77B1 43 64 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1296+ 77B5 08 71
1297+ 77B7              QStack_Endif:                                   // endif
1298+ 77B7 BD 69                        dw      EXIT                    // ;
1299+ 77B9
1300+ 77B9
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
 110  77B9                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
   1+ 77B9              //  ______________________________________________________________________
   2+ 77B9              //
   3+ 77B9              //  L2.asm
   4+ 77B9              //
   5+ 77B9              //  Level-2
   6+ 77B9              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 77B9              //  ______________________________________________________________________
   8+ 77B9
   9+ 77B9
  10+ 77B9              //  ______________________________________________________________________
  11+ 77B9              //
  12+ 77B9              // interpret    --
  13+ 77B9              // This is the text interpreter.
  14+ 77B9              // It executes or compiles, depending on STATE, the text coming from
  15+ 77B9              // current input stream.
  16+ 77B9              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 77B9              // the word is interpreted as numeric and converted, using current BASE,
  18+ 77B9              // leaving on top of stack a single or double precision number, depending
  19+ 77B9              // on the presence of a decimal point.
  20+ 77B9              // If the number conversion fails, the terminal is notified with ? followed
  21+ 77B9              // by the offending word.
  22+ 77B9                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 77B9             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 77B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 77B9             >
  22+ 77B9             >                // dummy db directives used to calculate length of namec
  22+ 77B9 49 4E 54 45 >                db      "INTERPRET"
  22+ 77BD 52 50 52 45 >
  22+ 77C1 54          >
  22+ 77C2             >len_NFA         defl    $ - temp_NFA
  22+ 77C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 77B9             >
  22+ 77B9 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 77BA 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 77BE 52 50 52 45 >
  22+ 77C2 54          >
  22+ 77C3             >                org     $-1                 // alter last byte of Name just above to set
  22+ 77C2 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 77C3             >
  22+ 77C3 80 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 77C5             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 77C5 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 77C7             >                else
  22+ 77C7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  22+ 77C7             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 77C7             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 77C7             >
  22+ 77C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 77C7
  24+ 77C7              Interpret_Begin:                                        // begin
  25+ 77C7 D7 75                        dw          LFIND                       //      -find
  26+ 77C9                                                                      //      if
  27+ 77C9 7D 64                        dw          ZBRANCH
  28+ 77CB 1A 00                        dw          Interpret_Else_1 - $
  29+ 77CD B6 6E FF 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 77D1 C0 6F
  30+ 77D3                                                                      //          if
  31+ 77D3 7D 64                        dw              ZBRANCH
  32+ 77D5 08 00                        dw              Interpret_Else_2 - $
  33+ 77D7 59 6F                        dw                  COMMA               //              ,
  34+ 77D9                                                                      //          else
  35+ 77D9 66 64                        dw              BRANCH
  36+ 77DB 06 00                        dw              Interpret_Endif_2 - $
  37+ 77DD              Interpret_Else_2:
  38+ 77DD 58 64 18 6D                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77E1              Interpret_Endif_2:                                      //          endif
  40+ 77E1                                                                      //      else
  41+ 77E1 66 64                        dw          BRANCH
  42+ 77E3 28 00                        dw          Interpret_Endif_1 - $
  43+ 77E5              Interpret_Else_1:
  44+ 77E5 3D 6F 91 75                  dw              HERE, NUMBER            //          here number
  45+ 77E9 C9 6E FF 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77ED 7F 6A
  46+ 77EF                                                                      //          if
  47+ 77EF 7D 64                        dw              ZBRANCH
  48+ 77F1 16 00                        dw              Interpret_Else_3 - $
  49+ 77F3 61 6E FF 6B                  dw                  NMODE, FETCH        //              nmode @
  50+ 77F7                                                                      //              if
  51+ 77F7 7D 64                        dw                  ZBRANCH
  52+ 77F9 08 00                        dw                  Interpret_Endif_4 - $
  53+ 77FB 73 6D 6B 6D                  dw                      ONE, ZERO       //                  1 0
  54+ 77FF 85 6B                        dw                      TWO_DROP        //                  2drop
  55+ 7801              Interpret_Endif_4:                                      //              endif
  56+ 7801 1F 77                        dw                  DLITERAL            //              [compile] dliteral
  57+ 7803                                                                      //          else
  58+ 7803 66 64                        dw              BRANCH
  59+ 7805 06 00                        dw              Interpret_Endif_3 - $
  60+ 7807              Interpret_Else_3:
  61+ 7807 06 6B                        dw                  DROP                //              drop
  62+ 7809 02 77                        dw                  LITERAL             //              [compile]  literal
  63+ 780B              Interpret_Endif_3:                                      //          endif
  64+ 780B              Interpret_Endif_1:                                      //      endif
  65+ 780B 89 77                        dw          QSTACK                      //      ?stack
  66+ 780D A6 67                        dw          QTERMINAL                   //      ?terminal
  67+ 780F                                                                      //      if
  68+ 780F 7D 64                        dw          ZBRANCH
  69+ 7811 04 00                        dw          Interpret_Endif_5 - $
  70+ 7813 FF 75                        dw              CABORT                  //          (abort)
  71+ 7815              Interpret_Endif_5:                                      //      endif
  72+ 7815 66 64                        dw      BRANCH
  73+ 7817 B0 FF                        dw      Interpret_Begin - $
  74+ 7819 BD 69                        dw      EXIT                            // ;
  75+ 781B
  76+ 781B              //  ______________________________________________________________________
  77+ 781B              //
  78+ 781B              // vocabulary   -- cccc     ( compile time )
  79+ 781B              // Defining word used in the form   VOCABULARY cccc
  80+ 781B              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 781B              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 781B              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 781B              // so new definitions can be inserted in that vocabulary.
  84+ 781B                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 781B             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 781B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 781B             >
  84+ 781B             >                // dummy db directives used to calculate length of namec
  84+ 781B 56 4F 43 41 >                db      "VOCABULARY"
  84+ 781F 42 55 4C 41 >
  84+ 7823 52 59       >
  84+ 7825             >len_NFA         defl    $ - temp_NFA
  84+ 7825             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 781B             >
  84+ 781B 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 781C 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 7820 42 55 4C 41 >
  84+ 7824 52 59       >
  84+ 7826             >                org     $-1                 // alter last byte of Name just above to set
  84+ 7825 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 7826             >
  84+ 7826 B9 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 7828             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 7828 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 782A             >                else
  84+ 782A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  84+ 782A             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 782A             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 782A             >
  84+ 782A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 782A
  86+ 782A 58 72                        dw      CBUILDS
  87+ 782C
  88+ 782C 43 64 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 7830 59 6F
  89+ 7832 AB 6E FF 6B                  dw      CURRENT, FETCH          // current @
  90+ 7836 B1 6A 59 6F                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 783A 3D 6F                        dw      HERE                    // here
  92+ 783C 37 6E FF 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 7840 59 6F
  93+ 7842 37 6E 0C 6C                  dw      VOC_LINK, STORE         // voc-link !
  94+ 7846
  95+ 7846 68 72                        dw      DOES_TO                 // does>
  96+ 7848              Vocabulary_Does:
  97+ 7848 A7 6A                        dw      CELL_PLUS               // cell+
  98+ 784A 9E 6E 0C 6C                  dw      CONTEXT, STORE          // context !
  99+ 784E BD 69                        dw      EXIT                    // ;
 100+ 7850
 101+ 7850              //  ______________________________________________________________________
 102+ 7850              //
 103+ 7850              // forth        --
 104+ 7850              // Name of the first vocabulary.
 105+ 7850              // It makes FORTH the CONTEXT vocabulary.
 106+ 7850              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7850              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7850              // of a colon definition to be able to select the vocabulary.
 109+ 7850
 110+ 7850                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7850             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7850             >
 110+ 7850             >                // dummy db directives used to calculate length of namec
 110+ 7850 46 4F 52 54 >                db      "FORTH"
 110+ 7854 48          >
 110+ 7855             >len_NFA         defl    $ - temp_NFA
 110+ 7855             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7850             >
 110+ 7850 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 7851 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 7855 48          >
 110+ 7856             >                org     $-1                 // alter last byte of Name just above to set
 110+ 7855 C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 7856             >
 110+ 7856 1B 78       >                dw      last_NFA            // Link to previous definition Name
 110+ 7858             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 7858 74 72       >                dw      Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 785A             >                else
 110+ 785A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 110+ 785A             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 785A             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 785A             >
 110+ 785A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 785A 48 78                        dw      Vocabulary_Does
 112+ 785C 81 A0                        db      $81, $A0
 113+ 785E              Forth_Latest_Ptr:
 114+ 785E 6C 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 7860              Voclink_Ptr:
 116+ 7860 00 00                        dw      0
 117+ 7862              // Any new vocabulary is structured as follow:
 118+ 7862              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7862              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7862              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7862              //       at creations it points to the null-word of its parent vocabulary
 122+ 7862              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7862              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7862              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7862              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7862              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7862              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7862
 129+ 7862              //  ______________________________________________________________________
 130+ 7862              //
 131+ 7862              // definitions  --
 132+ 7862              // Used in the form  cccc DEFINITIONS
 133+ 7862              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7862              // vocabulary cccc.
 135+ 7862                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7862             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7862             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7862             >
 135+ 7862             >                // dummy db directives used to calculate length of namec
 135+ 7862 44 45 46 49 >                db      "DEFINITIONS"
 135+ 7866 4E 49 54 49 >
 135+ 786A 4F 4E 53    >
 135+ 786D             >len_NFA         defl    $ - temp_NFA
 135+ 786D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7862             >
 135+ 7862 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7863 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 7867 4E 49 54 49 >
 135+ 786B 4F 4E 53    >
 135+ 786E             >                org     $-1                 // alter last byte of Name just above to set
 135+ 786D D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 786E             >
 135+ 786E 50 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 7870             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7870 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7872             >                else
 135+ 7872 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 135+ 7872             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7872             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7872             >
 135+ 7872             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7872 9E 6E FF 6B                  dw      CONTEXT, FETCH          // context @
 137+ 7876 AB 6E 0C 6C                  dw      CURRENT, STORE          // current !
 138+ 787A BD 69                        dw      EXIT                    // ;
 139+ 787C
 140+ 787C              //  ______________________________________________________________________
 141+ 787C              //
 142+ 787C              // (            -- cccc )
 143+ 787C              // the following text is interpreted as a comment until a closing )
 144+ 787C                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 787C             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 787C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 787C             >
 144+ 787C             >                // dummy db directives used to calculate length of namec
 144+ 787C 28          >                db      "("
 144+ 787D             >len_NFA         defl    $ - temp_NFA
 144+ 787D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 787C             >
 144+ 787C C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 787D 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 787E             >                org     $-1                 // alter last byte of Name just above to set
 144+ 787D A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 787E             >
 144+ 787E 62 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7880             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7880 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7882             >                else
 144+ 7882 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 7882             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7882             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7882             >
 144+ 7882             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7882 43 64 29 00                  dw      LIT, ")"                // [char] )
 146+ 7886 25 74 06 6B                  dw      WORD, DROP              // word drop
 147+ 788A BD 69                        dw      EXIT                    // ;
 148+ 788C
 149+ 788C              //  ______________________________________________________________________
 150+ 788C              //
 151+ 788C              // quit         --
 152+ 788C              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 788C                              Colon_Def QUIT, "QUIT", is_normal
 153+ 788C             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 788C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 788C             >
 153+ 788C             >                // dummy db directives used to calculate length of namec
 153+ 788C 51 55 49 54 >                db      "QUIT"
 153+ 7890             >len_NFA         defl    $ - temp_NFA
 153+ 7890             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 788C             >
 153+ 788C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 788D 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7891             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7890 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7891             >
 153+ 7891 7C 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7893             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7893 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 7895             >                else
 153+ 7895 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 7895             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 7895             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 7895             >
 153+ 7895             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 7895
 155+ 7895 21 6F FF 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7899 49 68 06 6B                  dw      F_CLOSE, DROP           // f_close drop
 157+ 789D 6B 6D 21 6F                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 78A1 0C 6C
 158+ 78A3 6B 6D 6A 6E                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 78A7 0C 6C
 159+ 78A9 B1 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 78AB                                                              // begin
 161+ 78AB              Quit_Begin:
 162+ 78AB F5 6D FF 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 78AF B0 69
 163+ 78B1 9C 68                        dw      CR                      //      cr
 164+ 78B3 A6 73                        dw      QUERY                   //      query
 165+ 78B5              Next_Breakpoint_1:
 166+ 78B5 C5 77                        dw      INTERPRET               //      interpret
 167+ 78B7 B6 6E FF 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 78BB 1B 6A
 168+ 78BD                                                              //      if
 169+ 78BD 7D 64                        dw      ZBRANCH
 170+ 78BF 07 00                        dw      Quit_Endif - $
 171+ 78C1 74 74                        dw          C_DOT_QUOTE
 172+ 78C3 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 78C6              Quit_Endif:                                     //      else
 174+ 78C6                                                              // again
 175+ 78C6 66 64                        dw      BRANCH
 176+ 78C8 E3 FF                        dw      Quit_Begin - $
 177+ 78CA BD 69                        dw      EXIT                    // ;
 178+ 78CC
 179+ 78CC              //  ______________________________________________________________________
 180+ 78CC              //
 181+ 78CC              // abort        --
 182+ 78CC                              Colon_Def ABORT, "ABORT", is_normal
 182+ 78CC             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 78CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 78CC             >
 182+ 78CC             >                // dummy db directives used to calculate length of namec
 182+ 78CC 41 42 4F 52 >                db      "ABORT"
 182+ 78D0 54          >
 182+ 78D1             >len_NFA         defl    $ - temp_NFA
 182+ 78D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 78CC             >
 182+ 78CC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 78CD 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 78D1 54          >
 182+ 78D2             >                org     $-1                 // alter last byte of Name just above to set
 182+ 78D1 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 78D2             >
 182+ 78D2 8C 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 78D4             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 78D4 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 78D6             >                else
 182+ 78D6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 78D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 78D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 78D6             >
 182+ 78D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78D6 ED 6D FF 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 78DA 96 69
 184+ 78DC 14 72                        dw      DECIMAL                 // decimal
 185+ 78DE 58 78                        dw      FORTH                   // [compile] forth
 186+ 78E0 70 78                        dw      DEFINITIONS             // definitions
 187+ 78E2              Autoexec_Ptr:
 188+ 78E2 60 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78E4 93 78                        dw      QUIT                    // quit
 190+ 78E6 BD 69                        dw      EXIT                    // ;
 191+ 78E8
 192+ 78E8              //  ______________________________________________________________________
 193+ 78E8              //
 194+ 78E8              // warm         --
 195+ 78E8                              Colon_Def WARM, "WARM", is_normal
 195+ 78E8             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78E8             >
 195+ 78E8             >                // dummy db directives used to calculate length of namec
 195+ 78E8 57 41 52 4D >                db      "WARM"
 195+ 78EC             >len_NFA         defl    $ - temp_NFA
 195+ 78EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78E8             >
 195+ 78E8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78E9 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78ED             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78EC CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78ED             >
 195+ 78ED CC 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78EF             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78EF F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78F1             >                else
 195+ 78F1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 78F1             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78F1             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78F1             >
 195+ 78F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78F1 84 7C                        dw      BLK_INIT                // blk-init
 197+ 78F3 2A 84                        dw      SPLASH                  // splash
 198+ 78F5 43 64 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78F9 32 70
 199+ 78FB D4 78                        dw      ABORT                   // abort
 200+ 78FD BD 69                        dw      EXIT                    // exit
 201+ 78FF
 202+ 78FF              //  ______________________________________________________________________
 203+ 78FF              //
 204+ 78FF              // cold         --
 205+ 78FF                              Colon_Def COLD, "COLD", is_normal
 205+ 78FF             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78FF             >
 205+ 78FF             >                // dummy db directives used to calculate length of namec
 205+ 78FF 43 4F 4C 44 >                db      "COLD"
 205+ 7903             >len_NFA         defl    $ - temp_NFA
 205+ 7903             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78FF             >
 205+ 78FF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 7900 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 7904             >                org     $-1                 // alter last byte of Name just above to set
 205+ 7903 C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 7904             >
 205+ 7904 E8 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 7906             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 7906 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 7908             >                else
 205+ 7908 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 205+ 7908             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 7908             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 7908             >
 205+ 7908             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 7908 43 64 12 64                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 790C 43 64 2E 64                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 7910 FF 6B                        dw      FETCH                   // @
 209+ 7912 43 64 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 7916 56 6A
 210+ 7918 43 64 14 00                  dw      LIT, 20                 // 20
 211+ 791C AB 68                        dw      CMOVE
 212+ 791E 43 64 0C 64                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 7922 FF 6B                        dw      FETCH                   // @
 214+ 7924 43 64 5E 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 7928 0C 6C                        dw      STORE                   // !
 216+ 792A 6B 6D 61 6E                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 792E 0C 6C
 217+ 7930 42 6E FF 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 7934 3B 6B
 218+ 7936 F5 6E 0C 6C                  dw      USE, STORE              // use !
 219+ 793A FF 6E 0C 6C                  dw      PREV, STORE             // prev !
 220+ 793E 43 64 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 7942 12 6F 0C 6C
 221+ 7946              //              dw      LIT, 8
 222+ 7946              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 7946 7B 6D 33 6F                  dw      TWO, HP, STORE          // 2 hp !
 223+ 794A 0C 6C
 224+ 794C EF 78        Warm_Start:     dw      WARM
 225+ 794E 06 79        Cold_Start:     dw      COLD
 226+ 7950 BD 69                        dw      EXIT
 227+ 7952
 228+ 7952              //  ______________________________________________________________________
 229+ 7952              WarmRoutine:
 230+ 7952              ColdRoutine:
 231+ 7952 DD 21 32 64                  ld      ix, Next_Ptr
 232+ 7956 D9                           exx
 233+ 7957 E5                           push    hl
 234+ 7958 D9                           exx
 235+ 7959
 236+ 7959 ED 73 08 64                  ld      (SP_Basic), sp
 237+ 795D ED 7B 12 64                  ld      sp, (S0_origin)
 238+ 7961              //              nop
 239+ 7961 2A 14 64                     ld      hl, (R0_origin)
 240+ 7964              //              nop
 241+ 7964                              ldrphl
 241+ 7964 22 30 64    >                ld      (RP_Pointer),hl
 242+ 7967 01 4C 79                     ld      bc, Warm_Start
 243+ 796A 38 02                        jr      c, Warm_Skip
 244+ 796C 03                           inc     bc
 245+ 796D 03                           inc     bc
 246+ 796E              Warm_Skip:
 247+ 796E                              next
 247+ 796E DD E9       >                jp      (ix)
 248+ 7970
 249+ 7970              //  ______________________________________________________________________
 250+ 7970              //
 251+ 7970              // basic        --
 252+ 7970                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7970             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7970             >
 252+ 7970             >                // dummy db directives used to calculate length of namec
 252+ 7970 42 41 53 49 >                db      "BASIC"
 252+ 7974 43          >
 252+ 7975             >len_NFA         defl    $ - temp_NFA
 252+ 7975             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7970             >
 252+ 7970 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7971 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 7975 43          >
 252+ 7976             >                org     $-1                 // alter last byte of Name just above to set
 252+ 7975 C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 7976             >
 252+ 7976 FF 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 7978             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 7978 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 252+ 7978             >                else
 252+ 7978 7A 79       >                dw      $ + 2   ; ok        // is pointed by CFA
 252+ 797A             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 797A             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 797A             >
 252+ 797A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 797A C1                           pop     bc
 254+ 797B 21 00 00                     ld      hl, 0
 255+ 797E 39                           add     hl, sp
 256+ 797F ED 7B 08 64                  ld      sp, (SP_Basic)
 257+ 7983              //              nop
 258+ 7983 22 08 64                     ld      (SP_Basic),hl
 259+ 7986 D9                           exx
 260+ 7987 E1                           pop     hl
 261+ 7988 D9                           exx
 262+ 7989 C9                           ret     // to Basic
 263+ 798A
 264+ 798A              //  ______________________________________________________________________
 265+ 798A              //
 266+ 798A              // +-           n1 n2 -- n3
 267+ 798A              // leaves n1 with the sign of n2 as n3.
 268+ 798A                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 798A             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 798A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 798A             >
 268+ 798A             >                // dummy db directives used to calculate length of namec
 268+ 798A 2B 2D       >                db      "+-"
 268+ 798C             >len_NFA         defl    $ - temp_NFA
 268+ 798C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 798A             >
 268+ 798A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 798B 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 798D             >                org     $-1                 // alter last byte of Name just above to set
 268+ 798C AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 798D             >
 268+ 798D 70 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 798F             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 798F F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7991             >                else
 268+ 7991 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 268+ 7991             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7991             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7991             >
 268+ 7991             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7991 2E 6A                        dw      ZLESS                   // 0<
 270+ 7993                                                              // if
 271+ 7993 7D 64                        dw      ZBRANCH
 272+ 7995 04 00                        dw      Plus_Minus_Endif - $
 273+ 7997 C2 6A                        dw          MINUS               //      minus
 274+ 7999              Plus_Minus_Endif:                               // endif
 275+ 7999 BD 69                        dw      EXIT                    // ;
 276+ 799B
 277+ 799B              //  ______________________________________________________________________
 278+ 799B              //
 279+ 799B              // d+-          d1 n -- d2
 280+ 799B              // leaves d1 with the sign of n as d2.
 281+ 799B                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 799B             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 799B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 799B             >
 281+ 799B             >                // dummy db directives used to calculate length of namec
 281+ 799B 44 2B 2D    >                db      "D+-"
 281+ 799E             >len_NFA         defl    $ - temp_NFA
 281+ 799E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 799B             >
 281+ 799B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 799C 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 799F             >                org     $-1                 // alter last byte of Name just above to set
 281+ 799E AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 799F             >
 281+ 799F 8A 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 79A1             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 79A1 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 79A3             >                else
 281+ 79A3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 281+ 79A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 79A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 79A3             >
 281+ 79A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 79A3 2E 6A                        dw      ZLESS                   // 0<
 283+ 79A5                                                              // if
 284+ 79A5 7D 64                        dw      ZBRANCH
 285+ 79A7 04 00                        dw      DPlus_Minus_Endif - $
 286+ 79A9 D8 6A                        dw          DMINUS              //      dminus
 287+ 79AB              DPlus_Minus_Endif:                              // endif
 288+ 79AB BD 69                        dw      EXIT                    // ;
 289+ 79AD
 290+ 79AD              //  ______________________________________________________________________
 291+ 79AD              //
 292+ 79AD              // abs          n1 -- n2
 293+ 79AD                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 79AD             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 79AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 79AD             >
 293+ 79AD             >                // dummy db directives used to calculate length of namec
 293+ 79AD 41 42 53    >                db      "ABS"
 293+ 79B0             >len_NFA         defl    $ - temp_NFA
 293+ 79B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 79AD             >
 293+ 79AD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 79AE 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 79B1             >                org     $-1                 // alter last byte of Name just above to set
 293+ 79B0 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 79B1             >
 293+ 79B1 9B 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 79B3             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 79B3 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 79B5             >                else
 293+ 79B5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 79B5             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 79B5             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 79B5             >
 293+ 79B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 79B5 3B 6B                        dw      DUP                     // dup
 295+ 79B7 8F 79                        dw      PLUS_MINUS              // +-
 296+ 79B9 BD 69                        dw      EXIT                    // ;
 297+ 79BB
 298+ 79BB              //  ______________________________________________________________________
 299+ 79BB              //
 300+ 79BB              // dabs         d1 -- d2
 301+ 79BB                              Colon_Def DABS, "DABS", is_normal
 301+ 79BB             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 79BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 79BB             >
 301+ 79BB             >                // dummy db directives used to calculate length of namec
 301+ 79BB 44 41 42 53 >                db      "DABS"
 301+ 79BF             >len_NFA         defl    $ - temp_NFA
 301+ 79BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 79BB             >
 301+ 79BB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 79BC 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 79C0             >                org     $-1                 // alter last byte of Name just above to set
 301+ 79BF D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 79C0             >
 301+ 79C0 AD 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 79C2             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 79C2 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 79C4             >                else
 301+ 79C4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 79C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 79C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 79C4             >
 301+ 79C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 79C4 3B 6B                        dw      DUP                     // dup
 303+ 79C6 A1 79                        dw      DPLUS_MINUS             // d+-
 304+ 79C8 BD 69                        dw      EXIT                    // ;
 305+ 79CA
 306+ 79CA              //  ______________________________________________________________________
 307+ 79CA              //
 308+ 79CA              // m*           n1 n2 -- d
 309+ 79CA              // multiply two integer giving a double
 310+ 79CA                              Colon_Def MMUL, "M*", is_normal
 310+ 79CA             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 79CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 79CA             >
 310+ 79CA             >                // dummy db directives used to calculate length of namec
 310+ 79CA 4D 2A       >                db      "M*"
 310+ 79CC             >len_NFA         defl    $ - temp_NFA
 310+ 79CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 79CA             >
 310+ 79CA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 79CB 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 79CD             >                org     $-1                 // alter last byte of Name just above to set
 310+ 79CC AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 79CD             >
 310+ 79CD BB 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 79CF             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 79CF F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 79D1             >                else
 310+ 79D1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 79D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 79D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 79D1             >
 310+ 79D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 79D1 A5 6B 74 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 79D5 E6 69
 312+ 79D7 B3 79 2E 6B                  dw      ABS_OP, SWAP            // abs swap
 313+ 79DB B3 79 E0 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79DF FA 69 A1 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79E3 BD 69                        dw      EXIT                    // ;
 316+ 79E5
 317+ 79E5              //  ______________________________________________________________________
 318+ 79E5              //
 319+ 79E5              // m/         d n -- q r
 320+ 79E5              // multiply two integer giving a double
 321+ 79E5                              Colon_Def MDIV, "M/", is_normal
 321+ 79E5             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 321+ 79E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 79E5             >
 321+ 79E5             >                // dummy db directives used to calculate length of namec
 321+ 79E5 4D 2F       >                db      "M/"
 321+ 79E7             >len_NFA         defl    $ - temp_NFA
 321+ 79E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 79E5             >
 321+ 79E5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 79E6 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 321+ 79E8             >                org     $-1                 // alter last byte of Name just above to set
 321+ 79E7 AF          >                db      {b $} | END_BIT     // msb as name end
 321+ 79E8             >
 321+ 79E8 CA 79       >                dw      last_NFA            // Link to previous definition Name
 321+ 79EA             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 79EA F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 321+ 79EC             >                else
 321+ 79EC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 321+ 79EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 79EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 79EC             >
 321+ 79EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 79EC F6 6A E6 69                  dw      OVER, TO_R, TO_R        // over >r >r
 322+ 79F0 E6 69
 323+ 79F2 C2 79 0E 6A                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 323+ 79F6 B3 79
 324+ 79F8 11 69                        dw      UMDIVMOD                // um/mod
 325+ 79FA FA 69                        dw      R_TO                    // r>
 326+ 79FC 0E 6A 74 69                  dw      R_OP, XOR_OP            // r xor
 327+ 7A00 8F 79 2E 6B                  dw      PLUS_MINUS, SWAP        // +- swap
 328+ 7A04 FA 69                        dw      R_TO                    // r>
 329+ 7A06 8F 79 2E 6B                  dw      PLUS_MINUS, SWAP        // +- swap
 330+ 7A0A BD 69                        dw      EXIT                    // ;
 331+ 7A0C
 332+ 7A0C              //  ______________________________________________________________________
 333+ 7A0C              //
 334+ 7A0C              // *            n1 n2 -- n3
 335+ 7A0C              // multiply two integer
 336+ 7A0C                              Colon_Def MUL, "*", is_normal
 336+ 7A0C             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 336+ 7A0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ 7A0C             >
 336+ 7A0C             >                // dummy db directives used to calculate length of namec
 336+ 7A0C 2A          >                db      "*"
 336+ 7A0D             >len_NFA         defl    $ - temp_NFA
 336+ 7A0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ 7A0C             >
 336+ 7A0C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ 7A0D 2A          >                db      "*"               // name string in 7-bit ascii, but
 336+ 7A0E             >                org     $-1                 // alter last byte of Name just above to set
 336+ 7A0D AA          >                db      {b $} | END_BIT     // msb as name end
 336+ 7A0E             >
 336+ 7A0E E5 79       >                dw      last_NFA            // Link to previous definition Name
 336+ 7A10             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 7A10 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 336+ 7A12             >                else
 336+ 7A12 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 336+ 7A12             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 7A12             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 7A12             >
 336+ 7A12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 7A12 CF 79 06 6B                  dw      MMUL, DROP              // m* drop
 338+ 7A16 BD 69                        dw      EXIT                    // ;
 339+ 7A18
 340+ 7A18              //  ______________________________________________________________________
 341+ 7A18              //
 342+ 7A18              // /mod         n1 n2 -- n3 n4
 343+ 7A18              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 344+ 7A18              // The remainder has the sign of n1
 345+ 7A18                              Colon_Def DIVMOD, "/MOD", is_normal
 345+ 7A18             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 345+ 7A18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 345+ 7A18             >
 345+ 7A18             >                // dummy db directives used to calculate length of namec
 345+ 7A18 2F 4D 4F 44 >                db      "/MOD"
 345+ 7A1C             >len_NFA         defl    $ - temp_NFA
 345+ 7A1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 345+ 7A18             >
 345+ 7A18 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 345+ 7A19 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 345+ 7A1D             >                org     $-1                 // alter last byte of Name just above to set
 345+ 7A1C C4          >                db      {b $} | END_BIT     // msb as name end
 345+ 7A1D             >
 345+ 7A1D 0C 7A       >                dw      last_NFA            // Link to previous definition Name
 345+ 7A1F             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 345+ 7A1F F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 345+ 7A21             >                else
 345+ 7A21 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 345+ 7A21             >                endif           ; ok        // for other definitions it "points" the correct handler
 345+ 7A21             >                // Use of "; ok" to suppress "warning[fwdref]"
 345+ 7A21             >
 345+ 7A21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 346+ 7A21 E6 69 7D 6F                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 346+ 7A25 FA 69
 347+ 7A27 EA 79                        dw      MDIV                    // m/
 348+ 7A29 BD 69                        dw      EXIT                    // ;
 349+ 7A2B
 350+ 7A2B              //  ______________________________________________________________________
 351+ 7A2B              //
 352+ 7A2B              // /            n1 n2 -- n3
 353+ 7A2B              // division
 354+ 7A2B                              Colon_Def DIV, "/", is_normal
 354+ 7A2B             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 354+ 7A2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 354+ 7A2B             >
 354+ 7A2B             >                // dummy db directives used to calculate length of namec
 354+ 7A2B 2F          >                db      "/"
 354+ 7A2C             >len_NFA         defl    $ - temp_NFA
 354+ 7A2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 354+ 7A2B             >
 354+ 7A2B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 354+ 7A2C 2F          >                db      "/"               // name string in 7-bit ascii, but
 354+ 7A2D             >                org     $-1                 // alter last byte of Name just above to set
 354+ 7A2C AF          >                db      {b $} | END_BIT     // msb as name end
 354+ 7A2D             >
 354+ 7A2D 18 7A       >                dw      last_NFA            // Link to previous definition Name
 354+ 7A2F             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 354+ 7A2F F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 354+ 7A31             >                else
 354+ 7A31 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 354+ 7A31             >                endif           ; ok        // for other definitions it "points" the correct handler
 354+ 7A31             >                // Use of "; ok" to suppress "warning[fwdref]"
 354+ 7A31             >
 354+ 7A31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 355+ 7A31 1F 7A 11 6B                  dw      DIVMOD, NIP             // /mod nip
 356+ 7A35 BD 69                        dw      EXIT                    // ;
 357+ 7A37
 358+ 7A37              //  ______________________________________________________________________
 359+ 7A37              //
 360+ 7A37              // mod          n1 n2 -- n3
 361+ 7A37                              Colon_Def MOD, "MOD", is_normal
 361+ 7A37             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 361+ 7A37             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 361+ 7A37             >
 361+ 7A37             >                // dummy db directives used to calculate length of namec
 361+ 7A37 4D 4F 44    >                db      "MOD"
 361+ 7A3A             >len_NFA         defl    $ - temp_NFA
 361+ 7A3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 361+ 7A37             >
 361+ 7A37 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 361+ 7A38 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 361+ 7A3B             >                org     $-1                 // alter last byte of Name just above to set
 361+ 7A3A C4          >                db      {b $} | END_BIT     // msb as name end
 361+ 7A3B             >
 361+ 7A3B 2B 7A       >                dw      last_NFA            // Link to previous definition Name
 361+ 7A3D             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 361+ 7A3D F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 361+ 7A3F             >                else
 361+ 7A3F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 361+ 7A3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 361+ 7A3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 361+ 7A3F             >
 361+ 7A3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 362+ 7A3F 1F 7A 06 6B                  dw      DIVMOD, DROP            // /mod drop
 363+ 7A43 BD 69                        dw      EXIT                    // ;
 364+ 7A45
 365+ 7A45              //  ______________________________________________________________________
 366+ 7A45              //
 367+ 7A45              // */mod        n1 n2 n3 -- n4 n5
 368+ 7A45              // leaves the quotient n5 and the remainder n4 of the operation
 369+ 7A45              // (n1 * n2) / n3. The intermediate passage through a double number
 370+ 7A45              // avoids loss of precision
 371+ 7A45                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 371+ 7A45             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 371+ 7A45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 371+ 7A45             >
 371+ 7A45             >                // dummy db directives used to calculate length of namec
 371+ 7A45 2A 2F 4D 4F >                db      "*/MOD"
 371+ 7A49 44          >
 371+ 7A4A             >len_NFA         defl    $ - temp_NFA
 371+ 7A4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 371+ 7A45             >
 371+ 7A45 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 371+ 7A46 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 371+ 7A4A 44          >
 371+ 7A4B             >                org     $-1                 // alter last byte of Name just above to set
 371+ 7A4A C4          >                db      {b $} | END_BIT     // msb as name end
 371+ 7A4B             >
 371+ 7A4B 37 7A       >                dw      last_NFA            // Link to previous definition Name
 371+ 7A4D             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 371+ 7A4D F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 371+ 7A4F             >                else
 371+ 7A4F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 371+ 7A4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 371+ 7A4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 371+ 7A4F             >
 371+ 7A4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 372+ 7A4F E6 69 CF 79                  dw      TO_R, MMUL              // >r  m*
 373+ 7A53 FA 69 EA 79                  dw      R_TO, MDIV              // r>  m/
 374+ 7A57 BD 69                        dw      EXIT                    // ;
 375+ 7A59
 376+ 7A59              //  ______________________________________________________________________
 377+ 7A59              //
 378+ 7A59              // */          n1 n2 n3 -- n4
 379+ 7A59              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 380+ 7A59                              Colon_Def MUL_DIV, "*/", is_normal
 380+ 7A59             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 380+ 7A59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ 7A59             >
 380+ 7A59             >                // dummy db directives used to calculate length of namec
 380+ 7A59 2A 2F       >                db      "*/"
 380+ 7A5B             >len_NFA         defl    $ - temp_NFA
 380+ 7A5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ 7A59             >
 380+ 7A59 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ 7A5A 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 380+ 7A5C             >                org     $-1                 // alter last byte of Name just above to set
 380+ 7A5B AF          >                db      {b $} | END_BIT     // msb as name end
 380+ 7A5C             >
 380+ 7A5C 45 7A       >                dw      last_NFA            // Link to previous definition Name
 380+ 7A5E             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 7A5E F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 7A60             >                else
 380+ 7A60 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 380+ 7A60             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 7A60             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 7A60             >
 380+ 7A60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 7A60 4D 7A                        dw     MUL_DIV_MOD              // */mod
 382+ 7A62 11 6B                        dw     NIP                      // nip
 383+ 7A64 BD 69                        dw     EXIT                     // ;
 384+ 7A66
 385+ 7A66
 386+ 7A66              //  ______________________________________________________________________
 387+ 7A66              //
 388+ 7A66              // m/mod        ud1 u2 -- u3 ud4
 389+ 7A66              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 390+ 7A66              // All terms are unsigned.
 391+ 7A66                              Colon_Def MDIV_MOD, "M/MOD", is_normal
 391+ 7A66             >                New_Def  MDIV_MOD, "M/MOD", Enter_Ptr, is_normal ; ok
 391+ 7A66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 391+ 7A66             >
 391+ 7A66             >                // dummy db directives used to calculate length of namec
 391+ 7A66 4D 2F 4D 4F >                db      "M/MOD"
 391+ 7A6A 44          >
 391+ 7A6B             >len_NFA         defl    $ - temp_NFA
 391+ 7A6B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 391+ 7A66             >
 391+ 7A66 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 391+ 7A67 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 391+ 7A6B 44          >
 391+ 7A6C             >                org     $-1                 // alter last byte of Name just above to set
 391+ 7A6B C4          >                db      {b $} | END_BIT     // msb as name end
 391+ 7A6C             >
 391+ 7A6C 59 7A       >                dw      last_NFA            // Link to previous definition Name
 391+ 7A6E             >MDIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 391+ 7A6E F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 391+ 7A70             >                else
 391+ 7A70 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 391+ 7A70             >                endif           ; ok        // for other definitions it "points" the correct handler
 391+ 7A70             >                // Use of "; ok" to suppress "warning[fwdref]"
 391+ 7A70             >
 391+ 7A70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 392+ 7A70 E6 69                        dw      TO_R                    // >r           ( ud1 )
 393+ 7A72 6B 6D 0E 6A                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 393+ 7A76 11 69
 394+ 7A78 FA 69 2E 6B                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 394+ 7A7C E6 69
 395+ 7A7E 11 69                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 396+ 7A80 FA 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 397+ 7A82 BD 69                        dw      EXIT                    // ;
 398+ 7A84
 399+ 7A84              //  ______________________________________________________________________
 400+ 7A84              //
 401+ 7A84              // (line)       n1 n2 -- a b
 402+ 7A84              // sends the line n1 of block n2 to the disk buffer.
 403+ 7A84              // it returns the address a and ca counter b = C/L meaning a whole line.
 404+ 7A84                              Colon_Def CLINE, "(LINE)", is_normal
 404+ 7A84             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 404+ 7A84             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 7A84             >
 404+ 7A84             >                // dummy db directives used to calculate length of namec
 404+ 7A84 28 4C 49 4E >                db      "(LINE)"
 404+ 7A88 45 29       >
 404+ 7A8A             >len_NFA         defl    $ - temp_NFA
 404+ 7A8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 7A84             >
 404+ 7A84 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 7A85 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 404+ 7A89 45 29       >
 404+ 7A8B             >                org     $-1                 // alter last byte of Name just above to set
 404+ 7A8A A9          >                db      {b $} | END_BIT     // msb as name end
 404+ 7A8B             >
 404+ 7A8B 66 7A       >                dw      last_NFA            // Link to previous definition Name
 404+ 7A8D             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 7A8D F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 404+ 7A8F             >                else
 404+ 7A8F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 404+ 7A8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 7A8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 7A8F             >
 404+ 7A8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 7A8F E6 69                        dw      TO_R                    // >r
 406+ 7A91 18 6D                        dw      NOOP                    // noop
 407+ 7A93 9F 6D                        dw      CL                      // c/l
 408+ 7A95 AB 6D 4D 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 409+ 7A99 FA 69                        dw      R_TO                    // r>
 410+ 7A9B B7 6D 10 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 410+ 7A9F 56 6A
 411+ 7AA1 9C 7D                        dw      BLOCK                   // block   ( forward )
 412+ 7AA3 56 6A                        dw      PLUS                    // +
 413+ 7AA5 18 6D                        dw      NOOP                    // noop
 414+ 7AA7 9F 6D                        dw      CL                      // c/l
 415+ 7AA9 BD 69                        dw      EXIT                    // ;
 416+ 7AAB
 417+ 7AAB              //  ______________________________________________________________________
 418+ 7AAB              //
 419+ 7AAB              // .line        n1 n2 --
 420+ 7AAB              // Sends to output line  n1  of screen n2.
 421+ 7AAB                              Colon_Def DOT_LINE, ".LINE", is_normal
 421+ 7AAB             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 421+ 7AAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 7AAB             >
 421+ 7AAB             >                // dummy db directives used to calculate length of namec
 421+ 7AAB 2E 4C 49 4E >                db      ".LINE"
 421+ 7AAF 45          >
 421+ 7AB0             >len_NFA         defl    $ - temp_NFA
 421+ 7AB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 7AAB             >
 421+ 7AAB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 7AAC 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 421+ 7AB0 45          >
 421+ 7AB1             >                org     $-1                 // alter last byte of Name just above to set
 421+ 7AB0 C5          >                db      {b $} | END_BIT     // msb as name end
 421+ 7AB1             >
 421+ 7AB1 84 7A       >                dw      last_NFA            // Link to previous definition Name
 421+ 7AB3             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 7AB3 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 421+ 7AB5             >                else
 421+ 7AB5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 421+ 7AB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 7AB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 7AB5             >
 421+ 7AB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 7AB5 8D 7A C6 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 422+ 7AB9 A2 72
 423+ 7ABB BD 69                        dw      EXIT                    // ;
 424+ 7ABD
 425+ 7ABD              //  ______________________________________________________________________
 426+ 7ABD              //
 427+ 7ABD              // message       n1 n2 --
 428+ 7ABD              // prints error message to current channel.
 429+ 7ABD              // if WARNING is 0, prints "MSG#n".
 430+ 7ABD              // if WARNING is 1, prints line n of screen 4.
 431+ 7ABD              // if WARNING is -1, see ERROR
 432+ 7ABD              // value can be negative or beyond block 4.
 433+ 7ABD                              Colon_Def MESSAGE, "MESSAGE", is_normal
 433+ 7ABD             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 433+ 7ABD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 433+ 7ABD             >
 433+ 7ABD             >                // dummy db directives used to calculate length of namec
 433+ 7ABD 4D 45 53 53 >                db      "MESSAGE"
 433+ 7AC1 41 47 45    >
 433+ 7AC4             >len_NFA         defl    $ - temp_NFA
 433+ 7AC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 433+ 7ABD             >
 433+ 7ABD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 433+ 7ABE 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 433+ 7AC2 41 47 45    >
 433+ 7AC5             >                org     $-1                 // alter last byte of Name just above to set
 433+ 7AC4 C5          >                db      {b $} | END_BIT     // msb as name end
 433+ 7AC5             >
 433+ 7AC5 AB 7A       >                dw      last_NFA            // Link to previous definition Name
 433+ 7AC7             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 433+ 7AC7 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 433+ 7AC9             >                else
 433+ 7AC9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 433+ 7AC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 433+ 7AC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 433+ 7AC9             >
 433+ 7AC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 434+ 7AC9 16 6E FF 6B                  dw      WARNING, FETCH          // warning @
 435+ 7ACD                                                              // if
 436+ 7ACD 7D 64                        dw      ZBRANCH
 437+ 7ACF 18 00                        dw      Message_Else - $
 438+ 7AD1 43 64 04 00                  dw          LIT, 4              //      4
 439+ 7AD5 91 6E FF 6B                  dw          OFFSET, FETCH       //      offset @
 440+ 7AD9 B7 6D 2F 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 440+ 7ADD 91 6F
 441+ 7ADF B3 7A                        dw          DOT_LINE            //      .line
 442+ 7AE1 4E 70                        dw          SPACE               //      space
 443+ 7AE3                                                              // else
 444+ 7AE3
 445+ 7AE3 66 64                        dw      BRANCH
 446+ 7AE5 0B 00                        dw      Message_ENdif - $
 447+ 7AE7              Message_Else:
 448+ 7AE7 74 74                        dw          C_DOT_QUOTE         //      .( msg#)
 449+ 7AE9 04 6D 73 67                  db          4, "msg#"
 449+ 7AED 23
 450+ 7AEE 29 83                        dw          DOT                 //      .  ( forward )
 451+ 7AF0              Message_ENdif:                                  // endif
 452+ 7AF0 BD 69                        dw      EXIT                    // ;
 453+ 7AF2
 454+ 7AF2
 455+ 7AF2              //  ______________________________________________________________________
 456+ 7AF2              //
 457+ 7AF2              // device
 458+ 7AF2                              Variable_Def DEVICE,   "DEVICE",   2
 458+ 7AF2             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 458+ 7AF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 458+ 7AF2             >
 458+ 7AF2             >                // dummy db directives used to calculate length of namec
 458+ 7AF2 44 45 56 49 >                db      "DEVICE"
 458+ 7AF6 43 45       >
 458+ 7AF8             >len_NFA         defl    $ - temp_NFA
 458+ 7AF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 458+ 7AF2             >
 458+ 7AF2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 458+ 7AF3 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 458+ 7AF7 43 45       >
 458+ 7AF9             >                org     $-1                 // alter last byte of Name just above to set
 458+ 7AF8 C5          >                db      {b $} | END_BIT     // msb as name end
 458+ 7AF9             >
 458+ 7AF9 BD 7A       >                dw      last_NFA            // Link to previous definition Name
 458+ 7AFB             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 458+ 7AFB 48 6D       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 458+ 7AFD             >                else
 458+ 7AFD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 458+ 7AFD             >                endif           ; ok        // for other definitions it "points" the correct handler
 458+ 7AFD             >                // Use of "; ok" to suppress "warning[fwdref]"
 458+ 7AFD             >
 458+ 7AFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 7AFD 02 00       >                dw      2
 459+ 7AFF
 460+ 7AFF              //  ______________________________________________________________________
 461+ 7AFF              //
 462+ 7AFF              // inkey        -- c | 0
 463+ 7AFF              // call ROM inkey$ routine, returns c or "zero".
 464+ 7AFF
 465+ 7AFF                              New_Def INKEY, "INKEY", is_code, is_normal
 465+ 7AFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 465+ 7AFF             >
 465+ 7AFF             >                // dummy db directives used to calculate length of namec
 465+ 7AFF 49 4E 4B 45 >                db      "INKEY"
 465+ 7B03 59          >
 465+ 7B04             >len_NFA         defl    $ - temp_NFA
 465+ 7B04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 465+ 7AFF             >
 465+ 7AFF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 465+ 7B00 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 465+ 7B04 59          >
 465+ 7B05             >                org     $-1                 // alter last byte of Name just above to set
 465+ 7B04 D9          >                db      {b $} | END_BIT     // msb as name end
 465+ 7B05             >
 465+ 7B05 F2 7A       >                dw      last_NFA            // Link to previous definition Name
 465+ 7B07             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 465+ 7B07 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 465+ 7B07             >                else
 465+ 7B07 09 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 465+ 7B09             >                endif           ; ok        // for other definitions it "points" the correct handler
 465+ 7B09             >                // Use of "; ok" to suppress "warning[fwdref]"
 465+ 7B09             >
 465+ 7B09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 466+ 7B09
 467+ 7B09 C5                           push    bc
 468+ 7B0A ED 73 2C 64                  ld      (SP_Saved), sp
 469+ 7B0E 31 FE 63                     ld      sp, Cold_origin - 2
 470+ 7B11 DD E5                        push    ix
 471+ 7B13 CD E6 15                     call    $15E6                   // instead of 15E9
 472+ 7B16 DD E1                        pop     ix
 473+ 7B18 ED 7B 2C 64                  ld      sp, (SP_Saved)
 474+ 7B1C 6F                           ld      l, a
 475+ 7B1D 26 00                        ld      h, 0
 476+ 7B1F C1                           pop     bc
 477+ 7B20                              psh1
 477+ 7B20 E5          >                push    hl
 477+ 7B21 DD E9       >                jp      (ix)
 478+ 7B23
 479+ 7B23              //  ______________________________________________________________________
 480+ 7B23              //
 481+ 7B23              // select      n --
 482+ 7B23              // selects the given channel number
 483+ 7B23
 484+ 7B23                              New_Def SELECT, "SELECT", is_code, is_normal
 484+ 7B23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 484+ 7B23             >
 484+ 7B23             >                // dummy db directives used to calculate length of namec
 484+ 7B23 53 45 4C 45 >                db      "SELECT"
 484+ 7B27 43 54       >
 484+ 7B29             >len_NFA         defl    $ - temp_NFA
 484+ 7B29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 484+ 7B23             >
 484+ 7B23 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 484+ 7B24 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 484+ 7B28 43 54       >
 484+ 7B2A             >                org     $-1                 // alter last byte of Name just above to set
 484+ 7B29 D4          >                db      {b $} | END_BIT     // msb as name end
 484+ 7B2A             >
 484+ 7B2A FF 7A       >                dw      last_NFA            // Link to previous definition Name
 484+ 7B2C             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 484+ 7B2C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 484+ 7B2C             >                else
 484+ 7B2C 2E 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 484+ 7B2E             >                endif           ; ok        // for other definitions it "points" the correct handler
 484+ 7B2E             >                // Use of "; ok" to suppress "warning[fwdref]"
 484+ 7B2E             >
 484+ 7B2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 485+ 7B2E E1                           pop     hl
 486+ 7B2F C5                           push    bc
 487+ 7B30 7D                           ld      a, l
 488+ 7B31 ED 73 2C 64                  ld      (SP_Saved), sp
 489+ 7B35 31 FE 63                     ld      sp, Cold_origin - 2
 490+ 7B38 DD E5                        push    ix
 491+ 7B3A CD 01 16                     call    $1601
 492+ 7B3D DD E1                        pop     ix
 493+ 7B3F ED 7B 2C 64                  ld      sp, (SP_Saved)
 494+ 7B43 C1                           pop     bc
 495+ 7B44
 496+ 7B44                              next
 496+ 7B44 DD E9       >                jp      (ix)
 497+ 7B46
 498+ 7B46              //  ______________________________________________________________________
 499+ 7B46
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
 111  7B46                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
   1+ 7B46              //  ______________________________________________________________________
   2+ 7B46              //
   3+ 7B46              //  next-opt.asm
   4+ 7B46              //
   5+ 7B46              //  ZX Spectrum Next - peculiar definitions
   6+ 7B46              //  ______________________________________________________________________
   7+ 7B46
   8+ 7B46              //  ______________________________________________________________________
   9+ 7B46              //
  10+ 7B46              // reg@         n -- b
  11+ 7B46              // read Next REGister n giving byte b
  12+ 7B46
  13+ 7B46                              Colon_Def REG_FETCH, "REG@", is_normal
  13+ 7B46             >                New_Def  REG_FETCH, "REG@", Enter_Ptr, is_normal ; ok
  13+ 7B46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7B46             >
  13+ 7B46             >                // dummy db directives used to calculate length of namec
  13+ 7B46 52 45 47 40 >                db      "REG@"
  13+ 7B4A             >len_NFA         defl    $ - temp_NFA
  13+ 7B4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7B46             >
  13+ 7B46 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7B47 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7B4B             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7B4A C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7B4B             >
  13+ 7B4B 23 7B       >                dw      last_NFA            // Link to previous definition Name
  13+ 7B4D             >REG_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7B4D F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 7B4F             >                else
  13+ 7B4F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 7B4F             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7B4F             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7B4F             >
  13+ 7B4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7B4F 43 64 3B 24                  dw      LIT, $243B
  15+ 7B53 72 6C                        dw      PSTORE
  16+ 7B55 43 64 3B 25                  dw      LIT, $253B
  17+ 7B59 5F 6C                        dw      PFETCH
  18+ 7B5B BD 69                        dw      EXIT
  19+ 7B5D
  20+ 7B5D              //  ______________________________________________________________________
  21+ 7B5D              //
  22+ 7B5D              // reg!         b n --
  23+ 7B5D              // write value b to Next REGister n
  24+ 7B5D
  25+ 7B5D                              Colon_Def REG_STORE, "REG!", is_normal
  25+ 7B5D             >                New_Def  REG_STORE, "REG!", Enter_Ptr, is_normal ; ok
  25+ 7B5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  25+ 7B5D             >
  25+ 7B5D             >                // dummy db directives used to calculate length of namec
  25+ 7B5D 52 45 47 21 >                db      "REG!"
  25+ 7B61             >len_NFA         defl    $ - temp_NFA
  25+ 7B61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  25+ 7B5D             >
  25+ 7B5D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  25+ 7B5E 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  25+ 7B62             >                org     $-1                 // alter last byte of Name just above to set
  25+ 7B61 A1          >                db      {b $} | END_BIT     // msb as name end
  25+ 7B62             >
  25+ 7B62 46 7B       >                dw      last_NFA            // Link to previous definition Name
  25+ 7B64             >REG_STORE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  25+ 7B64 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  25+ 7B66             >                else
  25+ 7B66 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  25+ 7B66             >                endif           ; ok        // for other definitions it "points" the correct handler
  25+ 7B66             >                // Use of "; ok" to suppress "warning[fwdref]"
  25+ 7B66             >
  25+ 7B66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  26+ 7B66 43 64 3B 24                  dw      LIT, $243B
  27+ 7B6A 72 6C                        dw      PSTORE
  28+ 7B6C 43 64 3B 25                  dw      LIT, $253B
  29+ 7B70 72 6C                        dw      PSTORE
  30+ 7B72 BD 69                        dw      EXIT
  31+ 7B74
  32+ 7B74              //  ______________________________________________________________________
  33+ 7B74              //
  34+ 7B74              // mmu7@        -- n
  35+ 7B74              // query current page in MMU7 8K-RAM : 0 and 223
  36+ 7B74
  37+ 7B74                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  37+ 7B74             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  37+ 7B74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  37+ 7B74             >
  37+ 7B74             >                // dummy db directives used to calculate length of namec
  37+ 7B74 4D 4D 55 37 >                db      "MMU7@"
  37+ 7B78 40          >
  37+ 7B79             >len_NFA         defl    $ - temp_NFA
  37+ 7B79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  37+ 7B74             >
  37+ 7B74 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  37+ 7B75 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  37+ 7B79 40          >
  37+ 7B7A             >                org     $-1                 // alter last byte of Name just above to set
  37+ 7B79 C0          >                db      {b $} | END_BIT     // msb as name end
  37+ 7B7A             >
  37+ 7B7A 5D 7B       >                dw      last_NFA            // Link to previous definition Name
  37+ 7B7C             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  37+ 7B7C F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  37+ 7B7E             >                else
  37+ 7B7E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  37+ 7B7E             >                endif           ; ok        // for other definitions it "points" the correct handler
  37+ 7B7E             >                // Use of "; ok" to suppress "warning[fwdref]"
  37+ 7B7E             >
  37+ 7B7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  38+ 7B7E 43 64 57 00                  dw      LIT, 87, REG_FETCH
  38+ 7B82 4D 7B
  39+ 7B84 BD 69                        dw      EXIT
  40+ 7B86
  41+ 7B86              //  ______________________________________________________________________
  42+ 7B86              //
  43+ 7B86              // mmu7!        n --
  44+ 7B86              // set MMU7 8K-RAM page to n given between 0 and 223
  45+ 7B86              // optimized version that uses NEXTREG n,A Z80n op-code.
  46+ 7B86
  47+ 7B86                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  47+ 7B86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7B86             >
  47+ 7B86             >                // dummy db directives used to calculate length of namec
  47+ 7B86 4D 4D 55 37 >                db      "MMU7!"
  47+ 7B8A 21          >
  47+ 7B8B             >len_NFA         defl    $ - temp_NFA
  47+ 7B8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7B86             >
  47+ 7B86 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7B87 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  47+ 7B8B 21          >
  47+ 7B8C             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7B8B A1          >                db      {b $} | END_BIT     // msb as name end
  47+ 7B8C             >
  47+ 7B8C 74 7B       >                dw      last_NFA            // Link to previous definition Name
  47+ 7B8E             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7B8E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  47+ 7B8E             >                else
  47+ 7B8E 90 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  47+ 7B90             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7B90             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7B90             >
  47+ 7B90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7B90 E1                           pop     hl
  49+ 7B91 7D                           ld      a, l
  50+ 7B92 ED 92 57                     nextreg 87, a
  51+ 7B95
  52+ 7B95                              next
  52+ 7B95 DD E9       >                jp      (ix)
  53+ 7B97
  54+ 7B97              //  ______________________________________________________________________
  55+ 7B97              //
  56+ 7B97              // >far         ha -- a n
  57+ 7B97              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  58+ 7B97              // take lower bits of H and L as an offset from E000h
  59+ 7B97              // then return address  a  between E000h-FFFFh
  60+ 7B97              // and page number n  between 64-71 (40h-47h)
  61+ 7B97              // For example, in hex:
  62+ 7B97              //   0000 >FAR  gives  40.E000
  63+ 7B97              //   1FFF >FAR  gives  40.FFFF
  64+ 7B97              //   2000 >FAR  gives  41.E000
  65+ 7B97              //   3FFF >FAR  gives  41.FFFF
  66+ 7B97              //   EFFF >FAR  gives  47.EFFF
  67+ 7B97              //   FFFF >FAR  gives  47.FFFF
  68+ 7B97              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  69+ 7B97              //                pop     de
  70+ 7B97              //                ld      a, d
  71+ 7B97              //                and     $E0
  72+ 7B97              //                rlca
  73+ 7B97              //                rlca
  74+ 7B97              //                rlca
  75+ 7B97              //                add     $40
  76+ 7B97              //                ld      l, a
  77+ 7B97              //                ld      h, 0
  78+ 7B97              //                ld      a, d
  79+ 7B97              //                or      $E0
  80+ 7B97              //                ld      d, a
  81+ 7B97              //                push    hl
  82+ 7B97              //                push    de
  83+ 7B97              //                next
  84+ 7B97
  85+ 7B97              //  ______________________________________________________________________
  86+ 7B97              //
  87+ 7B97              // <far         a n  -- ha
  88+ 7B97              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  89+ 7B97              // reverse of >FAR: encodes a FAR address compressing
  90+ 7B97              // to bits 765 of H, lower bits of HL address offset from E000h
  91+ 7B97              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
  92+ 7B97              //                pop     de                  // page number in e
  93+ 7B97              //                pop     hl                  // address in hl
  94+ 7B97              //                ld      a, e
  95+ 7B97              //                sub     $40                 // reduced to 0-7
  96+ 7B97              //                rrca
  97+ 7B97              //                rrca
  98+ 7B97              //                rrca
  99+ 7B97              //                ld      d, a                // save to d bits 765
 100+ 7B97              //                ld      a, h                // drops
 101+ 7B97              //                and     $1F
 102+ 7B97              //                or      d
 103+ 7B97              //                ld      h, a
 104+ 7B97              //
 105+ 7B97              //                psh1
 106+ 7B97
 107+ 7B97              //  ______________________________________________________________________
 108+ 7B97              //
 109+ 7B97              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 110+ 7B97              // NextZXOS call wrapper.
 111+ 7B97              //  n1 = hl register parameter value
 112+ 7B97              //  n2 = de register parameter value
 113+ 7B97              //  n3 = bc register parameter value
 114+ 7B97              //  n4 =  a register parameter value
 115+ 7B97              //   a = routine address in ROM 3
 116+ 7B97              // ----
 117+ 7B97              //  n5 = hl returned value
 118+ 7B97              //  n6 = de returned value
 119+ 7B97              //  n7 = bc returned value
 120+ 7B97              //  n8 =  a returned value
 121+ 7B97              //   f
 122+ 7B97                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 122+ 7B97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 7B97             >
 122+ 7B97             >                // dummy db directives used to calculate length of namec
 122+ 7B97 4D 5F 50 33 >                db      "M_P3DOS"
 122+ 7B9B 44 4F 53    >
 122+ 7B9E             >len_NFA         defl    $ - temp_NFA
 122+ 7B9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 7B97             >
 122+ 7B97 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 7B98 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 122+ 7B9C 44 4F 53    >
 122+ 7B9F             >                org     $-1                 // alter last byte of Name just above to set
 122+ 7B9E D3          >                db      {b $} | END_BIT     // msb as name end
 122+ 7B9F             >
 122+ 7B9F 86 7B       >                dw      last_NFA            // Link to previous definition Name
 122+ 7BA1             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 7BA1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 122+ 7BA1             >                else
 122+ 7BA1 A3 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 7BA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 7BA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 7BA3             >
 122+ 7BA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 7BA3 D1                           pop     de                  // dos call entry address in de
 124+ 7BA4 E1                           pop     hl                  // a register
 125+ 7BA5 7D                           ld      a, l
 126+ 7BA6 D9                           exx
 127+ 7BA7 C1                           pop     bc
 128+ 7BA8 D1                           pop     de
 129+ 7BA9 E1                           pop     hl
 130+ 7BAA D9                           exx
 131+ 7BAB
 132+ 7BAB C5                           push    bc
 133+ 7BAC DD E5                        push    ix
 134+ 7BAE
 135+ 7BAE ED 73 2C 64                  ld      (SP_Saved), sp
 136+ 7BB2 31 FE 63                     ld      sp, Cold_origin - 2
 137+ 7BB5 0E 07                        ld      c, 7                // use 7 RAM Bank
 138+ 7BB7
 139+ 7BB7 CF                           rst     08
 140+ 7BB8 94                           db      $94
 141+ 7BB9
 142+ 7BB9 ED 7B 2C 64                  ld      sp, (SP_Saved)
 143+ 7BBD DD E5                        push    ix
 144+ 7BBF E1                           pop     hl
 145+ 7BC0 22 2A 64                     ld      (IX_Echo), hl
 146+ 7BC3              //              nop
 147+ 7BC3 DD E1                        pop     ix
 148+ 7BC5 E3                           ex      (sp), hl            // hl argument and retrieve bc
 149+ 7BC6 D5                           push    de
 150+ 7BC7 C5                           push    bc
 151+ 7BC8 4D                           ld      c, l
 152+ 7BC9 44                           ld      b, h
 153+ 7BCA
 154+ 7BCA 26 00                        ld      h, 0
 155+ 7BCC 6F                           ld      l, a
 156+ 7BCD E5                           push    hl
 157+ 7BCE ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 158+ 7BD0 23                           inc     hl                  //  0 for OK ; 1 for ko
 159+ 7BD1
 160+ 7BD1                              psh1
 160+ 7BD1 E5          >                push    hl
 160+ 7BD2 DD E9       >                jp      (ix)
 161+ 7BD4
 162+ 7BD4              //  ______________________________________________________________________
 163+ 7BD4              //
 164+ 7BD4              // blk-fh
 165+ 7BD4                              Variable_Def BLK_FH,   "BLK-FH",   1
 165+ 7BD4             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 165+ 7BD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 7BD4             >
 165+ 7BD4             >                // dummy db directives used to calculate length of namec
 165+ 7BD4 42 4C 4B 2D >                db      "BLK-FH"
 165+ 7BD8 46 48       >
 165+ 7BDA             >len_NFA         defl    $ - temp_NFA
 165+ 7BDA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 7BD4             >
 165+ 7BD4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 7BD5 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 165+ 7BD9 46 48       >
 165+ 7BDB             >                org     $-1                 // alter last byte of Name just above to set
 165+ 7BDA C8          >                db      {b $} | END_BIT     // msb as name end
 165+ 7BDB             >
 165+ 7BDB 97 7B       >                dw      last_NFA            // Link to previous definition Name
 165+ 7BDD             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 7BDD 48 6D       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 165+ 7BDF             >                else
 165+ 7BDF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 7BDF             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 7BDF             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 7BDF             >
 165+ 7BDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 7BDF 01 00       >                dw      1
 166+ 7BE1
 167+ 7BE1                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 167+ 7BE1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 7BE1             >
 167+ 7BE1             >                // dummy db directives used to calculate length of namec
 167+ 7BE1 42 4C 4B 2D >                db      "BLK-FNAME"
 167+ 7BE5 46 4E 41 4D >
 167+ 7BE9 45          >
 167+ 7BEA             >len_NFA         defl    $ - temp_NFA
 167+ 7BEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 7BE1             >
 167+ 7BE1 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 7BE2 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 167+ 7BE6 46 4E 41 4D >
 167+ 7BEA 45          >
 167+ 7BEB             >                org     $-1                 // alter last byte of Name just above to set
 167+ 7BEA C5          >                db      {b $} | END_BIT     // msb as name end
 167+ 7BEB             >
 167+ 7BEB D4 7B       >                dw      last_NFA            // Link to previous definition Name
 167+ 7BED             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 7BED D8 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 167+ 7BEF             >                else
 167+ 7BEF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 7BEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 7BEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 7BEF             >
 167+ 7BEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 7BEF 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 168+ 7BF3 6F 63 6B 73
 168+ 7BF7 2D 36 34 2E
 168+ 7BFB 62 69 6E 00
 169+ 7BFF 00 00 00...                  ds      24
 170+ 7C17
 171+ 7C17              //  ______________________________________________________________________
 172+ 7C17              //
 173+ 7C17              // blk-seek     n --
 174+ 7C17              // seek block n  within blocks!.bin  file
 175+ 7C17                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 175+ 7C17             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 175+ 7C17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 7C17             >
 175+ 7C17             >                // dummy db directives used to calculate length of namec
 175+ 7C17 42 4C 4B 2D >                db      "BLK-SEEK"
 175+ 7C1B 53 45 45 4B >
 175+ 7C1F             >len_NFA         defl    $ - temp_NFA
 175+ 7C1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 7C17             >
 175+ 7C17 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 7C18 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 175+ 7C1C 53 45 45 4B >
 175+ 7C20             >                org     $-1                 // alter last byte of Name just above to set
 175+ 7C1F CB          >                db      {b $} | END_BIT     // msb as name end
 175+ 7C20             >
 175+ 7C20 E1 7B       >                dw      last_NFA            // Link to previous definition Name
 175+ 7C22             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 7C22 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 175+ 7C24             >                else
 175+ 7C24 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 7C24             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 7C24             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 7C24             >
 175+ 7C24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 7C24 AB 6D CF 79                  dw  BBUF, MMUL
 177+ 7C28 DD 7B FF 6B                  dw  BLK_FH, FETCH
 178+ 7C2C C8 67                        dw  F_SEEK
 179+ 7C2E 43 64 2D 00                  dw  LIT, $2D, QERROR
 179+ 7C32 08 71
 180+ 7C34 BD 69                        dw  EXIT
 181+ 7C36
 182+ 7C36              //  ______________________________________________________________________
 183+ 7C36              //
 184+ 7C36              // blk-read     n --
 185+ 7C36              // seek block n  within blocks!.bin  file
 186+ 7C36                              Colon_Def BLK_READ, "BLK-READ", is_normal
 186+ 7C36             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 186+ 7C36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ 7C36             >
 186+ 7C36             >                // dummy db directives used to calculate length of namec
 186+ 7C36 42 4C 4B 2D >                db      "BLK-READ"
 186+ 7C3A 52 45 41 44 >
 186+ 7C3E             >len_NFA         defl    $ - temp_NFA
 186+ 7C3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ 7C36             >
 186+ 7C36 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ 7C37 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 186+ 7C3B 52 45 41 44 >
 186+ 7C3F             >                org     $-1                 // alter last byte of Name just above to set
 186+ 7C3E C4          >                db      {b $} | END_BIT     // msb as name end
 186+ 7C3F             >
 186+ 7C3F 17 7C       >                dw      last_NFA            // Link to previous definition Name
 186+ 7C41             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 7C41 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 186+ 7C43             >                else
 186+ 7C43 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 186+ 7C43             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 7C43             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 7C43             >
 186+ 7C43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 7C43 22 7C                        dw  BLK_SEEK
 188+ 7C45 AB 6D                        dw  BBUF
 189+ 7C47 DD 7B FF 6B                  dw  BLK_FH, FETCH
 190+ 7C4B 0B 68                        dw  F_READ
 191+ 7C4D 43 64 2E 00                  dw  LIT, $2E, QERROR
 191+ 7C51 08 71
 192+ 7C53 06 6B                        dw  DROP
 193+ 7C55 BD 69                        dw  EXIT
 194+ 7C57
 195+ 7C57              //  ______________________________________________________________________
 196+ 7C57              //
 197+ 7C57              // blk-write     n --
 198+ 7C57              // seek block n  within blocks!.bin  file
 199+ 7C57                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 199+ 7C57             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 199+ 7C57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 199+ 7C57             >
 199+ 7C57             >                // dummy db directives used to calculate length of namec
 199+ 7C57 42 4C 4B 2D >                db      "BLK-WRITE"
 199+ 7C5B 57 52 49 54 >
 199+ 7C5F 45          >
 199+ 7C60             >len_NFA         defl    $ - temp_NFA
 199+ 7C60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 199+ 7C57             >
 199+ 7C57 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 199+ 7C58 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 199+ 7C5C 57 52 49 54 >
 199+ 7C60 45          >
 199+ 7C61             >                org     $-1                 // alter last byte of Name just above to set
 199+ 7C60 C5          >                db      {b $} | END_BIT     // msb as name end
 199+ 7C61             >
 199+ 7C61 36 7C       >                dw      last_NFA            // Link to previous definition Name
 199+ 7C63             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 199+ 7C63 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 199+ 7C65             >                else
 199+ 7C65 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 199+ 7C65             >                endif           ; ok        // for other definitions it "points" the correct handler
 199+ 7C65             >                // Use of "; ok" to suppress "warning[fwdref]"
 199+ 7C65             >
 199+ 7C65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 200+ 7C65 22 7C                        dw  BLK_SEEK
 201+ 7C67 AB 6D                        dw  BBUF
 202+ 7C69 DD 7B FF 6B                  dw  BLK_FH, FETCH
 203+ 7C6D 2A 68                        dw  F_WRITE
 204+ 7C6F 43 64 2F 00                  dw  LIT, $2F, QERROR
 204+ 7C73 08 71
 205+ 7C75 06 6B                        dw  DROP
 206+ 7C77 BD 69                        dw  EXIT
 207+ 7C79
 208+ 7C79              //  ______________________________________________________________________
 209+ 7C79              //
 210+ 7C79              // blk-init     n --
 211+ 7C79              // seek block n  within blocks!.bin  file
 212+ 7C79                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 212+ 7C79             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 212+ 7C79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 7C79             >
 212+ 7C79             >                // dummy db directives used to calculate length of namec
 212+ 7C79 42 4C 4B 2D >                db      "BLK-INIT"
 212+ 7C7D 49 4E 49 54 >
 212+ 7C81             >len_NFA         defl    $ - temp_NFA
 212+ 7C81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 7C79             >
 212+ 7C79 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 7C7A 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 212+ 7C7E 49 4E 49 54 >
 212+ 7C82             >                org     $-1                 // alter last byte of Name just above to set
 212+ 7C81 D4          >                db      {b $} | END_BIT     // msb as name end
 212+ 7C82             >
 212+ 7C82 57 7C       >                dw      last_NFA            // Link to previous definition Name
 212+ 7C84             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 7C84 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 212+ 7C86             >                else
 212+ 7C86 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 212+ 7C86             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 7C86             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 7C86             >
 212+ 7C86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 7C86 DD 7B FF 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 213+ 7C8A 49 68 06 6B
 214+ 7C8E ED 7B 7F 6A                  dw  BLK_FNAME, ONE_PLUS
 215+ 7C92 3D 6F 83 6D                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 215+ 7C96 63 68
 216+ 7C98 43 64 2C 00                  dw  LIT, $2C, QERROR
 216+ 7C9C 08 71
 217+ 7C9E DD 7B 0C 6C                  dw  BLK_FH, STORE
 218+ 7CA2 BD 69                        dw  EXIT
 219+ 7CA4
 220+ 7CA4              //  ______________________________________________________________________
 221+ 7CA4              //
 222+ 7CA4              // #sec
 223+ 7CA4              // number of 512 Byte "sector" available on thie sysstem.
 224+ 7CA4              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 225+ 7CA4
 226+ 7CA4                              Constant_Def NSEC , "#SEC", 32767
 226+ 7CA4             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 226+ 7CA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 226+ 7CA4             >
 226+ 7CA4             >                // dummy db directives used to calculate length of namec
 226+ 7CA4 23 53 45 43 >                db      "#SEC"
 226+ 7CA8             >len_NFA         defl    $ - temp_NFA
 226+ 7CA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 226+ 7CA4             >
 226+ 7CA4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 226+ 7CA5 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 226+ 7CA9             >                org     $-1                 // alter last byte of Name just above to set
 226+ 7CA8 C3          >                db      {b $} | END_BIT     // msb as name end
 226+ 7CA9             >
 226+ 7CA9 79 7C       >                dw      last_NFA            // Link to previous definition Name
 226+ 7CAB             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 226+ 7CAB 2F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 226+ 7CAD             >                else
 226+ 7CAD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 226+ 7CAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 226+ 7CAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 226+ 7CAD             >
 226+ 7CAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 7CAD FF 7F       >                dw      32767
 227+ 7CAF
 228+ 7CAF              //  ______________________________________________________________________
 229+ 7CAF
 230+ 7CAF
 231+ 7CAF
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
 112  7CAF                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
   1+ 7CAF              //  ______________________________________________________________________
   2+ 7CAF              //
   3+ 7CAF              //  L3.asm
   4+ 7CAF              //
   5+ 7CAF              //  Continuation of L2.asm
   6+ 7CAF              //  I/O Block definitions
   7+ 7CAF              //  ______________________________________________________________________
   8+ 7CAF
   9+ 7CAF
  10+ 7CAF              //  ______________________________________________________________________
  11+ 7CAF              //
  12+ 7CAF              // r/w          a n f --
  13+ 7CAF              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7CAF                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7CAF             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7CAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7CAF             >
  14+ 7CAF             >                // dummy db directives used to calculate length of namec
  14+ 7CAF 52 2F 57    >                db      "R/W"
  14+ 7CB2             >len_NFA         defl    $ - temp_NFA
  14+ 7CB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7CAF             >
  14+ 7CAF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7CB0 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7CB3             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7CB2 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7CB3             >
  14+ 7CB3 A4 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7CB5             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7CB5 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7CB7             >                else
  14+ 7CB7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  14+ 7CB7             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7CB7             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7CB7             >
  14+ 7CB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7CB7 E6 69                        dw      TO_R                    // >r
  16+ 7CB9 8B 6A                        dw      ONE_SUBTRACT            // 1-
  17+ 7CBB 3B 6B 2E 6A                  dw      DUP, ZLESS              // dup 0<
  18+ 7CBF F6 6A AB 7C                  dw      OVER, NSEC              // over #sec
  19+ 7CC3 8B 6A DC 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7CC7 61 69                        dw      OR_OP                   // or
  21+ 7CC9 43 64 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7CCD 08 71
  22+ 7CCF FA 69                        dw      R_TO                    // r>
  23+ 7CD1                                                              // if
  24+ 7CD1 7D 64                        dw      ZBRANCH
  25+ 7CD3 08 00                        dw      Read_Write_Else - $
  26+ 7CD5 41 7C                        dw          BLK_READ            //      blk-read
  27+ 7CD7 66 64                        dw      BRANCH
  28+ 7CD9 04 00                        dw      Read_Write_Endif - $
  29+ 7CDB              Read_Write_Else:                                // else
  30+ 7CDB 63 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CDD              Read_Write_Endif:                               // endif
  32+ 7CDD BD 69                        dw      EXIT                    // ;
  33+ 7CDF
  34+ 7CDF
  35+ 7CDF              //  ______________________________________________________________________
  36+ 7CDF              //
  37+ 7CDF              // +buf        a1 -- a2 f
  38+ 7CDF              // advences to next buffer, cyclically rotating along them
  39+ 7CDF                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CDF             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CDF             >
  39+ 7CDF             >                // dummy db directives used to calculate length of namec
  39+ 7CDF 2B 42 55 46 >                db      "+BUF"
  39+ 7CE3             >len_NFA         defl    $ - temp_NFA
  39+ 7CE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CDF             >
  39+ 7CDF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CE0 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CE4             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CE3 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CE4             >
  39+ 7CE4 AF 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CE6             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CE6 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CE8             >                else
  39+ 7CE8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  39+ 7CE8             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CE8             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CE8             >
  39+ 7CE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CE8 43 64 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CEC 56 6A
  41+ 7CEE 3B 6B 4D 6E                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CF2 FF 6B
  42+ 7CF4 9F 6F                        dw      EQUALS                  // =
  43+ 7CF6                                                              // if
  44+ 7CF6 7D 64                        dw      ZBRANCH
  45+ 7CF8 08 00                        dw      PBuf_Endif - $
  46+ 7CFA 06 6B                        dw          DROP                //      drop
  47+ 7CFC 42 6E FF 6B                  dw          FIRST, FETCH        //      first @
  48+ 7D00              PBuf_Endif:                                     // endif
  49+ 7D00 3B 6B FF 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7D04 FF 6B
  50+ 7D06 91 6F                        dw      SUBTRACT                // -
  51+ 7D08 BD 69                        dw      EXIT                    // ;
  52+ 7D0A
  53+ 7D0A              //  ______________________________________________________________________
  54+ 7D0A              //
  55+ 7D0A              // update       --
  56+ 7D0A              // mark the last used block to be written to disk
  57+ 7D0A                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7D0A             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7D0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7D0A             >
  57+ 7D0A             >                // dummy db directives used to calculate length of namec
  57+ 7D0A 55 50 44 41 >                db      "UPDATE"
  57+ 7D0E 54 45       >
  57+ 7D10             >len_NFA         defl    $ - temp_NFA
  57+ 7D10             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7D0A             >
  57+ 7D0A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7D0B 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7D0F 54 45       >
  57+ 7D11             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7D10 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7D11             >
  57+ 7D11 DF 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7D13             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7D13 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7D15             >                else
  57+ 7D15 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7D15             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7D15             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7D15             >
  57+ 7D15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7D15 FF 6E FF 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7D19 FF 6B
  59+ 7D1B 43 64 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7D1F 61 69
  60+ 7D21 FF 6E FF 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7D25 0C 6C
  61+ 7D27 BD 69                        dw      EXIT                    // ;
  62+ 7D29
  63+ 7D29
  64+ 7D29              //  ______________________________________________________________________
  65+ 7D29              //
  66+ 7D29              // empty-buffers --
  67+ 7D29                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7D29             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7D29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7D29             >
  67+ 7D29             >                // dummy db directives used to calculate length of namec
  67+ 7D29 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7D2D 59 2D 42 55 >
  67+ 7D31 46 46 45 52 >
  67+ 7D35 53          >
  67+ 7D36             >len_NFA         defl    $ - temp_NFA
  67+ 7D36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7D29             >
  67+ 7D29 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7D2A 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7D2E 59 2D 42 55 >
  67+ 7D32 46 46 45 52 >
  67+ 7D36 53          >
  67+ 7D37             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D36 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D37             >
  67+ 7D37 0A 7D       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D39             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D39 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D3B             >                else
  67+ 7D3B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  67+ 7D3B             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D3B             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D3B             >
  67+ 7D3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D3B 42 6E FF 6B                  dw      FIRST, FETCH            // first @
  69+ 7D3F 4D 6E FF 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D43 F6 6A 91 6F                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D47 DC 73
  71+ 7D49 BD 69                        dw      EXIT                    // ;
  72+ 7D4B
  73+ 7D4B              //  ______________________________________________________________________
  74+ 7D4B              //
  75+ 7D4B              // buffer       n -- a
  76+ 7D4B              // read block n and gives the address to a buffer
  77+ 7D4B              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D4B              // disk before reading the block n.
  79+ 7D4B
  80+ 7D4B                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D4B             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D4B             >
  80+ 7D4B             >                // dummy db directives used to calculate length of namec
  80+ 7D4B 42 55 46 46 >                db      "BUFFER"
  80+ 7D4F 45 52       >
  80+ 7D51             >len_NFA         defl    $ - temp_NFA
  80+ 7D51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D4B             >
  80+ 7D4B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D4C 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D50 45 52       >
  80+ 7D52             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D51 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D52             >
  80+ 7D52 29 7D       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D54             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D54 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D56             >                else
  80+ 7D56 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  80+ 7D56             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D56             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D56             >
  80+ 7D56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D56 F5 6E FF 6B                  dw      USE, FETCH              // use @
  82+ 7D5A 3B 6B E6 69                  dw      DUP, TO_R               // dup >r
  83+ 7D5E                                                              // begin
  84+ 7D5E              Buffer_Begin:
  85+ 7D5E E6 7C                        dw          PBUF                //      +buf
  86+ 7D60                                                              // until
  87+ 7D60 7D 64                        dw      ZBRANCH
  88+ 7D62 FC FF                        dw      Buffer_Begin - $
  89+ 7D64 F5 6E 0C 6C                  dw      USE, STORE              // use !
  90+ 7D68 0E 6A FF 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D6C 2E 6A
  91+ 7D6E                                                              // if
  92+ 7D6E 7D 64                        dw      ZBRANCH
  93+ 7D70 14 00                        dw      Buffer_Endif - $
  94+ 7D72 0E 6A A7 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D76 0E 6A FF 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D7A 43 64 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D7E 4F 69                        dw          AND_OP              //      and
  98+ 7D80 6B 6D B5 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D84              Buffer_Endif:                                   // endif
 100+ 7D84 0E 6A 0C 6C                  dw      R_OP, STORE             // r !
 101+ 7D88 0E 6A FF 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D8C 0C 6C
 102+ 7D8E FA 69 A7 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D92 BD 69                        dw      EXIT                    // ;
 104+ 7D94
 105+ 7D94              //  ______________________________________________________________________
 106+ 7D94              //
 107+ 7D94              // block        n -- a
 108+ 7D94              // Leaves the buffer address that contains the block n.
 109+ 7D94              // If the block is not already present, it will be loaded from disk
 110+ 7D94              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D94              // disk before reading the block n.
 112+ 7D94              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D94
 114+ 7D94                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D94             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D94             >
 114+ 7D94             >                // dummy db directives used to calculate length of namec
 114+ 7D94 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D98 4B          >
 114+ 7D99             >len_NFA         defl    $ - temp_NFA
 114+ 7D99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D94             >
 114+ 7D94 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D95 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D99 4B          >
 114+ 7D9A             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D99 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D9A             >
 114+ 7D9A 4B 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D9C             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D9C F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D9E             >                else
 114+ 7D9E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 114+ 7D9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D9E             >
 114+ 7D9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D9E 91 6E FF 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7DA2 56 6A E6 69                  dw      PLUS, TO_R              // + >r
 117+ 7DA6 FF 6E FF 6B                  dw      PREV, FETCH             // prev @
 118+ 7DAA 3B 6B FF 6B                  dw      DUP, FETCH              // dup @
 119+ 7DAE 0E 6A 91 6F                  dw      R_OP, SUBTRACT          // r -
 120+ 7DB2 3B 6B 56 6A                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7DB6                                                              // if
 122+ 7DB6 7D 64                        dw        ZBRANCH
 123+ 7DB8 34 00                        dw        Block_Endif_1 - $
 124+ 7DBA              Block_Begin:                                    //      begin
 125+ 7DBA E6 7C 1B 6A                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7DBE                                                              //          if
 127+ 7DBE 7D 64                        dw          ZBRANCH
 128+ 7DC0 14 00                        dw          Block_Endif_2 - $
 129+ 7DC2 06 6B                        dw              DROP            //              drop
 130+ 7DC4 0E 6A 54 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7DC8 3B 6B                        dw              DUP             //              dup
 132+ 7DCA 0E 6A 73 6D                  dw              R_OP, ONE       //              r 1
 133+ 7DCE B5 7C                        dw              READ_WRITE      //              r/w
 134+ 7DD0 7B 6D 91 6F                  dw              TWO, SUBTRACT   //              2 -
 135+ 7DD4              Block_Endif_2:                                  //          endif
 136+ 7DD4 3B 6B FF 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DD8 0E 6A
 137+ 7DDA 91 6F 3B 6B                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DDE 56 6A 1B 6A                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DE2                                                              //      until
 140+ 7DE2 7D 64                        dw        ZBRANCH
 141+ 7DE4 D6 FF                        dw        Block_Begin - $
 142+ 7DE6 3B 6B FF 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DEA 0C 6C
 143+ 7DEC              Block_Endif_1:                                  // endif
 144+ 7DEC FA 69 06 6B                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DF0 A7 6A
 145+ 7DF2 BD 69                        dw      EXIT                    // ;
 146+ 7DF4
 147+ 7DF4              //  ______________________________________________________________________
 148+ 7DF4              //
 149+ 7DF4              // #buff        -- n
 150+ 7DF4              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DF4                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DF4             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DF4             >
 151+ 7DF4             >                // dummy db directives used to calculate length of namec
 151+ 7DF4 23 42 55 46 >                db      "#BUFF"
 151+ 7DF8 46          >
 151+ 7DF9             >len_NFA         defl    $ - temp_NFA
 151+ 7DF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DF4             >
 151+ 7DF4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DF5 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DF9 46          >
 151+ 7DFA             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DF9 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DFA             >
 151+ 7DFA 94 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DFC             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DFC 2F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DFE             >                else
 151+ 7DFE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 7DFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DFE             >
 151+ 7DFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DFE 07 00       >                dw      7
 152+ 7E00
 153+ 7E00              //  ______________________________________________________________________
 154+ 7E00              //
 155+ 7E00              // flush        --
 156+ 7E00                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7E00             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7E00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7E00             >
 156+ 7E00             >                // dummy db directives used to calculate length of namec
 156+ 7E00 46 4C 55 53 >                db      "FLUSH"
 156+ 7E04 48          >
 156+ 7E05             >len_NFA         defl    $ - temp_NFA
 156+ 7E05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7E00             >
 156+ 7E00 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7E01 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7E05 48          >
 156+ 7E06             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7E05 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7E06             >
 156+ 7E06 F4 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7E08             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7E08 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7E0A             >                else
 156+ 7E0A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 7E0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7E0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7E0A             >
 156+ 7E0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7E0A FC 7D 7F 6A                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7E0E 6B 6D
 158+ 7E10              Flush_Do:                                       // do
 159+ 7E10 05 65                        dw      C_DO
 160+ 7E12 6B 6D 54 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7E16 06 6B
 161+ 7E18                                                              // loop
 162+ 7E18 92 64 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7E1C DD 7B FF 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7E20 86 68 06 6B                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7E24 BD 69                        dw      EXIT                    // exit
 166+ 7E26
 167+ 7E26              //  ______________________________________________________________________
 168+ 7E26              //
 169+ 7E26              // f_getline    a m fh -- n
 170+ 7E26              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7E26              // Address a is left for subsequent processing
 172+ 7E26              // and n as the actual number of byte read, that is the length of line
 173+ 7E26                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7E26             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7E26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7E26             >
 173+ 7E26             >                // dummy db directives used to calculate length of namec
 173+ 7E26 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7E2A 54 4C 49 4E >
 173+ 7E2E 45          >
 173+ 7E2F             >len_NFA         defl    $ - temp_NFA
 173+ 7E2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7E26             >
 173+ 7E26 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7E27 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7E2B 54 4C 49 4E >
 173+ 7E2F 45          >
 173+ 7E30             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7E2F C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7E30             >
 173+ 7E30 00 7E       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E32             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E32 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E34             >                else
 173+ 7E34 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 7E34             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E34             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E34             >
 173+ 7E34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E34 E6 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E36 1E 6B                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E38 0E 6A ED 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E3C 43 64 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E40 08 71
 178+ 7E42
 179+ 7E42 93 6B F6 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E46 7F 6A 2E 6B                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E4A
 182+ 7E4A 0E 6A 0B 68                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E4E 43 64 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E52 08 71
 184+ 7E54                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E54 7D 64                        dw      ZBRANCH
 186+ 7E56 36 00                        dw      FGetline_Else - $
 187+ 7E58 43 64 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E5C F0 65
 188+ 7E5E 06 6B 11 6B                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E62 2E 6B                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E64 43 64 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E68 F0 65
 191+ 7E6A 06 6B 11 6B                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E6E 48 6B EA 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E72 3B 6B E6 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 194+ 7E76 93 6B FA 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 195+ 7E7A 6B 6D 63 6A                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 196+ 7E7E FA 69 C8 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 197+ 7E82 43 64 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 197+ 7E86 08 71
 198+ 7E88                                                              // else
 199+ 7E88 66 64                        dw      BRANCH
 200+ 7E8A 0C 00                        dw      FGetline_Endif - $
 201+ 7E8C              FGetline_Else:
 202+ 7E8C FA 69                        dw          R_TO                //      r>              ( m d a fh )
 203+ 7E8E 93 6B 85 6B                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 204+ 7E92 06 6B 6B 6D                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 205+ 7E96              FGetline_Endif:                                 // endif
 206+ 7E96 E6 69 3B 6B                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 206+ 7E9A 3B 6B
 207+ 7E9C 7F 6A 2E 6B                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 208+ 7EA0 0E 6A AB 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 209+ 7EA4 A5 6B 56 6A                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 210+ 7EA8 6B 6D 2E 6B                  dw      ZERO, SWAP              // 0 swap
 211+ 7EAC B1 6A 0C 6C                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 212+ 7EB0 0E 6A 56 6A                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 212+ 7EB4 8B 6A
 213+ 7EB6 2E 6B 0E 6A                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 213+ 7EBA 91 6F
 214+ 7EBC ED 73                        dw      BLANKS                  // blanks
 215+ 7EBE FA 69                        dw      R_TO                    // r>                   ( n )
 216+ 7EC0 BD 69                        dw      EXIT                    // ;
 217+ 7EC2
 218+ 7EC2              //  ______________________________________________________________________
 219+ 7EC2              //
 220+ 7EC2              // f_include    fh --
 221+ 7EC2              // Given a filehandle includes the source from file
 222+ 7EC2                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 222+ 7EC2             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 222+ 7EC2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 7EC2             >
 222+ 7EC2             >                // dummy db directives used to calculate length of namec
 222+ 7EC2 46 5F 49 4E >                db      "F_INCLUDE"
 222+ 7EC6 43 4C 55 44 >
 222+ 7ECA 45          >
 222+ 7ECB             >len_NFA         defl    $ - temp_NFA
 222+ 7ECB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 7EC2             >
 222+ 7EC2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 7EC3 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 222+ 7EC7 43 4C 55 44 >
 222+ 7ECB 45          >
 222+ 7ECC             >                org     $-1                 // alter last byte of Name just above to set
 222+ 7ECB C5          >                db      {b $} | END_BIT     // msb as name end
 222+ 7ECC             >
 222+ 7ECC 26 7E       >                dw      last_NFA            // Link to previous definition Name
 222+ 7ECE             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 7ECE F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 7ED0             >                else
 222+ 7ED0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 222+ 7ED0             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 7ED0             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 7ED0             >
 222+ 7ED0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 7ED0 6A 6E FF 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 223+ 7ED4 E6 69
 224+ 7ED6 73 6E FF 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 224+ 7EDA E6 69
 225+ 7EDC 21 6F FF 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 225+ 7EE0 E6 69
 226+ 7EE2 0E 6A                        dw      R_OP                    // r
 227+ 7EE4                                                              // if
 228+ 7EE4 7D 64                        dw      ZBRANCH
 229+ 7EE6 10 00                        dw      FInclude_Else_1 - $
 230+ 7EE8 0E 6A ED 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 231+ 7EEC 43 64 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 231+ 7EF0 08 71
 232+ 7EF2                                                              // else
 233+ 7EF2 66 64                        dw      BRANCH
 234+ 7EF4 06 00                        dw      FInclude_Endif_1 - $
 235+ 7EF6              FInclude_Else_1:
 236+ 7EF6 6B 6D 6B 6D                  dw          ZERO, ZERO          //      0 0
 237+ 7EFA                                                              // endif
 238+ 7EFA              FInclude_Endif_1:
 239+ 7EFA E6 69 E6 69                  dw      TO_R, TO_R              // >r >r
 240+ 7EFE 21 6F 0C 6C                  dw      SOURCE_ID, STORE        // source-id !
 241+ 7F02              FInclude_Begin:                                 // begin
 242+ 7F02 73 6D 9C 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 242+ 7F06 AB 6D
 243+ 7F08 A5 6B ED 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 244+ 7F0C 2E 6B 7F 6A                  dw          SWAP, ONE_PLUS      //      swap 1+
 245+ 7F10 2E 6B B1 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 246+ 7F14 21 6F FF 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 247+ 7F18 32 7E                        dw          F_GETLINE           //      f_getline
 248+ 7F1A                                                              // while
 249+ 7F1A 7D 64                        dw      ZBRANCH
 250+ 7F1C 14 00                        dw      FInclude_Repeat - $
 251+ 7F1E 73 6D 6A 6E                  dw          ONE, BLK, STORE     //      1 blk !
 251+ 7F22 0C 6C
 252+ 7F24 6B 6D 73 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
 252+ 7F28 0C 6C
 253+ 7F2A C5 77                        dw          INTERPRET           //      interpret
 254+ 7F2C 66 64                        dw      BRANCH
 255+ 7F2E D4 FF                        dw      FInclude_Begin - $
 256+ 7F30              FInclude_Repeat:                                // repeat
 257+ 7F30 21 6F FF 6B                  dw      SOURCE_ID, FETCH        // source-id @
 258+ 7F34 6B 6D 21 6F                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 258+ 7F38 0C 6C
 259+ 7F3A 49 68                        dw      F_CLOSE                 // f_close
 260+ 7F3C 43 64 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 260+ 7F40 08 71
 261+ 7F42 FA 69 FA 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 261+ 7F46 FA 69
 262+ 7F48 3B 6B 21 6F                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 262+ 7F4C 0C 6C
 263+ 7F4E                                                              // if
 264+ 7F4E 7D 64                        dw      ZBRANCH
 265+ 7F50 12 00                        dw      FInclude_Else_2 - $
 266+ 7F52 21 6F FF 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 267+ 7F56 C8 67                        dw          F_SEEK              //      f_seek
 268+ 7F58 43 64 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 268+ 7F5C 08 71
 269+ 7F5E                                                              // else
 270+ 7F5E 66 64                        dw      BRANCH
 271+ 7F60 04 00                        dw      FInclude_Endif_2 - $
 272+ 7F62              FInclude_Else_2:
 273+ 7F62 85 6B                        dw          TWO_DROP            //      2drop
 274+ 7F64              FInclude_Endif_2:                               // endif
 275+ 7F64 FA 69 73 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 275+ 7F68 0C 6C
 276+ 7F6A FA 69 6A 6E                  dw      R_TO, BLK, STORE        // r> blk !
 276+ 7F6E 0C 6C
 277+ 7F70 BD 69                        dw      EXIT                    // ;
 278+ 7F72
 279+ 7F72              //  ______________________________________________________________________
 280+ 7F72              //
 281+ 7F72              // open<         -- fh
 282+ 7F72              // Open the following filename and return it file-handle
 283+ 7F72              // Used in the form OPEN CCCC
 284+ 7F72                              Colon_Def OPEN_FH, "OPEN<", is_normal
 284+ 7F72             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 284+ 7F72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ 7F72             >
 284+ 7F72             >                // dummy db directives used to calculate length of namec
 284+ 7F72 4F 50 45 4E >                db      "OPEN<"
 284+ 7F76 3C          >
 284+ 7F77             >len_NFA         defl    $ - temp_NFA
 284+ 7F77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ 7F72             >
 284+ 7F72 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ 7F73 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 284+ 7F77 3C          >
 284+ 7F78             >                org     $-1                 // alter last byte of Name just above to set
 284+ 7F77 BC          >                db      {b $} | END_BIT     // msb as name end
 284+ 7F78             >
 284+ 7F78 C2 7E       >                dw      last_NFA            // Link to previous definition Name
 284+ 7F7A             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 7F7A F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 284+ 7F7C             >                else
 284+ 7F7C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 284+ 7F7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 7F7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 7F7C             >
 284+ 7F7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 7F7C 95 6D                        dw      BL
 286+ 7F7E 25 74 8F 72                  dw      WORD, COUNT, OVER       // bl word count over
 286+ 7F82 F6 6A
 287+ 7F84 56 6A 6B 6D                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 287+ 7F88 2E 6B 0C 6C
 288+ 7F8C 12 74 73 6D                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 288+ 7F90 63 68
 289+ 7F92 43 64 2B 00                  dw      LIT, 43                 // 43
 290+ 7F96 08 71                        dw      QERROR                  // ?error
 291+ 7F98 BD 69                        dw      EXIT                    // ;
 292+ 7F9A
 293+ 7F9A              //  ______________________________________________________________________
 294+ 7F9A              //
 295+ 7F9A              // include      -- cccc
 296+ 7F9A              // Include the following filename
 297+ 7F9A                              Colon_Def INCLUDE, "INCLUDE", is_normal
 297+ 7F9A             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 297+ 7F9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 297+ 7F9A             >
 297+ 7F9A             >                // dummy db directives used to calculate length of namec
 297+ 7F9A 49 4E 43 4C >                db      "INCLUDE"
 297+ 7F9E 55 44 45    >
 297+ 7FA1             >len_NFA         defl    $ - temp_NFA
 297+ 7FA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 297+ 7F9A             >
 297+ 7F9A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 297+ 7F9B 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 297+ 7F9F 55 44 45    >
 297+ 7FA2             >                org     $-1                 // alter last byte of Name just above to set
 297+ 7FA1 C5          >                db      {b $} | END_BIT     // msb as name end
 297+ 7FA2             >
 297+ 7FA2 72 7F       >                dw      last_NFA            // Link to previous definition Name
 297+ 7FA4             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 297+ 7FA4 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 297+ 7FA6             >                else
 297+ 7FA6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 297+ 7FA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 297+ 7FA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 297+ 7FA6             >
 297+ 7FA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 298+ 7FA6 7A 7F                        dw      OPEN_FH                 // open
 299+ 7FA8 3B 6B CE 7E                  dw      DUP, F_INCLUDE          // dup f_include
 300+ 7FAC 49 68 06 6B                  dw      F_CLOSE, DROP           // f_close drop
 301+ 7FB0 BD 69                        dw      EXIT                    // ;
 302+ 7FB2
 303+ 7FB2              //  ______________________________________________________________________
 304+ 7FB2              //
 305+ 7FB2              // needs
 306+ 7FB2              // check for cccc exists in vocabulary
 307+ 7FB2              // if it doesn't then  INCLUDE  inc/cccc.F
 308+ 7FB2
 309+ 7FB2              // temp filename cccc.f as counted string zero-padded
 310+ 7FB2                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 310+ 7FB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 7FB2             >
 310+ 7FB2             >                // dummy db directives used to calculate length of namec
 310+ 7FB2 4E 45 45 44 >                db      "NEEDS-W"
 310+ 7FB6 53 2D 57    >
 310+ 7FB9             >len_NFA         defl    $ - temp_NFA
 310+ 7FB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 7FB2             >
 310+ 7FB2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 7FB3 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 310+ 7FB7 53 2D 57    >
 310+ 7FBA             >                org     $-1                 // alter last byte of Name just above to set
 310+ 7FB9 D7          >                db      {b $} | END_BIT     // msb as name end
 310+ 7FBA             >
 310+ 7FBA 9A 7F       >                dw      last_NFA            // Link to previous definition Name
 310+ 7FBC             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 7FBC D8 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 310+ 7FBE             >                else
 310+ 7FBE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 7FBE             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 7FBE             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 7FBE             >
 310+ 7FBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 7FBE 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 312+ 7FE1              // temp complete path+filename
 313+ 7FE1                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 313+ 7FE1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 313+ 7FE1             >
 313+ 7FE1             >                // dummy db directives used to calculate length of namec
 313+ 7FE1 4E 45 45 44 >                db      "NEEDS-FN"
 313+ 7FE5 53 2D 46 4E >
 313+ 7FE9             >len_NFA         defl    $ - temp_NFA
 313+ 7FE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 313+ 7FE1             >
 313+ 7FE1 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 313+ 7FE2 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 313+ 7FE6 53 2D 46 4E >
 313+ 7FEA             >                org     $-1                 // alter last byte of Name just above to set
 313+ 7FE9 CE          >                db      {b $} | END_BIT     // msb as name end
 313+ 7FEA             >
 313+ 7FEA B2 7F       >                dw      last_NFA            // Link to previous definition Name
 313+ 7FEC             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 313+ 7FEC D8 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 313+ 7FEE             >                else
 313+ 7FEE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 313+ 7FEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 313+ 7FEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 313+ 7FEE             >
 313+ 7FEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 314+ 7FEE 00 00 00...                  ds      40
 315+ 8016              // constant path
 316+ 8016                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 316+ 8016             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 8016             >
 316+ 8016             >                // dummy db directives used to calculate length of namec
 316+ 8016 4E 45 45 44 >                db      "NEEDS-INC"
 316+ 801A 53 2D 49 4E >
 316+ 801E 43          >
 316+ 801F             >len_NFA         defl    $ - temp_NFA
 316+ 801F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 8016             >
 316+ 8016 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 8017 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 316+ 801B 53 2D 49 4E >
 316+ 801F 43          >
 316+ 8020             >                org     $-1                 // alter last byte of Name just above to set
 316+ 801F C3          >                db      {b $} | END_BIT     // msb as name end
 316+ 8020             >
 316+ 8020 E1 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 8022             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 8022 D8 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 8024             >                else
 316+ 8024 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 316+ 8024             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 8024             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 8024             >
 316+ 8024             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 8024 04 69 6E 63                  db      4, "inc/", 0
 317+ 8028 2F 00
 318+ 802A                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 318+ 802A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ 802A             >
 318+ 802A             >                // dummy db directives used to calculate length of namec
 318+ 802A 4E 45 45 44 >                db      "NEEDS-LIB"
 318+ 802E 53 2D 4C 49 >
 318+ 8032 42          >
 318+ 8033             >len_NFA         defl    $ - temp_NFA
 318+ 8033             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ 802A             >
 318+ 802A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ 802B 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 318+ 802F 53 2D 4C 49 >
 318+ 8033 42          >
 318+ 8034             >                org     $-1                 // alter last byte of Name just above to set
 318+ 8033 C2          >                db      {b $} | END_BIT     // msb as name end
 318+ 8034             >
 318+ 8034 16 80       >                dw      last_NFA            // Link to previous definition Name
 318+ 8036             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 8036 D8 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 318+ 8038             >                else
 318+ 8038 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 318+ 8038             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 8038             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 8038             >
 318+ 8038             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 8038 04 6C 69 62                  db      4, "lib/", 0
 319+ 803C 2F 00
 320+ 803E
 321+ 803E              // Concatenate path at a and filename and include it
 322+ 803E              // No error is issued if filename doesn't exist.
 323+ 803E                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 323+ 803E             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 323+ 803E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 323+ 803E             >
 323+ 803E             >                // dummy db directives used to calculate length of namec
 323+ 803E 4E 45 45 44 >                db      "NEEDS/"
 323+ 8042 53 2F       >
 323+ 8044             >len_NFA         defl    $ - temp_NFA
 323+ 8044             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 323+ 803E             >
 323+ 803E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 323+ 803F 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 323+ 8043 53 2F       >
 323+ 8045             >                org     $-1                 // alter last byte of Name just above to set
 323+ 8044 AF          >                db      {b $} | END_BIT     // msb as name end
 323+ 8045             >
 323+ 8045 2A 80       >                dw      last_NFA            // Link to previous definition Name
 323+ 8047             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 323+ 8047 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 323+ 8049             >                else
 323+ 8049 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 323+ 8049             >                endif           ; ok        // for other definitions it "points" the correct handler
 323+ 8049             >                // Use of "; ok" to suppress "warning[fwdref]"
 323+ 8049             >
 323+ 8049             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 324+ 8049 8F 72 1E 6B                  dw      COUNT, TUCK             // n a n
 325+ 804D EC 7F 2E 6B                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 325+ 8051 AB 68
 326+ 8053 EC 7F 56 6A                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 327+ 8057 BC 7F 7F 6A                  dw      NEEDS_W, ONE_PLUS, SWAP
 327+ 805B 2E 6B
 328+ 805D 43 64 23 00                  dw      LIT, 35
 329+ 8061 AB 68                        dw      CMOVE
 330+ 8063 EC 7F                        dw      NEEDS_FN
 331+ 8065 12 74 73 6D                  dw      PAD, ONE, F_OPEN
 331+ 8069 63 68
 332+ 806B 7D 64                        dw      ZBRANCH
 333+ 806D 16 00                        dw      Needs_1 - $
 334+ 806F BC 7F 8F 72                  dw          NEEDS_W, COUNT, TYPE, SPACE
 334+ 8073 A2 72 4E 70
 335+ 8077 43 64 2B 00                  dw          LIT, 43, MESSAGE, DROP
 335+ 807B C7 7A 06 6B
 336+ 807F 66 64                        dw      BRANCH
 337+ 8081 04 00                        dw      Needs_2 - $
 338+ 8083              Needs_1:
 339+ 8083 CE 7E                        dw          F_INCLUDE
 340+ 8085              Needs_2:
 341+ 8085 BD 69                        dw      EXIT                    // ;
 342+ 8087
 343+ 8087
 344+ 8087                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 344+ 8087             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ 8087             >
 344+ 8087             >                // dummy db directives used to calculate length of namec
 344+ 8087 4E 43 44 4D >                db      "NCDM"
 344+ 808B             >len_NFA         defl    $ - temp_NFA
 344+ 808B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ 8087             >
 344+ 8087 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ 8088 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 344+ 808C             >                org     $-1                 // alter last byte of Name just above to set
 344+ 808B CD          >                db      {b $} | END_BIT     // msb as name end
 344+ 808C             >
 344+ 808C 3E 80       >                dw      last_NFA            // Link to previous definition Name
 344+ 808E             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 808E D8 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 344+ 8090             >                else
 344+ 8090 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 344+ 8090             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 8090             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 8090             >
 344+ 8090             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 8090 5E 60 25 26                  db $5E, $60, $25, $26, $24, $5F, $7B, $7D, $7E
 345+ 8094 24 5F 7B 7D
 345+ 8098 7E
 346+ 8099
 347+ 8099                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 347+ 8099             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 347+ 8099             >
 347+ 8099             >                // dummy db directives used to calculate length of namec
 347+ 8099 4E 44 4F 4D >                db      "NDOM"
 347+ 809D             >len_NFA         defl    $ - temp_NFA
 347+ 809D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 347+ 8099             >
 347+ 8099 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 347+ 809A 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 347+ 809E             >                org     $-1                 // alter last byte of Name just above to set
 347+ 809D CD          >                db      {b $} | END_BIT     // msb as name end
 347+ 809E             >
 347+ 809E 87 80       >                dw      last_NFA            // Link to previous definition Name
 347+ 80A0             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 347+ 80A0 D8 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 347+ 80A2             >                else
 347+ 80A2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 347+ 80A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 347+ 80A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 347+ 80A2             >
 347+ 80A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 348+ 80A2 3A 3F 2F 2A                  db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 348+ 80A6 7C 5C 3C 3E
 348+ 80AA 22
 349+ 80AB
 350+ 80AB
 351+ 80AB              // Replace illegal character in filename using the map here above
 352+ 80AB              // at the moment we need only  "
 353+ 80AB                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 353+ 80AB             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 353+ 80AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ 80AB             >
 353+ 80AB             >                // dummy db directives used to calculate length of namec
 353+ 80AB 4E 45 45 44 >                db      "NEEDS-CH"
 353+ 80AF 53 2D 43 48 >
 353+ 80B3             >len_NFA         defl    $ - temp_NFA
 353+ 80B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ 80AB             >
 353+ 80AB 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ 80AC 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 353+ 80B0 53 2D 43 48 >
 353+ 80B4             >                org     $-1                 // alter last byte of Name just above to set
 353+ 80B3 C8          >                db      {b $} | END_BIT     // msb as name end
 353+ 80B4             >
 353+ 80B4 99 80       >                dw      last_NFA            // Link to previous definition Name
 353+ 80B6             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 80B6 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 353+ 80B8             >                else
 353+ 80B8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 353+ 80B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 80B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 80B8             >
 353+ 80B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 80B8 BC 7F 8F 72                  dw      NEEDS_W, COUNT, OVER
 354+ 80BC F6 6A
 355+ 80BE 56 6A 2E 6B                  dw      PLUS, SWAP
 356+ 80C2 05 65                        dw      C_DO
 357+ 80C4              Needs_3:
 358+ 80C4 8E 80 A0 80                  dw          NCDM, NDOM, LIT, 9
 358+ 80C8 43 64 09 00
 359+ 80CC 10 65 1A 6C                  dw          I, CFETCH
 360+ 80D0 2A 66                        dw          C_MAP
 361+ 80D2 10 65 28 6C                  dw          I, CSTORE
 362+ 80D6              Needs_4:
 363+ 80D6 92 64                        dw      C_LOOP
 364+ 80D8 EC FF                        dw      Needs_3 - $
 365+ 80DA BD 69                        dw      EXIT
 366+ 80DC
 367+ 80DC
 368+ 80DC              // include  "path/cccc.f" if cccc is not defined
 369+ 80DC              // filename cccc.f is temporary stored at NEEDS-W
 370+ 80DC                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 370+ 80DC             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 370+ 80DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 370+ 80DC             >
 370+ 80DC             >                // dummy db directives used to calculate length of namec
 370+ 80DC 4E 45 45 44 >                db      "NEEDS-F"
 370+ 80E0 53 2D 46    >
 370+ 80E3             >len_NFA         defl    $ - temp_NFA
 370+ 80E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 370+ 80DC             >
 370+ 80DC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 370+ 80DD 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 370+ 80E1 53 2D 46    >
 370+ 80E4             >                org     $-1                 // alter last byte of Name just above to set
 370+ 80E3 C6          >                db      {b $} | END_BIT     // msb as name end
 370+ 80E4             >
 370+ 80E4 AB 80       >                dw      last_NFA            // Link to previous definition Name
 370+ 80E6             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 370+ 80E6 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 370+ 80E8             >                else
 370+ 80E8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 370+ 80E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 370+ 80E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 370+ 80E8             >
 370+ 80E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 371+ 80E8 D7 75 1B 6A                  dw      LFIND, ZEQUAL
 372+ 80EC 7D 64                        dw      ZBRANCH
 373+ 80EE 2E 00                        dw      Needs_5 - $
 374+ 80F0 BC 7F                        dw          NEEDS_W
 375+ 80F2 43 64 23 00                  dw          LIT, 35
 376+ 80F6 DC 73                        dw          ERASE                   // a
 377+ 80F8 3D 6F 1A 6C                  dw          HERE, CFETCH, ONE_PLUS  // a n
 377+ 80FC 7F 6A
 378+ 80FE 3D 6F F6 6A                  dw          HERE, OVER              // a n here n
 379+ 8102 BC 7F 2E 6B                  dw          NEEDS_W, SWAP, CMOVE    // a n
 379+ 8106 AB 68
 380+ 8108 B6 80                        dw          NEEDS_CHECK
 381+ 810A BC 7F 56 6A                  dw          NEEDS_W, PLUS           // a a1+1
 382+ 810E 43 64 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 383+ 8112 2E 6B 0C 6C                  dw          SWAP, STORE             // a
 384+ 8116 47 80                        dw          NEEDS_SLASH
 385+ 8118 66 64                        dw      BRANCH
 386+ 811A 06 00                        dw      Needs_6 - $
 387+ 811C              Needs_5:
 388+ 811C 06 6B 85 6B                  dw          DROP, TWO_DROP
 389+ 8120              Needs_6:
 390+ 8120 BD 69                        dw      EXIT
 391+ 8122
 392+ 8122
 393+ 8122              // check for cccc exists in vocabulary
 394+ 8122              // if it doesn't then  INCLUDE  inc/cccc.F
 395+ 8122              // search in inc subdirectory
 396+ 8122                              Colon_Def NEEDS, "NEEDS", is_normal
 396+ 8122             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 396+ 8122             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 396+ 8122             >
 396+ 8122             >                // dummy db directives used to calculate length of namec
 396+ 8122 4E 45 45 44 >                db      "NEEDS"
 396+ 8126 53          >
 396+ 8127             >len_NFA         defl    $ - temp_NFA
 396+ 8127             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 396+ 8122             >
 396+ 8122 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 396+ 8123 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 396+ 8127 53          >
 396+ 8128             >                org     $-1                 // alter last byte of Name just above to set
 396+ 8127 D3          >                db      {b $} | END_BIT     // msb as name end
 396+ 8128             >
 396+ 8128 DC 80       >                dw      last_NFA            // Link to previous definition Name
 396+ 812A             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 396+ 812A F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 396+ 812C             >                else
 396+ 812C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 396+ 812C             >                endif           ; ok        // for other definitions it "points" the correct handler
 396+ 812C             >                // Use of "; ok" to suppress "warning[fwdref]"
 396+ 812C             >
 396+ 812C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 397+ 812C 73 6E FF 6B                  dw      TO_IN, FETCH
 398+ 8130 22 80 E6 80                  dw      NEEDS_INC, NEEDS_PATH
 399+ 8134 73 6E 0C 6C                  dw      TO_IN, STORE
 400+ 8138 36 80 E6 80                  dw      NEEDS_LIB, NEEDS_PATH
 401+ 813C BD 69                        dw      EXIT
 402+ 813E
 403+ 813E
 404+ 813E              //  ______________________________________________________________________
 405+ 813E              //
 406+ 813E              // load+        n --
 407+ 813E                              Colon_Def LOAD_P, "LOAD+", is_normal
 407+ 813E             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 407+ 813E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 407+ 813E             >
 407+ 813E             >                // dummy db directives used to calculate length of namec
 407+ 813E 4C 4F 41 44 >                db      "LOAD+"
 407+ 8142 2B          >
 407+ 8143             >len_NFA         defl    $ - temp_NFA
 407+ 8143             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 407+ 813E             >
 407+ 813E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 407+ 813F 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 407+ 8143 2B          >
 407+ 8144             >                org     $-1                 // alter last byte of Name just above to set
 407+ 8143 AB          >                db      {b $} | END_BIT     // msb as name end
 407+ 8144             >
 407+ 8144 22 81       >                dw      last_NFA            // Link to previous definition Name
 407+ 8146             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 407+ 8146 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 407+ 8148             >                else
 407+ 8148 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 407+ 8148             >                endif           ; ok        // for other definitions it "points" the correct handler
 407+ 8148             >                // Use of "; ok" to suppress "warning[fwdref]"
 407+ 8148             >
 407+ 8148             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 408+ 8148 6A 6E FF 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 408+ 814C E6 69
 409+ 814E 73 6E FF 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 409+ 8152 E6 69
 410+ 8154
 411+ 8154 6B 6D 73 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 411+ 8158 0C 6C
 412+ 815A B7 6D 10 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 412+ 815E 6A 6E 0C 6C
 413+ 8162 C5 77                        dw      INTERPRET               // interpret
 414+ 8164
 415+ 8164 FA 69 73 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 415+ 8168 0C 6C
 416+ 816A FA 69 6A 6E                  dw      R_TO, BLK, STORE        // r> blk !
 416+ 816E 0C 6C
 417+ 8170 BD 69                        dw      EXIT                    // ;
 418+ 8172
 419+ 8172              //  ______________________________________________________________________
 420+ 8172              //
 421+ 8172              // -->          --
 422+ 8172                              Colon_Def LOAD_NEXT, "-->", is_immediate
 422+ 8172             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 422+ 8172             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 422+ 8172             >
 422+ 8172             >                // dummy db directives used to calculate length of namec
 422+ 8172 2D 2D 3E    >                db      "-->"
 422+ 8175             >len_NFA         defl    $ - temp_NFA
 422+ 8175             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 422+ 8172             >
 422+ 8172 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 422+ 8173 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 422+ 8176             >                org     $-1                 // alter last byte of Name just above to set
 422+ 8175 BE          >                db      {b $} | END_BIT     // msb as name end
 422+ 8176             >
 422+ 8176 3E 81       >                dw      last_NFA            // Link to previous definition Name
 422+ 8178             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 422+ 8178 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 422+ 817A             >                else
 422+ 817A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 422+ 817A             >                endif           ; ok        // for other definitions it "points" the correct handler
 422+ 817A             >                // Use of "; ok" to suppress "warning[fwdref]"
 422+ 817A             >
 422+ 817A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 423+ 817A 81 71                        dw      QLOADING                // ?loading
 424+ 817C 6B 6D 73 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 424+ 8180 0C 6C
 425+ 8182 B7 6D                        dw      BSCR                    // b/scr
 426+ 8184 6A 6E FF 6B                  dw      BLK, FETCH              // blk @
 427+ 8188 F6 6A                        dw      OVER                    // over
 428+ 818A 3D 7A                        dw      MOD                     // mod
 429+ 818C 91 6F                        dw      SUBTRACT                // -
 430+ 818E 6A 6E DC 6B                  dw      BLK, PLUSSTORE          // +!
 431+ 8192 BD 69                        dw      EXIT                    // ;
 432+ 8194
 433+ 8194              //  ______________________________________________________________________
 434+ 8194              //
 435+ 8194              // '            -- xt
 436+ 8194                              Colon_Def TICK, "'", is_normal
 436+ 8194             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 436+ 8194             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 436+ 8194             >
 436+ 8194             >                // dummy db directives used to calculate length of namec
 436+ 8194 27          >                db      "'"
 436+ 8195             >len_NFA         defl    $ - temp_NFA
 436+ 8195             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 436+ 8194             >
 436+ 8194 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 436+ 8195 27          >                db      "'"               // name string in 7-bit ascii, but
 436+ 8196             >                org     $-1                 // alter last byte of Name just above to set
 436+ 8195 A7          >                db      {b $} | END_BIT     // msb as name end
 436+ 8196             >
 436+ 8196 72 81       >                dw      last_NFA            // Link to previous definition Name
 436+ 8198             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 436+ 8198 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 436+ 819A             >                else
 436+ 819A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 436+ 819A             >                endif           ; ok        // for other definitions it "points" the correct handler
 436+ 819A             >                // Use of "; ok" to suppress "warning[fwdref]"
 436+ 819A             >
 436+ 819A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 437+ 819A D7 75                        dw      LFIND                   // -find
 438+ 819C 1B 6A                        dw      ZEQUAL                  // 0=
 439+ 819E 6B 6D 08 71                  dw      ZERO, QERROR            // 0 ?error
 440+ 81A2 06 6B                        dw      DROP                    // drop
 441+ 81A4 BD 69                        dw      EXIT                    // ;
 442+ 81A6
 443+ 81A6              //  ______________________________________________________________________
 444+ 81A6              //
 445+ 81A6              // forget       -- cccc
 446+ 81A6                              Colon_Def FORGET, "FORGET", is_normal
 446+ 81A6             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 446+ 81A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 446+ 81A6             >
 446+ 81A6             >                // dummy db directives used to calculate length of namec
 446+ 81A6 46 4F 52 47 >                db      "FORGET"
 446+ 81AA 45 54       >
 446+ 81AC             >len_NFA         defl    $ - temp_NFA
 446+ 81AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 446+ 81A6             >
 446+ 81A6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 446+ 81A7 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 446+ 81AB 45 54       >
 446+ 81AD             >                org     $-1                 // alter last byte of Name just above to set
 446+ 81AC D4          >                db      {b $} | END_BIT     // msb as name end
 446+ 81AD             >
 446+ 81AD 94 81       >                dw      last_NFA            // Link to previous definition Name
 446+ 81AF             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 446+ 81AF F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 446+ 81B1             >                else
 446+ 81B1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 446+ 81B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 446+ 81B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 446+ 81B1             >
 446+ 81B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 447+ 81B1 AB 6E FF 6B                  dw      CURRENT, FETCH          // current @
 448+ 81B5 9E 6E FF 6B                  dw      CONTEXT, FETCH          // context @
 449+ 81B9 91 6F 43 64                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 449+ 81BD 17 00 08 71
 450+ 81C1 98 81 D8 70                  dw      TICK, TO_BODY           // ' >body
 451+ 81C5 3B 6B 21 6E                  dw      DUP, FENCE, FETCH       // dup fence @
 451+ 81C9 FF 6B
 452+ 81CB AC 6F 43 64                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 452+ 81CF 15 00 08 71
 453+ 81D3 3B 6B AE 70                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 453+ 81D7 29 6E 0C 6C
 454+ 81DB 94 70 FF 6B                  dw      LFA, FETCH              // lfa @
 455+ 81DF 9E 6E FF 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 455+ 81E3 0C 6C
 456+ 81E5 BD 69                        dw      EXIT                    // ;
 457+ 81E7
 458+ 81E7              //  ______________________________________________________________________
 459+ 81E7              //
 460+ 81E7              // marker       -- cccc
 461+ 81E7                              Colon_Def MARKER, "MARKER", is_immediate
 461+ 81E7             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 461+ 81E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 81E7             >
 461+ 81E7             >                // dummy db directives used to calculate length of namec
 461+ 81E7 4D 41 52 4B >                db      "MARKER"
 461+ 81EB 45 52       >
 461+ 81ED             >len_NFA         defl    $ - temp_NFA
 461+ 81ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 81E7             >
 461+ 81E7 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 81E8 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 461+ 81EC 45 52       >
 461+ 81EE             >                org     $-1                 // alter last byte of Name just above to set
 461+ 81ED D2          >                db      {b $} | END_BIT     // msb as name end
 461+ 81EE             >
 461+ 81EE A6 81       >                dw      last_NFA            // Link to previous definition Name
 461+ 81F0             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 81F0 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 81F2             >                else
 461+ 81F2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 461+ 81F2             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 81F2             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 81F2             >
 461+ 81F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 81F2 58 72                        dw      CBUILDS
 463+ 81F4 37 6E FF 6B                  dw      VOC_LINK, FETCH, COMMA
 463+ 81F8 59 6F
 464+ 81FA AB 6E FF 6B                  dw      CURRENT, FETCH, COMMA
 464+ 81FE 59 6F
 465+ 8200 9E 6E FF 6B                  dw      CONTEXT, FETCH, COMMA
 465+ 8204 59 6F
 466+ 8206 84 70 59 6F                  dw      LATEST, COMMA
 467+ 820A 84 70 C2 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 467+ 820E 94 70 FF 6B
 467+ 8212 59 6F
 468+ 8214 68 72                        dw      DOES_TO
 469+ 8216 3B 6B FF 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 469+ 821A 37 6E 0C 6C
 469+ 821E A7 6A
 470+ 8220 3B 6B FF 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 470+ 8224 AB 6E 0C 6C
 470+ 8228 A7 6A
 471+ 822A 3B 6B FF 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 471+ 822E 9E 6E 0C 6C
 471+ 8232 A7 6A
 472+ 8234 3B 6B FF 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 472+ 8238 29 6E 0C 6C
 472+ 823C A7 6A
 473+ 823E FF 6B AB 6E                  dw           FETCH, CURRENT, FETCH, STORE
 473+ 8242 FF 6B 0C 6C
 474+ 8246 BD 69                        dw      EXIT
 475+ 8248
 476+ 8248              //  ______________________________________________________________________
 477+ 8248              //
 478+ 8248              // spaces       n --
 479+ 8248                              Colon_Def SPACES, "SPACES", is_normal
 479+ 8248             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 479+ 8248             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 479+ 8248             >
 479+ 8248             >                // dummy db directives used to calculate length of namec
 479+ 8248 53 50 41 43 >                db      "SPACES"
 479+ 824C 45 53       >
 479+ 824E             >len_NFA         defl    $ - temp_NFA
 479+ 824E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 479+ 8248             >
 479+ 8248 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 479+ 8249 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 479+ 824D 45 53       >
 479+ 824F             >                org     $-1                 // alter last byte of Name just above to set
 479+ 824E D3          >                db      {b $} | END_BIT     // msb as name end
 479+ 824F             >
 479+ 824F E7 81       >                dw      last_NFA            // Link to previous definition Name
 479+ 8251             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 479+ 8251 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 479+ 8253             >                else
 479+ 8253 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 479+ 8253             >                endif           ; ok        // for other definitions it "points" the correct handler
 479+ 8253             >                // Use of "; ok" to suppress "warning[fwdref]"
 479+ 8253             >
 479+ 8253             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 480+ 8253 6B 6D 00 70                  dw      ZERO, MAX
 481+ 8257 6B 6D D7 64                  dw      ZERO, C_Q_DO
 482+ 825B 08 00                        dw      Spaces_Leave - $
 483+ 825D              Spaces_Loop:
 484+ 825D 4E 70                        dw          SPACE
 485+ 825F 92 64                        dw      C_LOOP
 486+ 8261 FC FF                        dw      Spaces_Loop - $
 487+ 8263              Spaces_Leave:
 488+ 8263 BD 69                        dw      EXIT                    // ;
 489+ 8265
 490+ 8265              //  ______________________________________________________________________
 491+ 8265              //
 492+ 8265              // <#           --
 493+ 8265                              Colon_Def BEGIN_DASH, "<#", is_normal
 493+ 8265             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 493+ 8265             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 493+ 8265             >
 493+ 8265             >                // dummy db directives used to calculate length of namec
 493+ 8265 3C 23       >                db      "<#"
 493+ 8267             >len_NFA         defl    $ - temp_NFA
 493+ 8267             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 493+ 8265             >
 493+ 8265 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 493+ 8266 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 493+ 8268             >                org     $-1                 // alter last byte of Name just above to set
 493+ 8267 A3          >                db      {b $} | END_BIT     // msb as name end
 493+ 8268             >
 493+ 8268 48 82       >                dw      last_NFA            // Link to previous definition Name
 493+ 826A             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 493+ 826A F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 493+ 826C             >                else
 493+ 826C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 493+ 826C             >                endif           ; ok        // for other definitions it "points" the correct handler
 493+ 826C             >                // Use of "; ok" to suppress "warning[fwdref]"
 493+ 826C             >
 493+ 826C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 494+ 826C 12 74 EC 6E                  dw      PAD, HLD, STORE
 494+ 8270 0C 6C
 495+ 8272 BD 69                        dw      EXIT
 496+ 8274
 497+ 8274              //  ______________________________________________________________________
 498+ 8274              //
 499+ 8274              // #>           --
 500+ 8274                              Colon_Def DASH_END, "#>", is_normal
 500+ 8274             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 500+ 8274             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 500+ 8274             >
 500+ 8274             >                // dummy db directives used to calculate length of namec
 500+ 8274 23 3E       >                db      "#>"
 500+ 8276             >len_NFA         defl    $ - temp_NFA
 500+ 8276             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 500+ 8274             >
 500+ 8274 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 500+ 8275 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 500+ 8277             >                org     $-1                 // alter last byte of Name just above to set
 500+ 8276 BE          >                db      {b $} | END_BIT     // msb as name end
 500+ 8277             >
 500+ 8277 65 82       >                dw      last_NFA            // Link to previous definition Name
 500+ 8279             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 500+ 8279 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 500+ 827B             >                else
 500+ 827B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 500+ 827B             >                endif           ; ok        // for other definitions it "points" the correct handler
 500+ 827B             >                // Use of "; ok" to suppress "warning[fwdref]"
 500+ 827B             >
 500+ 827B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 501+ 827B 85 6B                        dw      TWO_DROP
 502+ 827D EC 6E FF 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 502+ 8281 12 74 F6 6A
 502+ 8285 91 6F
 503+ 8287 BD 69                        dw      EXIT
 504+ 8289
 505+ 8289              //  ______________________________________________________________________
 506+ 8289              //
 507+ 8289              // sign         n d -- d
 508+ 8289                              Colon_Def SIGN, "SIGN", is_normal
 508+ 8289             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 508+ 8289             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 508+ 8289             >
 508+ 8289             >                // dummy db directives used to calculate length of namec
 508+ 8289 53 49 47 4E >                db      "SIGN"
 508+ 828D             >len_NFA         defl    $ - temp_NFA
 508+ 828D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 508+ 8289             >
 508+ 8289 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 508+ 828A 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 508+ 828E             >                org     $-1                 // alter last byte of Name just above to set
 508+ 828D CE          >                db      {b $} | END_BIT     // msb as name end
 508+ 828E             >
 508+ 828E 74 82       >                dw      last_NFA            // Link to previous definition Name
 508+ 8290             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 508+ 8290 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 508+ 8292             >                else
 508+ 8292 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 508+ 8292             >                endif           ; ok        // for other definitions it "points" the correct handler
 508+ 8292             >                // Use of "; ok" to suppress "warning[fwdref]"
 508+ 8292             >
 508+ 8292             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 509+ 8292 48 6B 2E 6A                  dw      ROT, ZLESS
 510+ 8296 7D 64                        dw      ZBRANCH
 511+ 8298 08 00                        dw      Sign_Endif - $
 512+ 829A 43 64 2D 00                  dw          LIT, 45, HOLD
 512+ 829E FC 73
 513+ 82A0              Sign_Endif:
 514+ 82A0 BD 69                        dw      EXIT
 515+ 82A2
 516+ 82A2              //  ______________________________________________________________________
 517+ 82A2              //
 518+ 82A2              // #           d1 -- d2
 519+ 82A2                              Colon_Def DASH, "#", is_normal
 519+ 82A2             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 519+ 82A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 519+ 82A2             >
 519+ 82A2             >                // dummy db directives used to calculate length of namec
 519+ 82A2 23          >                db      "#"
 519+ 82A3             >len_NFA         defl    $ - temp_NFA
 519+ 82A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 519+ 82A2             >
 519+ 82A2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 519+ 82A3 23          >                db      "#"               // name string in 7-bit ascii, but
 519+ 82A4             >                org     $-1                 // alter last byte of Name just above to set
 519+ 82A3 A3          >                db      {b $} | END_BIT     // msb as name end
 519+ 82A4             >
 519+ 82A4 89 82       >                dw      last_NFA            // Link to previous definition Name
 519+ 82A6             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 519+ 82A6 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 519+ 82A8             >                else
 519+ 82A8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 519+ 82A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 519+ 82A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 519+ 82A8             >
 519+ 82A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 520+ 82A8 C0 6E FF 6B                  dw      BASE, FETCH, MDIV_MOD, ROT
 520+ 82AC 6E 7A 48 6B
 521+ 82B0 43 64 09 00                  dw      LIT, 9, OVER, LESS
 521+ 82B4 F6 6A C0 6F
 522+ 82B8 7D 64                        dw      ZBRANCH
 523+ 82BA 08 00                        dw      Dash_Endif - $
 524+ 82BC 43 64 07 00                  dw          LIT, 7, PLUS
 524+ 82C0 56 6A
 525+ 82C2              Dash_Endif:
 526+ 82C2
 527+ 82C2 43 64 30 00                  dw      LIT, 48, PLUS, HOLD
 527+ 82C6 56 6A FC 73
 528+ 82CA BD 69                        dw      EXIT
 529+ 82CC
 530+ 82CC              //  ______________________________________________________________________
 531+ 82CC              //
 532+ 82CC              // #s           d1 -- d2
 533+ 82CC                              Colon_Def DASHES, "#S", is_normal
 533+ 82CC             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 533+ 82CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 533+ 82CC             >
 533+ 82CC             >                // dummy db directives used to calculate length of namec
 533+ 82CC 23 53       >                db      "#S"
 533+ 82CE             >len_NFA         defl    $ - temp_NFA
 533+ 82CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 533+ 82CC             >
 533+ 82CC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 533+ 82CD 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 533+ 82CF             >                org     $-1                 // alter last byte of Name just above to set
 533+ 82CE D3          >                db      {b $} | END_BIT     // msb as name end
 533+ 82CF             >
 533+ 82CF A2 82       >                dw      last_NFA            // Link to previous definition Name
 533+ 82D1             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 533+ 82D1 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 533+ 82D3             >                else
 533+ 82D3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 533+ 82D3             >                endif           ; ok        // for other definitions it "points" the correct handler
 533+ 82D3             >                // Use of "; ok" to suppress "warning[fwdref]"
 533+ 82D3             >
 533+ 82D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 534+ 82D3              Dashes_Begin:
 535+ 82D3 A6 82 A5 6B                  dw      DASH, TWO_DUP
 536+ 82D7 61 69 1B 6A                  dw          OR_OP, ZEQUAL
 537+ 82DB 7D 64                        dw      ZBRANCH
 538+ 82DD F6 FF                        dw      Dashes_Begin - $
 539+ 82DF BD 69                        dw      EXIT
 540+ 82E1
 541+ 82E1              //  ______________________________________________________________________
 542+ 82E1              //
 543+ 82E1              // d.r          d n --
 544+ 82E1                              Colon_Def D_DOT_R, "D.R", is_normal
 544+ 82E1             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 544+ 82E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 544+ 82E1             >
 544+ 82E1             >                // dummy db directives used to calculate length of namec
 544+ 82E1 44 2E 52    >                db      "D.R"
 544+ 82E4             >len_NFA         defl    $ - temp_NFA
 544+ 82E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 544+ 82E1             >
 544+ 82E1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 544+ 82E2 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 544+ 82E5             >                org     $-1                 // alter last byte of Name just above to set
 544+ 82E4 D2          >                db      {b $} | END_BIT     // msb as name end
 544+ 82E5             >
 544+ 82E5 CC 82       >                dw      last_NFA            // Link to previous definition Name
 544+ 82E7             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 544+ 82E7 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 544+ 82E9             >                else
 544+ 82E9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 544+ 82E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 544+ 82E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 544+ 82E9             >
 544+ 82E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 545+ 82E9 E6 69                        dw      TO_R
 546+ 82EB 2E 6B F6 6A                  dw      SWAP, OVER, DABS
 546+ 82EF C2 79
 547+ 82F1 6A 82 D1 82                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 547+ 82F5 90 82 79 82
 548+ 82F9 FA 69                        dw      R_TO
 549+ 82FB F6 6A 91 6F                  dw      OVER, SUBTRACT, SPACES, TYPE
 549+ 82FF 51 82 A2 72
 550+ 8303 BD 69                        dw      EXIT
 551+ 8305
 552+ 8305              //  ______________________________________________________________________
 553+ 8305              //
 554+ 8305              // .r           n1 n2 --
 555+ 8305                              Colon_Def DOT_R, ".R", is_normal
 555+ 8305             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 555+ 8305             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 555+ 8305             >
 555+ 8305             >                // dummy db directives used to calculate length of namec
 555+ 8305 2E 52       >                db      ".R"
 555+ 8307             >len_NFA         defl    $ - temp_NFA
 555+ 8307             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 555+ 8305             >
 555+ 8305 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 555+ 8306 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 555+ 8308             >                org     $-1                 // alter last byte of Name just above to set
 555+ 8307 D2          >                db      {b $} | END_BIT     // msb as name end
 555+ 8308             >
 555+ 8308 E1 82       >                dw      last_NFA            // Link to previous definition Name
 555+ 830A             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 555+ 830A F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 555+ 830C             >                else
 555+ 830C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 555+ 830C             >                endif           ; ok        // for other definitions it "points" the correct handler
 555+ 830C             >                // Use of "; ok" to suppress "warning[fwdref]"
 555+ 830C             >
 555+ 830C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 556+ 830C E6 69                        dw      TO_R
 557+ 830E 7D 6F FA 69                  dw      S_TO_D, R_TO
 558+ 8312 E7 82                        dw      D_DOT_R
 559+ 8314 BD 69                        dw      EXIT
 560+ 8316
 561+ 8316              //  ______________________________________________________________________
 562+ 8316              //
 563+ 8316              // d.           d --
 564+ 8316                              Colon_Def D_DOT, "D.", is_normal
 564+ 8316             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 564+ 8316             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 564+ 8316             >
 564+ 8316             >                // dummy db directives used to calculate length of namec
 564+ 8316 44 2E       >                db      "D."
 564+ 8318             >len_NFA         defl    $ - temp_NFA
 564+ 8318             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 564+ 8316             >
 564+ 8316 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 564+ 8317 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 564+ 8319             >                org     $-1                 // alter last byte of Name just above to set
 564+ 8318 AE          >                db      {b $} | END_BIT     // msb as name end
 564+ 8319             >
 564+ 8319 05 83       >                dw      last_NFA            // Link to previous definition Name
 564+ 831B             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 564+ 831B F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 564+ 831D             >                else
 564+ 831D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 564+ 831D             >                endif           ; ok        // for other definitions it "points" the correct handler
 564+ 831D             >                // Use of "; ok" to suppress "warning[fwdref]"
 564+ 831D             >
 564+ 831D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 565+ 831D 6B 6D E7 82                  dw      ZERO, D_DOT_R, SPACE
 565+ 8321 4E 70
 566+ 8323 BD 69                        dw      EXIT
 567+ 8325
 568+ 8325              //  ______________________________________________________________________
 569+ 8325              //
 570+ 8325              // .            n --
 571+ 8325                              Colon_Def DOT, ".", is_normal
 571+ 8325             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 571+ 8325             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 571+ 8325             >
 571+ 8325             >                // dummy db directives used to calculate length of namec
 571+ 8325 2E          >                db      "."
 571+ 8326             >len_NFA         defl    $ - temp_NFA
 571+ 8326             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 571+ 8325             >
 571+ 8325 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 571+ 8326 2E          >                db      "."               // name string in 7-bit ascii, but
 571+ 8327             >                org     $-1                 // alter last byte of Name just above to set
 571+ 8326 AE          >                db      {b $} | END_BIT     // msb as name end
 571+ 8327             >
 571+ 8327 16 83       >                dw      last_NFA            // Link to previous definition Name
 571+ 8329             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 571+ 8329 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 571+ 832B             >                else
 571+ 832B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 571+ 832B             >                endif           ; ok        // for other definitions it "points" the correct handler
 571+ 832B             >                // Use of "; ok" to suppress "warning[fwdref]"
 571+ 832B             >
 571+ 832B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 572+ 832B 7D 6F 1B 83                  dw      S_TO_D, D_DOT
 573+ 832F BD 69                        dw      EXIT
 574+ 8331
 575+ 8331              //  ______________________________________________________________________
 576+ 8331              //
 577+ 8331              // ?            n --
 578+ 8331                              Colon_Def QUESTION, "?", is_normal
 578+ 8331             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 578+ 8331             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 578+ 8331             >
 578+ 8331             >                // dummy db directives used to calculate length of namec
 578+ 8331 3F          >                db      "?"
 578+ 8332             >len_NFA         defl    $ - temp_NFA
 578+ 8332             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 578+ 8331             >
 578+ 8331 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 578+ 8332 3F          >                db      "?"               // name string in 7-bit ascii, but
 578+ 8333             >                org     $-1                 // alter last byte of Name just above to set
 578+ 8332 BF          >                db      {b $} | END_BIT     // msb as name end
 578+ 8333             >
 578+ 8333 25 83       >                dw      last_NFA            // Link to previous definition Name
 578+ 8335             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 578+ 8335 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 578+ 8337             >                else
 578+ 8337 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 578+ 8337             >                endif           ; ok        // for other definitions it "points" the correct handler
 578+ 8337             >                // Use of "; ok" to suppress "warning[fwdref]"
 578+ 8337             >
 578+ 8337             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 579+ 8337 FF 6B 29 83                  dw      FETCH, DOT
 580+ 833B BD 69                        dw      EXIT
 581+ 833D
 582+ 833D              //  ______________________________________________________________________
 583+ 833D              //
 584+ 833D              // u.           u --
 585+ 833D                              Colon_Def U_DOT, "U.", is_normal
 585+ 833D             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 585+ 833D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 585+ 833D             >
 585+ 833D             >                // dummy db directives used to calculate length of namec
 585+ 833D 55 2E       >                db      "U."
 585+ 833F             >len_NFA         defl    $ - temp_NFA
 585+ 833F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 585+ 833D             >
 585+ 833D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 585+ 833E 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 585+ 8340             >                org     $-1                 // alter last byte of Name just above to set
 585+ 833F AE          >                db      {b $} | END_BIT     // msb as name end
 585+ 8340             >
 585+ 8340 31 83       >                dw      last_NFA            // Link to previous definition Name
 585+ 8342             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 585+ 8342 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 585+ 8344             >                else
 585+ 8344 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 585+ 8344             >                endif           ; ok        // for other definitions it "points" the correct handler
 585+ 8344             >                // Use of "; ok" to suppress "warning[fwdref]"
 585+ 8344             >
 585+ 8344             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 586+ 8344 6B 6D 1B 83                  dw      ZERO, D_DOT
 587+ 8348 BD 69                        dw      EXIT
 588+ 834A
 589+ 834A              //  ______________________________________________________________________
 590+ 834A              //
 591+ 834A              // words        --
 592+ 834A                              Colon_Def WORDS, "WORDS", is_normal
 592+ 834A             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 592+ 834A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 592+ 834A             >
 592+ 834A             >                // dummy db directives used to calculate length of namec
 592+ 834A 57 4F 52 44 >                db      "WORDS"
 592+ 834E 53          >
 592+ 834F             >len_NFA         defl    $ - temp_NFA
 592+ 834F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 592+ 834A             >
 592+ 834A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 592+ 834B 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 592+ 834F 53          >
 592+ 8350             >                org     $-1                 // alter last byte of Name just above to set
 592+ 834F D3          >                db      {b $} | END_BIT     // msb as name end
 592+ 8350             >
 592+ 8350 3D 83       >                dw      last_NFA            // Link to previous definition Name
 592+ 8352             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 592+ 8352 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 592+ 8354             >                else
 592+ 8354 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 592+ 8354             >                endif           ; ok        // for other definitions it "points" the correct handler
 592+ 8354             >                // Use of "; ok" to suppress "warning[fwdref]"
 592+ 8354             >
 592+ 8354             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 593+ 8354 43 64 80 00                  dw      LIT, 128, OUT, STORE
 593+ 8358 7C 6E 0C 6C
 594+ 835C 9E 6E FF 6B                  dw      CONTEXT, FETCH, FETCH
 594+ 8360 FF 6B
 595+ 8362              Words_Begin:
 596+ 8362 3B 6B 1A 6C                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 596+ 8366 43 64 1F 00
 596+ 836A 4F 69
 597+ 836C 7C 6E FF 6B                  dw          OUT, FETCH, PLUS
 597+ 8370 56 6A
 598+ 8372 9F 6D C0 6F                  dw          CL, LESS, ZEQUAL
 598+ 8376 1B 6A
 599+ 8378 7D 64                        dw          ZBRANCH
 600+ 837A 0A 00                        dw          Words_Endif - $
 601+ 837C 9C 68 6B 6D                  dw              CR, ZERO, OUT, STORE
 601+ 8380 7C 6E 0C 6C
 602+ 8384              Words_Endif:
 603+ 8384 3B 6B 48 76                  dw          DUP, ID_DOT
 604+ 8388 C2 70 94 70                  dw          PFA, LFA, FETCH
 604+ 838C FF 6B
 605+ 838E 3B 6B 1B 6A                  dw          DUP, ZEQUAL
 606+ 8392 A6 67 61 69                  dw          QTERMINAL, OR_OP
 607+ 8396 7D 64                        dw      ZBRANCH
 608+ 8398 CA FF                        dw      Words_Begin - $
 609+ 839A 06 6B                        dw      DROP
 610+ 839C BD 69                        dw      EXIT
 611+ 839E
 612+ 839E              //  ______________________________________________________________________
 613+ 839E              //
 614+ 839E              // list         n --
 615+ 839E                              Colon_Def LIST, "LIST", is_normal
 615+ 839E             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 615+ 839E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 615+ 839E             >
 615+ 839E             >                // dummy db directives used to calculate length of namec
 615+ 839E 4C 49 53 54 >                db      "LIST"
 615+ 83A2             >len_NFA         defl    $ - temp_NFA
 615+ 83A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 615+ 839E             >
 615+ 839E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 615+ 839F 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 615+ 83A3             >                org     $-1                 // alter last byte of Name just above to set
 615+ 83A2 D4          >                db      {b $} | END_BIT     // msb as name end
 615+ 83A3             >
 615+ 83A3 4A 83       >                dw      last_NFA            // Link to previous definition Name
 615+ 83A5             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 615+ 83A5 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 615+ 83A7             >                else
 615+ 83A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 615+ 83A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 615+ 83A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 615+ 83A7             >
 615+ 83A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 616+ 83A7 14 72 9C 68                  dw      DECIMAL, CR
 617+ 83AB 3B 6B 85 6E                  dw      DUP, SCR, STORE
 617+ 83AF 0C 6C
 618+ 83B1 74 74                        dw      C_DOT_QUOTE
 619+ 83B3 05 53 63 72                  db      5, "Scr# "
 619+ 83B7 23 20
 620+ 83B9 29 83                        dw      DOT
 621+ 83BB C3 6D 6B 6D                  dw      LSCR, ZERO, C_DO
 621+ 83BF 05 65
 622+ 83C1              List_Loop:
 623+ 83C1 9C 68                        dw          CR
 624+ 83C3 10 65 83 6D                  dw          I, THREE
 625+ 83C7 0A 83 4E 70                  dw          DOT_R, SPACE
 626+ 83CB 10 65 85 6E                  dw          I, SCR, FETCH, DOT_LINE
 626+ 83CF FF 6B B3 7A
 627+ 83D3 A6 67                        dw          QTERMINAL
 628+ 83D5 7D 64                        dw          ZBRANCH
 629+ 83D7 04 00                        dw          List_Endif - $
 630+ 83D9 D3 69                        dw              LEAVE
 631+ 83DB              List_Endif:
 632+ 83DB 92 64                        dw      C_LOOP
 633+ 83DD E4 FF                        dw      List_Loop - $
 634+ 83DF 9C 68                        dw      CR
 635+ 83E1 BD 69                        dw      EXIT
 636+ 83E3
 637+ 83E3              //  ______________________________________________________________________
 638+ 83E3              //
 639+ 83E3              // index        n1 n2 --
 640+ 83E3                              Colon_Def INDEX, "INDEX", is_normal
 640+ 83E3             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 640+ 83E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 640+ 83E3             >
 640+ 83E3             >                // dummy db directives used to calculate length of namec
 640+ 83E3 49 4E 44 45 >                db      "INDEX"
 640+ 83E7 58          >
 640+ 83E8             >len_NFA         defl    $ - temp_NFA
 640+ 83E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 640+ 83E3             >
 640+ 83E3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 640+ 83E4 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 640+ 83E8 58          >
 640+ 83E9             >                org     $-1                 // alter last byte of Name just above to set
 640+ 83E8 D8          >                db      {b $} | END_BIT     // msb as name end
 640+ 83E9             >
 640+ 83E9 9E 83       >                dw      last_NFA            // Link to previous definition Name
 640+ 83EB             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 640+ 83EB F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 640+ 83ED             >                else
 640+ 83ED ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 640+ 83ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 640+ 83ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 640+ 83ED             >
 640+ 83ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 641+ 83ED 7F 6A 2E 6B                  dw      ONE_PLUS, SWAP, C_DO
 641+ 83F1 05 65
 642+ 83F3              Index_Loop:
 643+ 83F3 9C 68 10 65                  dw          CR, I, THREE
 643+ 83F7 83 6D
 644+ 83F9 0A 83 4E 70                  dw          DOT_R, SPACE
 645+ 83FD 6B 6D 10 65                  dw          ZERO, I, DOT_LINE
 645+ 8401 B3 7A
 646+ 8403 A6 67                        dw          QTERMINAL
 647+ 8405 7D 64                        dw          ZBRANCH
 648+ 8407 04 00                        dw          Index_Endif - $
 649+ 8409 D3 69                        dw              LEAVE
 650+ 840B              Index_Endif:
 651+ 840B 92 64                        dw      C_LOOP
 652+ 840D E6 FF                        dw      Index_Loop - $
 653+ 840F BD 69                        dw      EXIT
 654+ 8411
 655+ 8411              //  ______________________________________________________________________
 656+ 8411              //
 657+ 8411              // cls          --
 658+ 8411                              Colon_Def CLS, "CLS", is_normal
 658+ 8411             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 658+ 8411             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 658+ 8411             >
 658+ 8411             >                // dummy db directives used to calculate length of namec
 658+ 8411 43 4C 53    >                db      "CLS"
 658+ 8414             >len_NFA         defl    $ - temp_NFA
 658+ 8414             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 658+ 8411             >
 658+ 8411 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 658+ 8412 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 658+ 8415             >                org     $-1                 // alter last byte of Name just above to set
 658+ 8414 D3          >                db      {b $} | END_BIT     // msb as name end
 658+ 8415             >
 658+ 8415 E3 83       >                dw      last_NFA            // Link to previous definition Name
 658+ 8417             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 658+ 8417 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 658+ 8419             >                else
 658+ 8419 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 658+ 8419             >                endif           ; ok        // for other definitions it "points" the correct handler
 658+ 8419             >                // Use of "; ok" to suppress "warning[fwdref]"
 658+ 8419             >
 658+ 8419             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 659+ 8419 43 64 0E 00                  dw      LIT, $0E, EMITC
 659+ 841D 85 66
 660+ 841F BD 69                        dw      EXIT
 661+ 8421
 662+ 8421              //  ______________________________________________________________________
 663+ 8421              //
 664+ 8421              // splash       --
 665+ 8421                              Colon_Def SPLASH, "SPLASH", is_normal
 665+ 8421             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 665+ 8421             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 665+ 8421             >
 665+ 8421             >                // dummy db directives used to calculate length of namec
 665+ 8421 53 50 4C 41 >                db      "SPLASH"
 665+ 8425 53 48       >
 665+ 8427             >len_NFA         defl    $ - temp_NFA
 665+ 8427             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 665+ 8421             >
 665+ 8421 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 665+ 8422 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 665+ 8426 53 48       >
 665+ 8428             >                org     $-1                 // alter last byte of Name just above to set
 665+ 8427 C8          >                db      {b $} | END_BIT     // msb as name end
 665+ 8428             >
 665+ 8428 11 84       >                dw      last_NFA            // Link to previous definition Name
 665+ 842A             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 665+ 842A F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 665+ 842C             >                else
 665+ 842C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 665+ 842C             >                endif           ; ok        // for other definitions it "points" the correct handler
 665+ 842C             >                // Use of "; ok" to suppress "warning[fwdref]"
 665+ 842C             >
 665+ 842C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 666+ 842C 17 84                        dw      CLS
 667+ 842E 74 74                        dw      C_DOT_QUOTE
 668+ 8430 45                           db      69
 669+ 8431 76 2D 46 6F                  db      "v-Forth 1.5 NextZXOS version", 13
 669+ 8435 72 74 68 20
 669+ 8439 31 2E 35 20
 669+ 843D 4E 65 78 74
 669+ 8441 5A 58 4F 53
 669+ 8445 20 76 65 72
 669+ 8449 73 69 6F 6E
 669+ 844D 0D
 670+ 844E 62 75 69 6C                  db      "build 20210606", 13
 670+ 8452 64 20 32 30
 670+ 8456 32 31 30 36
 670+ 845A 30 36 0D
 671+ 845D 31 39 39 30                  db      "1990-2021 Matteo Vitturi", 13
 671+ 8461 2D 32 30 32
 671+ 8465 31 20 4D 61
 671+ 8469 74 74 65 6F
 671+ 846D 20 56 69 74
 671+ 8471 74 75 72 69
 671+ 8475 0D
 672+ 8476 BD 69                        dw      EXIT
 673+ 8478
 674+ 8478              //  ______________________________________________________________________
 675+ 8478              //
 676+ 8478              // video        --
 677+ 8478                              Colon_Def VIDEO, "VIDEO", is_normal
 677+ 8478             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 677+ 8478             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 677+ 8478             >
 677+ 8478             >                // dummy db directives used to calculate length of namec
 677+ 8478 56 49 44 45 >                db      "VIDEO"
 677+ 847C 4F          >
 677+ 847D             >len_NFA         defl    $ - temp_NFA
 677+ 847D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 677+ 8478             >
 677+ 8478 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 677+ 8479 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 677+ 847D 4F          >
 677+ 847E             >                org     $-1                 // alter last byte of Name just above to set
 677+ 847D CF          >                db      {b $} | END_BIT     // msb as name end
 677+ 847E             >
 677+ 847E 21 84       >                dw      last_NFA            // Link to previous definition Name
 677+ 8480             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 677+ 8480 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 677+ 8482             >                else
 677+ 8482 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 677+ 8482             >                endif           ; ok        // for other definitions it "points" the correct handler
 677+ 8482             >                // Use of "; ok" to suppress "warning[fwdref]"
 677+ 8482             >
 677+ 8482             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 678+ 8482 7B 6D 3B 6B                  dw      TWO, DUP, DEVICE, STORE
 678+ 8486 FB 7A 0C 6C
 679+ 848A 2C 7B                        dw      SELECT
 680+ 848C BD 69                        dw      EXIT
 681+ 848E
 682+ 848E              //  ______________________________________________________________________
 683+ 848E              //
 684+ 848E              // accept-      a n1 -- n2
 685+ 848E                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 685+ 848E             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 685+ 848E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 685+ 848E             >
 685+ 848E             >                // dummy db directives used to calculate length of namec
 685+ 848E 41 43 43 45 >                db      "ACCEPT-"
 685+ 8492 50 54 2D    >
 685+ 8495             >len_NFA         defl    $ - temp_NFA
 685+ 8495             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 685+ 848E             >
 685+ 848E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 685+ 848F 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 685+ 8493 50 54 2D    >
 685+ 8496             >                org     $-1                 // alter last byte of Name just above to set
 685+ 8495 AD          >                db      {b $} | END_BIT     // msb as name end
 685+ 8496             >
 685+ 8496 78 84       >                dw      last_NFA            // Link to previous definition Name
 685+ 8498             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 685+ 8498 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 685+ 849A             >                else
 685+ 849A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 685+ 849A             >                endif           ; ok        // for other definitions it "points" the correct handler
 685+ 849A             >                // Use of "; ok" to suppress "warning[fwdref]"
 685+ 849A             >
 685+ 849A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 686+ 849A E6 69                        dw      TO_R
 687+ 849C 6B 6D                        dw      ZERO
 688+ 849E 2E 6B                        dw      SWAP
 689+ 84A0 3B 6B                        dw      DUP
 690+ 84A2 FA 69                        dw      R_TO
 691+ 84A4 56 6A                        dw      PLUS
 692+ 84A6 2E 6B                        dw      SWAP
 693+ 84A8 05 65                        dw      C_DO
 694+ 84AA              AcceptN_Loop:
 695+ 84AA 7C 7B                        dw          MMU7_FETCH
 696+ 84AC 07 7B                        dw          INKEY
 697+ 84AE 2E 6B 8E 7B                  dw          SWAP, MMU7_STORE
 698+ 84B2 3B 6B 1B 6A                  dw          DUP, ZEQUAL
 699+ 84B6 7D 64                        dw          ZBRANCH
 700+ 84B8 06 00                        dw          AcceptN_Endif_1 - $
 701+ 84BA 80 84 93 78                  dw              VIDEO, QUIT
 702+ 84BE              AcceptN_Endif_1:
 703+ 84BE 3B 6B 43 64                  dw          DUP, LIT, 13, EQUALS
 703+ 84C2 0D 00 9F 6F
 704+ 84C6 7D 64                        dw          ZBRANCH
 705+ 84C8 06 00                        dw          AcceptN_Endif_2 - $
 706+ 84CA 06 6B 6B 6D                  dw              DROP, ZERO
 707+ 84CE              AcceptN_Endif_2:
 708+ 84CE 3B 6B 43 64                  dw          DUP, LIT, 10, EQUALS
 708+ 84D2 0A 00 9F 6F
 709+ 84D6 7D 64                        dw          ZBRANCH
 710+ 84D8 06 00                        dw          AcceptN_Endif_3 - $
 711+ 84DA 06 6B 6B 6D                  dw              DROP, ZERO
 712+ 84DE              AcceptN_Endif_3:
 713+ 84DE 3B 6B 1B 6A                  dw          DUP, ZEQUAL
 714+ 84E2 7D 64                        dw          ZBRANCH
 715+ 84E4 04 00                        dw          AcceptN_Endif_4 - $
 716+ 84E6 D3 69                        dw              LEAVE
 717+ 84E8              AcceptN_Endif_4:
 718+ 84E8 10 65 28 6C                  dw          I, CSTORE, ONE_PLUS
 718+ 84EC 7F 6A
 719+ 84EE 92 64                        dw      C_LOOP
 720+ 84F0 BA FF                        dw      AcceptN_Loop -$
 721+ 84F2 BD 69                        dw      EXIT
 722+ 84F4
 723+ 84F4              //  ______________________________________________________________________
 724+ 84F4              //
 725+ 84F4              // load-        n --
 726+ 84F4              // Provided that a stream n is OPEN# via the standart BASIC
 727+ 84F4              // it accepts text from stream #n to the normal INTERPRET
 728+ 84F4              // up to now, text-file must end with QUIT
 729+ 84F4                              Colon_Def LOAD_N, "LOAD-", is_normal
 729+ 84F4             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 729+ 84F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 729+ 84F4             >
 729+ 84F4             >                // dummy db directives used to calculate length of namec
 729+ 84F4 4C 4F 41 44 >                db      "LOAD-"
 729+ 84F8 2D          >
 729+ 84F9             >len_NFA         defl    $ - temp_NFA
 729+ 84F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 729+ 84F4             >
 729+ 84F4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 729+ 84F5 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 729+ 84F9 2D          >
 729+ 84FA             >                org     $-1                 // alter last byte of Name just above to set
 729+ 84F9 AD          >                db      {b $} | END_BIT     // msb as name end
 729+ 84FA             >
 729+ 84FA 8E 84       >                dw      last_NFA            // Link to previous definition Name
 729+ 84FC             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 729+ 84FC F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 729+ 84FE             >                else
 729+ 84FE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 729+ 84FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 729+ 84FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 729+ 84FE             >
 729+ 84FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 730+ 84FE 21 6F 0C 6C                  dw      SOURCE_ID, STORE
 731+ 8502              Load_N_Begin:
 732+ 8502 FE 6D FF 6B                  dw          TIB, FETCH
 733+ 8506 3B 6B 43 64                  dw          DUP, LIT, 80
 733+ 850A 50 00
 734+ 850C A5 6B ED 73                  dw          TWO_DUP, BLANKS
 735+ 8510 21 6F FF 6B                  dw          SOURCE_ID, FETCH
 736+ 8514 B3 79 3B 6B                  dw          ABS_OP, DUP, DEVICE, STORE
 736+ 8518 FB 7A 0C 6C
 737+ 851C 2C 7B                        dw          SELECT
 738+ 851E 98 84                        dw          ACCEPT_N
 739+ 8520 80 84                        dw          VIDEO
 740+ 8522 85 6B                        dw          TWO_DROP
 741+ 8524 6B 6D 6A 6E                  dw          ZERO, BLK, STORE
 741+ 8528 0C 6C
 742+ 852A 6B 6D 73 6E                  dw          ZERO, TO_IN, STORE
 742+ 852E 0C 6C
 743+ 8530 C5 77                        dw          INTERPRET
 744+ 8532 A6 67                        dw          QTERMINAL
 745+ 8534 7D 64                        dw      ZBRANCH
 746+ 8536 CC FF                        dw      Load_N_Begin - $
 747+ 8538 BD 69                        dw      EXIT
 748+ 853A
 749+ 853A              //  ______________________________________________________________________
 750+ 853A              //
 751+ 853A              // load         n --
 752+ 853A              // if n is positive, it loads screen #n (as usual)
 753+ 853A              // if n is negative, it connects stream #n to the normal INTERPRET
 754+ 853A              // this second way is useful if you want to load any kind of file
 755+ 853A              // provied that it is OPEN# the usual BASIC way.
 756+ 853A                              Colon_Def LOAD, "LOAD", is_normal
 756+ 853A             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 756+ 853A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 756+ 853A             >
 756+ 853A             >                // dummy db directives used to calculate length of namec
 756+ 853A 4C 4F 41 44 >                db      "LOAD"
 756+ 853E             >len_NFA         defl    $ - temp_NFA
 756+ 853E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 756+ 853A             >
 756+ 853A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 756+ 853B 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 756+ 853F             >                org     $-1                 // alter last byte of Name just above to set
 756+ 853E C4          >                db      {b $} | END_BIT     // msb as name end
 756+ 853F             >
 756+ 853F F4 84       >                dw      last_NFA            // Link to previous definition Name
 756+ 8541             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 756+ 8541 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 756+ 8543             >                else
 756+ 8543 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 756+ 8543             >                endif           ; ok        // for other definitions it "points" the correct handler
 756+ 8543             >                // Use of "; ok" to suppress "warning[fwdref]"
 756+ 8543             >
 756+ 8543             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 757+ 8543 3B 6B 2E 6A                  dw      DUP, ZLESS
 758+ 8547 7D 64                        dw      ZBRANCH
 759+ 8549 08 00                        dw      Load_Else - $
 760+ 854B FC 84                        dw          LOAD_N
 761+ 854D 66 64                        dw      BRANCH
 762+ 854F 04 00                        dw      Load_Endif - $
 763+ 8551              Load_Else:
 764+ 8551 46 81                        dw          LOAD_P
 765+ 8553              Load_Endif:
 766+ 8553 BD 69                        dw      EXIT
 767+ 8555
 768+ 8555
 769+ 8555              //  ______________________________________________________________________
 770+ 8555              //
 771+ 8555              // autoexec     --
 772+ 8555              // this word is called the first time the Forth system boot to
 773+ 8555              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 774+ 8555                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 774+ 8555             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 774+ 8555             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 774+ 8555             >
 774+ 8555             >                // dummy db directives used to calculate length of namec
 774+ 8555 41 55 54 4F >                db      "AUTOEXEC"
 774+ 8559 45 58 45 43 >
 774+ 855D             >len_NFA         defl    $ - temp_NFA
 774+ 855D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 774+ 8555             >
 774+ 8555 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 774+ 8556 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 774+ 855A 45 58 45 43 >
 774+ 855E             >                org     $-1                 // alter last byte of Name just above to set
 774+ 855D C3          >                db      {b $} | END_BIT     // msb as name end
 774+ 855E             >
 774+ 855E 3A 85       >                dw      last_NFA            // Link to previous definition Name
 774+ 8560             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 774+ 8560 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 774+ 8562             >                else
 774+ 8562 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 774+ 8562             >                endif           ; ok        // for other definitions it "points" the correct handler
 774+ 8562             >                // Use of "; ok" to suppress "warning[fwdref]"
 774+ 8562             >
 774+ 8562             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 775+ 8562 43 64 0B 00                  dw      LIT, 11
 776+ 8566 43 64 18 6D                  dw      LIT, NOOP
 777+ 856A 43 64 E2 78                  dw      LIT, Autoexec_Ptr
 778+ 856E 0C 6C                        dw      STORE
 779+ 8570 41 85                        dw      LOAD
 780+ 8572 93 78                        dw      QUIT
 781+ 8574 BD 69                        dw      EXIT
 782+ 8576
 783+ 8576
 784+ 8576              //  ______________________________________________________________________
 785+ 8576              //
 786+ 8576              // bye     --
 787+ 8576              //
 788+ 8576                              Colon_Def BYE, "BYE", is_normal
 788+ 8576             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 788+ 8576             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 788+ 8576             >
 788+ 8576             >                // dummy db directives used to calculate length of namec
 788+ 8576 42 59 45    >                db      "BYE"
 788+ 8579             >len_NFA         defl    $ - temp_NFA
 788+ 8579             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 788+ 8576             >
 788+ 8576 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 788+ 8577 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 788+ 857A             >                org     $-1                 // alter last byte of Name just above to set
 788+ 8579 C5          >                db      {b $} | END_BIT     // msb as name end
 788+ 857A             >
 788+ 857A 55 85       >                dw      last_NFA            // Link to previous definition Name
 788+ 857C             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 788+ 857C F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 788+ 857E             >                else
 788+ 857E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 788+ 857E             >                endif           ; ok        // for other definitions it "points" the correct handler
 788+ 857E             >                // Use of "; ok" to suppress "warning[fwdref]"
 788+ 857E             >
 788+ 857E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 789+ 857E 08 7E                        dw      FLUSH
 790+ 8580 39 7D                        dw      EMPTY_BUFFERS
 791+ 8582 DD 7B FF 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 791+ 8586 49 68 06 6B
 792+ 858A 6B 6D D1 6D                  dw      ZERO, PLUS_ORIGIN
 793+ 858E 78 79                        dw      BASIC
 794+ 8590
 795+ 8590              //  ______________________________________________________________________
 796+ 8590              //
 797+ 8590              // invv     --
 798+ 8590              //
 799+ 8590                              Colon_Def INVV, "INVV", is_normal
 799+ 8590             >                New_Def  INVV, "INVV", Enter_Ptr, is_normal ; ok
 799+ 8590             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 799+ 8590             >
 799+ 8590             >                // dummy db directives used to calculate length of namec
 799+ 8590 49 4E 56 56 >                db      "INVV"
 799+ 8594             >len_NFA         defl    $ - temp_NFA
 799+ 8594             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 799+ 8590             >
 799+ 8590 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 799+ 8591 49 4E 56 56 >                db      "INVV"               // name string in 7-bit ascii, but
 799+ 8595             >                org     $-1                 // alter last byte of Name just above to set
 799+ 8594 D6          >                db      {b $} | END_BIT     // msb as name end
 799+ 8595             >
 799+ 8595 76 85       >                dw      last_NFA            // Link to previous definition Name
 799+ 8597             >INVV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 799+ 8597 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 799+ 8599             >                else
 799+ 8599 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 799+ 8599             >                endif           ; ok        // for other definitions it "points" the correct handler
 799+ 8599             >                // Use of "; ok" to suppress "warning[fwdref]"
 799+ 8599             >
 799+ 8599             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 800+ 8599 43 64 14 00                  dw      LIT, 20, EMITC, ONE, EMITC
 800+ 859D 85 66 73 6D
 800+ 85A1 85 66
 801+ 85A3 BD 69                        dw      EXIT
 802+ 85A5
 803+ 85A5              //  ______________________________________________________________________
 804+ 85A5              //
 805+ 85A5              // truv     --
 806+ 85A5              //
 807+ 85A5                              Colon_Def TRUV, "TRUV", is_normal
 807+ 85A5             >                New_Def  TRUV, "TRUV", Enter_Ptr, is_normal ; ok
 807+ 85A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 807+ 85A5             >
 807+ 85A5             >                // dummy db directives used to calculate length of namec
 807+ 85A5 54 52 55 56 >                db      "TRUV"
 807+ 85A9             >len_NFA         defl    $ - temp_NFA
 807+ 85A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 807+ 85A5             >
 807+ 85A5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 807+ 85A6 54 52 55 56 >                db      "TRUV"               // name string in 7-bit ascii, but
 807+ 85AA             >                org     $-1                 // alter last byte of Name just above to set
 807+ 85A9 D6          >                db      {b $} | END_BIT     // msb as name end
 807+ 85AA             >
 807+ 85AA 90 85       >                dw      last_NFA            // Link to previous definition Name
 807+ 85AC             >TRUV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 807+ 85AC F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 807+ 85AE             >                else
 807+ 85AE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 807+ 85AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 807+ 85AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 807+ 85AE             >
 807+ 85AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 808+ 85AE 43 64 14 00                  dw      LIT, 20, EMITC, ZERO, EMITC
 808+ 85B2 85 66 6B 6D
 808+ 85B6 85 66
 809+ 85B8 BD 69                        dw      EXIT
 810+ 85BA
 811+ 85BA              //  ______________________________________________________________________
 812+ 85BA              //
 813+ 85BA              // mark     --
 814+ 85BA              //
 815+ 85BA              //              Colon_Def MARK, "MARK", is_normal
 816+ 85BA              //              dw      INVV, TYPE, TRUV
 817+ 85BA              //              dw      EXIT
 818+ 85BA
 819+ 85BA              //  ______________________________________________________________________
 820+ 85BA              //
 821+ 85BA              // back     --
 822+ 85BA              //
 823+ 85BA                              Colon_Def BACK, "BACK", is_normal
 823+ 85BA             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 823+ 85BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 823+ 85BA             >
 823+ 85BA             >                // dummy db directives used to calculate length of namec
 823+ 85BA 42 41 43 4B >                db      "BACK"
 823+ 85BE             >len_NFA         defl    $ - temp_NFA
 823+ 85BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 823+ 85BA             >
 823+ 85BA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 823+ 85BB 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 823+ 85BF             >                org     $-1                 // alter last byte of Name just above to set
 823+ 85BE CB          >                db      {b $} | END_BIT     // msb as name end
 823+ 85BF             >
 823+ 85BF A5 85       >                dw      last_NFA            // Link to previous definition Name
 823+ 85C1             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 823+ 85C1 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 823+ 85C3             >                else
 823+ 85C3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 823+ 85C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 823+ 85C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 823+ 85C3             >
 823+ 85C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 824+ 85C3 3D 6F 91 6F                  dw      HERE, SUBTRACT, COMMA
 824+ 85C7 59 6F
 825+ 85C9 BD 69                        dw      EXIT
 826+ 85CB
 827+ 85CB              //  ______________________________________________________________________
 828+ 85CB              //
 829+ 85CB              // if          ( -- a 2 ) \ compile-time
 830+ 85CB              // IF ... THEN
 831+ 85CB              // IF ... ELSE ... ENDIF
 832+ 85CB                              Colon_Def IF, "IF", is_immediate
 832+ 85CB             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 832+ 85CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 832+ 85CB             >
 832+ 85CB             >                // dummy db directives used to calculate length of namec
 832+ 85CB 49 46       >                db      "IF"
 832+ 85CD             >len_NFA         defl    $ - temp_NFA
 832+ 85CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 832+ 85CB             >
 832+ 85CB C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 832+ 85CC 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 832+ 85CE             >                org     $-1                 // alter last byte of Name just above to set
 832+ 85CD C6          >                db      {b $} | END_BIT     // msb as name end
 832+ 85CE             >
 832+ 85CE BA 85       >                dw      last_NFA            // Link to previous definition Name
 832+ 85D0             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 832+ 85D0 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 832+ 85D2             >                else
 832+ 85D2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 832+ 85D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 832+ 85D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 832+ 85D2             >
 832+ 85D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 833+ 85D2 9B 71 7D 64                  dw      COMPILE, ZBRANCH
 834+ 85D6 3D 6F 6B 6D                  dw      HERE, ZERO, COMMA
 834+ 85DA 59 6F
 835+ 85DC 7B 6D                        dw      TWO
 836+ 85DE BD 69                        dw      EXIT
 837+ 85E0
 838+ 85E0              //  ______________________________________________________________________
 839+ 85E0              //
 840+ 85E0              // endif        ( a 2 -- ) \ compile-time
 841+ 85E0              //
 842+ 85E0                              Colon_Def ENDIF, "ENDIF", is_immediate
 842+ 85E0             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 842+ 85E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 842+ 85E0             >
 842+ 85E0             >                // dummy db directives used to calculate length of namec
 842+ 85E0 45 4E 44 49 >                db      "ENDIF"
 842+ 85E4 46          >
 842+ 85E5             >len_NFA         defl    $ - temp_NFA
 842+ 85E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 842+ 85E0             >
 842+ 85E0 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 842+ 85E1 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 842+ 85E5 46          >
 842+ 85E6             >                org     $-1                 // alter last byte of Name just above to set
 842+ 85E5 C6          >                db      {b $} | END_BIT     // msb as name end
 842+ 85E6             >
 842+ 85E6 CB 85       >                dw      last_NFA            // Link to previous definition Name
 842+ 85E8             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 842+ 85E8 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 842+ 85EA             >                else
 842+ 85EA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 842+ 85EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 842+ 85EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 842+ 85EA             >
 842+ 85EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 843+ 85EA 22 71                        dw      QCOMP
 844+ 85EC 7B 6D 51 71                  dw      TWO, QPAIRS
 845+ 85F0 3D 6F F6 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 845+ 85F4 91 6F 2E 6B
 845+ 85F8 0C 6C
 846+ 85FA BD 69                        dw      EXIT
 847+ 85FC
 848+ 85FC              //  ______________________________________________________________________
 849+ 85FC              //
 850+ 85FC              // then        ( a 2 -- ) \ compile-time
 851+ 85FC              //
 852+ 85FC                              Colon_Def THEN, "THEN", is_immediate
 852+ 85FC             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 852+ 85FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 852+ 85FC             >
 852+ 85FC             >                // dummy db directives used to calculate length of namec
 852+ 85FC 54 48 45 4E >                db      "THEN"
 852+ 8600             >len_NFA         defl    $ - temp_NFA
 852+ 8600             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 852+ 85FC             >
 852+ 85FC C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 852+ 85FD 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 852+ 8601             >                org     $-1                 // alter last byte of Name just above to set
 852+ 8600 CE          >                db      {b $} | END_BIT     // msb as name end
 852+ 8601             >
 852+ 8601 E0 85       >                dw      last_NFA            // Link to previous definition Name
 852+ 8603             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 852+ 8603 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 852+ 8605             >                else
 852+ 8605 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 852+ 8605             >                endif           ; ok        // for other definitions it "points" the correct handler
 852+ 8605             >                // Use of "; ok" to suppress "warning[fwdref]"
 852+ 8605             >
 852+ 8605             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 853+ 8605 E8 85                        dw      ENDIF
 854+ 8607 BD 69                        dw      EXIT
 855+ 8609
 856+ 8609              //  ______________________________________________________________________
 857+ 8609              //
 858+ 8609              // else        ( a1 2 -- a2 2 ) \ compile-time
 859+ 8609              //
 860+ 8609                              Colon_Def ELSE, "ELSE", is_immediate
 860+ 8609             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 860+ 8609             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 860+ 8609             >
 860+ 8609             >                // dummy db directives used to calculate length of namec
 860+ 8609 45 4C 53 45 >                db      "ELSE"
 860+ 860D             >len_NFA         defl    $ - temp_NFA
 860+ 860D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 860+ 8609             >
 860+ 8609 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 860+ 860A 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 860+ 860E             >                org     $-1                 // alter last byte of Name just above to set
 860+ 860D C5          >                db      {b $} | END_BIT     // msb as name end
 860+ 860E             >
 860+ 860E FC 85       >                dw      last_NFA            // Link to previous definition Name
 860+ 8610             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 860+ 8610 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 860+ 8612             >                else
 860+ 8612 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 860+ 8612             >                endif           ; ok        // for other definitions it "points" the correct handler
 860+ 8612             >                // Use of "; ok" to suppress "warning[fwdref]"
 860+ 8612             >
 860+ 8612             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 861+ 8612 22 71                        dw      QCOMP
 862+ 8614 7B 6D 51 71                  dw      TWO, QPAIRS
 863+ 8618 9B 71 66 64                  dw      COMPILE, BRANCH
 864+ 861C 3D 6F 6B 6D                  dw      HERE, ZERO, COMMA
 864+ 8620 59 6F
 865+ 8622 2E 6B 7B 6D                  dw      SWAP, TWO, ENDIF
 865+ 8626 E8 85
 866+ 8628 7B 6D                        dw      TWO
 867+ 862A BD 69                        dw      EXIT
 868+ 862C
 869+ 862C              //  ______________________________________________________________________
 870+ 862C              //
 871+ 862C              // begin        ( -- a 1 ) \ compile-time
 872+ 862C              // BEGIN ... AGAIN
 873+ 862C              // BEGIN ... f UNTIL
 874+ 862C              // BEGIN ... f WHILE ... REPEAT
 875+ 862C                              Colon_Def BEGIN, "BEGIN", is_immediate
 875+ 862C             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 875+ 862C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 875+ 862C             >
 875+ 862C             >                // dummy db directives used to calculate length of namec
 875+ 862C 42 45 47 49 >                db      "BEGIN"
 875+ 8630 4E          >
 875+ 8631             >len_NFA         defl    $ - temp_NFA
 875+ 8631             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 875+ 862C             >
 875+ 862C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 875+ 862D 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 875+ 8631 4E          >
 875+ 8632             >                org     $-1                 // alter last byte of Name just above to set
 875+ 8631 CE          >                db      {b $} | END_BIT     // msb as name end
 875+ 8632             >
 875+ 8632 09 86       >                dw      last_NFA            // Link to previous definition Name
 875+ 8634             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 875+ 8634 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 875+ 8636             >                else
 875+ 8636 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 875+ 8636             >                endif           ; ok        // for other definitions it "points" the correct handler
 875+ 8636             >                // Use of "; ok" to suppress "warning[fwdref]"
 875+ 8636             >
 875+ 8636             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 876+ 8636 22 71                        dw      QCOMP
 877+ 8638 3D 6F                        dw      HERE
 878+ 863A 73 6D                        dw      ONE
 879+ 863C BD 69                        dw      EXIT
 880+ 863E
 881+ 863E              //  ______________________________________________________________________
 882+ 863E              //
 883+ 863E              // again        ( a 1 -- ) \ compile-time
 884+ 863E                              Colon_Def AGAIN, "AGAIN", is_immediate
 884+ 863E             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 884+ 863E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 884+ 863E             >
 884+ 863E             >                // dummy db directives used to calculate length of namec
 884+ 863E 41 47 41 49 >                db      "AGAIN"
 884+ 8642 4E          >
 884+ 8643             >len_NFA         defl    $ - temp_NFA
 884+ 8643             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 884+ 863E             >
 884+ 863E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 884+ 863F 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 884+ 8643 4E          >
 884+ 8644             >                org     $-1                 // alter last byte of Name just above to set
 884+ 8643 CE          >                db      {b $} | END_BIT     // msb as name end
 884+ 8644             >
 884+ 8644 2C 86       >                dw      last_NFA            // Link to previous definition Name
 884+ 8646             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 884+ 8646 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 884+ 8648             >                else
 884+ 8648 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 884+ 8648             >                endif           ; ok        // for other definitions it "points" the correct handler
 884+ 8648             >                // Use of "; ok" to suppress "warning[fwdref]"
 884+ 8648             >
 884+ 8648             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 885+ 8648 22 71                        dw      QCOMP
 886+ 864A 73 6D 51 71                  dw      ONE, QPAIRS
 887+ 864E 9B 71 66 64                  dw      COMPILE, BRANCH
 888+ 8652 C1 85                        dw      BACK
 889+ 8654 BD 69                        dw      EXIT
 890+ 8656
 891+ 8656              //  ______________________________________________________________________
 892+ 8656              //
 893+ 8656              // until        ( a 1 -- ) \ compile-time
 894+ 8656                              Colon_Def UNTIL, "UNTIL", is_immediate
 894+ 8656             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 894+ 8656             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 894+ 8656             >
 894+ 8656             >                // dummy db directives used to calculate length of namec
 894+ 8656 55 4E 54 49 >                db      "UNTIL"
 894+ 865A 4C          >
 894+ 865B             >len_NFA         defl    $ - temp_NFA
 894+ 865B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 894+ 8656             >
 894+ 8656 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 894+ 8657 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 894+ 865B 4C          >
 894+ 865C             >                org     $-1                 // alter last byte of Name just above to set
 894+ 865B CC          >                db      {b $} | END_BIT     // msb as name end
 894+ 865C             >
 894+ 865C 3E 86       >                dw      last_NFA            // Link to previous definition Name
 894+ 865E             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 894+ 865E F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 894+ 8660             >                else
 894+ 8660 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 894+ 8660             >                endif           ; ok        // for other definitions it "points" the correct handler
 894+ 8660             >                // Use of "; ok" to suppress "warning[fwdref]"
 894+ 8660             >
 894+ 8660             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 895+ 8660 22 71                        dw      QCOMP
 896+ 8662 73 6D 51 71                  dw      ONE, QPAIRS
 897+ 8666 9B 71 7D 64                  dw      COMPILE, ZBRANCH
 898+ 866A C1 85                        dw      BACK
 899+ 866C BD 69                        dw      EXIT
 900+ 866E
 901+ 866E              //  ______________________________________________________________________
 902+ 866E              //
 903+ 866E              // end          ( a 1 -- ) \ compile-time
 904+ 866E                              Colon_Def END, "END", is_immediate
 904+ 866E             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 904+ 866E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 904+ 866E             >
 904+ 866E             >                // dummy db directives used to calculate length of namec
 904+ 866E 45 4E 44    >                db      "END"
 904+ 8671             >len_NFA         defl    $ - temp_NFA
 904+ 8671             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 904+ 866E             >
 904+ 866E C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 904+ 866F 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 904+ 8672             >                org     $-1                 // alter last byte of Name just above to set
 904+ 8671 C4          >                db      {b $} | END_BIT     // msb as name end
 904+ 8672             >
 904+ 8672 56 86       >                dw      last_NFA            // Link to previous definition Name
 904+ 8674             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 904+ 8674 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 904+ 8676             >                else
 904+ 8676 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 904+ 8676             >                endif           ; ok        // for other definitions it "points" the correct handler
 904+ 8676             >                // Use of "; ok" to suppress "warning[fwdref]"
 904+ 8676             >
 904+ 8676             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 905+ 8676 5E 86                        dw      UNTIL
 906+ 8678 BD 69                        dw      EXIT
 907+ 867A
 908+ 867A              //  ______________________________________________________________________
 909+ 867A              //
 910+ 867A              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 911+ 867A                              Colon_Def WHILE, "WHILE", is_immediate
 911+ 867A             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 911+ 867A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 911+ 867A             >
 911+ 867A             >                // dummy db directives used to calculate length of namec
 911+ 867A 57 48 49 4C >                db      "WHILE"
 911+ 867E 45          >
 911+ 867F             >len_NFA         defl    $ - temp_NFA
 911+ 867F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 911+ 867A             >
 911+ 867A C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 911+ 867B 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 911+ 867F 45          >
 911+ 8680             >                org     $-1                 // alter last byte of Name just above to set
 911+ 867F C5          >                db      {b $} | END_BIT     // msb as name end
 911+ 8680             >
 911+ 8680 6E 86       >                dw      last_NFA            // Link to previous definition Name
 911+ 8682             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 911+ 8682 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 911+ 8684             >                else
 911+ 8684 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 911+ 8684             >                endif           ; ok        // for other definitions it "points" the correct handler
 911+ 8684             >                // Use of "; ok" to suppress "warning[fwdref]"
 911+ 8684             >
 911+ 8684             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 912+ 8684 D0 85                        dw      IF
 913+ 8686 97 6A                        dw      TWO_PLUS // ( that is 4 )
 914+ 8688 BD 69                        dw      EXIT
 915+ 868A
 916+ 868A              //  ______________________________________________________________________
 917+ 868A              //
 918+ 868A              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 919+ 868A                              Colon_Def REPEAT, "REPEAT", is_immediate
 919+ 868A             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 919+ 868A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 919+ 868A             >
 919+ 868A             >                // dummy db directives used to calculate length of namec
 919+ 868A 52 45 50 45 >                db      "REPEAT"
 919+ 868E 41 54       >
 919+ 8690             >len_NFA         defl    $ - temp_NFA
 919+ 8690             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 919+ 868A             >
 919+ 868A C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 919+ 868B 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 919+ 868F 41 54       >
 919+ 8691             >                org     $-1                 // alter last byte of Name just above to set
 919+ 8690 D4          >                db      {b $} | END_BIT     // msb as name end
 919+ 8691             >
 919+ 8691 7A 86       >                dw      last_NFA            // Link to previous definition Name
 919+ 8693             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 919+ 8693 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 919+ 8695             >                else
 919+ 8695 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 919+ 8695             >                endif           ; ok        // for other definitions it "points" the correct handler
 919+ 8695             >                // Use of "; ok" to suppress "warning[fwdref]"
 919+ 8695             >
 919+ 8695             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 920+ 8695 93 6B                        dw      TWO_SWAP
 921+ 8697 46 86                        dw      AGAIN
 922+ 8699 7B 6D 91 6F                  dw      TWO, SUBTRACT
 923+ 869D E8 85                        dw      ENDIF
 924+ 869F BD 69                        dw      EXIT
 925+ 86A1
 926+ 86A1              //  ______________________________________________________________________
 927+ 86A1              //
 928+ 86A1              // ?do-
 929+ 86A1              // special version of "BACK" used by ?DO and LOOP
 930+ 86A1                              Colon_Def C_DO_BACK, "?DO-", is_normal
 930+ 86A1             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 930+ 86A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 930+ 86A1             >
 930+ 86A1             >                // dummy db directives used to calculate length of namec
 930+ 86A1 3F 44 4F 2D >                db      "?DO-"
 930+ 86A5             >len_NFA         defl    $ - temp_NFA
 930+ 86A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 930+ 86A1             >
 930+ 86A1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 930+ 86A2 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 930+ 86A6             >                org     $-1                 // alter last byte of Name just above to set
 930+ 86A5 AD          >                db      {b $} | END_BIT     // msb as name end
 930+ 86A6             >
 930+ 86A6 8A 86       >                dw      last_NFA            // Link to previous definition Name
 930+ 86A8             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 930+ 86A8 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 930+ 86AA             >                else
 930+ 86AA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 930+ 86AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 930+ 86AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 930+ 86AA             >
 930+ 86AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 931+ 86AA C1 85                        dw      BACK
 932+ 86AC 87 69 DB 6E                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 932+ 86B0 FF 6B 91 6F
 933+ 86B4 7D 64                        dw      ZBRANCH
 934+ 86B6 06 00                        dw      CDoBack_Endif - $
 935+ 86B8 97 6A E8 85                  dw          TWO_PLUS, ENDIF
 936+ 86BC              CDoBack_Endif:
 937+ 86BC 64 71 DB 6E                  dw      QCSP, CSP, STORE
 937+ 86C0 0C 6C
 938+ 86C2 BD 69                        dw      EXIT
 939+ 86C4
 940+ 86C4              //  ______________________________________________________________________
 941+ 86C4              //
 942+ 86C4              // do
 943+ 86C4              // DO  ... LOOP
 944+ 86C4              // DO  ... n +LOOP
 945+ 86C4              // ?DO ... LOOP
 946+ 86C4              // ?DO ... n +LOOP
 947+ 86C4                              Colon_Def DO, "DO", is_immediate
 947+ 86C4             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 947+ 86C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 947+ 86C4             >
 947+ 86C4             >                // dummy db directives used to calculate length of namec
 947+ 86C4 44 4F       >                db      "DO"
 947+ 86C6             >len_NFA         defl    $ - temp_NFA
 947+ 86C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 947+ 86C4             >
 947+ 86C4 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 947+ 86C5 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 947+ 86C7             >                org     $-1                 // alter last byte of Name just above to set
 947+ 86C6 CF          >                db      {b $} | END_BIT     // msb as name end
 947+ 86C7             >
 947+ 86C7 A1 86       >                dw      last_NFA            // Link to previous definition Name
 947+ 86C9             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 947+ 86C9 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 947+ 86CB             >                else
 947+ 86CB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 947+ 86CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 947+ 86CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 947+ 86CB             >
 947+ 86CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 948+ 86CB 9B 71 05 65                  dw      COMPILE, C_DO
 949+ 86CF DB 6E FF 6B                  dw      CSP, FETCH, STORE_CSP
 949+ 86D3 F5 70
 950+ 86D5 3D 6F 83 6D                  dw      HERE, THREE
 951+ 86D9 BD 69                        dw      EXIT
 952+ 86DB
 953+ 86DB              //  ______________________________________________________________________
 954+ 86DB              //
 955+ 86DB              // loop
 956+ 86DB                              Colon_Def LOOP, "LOOP", is_immediate
 956+ 86DB             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 956+ 86DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 956+ 86DB             >
 956+ 86DB             >                // dummy db directives used to calculate length of namec
 956+ 86DB 4C 4F 4F 50 >                db      "LOOP"
 956+ 86DF             >len_NFA         defl    $ - temp_NFA
 956+ 86DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 956+ 86DB             >
 956+ 86DB C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 956+ 86DC 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 956+ 86E0             >                org     $-1                 // alter last byte of Name just above to set
 956+ 86DF D0          >                db      {b $} | END_BIT     // msb as name end
 956+ 86E0             >
 956+ 86E0 C4 86       >                dw      last_NFA            // Link to previous definition Name
 956+ 86E2             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 956+ 86E2 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 956+ 86E4             >                else
 956+ 86E4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 956+ 86E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 956+ 86E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 956+ 86E4             >
 956+ 86E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 957+ 86E4 83 6D 51 71                  dw      THREE, QPAIRS
 958+ 86E8 9B 71 92 64                  dw      COMPILE, C_LOOP
 959+ 86EC A8 86                        dw      C_DO_BACK
 960+ 86EE BD 69                        dw      EXIT
 961+ 86F0
 962+ 86F0              //  ______________________________________________________________________
 963+ 86F0              //
 964+ 86F0              // +loop
 965+ 86F0                              Colon_Def PLOOP, "+LOOP", is_immediate
 965+ 86F0             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 965+ 86F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 965+ 86F0             >
 965+ 86F0             >                // dummy db directives used to calculate length of namec
 965+ 86F0 2B 4C 4F 4F >                db      "+LOOP"
 965+ 86F4 50          >
 965+ 86F5             >len_NFA         defl    $ - temp_NFA
 965+ 86F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 965+ 86F0             >
 965+ 86F0 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 965+ 86F1 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 965+ 86F5 50          >
 965+ 86F6             >                org     $-1                 // alter last byte of Name just above to set
 965+ 86F5 D0          >                db      {b $} | END_BIT     // msb as name end
 965+ 86F6             >
 965+ 86F6 DB 86       >                dw      last_NFA            // Link to previous definition Name
 965+ 86F8             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 965+ 86F8 F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 965+ 86FA             >                else
 965+ 86FA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 965+ 86FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 965+ 86FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 965+ 86FA             >
 965+ 86FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 966+ 86FA 83 6D 51 71                  dw      THREE, QPAIRS
 967+ 86FE 9B 71 C9 64                  dw      COMPILE, C_PLOOP
 968+ 8702 A8 86                        dw      C_DO_BACK
 969+ 8704 BD 69                        dw      EXIT
 970+ 8706
 971+ 8706              //  ______________________________________________________________________
 972+ 8706              //
 973+ 8706              // ?do
 974+ 8706                              Colon_Def QDO, "?DO", is_immediate
 974+ 8706             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 974+ 8706             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 974+ 8706             >
 974+ 8706             >                // dummy db directives used to calculate length of namec
 974+ 8706 3F 44 4F    >                db      "?DO"
 974+ 8709             >len_NFA         defl    $ - temp_NFA
 974+ 8709             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 974+ 8706             >
 974+ 8706 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 974+ 8707 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 974+ 870A             >                org     $-1                 // alter last byte of Name just above to set
 974+ 8709 CF          >                db      {b $} | END_BIT     // msb as name end
 974+ 870A             >
 974+ 870A F0 86       >                dw      last_NFA            // Link to previous definition Name
 974+ 870C             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 974+ 870C F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 974+ 870E             >                else
 974+ 870E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 974+ 870E             >                endif           ; ok        // for other definitions it "points" the correct handler
 974+ 870E             >                // Use of "; ok" to suppress "warning[fwdref]"
 974+ 870E             >
 974+ 870E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 975+ 870E 9B 71 D7 64                  dw      COMPILE, C_Q_DO
 976+ 8712 DB 6E FF 6B                  dw      CSP, FETCH, STORE_CSP
 976+ 8716 F5 70
 977+ 8718 3D 6F 6B 6D                  dw      HERE, ZERO, COMMA, ZERO
 977+ 871C 59 6F 6B 6D
 978+ 8720 3D 6F 83 6D                  dw      HERE, THREE
 979+ 8724 BD 69                        dw      EXIT
 980+ 8726
 981+ 8726              Latest_Definition:
 982+ 8726              //  ______________________________________________________________________
 983+ 8726              //
 984+ 8726              // \
 985+ 8726                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 985+ 8726             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 985+ 8726             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 985+ 8726             >
 985+ 8726             >                // dummy db directives used to calculate length of namec
 985+ 8726 5C          >                db      "\\"
 985+ 8727             >len_NFA         defl    $ - temp_NFA
 985+ 8727             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 985+ 8726             >
 985+ 8726 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 985+ 8727 5C          >                db      "\\"               // name string in 7-bit ascii, but
 985+ 8728             >                org     $-1                 // alter last byte of Name just above to set
 985+ 8727 DC          >                db      {b $} | END_BIT     // msb as name end
 985+ 8728             >
 985+ 8728 06 87       >                dw      last_NFA            // Link to previous definition Name
 985+ 872A             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 985+ 872A F0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 985+ 872C             >                else
 985+ 872C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 985+ 872C             >                endif           ; ok        // for other definitions it "points" the correct handler
 985+ 872C             >                // Use of "; ok" to suppress "warning[fwdref]"
 985+ 872C             >
 985+ 872C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 986+ 872C 6A 6E FF 6B                  dw      BLK, FETCH
 987+ 8730 7D 64                        dw      ZBRANCH
 988+ 8732 30 00                        dw      Backslash_Else_1 - $
 989+ 8734 6A 6E FF 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
 989+ 8738 73 6D DC 6F
 990+ 873C 7D 64                        dw          ZBRANCH
 991+ 873E 18 00                        dw          Backslash_Else_2 - $
 992+ 8740 73 6E FF 6B                  dw              TO_IN, FETCH, CL, MOD, CL
 992+ 8744 9F 6D 3D 7A
 992+ 8748 9F 6D
 993+ 874A 2E 6B 91 6F                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 993+ 874E 73 6E DC 6B
 994+ 8752 66 64                        dw          BRANCH
 995+ 8754 0A 00                        dw          Backslash_Endif_2 - $
 996+ 8756              Backslash_Else_2:
 997+ 8756 AB 6D B1 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
 997+ 875A 73 6E 0C 6C
 998+ 875E              Backslash_Endif_2:
 999+ 875E 66 64                        dw      BRANCH
1000+ 8760 0A 00                        dw      Backslash_Endif_1 - $
1001+ 8762              Backslash_Else_1:
1002+ 8762 43 64 50 00                  dw          LIT, 80, TO_IN, STORE
1002+ 8766 73 6E 0C 6C
1003+ 876A              Backslash_Endif_1:
1004+ 876A BD 69                        dw      EXIT
1005+ 876C
1006+ 876C              Fence_Word:
1007+ 876C              //  ______________________________________________________________________
1008+ 876C              //
1009+ 876C
1010+ 876C 00           Here_Dictionary db      0
1011+ 876D
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
 113  876D
 114  876D              // now we save the compiled file so we can either run it or debug it
 115  876D                              SAVENEX OPEN "output/main.nex", ORIGIN
 116  876D                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 117  876D                              SAVENEX CFG  0
 118  876D                              SAVENEX BANK 2, 0
 119  876D                              SAVENEX AUTO
 120  876D                              SAVENEX CLOSE
 121  876D
 122  876D              //              PAGE 7 ;set 7 page to current slot
 123  876D              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 124  876D              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 125  876D
 126  876D              //              SAVETAP "output/F15j.tap", CODE, "forth15j", $6400, 9000
 127  876D
 128  876D                              SAVEBIN "output/forth15j.bin", ORIGIN, 9400
 129  876D
 130  876D                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
