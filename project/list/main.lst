# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              // v-Forth 1.6 NextZXOS version
   7  0000              // build 20210430
   8  0000              //
   9  0000              //
  10  0000              //  NextZXOS version
  11  0000              //  ______________________________________________________________________
  12  0000              //
  13  0000              //  This work is available as-is with no whatsoever warranty.
  14  0000              //  Copying, modifying and distributing this software is allowed
  15  0000              //  provided that the copyright notice is kept.
  16  0000              //  ______________________________________________________________________
  17  0000              //
  18  0000              //  by Matteo Vitturi, 1990-2021
  19  0000              //
  20  0000              //  https://sites.google.com/view/vforth/vforth15-next
  21  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  22  0000              //
  23  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  24  0000              //  Each line of this source list mustn't exceed 80 bytes.
  25  0000              //  Z80N (ZX Spectrum Next) extension is available.
  26  0000              //
  27  0000              //  This list has been tested using the following configuration:
  28  0000              //      - CSpect emulator V.2.12.30
  29  0000              //  ______________________________________________________________________
  30  0000              //
  31  0000              //  Z80 Registers usage map
  32  0000              //
  33  0000              //  AF
  34  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  35  0000              //  DE - Top of Stack element. The second from top is pointed by SP
  36  0000              //  HL - Working
  37  0000              //
  38  0000              //  AF'- Sometime used for backup purpose
  39  0000              //  BC'- Not used
  40  0000              //  DE'- Not used
  41  0000              //  HL'- Not used: (saved at startup)
  42  0000              //
  43  0000              //  SP - Calculator Stack Pointer
  44  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  45  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  46  0000              //
  47  0000              //  ______________________________________________________________________
  48  0000              //
  49  0000              //  _________________
  50  0000              //
  51  0000              //  FORTH DEFINITIONS
  52  0000              //  _________________
  53  0000
  54  0000                              OPT     --zxnext
  55  0000              //  ______________________________________________________________________
  56  0000              //
  57  0000              // this controls some debugging code in L0.asm
  58  0000              //  0 for final binary release.
  59  0000              //  1 for debugging with Visual Studio Code and DeZog
  60  0000              // -1 for for binary comparison with Forth generated code.
  61  0000              DEBUGGING       equ     -1
  62  0000              //
  63  0000              //  ______________________________________________________________________
  64  0000
  65  0000                              if ( -1 == DEBUGGING )
  66  0000              ORIGIN          equ     $6380                   // for binary comparison
  67  0000                              endif
  68  0000              //  ______________________________________________________________________
  69  0000
  70  0000                              if (  0 == DEBUGGING )
  71  0000 ~            ORIGIN          equ     $6400                   // binary
  72  0000                              endif
  73  0000              //  ______________________________________________________________________
  74  0000
  75  0000                              if (  1 == DEBUGGING )
  76  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  77  0000                              endif
  78  0000              //  ______________________________________________________________________
  79  0000
  80  0000                              DEVICE  ZXSPECTRUMNEXT
  81  0000
  82  0000                              ORG     ORIGIN
  83  6380
  84  6380                              if ( -1 == DEBUGGING )
  85  6380 00 00 00...                  ds 128                            // for binary comparison
  86  6384                              endif
  87  6400
  88  6400              //  ______________________________________________________________________
  89  6400              //
  90  6400              //  Naming convention for Label vs Forth correspondance
  91  6400              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  92  6400              //    - Leading "0" is converted into "Z_"
  93  6400              //    - Leading "(" is converted into "C_", closing bracket is omitted
  94  6400              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  95  6400              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  96  6400              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  97  6400              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  98  6400              //    - Greater-Than sign ">" in _GREATER or TO_ depending
  99  6400              //    - Equal sign "=" is converted in EQUAL
 100  6400              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 101  6400              //    - Asterisk sign "*" is converted in _MUL or STAR
 102  6400              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 103  6400              //    - Exclamation mark "!" is converted in STORE
 104  6400              //    - At-Sign "@" is converted in FETCH
 105  6400              //    - Words that collides with Assembler are normally suffixed with "_OP"
 106  6400
 107  6400                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
   1+ 6400              //  ______________________________________________________________________
   2+ 6400              //
   3+ 6400              //  system.asm
   4+ 6400              //  ______________________________________________________________________
   5+ 6400
   6+ 6400              // Registers:
   7+ 6400              //
   8+ 6400              //      BC: Instruction Pointer
   9+ 6400              //      DE:
  10+ 6400              //      HL: W register
  11+ 6400              //      SP: Calc stack Pointer
  12+ 6400              //      IX: Inner-Interpreter Address
  13+ 6400
  14+ 6400              //  ______________________________________________________________________
  15+ 6400              //
  16+ 6400              // ZX-Spectrum standard system variables
  17+ 6400              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6400              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6400              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6400              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6400
  22+ 6400              //  ______________________________________________________________________
  23+ 6400              //
  24+ 6400              // Flag constants
  25+ 6400              TRUE_FLAG       equ     $FFFF
  26+ 6400              FALSE_FLAG      equ     $0000
  27+ 6400
  28+ 6400              //  ______________________________________________________________________
  29+ 6400              //
  30+ 6400              // Ascii char constants
  31+ 6400              NUL_CHAR        equ     $00
  32+ 6400              COMMA_CHAR      equ     $06
  33+ 6400              BACKSPACE_CHAR  equ     $08
  34+ 6400              CR_CHAR         equ     $0D
  35+ 6400              BLANK_CHAR      equ     $20
  36+ 6400              QUOTE_CHAR      equ     "'"
  37+ 6400              DQUOTE_CHAR     equ     '"'
  38+ 6400              UNDERSCORE_CHAR equ     $5F
  39+ 6400              SOLIDBLOCK_CHAR equ     $8F
  40+ 6400              HALFBLOCK_CHAR  equ     $8C
  41+ 6400              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6400              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6400
  44+ 6400
  45+ 6400              //  ______________________________________________________________________
  46+ 6400              //
  47+ 6400
  48+ 6400                              // emulate something like:  ld hl,rp
  49+ 6400              ldhlrp          macro
  50+ 6400 ~                            ld      hl,(RP_Pointer)
  51+ 6400                              endm
  52+ 6400
  53+ 6400                              // emulate something like:  ld rp,hl
  54+ 6400              ldrphl          macro
  55+ 6400 ~                            ld      (RP_Pointer),hl
  56+ 6400                              endm
  57+ 6400
  58+ 6400              //  ______________________________________________________________________
  59+ 6400              //
  60+ 6400              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6400              next            macro
  62+ 6400 ~                            jp      (ix)
  63+ 6400                              endm
  64+ 6400
  65+ 6400              psh1            macro
  66+ 6400 ~                            push    hl
  67+ 6400 ~                            jp      (ix)
  68+ 6400                              endm
  69+ 6400
  70+ 6400              psh2            macro
  71+ 6400 ~                            push    de
  72+ 6400 ~                            push    hl
  73+ 6400 ~                            jp      (ix)
  74+ 6400                              endm
  75+ 6400
  76+ 6400              //  ______________________________________________________________________
  77+ 6400              //
  78+ 6400              // Bit constants in length-byte
  79+ 6400
  80+ 6400              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6400              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6400              END_BIT         equ     %10000000               // $80
  83+ 6400
  84+ 6400
  85+ 6400              //  ______________________________________________________________________
  86+ 6400              //
  87+ 6400              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6400              //  pointers
  89+ 6400              temp_NFA        defl    0
  90+ 6400              last_NFA        defl    0
  91+ 6400              len_NFA         defl    0
  92+ 6400
  93+ 6400              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6400              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6400              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6400
  97+ 6400              //  ______________________________________________________________________
  98+ 6400              //
  99+ 6400              //  Create a new "low-level" definition
 100+ 6400              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6400              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6400              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6400              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6400              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6400              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6400              //  This macro acts much like the standard Forth definition CREATE
 107+ 6400
 108+ 6400              New_Def         macro   label, namec, runcode, bits
 109+ 6400 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6400 ~
 111+ 6400 ~                            // dummy db directives used to calculate length of namec
 112+ 6400 ~                            db      namec
 113+ 6400 ~            len_NFA         defl    $ - temp_NFA
 114+ 6400 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6400 ~
 116+ 6400 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6400 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6400 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6400 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6400 ~
 121+ 6400 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6400 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6400 ~                            dw      runcode ; ok        // for primitive definitions  actual code
 124+ 6400 ~                            else
 125+ 6400 ~                            dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6400 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6400 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6400 ~
 129+ 6400 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6400                              endm
 131+ 6400
 132+ 6400              //  ______________________________________________________________________
 133+ 6400              //
 134+ 6400              // Create a "constant"
 135+ 6400              // The constant value is compiled in first PFA cell
 136+ 6400              Constant_Def    macro   label, namec, constant_value
 137+ 6400 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6400 ~                            dw      constant_value
 139+ 6400                              endm
 140+ 6400
 141+ 6400              //  ______________________________________________________________________
 142+ 6400              //
 143+ 6400              // Create a "variable"
 144+ 6400              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6400              // this allow creation of "variables" which content is  of any length
 146+ 6400              Variable_Def    macro   label, namec, initial_value
 147+ 6400 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6400 ~                            dw      initial_value
 149+ 6400                              endm
 150+ 6400
 151+ 6400              //  ______________________________________________________________________
 152+ 6400              //
 153+ 6400              // Create a "user"
 154+ 6400              // It uses a single byte as offset to calculate the address of the variable
 155+ 6400              User_Def        macro   label, namec, offset_value
 156+ 6400 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6400 ~                            db      offset_value
 158+ 6400                              endm
 159+ 6400
 160+ 6400              //  ______________________________________________________________________
 161+ 6400              //
 162+ 6400              // Create a "colon-definition"
 163+ 6400              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6400              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6400              Colon_Def       macro   label, namec, bits
 166+ 6400 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6400                              endm
 168+ 6400
 169+ 6400              //  ______________________________________________________________________
 170+ 6400              //
 171+ 6400
 172+ 6400              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6400              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6400              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6400              USER_system:    equ     $D188               // User variables zone.
 176+ 6400              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6400              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6400
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/system.asm
 108  6400                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
   1+ 6400              //  ______________________________________________________________________
   2+ 6400              //
   3+ 6400              //  L0.asm
   4+ 6400              //
   5+ 6400              //  Origin-Area and Level-0 definitions
   6+ 6400              //  ______________________________________________________________________
   7+ 6400
   8+ 6400
   9+ 6400              Cold_origin:
  10+ 6400 A7                           and     a
  11+ 6401 C3 42 79                     jp      ColdRoutine
  12+ 6404              Warm_origin:
  13+ 6404 37                           scf
  14+ 6405 C3 42 79                     jp      WarmRoutine
  15+ 6408
  16+ 6408              // +008
  17+ 6408 E8 D0        SP_Basic:       dw      $D0E8               // These are bits with some "standard" meaning... 0101
  18+ 640A
  19+ 640A              // +00A
  20+ 640A 00 0E                        dw      $0E00
  21+ 640C
  22+ 640C              // +00C
  23+ 640C E0 86        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 640E
  25+ 640E              // +00E
  26+ 640E 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6410
  28+ 6410              // +010
  29+ 6410 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6412
  31+ 6412              // +012
  32+ 6412 E8 D0        S0_origin:      dw      S0_system
  33+ 6414 88 D1        R0_origin:      dw      R0_system
  34+ 6416 E8 D0        TIB_origin:     dw      TIB_system
  35+ 6418 1F 00        WIDTH_origin:   dw      31
  36+ 641A 01 00        WARNING_origin: dw      1
  37+ 641C 26 87        FENCE_origin:   dw      Fence_Word
  38+ 641E 26 87        DP_origin       dw      Fence_Word
  39+ 6420 50 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6422 E4 D1                        dw      FIRST_system
  41+ 6424 00 E0                        dw      LIMIT_system
  42+ 6426
  43+ 6426              // +026
  44+ 6426 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 6427 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 6428 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 6429 00                           db      0
  48+ 642A
  49+ 642A              // +02A
  50+ 642A 34 64        IX_Echo:        dw      $6434               // Echo IX after NextOS call
  51+ 642C
  52+ 642C              // +02C
  53+ 642C E8 D0        SP_Saved:       dw      $D0E8               // Saved SP dufing NextOS call
  54+ 642E
  55+ 642E              // +02E
  56+ 642E 88 D1        USER_Pointer:   dw      USER_system
  57+ 6430
  58+ 6430              // +030
  59+ 6430 7A D1        RP_Pointer:     dw      $d17A // R0_system
  60+ 6432
  61+ 6432              // +32
  62+ 6432              // SP_Basic        dw      0
  63+ 6432
  64+ 6432
  65+ 6432              //  ______________________________________________________________________
  66+ 6432
  67+ 6432              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6432              // instead of their equivalent long sequences.
  69+ 6432
  70+ 6432              //  ______________________________________________________________________
  71+ 6432
  72+ 6432              // address for "next" - inner interpreter
  73+ 6432              // This address must always be pointed by IX
  74+ 6432              // "next" macro simply does a  jp(ix)  instruction
  75+ 6432
  76+ 6432 D5           Psh2_Ptr:       push    de
  77+ 6433 E5           Psh1_Ptr:       push    hl
  78+ 6434
  79+ 6434              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6434
  81+ 6434                              if ( 1 == DEBUGGING )
  82+ 6434 ~                            ld      hl, Next_Breakpoint_1
  83+ 6434 ~                            and     a
  84+ 6434 ~                            sbc     hl, bc
  85+ 6434 ~                            jr      nz, Next_Continue
  86+ 6434 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6434                              endif
  88+ 6434
  89+ 6434              Next_Continue:
  90+ 6434 0A                           ld      a, (bc)
  91+ 6435 03                           inc     bc
  92+ 6436 6F                           ld      l, a
  93+ 6437 0A                           ld      a, (bc)
  94+ 6438 03                           inc     bc
  95+ 6439 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 643A
  97+ 643A              // Execute xt i.e. CFA held in HL
  98+ 643A              Exec_Ptr:
  99+ 643A 5E                           ld      e, (hl)
 100+ 643B 23                           inc     hl
 101+ 643C 56                           ld      d, (hl)
 102+ 643D EB                           ex      de, hl
 103+ 643E E9                           jp      (hl)                // and jump to it
 104+ 643F                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 643F
 106+ 643F              //  ______________________________________________________________________
 107+ 643F              //
 108+ 643F              // lit          -- x
 109+ 643F              // puts on top of stack the value of the following word.
 110+ 643F              // it is compiled in colon definition before a literal number
 111+ 643F
 112+ 643F                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 643F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 643F             >
 112+ 643F             >                // dummy db directives used to calculate length of namec
 112+ 643F 4C 49 54    >                db      "LIT"
 112+ 6442             >len_NFA         defl    $ - temp_NFA
 112+ 6442             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 643F             >
 112+ 643F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 6440 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 6443             >                org     $-1                 // alter last byte of Name just above to set
 112+ 6442 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 6443             >
 112+ 6443 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 6445             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 6445 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 112+ 6445             >                else
 112+ 6445 47 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 112+ 6447             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 6447             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 6447             >
 112+ 6447             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 6447
 114+ 6447 0A                           ld      a, (bc)
 115+ 6448 03                           inc     bc
 116+ 6449 6F                           ld      l, a
 117+ 644A 0A                           ld      a, (bc)
 118+ 644B 03                           inc     bc
 119+ 644C 67                           ld      h, a
 120+ 644D                              psh1
 120+ 644D E5          >                push    hl
 120+ 644E DD E9       >                jp      (ix)
 121+ 6450
 122+ 6450              //  ______________________________________________________________________
 123+ 6450              //
 124+ 6450              // execute      i*x xt -- j*x
 125+ 6450              // execution token. usually xt is given by CFA
 126+ 6450
 127+ 6450                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 6450             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6450             >
 127+ 6450             >                // dummy db directives used to calculate length of namec
 127+ 6450 45 58 45 43 >                db      "EXECUTE"
 127+ 6454 55 54 45    >
 127+ 6457             >len_NFA         defl    $ - temp_NFA
 127+ 6457             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6450             >
 127+ 6450 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6451 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 6455 55 54 45    >
 127+ 6458             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6457 C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 6458             >
 127+ 6458 3F 64       >                dw      last_NFA            // Link to previous definition Name
 127+ 645A             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 645A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 127+ 645A             >                else
 127+ 645A 5C 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 645C             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 645C             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 645C             >
 127+ 645C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 645C E1                           pop     hl
 129+ 645D 18 DB                        jr      Exec_Ptr
 130+ 645F
 131+ 645F
 132+ 645F              //  ______________________________________________________________________
 133+ 645F              //
 134+ 645F              // branch       --
 135+ 645F              // unconditional branch in colon definition using the following cell as an offset from current IP value
 136+ 645F              // compiled by ELSE, AGAIN and some other immediate words
 137+ 645F
 138+ 645F                              New_Def BRANCH, "BRANCH", is_code, is_normal
 138+ 645F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ 645F             >
 138+ 645F             >                // dummy db directives used to calculate length of namec
 138+ 645F 42 52 41 4E >                db      "BRANCH"
 138+ 6463 43 48       >
 138+ 6465             >len_NFA         defl    $ - temp_NFA
 138+ 6465             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ 645F             >
 138+ 645F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ 6460 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 138+ 6464 43 48       >
 138+ 6466             >                org     $-1                 // alter last byte of Name just above to set
 138+ 6465 C8          >                db      {b $} | END_BIT     // msb as name end
 138+ 6466             >
 138+ 6466 50 64       >                dw      last_NFA            // Link to previous definition Name
 138+ 6468             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 6468 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 138+ 6468             >                else
 138+ 6468 6A 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 138+ 646A             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 646A             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 646A             >
 138+ 646A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 646A              Branch_Ptr:
 140+ 646A 60                           ld      h, b
 141+ 646B 69                           ld      l, c
 142+ 646C 5E                           ld      e, (hl)
 143+ 646D 23                           inc     hl
 144+ 646E 56                           ld      d, (hl)
 145+ 646F 2B                           dec     hl                  // offset is calculated from current IP
 146+ 6470 19                           add     hl, de
 147+ 6471 4D                           ld      c, l
 148+ 6472 44                           ld      b, h
 149+ 6473                              next
 149+ 6473 DD E9       >                jp      (ix)
 150+ 6475
 151+ 6475
 152+ 6475              //  ______________________________________________________________________
 153+ 6475              //
 154+ 6475              // 0branch      f --
 155+ 6475              // conditional branch if the top-of-stack is ZERO or FALSE.
 156+ 6475              // compiled by IF, UNTIL and some other immediate words
 157+ 6475
 158+ 6475                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 158+ 6475             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6475             >
 158+ 6475             >                // dummy db directives used to calculate length of namec
 158+ 6475 30 42 52 41 >                db      "0BRANCH"
 158+ 6479 4E 43 48    >
 158+ 647C             >len_NFA         defl    $ - temp_NFA
 158+ 647C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6475             >
 158+ 6475 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6476 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 158+ 647A 4E 43 48    >
 158+ 647D             >                org     $-1                 // alter last byte of Name just above to set
 158+ 647C C8          >                db      {b $} | END_BIT     // msb as name end
 158+ 647D             >
 158+ 647D 5F 64       >                dw      last_NFA            // Link to previous definition Name
 158+ 647F             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 647F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 158+ 647F             >                else
 158+ 647F 81 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6481             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6481             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6481             >
 158+ 6481             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6481              ZBranch_Ptr:
 160+ 6481 E1                           pop     hl
 161+ 6482 7D                           ld      a, l
 162+ 6483 B4                           or      h
 163+ 6484 CA 6A 64                     jp      z, Branch_Ptr
 164+ 6487 03                           inc     bc                  // if not branch, skip offset cell.
 165+ 6488 03                           inc     bc
 166+ 6489                              next
 166+ 6489 DD E9       >                jp      (ix)
 167+ 648B
 168+ 648B              //  ______________________________________________________________________
 169+ 648B              //
 170+ 648B              // (loop)       --
 171+ 648B              // compiled by +LOOP. it uses the top two values of return-stack to
 172+ 648B              // keep track of index and limit
 173+ 648B                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 173+ 648B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 648B             >
 173+ 648B             >                // dummy db directives used to calculate length of namec
 173+ 648B 28 4C 4F 4F >                db      "(LOOP)"
 173+ 648F 50 29       >
 173+ 6491             >len_NFA         defl    $ - temp_NFA
 173+ 6491             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 648B             >
 173+ 648B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 648C 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 173+ 6490 50 29       >
 173+ 6492             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6491 A9          >                db      {b $} | END_BIT     // msb as name end
 173+ 6492             >
 173+ 6492 75 64       >                dw      last_NFA            // Link to previous definition Name
 173+ 6494             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6494 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 173+ 6494             >                else
 173+ 6494 96 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6496             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6496             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6496             >
 173+ 6496             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6496
 175+ 6496
 176+ 6496 11 01 00                     ld      de, 1               // bc contains increment of 1
 177+ 6499
 178+ 6499
 179+ 6499
 180+ 6499
 181+ 6499
 182+ 6499
 183+ 6499
 184+ 6499
 185+ 6499              Loop_Ptr:
 186+ 6499                              ldhlrp                      // ld hl,rp macro 30h +Origin
 186+ 6499 2A 30 64    >                ld      hl,(RP_Pointer)
 187+ 649C 7E                           ld      a, (hl)             // hl points to loop-index, add increment de to it.
 188+ 649D 83                           add     e
 189+ 649E 77                           ld      (hl), a
 190+ 649F 5F                           ld      e, a
 191+ 64A0 23                           inc     hl
 192+ 64A1 7E                           ld      a, (hl)
 193+ 64A2 8A                           adc     d
 194+ 64A3 77                           ld      (hl),a
 195+ 64A4 23                           inc     hl                  // hl now points to loop-limit
 196+ 64A5 CB 7A                        bit     7, d                // keep increment-sign just before overwriting d
 197+ 64A7 57                           ld      d, a
 198+ 64A8 20 07                        jr      nz, Loop_NegativeIncrement
 199+ 64AA
 200+ 64AA 7B                               ld      a, e
 201+ 64AB 96                               sub     (hl)
 202+ 64AC 7A                               ld      a, d
 203+ 64AD 23                               inc     hl
 204+ 64AE 9E                               sbc     (hl)
 205+ 64AF 18 05                        jr      Loop_Endif              // else
 206+ 64B1              Loop_NegativeIncrement:
 207+ 64B1 7E                               ld      a, (hl)
 208+ 64B2 93                               sub     e
 209+ 64B3 23                               inc     hl
 210+ 64B4 7E                               ld      a, (hl)
 211+ 64B5 9A                               sbc     d
 212+ 64B6              Loop_Endif:
 213+ 64B6
 214+ 64B6 FA 6A 64                     jp      m, Branch_Ptr       // perform branch consuming following cell
 215+ 64B9
 216+ 64B9 23                           inc     hl
 217+ 64BA                              ldrphl                      // ld rp,hl macro 30h +Origin
 217+ 64BA 22 30 64    >                ld      (RP_Pointer),hl
 218+ 64BD
 219+ 64BD 03                           inc     bc                  // skip branch-style offset
 220+ 64BE 03                           inc     bc
 221+ 64BF                              next
 221+ 64BF DD E9       >                jp      (ix)
 222+ 64C1
 223+ 64C1              //  ______________________________________________________________________
 224+ 64C1              //
 225+ 64C1              // (+loop)       n --
 226+ 64C1              // same as (LOOP) but index is incremented by n (instead of just 1)
 227+ 64C1              // compiled by +LOOP.
 228+ 64C1                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 228+ 64C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 228+ 64C1             >
 228+ 64C1             >                // dummy db directives used to calculate length of namec
 228+ 64C1 28 2B 4C 4F >                db      "(+LOOP)"
 228+ 64C5 4F 50 29    >
 228+ 64C8             >len_NFA         defl    $ - temp_NFA
 228+ 64C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 228+ 64C1             >
 228+ 64C1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 228+ 64C2 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 228+ 64C6 4F 50 29    >
 228+ 64C9             >                org     $-1                 // alter last byte of Name just above to set
 228+ 64C8 A9          >                db      {b $} | END_BIT     // msb as name end
 228+ 64C9             >
 228+ 64C9 8B 64       >                dw      last_NFA            // Link to previous definition Name
 228+ 64CB             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 228+ 64CB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 228+ 64CB             >                else
 228+ 64CB CD 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 228+ 64CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 228+ 64CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 228+ 64CD             >
 228+ 64CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 229+ 64CD D1                           pop     de
 230+ 64CE C3 99 64                     jp      Loop_Ptr
 231+ 64D1
 232+ 64D1              //  ______________________________________________________________________
 233+ 64D1              //
 234+ 64D1              // (?do)        lim ind --
 235+ 64D1              // compiled by ?DO to make a loop checking for lim == ind first
 236+ 64D1              // at run-time (?DO) must be followed by a BRANCH offset
 237+ 64D1              // used to skip the loop if lim == ind
 238+ 64D1                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 238+ 64D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 238+ 64D1             >
 238+ 64D1             >                // dummy db directives used to calculate length of namec
 238+ 64D1 28 3F 44 4F >                db      "(?DO)"
 238+ 64D5 29          >
 238+ 64D6             >len_NFA         defl    $ - temp_NFA
 238+ 64D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 238+ 64D1             >
 238+ 64D1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 238+ 64D2 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 238+ 64D6 29          >
 238+ 64D7             >                org     $-1                 // alter last byte of Name just above to set
 238+ 64D6 A9          >                db      {b $} | END_BIT     // msb as name end
 238+ 64D7             >
 238+ 64D7 C1 64       >                dw      last_NFA            // Link to previous definition Name
 238+ 64D9             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 238+ 64D9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 238+ 64D9             >                else
 238+ 64D9 DB 64       >                dw      $ + 2   ; ok        // is pointed by CFA
 238+ 64DB             >                endif           ; ok        // for other definitions it "points" the correct handler
 238+ 64DB             >                // Use of "; ok" to suppress "warning[fwdref]"
 238+ 64DB             >
 238+ 64DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 239+ 64DB D1                           pop     de                  // de has the index
 240+ 64DC E1                           pop     hl                  // hl has the limit
 241+ 64DD E5                           push    hl
 242+ 64DE D5                           push    de
 243+ 64DF A7                           and     a                   // reset carry flag
 244+ 64E0 ED 52                        sbc     hl, de              // compute limit - index
 245+ 64E2 20 05                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 246+ 64E4 D1                               pop     de
 247+ 64E5 E1                               pop     hl
 248+ 64E6
 249+ 64E6 C3 6A 64                         jp      Branch_Ptr          // perform branch consuming following cell
 250+ 64E9              Do_Ptr:
 251+ 64E9                              ldhlrp                      // prepare RP
 251+ 64E9 2A 30 64    >                ld      hl,(RP_Pointer)
 252+ 64EC 2B                           dec     hl
 253+ 64ED 2B                           dec     hl
 254+ 64EE 2B                           dec     hl
 255+ 64EF 2B                           dec     hl
 256+ 64F0                              ldrphl
 256+ 64F0 22 30 64    >                ld      (RP_Pointer),hl
 257+ 64F3
 258+ 64F3                              // store index as top RP
 259+ 64F3 D1                           pop     de
 260+ 64F4 73                           ld      (hl), e
 261+ 64F5 23                           inc     hl
 262+ 64F6 72                           ld      (hl), d
 263+ 64F7 23                           inc     hl
 264+ 64F8                              // stores lim as second from top RP
 265+ 64F8 D1                           pop     de
 266+ 64F9 73                           ld      (hl), e
 267+ 64FA 23                           inc     hl
 268+ 64FB 72                           ld      (hl), d
 269+ 64FC
 270+ 64FC                              // skip branch-style offseet
 271+ 64FC 03                           inc     bc
 272+ 64FD 03                           inc     bc
 273+ 64FE                              next
 273+ 64FE DD E9       >                jp      (ix)
 274+ 6500
 275+ 6500              //  ______________________________________________________________________
 276+ 6500              //
 277+ 6500              // (do)        lim ind --
 278+ 6500              // compiled by DO to make a loop checking for lim == ind first
 279+ 6500              // this is a simpler version of (?DO)
 280+ 6500                              New_Def C_DO, "(DO)", is_code, is_normal
 280+ 6500             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 280+ 6500             >
 280+ 6500             >                // dummy db directives used to calculate length of namec
 280+ 6500 28 44 4F 29 >                db      "(DO)"
 280+ 6504             >len_NFA         defl    $ - temp_NFA
 280+ 6504             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 280+ 6500             >
 280+ 6500 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 280+ 6501 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 280+ 6505             >                org     $-1                 // alter last byte of Name just above to set
 280+ 6504 A9          >                db      {b $} | END_BIT     // msb as name end
 280+ 6505             >
 280+ 6505 D1 64       >                dw      last_NFA            // Link to previous definition Name
 280+ 6507             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 280+ 6507 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 280+ 6507             >                else
 280+ 6507 09 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 280+ 6509             >                endif           ; ok        // for other definitions it "points" the correct handler
 280+ 6509             >                // Use of "; ok" to suppress "warning[fwdref]"
 280+ 6509             >
 280+ 6509             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 281+ 6509 0B                           dec     bc                  // prepare IP beforehand
 282+ 650A 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 283+ 650B C3 E9 64                     jp      Do_Ptr
 284+ 650E
 285+ 650E              //  ______________________________________________________________________
 286+ 650E              //
 287+ 650E              // i            -- n
 288+ 650E              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 289+ 650E              // the current value of the index-loop
 290+ 650E                              New_Def I, "I", is_code, is_normal
 290+ 650E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 650E             >
 290+ 650E             >                // dummy db directives used to calculate length of namec
 290+ 650E 49          >                db      "I"
 290+ 650F             >len_NFA         defl    $ - temp_NFA
 290+ 650F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 650E             >
 290+ 650E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 650F 49          >                db      "I"               // name string in 7-bit ascii, but
 290+ 6510             >                org     $-1                 // alter last byte of Name just above to set
 290+ 650F C9          >                db      {b $} | END_BIT     // msb as name end
 290+ 6510             >
 290+ 6510 00 65       >                dw      last_NFA            // Link to previous definition Name
 290+ 6512             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 6512 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 290+ 6512             >                else
 290+ 6512 14 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 290+ 6514             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 6514             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 6514             >
 290+ 6514             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 6514              I_Ptr:
 292+ 6514
 293+ 6514                              ldhlrp
 293+ 6514 2A 30 64    >                ld      hl,(RP_Pointer)
 294+ 6517 5E                           ld      e, (hl)
 295+ 6518 23                           inc     hl
 296+ 6519 56                           ld      d, (hl)
 297+ 651A D5                           push    de
 298+ 651B                              next
 298+ 651B DD E9       >                jp      (ix)
 299+ 651D
 300+ 651D              //  ______________________________________________________________________
 301+ 651D              //
 302+ 651D              // digit        c n -- u 1  |  0
 303+ 651D              // convert a character c using base n
 304+ 651D              // returns a unsigned number and a true flag
 305+ 651D              // or just a false flag if the conversion fails
 306+ 651D                              New_Def DIGIT, "DIGIT", is_code, is_normal
 306+ 651D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 306+ 651D             >
 306+ 651D             >                // dummy db directives used to calculate length of namec
 306+ 651D 44 49 47 49 >                db      "DIGIT"
 306+ 6521 54          >
 306+ 6522             >len_NFA         defl    $ - temp_NFA
 306+ 6522             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 306+ 651D             >
 306+ 651D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 306+ 651E 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 306+ 6522 54          >
 306+ 6523             >                org     $-1                 // alter last byte of Name just above to set
 306+ 6522 D4          >                db      {b $} | END_BIT     // msb as name end
 306+ 6523             >
 306+ 6523 0E 65       >                dw      last_NFA            // Link to previous definition Name
 306+ 6525             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 306+ 6525 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 306+ 6525             >                else
 306+ 6525 27 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 306+ 6527             >                endif           ; ok        // for other definitions it "points" the correct handler
 306+ 6527             >                // Use of "; ok" to suppress "warning[fwdref]"
 306+ 6527             >
 306+ 6527             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 307+ 6527 E1                           pop     hl                  // l has the base
 308+ 6528 D1                           pop     de                  // e has the digit
 309+ 6529 7B                           ld      a, e
 310+ 652A FE 60                        cp      $60                 // check if lowercase
 311+ 652C 38 02                        jr      c, Digit_Uppercase
 312+ 652E D6 20                            sub     $20                 // quick'n'dirty uppercase
 313+ 6530              Digit_Uppercase:
 314+ 6530 D6 30                        sub     $30
 315+ 6532 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 316+ 6534 FE 0A                            cp      $0A
 317+ 6536 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 318+ 6538 D6 07                                sub     7                   // try hex and subtract 7
 319+ 653A FE 0A                                cp      $0A
 320+ 653C 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 321+ 653E
 322+ 653E              Digit_Decimal:
 323+ 653E                              // compare digit
 324+ 653E BD                           cp      l                   // compare with base
 325+ 653F
 326+ 653F 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 327+ 6541 5F                               ld      e, a                // digit is returned as second from TOS
 328+ 6542 21 01 00                         ld      hl, 1
 329+ 6545
 330+ 6545                                  psh2
 330+ 6545 D5          >                push    de
 330+ 6546 E5          >                push    hl
 330+ 6547 DD E9       >                jp      (ix)
 331+ 6549              Digit_Fail:
 332+ 6549 21 00 00                     ld      hl, 0
 333+ 654C                              psh1
 333+ 654C E5          >                push    hl
 333+ 654D DD E9       >                jp      (ix)
 334+ 654F
 335+ 654F              //  ______________________________________________________________________
 336+ 654F              //
 337+ 654F              //  parametric uppercase routine
 338+ 654F              //  depending on the following op-code the routine can be by-passed
 339+ 654F              //  changing the behaviour of some callers.
 340+ 654F              //  If it is "ret" then the system is Case-Sensitive
 341+ 654F              //  If it is "Nop" then the system is Case-Insensitive
 342+ 654F              //  Only A register is touched.
 343+ 654F 00           Case_Sensitive: nop                         // Default is case-insensitive.
 344+ 6550              Case_Upper:
 345+ 6550 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 346+ 6552 D8                           ret     c                   // no change if A < "a"
 347+ 6553 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 348+ 6555 D0                           ret     nc                  // no change if A > "z"
 349+ 6556 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 350+ 6558 C9                           ret
 351+ 6559
 352+ 6559              //  ______________________________________________________________________
 353+ 6559              //
 354+ 6559              //  caseon      --
 355+ 6559              // set system case-sensitivity on
 356+ 6559              // it patches a RET/NOP at the beginning of the uppercase-routine
 357+ 6559                              New_Def CASEON, "CASEON", is_code, is_normal
 357+ 6559             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ 6559             >
 357+ 6559             >                // dummy db directives used to calculate length of namec
 357+ 6559 43 41 53 45 >                db      "CASEON"
 357+ 655D 4F 4E       >
 357+ 655F             >len_NFA         defl    $ - temp_NFA
 357+ 655F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ 6559             >
 357+ 6559 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ 655A 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 357+ 655E 4F 4E       >
 357+ 6560             >                org     $-1                 // alter last byte of Name just above to set
 357+ 655F CE          >                db      {b $} | END_BIT     // msb as name end
 357+ 6560             >
 357+ 6560 1D 65       >                dw      last_NFA            // Link to previous definition Name
 357+ 6562             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 6562 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 357+ 6562             >                else
 357+ 6562 64 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 357+ 6564             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 6564             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 6564             >
 357+ 6564             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 6564 3E C9                        ld      a, $C9              // "ret"
 359+ 6566 32 4F 65                     ld      (Case_Sensitive), a
 360+ 6569                              next
 360+ 6569 DD E9       >                jp      (ix)
 361+ 656B
 362+ 656B              //  ______________________________________________________________________
 363+ 656B              //
 364+ 656B              //  caseoff     --
 365+ 656B              // set system case-sensitivity on
 366+ 656B              // it patches a RET/NOP at the beginning of the uppercase-routine
 367+ 656B                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 367+ 656B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 367+ 656B             >
 367+ 656B             >                // dummy db directives used to calculate length of namec
 367+ 656B 43 41 53 45 >                db      "CASEOFF"
 367+ 656F 4F 46 46    >
 367+ 6572             >len_NFA         defl    $ - temp_NFA
 367+ 6572             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 367+ 656B             >
 367+ 656B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 367+ 656C 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 367+ 6570 4F 46 46    >
 367+ 6573             >                org     $-1                 // alter last byte of Name just above to set
 367+ 6572 C6          >                db      {b $} | END_BIT     // msb as name end
 367+ 6573             >
 367+ 6573 59 65       >                dw      last_NFA            // Link to previous definition Name
 367+ 6575             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 367+ 6575 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 367+ 6575             >                else
 367+ 6575 77 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 367+ 6577             >                endif           ; ok        // for other definitions it "points" the correct handler
 367+ 6577             >                // Use of "; ok" to suppress "warning[fwdref]"
 367+ 6577             >
 367+ 6577             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 368+ 6577 3E 00                        ld      a, $00              // "nop"
 369+ 6579 32 4F 65                     ld      (Case_Sensitive), a
 370+ 657C                              next
 370+ 657C DD E9       >                jp      (ix)
 371+ 657E
 372+ 657E              //  ______________________________________________________________________
 373+ 657E              //
 374+ 657E              //  upper       c1 -- c1 | c2
 375+ 657E              // character on top of stack is forced to Uppercase.
 376+ 657E                              New_Def UPPER, "UPPER", is_code, is_normal
 376+ 657E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 376+ 657E             >
 376+ 657E             >                // dummy db directives used to calculate length of namec
 376+ 657E 55 50 50 45 >                db      "UPPER"
 376+ 6582 52          >
 376+ 6583             >len_NFA         defl    $ - temp_NFA
 376+ 6583             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 376+ 657E             >
 376+ 657E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 376+ 657F 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 376+ 6583 52          >
 376+ 6584             >                org     $-1                 // alter last byte of Name just above to set
 376+ 6583 D2          >                db      {b $} | END_BIT     // msb as name end
 376+ 6584             >
 376+ 6584 6B 65       >                dw      last_NFA            // Link to previous definition Name
 376+ 6586             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 376+ 6586 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 376+ 6586             >                else
 376+ 6586 88 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 376+ 6588             >                endif           ; ok        // for other definitions it "points" the correct handler
 376+ 6588             >                // Use of "; ok" to suppress "warning[fwdref]"
 376+ 6588             >
 376+ 6588             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 377+ 6588 E1                           pop     hl
 378+ 6589 7D                           ld      a, l
 379+ 658A CD 50 65                     call    Case_Upper
 380+ 658D 6F                           ld      l, a
 381+ 658E
 382+ 658E                              psh1
 382+ 658E E5          >                push    hl
 382+ 658F DD E9       >                jp      (ix)
 383+ 6591
 384+ 6591              //  ______________________________________________________________________
 385+ 6591              //
 386+ 6591              // (find)       addr voc -- addr 0 | cfa b 1
 387+ 6591              // vocabulary search,
 388+ 6591              // - voc is starting word's NFA
 389+ 6591              // - addr is the string to be searched for
 390+ 6591              // On success, it returns the CFA of found word, the first NFA byte
 391+ 6591              // (which contains length and some flags) and a true flag.
 392+ 6591              // On fail, a false flag  (no more: leaves addr unchanged)
 393+ 6591                              New_Def C_FIND, "(FIND)", is_code, is_normal
 393+ 6591             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 6591             >
 393+ 6591             >                // dummy db directives used to calculate length of namec
 393+ 6591 28 46 49 4E >                db      "(FIND)"
 393+ 6595 44 29       >
 393+ 6597             >len_NFA         defl    $ - temp_NFA
 393+ 6597             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 6591             >
 393+ 6591 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 6592 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 393+ 6596 44 29       >
 393+ 6598             >                org     $-1                 // alter last byte of Name just above to set
 393+ 6597 A9          >                db      {b $} | END_BIT     // msb as name end
 393+ 6598             >
 393+ 6598 7E 65       >                dw      last_NFA            // Link to previous definition Name
 393+ 659A             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 659A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 393+ 659A             >                else
 393+ 659A 9C 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 659C             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 659C             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 659C             >
 393+ 659C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 659C                                                              // de has dictionary pointer
 395+ 659C D1                               pop     de
 396+ 659D              Find_VocabularyLoop:
 397+ 659D E1                               pop     hl                  // string pointer to search for
 398+ 659E E5                               push    hl                  // keep it on stack too for the end.
 399+ 659F 1A                               ld      a, (de)             // save NFA length byte
 400+ 65A0 08                               ex      af,af'              // for later use (!)
 401+ 65A1 1A                               ld      a, (de)             // reload NFA length byte
 402+ 65A2 AE                               xor     (hl)                // check if same length
 403+ 65A3 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 404+ 65A5                                  // word an text haven't the same length, skip to next vocabulary entry
 405+ 65A5 20 2C                            jr      nz, Find_DifferentLenght
 406+ 65A7
 407+ 65A7              Find_ThisWord:  // begin loop
 408+ 65A7 23                                   inc     hl
 409+ 65A8 13                                   inc     de
 410+ 65A9 1A                                   ld      a, (de)
 411+ 65AA                                      // case insensitive option - begin
 412+ 65AA C5                                   push    bc
 413+ 65AB E6 80                                and     $80                 // split A in msb and the rest
 414+ 65AD 47                                   ld      b, a
 415+ 65AE 1A                                   ld      a, (de)
 416+ 65AF E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 417+ 65B1 CD 4F 65                             call    Case_Sensitive      // uppercase routine
 418+ 65B4 4F                                   ld      c, a
 419+ 65B5 7E                                   ld      a, (hl)
 420+ 65B6 CD 4F 65                             call    Case_Sensitive      // uppercase routine
 421+ 65B9 A9                                   xor     c
 422+ 65BA A8                                   xor     b
 423+ 65BB C1                                   pop     bc
 424+ 65BC                                      // case insensitive option - end
 425+ 65BC 87                                   add     a                   // ignore msb during compare
 426+ 65BD 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 427+ 65BF
 428+ 65BF                                  // loop back until last byte msb is found set
 429+ 65BF                                  // that bit marks the ending char of this word
 430+ 65BF 30 E6                            jr      nc, Find_ThisWord
 431+ 65C1
 432+ 65C1                                  // match found !
 433+ 65C1 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 434+ 65C4 19                                   add     hl, de
 435+ 65C5 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 436+ 65C6 08                                   ex      af, af'             // retrieve NFA byte (!)
 437+ 65C7 5F                                   ld      e, a
 438+ 65C8 16 00                                ld      d, 0
 439+ 65CA
 440+ 65CA
 441+ 65CA 21 01 00                             ld      hl, 1
 442+ 65CD                                      psh2
 442+ 65CD D5          >                push    de
 442+ 65CE E5          >                push    hl
 442+ 65CF DD E9       >                jp      (ix)
 443+ 65D1
 444+ 65D1              Find_DidntMatch: // didn't match (*)
 445+ 65D1 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 446+ 65D3
 447+ 65D3              Find_DifferentLenght:
 448+ 65D3                              // consume chars until the end of the word
 449+ 65D3                              // that is last byte msb is found set
 450+ 65D3 13                               inc     de
 451+ 65D4 1A                               ld      a, (de)
 452+ 65D5 87                               add     a, a
 453+ 65D6 30 FB                        jr      nc, Find_DifferentLenght
 454+ 65D8
 455+ 65D8              Find_WordEnd:   // word-end  found (**)
 456+ 65D8                              // take LFA and use it
 457+ 65D8 13                           inc     de
 458+ 65D9 EB                           ex      de, hl
 459+ 65DA 5E                           ld      e, (hl)
 460+ 65DB 23                           inc     hl
 461+ 65DC 56                           ld      d, (hl)
 462+ 65DD 7A                           ld      a, d
 463+ 65DE B3                           or      e
 464+ 65DF
 465+ 65DF                          // loop until end of vocabulary
 466+ 65DF 20 BC                    jr      nz, Find_VocabularyLoop
 467+ 65E1
 468+ 65E1 E1                       pop     hl              // with this, it leaves addr unchanged
 469+ 65E2 21 00 00                 ld      hl, FALSE_FLAG
 470+ 65E5
 471+ 65E5                          psh1
 471+ 65E5 E5          >                push    hl
 471+ 65E6 DD E9       >                jp      (ix)
 472+ 65E8
 473+ 65E8              //  ______________________________________________________________________
 474+ 65E8              //
 475+ 65E8              // enclose      a c -- a  n1 n2 n3
 476+ 65E8              // starting from a, using delimiter c, determines the offsets:
 477+ 65E8              //   n1   the first character non-delimiter
 478+ 65E8              //   n2   the first delimiter after the text
 479+ 65E8              //   n3   the first character non enclosed.
 480+ 65E8              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 481+ 65E8              // an uncoditional delimiter.
 482+ 65E8              // Examples:
 483+ 65E8              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 484+ 65E8              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 485+ 65E8              // iii:	c  c  'nul'          -- 2  3  2
 486+ 65E8                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 486+ 65E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 486+ 65E8             >
 486+ 65E8             >                // dummy db directives used to calculate length of namec
 486+ 65E8 45 4E 43 4C >                db      "ENCLOSE"
 486+ 65EC 4F 53 45    >
 486+ 65EF             >len_NFA         defl    $ - temp_NFA
 486+ 65EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 486+ 65E8             >
 486+ 65E8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 486+ 65E9 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 486+ 65ED 4F 53 45    >
 486+ 65F0             >                org     $-1                 // alter last byte of Name just above to set
 486+ 65EF C5          >                db      {b $} | END_BIT     // msb as name end
 486+ 65F0             >
 486+ 65F0 91 65       >                dw      last_NFA            // Link to previous definition Name
 486+ 65F2             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 486+ 65F2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 486+ 65F2             >                else
 486+ 65F2 F4 65       >                dw      $ + 2   ; ok        // is pointed by CFA
 486+ 65F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 486+ 65F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 486+ 65F4             >
 486+ 65F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 487+ 65F4 D1                           pop     de                  //  e has the character
 488+ 65F5 E1                           pop     hl                  // hl has the string address
 489+ 65F6 E5                           push    hl
 490+ 65F7 7B                           ld      a, e
 491+ 65F8 11 FF FF                     ld      de, -1              // let's start from -1
 492+ 65FB 2B                           dec     hl
 493+ 65FC              Enclose_NonDelimiter:
 494+ 65FC                              // find first non delimiter
 495+ 65FC 23                               inc     hl
 496+ 65FD 13                               inc     de
 497+ 65FE BE                               cp      (hl)
 498+ 65FF 28 FB                        jr      z, Enclose_NonDelimiter
 499+ 6601 D5                           push    de
 500+ 6602
 501+ 6602 C5                           push    bc                  // save Instruction Pointer
 502+ 6603
 503+ 6603 4F                           ld      c, a                // save char
 504+ 6604 7E                           ld      a, (hl)
 505+ 6605 A7                           and     a                   // stop if 0x00
 506+ 6606 20 07                        jr      nz, Enclose_NextChar
 507+ 6608
 508+ 6608                              /// case iii. no more character in string
 509+ 6608 C1                               pop     bc                  // restore Instruction Pointer
 510+ 6609 13                               inc     de
 511+ 660A D5                               push    de
 512+ 660B 1B                               dec     de
 513+ 660C D5                               push    de
 514+ 660D                                  next
 514+ 660D DD E9       >                jp      (ix)
 515+ 660F              Enclose_NextChar:
 516+ 660F 79                               ld      a, c
 517+ 6610 23                               inc     hl
 518+ 6611 13                               inc     de
 519+ 6612 BE                               cp      (hl)
 520+ 6613 20 06                            jr      nz, Enclose_NonSeparator
 521+ 6615
 522+ 6615                                      // case i. first non enclosed
 523+ 6615 C1                                   pop     bc                  // restore Instruction Pointer
 524+ 6616 D5                                   push    de
 525+ 6617 13                                   inc     de
 526+ 6618 D5                                   push    de
 527+ 6619                                      next
 527+ 6619 DD E9       >                jp      (ix)
 528+ 661B              Enclose_NonSeparator:
 529+ 661B 7E                               ld      a, (hl)
 530+ 661C A7                               and     a
 531+ 661D 20 F0                        jr      nz, Enclose_NextChar
 532+ 661F
 533+ 661F                              // case ii. separator & terminator
 534+ 661F C1                           pop     bc                  // restore Instruction Pointer
 535+ 6620 D5                           push    de
 536+ 6621 D5                           push    de
 537+ 6622                              next
 537+ 6622 DD E9       >                jp      (ix)
 538+ 6624
 539+ 6624              //  ______________________________________________________________________
 540+ 6624              //
 541+ 6624              // (map)        a2 a1 n c1 -- c2
 542+ 6624              // translate character c using mapping string a2 and a2
 543+ 6624              // c2 = c2 if it is not translated. n is the length of bot a1 and a2.
 544+ 6624                              New_Def C_MAP, "(MAP)", is_code, is_normal
 544+ 6624             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 544+ 6624             >
 544+ 6624             >                // dummy db directives used to calculate length of namec
 544+ 6624 28 4D 41 50 >                db      "(MAP)"
 544+ 6628 29          >
 544+ 6629             >len_NFA         defl    $ - temp_NFA
 544+ 6629             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 544+ 6624             >
 544+ 6624 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 544+ 6625 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 544+ 6629 29          >
 544+ 662A             >                org     $-1                 // alter last byte of Name just above to set
 544+ 6629 A9          >                db      {b $} | END_BIT     // msb as name end
 544+ 662A             >
 544+ 662A E8 65       >                dw      last_NFA            // Link to previous definition Name
 544+ 662C             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 544+ 662C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 544+ 662C             >                else
 544+ 662C 2E 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 544+ 662E             >                endif           ; ok        // for other definitions it "points" the correct handler
 544+ 662E             >                // Use of "; ok" to suppress "warning[fwdref]"
 544+ 662E             >
 544+ 662E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 545+ 662E D9                           exx
 546+ 662F E1                           pop     hl
 547+ 6630 7D                           ld      a, l
 548+ 6631 C1                           pop     bc
 549+ 6632 E1                           pop     hl
 550+ 6633 50                           ld      d, b
 551+ 6634 59                           ld      e, c
 552+ 6635 ED B1                        cpir
 553+ 6637 E1                           pop     hl
 554+ 6638 20 05                        jr      nz, C_Map_Then
 554+ 663A
 555+ 663A 19                               add     hl, de
 556+ 663B 2B                               dec     hl
 557+ 663C ED 42                            sbc     hl, bc
 558+ 663E 7E                               ld      a, (hl)
 559+ 663F              C_Map_Then:
 560+ 663F 6F                           ld      l, a
 561+ 6640 26 00                        ld      h, 0
 562+ 6642 E5                           push    hl
 563+ 6643 D9                           exx
 564+ 6644                              next
 564+ 6644 DD E9       >                jp      (ix)
 565+ 6646
 566+ 6646              //  ______________________________________________________________________
 567+ 6646              //
 568+ 6646              // (compare)    a1 a2 n -- b
 569+ 6646              // this word performs a lexicographic compare of n bytes of text at address a1
 570+ 6646              // with n bytes of text at address a2. It returns numeric a value:
 571+ 6646              //  0 : if strings are equal
 572+ 6646              // +1 : if string at a1 greater than string at a2
 573+ 6646              // -1 : if string at a1 less than string at a2
 574+ 6646              // strings can be 256 bytes in length at most.
 575+ 6646                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 575+ 6646             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ 6646             >
 575+ 6646             >                // dummy db directives used to calculate length of namec
 575+ 6646 28 43 4F 4D >                db      "(COMPARE)"
 575+ 664A 50 41 52 45 >
 575+ 664E 29          >
 575+ 664F             >len_NFA         defl    $ - temp_NFA
 575+ 664F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ 6646             >
 575+ 6646 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ 6647 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 575+ 664B 50 41 52 45 >
 575+ 664F 29          >
 575+ 6650             >                org     $-1                 // alter last byte of Name just above to set
 575+ 664F A9          >                db      {b $} | END_BIT     // msb as name end
 575+ 6650             >
 575+ 6650 24 66       >                dw      last_NFA            // Link to previous definition Name
 575+ 6652             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 6652 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 575+ 6652             >                else
 575+ 6652 54 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 575+ 6654             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 6654             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 6654             >
 575+ 6654             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 6654 E1                           pop     hl                  // Number of bytes
 577+ 6655 7D                           ld      a, l
 578+ 6656 E1                           pop     hl                  // hl points string a2
 579+ 6657 D1                           pop     de                  // hl points string a1
 580+ 6658 C5                           push    bc                  // Instruction pointer on stack
 581+ 6659 47                           ld      b, a
 582+ 665A              C_Compare_Loop:
 583+ 665A 7E                               ld      a, (hl)
 584+ 665B CD 4F 65                         call    Case_Sensitive
 585+ 665E 4F                               ld      c, a
 586+ 665F 1A                               ld      a, (de)
 587+ 6660 CD 4F 65                         call    Case_Sensitive
 588+ 6663 B9                               cp      c
 589+ 6664 13                               inc     de
 590+ 6665 23                               inc     hl
 591+ 6666 28 0E                            jr      z, C_Compare_Equal
 592+ 6668 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 593+ 666A 21 01 00                                 ld      hl, 1               // a1 gt a2
 594+ 666D 18 03                                jr      C_Compare_Then      // Else
 595+ 666F              C_Compare_NotLessThan:
 596+ 666F 21 FF FF                                 ld      hl, -1              // a1 lt a2
 597+ 6672              C_Compare_Then:                                 // Endif
 598+ 6672 C1                                   pop     bc              // restore Instruction Pointer
 599+ 6673
 600+ 6673                                      psh1
 600+ 6673 E5          >                push    hl
 600+ 6674 DD E9       >                jp      (ix)
 601+ 6676
 602+ 6676              C_Compare_Equal:
 603+ 6676 10 E2                        djnz    C_Compare_Loop
 604+ 6678 21 00 00                     ld      hl, 0               // a1 eq a2
 605+ 667B C1                           pop     bc                  // restore Instruction Pointer
 606+ 667C
 607+ 667C                              psh1
 607+ 667C E5          >                push    hl
 607+ 667D DD E9       >                jp      (ix)
 608+ 667F
 609+ 667F              //  ______________________________________________________________________
 610+ 667F              //
 611+ 667F              // emitc        c --
 612+ 667F              // low level emit, calls ROM routine at #10 to send a character to
 613+ 667F              // the the current channel (see SELECT to change stream-channel)
 614+ 667F                              New_Def EMITC, "EMITC", is_code, is_normal
 614+ 667F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ 667F             >
 614+ 667F             >                // dummy db directives used to calculate length of namec
 614+ 667F 45 4D 49 54 >                db      "EMITC"
 614+ 6683 43          >
 614+ 6684             >len_NFA         defl    $ - temp_NFA
 614+ 6684             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ 667F             >
 614+ 667F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ 6680 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 614+ 6684 43          >
 614+ 6685             >                org     $-1                 // alter last byte of Name just above to set
 614+ 6684 C3          >                db      {b $} | END_BIT     // msb as name end
 614+ 6685             >
 614+ 6685 46 66       >                dw      last_NFA            // Link to previous definition Name
 614+ 6687             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 6687 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 614+ 6687             >                else
 614+ 6687 89 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 614+ 6689             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 6689             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 6689             >
 614+ 6689             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 6689 E1                           pop     hl
 616+ 668A 7D                           ld      a, l
 617+ 668B              Emitc_Ptr:
 618+ 668B C5                           push    bc
 619+ 668C DD E5                        push    ix
 620+ 668E D7                           rst     $10
 621+ 668F DD E1                        pop     ix
 622+ 6691 C1                           pop     bc
 623+ 6692 3E FF                        ld      a, 255            // max possible
 624+ 6694 32 8C 5C                     ld      (SCR_CT), a
 625+ 6697
 626+ 6697                              next
 626+ 6697 DD E9       >                jp      (ix)
 627+ 6699
 628+ 6699              Emitc_Vec:
 629+ 6699 DE 66                        dw      C_Emit_Printable  // comma
 630+ 669B E4 66                        dw      C_Emit_Bel        // bel
 631+ 669D DE 66                        dw      C_Emit_Printable  // bs
 632+ 669F F9 66                        dw      C_Emit_Tab        // tab
 633+ 66A1 DE 66                        dw      C_Emit_Printable  // cr
 634+ 66A3 FF 66                        dw      C_Emit_NL         // lf (unix newline)
 635+ 66A5 DE 66                        dw      C_Emit_Printable  // blank
 636+ 66A7 DE 66                        dw      C_Emit_Printable  // blank
 637+ 66A9
 638+ 66A9              Emit_Selector_Start:
 639+ 66A9 06                           db      $06                 // comma
 640+ 66AA 07                           db      $07                 // bel
 641+ 66AB 08                           db      $08                 // bs
 642+ 66AC 09                           db      $09                 // tab
 643+ 66AD 0D                           db      $0D                 // cr
 644+ 66AE 0A                           db      $0A                 // lf (unix newline)
 645+ 66AF 20                           db      $20
 646+ 66B0              Emit_Selector_End:
 647+ 66B0 20                           db      $20
 648+ 66B1
 649+ 66B1              //  ______________________________________________________________________
 650+ 66B1              //
 651+ 66B1              // (?emit)      c1 -- c2 | c1
 652+ 66B1              // decode a character to be sent via EMIT
 653+ 66B1              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 654+ 66B1              // the routine should resolve anything and convert the character anyway.
 655+ 66B1                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 655+ 66B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 655+ 66B1             >
 655+ 66B1             >                // dummy db directives used to calculate length of namec
 655+ 66B1 28 3F 45 4D >                db      "(?EMIT)"
 655+ 66B5 49 54 29    >
 655+ 66B8             >len_NFA         defl    $ - temp_NFA
 655+ 66B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 655+ 66B1             >
 655+ 66B1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 655+ 66B2 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 655+ 66B6 49 54 29    >
 655+ 66B9             >                org     $-1                 // alter last byte of Name just above to set
 655+ 66B8 A9          >                db      {b $} | END_BIT     // msb as name end
 655+ 66B9             >
 655+ 66B9 7F 66       >                dw      last_NFA            // Link to previous definition Name
 655+ 66BB             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 655+ 66BB ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 655+ 66BB             >                else
 655+ 66BB BD 66       >                dw      $ + 2   ; ok        // is pointed by CFA
 655+ 66BD             >                endif           ; ok        // for other definitions it "points" the correct handler
 655+ 66BD             >                // Use of "; ok" to suppress "warning[fwdref]"
 655+ 66BD             >
 655+ 66BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 656+ 66BD D1                           pop     de
 657+ 66BE 7B                           ld      a, e                //  de has c1
 658+ 66BF E6 7F                        and     $7F                 // 7-bit ascii only
 659+ 66C1 C5                           push    bc                  // save Instruction Pointer
 660+ 66C2 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 661+ 66C5 21 B0 66                     ld      hl, Emit_Selector_End
 662+ 66C8 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 663+ 66CA 20 0B                        jr      nz, C_Emit_Not_Found
 664+ 66CC                                  // Found then decode it
 665+ 66CC 21 99 66                         ld      hl, Emitc_Vec
 666+ 66CF 09                               add     hl, bc
 667+ 66D0 09                               add     hl, bc
 668+ 66D1 5E                               ld      e, (hl)
 669+ 66D2 23                               inc     hl
 670+ 66D3 56                               ld      d, (hl)
 671+ 66D4 EB                               ex      de, hl
 672+ 66D5 C1                               pop     bc                  // restore Instruction Pointer
 673+ 66D6 E9                               jp      (hl)                // one of the following labels
 674+ 66D7              C_Emit_Not_Found:
 675+ 66D7 C1                           pop     bc                  // restore Instruction Pointer
 676+ 66D8 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 677+ 66DA 30 02                        jr      nc, C_Emit_Printable
 678+ 66DC 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 679+ 66DE              C_Emit_Printable:
 680+ 66DE 6F                           ld      l, a
 681+ 66DF 26 00                        ld      h, 0
 682+ 66E1
 683+ 66E1                              psh1
 683+ 66E1 E5          >                push    hl
 683+ 66E2 DD E9       >                jp      (ix)
 684+ 66E4
 685+ 66E4              C_Emit_Bel:
 686+ 66E4 C5                           push    bc                  // save Instruction Pointer
 687+ 66E5 11 00 01                     ld      de, $0100
 688+ 66E8 21 00 02                     ld      hl, $0200
 689+ 66EB DD E5                        push    ix                  // save Next Pointer
 690+ 66ED CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 691+ 66F0 DD E1                        pop     ix                  // restore Next Pointer
 692+ 66F2 C1                           pop     bc                  // restore Instruction Pointer
 693+ 66F3 21 00 00                     ld      hl, NUL_CHAR
 694+ 66F6
 695+ 66F6                              psh1
 695+ 66F6 E5          >                push    hl
 695+ 66F7 DD E9       >                jp      (ix)
 696+ 66F9
 697+ 66F9 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 698+ 66FC
 699+ 66FC                              psh1
 699+ 66FC E5          >                push    hl
 699+ 66FD DD E9       >                jp      (ix)
 700+ 66FF
 701+ 66FF 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 702+ 6702
 703+ 6702                              psh1
 703+ 6702 E5          >                push    hl
 703+ 6703 DD E9       >                jp      (ix)
 704+ 6705
 705+ 6705              //  ______________________________________________________________________
 706+ 6705
 707+ 6705              Key_Table:
 708+ 6705 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 709+ 6706 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 710+ 6707 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 711+ 6708 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 712+ 6709 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 713+ 670A C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 714+ 670B C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 715+ 670C AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 716+ 670D C7                           db      $C7                 //  8: <=
 717+ 670E C8                           db      $C8                 //  9: >=
 718+ 670F C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 719+ 6710              Key_MapTo:
 720+ 6710 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 721+ 6711 20                           db      $20                 //  9: not used
 722+ 6712 20                           db      $20                 //  8: not used
 723+ 6713 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 724+ 6714 5D                           db      $5D                 //  6: SYMBOL+U : ]
 725+ 6715 5B                           db      $5B                 //  5: SYMBOL+Y : [
 726+ 6716 7D                           db      $7D                 //  4: SYMBOL+G : }
 727+ 6717 7B                           db      $7B                 //  3: SYMBOL+F : {
 728+ 6718 5C                           db      $5C                 //  2: SYMBOl+D : //
 729+ 6719 7C                           db      $7C                 //  1: SYMBOL+S : |
 730+ 671A 7E                           db      $7E                 //  0: SYMBOL+A : ~
 731+ 671B
 732+ 671B              //  ______________________________________________________________________
 733+ 671B              //
 734+ 671B              // key          -- c
 735+ 671B              // wait for a keypress
 736+ 671B              // This definition need Standard ROM Interrupt to be served
 737+ 671B
 738+ 671B                              New_Def KEY, "KEY", is_code, is_normal
 738+ 671B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 738+ 671B             >
 738+ 671B             >                // dummy db directives used to calculate length of namec
 738+ 671B 4B 45 59    >                db      "KEY"
 738+ 671E             >len_NFA         defl    $ - temp_NFA
 738+ 671E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 738+ 671B             >
 738+ 671B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 738+ 671C 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 738+ 671F             >                org     $-1                 // alter last byte of Name just above to set
 738+ 671E D9          >                db      {b $} | END_BIT     // msb as name end
 738+ 671F             >
 738+ 671F B1 66       >                dw      last_NFA            // Link to previous definition Name
 738+ 6721             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 738+ 6721 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 738+ 6721             >                else
 738+ 6721 23 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 738+ 6723             >                endif           ; ok        // for other definitions it "points" the correct handler
 738+ 6723             >                // Use of "; ok" to suppress "warning[fwdref]"
 738+ 6723             >
 738+ 6723             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 739+ 6723
 740+ 6723 C5                           push    bc                  // save Instruction Pointer
 741+ 6724 DD E5                        push    ix
 742+ 6726
 743+ 6726 ED 73 2C 64                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 744+ 672A 31 FE 63                     ld      sp, Cold_origin - 2 // maybe $4000 in the future...
 745+ 672D FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 746+ 6731
 747+ 6731              Key_Wait:
 748+ 6731 76                               halt
 749+ 6732 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 750+ 6734 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 751+ 6737
 752+ 6737                                  // software-flash: flips face every 320 ms
 753+ 6737 3E 20                            ld      a, $20              // Timing based
 754+ 6739 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 755+ 673C
 756+ 673C 3A 26 64                         ld      a, (Block_Face)     // see origin.asm
 757+ 673F 20 0C                            jr      nz, Key_Cursor
 758+ 6741 3A 27 64                             ld      a, (Half_Face)      // see origin.asm
 759+ 6744 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 760+ 6748 28 03                                jr      z, Key_Cursor
 761+ 674A 3A 28 64                                 ld      a, (Underscore_Face) // see origin
 762+ 674D              Key_Cursor:
 763+ 674D D7                               rst     $10
 764+ 674E 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 765+ 6750 D7                               rst     $10
 766+ 6751
 767+ 6751 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 768+ 6755 28 DA                        jr      z, Key_Wait
 769+ 6757
 770+ 6757 76                           halt    // this is to sync flashing cursor.
 771+ 6758
 772+ 6758 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 773+ 675A D7                           rst     $10
 774+ 675B 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 775+ 675D D7                           rst     $10
 776+ 675E 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 777+ 6761
 778+ 6761                              // decode character from above table
 779+ 6761 21 05 67                     ld      hl, Key_Table
 780+ 6764 01 0B 00                     ld      bc, $000B
 781+ 6767 ED B1                        cpir
 782+ 6769 20 05                        jr      nz, Key_DontMap
 783+ 676B 21 10 67                         ld      hl, Key_MapTo
 784+ 676E 09                               add     hl, bc
 785+ 676F 7E                               ld      a, (hl)
 786+ 6770 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 787+ 6772 20 09                        jr      nz, Key_NoCapsLock
 788+ 6774 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 789+ 6777 7E                               ld      a, (hl)
 790+ 6778 EE 08                            xor     $08
 791+ 677A 77                               ld      (hl), a
 792+ 677B 3E 00                            ld      a, NUL_CHAR
 793+ 677D 6F           Key_NoCapsLock: ld      l, a
 794+ 677E 26 00                        ld      h, 0                // Prepare TOS
 795+ 6780
 796+ 6780 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 797+ 6783 1F                           rra
 798+ 6784 1F                           rra
 799+ 6785 1F                           rra
 800+ 6786 F6 18                        or      $18                 // quick'n'dirty click
 801+ 6788 D3 FE                        out     ($fe), a
 802+ 678A 06 00                        ld      b, 0
 803+ 678C 10 FE                        djnz    $                   // wait loop
 804+ 678E EE 18                        xor     $18
 805+ 6790 D3 FE                        out     ($fe), a
 806+ 6792
 807+ 6792 ED 7B 2C 64                  ld      sp, (SP_Saved)
 808+ 6796
 809+ 6796 DD E1                        pop     ix
 810+ 6798 C1                           pop     bc                  // Restore Instruction Pointer
 811+ 6799
 812+ 6799                              psh1
 812+ 6799 E5          >                push    hl
 812+ 679A DD E9       >                jp      (ix)
 813+ 679C
 814+ 679C              //  ______________________________________________________________________
 815+ 679C              //
 816+ 679C              // ?terminal    -- FALSE | TRUE
 817+ 679C              // test for BREAK keypress
 818+ 679C                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 818+ 679C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 818+ 679C             >
 818+ 679C             >                // dummy db directives used to calculate length of namec
 818+ 679C 3F 54 45 52 >                db      "?TERMINAL"
 818+ 67A0 4D 49 4E 41 >
 818+ 67A4 4C          >
 818+ 67A5             >len_NFA         defl    $ - temp_NFA
 818+ 67A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 818+ 679C             >
 818+ 679C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 818+ 679D 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 818+ 67A1 4D 49 4E 41 >
 818+ 67A5 4C          >
 818+ 67A6             >                org     $-1                 // alter last byte of Name just above to set
 818+ 67A5 CC          >                db      {b $} | END_BIT     // msb as name end
 818+ 67A6             >
 818+ 67A6 1B 67       >                dw      last_NFA            // Link to previous definition Name
 818+ 67A8             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 818+ 67A8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 818+ 67A8             >                else
 818+ 67A8 AA 67       >                dw      $ + 2   ; ok        // is pointed by CFA
 818+ 67AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 818+ 67AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 818+ 67AA             >
 818+ 67AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 819+ 67AA 21 00 00                     ld      hl, 0
 820+ 67AD ED 73 2C 64                  ld      (SP_Saved), sp
 821+ 67B1 31 FE 63                     ld      sp, Cold_origin - 2
 822+ 67B4 CD 54 1F                     call    $1F54
 823+ 67B7 ED 7B 2C 64                  ld      sp, (SP_Saved)
 824+ 67BB
 825+ 67BB 38 01                        jr      c, QTerminal_NoBreak
 826+ 67BD 2C                               inc     l                  // quick TRUE_FLAG
 827+ 67BE              QTerminal_NoBreak:
 828+ 67BE
 829+ 67BE                              psh1
 829+ 67BE E5          >                push    hl
 829+ 67BF DD E9       >                jp      (ix)
 830+ 67C1
 831+ 67C1
 832+ 67C1              //  ______________________________________________________________________
 833+ 67C1              //
 834+ 67C1              // ZX Spectrum Next - Low Level disk primitives.
 835+ 67C1              // this include is "here" for backward compatibility
 836+ 67C1
 837+ 67C1                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
   1++67C1              //  ______________________________________________________________________
   2++67C1              //
   3++67C1              //  next-opt.asm
   4++67C1              //
   5++67C1              //  ZX Spectrum Next - peculiar definitions
   6++67C1              //  ______________________________________________________________________
   7++67C1
   8++67C1              //  ______________________________________________________________________
   9++67C1              //
  10++67C1              // f_seek       d u -- f
  11++67C1              // Seek to position d in file-handle u.
  12++67C1              // Return a false-flag 0 on success, True flag on error
  13++67C1                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++67C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++67C1             >
  13++67C1             >                // dummy db directives used to calculate length of namec
  13++67C1 46 5F 53 45 >                db      "F_SEEK"
  13++67C5 45 4B       >
  13++67C7             >len_NFA         defl    $ - temp_NFA
  13++67C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++67C1             >
  13++67C1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++67C2 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++67C6 45 4B       >
  13++67C8             >                org     $-1                 // alter last byte of Name just above to set
  13++67C7 CB          >                db      {b $} | END_BIT     // msb as name end
  13++67C8             >
  13++67C8 9C 67       >                dw      last_NFA            // Link to previous definition Name
  13++67CA             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++67CA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  13++67CA             >                else
  13++67CA CC 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  13++67CC             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++67CC             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++67CC             >
  13++67CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++67CC E1                           pop     hl                  // file-handle
  15++67CD 7D                           ld      a, l                // file-handle
  16++67CE 60                           ld      h, b                // save Intruction Pointer
  17++67CF 69                           ld      l, c
  18++67D0 C1                           pop     bc                  // bc has high-word of d
  19++67D1 D1                           pop     de
  20++67D2 DD E5                        push    ix
  21++67D4 E5                           push    hl                  // save Instruction Pointer
  22++67D5 DD 21 00 00                  ld      ix, 0
  23++67D9 CF                           rst     $08
  24++67DA 9F                           db      $9F
  25++67DB C1                           pop     bc                  // restore Instruction Pointer
  26++67DC DD E1                        pop     ix
  27++67DE ED 62                        sbc     hl, hl              // to get 0 or -1
  28++67E0
  29++67E0                              psh1
  29++67E0 E5          >                push    hl
  29++67E1 DD E9       >                jp      (ix)
  30++67E3
  31++67E3              //  ______________________________________________________________________
  32++67E3              //
  33++67E3              // f_fgetpos    u -- d f
  34++67E3              // Seek to position d in file-handle u.
  35++67E3              // Return a false-flag 0 on success, True flag on error
  36++67E3                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  36++67E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  36++67E3             >
  36++67E3             >                // dummy db directives used to calculate length of namec
  36++67E3 46 5F 46 47 >                db      "F_FGETPOS"
  36++67E7 45 54 50 4F >
  36++67EB 53          >
  36++67EC             >len_NFA         defl    $ - temp_NFA
  36++67EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  36++67E3             >
  36++67E3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  36++67E4 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  36++67E8 45 54 50 4F >
  36++67EC 53          >
  36++67ED             >                org     $-1                 // alter last byte of Name just above to set
  36++67EC D3          >                db      {b $} | END_BIT     // msb as name end
  36++67ED             >
  36++67ED C1 67       >                dw      last_NFA            // Link to previous definition Name
  36++67EF             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  36++67EF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  36++67EF             >                else
  36++67EF F1 67       >                dw      $ + 2   ; ok        // is pointed by CFA
  36++67F1             >                endif           ; ok        // for other definitions it "points" the correct handler
  36++67F1             >                // Use of "; ok" to suppress "warning[fwdref]"
  36++67F1             >
  36++67F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  37++67F1 E1                           pop     hl
  38++67F2 7D                           ld      a, l                // file-handle
  39++67F3 DD E5                        push    ix
  40++67F5 C5                           push    bc
  41++67F6 CF                           rst     $08
  42++67F7 A0                           db      $A0
  43++67F8 E1                           pop     hl                  // restore Instruction Pointer
  44++67F9 DD E1                        pop     ix
  45++67FB D5                           push    de
  46++67FC C5                           push    bc
  47++67FD 44                           ld      b, h                // restore Instruction Pointer
  48++67FE 4D                           ld      c, l
  49++67FF ED 62                        sbc     hl, hl
  50++6801
  51++6801                              psh1
  51++6801 E5          >                push    hl
  51++6802 DD E9       >                jp      (ix)
  52++6804
  53++6804              //  ______________________________________________________________________
  54++6804              //
  55++6804              // f_read       a b u -- n f
  56++6804              // Read b bytes from file-handle u to address a
  57++6804              // Return the actual number n of bytes read
  58++6804              // Return 0 on success, True flag on error
  59++6804                              New_Def F_READ, "F_READ", is_code, is_normal
  59++6804             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59++6804             >
  59++6804             >                // dummy db directives used to calculate length of namec
  59++6804 46 5F 52 45 >                db      "F_READ"
  59++6808 41 44       >
  59++680A             >len_NFA         defl    $ - temp_NFA
  59++680A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59++6804             >
  59++6804 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59++6805 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  59++6809 41 44       >
  59++680B             >                org     $-1                 // alter last byte of Name just above to set
  59++680A C4          >                db      {b $} | END_BIT     // msb as name end
  59++680B             >
  59++680B E3 67       >                dw      last_NFA            // Link to previous definition Name
  59++680D             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  59++680D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  59++680D             >                else
  59++680D 0F 68       >                dw      $ + 2   ; ok        // is pointed by CFA
  59++680F             >                endif           ; ok        // for other definitions it "points" the correct handler
  59++680F             >                // Use of "; ok" to suppress "warning[fwdref]"
  59++680F             >
  59++680F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60++680F
  61++680F 50                           ld      d, b
  62++6810 59                           ld      e, c
  63++6811 E1                           pop     hl
  64++6812 7D                           ld      a, l                // file-handle
  65++6813 C1                           pop     bc                  // bc has bytes to read
  66++6814 DD E3                        ex      (sp), ix            // ix has address
  67++6816 D5                           push    de                  // Save Instruction pointer
  68++6817 CF                           rst     $08
  69++6818 9D                           db      $9D
  70++6819 C1                           pop     bc                  // Restore Instruction pointer
  71++681A DD E1                        pop     ix                  // Restore ix
  72++681C D5                           push    de                  // bytes written
  73++681D ED 62                        sbc     hl, hl
  74++681F
  75++681F                              psh1
  75++681F E5          >                push    hl
  75++6820 DD E9       >                jp      (ix)
  76++6822
  77++6822              //  ______________________________________________________________________
  78++6822              //
  79++6822              // f_write      a b u -- n f
  80++6822              // Write bytes currently stored at address a to file-handle u.
  81++6822              // Return the actual n bytes written and 0 on success, True flag on error.
  82++6822                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
  82++6822             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82++6822             >
  82++6822             >                // dummy db directives used to calculate length of namec
  82++6822 46 5F 57 52 >                db      "F_WRITE"
  82++6826 49 54 45    >
  82++6829             >len_NFA         defl    $ - temp_NFA
  82++6829             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82++6822             >
  82++6822 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82++6823 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
  82++6827 49 54 45    >
  82++682A             >                org     $-1                 // alter last byte of Name just above to set
  82++6829 C5          >                db      {b $} | END_BIT     // msb as name end
  82++682A             >
  82++682A 04 68       >                dw      last_NFA            // Link to previous definition Name
  82++682C             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  82++682C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  82++682C             >                else
  82++682C 2E 68       >                dw      $ + 2   ; ok        // is pointed by CFA
  82++682E             >                endif           ; ok        // for other definitions it "points" the correct handler
  82++682E             >                // Use of "; ok" to suppress "warning[fwdref]"
  82++682E             >
  82++682E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83++682E
  84++682E 50                           ld      d, b
  85++682F 59                           ld      e, c
  86++6830 E1                           pop     hl
  87++6831 7D                           ld      a, l                // file-handle
  88++6832 C1                           pop     bc                  // bc has bytes to read
  89++6833 DD E3                        ex      (sp), ix            // ix has address
  90++6835 D5                           push    de                  // Save Instruction pointer
  91++6836 CF                           rst     $08
  92++6837 9E                           db      $9E
  93++6838 C1                           pop     bc                  // Restore Instruction pointer
  94++6839 DD E1                        pop     ix                  // Restore ix
  95++683B D5                           push    de                  // bytes written
  96++683C ED 62                        sbc     hl, hl
  97++683E
  98++683E                              psh1
  98++683E E5          >                push    hl
  98++683F DD E9       >                jp      (ix)
  99++6841
 100++6841              //  ______________________________________________________________________
 101++6841              //
 102++6841              // f_close      u -- f
 103++6841              // Close file-handle u.
 104++6841              // Return 0 on success, True flag on error
 105++6841
 106++6841                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
 106++6841             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 106++6841             >
 106++6841             >                // dummy db directives used to calculate length of namec
 106++6841 46 5F 43 4C >                db      "F_CLOSE"
 106++6845 4F 53 45    >
 106++6848             >len_NFA         defl    $ - temp_NFA
 106++6848             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 106++6841             >
 106++6841 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 106++6842 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
 106++6846 4F 53 45    >
 106++6849             >                org     $-1                 // alter last byte of Name just above to set
 106++6848 C5          >                db      {b $} | END_BIT     // msb as name end
 106++6849             >
 106++6849 22 68       >                dw      last_NFA            // Link to previous definition Name
 106++684B             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 106++684B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 106++684B             >                else
 106++684B 4D 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 106++684D             >                endif           ; ok        // for other definitions it "points" the correct handler
 106++684D             >                // Use of "; ok" to suppress "warning[fwdref]"
 106++684D             >
 106++684D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 107++684D
 108++684D E1                           pop     hl
 109++684E 7D                           ld      a, l                // file-handle
 110++684F DD E5                        push    ix
 111++6851 C5                           push    bc                  // Save Instruction pointer
 112++6852 CF                           rst     $08
 113++6853 9B                           db      $9B
 114++6854 C1                           pop     bc
 115++6855 DD E1                        pop     ix
 116++6857 ED 62                        sbc     hl, hl
 117++6859
 118++6859                              psh1
 118++6859 E5          >                push    hl
 118++685A DD E9       >                jp      (ix)
 119++685C
 120++685C              //  ______________________________________________________________________
 121++685C              //
 122++685C              // f_open       a1 a2 b -- u f
 123++685C              // open a file
 124++685C              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 125++685C              // a2 is address to an 8-byte header data used in some cases.
 126++685C              // b is access mode-byte, that is a combination of:
 127++685C              // any/all of:
 128++685C              //   esx_mode_read          $01 request read access
 129++685C              //   esx_mode_write         $02 request write access
 130++685C              //   esx_mode_use_header    $40 read/write +3DOS header
 131++685C              // plus one of:
 132++685C              //   esx_mode_open_exist    $00 only open existing file
 133++685C              //   esx_mode_open_creat    $08 open existing or create file
 134++685C              //   esx_mode_creat_noexist $04 create new file, error if exists
 135++685C              //   esx_mode_creat_trunc   $0c create new file, delete existing
 136++685C              // Return file-handle u and 0 on success, True flag on error
 137++685C                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 137++685C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137++685C             >
 137++685C             >                // dummy db directives used to calculate length of namec
 137++685C 46 5F 4F 50 >                db      "F_OPEN"
 137++6860 45 4E       >
 137++6862             >len_NFA         defl    $ - temp_NFA
 137++6862             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137++685C             >
 137++685C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137++685D 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 137++6861 45 4E       >
 137++6863             >                org     $-1                 // alter last byte of Name just above to set
 137++6862 CE          >                db      {b $} | END_BIT     // msb as name end
 137++6863             >
 137++6863 41 68       >                dw      last_NFA            // Link to previous definition Name
 137++6865             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137++6865 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 137++6865             >                else
 137++6865 67 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 137++6867             >                endif           ; ok        // for other definitions it "points" the correct handler
 137++6867             >                // Use of "; ok" to suppress "warning[fwdref]"
 137++6867             >
 137++6867             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138++6867 60                           ld      h, b                // Save Instruction pointer
 139++6868 69                           ld      l, c
 140++6869 C1                           pop     bc                  // file-mode
 141++686A 41                           ld      b, c                // file-mode
 142++686B D1                           pop     de                  // 8-bytes buffer if any
 143++686C DD E3                        ex      (sp), ix            // filespec nul-terminated
 144++686E E5                           push    hl                  // Save Instruction pointer
 145++686F 3E 2A                        ld      a, "*"
 146++6871 CF                           rst     $08
 147++6872 9A                           db      $9A
 148++6873 C1                           pop     bc
 149++6874 DD E1                        pop     ix
 150++6876 ED 62                        sbc     hl, hl
 151++6878 5F                           ld      e, a
 152++6879 16 00                        ld      d, 0
 153++687B
 154++687B
 155++687B                              psh2
 155++687B D5          >                push    de
 155++687C E5          >                push    hl
 155++687D DD E9       >                jp      (ix)
 156++687F
 157++687F              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 158++687F              //   \ FILENAME 1+ PAD 1 F_OPEN
 159++687F              //   \ DROP
 160++687F              //   \ F_CLOSE
 161++687F
 162++687F              //  ______________________________________________________________________
 163++687F              //
 164++687F              // f_sync      u -- f
 165++687F              // Close file-handle u.
 166++687F              // Return 0 on success, True flag on error
 167++687F
 168++687F                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
 168++687F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168++687F             >
 168++687F             >                // dummy db directives used to calculate length of namec
 168++687F 46 5F 53 59 >                db      "F_SYNC"
 168++6883 4E 43       >
 168++6885             >len_NFA         defl    $ - temp_NFA
 168++6885             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168++687F             >
 168++687F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168++6880 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
 168++6884 4E 43       >
 168++6886             >                org     $-1                 // alter last byte of Name just above to set
 168++6885 C3          >                db      {b $} | END_BIT     // msb as name end
 168++6886             >
 168++6886 5C 68       >                dw      last_NFA            // Link to previous definition Name
 168++6888             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 168++6888 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 168++6888             >                else
 168++6888 8A 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 168++688A             >                endif           ; ok        // for other definitions it "points" the correct handler
 168++688A             >                // Use of "; ok" to suppress "warning[fwdref]"
 168++688A             >
 168++688A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169++688A E1                           pop     hl
 170++688B 7D                           ld      a, l                // file-handle
 171++688C DD E5                        push    ix
 172++688E C5                           push    bc
 173++688F CF                           rst     $08
 174++6890 9C                           db      $9C
 175++6891 C1                           pop     bc
 176++6892 DD E1                        pop     ix
 177++6894 ED 62                        sbc     hl, hl
 178++6896
 179++6896                              psh1
 179++6896 E5          >                push    hl
 179++6897 DD E9       >                jp      (ix)
 180++6899
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt0.asm
 838+ 6899
 839+ 6899
 840+ 6899              //  ______________________________________________________________________
 841+ 6899              //
 842+ 6899              // cr           --
 843+ 6899              // send a CR via EMITC
 844+ 6899                              New_Def CR, "CR", is_code, is_normal
 844+ 6899             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 844+ 6899             >
 844+ 6899             >                // dummy db directives used to calculate length of namec
 844+ 6899 43 52       >                db      "CR"
 844+ 689B             >len_NFA         defl    $ - temp_NFA
 844+ 689B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 844+ 6899             >
 844+ 6899 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 844+ 689A 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 844+ 689C             >                org     $-1                 // alter last byte of Name just above to set
 844+ 689B D2          >                db      {b $} | END_BIT     // msb as name end
 844+ 689C             >
 844+ 689C 7F 68       >                dw      last_NFA            // Link to previous definition Name
 844+ 689E             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 844+ 689E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 844+ 689E             >                else
 844+ 689E A0 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 844+ 68A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 844+ 68A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 844+ 68A0             >
 844+ 68A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 845+ 68A0
 846+ 68A0 3E 0D                        ld      a, CR_CHAR
 847+ 68A2 C3 8B 66                     jp      Emitc_Ptr
 848+ 68A5
 849+ 68A5              //  ______________________________________________________________________
 850+ 68A5              //
 851+ 68A5              // cmove    a1 a2 u --
 852+ 68A5              // If u > 0, moves memory content starting at address a1 for n bytes long
 853+ 68A5              // storing then starting at address addr2.
 854+ 68A5              // The content of a1 is moved first. See CMOVE> also.
 855+ 68A5                              New_Def CMOVE, "CMOVE", is_code, is_normal
 855+ 68A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 855+ 68A5             >
 855+ 68A5             >                // dummy db directives used to calculate length of namec
 855+ 68A5 43 4D 4F 56 >                db      "CMOVE"
 855+ 68A9 45          >
 855+ 68AA             >len_NFA         defl    $ - temp_NFA
 855+ 68AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 855+ 68A5             >
 855+ 68A5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 855+ 68A6 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 855+ 68AA 45          >
 855+ 68AB             >                org     $-1                 // alter last byte of Name just above to set
 855+ 68AA C5          >                db      {b $} | END_BIT     // msb as name end
 855+ 68AB             >
 855+ 68AB 99 68       >                dw      last_NFA            // Link to previous definition Name
 855+ 68AD             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 855+ 68AD ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 855+ 68AD             >                else
 855+ 68AD AF 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 855+ 68AF             >                endif           ; ok        // for other definitions it "points" the correct handler
 855+ 68AF             >                // Use of "; ok" to suppress "warning[fwdref]"
 855+ 68AF             >
 855+ 68AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 856+ 68AF 60                           ld      h, b
 857+ 68B0 69                           ld      l, c
 858+ 68B1
 859+ 68B1 C1                           pop     bc                  // bc has counter
 860+ 68B2 D1                           pop     de                  // de now has dest
 861+ 68B3 E3                           ex      (sp), hl            // hl has source, save Instruction Pointer
 862+ 68B4 78                           ld      a, b
 863+ 68B5 B1                           or      c
 864+ 68B6 28 02                        jr      z, Cmove_NoMove
 865+ 68B8 ED B0                            ldir
 866+ 68BA              Cmove_NoMove:
 867+ 68BA C1                           pop     bc                  // Restore Instruction Pointer
 868+ 68BB
 869+ 68BB                              next
 869+ 68BB DD E9       >                jp      (ix)
 870+ 68BD
 871+ 68BD              //  ______________________________________________________________________
 872+ 68BD              //
 873+ 68BD              // cmove>    a1 a2 u --
 874+ 68BD              // If u > 0, moves memory content starting at address a1 for n bytes long
 875+ 68BD              // storing then starting at address addr2.
 876+ 68BD              // The content of a1 is moved last. See cmove.
 877+ 68BD                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 877+ 68BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 877+ 68BD             >
 877+ 68BD             >                // dummy db directives used to calculate length of namec
 877+ 68BD 43 4D 4F 56 >                db      "CMOVE>"
 877+ 68C1 45 3E       >
 877+ 68C3             >len_NFA         defl    $ - temp_NFA
 877+ 68C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 877+ 68BD             >
 877+ 68BD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 877+ 68BE 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 877+ 68C2 45 3E       >
 877+ 68C4             >                org     $-1                 // alter last byte of Name just above to set
 877+ 68C3 BE          >                db      {b $} | END_BIT     // msb as name end
 877+ 68C4             >
 877+ 68C4 A5 68       >                dw      last_NFA            // Link to previous definition Name
 877+ 68C6             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 877+ 68C6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 877+ 68C6             >                else
 877+ 68C6 C8 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 877+ 68C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 877+ 68C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 877+ 68C8             >
 877+ 68C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 878+ 68C8 60                           ld      h, b
 879+ 68C9 69                           ld      l, c
 880+ 68CA
 881+ 68CA C1                           pop     bc                  // bc has counter
 882+ 68CB D1                           pop     de                  // de has dest
 883+ 68CC E3                           ex      (sp), hl            // hl has source, save Instruction Pointer
 884+ 68CD 78                           ld      a, b
 885+ 68CE B1                           or      c
 886+ 68CF 28 08                        jr      z, CmoveV_NoMove
 887+ 68D1 EB                               ex      de, hl              // compute address to
 888+ 68D2 09                               add     hl, bc              // operate backward
 889+ 68D3 2B                               dec     hl
 890+ 68D4 EB                               ex      de, hl
 891+ 68D5 09                               add     hl, bc
 892+ 68D6 2B                               dec     hl
 893+ 68D7 ED B8                            lddr                        // backward
 894+ 68D9              CmoveV_NoMove:
 895+ 68D9 C1                           pop     bc                  // Restore Instruction Pointer
 896+ 68DA
 897+ 68DA                              next
 897+ 68DA DD E9       >                jp      (ix)
 898+ 68DC
 899+ 68DC              //  ______________________________________________________________________
 900+ 68DC              //
 901+ 68DC              // um*      u1 u2 -- ud
 902+ 68DC              // Unsigned multiplication
 903+ 68DC              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 904+ 68DC              // On the stack a double number is treated as two single numbers
 905+ 68DC              // where DE is on the top of the stack and HL is the second from top,
 906+ 68DC              // Instead, in 2VARIABLE a double number is stored as EDLH.
 907+ 68DC              // this definition could use "MUL" Z80N new op-code.
 908+ 68DC                              New_Def UM_MUL, "UM*", is_code, is_normal
 908+ 68DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 908+ 68DC             >
 908+ 68DC             >                // dummy db directives used to calculate length of namec
 908+ 68DC 55 4D 2A    >                db      "UM*"
 908+ 68DF             >len_NFA         defl    $ - temp_NFA
 908+ 68DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 908+ 68DC             >
 908+ 68DC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 908+ 68DD 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 908+ 68E0             >                org     $-1                 // alter last byte of Name just above to set
 908+ 68DF AA          >                db      {b $} | END_BIT     // msb as name end
 908+ 68E0             >
 908+ 68E0 BD 68       >                dw      last_NFA            // Link to previous definition Name
 908+ 68E2             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 908+ 68E2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 908+ 68E2             >                else
 908+ 68E2 E4 68       >                dw      $ + 2   ; ok        // is pointed by CFA
 908+ 68E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 908+ 68E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 908+ 68E4             >
 908+ 68E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 909+ 68E4 D1                           pop     de                    // de has u2 operand
 910+ 68E5 E1                           pop     hl                    // hl has u1 operand
 911+ 68E6 C5                           push    bc                    // Save Instruction Pointer
 912+ 68E7 44                           ld      b, h
 913+ 68E8 4D                           ld      c, l
 914+ 68E9 21 00 00                     ld      hl, 0
 915+ 68EC 3E 10                        ld      a, 16                   // 16 steps
 916+ 68EE              Um_Mul_Loop:
 917+ 68EE 29                               add     hl, hl                  // shift DEHL
 918+ 68EF CB 13                            rl      e                       // consuming one bit at a time
 919+ 68F1 CB 12                            rl      d
 920+ 68F3 30 04                            jr      nc, Um_Mul_NoCarry      // if msb of DEHL was set then
 921+ 68F5 09                                   add     hl, bc                  // add bc to hl and carry to de
 922+ 68F6 30 01                                jr      nc, Um_Mul_NoCarry      // this carry doesn't happen before de (u1) is consumed
 923+ 68F8 13                                       inc     de                      // transfer the carry to de
 924+ 68F9              Um_Mul_NoCarry:
 925+ 68F9 3D                               dec     a
 926+ 68FA 20 F2                        jr      nz, Um_Mul_Loop
 927+ 68FC
 928+ 68FC C1                           pop     bc
 929+ 68FD E5                           push    hl
 930+ 68FE D5                           push    de
 931+ 68FF                              next
 931+ 68FF DD E9       >                jp      (ix)
 932+ 6901
 933+ 6901              //  ______________________________________________________________________
 934+ 6901              //
 935+ 6901              // um/mod      ud u1 -- q r
 936+ 6901              // divides ud into u1 giving quotient q and remainder r
 937+ 6901              // algorithm takes 16 bit at a time starting from msb
 938+ 6901              // DE grows from lsb upward with quotient result
 939+ 6901              // HL keeps the remainder at each stage of division
 940+ 6901              // each loop 'lowers' the next binary digit to form the current dividend
 941+ 6901                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
 941+ 6901             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 941+ 6901             >
 941+ 6901             >                // dummy db directives used to calculate length of namec
 941+ 6901 55 4D 2F 4D >                db      "UM/MOD"
 941+ 6905 4F 44       >
 941+ 6907             >len_NFA         defl    $ - temp_NFA
 941+ 6907             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 941+ 6901             >
 941+ 6901 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 941+ 6902 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
 941+ 6906 4F 44       >
 941+ 6908             >                org     $-1                 // alter last byte of Name just above to set
 941+ 6907 C4          >                db      {b $} | END_BIT     // msb as name end
 941+ 6908             >
 941+ 6908 DC 68       >                dw      last_NFA            // Link to previous definition Name
 941+ 690A             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 941+ 690A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 941+ 690A             >                else
 941+ 690A 0C 69       >                dw      $ + 2   ; ok        // is pointed by CFA
 941+ 690C             >                endif           ; ok        // for other definitions it "points" the correct handler
 941+ 690C             >                // Use of "; ok" to suppress "warning[fwdref]"
 941+ 690C             >
 941+ 690C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 942+ 690C 60                           ld      h, b
 943+ 690D 69                           ld      l, c                    // Save Instruction Pointer
 944+ 690E
 945+ 690E C1                           pop     bc                      // divisor
 946+ 690F
 947+ 690F D1                           pop     de                      // < high part
 948+ 6910 E3                           ex      (sp), hl                // < low part and > save bc
 949+ 6911 EB                           ex      de, hl                  //
 950+ 6912 7D                           ld      a, l                    // check without changing arguments
 951+ 6913 91                           sub     c                       // if divisor is greater than high part
 952+ 6914 7C                           ld      a, h                    // so quotient will be in range
 953+ 6915 98                           sbc     a, b
 954+ 6916 30 23                        jr      nc, Um_DivMod_OutOfRange
 955+ 6918 3E 10                            ld      a, 16
 956+ 691A              Um_DivMod_Loop:
 957+ 691A A7                                   and     a
 958+ 691B CB 13                                rl      e
 959+ 691D CB 12                                rl      d
 960+ 691F CB 15                                rl      l
 961+ 6921 CB 14                                rl      h
 962+ 6923 30 05                                jr      nc, Um_DivMod_Carry
 963+ 6925 A7                                       and     a
 964+ 6926 ED 42                                    sbc     hl, bc
 965+ 6928 18 07                                jr      Um_DivMod_Endif    // else
 966+ 692A              Um_DivMod_Carry:
 967+ 692A A7                                       and     a
 968+ 692B ED 42                                    sbc     hl, bc
 969+ 692D 30 02                                    jr      nc, Um_DivMod_Endif
 970+ 692F 09                                           add     hl, bc
 971+ 6930 1B                                           dec     de
 972+ 6931              Um_DivMod_Endif:                                   // endif
 973+ 6931 13                                   inc     de
 974+ 6932 3D                                   dec     a
 975+ 6933 20 E5                            jr      nz, Um_DivMod_Loop
 976+ 6935 EB                               ex      de, hl
 977+ 6936              Um_DivMod_Bailout:
 978+ 6936 C1                               pop     bc                  // restore Instruction Pointer
 979+ 6937 D5                               push    de                  // de := remanider
 980+ 6938 E5                               push    hl                  // hl := quotient
 981+ 6939                                  next
 981+ 6939 DD E9       >                jp      (ix)
 982+ 693B
 983+ 693B              Um_DivMod_OutOfRange:
 984+ 693B 21 FF FF                     ld      hl, -1
 985+ 693E 54                           ld      d, h
 986+ 693F 5D                           ld      e, l
 987+ 6940 18 F4                        jr      Um_DivMod_Bailout
 988+ 6942
 989+ 6942              //  ______________________________________________________________________
 990+ 6942              //
 991+ 6942              // and          n1 n2 -- n3
 992+ 6942              // bit logical AND. Returns n3 as n1 & n2
 993+ 6942                              New_Def AND_OP, "AND", is_code, is_normal
 993+ 6942             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 993+ 6942             >
 993+ 6942             >                // dummy db directives used to calculate length of namec
 993+ 6942 41 4E 44    >                db      "AND"
 993+ 6945             >len_NFA         defl    $ - temp_NFA
 993+ 6945             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 993+ 6942             >
 993+ 6942 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 993+ 6943 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
 993+ 6946             >                org     $-1                 // alter last byte of Name just above to set
 993+ 6945 C4          >                db      {b $} | END_BIT     // msb as name end
 993+ 6946             >
 993+ 6946 01 69       >                dw      last_NFA            // Link to previous definition Name
 993+ 6948             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 993+ 6948 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 993+ 6948             >                else
 993+ 6948 4A 69       >                dw      $ + 2   ; ok        // is pointed by CFA
 993+ 694A             >                endif           ; ok        // for other definitions it "points" the correct handler
 993+ 694A             >                // Use of "; ok" to suppress "warning[fwdref]"
 993+ 694A             >
 993+ 694A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 994+ 694A D1                           pop     de
 995+ 694B E1                           pop     hl
 996+ 694C 7B                           ld      a, e
 997+ 694D A5                           and     l
 998+ 694E 6F                           ld      l, a
 999+ 694F 7A                           ld      a, d
1000+ 6950 A4                           and     h
1001+ 6951 67                           ld      h, a
1002+ 6952
1003+ 6952                              psh1
1003+ 6952 E5          >                push    hl
1003+ 6953 DD E9       >                jp      (ix)
1004+ 6955
1005+ 6955              //  ______________________________________________________________________
1006+ 6955              //
1007+ 6955              // or           n1 n2 -- n3
1008+ 6955              // bit logical OR. Returns n3 as n1 | n2
1009+ 6955                              New_Def OR_OP, "OR", is_code, is_normal
1009+ 6955             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1009+ 6955             >
1009+ 6955             >                // dummy db directives used to calculate length of namec
1009+ 6955 4F 52       >                db      "OR"
1009+ 6957             >len_NFA         defl    $ - temp_NFA
1009+ 6957             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1009+ 6955             >
1009+ 6955 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1009+ 6956 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1009+ 6958             >                org     $-1                 // alter last byte of Name just above to set
1009+ 6957 D2          >                db      {b $} | END_BIT     // msb as name end
1009+ 6958             >
1009+ 6958 42 69       >                dw      last_NFA            // Link to previous definition Name
1009+ 695A             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1009+ 695A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1009+ 695A             >                else
1009+ 695A 5C 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1009+ 695C             >                endif           ; ok        // for other definitions it "points" the correct handler
1009+ 695C             >                // Use of "; ok" to suppress "warning[fwdref]"
1009+ 695C             >
1009+ 695C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1010+ 695C D1                           pop     de
1011+ 695D E1                           pop     hl
1012+ 695E 7B                           ld      a, e
1013+ 695F B5                           or      l
1014+ 6960 6F                           ld      l, a
1015+ 6961 7A                           ld      a, d
1016+ 6962 B4                           or      h
1017+ 6963 67                           ld      h, a
1018+ 6964
1019+ 6964                              psh1
1019+ 6964 E5          >                push    hl
1019+ 6965 DD E9       >                jp      (ix)
1020+ 6967
1021+ 6967              //  ______________________________________________________________________
1022+ 6967              //
1023+ 6967              // xor          n1 n2 -- n3
1024+ 6967              // bit logical OR. Returns n3 as n1 ^ n2
1025+ 6967                              New_Def XOR_OP, "XOR", is_code, is_normal
1025+ 6967             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1025+ 6967             >
1025+ 6967             >                // dummy db directives used to calculate length of namec
1025+ 6967 58 4F 52    >                db      "XOR"
1025+ 696A             >len_NFA         defl    $ - temp_NFA
1025+ 696A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1025+ 6967             >
1025+ 6967 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1025+ 6968 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1025+ 696B             >                org     $-1                 // alter last byte of Name just above to set
1025+ 696A D2          >                db      {b $} | END_BIT     // msb as name end
1025+ 696B             >
1025+ 696B 55 69       >                dw      last_NFA            // Link to previous definition Name
1025+ 696D             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1025+ 696D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1025+ 696D             >                else
1025+ 696D 6F 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1025+ 696F             >                endif           ; ok        // for other definitions it "points" the correct handler
1025+ 696F             >                // Use of "; ok" to suppress "warning[fwdref]"
1025+ 696F             >
1025+ 696F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1026+ 696F D1                           pop     de
1027+ 6970 E1                           pop     hl
1028+ 6971 7B                           ld      a, e
1029+ 6972 AD                           xor     l
1030+ 6973 6F                           ld      l, a
1031+ 6974 7A                           ld      a, d
1032+ 6975 AC                           xor     h
1033+ 6976 67                           ld      h, a
1034+ 6977
1035+ 6977                              psh1
1035+ 6977 E5          >                push    hl
1035+ 6978 DD E9       >                jp      (ix)
1036+ 697A
1037+ 697A              //  ______________________________________________________________________
1038+ 697A              //
1039+ 697A              // sp@      -- a
1040+ 697A              // returns on top of stack the value of SP before execution
1041+ 697A                              New_Def SPFETCH, "SP@", is_code, is_normal
1041+ 697A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1041+ 697A             >
1041+ 697A             >                // dummy db directives used to calculate length of namec
1041+ 697A 53 50 40    >                db      "SP@"
1041+ 697D             >len_NFA         defl    $ - temp_NFA
1041+ 697D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1041+ 697A             >
1041+ 697A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1041+ 697B 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1041+ 697E             >                org     $-1                 // alter last byte of Name just above to set
1041+ 697D C0          >                db      {b $} | END_BIT     // msb as name end
1041+ 697E             >
1041+ 697E 67 69       >                dw      last_NFA            // Link to previous definition Name
1041+ 6980             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1041+ 6980 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1041+ 6980             >                else
1041+ 6980 82 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1041+ 6982             >                endif           ; ok        // for other definitions it "points" the correct handler
1041+ 6982             >                // Use of "; ok" to suppress "warning[fwdref]"
1041+ 6982             >
1041+ 6982             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1042+ 6982
1043+ 6982 21 00 00                     ld      hl, 0
1044+ 6985 39                           add     hl, sp
1045+ 6986
1046+ 6986                              psh1
1046+ 6986 E5          >                push    hl
1046+ 6987 DD E9       >                jp      (ix)
1047+ 6989
1048+ 6989              //  ______________________________________________________________________
1049+ 6989              //
1050+ 6989              // sp!      a --
1051+ 6989              // restore SP to the initial value passed
1052+ 6989              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1053+ 6989                              New_Def SPSTORE, "SP!", is_code, is_normal
1053+ 6989             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1053+ 6989             >
1053+ 6989             >                // dummy db directives used to calculate length of namec
1053+ 6989 53 50 21    >                db      "SP!"
1053+ 698C             >len_NFA         defl    $ - temp_NFA
1053+ 698C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1053+ 6989             >
1053+ 6989 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1053+ 698A 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1053+ 698D             >                org     $-1                 // alter last byte of Name just above to set
1053+ 698C A1          >                db      {b $} | END_BIT     // msb as name end
1053+ 698D             >
1053+ 698D 7A 69       >                dw      last_NFA            // Link to previous definition Name
1053+ 698F             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1053+ 698F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1053+ 698F             >                else
1053+ 698F 91 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1053+ 6991             >                endif           ; ok        // for other definitions it "points" the correct handler
1053+ 6991             >                // Use of "; ok" to suppress "warning[fwdref]"
1053+ 6991             >
1053+ 6991             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1054+ 6991 E1                           pop     hl
1055+ 6992 F9                           ld      sp, hl
1056+ 6993
1057+ 6993                              next
1057+ 6993 DD E9       >                jp      (ix)
1058+ 6995
1059+ 6995              //  ______________________________________________________________________
1060+ 6995              //
1061+ 6995              // rp@      -- a
1062+ 6995              // returns on top of stack the value of Return-Pointer
1063+ 6995                              New_Def RPFETCH, "RP@", is_code, is_normal
1063+ 6995             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1063+ 6995             >
1063+ 6995             >                // dummy db directives used to calculate length of namec
1063+ 6995 52 50 40    >                db      "RP@"
1063+ 6998             >len_NFA         defl    $ - temp_NFA
1063+ 6998             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1063+ 6995             >
1063+ 6995 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1063+ 6996 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1063+ 6999             >                org     $-1                 // alter last byte of Name just above to set
1063+ 6998 C0          >                db      {b $} | END_BIT     // msb as name end
1063+ 6999             >
1063+ 6999 89 69       >                dw      last_NFA            // Link to previous definition Name
1063+ 699B             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1063+ 699B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1063+ 699B             >                else
1063+ 699B 9D 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1063+ 699D             >                endif           ; ok        // for other definitions it "points" the correct handler
1063+ 699D             >                // Use of "; ok" to suppress "warning[fwdref]"
1063+ 699D             >
1063+ 699D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1064+ 699D
1065+ 699D                              ldhlrp
1065+ 699D 2A 30 64    >                ld      hl,(RP_Pointer)
1066+ 69A0
1067+ 69A0                              psh1
1067+ 69A0 E5          >                push    hl
1067+ 69A1 DD E9       >                jp      (ix)
1068+ 69A3
1069+ 69A3              //  ______________________________________________________________________
1070+ 69A3              //
1071+ 69A3              // rp!      a --
1072+ 69A3              // restore RP to the initial value passed
1073+ 69A3              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1074+ 69A3                              New_Def RPSTORE, "RP!", is_code, is_normal
1074+ 69A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1074+ 69A3             >
1074+ 69A3             >                // dummy db directives used to calculate length of namec
1074+ 69A3 52 50 21    >                db      "RP!"
1074+ 69A6             >len_NFA         defl    $ - temp_NFA
1074+ 69A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1074+ 69A3             >
1074+ 69A3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1074+ 69A4 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1074+ 69A7             >                org     $-1                 // alter last byte of Name just above to set
1074+ 69A6 A1          >                db      {b $} | END_BIT     // msb as name end
1074+ 69A7             >
1074+ 69A7 95 69       >                dw      last_NFA            // Link to previous definition Name
1074+ 69A9             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1074+ 69A9 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1074+ 69A9             >                else
1074+ 69A9 AB 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1074+ 69AB             >                endif           ; ok        // for other definitions it "points" the correct handler
1074+ 69AB             >                // Use of "; ok" to suppress "warning[fwdref]"
1074+ 69AB             >
1074+ 69AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1075+ 69AB E1                           pop     hl
1076+ 69AC                              ldrphl
1076+ 69AC 22 30 64    >                ld      (RP_Pointer),hl
1077+ 69AF
1078+ 69AF                              next
1078+ 69AF DD E9       >                jp      (ix)
1079+ 69B1
1080+ 69B1              //  ______________________________________________________________________
1081+ 69B1              //
1082+ 69B1              // ;s      --
1083+ 69B1              // exits back to the caller word
1084+ 69B1                              New_Def EXIT, ";S", is_code, is_normal
1084+ 69B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1084+ 69B1             >
1084+ 69B1             >                // dummy db directives used to calculate length of namec
1084+ 69B1 3B 53       >                db      ";S"
1084+ 69B3             >len_NFA         defl    $ - temp_NFA
1084+ 69B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1084+ 69B1             >
1084+ 69B1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1084+ 69B2 3B 53       >                db      ";S"               // name string in 7-bit ascii, but
1084+ 69B4             >                org     $-1                 // alter last byte of Name just above to set
1084+ 69B3 D3          >                db      {b $} | END_BIT     // msb as name end
1084+ 69B4             >
1084+ 69B4 A3 69       >                dw      last_NFA            // Link to previous definition Name
1084+ 69B6             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1084+ 69B6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1084+ 69B6             >                else
1084+ 69B6 B8 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1084+ 69B8             >                endif           ; ok        // for other definitions it "points" the correct handler
1084+ 69B8             >                // Use of "; ok" to suppress "warning[fwdref]"
1084+ 69B8             >
1084+ 69B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1085+ 69B8                              ldhlrp                      // Get Return Stack Pointer
1085+ 69B8 2A 30 64    >                ld      hl,(RP_Pointer)
1086+ 69BB 4E                           ld      c, (hl)             // pop Instruction Pointer
1087+ 69BC 23                           inc     hl                  // from Return Stack
1088+ 69BD 46                           ld      b, (hl)
1089+ 69BE 23                           inc     hl
1090+ 69BF                              ldrphl                      // Set Return Stack Pointer
1090+ 69BF 22 30 64    >                ld      (RP_Pointer),hl
1091+ 69C2                              next
1091+ 69C2 DD E9       >                jp      (ix)
1092+ 69C4
1093+ 69C4              //  ______________________________________________________________________
1094+ 69C4              //
1095+ 69C4              // leave        --
1096+ 69C4              // set the limit-of-loop equal to the current index
1097+ 69C4              // this forces to leave from loop at the end of the current iteration
1098+ 69C4                              New_Def LEAVE, "LEAVE", is_code, is_normal
1098+ 69C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1098+ 69C4             >
1098+ 69C4             >                // dummy db directives used to calculate length of namec
1098+ 69C4 4C 45 41 56 >                db      "LEAVE"
1098+ 69C8 45          >
1098+ 69C9             >len_NFA         defl    $ - temp_NFA
1098+ 69C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1098+ 69C4             >
1098+ 69C4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1098+ 69C5 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
1098+ 69C9 45          >
1098+ 69CA             >                org     $-1                 // alter last byte of Name just above to set
1098+ 69C9 C5          >                db      {b $} | END_BIT     // msb as name end
1098+ 69CA             >
1098+ 69CA B1 69       >                dw      last_NFA            // Link to previous definition Name
1098+ 69CC             >LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1098+ 69CC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1098+ 69CC             >                else
1098+ 69CC CE 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1098+ 69CE             >                endif           ; ok        // for other definitions it "points" the correct handler
1098+ 69CE             >                // Use of "; ok" to suppress "warning[fwdref]"
1098+ 69CE             >
1098+ 69CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1099+ 69CE
1100+ 69CE                              ldhlrp
1100+ 69CE 2A 30 64    >                ld      hl,(RP_Pointer)
1101+ 69D1 5E                           ld      e, (hl)
1102+ 69D2 23                           inc     hl
1103+ 69D3 56                           ld      d, (hl)
1104+ 69D4 23                           inc     hl
1105+ 69D5 73                           ld      (hl), e
1106+ 69D6 23                           inc     hl
1107+ 69D7 72                           ld      (hl), d
1108+ 69D8
1109+ 69D8                              next
1109+ 69D8 DD E9       >                jp      (ix)
1110+ 69DA
1111+ 69DA              //  ______________________________________________________________________
1112+ 69DA              //
1113+ 69DA              // >r      n --
1114+ 69DA              // pop from calculator-stack and push into return-stack
1115+ 69DA                              New_Def TO_R, ">R", is_code, is_normal
1115+ 69DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1115+ 69DA             >
1115+ 69DA             >                // dummy db directives used to calculate length of namec
1115+ 69DA 3E 52       >                db      ">R"
1115+ 69DC             >len_NFA         defl    $ - temp_NFA
1115+ 69DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1115+ 69DA             >
1115+ 69DA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1115+ 69DB 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1115+ 69DD             >                org     $-1                 // alter last byte of Name just above to set
1115+ 69DC D2          >                db      {b $} | END_BIT     // msb as name end
1115+ 69DD             >
1115+ 69DD C4 69       >                dw      last_NFA            // Link to previous definition Name
1115+ 69DF             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1115+ 69DF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1115+ 69DF             >                else
1115+ 69DF E1 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1115+ 69E1             >                endif           ; ok        // for other definitions it "points" the correct handler
1115+ 69E1             >                // Use of "; ok" to suppress "warning[fwdref]"
1115+ 69E1             >
1115+ 69E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1116+ 69E1 D1                           pop     de
1117+ 69E2                              ldhlrp
1117+ 69E2 2A 30 64    >                ld      hl,(RP_Pointer)
1118+ 69E5 2B                           dec     hl
1119+ 69E6 72                           ld      (hl), d             // store current TOS
1120+ 69E7 2B                           dec     hl                  // to Return Stack
1121+ 69E8 73                           ld      (hl), e
1122+ 69E9                              ldrphl
1122+ 69E9 22 30 64    >                ld      (RP_Pointer),hl
1123+ 69EC
1124+ 69EC                              next
1124+ 69EC DD E9       >                jp      (ix)
1125+ 69EE
1126+ 69EE              //  ______________________________________________________________________
1127+ 69EE              //
1128+ 69EE              // r>      -- n
1129+ 69EE              // pop from return-stack and push into calculator-stack
1130+ 69EE                              New_Def R_TO, "R>", is_code, is_normal
1130+ 69EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1130+ 69EE             >
1130+ 69EE             >                // dummy db directives used to calculate length of namec
1130+ 69EE 52 3E       >                db      "R>"
1130+ 69F0             >len_NFA         defl    $ - temp_NFA
1130+ 69F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1130+ 69EE             >
1130+ 69EE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1130+ 69EF 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1130+ 69F1             >                org     $-1                 // alter last byte of Name just above to set
1130+ 69F0 BE          >                db      {b $} | END_BIT     // msb as name end
1130+ 69F1             >
1130+ 69F1 DA 69       >                dw      last_NFA            // Link to previous definition Name
1130+ 69F3             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1130+ 69F3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1130+ 69F3             >                else
1130+ 69F3 F5 69       >                dw      $ + 2   ; ok        // is pointed by CFA
1130+ 69F5             >                endif           ; ok        // for other definitions it "points" the correct handler
1130+ 69F5             >                // Use of "; ok" to suppress "warning[fwdref]"
1130+ 69F5             >
1130+ 69F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1131+ 69F5
1132+ 69F5                              ldhlrp
1132+ 69F5 2A 30 64    >                ld      hl,(RP_Pointer)
1133+ 69F8 5E                           ld      e, (hl)             // retrieve from Return Stack
1134+ 69F9 23                           inc     hl
1135+ 69FA 56                           ld      d, (hl)
1136+ 69FB 23                           inc     hl
1137+ 69FC                              ldrphl
1137+ 69FC 22 30 64    >                ld      (RP_Pointer),hl
1138+ 69FF D5                           push    de
1139+ 6A00                              next
1139+ 6A00 DD E9       >                jp      (ix)
1140+ 6A02
1141+ 6A02              //  ______________________________________________________________________
1142+ 6A02              //
1143+ 6A02              // r            -- n
1144+ 6A02              // return on top of stack the value of top of return-stack
1145+ 6A02              // Since this is the same as I, we alter R's CFA to jump there
1146+ 6A02                              New_Def R_OP, "R", I_Ptr, is_normal
1146+ 6A02             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1146+ 6A02             >
1146+ 6A02             >                // dummy db directives used to calculate length of namec
1146+ 6A02 52          >                db      "R"
1146+ 6A03             >len_NFA         defl    $ - temp_NFA
1146+ 6A03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1146+ 6A02             >
1146+ 6A02 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1146+ 6A03 52          >                db      "R"               // name string in 7-bit ascii, but
1146+ 6A04             >                org     $-1                 // alter last byte of Name just above to set
1146+ 6A03 D2          >                db      {b $} | END_BIT     // msb as name end
1146+ 6A04             >
1146+ 6A04 EE 69       >                dw      last_NFA            // Link to previous definition Name
1146+ 6A06             >R_OP:          if I_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1146+ 6A06 14 65       >                dw      I_Ptr ; ok        // for primitive definitions  actual code
1146+ 6A08             >                else
1146+ 6A08 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1146+ 6A08             >                endif           ; ok        // for other definitions it "points" the correct handler
1146+ 6A08             >                // Use of "; ok" to suppress "warning[fwdref]"
1146+ 6A08             >
1146+ 6A08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1147+ 6A08
1148+ 6A08              //  ______________________________________________________________________
1149+ 6A08              //
1150+ 6A08              // 0=           n -- f
1151+ 6A08              // true (non zero) if n is zero, false (0) elsewere
1152+ 6A08                              New_Def ZEQUAL, "0=", is_code, is_normal
1152+ 6A08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1152+ 6A08             >
1152+ 6A08             >                // dummy db directives used to calculate length of namec
1152+ 6A08 30 3D       >                db      "0="
1152+ 6A0A             >len_NFA         defl    $ - temp_NFA
1152+ 6A0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1152+ 6A08             >
1152+ 6A08 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1152+ 6A09 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1152+ 6A0B             >                org     $-1                 // alter last byte of Name just above to set
1152+ 6A0A BD          >                db      {b $} | END_BIT     // msb as name end
1152+ 6A0B             >
1152+ 6A0B 02 6A       >                dw      last_NFA            // Link to previous definition Name
1152+ 6A0D             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1152+ 6A0D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1152+ 6A0D             >                else
1152+ 6A0D 0F 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1152+ 6A0F             >                endif           ; ok        // for other definitions it "points" the correct handler
1152+ 6A0F             >                // Use of "; ok" to suppress "warning[fwdref]"
1152+ 6A0F             >
1152+ 6A0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1153+ 6A0F E1                           pop     hl
1154+ 6A10 7D                           ld      a, l
1155+ 6A11 B4                           or      h
1156+ 6A12 21 00 00                     ld      hl, FALSE_FLAG
1157+ 6A15 20 01                        jr      nz, ZEqual_Skip
1158+ 6A17 2C                               inc     l
1159+ 6A18              ZEqual_Skip:
1160+ 6A18                              psh1
1160+ 6A18 E5          >                push    hl
1160+ 6A19 DD E9       >                jp      (ix)
1161+ 6A1B
1162+ 6A1B              //  ______________________________________________________________________
1163+ 6A1B              //
1164+ 6A1B              // 0<           n -- f
1165+ 6A1B              // true (non zero) if n is less than zero, false (0) elsewere
1166+ 6A1B                              New_Def ZLESS, "0<", is_code, is_normal
1166+ 6A1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1166+ 6A1B             >
1166+ 6A1B             >                // dummy db directives used to calculate length of namec
1166+ 6A1B 30 3C       >                db      "0<"
1166+ 6A1D             >len_NFA         defl    $ - temp_NFA
1166+ 6A1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1166+ 6A1B             >
1166+ 6A1B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1166+ 6A1C 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1166+ 6A1E             >                org     $-1                 // alter last byte of Name just above to set
1166+ 6A1D BC          >                db      {b $} | END_BIT     // msb as name end
1166+ 6A1E             >
1166+ 6A1E 08 6A       >                dw      last_NFA            // Link to previous definition Name
1166+ 6A20             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1166+ 6A20 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1166+ 6A20             >                else
1166+ 6A20 22 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1166+ 6A22             >                endif           ; ok        // for other definitions it "points" the correct handler
1166+ 6A22             >                // Use of "; ok" to suppress "warning[fwdref]"
1166+ 6A22             >
1166+ 6A22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1167+ 6A22 E1                           pop     hl
1168+ 6A23 29                           add     hl, hl
1169+ 6A24 21 00 00                     ld      hl, 0
1170+ 6A27 30 01                        jr      nc, ZLess_Skip
1171+ 6A29 2C                               inc     l
1172+ 6A2A              ZLess_Skip:
1173+ 6A2A                              psh1
1173+ 6A2A E5          >                push    hl
1173+ 6A2B DD E9       >                jp      (ix)
1174+ 6A2D
1175+ 6A2D              //  ______________________________________________________________________
1176+ 6A2D              //
1177+ 6A2D              // 0>           n -- f
1178+ 6A2D              // true (non zero) if n is less than zero, false (0) elsewere
1179+ 6A2D                              New_Def ZGREATER, "0>", is_code, is_normal
1179+ 6A2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1179+ 6A2D             >
1179+ 6A2D             >                // dummy db directives used to calculate length of namec
1179+ 6A2D 30 3E       >                db      "0>"
1179+ 6A2F             >len_NFA         defl    $ - temp_NFA
1179+ 6A2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1179+ 6A2D             >
1179+ 6A2D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1179+ 6A2E 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1179+ 6A30             >                org     $-1                 // alter last byte of Name just above to set
1179+ 6A2F BE          >                db      {b $} | END_BIT     // msb as name end
1179+ 6A30             >
1179+ 6A30 1B 6A       >                dw      last_NFA            // Link to previous definition Name
1179+ 6A32             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1179+ 6A32 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1179+ 6A32             >                else
1179+ 6A32 34 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1179+ 6A34             >                endif           ; ok        // for other definitions it "points" the correct handler
1179+ 6A34             >                // Use of "; ok" to suppress "warning[fwdref]"
1179+ 6A34             >
1179+ 6A34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1180+ 6A34 E1                           pop     hl
1181+ 6A35 7D                           ld      a, l
1182+ 6A36 B4                           or      h
1183+ 6A37 29                           add     hl, hl
1184+ 6A38 21 00 00                     ld      hl, FALSE_FLAG
1185+ 6A3B 38 04                        jr      c, ZGreater_Skip
1186+ 6A3D A7                               and     a
1187+ 6A3E 28 01                            jr      z, ZGreater_Skip
1188+ 6A40 2C                                   inc     l
1189+ 6A41              ZGreater_Skip:
1190+ 6A41                              psh1
1190+ 6A41 E5          >                push    hl
1190+ 6A42 DD E9       >                jp      (ix)
1191+ 6A44
1192+ 6A44              //  ______________________________________________________________________
1193+ 6A44              //
1194+ 6A44              // +            n1 n2 -- n3
1195+ 6A44              // returns the unsigned sum of two top values
1196+ 6A44                              New_Def PLUS, "+", is_code, is_normal
1196+ 6A44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1196+ 6A44             >
1196+ 6A44             >                // dummy db directives used to calculate length of namec
1196+ 6A44 2B          >                db      "+"
1196+ 6A45             >len_NFA         defl    $ - temp_NFA
1196+ 6A45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1196+ 6A44             >
1196+ 6A44 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1196+ 6A45 2B          >                db      "+"               // name string in 7-bit ascii, but
1196+ 6A46             >                org     $-1                 // alter last byte of Name just above to set
1196+ 6A45 AB          >                db      {b $} | END_BIT     // msb as name end
1196+ 6A46             >
1196+ 6A46 2D 6A       >                dw      last_NFA            // Link to previous definition Name
1196+ 6A48             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1196+ 6A48 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1196+ 6A48             >                else
1196+ 6A48 4A 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1196+ 6A4A             >                endif           ; ok        // for other definitions it "points" the correct handler
1196+ 6A4A             >                // Use of "; ok" to suppress "warning[fwdref]"
1196+ 6A4A             >
1196+ 6A4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1197+ 6A4A E1                           pop     hl
1198+ 6A4B D1                           pop     de
1199+ 6A4C 19                           add     hl, de
1200+ 6A4D
1201+ 6A4D                              psh1
1201+ 6A4D E5          >                push    hl
1201+ 6A4E DD E9       >                jp      (ix)
1202+ 6A50
1203+ 6A50
1204+ 6A50              //  ______________________________________________________________________
1205+ 6A50              //
1206+ 6A50              // d+           d1 d2 -- d3
1207+ 6A50              // returns the unsigned sum of two top double-numbers
1208+ 6A50              //      d2  d1
1209+ 6A50              //      h l h l
1210+ 6A50              // SP   LHEDLHED
1211+ 6A50              // SP  +01234567
1212+ 6A50                              New_Def DPLUS, "D+", is_code, is_normal
1212+ 6A50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ 6A50             >
1212+ 6A50             >                // dummy db directives used to calculate length of namec
1212+ 6A50 44 2B       >                db      "D+"
1212+ 6A52             >len_NFA         defl    $ - temp_NFA
1212+ 6A52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ 6A50             >
1212+ 6A50 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ 6A51 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1212+ 6A53             >                org     $-1                 // alter last byte of Name just above to set
1212+ 6A52 AB          >                db      {b $} | END_BIT     // msb as name end
1212+ 6A53             >
1212+ 6A53 44 6A       >                dw      last_NFA            // Link to previous definition Name
1212+ 6A55             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 6A55 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1212+ 6A55             >                else
1212+ 6A55 57 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1212+ 6A57             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 6A57             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 6A57             >
1212+ 6A57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 6A57
1214+ 6A57 21 07 00                     ld      hl, 7
1215+ 6A5A 39                           add     hl, sp
1216+ 6A5B 56                           ld      d, (hl)
1217+ 6A5C 70                           ld      (hl), b             // Save IP
1218+ 6A5D 2B                           dec     hl
1219+ 6A5E 5E                           ld      e, (hl)
1220+ 6A5F 71                           ld      (hl), c             // de := d1.L
1221+ 6A60 C1                           pop     bc                  // bc := d2.H
1222+ 6A61 E1                           pop     hl                  // hl := d2.L
1223+ 6A62 19                           add     hl, de              // hl := d2.L + d1.L
1224+ 6A63 EB                           ex      de, hl              // de := lower
1225+ 6A64 E1                           pop     hl                  // d1.H
1226+ 6A65 ED 4A                        adc     hl, bc              // d1.H + d2.H
1227+ 6A67 C1                           pop     bc                  // Restore IP
1228+ 6A68
1229+ 6A68
1230+ 6A68                              psh2
1230+ 6A68 D5          >                push    de
1230+ 6A69 E5          >                push    hl
1230+ 6A6A DD E9       >                jp      (ix)
1231+ 6A6C
1232+ 6A6C              //  ______________________________________________________________________
1233+ 6A6C              //
1234+ 6A6C              // 1+           n1 -- n2
1235+ 6A6C              // increment by 1 top of stack
1236+ 6A6C                              New_Def ONE_PLUS, "1+", is_code, is_normal
1236+ 6A6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1236+ 6A6C             >
1236+ 6A6C             >                // dummy db directives used to calculate length of namec
1236+ 6A6C 31 2B       >                db      "1+"
1236+ 6A6E             >len_NFA         defl    $ - temp_NFA
1236+ 6A6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1236+ 6A6C             >
1236+ 6A6C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1236+ 6A6D 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1236+ 6A6F             >                org     $-1                 // alter last byte of Name just above to set
1236+ 6A6E AB          >                db      {b $} | END_BIT     // msb as name end
1236+ 6A6F             >
1236+ 6A6F 50 6A       >                dw      last_NFA            // Link to previous definition Name
1236+ 6A71             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1236+ 6A71 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1236+ 6A71             >                else
1236+ 6A71 73 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1236+ 6A73             >                endif           ; ok        // for other definitions it "points" the correct handler
1236+ 6A73             >                // Use of "; ok" to suppress "warning[fwdref]"
1236+ 6A73             >
1236+ 6A73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1237+ 6A73 E1                           pop     hl
1238+ 6A74 23                           inc     hl
1239+ 6A75
1240+ 6A75                              psh1
1240+ 6A75 E5          >                push    hl
1240+ 6A76 DD E9       >                jp      (ix)
1241+ 6A78
1242+ 6A78              //  ______________________________________________________________________
1243+ 6A78              //
1244+ 6A78              // 1-           n1 -- n2
1245+ 6A78              // decrement by 1 top of stack
1246+ 6A78                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1246+ 6A78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1246+ 6A78             >
1246+ 6A78             >                // dummy db directives used to calculate length of namec
1246+ 6A78 31 2D       >                db      "1-"
1246+ 6A7A             >len_NFA         defl    $ - temp_NFA
1246+ 6A7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1246+ 6A78             >
1246+ 6A78 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1246+ 6A79 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1246+ 6A7B             >                org     $-1                 // alter last byte of Name just above to set
1246+ 6A7A AD          >                db      {b $} | END_BIT     // msb as name end
1246+ 6A7B             >
1246+ 6A7B 6C 6A       >                dw      last_NFA            // Link to previous definition Name
1246+ 6A7D             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1246+ 6A7D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1246+ 6A7D             >                else
1246+ 6A7D 7F 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1246+ 6A7F             >                endif           ; ok        // for other definitions it "points" the correct handler
1246+ 6A7F             >                // Use of "; ok" to suppress "warning[fwdref]"
1246+ 6A7F             >
1246+ 6A7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1247+ 6A7F E1                           pop     hl
1248+ 6A80 2B                           dec     hl
1249+ 6A81
1250+ 6A81                              psh1
1250+ 6A81 E5          >                push    hl
1250+ 6A82 DD E9       >                jp      (ix)
1251+ 6A84
1252+ 6A84              //  ______________________________________________________________________
1253+ 6A84              //
1254+ 6A84              // 2+           n1 -- n2
1255+ 6A84              // increment by 2 top of stack
1256+ 6A84                              New_Def TWO_PLUS, "2+", is_code, is_normal
1256+ 6A84             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1256+ 6A84             >
1256+ 6A84             >                // dummy db directives used to calculate length of namec
1256+ 6A84 32 2B       >                db      "2+"
1256+ 6A86             >len_NFA         defl    $ - temp_NFA
1256+ 6A86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1256+ 6A84             >
1256+ 6A84 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1256+ 6A85 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1256+ 6A87             >                org     $-1                 // alter last byte of Name just above to set
1256+ 6A86 AB          >                db      {b $} | END_BIT     // msb as name end
1256+ 6A87             >
1256+ 6A87 78 6A       >                dw      last_NFA            // Link to previous definition Name
1256+ 6A89             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1256+ 6A89 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1256+ 6A89             >                else
1256+ 6A89 8B 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1256+ 6A8B             >                endif           ; ok        // for other definitions it "points" the correct handler
1256+ 6A8B             >                // Use of "; ok" to suppress "warning[fwdref]"
1256+ 6A8B             >
1256+ 6A8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1257+ 6A8B              Two_Plus:
1258+ 6A8B E1                           pop     hl
1259+ 6A8C 23                           inc     hl
1260+ 6A8D 23                           inc     hl
1261+ 6A8E
1262+ 6A8E                              psh1
1262+ 6A8E E5          >                push    hl
1262+ 6A8F DD E9       >                jp      (ix)
1263+ 6A91
1264+ 6A91              //  ______________________________________________________________________
1265+ 6A91              //
1266+ 6A91              // cell+        a1 -- a2
1267+ 6A91              // increment by 2 top of stack
1268+ 6A91                              New_Def CELL_PLUS, "CELL+", Two_Plus, is_normal
1268+ 6A91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1268+ 6A91             >
1268+ 6A91             >                // dummy db directives used to calculate length of namec
1268+ 6A91 43 45 4C 4C >                db      "CELL+"
1268+ 6A95 2B          >
1268+ 6A96             >len_NFA         defl    $ - temp_NFA
1268+ 6A96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1268+ 6A91             >
1268+ 6A91 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1268+ 6A92 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1268+ 6A96 2B          >
1268+ 6A97             >                org     $-1                 // alter last byte of Name just above to set
1268+ 6A96 AB          >                db      {b $} | END_BIT     // msb as name end
1268+ 6A97             >
1268+ 6A97 84 6A       >                dw      last_NFA            // Link to previous definition Name
1268+ 6A99             >CELL_PLUS:          if Two_Plus != 0 ; ok        // This is the start address of the direct jp(hl)
1268+ 6A99 8B 6A       >                dw      Two_Plus ; ok        // for primitive definitions  actual code
1268+ 6A9B             >                else
1268+ 6A9B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1268+ 6A9B             >                endif           ; ok        // for other definitions it "points" the correct handler
1268+ 6A9B             >                // Use of "; ok" to suppress "warning[fwdref]"
1268+ 6A9B             >
1268+ 6A9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1269+ 6A9B
1270+ 6A9B              //  ______________________________________________________________________
1271+ 6A9B              //
1272+ 6A9B              // align        a1 -- a2
1273+ 6A9B              // align memory : not used
1274+ 6A9B              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1275+ 6A9B              //            next
1276+ 6A9B
1277+ 6A9B              //  ______________________________________________________________________
1278+ 6A9B              //
1279+ 6A9B              // cell-        a1 -- a2
1280+ 6A9B              // decrement by 2 top of stack
1281+ 6A9B                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1281+ 6A9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1281+ 6A9B             >
1281+ 6A9B             >                // dummy db directives used to calculate length of namec
1281+ 6A9B 43 45 4C 4C >                db      "CELL-"
1281+ 6A9F 2D          >
1281+ 6AA0             >len_NFA         defl    $ - temp_NFA
1281+ 6AA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1281+ 6A9B             >
1281+ 6A9B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1281+ 6A9C 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1281+ 6AA0 2D          >
1281+ 6AA1             >                org     $-1                 // alter last byte of Name just above to set
1281+ 6AA0 AD          >                db      {b $} | END_BIT     // msb as name end
1281+ 6AA1             >
1281+ 6AA1 91 6A       >                dw      last_NFA            // Link to previous definition Name
1281+ 6AA3             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1281+ 6AA3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1281+ 6AA3             >                else
1281+ 6AA3 A5 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1281+ 6AA5             >                endif           ; ok        // for other definitions it "points" the correct handler
1281+ 6AA5             >                // Use of "; ok" to suppress "warning[fwdref]"
1281+ 6AA5             >
1281+ 6AA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1282+ 6AA5 E1                           pop     hl
1283+ 6AA6 2B                           dec     hl
1284+ 6AA7 2B                           dec     hl
1285+ 6AA8
1286+ 6AA8                              psh1
1286+ 6AA8 E5          >                push    hl
1286+ 6AA9 DD E9       >                jp      (ix)
1287+ 6AAB
1288+ 6AAB              //  ______________________________________________________________________
1289+ 6AAB              //
1290+ 6AAB              // minus        n1 -- n2
1291+ 6AAB              // change the sign of number
1292+ 6AAB                              New_Def MINUS, "MINUS", is_code, is_normal
1292+ 6AAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1292+ 6AAB             >
1292+ 6AAB             >                // dummy db directives used to calculate length of namec
1292+ 6AAB 4D 49 4E 55 >                db      "MINUS"
1292+ 6AAF 53          >
1292+ 6AB0             >len_NFA         defl    $ - temp_NFA
1292+ 6AB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1292+ 6AAB             >
1292+ 6AAB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1292+ 6AAC 4D 49 4E 55 >                db      "MINUS"               // name string in 7-bit ascii, but
1292+ 6AB0 53          >
1292+ 6AB1             >                org     $-1                 // alter last byte of Name just above to set
1292+ 6AB0 D3          >                db      {b $} | END_BIT     // msb as name end
1292+ 6AB1             >
1292+ 6AB1 9B 6A       >                dw      last_NFA            // Link to previous definition Name
1292+ 6AB3             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1292+ 6AB3 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1292+ 6AB3             >                else
1292+ 6AB3 B5 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1292+ 6AB5             >                endif           ; ok        // for other definitions it "points" the correct handler
1292+ 6AB5             >                // Use of "; ok" to suppress "warning[fwdref]"
1292+ 6AB5             >
1292+ 6AB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1293+ 6AB5 21 00 00                     ld      hl, 0               // subtract from 0
1294+ 6AB8 D1                           pop     de
1295+ 6AB9 B7                           or      a
1296+ 6ABA ED 52                        sbc     hl, de
1297+ 6ABC
1298+ 6ABC                              psh1
1298+ 6ABC E5          >                push    hl
1298+ 6ABD DD E9       >                jp      (ix)
1299+ 6ABF
1300+ 6ABF              //  ______________________________________________________________________
1301+ 6ABF              //
1302+ 6ABF              // dminus       d1 -- d2
1303+ 6ABF              // change the sign of a double number
1304+ 6ABF                              New_Def DMINUS, "DMINUS", is_code, is_normal
1304+ 6ABF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1304+ 6ABF             >
1304+ 6ABF             >                // dummy db directives used to calculate length of namec
1304+ 6ABF 44 4D 49 4E >                db      "DMINUS"
1304+ 6AC3 55 53       >
1304+ 6AC5             >len_NFA         defl    $ - temp_NFA
1304+ 6AC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1304+ 6ABF             >
1304+ 6ABF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1304+ 6AC0 44 4D 49 4E >                db      "DMINUS"               // name string in 7-bit ascii, but
1304+ 6AC4 55 53       >
1304+ 6AC6             >                org     $-1                 // alter last byte of Name just above to set
1304+ 6AC5 D3          >                db      {b $} | END_BIT     // msb as name end
1304+ 6AC6             >
1304+ 6AC6 AB 6A       >                dw      last_NFA            // Link to previous definition Name
1304+ 6AC8             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1304+ 6AC8 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1304+ 6AC8             >                else
1304+ 6AC8 CA 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1304+ 6ACA             >                endif           ; ok        // for other definitions it "points" the correct handler
1304+ 6ACA             >                // Use of "; ok" to suppress "warning[fwdref]"
1304+ 6ACA             >
1304+ 6ACA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1305+ 6ACA E1                           pop     hl                  // d1.H
1306+ 6ACB D1                           pop     de                  // d1.L
1307+ 6ACC C5                           push    bc                  // Save Instruction Pointer
1308+ 6ACD 44                           ld      b, h
1309+ 6ACE 4D                           ld      c, l                // bc := d1.L
1310+ 6ACF AF                           xor     a
1311+ 6AD0 67                           ld      h, a
1312+ 6AD1 6F                           ld      l, a
1313+ 6AD2 ED 52                        sbc     hl, de              // subtact from zero
1314+ 6AD4 D1                           pop     de                  // Retrieve Instruction Pointer
1315+ 6AD5 E5                           push    hl                  // > d2-L
1316+ 6AD6 67                           ld      h, a
1317+ 6AD7 6F                           ld      l, a
1318+ 6AD8 ED 42                        sbc     hl, bc              // subtract from zero with carry
1319+ 6ADA                                                          // > d2-H
1320+ 6ADA 42                           ld      b, d
1321+ 6ADB 4B                           ld      c, e
1322+ 6ADC                              psh1
1322+ 6ADC E5          >                push    hl
1322+ 6ADD DD E9       >                jp      (ix)
1323+ 6ADF
1324+ 6ADF              //  ______________________________________________________________________
1325+ 6ADF              //
1326+ 6ADF              // over         n1 n2 -- n1 n2 n1
1327+ 6ADF              // copy the second value of stack and put it on top.
1328+ 6ADF                              New_Def OVER, "OVER", is_code, is_normal
1328+ 6ADF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1328+ 6ADF             >
1328+ 6ADF             >                // dummy db directives used to calculate length of namec
1328+ 6ADF 4F 56 45 52 >                db      "OVER"
1328+ 6AE3             >len_NFA         defl    $ - temp_NFA
1328+ 6AE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1328+ 6ADF             >
1328+ 6ADF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1328+ 6AE0 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1328+ 6AE4             >                org     $-1                 // alter last byte of Name just above to set
1328+ 6AE3 D2          >                db      {b $} | END_BIT     // msb as name end
1328+ 6AE4             >
1328+ 6AE4 BF 6A       >                dw      last_NFA            // Link to previous definition Name
1328+ 6AE6             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1328+ 6AE6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1328+ 6AE6             >                else
1328+ 6AE6 E8 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1328+ 6AE8             >                endif           ; ok        // for other definitions it "points" the correct handler
1328+ 6AE8             >                // Use of "; ok" to suppress "warning[fwdref]"
1328+ 6AE8             >
1328+ 6AE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1329+ 6AE8 D1                           pop     de                  //   n2
1330+ 6AE9 E1                           pop     hl                  // < n1
1331+ 6AEA E5                           push    hl                  // > n1
1332+ 6AEB D5                           push    de                  // > n2
1333+ 6AEC E5                           push    hl                  // > n1
1334+ 6AED                              next
1334+ 6AED DD E9       >                jp      (ix)
1335+ 6AEF
1336+ 6AEF              //  ______________________________________________________________________
1337+ 6AEF              //
1338+ 6AEF              // drop         n1 --
1339+ 6AEF              // drops the top of stack
1340+ 6AEF                              New_Def DROP, "DROP", is_code, is_normal
1340+ 6AEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1340+ 6AEF             >
1340+ 6AEF             >                // dummy db directives used to calculate length of namec
1340+ 6AEF 44 52 4F 50 >                db      "DROP"
1340+ 6AF3             >len_NFA         defl    $ - temp_NFA
1340+ 6AF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1340+ 6AEF             >
1340+ 6AEF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1340+ 6AF0 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1340+ 6AF4             >                org     $-1                 // alter last byte of Name just above to set
1340+ 6AF3 D0          >                db      {b $} | END_BIT     // msb as name end
1340+ 6AF4             >
1340+ 6AF4 DF 6A       >                dw      last_NFA            // Link to previous definition Name
1340+ 6AF6             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1340+ 6AF6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1340+ 6AF6             >                else
1340+ 6AF6 F8 6A       >                dw      $ + 2   ; ok        // is pointed by CFA
1340+ 6AF8             >                endif           ; ok        // for other definitions it "points" the correct handler
1340+ 6AF8             >                // Use of "; ok" to suppress "warning[fwdref]"
1340+ 6AF8             >
1340+ 6AF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1341+ 6AF8 E1                           pop     hl                  // < n1 and discard previous TOS
1342+ 6AF9                              next
1342+ 6AF9 DD E9       >                jp      (ix)
1343+ 6AFB
1344+ 6AFB              //  ______________________________________________________________________
1345+ 6AFB              //
1346+ 6AFB              // nip          n1 n2 -- n2
1347+ 6AFB              // drops the second elemento on the stack
1348+ 6AFB                              New_Def NIP, "NIP", is_code, is_normal
1348+ 6AFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1348+ 6AFB             >
1348+ 6AFB             >                // dummy db directives used to calculate length of namec
1348+ 6AFB 4E 49 50    >                db      "NIP"
1348+ 6AFE             >len_NFA         defl    $ - temp_NFA
1348+ 6AFE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1348+ 6AFB             >
1348+ 6AFB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1348+ 6AFC 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1348+ 6AFF             >                org     $-1                 // alter last byte of Name just above to set
1348+ 6AFE D0          >                db      {b $} | END_BIT     // msb as name end
1348+ 6AFF             >
1348+ 6AFF EF 6A       >                dw      last_NFA            // Link to previous definition Name
1348+ 6B01             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1348+ 6B01 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1348+ 6B01             >                else
1348+ 6B01 03 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1348+ 6B03             >                endif           ; ok        // for other definitions it "points" the correct handler
1348+ 6B03             >                // Use of "; ok" to suppress "warning[fwdref]"
1348+ 6B03             >
1348+ 6B03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1349+ 6B03
1350+ 6B03 E1                           pop     hl                  // < n1 discarded
1351+ 6B04 E3                           ex      (sp), hl
1352+ 6B05                              next
1352+ 6B05 DD E9       >                jp      (ix)
1353+ 6B07
1354+ 6B07              //  ______________________________________________________________________
1355+ 6B07              //
1356+ 6B07              // tuck         n1 n2 -- n2 n1 n2
1357+ 6B07              // copy the top element after the second.
1358+ 6B07                              New_Def TUCK, "TUCK", is_code, is_normal
1358+ 6B07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1358+ 6B07             >
1358+ 6B07             >                // dummy db directives used to calculate length of namec
1358+ 6B07 54 55 43 4B >                db      "TUCK"
1358+ 6B0B             >len_NFA         defl    $ - temp_NFA
1358+ 6B0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1358+ 6B07             >
1358+ 6B07 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1358+ 6B08 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1358+ 6B0C             >                org     $-1                 // alter last byte of Name just above to set
1358+ 6B0B CB          >                db      {b $} | END_BIT     // msb as name end
1358+ 6B0C             >
1358+ 6B0C FB 6A       >                dw      last_NFA            // Link to previous definition Name
1358+ 6B0E             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1358+ 6B0E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1358+ 6B0E             >                else
1358+ 6B0E 10 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1358+ 6B10             >                endif           ; ok        // for other definitions it "points" the correct handler
1358+ 6B10             >                // Use of "; ok" to suppress "warning[fwdref]"
1358+ 6B10             >
1358+ 6B10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1359+ 6B10 E1                           pop     hl
1360+ 6B11 D1                           pop     de                  // < n1
1361+ 6B12 E5                           push    hl                  // > n2  and TOS
1362+ 6B13 D5                           push    de                  // > n1
1363+ 6B14 E5                           push    hl
1364+ 6B15                              next
1364+ 6B15 DD E9       >                jp      (ix)
1365+ 6B17
1366+ 6B17              //  ______________________________________________________________________
1367+ 6B17              //
1368+ 6B17              // swap         n1 n2 -- n2 n1
1369+ 6B17              // swaps the two values on top of stack
1370+ 6B17                              New_Def SWAP, "SWAP", is_code, is_normal
1370+ 6B17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1370+ 6B17             >
1370+ 6B17             >                // dummy db directives used to calculate length of namec
1370+ 6B17 53 57 41 50 >                db      "SWAP"
1370+ 6B1B             >len_NFA         defl    $ - temp_NFA
1370+ 6B1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1370+ 6B17             >
1370+ 6B17 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1370+ 6B18 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1370+ 6B1C             >                org     $-1                 // alter last byte of Name just above to set
1370+ 6B1B D0          >                db      {b $} | END_BIT     // msb as name end
1370+ 6B1C             >
1370+ 6B1C 07 6B       >                dw      last_NFA            // Link to previous definition Name
1370+ 6B1E             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1370+ 6B1E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1370+ 6B1E             >                else
1370+ 6B1E 20 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1370+ 6B20             >                endif           ; ok        // for other definitions it "points" the correct handler
1370+ 6B20             >                // Use of "; ok" to suppress "warning[fwdref]"
1370+ 6B20             >
1370+ 6B20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1371+ 6B20 E1                           pop     hl                  // < n1
1372+ 6B21 E3                           ex      (sp),hl             // > n2
1373+ 6B22 E5                           push    hl                  // copy n1 to TOS
1374+ 6B23                              next
1374+ 6B23 DD E9       >                jp      (ix)
1375+ 6B25
1376+ 6B25              //  ______________________________________________________________________
1377+ 6B25              //
1378+ 6B25              // dup         n -- n n
1379+ 6B25              // duplicates the top value of stack
1380+ 6B25                              New_Def DUP, "DUP", is_code, is_normal
1380+ 6B25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1380+ 6B25             >
1380+ 6B25             >                // dummy db directives used to calculate length of namec
1380+ 6B25 44 55 50    >                db      "DUP"
1380+ 6B28             >len_NFA         defl    $ - temp_NFA
1380+ 6B28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1380+ 6B25             >
1380+ 6B25 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1380+ 6B26 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1380+ 6B29             >                org     $-1                 // alter last byte of Name just above to set
1380+ 6B28 D0          >                db      {b $} | END_BIT     // msb as name end
1380+ 6B29             >
1380+ 6B29 17 6B       >                dw      last_NFA            // Link to previous definition Name
1380+ 6B2B             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1380+ 6B2B ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1380+ 6B2B             >                else
1380+ 6B2B 2D 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1380+ 6B2D             >                endif           ; ok        // for other definitions it "points" the correct handler
1380+ 6B2D             >                // Use of "; ok" to suppress "warning[fwdref]"
1380+ 6B2D             >
1380+ 6B2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1381+ 6B2D E1                           pop     hl
1382+ 6B2E E5                           push    hl                  // > n duplicate TOS
1383+ 6B2F E5                           push    hl
1384+ 6B30                              next
1384+ 6B30 DD E9       >                jp      (ix)
1385+ 6B32
1386+ 6B32              //  ______________________________________________________________________
1387+ 6B32              //
1388+ 6B32              // rot         n1 n2 n3 -- n2 n3 n1
1389+ 6B32              // Rotates the 3 top values of stack by picking the 3rd in access-order
1390+ 6B32              // and putting it on top. The other two are shifted down one place.
1391+ 6B32                              New_Def ROT, "ROT", is_code, is_normal
1391+ 6B32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1391+ 6B32             >
1391+ 6B32             >                // dummy db directives used to calculate length of namec
1391+ 6B32 52 4F 54    >                db      "ROT"
1391+ 6B35             >len_NFA         defl    $ - temp_NFA
1391+ 6B35             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1391+ 6B32             >
1391+ 6B32 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1391+ 6B33 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1391+ 6B36             >                org     $-1                 // alter last byte of Name just above to set
1391+ 6B35 D4          >                db      {b $} | END_BIT     // msb as name end
1391+ 6B36             >
1391+ 6B36 25 6B       >                dw      last_NFA            // Link to previous definition Name
1391+ 6B38             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1391+ 6B38 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1391+ 6B38             >                else
1391+ 6B38 3A 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1391+ 6B3A             >                endif           ; ok        // for other definitions it "points" the correct handler
1391+ 6B3A             >                // Use of "; ok" to suppress "warning[fwdref]"
1391+ 6B3A             >
1391+ 6B3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1392+ 6B3A D1                           pop     de                  // < n2
1393+ 6B3B E1                           pop     hl                  // < n1
1394+ 6B3C E3                           ex      (sp),hl             // > n2
1395+ 6B3D D5                           push    de                  // > n3
1396+ 6B3E E5                           push    hl                  // copy n1 to TOS
1397+ 6B3F                              next
1397+ 6B3F DD E9       >                jp      (ix)
1398+ 6B41
1399+ 6B41              //  ______________________________________________________________________
1400+ 6B41              //
1401+ 6B41              // pick        n1 -- nx
1402+ 6B41              // picks the nth element from TOS
1403+ 6B41                              New_Def PICK, "PICK", is_code, is_normal
1403+ 6B41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1403+ 6B41             >
1403+ 6B41             >                // dummy db directives used to calculate length of namec
1403+ 6B41 50 49 43 4B >                db      "PICK"
1403+ 6B45             >len_NFA         defl    $ - temp_NFA
1403+ 6B45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1403+ 6B41             >
1403+ 6B41 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1403+ 6B42 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1403+ 6B46             >                org     $-1                 // alter last byte of Name just above to set
1403+ 6B45 CB          >                db      {b $} | END_BIT     // msb as name end
1403+ 6B46             >
1403+ 6B46 32 6B       >                dw      last_NFA            // Link to previous definition Name
1403+ 6B48             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1403+ 6B48 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1403+ 6B48             >                else
1403+ 6B48 4A 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1403+ 6B4A             >                endif           ; ok        // for other definitions it "points" the correct handler
1403+ 6B4A             >                // Use of "; ok" to suppress "warning[fwdref]"
1403+ 6B4A             >
1403+ 6B4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1404+ 6B4A E1                           pop     hl                  // take TOS as index
1405+ 6B4B 29                           add     hl, hl              // as cells
1406+ 6B4C 39                           add     hl, sp              // from Stack Pointer
1407+ 6B4D 7E                           ld      a, (hl)             // replace TOS
1408+ 6B4E 23                           inc     hl
1409+ 6B4F 66                           ld      h, (hl)
1410+ 6B50 6F                           ld      l, a
1411+ 6B51
1412+ 6B51                              psh1
1412+ 6B51 E5          >                push    hl
1412+ 6B52 DD E9       >                jp      (ix)
1413+ 6B54
1414+ 6B54
1415+ 6B54              //  ______________________________________________________________________
1416+ 6B54              //
1417+ 6B54              // 2over        d1 d2 -- d1 d2 d1
1418+ 6B54              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1419+ 6B54              // copy the second double of stack and put on top.
1420+ 6B54                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1420+ 6B54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1420+ 6B54             >
1420+ 6B54             >                // dummy db directives used to calculate length of namec
1420+ 6B54 32 4F 56 45 >                db      "2OVER"
1420+ 6B58 52          >
1420+ 6B59             >len_NFA         defl    $ - temp_NFA
1420+ 6B59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1420+ 6B54             >
1420+ 6B54 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1420+ 6B55 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1420+ 6B59 52          >
1420+ 6B5A             >                org     $-1                 // alter last byte of Name just above to set
1420+ 6B59 D2          >                db      {b $} | END_BIT     // msb as name end
1420+ 6B5A             >
1420+ 6B5A 41 6B       >                dw      last_NFA            // Link to previous definition Name
1420+ 6B5C             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1420+ 6B5C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1420+ 6B5C             >                else
1420+ 6B5C 5E 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1420+ 6B5E             >                endif           ; ok        // for other definitions it "points" the correct handler
1420+ 6B5E             >                // Use of "; ok" to suppress "warning[fwdref]"
1420+ 6B5E             >
1420+ 6B5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1421+ 6B5E
1422+ 6B5E 21 07 00                     ld      hl, 7
1423+ 6B61 39                           add     hl, sp
1424+ 6B62 56                           ld      d, (hl)
1425+ 6B63 2B                           dec     hl
1426+ 6B64 5E                           ld      e, (hl)             // d1-L
1427+ 6B65 D5                           push    de
1428+ 6B66 2B                           dec     hl
1429+ 6B67 56                           ld      d, (hl)
1430+ 6B68 2B                           dec     hl
1431+ 6B69 5E                           ld      e, (hl)             // d1-H
1432+ 6B6A D5                           push    de
1433+ 6B6B                              next
1433+ 6B6B DD E9       >                jp      (ix)
1434+ 6B6D
1435+ 6B6D              //  ______________________________________________________________________
1436+ 6B6D              //
1437+ 6B6D              // 2drop        d --
1438+ 6B6D              //              n1 n2 --
1439+ 6B6D              // drops the top double from stack
1440+ 6B6D                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1440+ 6B6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1440+ 6B6D             >
1440+ 6B6D             >                // dummy db directives used to calculate length of namec
1440+ 6B6D 32 44 52 4F >                db      "2DROP"
1440+ 6B71 50          >
1440+ 6B72             >len_NFA         defl    $ - temp_NFA
1440+ 6B72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1440+ 6B6D             >
1440+ 6B6D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1440+ 6B6E 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1440+ 6B72 50          >
1440+ 6B73             >                org     $-1                 // alter last byte of Name just above to set
1440+ 6B72 D0          >                db      {b $} | END_BIT     // msb as name end
1440+ 6B73             >
1440+ 6B73 54 6B       >                dw      last_NFA            // Link to previous definition Name
1440+ 6B75             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1440+ 6B75 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1440+ 6B75             >                else
1440+ 6B75 77 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1440+ 6B77             >                endif           ; ok        // for other definitions it "points" the correct handler
1440+ 6B77             >                // Use of "; ok" to suppress "warning[fwdref]"
1440+ 6B77             >
1440+ 6B77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1441+ 6B77 E1                           pop     hl
1442+ 6B78 E1                           pop     hl
1443+ 6B79                              next
1443+ 6B79 DD E9       >                jp      (ix)
1444+ 6B7B
1445+ 6B7B              //  ______________________________________________________________________
1446+ 6B7B              //
1447+ 6B7B              // 2nip         d1 d2 -- d2
1448+ 6B7B              //              n1 n2 n3 n4 -- n3 n4
1449+ 6B7B              // drops the second double on the stack
1450+ 6B7B              //              New_Def TWO_NIP, 4, "2nip"
1451+ 6B7B              //              ...
1452+ 6B7B
1453+ 6B7B              //  ______________________________________________________________________
1454+ 6B7B              //
1455+ 6B7B              // 2tuck         d1 d2 -- d2 d1 d2
1456+ 6B7B              // copy the top element after the second.
1457+ 6B7B              //              New_Def TWO_TUCK, 5, "2tuck"
1458+ 6B7B              //              ...
1459+ 6B7B
1460+ 6B7B              //  ______________________________________________________________________
1461+ 6B7B              //
1462+ 6B7B              // 2swap         d1 d2 -- d2 d1
1463+ 6B7B              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1464+ 6B7B              // swaps the two doubles on top of stack
1465+ 6B7B                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1465+ 6B7B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1465+ 6B7B             >
1465+ 6B7B             >                // dummy db directives used to calculate length of namec
1465+ 6B7B 32 53 57 41 >                db      "2SWAP"
1465+ 6B7F 50          >
1465+ 6B80             >len_NFA         defl    $ - temp_NFA
1465+ 6B80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1465+ 6B7B             >
1465+ 6B7B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1465+ 6B7C 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1465+ 6B80 50          >
1465+ 6B81             >                org     $-1                 // alter last byte of Name just above to set
1465+ 6B80 D0          >                db      {b $} | END_BIT     // msb as name end
1465+ 6B81             >
1465+ 6B81 6D 6B       >                dw      last_NFA            // Link to previous definition Name
1465+ 6B83             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1465+ 6B83 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1465+ 6B83             >                else
1465+ 6B83 85 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1465+ 6B85             >                endif           ; ok        // for other definitions it "points" the correct handler
1465+ 6B85             >                // Use of "; ok" to suppress "warning[fwdref]"
1465+ 6B85             >
1465+ 6B85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1466+ 6B85 F1                           pop     af                  //   d2-H
1467+ 6B86 E1                           pop     hl                  // < d2-L
1468+ 6B87 D1                           pop     de                  // < d1-H
1469+ 6B88 E3                           ex      (sp), hl            // < d1-L > d2-L
1470+ 6B89 F5                           push    af                  // > d2-H
1471+ 6B8A E5                           push    hl                  // > d1-L
1472+ 6B8B D5                           push    de
1473+ 6B8C
1474+ 6B8C                              next
1474+ 6B8C DD E9       >                jp      (ix)
1475+ 6B8E
1476+ 6B8E              //  ______________________________________________________________________
1477+ 6B8E              //
1478+ 6B8E              // 2dup         d -- d d
1479+ 6B8E              //              n1 n2 -- n1 n2 n1 n2
1480+ 6B8E              // duplicates the top double of stack
1481+ 6B8E                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1481+ 6B8E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1481+ 6B8E             >
1481+ 6B8E             >                // dummy db directives used to calculate length of namec
1481+ 6B8E 32 44 55 50 >                db      "2DUP"
1481+ 6B92             >len_NFA         defl    $ - temp_NFA
1481+ 6B92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1481+ 6B8E             >
1481+ 6B8E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1481+ 6B8F 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1481+ 6B93             >                org     $-1                 // alter last byte of Name just above to set
1481+ 6B92 D0          >                db      {b $} | END_BIT     // msb as name end
1481+ 6B93             >
1481+ 6B93 7B 6B       >                dw      last_NFA            // Link to previous definition Name
1481+ 6B95             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1481+ 6B95 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1481+ 6B95             >                else
1481+ 6B95 97 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1481+ 6B97             >                endif           ; ok        // for other definitions it "points" the correct handler
1481+ 6B97             >                // Use of "; ok" to suppress "warning[fwdref]"
1481+ 6B97             >
1481+ 6B97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1482+ 6B97 E1                           pop     hl                  // < d-H
1483+ 6B98 D1                           pop     de                  // < d-L
1484+ 6B99 D5                           push    de                  // < d-L
1485+ 6B9A E5                           push    hl                  // > d-H
1486+ 6B9B D5                           push    de                  // > d-L
1487+ 6B9C E5                           push    hl                  // > d-H
1488+ 6B9D                              next
1488+ 6B9D DD E9       >                jp      (ix)
1489+ 6B9F
1490+ 6B9F              //  ______________________________________________________________________
1491+ 6B9F              //
1492+ 6B9F              // 2rot         d1 d2 d3 -- d2 d3 d1
1493+ 6B9F              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1494+ 6B9F              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1495+ 6B9F              // and putting it on top. The other two are shifted down one place.
1496+ 6B9F              //              New_Def TWO?ROT, 4, "2rot"
1497+ 6B9F              //              ...
1498+ 6B9F                              New_Def TWO_ROT, "2ROT", is_code, is_normal
1498+ 6B9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1498+ 6B9F             >
1498+ 6B9F             >                // dummy db directives used to calculate length of namec
1498+ 6B9F 32 52 4F 54 >                db      "2ROT"
1498+ 6BA3             >len_NFA         defl    $ - temp_NFA
1498+ 6BA3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1498+ 6B9F             >
1498+ 6B9F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1498+ 6BA0 32 52 4F 54 >                db      "2ROT"               // name string in 7-bit ascii, but
1498+ 6BA4             >                org     $-1                 // alter last byte of Name just above to set
1498+ 6BA3 D4          >                db      {b $} | END_BIT     // msb as name end
1498+ 6BA4             >
1498+ 6BA4 8E 6B       >                dw      last_NFA            // Link to previous definition Name
1498+ 6BA6             >TWO_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1498+ 6BA6 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1498+ 6BA6             >                else
1498+ 6BA6 A8 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1498+ 6BA8             >                endif           ; ok        // for other definitions it "points" the correct handler
1498+ 6BA8             >                // Use of "; ok" to suppress "warning[fwdref]"
1498+ 6BA8             >
1498+ 6BA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1499+ 6BA8
1500+ 6BA8              //      d3  |d2  |d1  |
1501+ 6BA8              //      h l |h l |h l |
1502+ 6BA8              // SP   LHED|LHED|LHED|
1503+ 6BA8              // SP  +0123|4567|89ab|
1504+ 6BA8 21 0B 00                     ld      hl, $000B
1505+ 6BAB 39                           add     hl, sp
1506+ 6BAC 56                           ld      d, (hl)
1507+ 6BAD 2B                           dec     hl
1508+ 6BAE 5E                           ld      e, (hl)
1509+ 6BAF 2B                           dec     hl
1510+ 6BB0 D5                           push    de
1511+ 6BB1 56                           ld      d, (hl)
1512+ 6BB2 2B                           dec     hl
1513+ 6BB3 5E                           ld      e, (hl)
1514+ 6BB4 2B                           dec     hl
1515+ 6BB5 D5                           push    de
1516+ 6BB6
1517+ 6BB6              //      d1  |d3  |d2  |d1  |
1518+ 6BB6              //      h l |h l |h l |h l |
1519+ 6BB6              // SP   LHED|LHED|LHED|LHED|
1520+ 6BB6              // SP       +0123|4567|89ab|
1521+ 6BB6
1522+ 6BB6 54                           ld      d, h
1523+ 6BB7 5D                           ld      e, l
1524+ 6BB8 13                           inc     de
1525+ 6BB9 13                           inc     de
1526+ 6BBA 13                           inc     de
1527+ 6BBB 13                           inc     de
1528+ 6BBC C5                           push    bc
1529+ 6BBD 01 0C 00                     ld      bc, $000C
1530+ 6BC0 ED B8                        lddr
1531+ 6BC2 C1                           pop     bc
1532+ 6BC3 D1                           pop     de
1533+ 6BC4 D1                           pop     de
1534+ 6BC5
1535+ 6BC5                              next
1535+ 6BC5 DD E9       >                jp      (ix)
1536+ 6BC7
1537+ 6BC7
1538+ 6BC7              //  ______________________________________________________________________
1539+ 6BC7              //
1540+ 6BC7              // +!           n a --
1541+ 6BC7              // Sums to the content of address a the number n.
1542+ 6BC7              // It is the same of  a @ n + a !
1543+ 6BC7                              New_Def PLUSSTORE, "+!", is_code, is_normal
1543+ 6BC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1543+ 6BC7             >
1543+ 6BC7             >                // dummy db directives used to calculate length of namec
1543+ 6BC7 2B 21       >                db      "+!"
1543+ 6BC9             >len_NFA         defl    $ - temp_NFA
1543+ 6BC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1543+ 6BC7             >
1543+ 6BC7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1543+ 6BC8 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1543+ 6BCA             >                org     $-1                 // alter last byte of Name just above to set
1543+ 6BC9 A1          >                db      {b $} | END_BIT     // msb as name end
1543+ 6BCA             >
1543+ 6BCA 9F 6B       >                dw      last_NFA            // Link to previous definition Name
1543+ 6BCC             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1543+ 6BCC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1543+ 6BCC             >                else
1543+ 6BCC CE 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1543+ 6BCE             >                endif           ; ok        // for other definitions it "points" the correct handler
1543+ 6BCE             >                // Use of "; ok" to suppress "warning[fwdref]"
1543+ 6BCE             >
1543+ 6BCE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1544+ 6BCE E1                           pop     hl                  // hl is the address
1545+ 6BCF D1                           pop     de                  // de is the number
1546+ 6BD0 7E                           ld      a, (hl)
1547+ 6BD1 83                           add     e
1548+ 6BD2 77                           ld      (hl), a
1549+ 6BD3 23                           inc     hl
1550+ 6BD4 7E                           ld      a, (hl)
1551+ 6BD5 8A                           adc     d
1552+ 6BD6 77                           ld      (hl), a
1553+ 6BD7
1554+ 6BD7                              next
1554+ 6BD7 DD E9       >                jp      (ix)
1555+ 6BD9
1556+ 6BD9              //  ______________________________________________________________________
1557+ 6BD9              //
1558+ 6BD9              // toggle       a n --
1559+ 6BD9              // Complements (xor) the byte at addrress  a  with the model n.
1560+ 6BD9                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1560+ 6BD9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1560+ 6BD9             >
1560+ 6BD9             >                // dummy db directives used to calculate length of namec
1560+ 6BD9 54 4F 47 47 >                db      "TOGGLE"
1560+ 6BDD 4C 45       >
1560+ 6BDF             >len_NFA         defl    $ - temp_NFA
1560+ 6BDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1560+ 6BD9             >
1560+ 6BD9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1560+ 6BDA 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1560+ 6BDE 4C 45       >
1560+ 6BE0             >                org     $-1                 // alter last byte of Name just above to set
1560+ 6BDF C5          >                db      {b $} | END_BIT     // msb as name end
1560+ 6BE0             >
1560+ 6BE0 C7 6B       >                dw      last_NFA            // Link to previous definition Name
1560+ 6BE2             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1560+ 6BE2 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1560+ 6BE2             >                else
1560+ 6BE2 E4 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1560+ 6BE4             >                endif           ; ok        // for other definitions it "points" the correct handler
1560+ 6BE4             >                // Use of "; ok" to suppress "warning[fwdref]"
1560+ 6BE4             >
1560+ 6BE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1561+ 6BE4 D1                           pop     de
1562+ 6BE5 E1                           pop     hl
1563+ 6BE6 7E                           ld      a, (hl)
1564+ 6BE7 AB                           xor     e
1565+ 6BE8 77                           ld      (hl), a
1566+ 6BE9
1567+ 6BE9                              next
1567+ 6BE9 DD E9       >                jp      (ix)
1568+ 6BEB
1569+ 6BEB              //  ______________________________________________________________________
1570+ 6BEB              //
1571+ 6BEB              // @            a -- n
1572+ 6BEB              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1573+ 6BEB                              New_Def FETCH, "@", is_code, is_normal
1573+ 6BEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1573+ 6BEB             >
1573+ 6BEB             >                // dummy db directives used to calculate length of namec
1573+ 6BEB 40          >                db      "@"
1573+ 6BEC             >len_NFA         defl    $ - temp_NFA
1573+ 6BEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1573+ 6BEB             >
1573+ 6BEB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1573+ 6BEC 40          >                db      "@"               // name string in 7-bit ascii, but
1573+ 6BED             >                org     $-1                 // alter last byte of Name just above to set
1573+ 6BEC C0          >                db      {b $} | END_BIT     // msb as name end
1573+ 6BED             >
1573+ 6BED D9 6B       >                dw      last_NFA            // Link to previous definition Name
1573+ 6BEF             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1573+ 6BEF ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1573+ 6BEF             >                else
1573+ 6BEF F1 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1573+ 6BF1             >                endif           ; ok        // for other definitions it "points" the correct handler
1573+ 6BF1             >                // Use of "; ok" to suppress "warning[fwdref]"
1573+ 6BF1             >
1573+ 6BF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1574+ 6BF1 E1                           pop     hl
1575+ 6BF2 5E                           ld      e, (hl)             // low-byte
1576+ 6BF3 23                           inc     hl
1577+ 6BF4 56                           ld      d, (hl)             // high-byte
1578+ 6BF5 D5                           push    de
1579+ 6BF6                              next
1579+ 6BF6 DD E9       >                jp      (ix)
1580+ 6BF8
1581+ 6BF8              //  ______________________________________________________________________
1582+ 6BF8              //
1583+ 6BF8              // !            n a --
1584+ 6BF8              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1585+ 6BF8                              New_Def STORE, "!", is_code, is_normal
1585+ 6BF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1585+ 6BF8             >
1585+ 6BF8             >                // dummy db directives used to calculate length of namec
1585+ 6BF8 21          >                db      "!"
1585+ 6BF9             >len_NFA         defl    $ - temp_NFA
1585+ 6BF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1585+ 6BF8             >
1585+ 6BF8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1585+ 6BF9 21          >                db      "!"               // name string in 7-bit ascii, but
1585+ 6BFA             >                org     $-1                 // alter last byte of Name just above to set
1585+ 6BF9 A1          >                db      {b $} | END_BIT     // msb as name end
1585+ 6BFA             >
1585+ 6BFA EB 6B       >                dw      last_NFA            // Link to previous definition Name
1585+ 6BFC             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1585+ 6BFC ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1585+ 6BFC             >                else
1585+ 6BFC FE 6B       >                dw      $ + 2   ; ok        // is pointed by CFA
1585+ 6BFE             >                endif           ; ok        // for other definitions it "points" the correct handler
1585+ 6BFE             >                // Use of "; ok" to suppress "warning[fwdref]"
1585+ 6BFE             >
1585+ 6BFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1586+ 6BFE E1                           pop     hl                  // address
1587+ 6BFF D1                           pop     de                  // < n
1588+ 6C00 73                           ld      (hl), e             // low-byte
1589+ 6C01 23                           inc     hl
1590+ 6C02 72                           ld      (hl), d             // high-byte
1591+ 6C03
1592+ 6C03                              next
1592+ 6C03 DD E9       >                jp      (ix)
1593+ 6C05
1594+ 6C05              //  ______________________________________________________________________
1595+ 6C05              //
1596+ 6C05              // c@           a -- c
1597+ 6C05              // fetch a character n from address a
1598+ 6C05                              New_Def CFETCH, "C@", is_code, is_normal
1598+ 6C05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1598+ 6C05             >
1598+ 6C05             >                // dummy db directives used to calculate length of namec
1598+ 6C05 43 40       >                db      "C@"
1598+ 6C07             >len_NFA         defl    $ - temp_NFA
1598+ 6C07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1598+ 6C05             >
1598+ 6C05 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1598+ 6C06 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1598+ 6C08             >                org     $-1                 // alter last byte of Name just above to set
1598+ 6C07 C0          >                db      {b $} | END_BIT     // msb as name end
1598+ 6C08             >
1598+ 6C08 F8 6B       >                dw      last_NFA            // Link to previous definition Name
1598+ 6C0A             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1598+ 6C0A ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1598+ 6C0A             >                else
1598+ 6C0A 0C 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1598+ 6C0C             >                endif           ; ok        // for other definitions it "points" the correct handler
1598+ 6C0C             >                // Use of "; ok" to suppress "warning[fwdref]"
1598+ 6C0C             >
1598+ 6C0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1599+ 6C0C E1                           pop     hl
1600+ 6C0D 6E                           ld      l, (hl)             // low-byte
1601+ 6C0E 26 00                        ld      h, 0
1602+ 6C10
1603+ 6C10                              psh1
1603+ 6C10 E5          >                push    hl
1603+ 6C11 DD E9       >                jp      (ix)
1604+ 6C13
1605+ 6C13              //  ______________________________________________________________________
1606+ 6C13              //
1607+ 6C13              // c!           c a --
1608+ 6C13              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1609+ 6C13                              New_Def CSTORE, "C!", is_code, is_normal
1609+ 6C13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1609+ 6C13             >
1609+ 6C13             >                // dummy db directives used to calculate length of namec
1609+ 6C13 43 21       >                db      "C!"
1609+ 6C15             >len_NFA         defl    $ - temp_NFA
1609+ 6C15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1609+ 6C13             >
1609+ 6C13 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1609+ 6C14 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1609+ 6C16             >                org     $-1                 // alter last byte of Name just above to set
1609+ 6C15 A1          >                db      {b $} | END_BIT     // msb as name end
1609+ 6C16             >
1609+ 6C16 05 6C       >                dw      last_NFA            // Link to previous definition Name
1609+ 6C18             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1609+ 6C18 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1609+ 6C18             >                else
1609+ 6C18 1A 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1609+ 6C1A             >                endif           ; ok        // for other definitions it "points" the correct handler
1609+ 6C1A             >                // Use of "; ok" to suppress "warning[fwdref]"
1609+ 6C1A             >
1609+ 6C1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1610+ 6C1A E1                           pop     hl                  // < address
1611+ 6C1B D1                           pop     de
1612+ 6C1C 73                           ld      (hl), e             // low-byte
1613+ 6C1D
1614+ 6C1D                              next
1614+ 6C1D DD E9       >                jp      (ix)
1615+ 6C1F
1616+ 6C1F              //  ______________________________________________________________________
1617+ 6C1F              //
1618+ 6C1F              // 2@           a -- d
1619+ 6C1F              // fetch a 32 bits number d from address a and leaves it on top of the
1620+ 6C1F              // stack as two single numbers, high part as top of the stack.
1621+ 6C1F              // A double number is normally kept in CPU registers as HLDE.
1622+ 6C1F              // On stack a double number is treated as two single numbers
1623+ 6C1F              // where BC is on the top of the stack and HL is the second from top,
1624+ 6C1F              // so the sign of the number can be checked on top of stack
1625+ 6C1F              // and in the stack memory it appears as LHED.
1626+ 6C1F              // Instead, a 32 bits number d is kept in memory as EDLH
1627+ 6C1F              // with the lowest significant word in the lower location
1628+ 6C1F              // and the highest significant word in the higher location.
1629+ 6C1F              // fetch 32 bit number n from address a.
1630+ 6C1F                              New_Def TWO_FETCH, "2@", is_code, is_normal
1630+ 6C1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1630+ 6C1F             >
1630+ 6C1F             >                // dummy db directives used to calculate length of namec
1630+ 6C1F 32 40       >                db      "2@"
1630+ 6C21             >len_NFA         defl    $ - temp_NFA
1630+ 6C21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1630+ 6C1F             >
1630+ 6C1F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1630+ 6C20 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1630+ 6C22             >                org     $-1                 // alter last byte of Name just above to set
1630+ 6C21 C0          >                db      {b $} | END_BIT     // msb as name end
1630+ 6C22             >
1630+ 6C22 13 6C       >                dw      last_NFA            // Link to previous definition Name
1630+ 6C24             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1630+ 6C24 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1630+ 6C24             >                else
1630+ 6C24 26 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1630+ 6C26             >                endif           ; ok        // for other definitions it "points" the correct handler
1630+ 6C26             >                // Use of "; ok" to suppress "warning[fwdref]"
1630+ 6C26             >
1630+ 6C26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1631+ 6C26 E1                           pop     hl                  // address
1632+ 6C27 5E                           ld      e, (hl)             // low-byte
1633+ 6C28 23                           inc     hl
1634+ 6C29 56                           ld      d, (hl)             // high-byte
1635+ 6C2A
1636+ 6C2A 23                           inc     hl
1637+ 6C2B 7E                           ld      a, (hl)             // low-byte
1638+ 6C2C 23                           inc     hl
1639+ 6C2D 66                           ld      h, (hl)             // high-byte
1640+ 6C2E 6F                           ld      l, a
1641+ 6C2F                              psh2
1641+ 6C2F D5          >                push    de
1641+ 6C30 E5          >                push    hl
1641+ 6C31 DD E9       >                jp      (ix)
1642+ 6C33
1643+ 6C33              //  ______________________________________________________________________
1644+ 6C33              //
1645+ 6C33              // 2!           d a --
1646+ 6C33              // stores a 32 bits number d from address a and leaves it on top of the
1647+ 6C33              // stack as two single numbers, high part as top of the stack.
1648+ 6C33              // A double number is normally kept in CPU registers as HLDE.
1649+ 6C33              // On stack a double number is treated as two single numbers
1650+ 6C33              // where BC is on the top of the stack and HL is the second from top,
1651+ 6C33              // so the sign of the number can be checked on top of stack
1652+ 6C33              // and in the stack memory it appears as LHED.
1653+ 6C33              // Instead, a 32 bits number d is kept in memory as EDLH
1654+ 6C33              // with the lowest significant word in the lower location
1655+ 6C33              // and the highest significant word in the higher location.
1656+ 6C33              // fetch 32 bit number n from address a.
1657+ 6C33                              New_Def TWO_STORE, "2!", is_code, is_normal
1657+ 6C33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1657+ 6C33             >
1657+ 6C33             >                // dummy db directives used to calculate length of namec
1657+ 6C33 32 21       >                db      "2!"
1657+ 6C35             >len_NFA         defl    $ - temp_NFA
1657+ 6C35             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1657+ 6C33             >
1657+ 6C33 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1657+ 6C34 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1657+ 6C36             >                org     $-1                 // alter last byte of Name just above to set
1657+ 6C35 A1          >                db      {b $} | END_BIT     // msb as name end
1657+ 6C36             >
1657+ 6C36 1F 6C       >                dw      last_NFA            // Link to previous definition Name
1657+ 6C38             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1657+ 6C38 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1657+ 6C38             >                else
1657+ 6C38 3A 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1657+ 6C3A             >                endif           ; ok        // for other definitions it "points" the correct handler
1657+ 6C3A             >                // Use of "; ok" to suppress "warning[fwdref]"
1657+ 6C3A             >
1657+ 6C3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1658+ 6C3A 60                           ld      h, b
1659+ 6C3B 69                           ld      l, c
1660+ 6C3C D1                           pop     de                  // de has address
1661+ 6C3D C1                           pop     bc                  // < high-part
1662+ 6C3E E3                           ex      (sp), hl            // < low-part > Instruction Pointer
1663+ 6C3F EB                           ex      de, hl
1664+ 6C40 73                           ld      (hl), e
1665+ 6C41 23                           inc     hl
1666+ 6C42 72                           ld      (hl), d
1667+ 6C43 23                           inc     hl
1668+ 6C44 71                           ld      (hl), c
1669+ 6C45 23                           inc     hl
1670+ 6C46 70                           ld      (hl), b
1671+ 6C47 C1                           pop     bc                  // Restore Instruction Pointer
1672+ 6C48
1673+ 6C48                              next
1673+ 6C48 DD E9       >                jp      (ix)
1674+ 6C4A
1675+ 6C4A              //  ______________________________________________________________________
1676+ 6C4A              //
1677+ 6C4A              // p@           a -- c
1678+ 6C4A              // Read one byte from port a and leave the result on top of stack
1679+ 6C4A                              New_Def PFETCH, "P@", is_code, is_normal
1679+ 6C4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1679+ 6C4A             >
1679+ 6C4A             >                // dummy db directives used to calculate length of namec
1679+ 6C4A 50 40       >                db      "P@"
1679+ 6C4C             >len_NFA         defl    $ - temp_NFA
1679+ 6C4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1679+ 6C4A             >
1679+ 6C4A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1679+ 6C4B 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1679+ 6C4D             >                org     $-1                 // alter last byte of Name just above to set
1679+ 6C4C C0          >                db      {b $} | END_BIT     // msb as name end
1679+ 6C4D             >
1679+ 6C4D 33 6C       >                dw      last_NFA            // Link to previous definition Name
1679+ 6C4F             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1679+ 6C4F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1679+ 6C4F             >                else
1679+ 6C4F 51 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1679+ 6C51             >                endif           ; ok        // for other definitions it "points" the correct handler
1679+ 6C51             >                // Use of "; ok" to suppress "warning[fwdref]"
1679+ 6C51             >
1679+ 6C51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1680+ 6C51 50                           ld      d, b
1681+ 6C52 59                           ld      e, c
1682+ 6C53
1683+ 6C53 C1                           pop     bc
1684+ 6C54 26 00                        ld      h, 0
1685+ 6C56 ED 68                        in      l, (c)
1686+ 6C58 42                           ld      b, d
1687+ 6C59 4B                           ld      c, e
1688+ 6C5A                              psh1
1688+ 6C5A E5          >                push    hl
1688+ 6C5B DD E9       >                jp      (ix)
1689+ 6C5D
1690+ 6C5D              //  ______________________________________________________________________
1691+ 6C5D              //
1692+ 6C5D              // p!           c a --
1693+ 6C5D              // Send one byte (top of stack) to port a
1694+ 6C5D                              New_Def PSTORE, "P!", is_code, is_normal
1694+ 6C5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1694+ 6C5D             >
1694+ 6C5D             >                // dummy db directives used to calculate length of namec
1694+ 6C5D 50 21       >                db      "P!"
1694+ 6C5F             >len_NFA         defl    $ - temp_NFA
1694+ 6C5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1694+ 6C5D             >
1694+ 6C5D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1694+ 6C5E 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1694+ 6C60             >                org     $-1                 // alter last byte of Name just above to set
1694+ 6C5F A1          >                db      {b $} | END_BIT     // msb as name end
1694+ 6C60             >
1694+ 6C60 4A 6C       >                dw      last_NFA            // Link to previous definition Name
1694+ 6C62             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1694+ 6C62 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1694+ 6C62             >                else
1694+ 6C62 64 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1694+ 6C64             >                endif           ; ok        // for other definitions it "points" the correct handler
1694+ 6C64             >                // Use of "; ok" to suppress "warning[fwdref]"
1694+ 6C64             >
1694+ 6C64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1695+ 6C64 50                           ld      d, b
1696+ 6C65 59                           ld      e, c
1697+ 6C66
1698+ 6C66 C1                           pop     bc
1699+ 6C67 E1                           pop     hl                  // < c
1700+ 6C68 ED 69                        out     (c), l              // low-byte
1701+ 6C6A 42                           ld      b, d
1702+ 6C6B 4B                           ld      c, e
1703+ 6C6C
1704+ 6C6C                              next
1704+ 6C6C DD E9       >                jp      (ix)
1705+ 6C6E
1706+ 6C6E
1707+ 6C6E              //  ______________________________________________________________________
1708+ 6C6E              //
1709+ 6C6E              // 2*           n1 -- n2
1710+ 6C6E              // doubles the number at top of stack
1711+ 6C6E                              New_Def TWO_MUL, "2*", is_code, is_normal
1711+ 6C6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1711+ 6C6E             >
1711+ 6C6E             >                // dummy db directives used to calculate length of namec
1711+ 6C6E 32 2A       >                db      "2*"
1711+ 6C70             >len_NFA         defl    $ - temp_NFA
1711+ 6C70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1711+ 6C6E             >
1711+ 6C6E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1711+ 6C6F 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1711+ 6C71             >                org     $-1                 // alter last byte of Name just above to set
1711+ 6C70 AA          >                db      {b $} | END_BIT     // msb as name end
1711+ 6C71             >
1711+ 6C71 5D 6C       >                dw      last_NFA            // Link to previous definition Name
1711+ 6C73             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1711+ 6C73 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1711+ 6C73             >                else
1711+ 6C73 75 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1711+ 6C75             >                endif           ; ok        // for other definitions it "points" the correct handler
1711+ 6C75             >                // Use of "; ok" to suppress "warning[fwdref]"
1711+ 6C75             >
1711+ 6C75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1712+ 6C75              Two_Mul_Ptr:
1713+ 6C75 E1                           pop     hl
1714+ 6C76 29                           add     hl, hl
1715+ 6C77
1716+ 6C77                              psh1
1716+ 6C77 E5          >                push    hl
1716+ 6C78 DD E9       >                jp      (ix)
1717+ 6C7A
1718+ 6C7A              //  ______________________________________________________________________
1719+ 6C7A              //
1720+ 6C7A              // 2/           n1 -- n2
1721+ 6C7A              // halves the top of stack, sign is unchanged
1722+ 6C7A                              New_Def TWO_DIV, "2/", is_code, is_normal
1722+ 6C7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1722+ 6C7A             >
1722+ 6C7A             >                // dummy db directives used to calculate length of namec
1722+ 6C7A 32 2F       >                db      "2/"
1722+ 6C7C             >len_NFA         defl    $ - temp_NFA
1722+ 6C7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1722+ 6C7A             >
1722+ 6C7A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1722+ 6C7B 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1722+ 6C7D             >                org     $-1                 // alter last byte of Name just above to set
1722+ 6C7C AF          >                db      {b $} | END_BIT     // msb as name end
1722+ 6C7D             >
1722+ 6C7D 6E 6C       >                dw      last_NFA            // Link to previous definition Name
1722+ 6C7F             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1722+ 6C7F ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1722+ 6C7F             >                else
1722+ 6C7F 81 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1722+ 6C81             >                endif           ; ok        // for other definitions it "points" the correct handler
1722+ 6C81             >                // Use of "; ok" to suppress "warning[fwdref]"
1722+ 6C81             >
1722+ 6C81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1723+ 6C81 E1                           pop     hl
1724+ 6C82 CB 2C                        sra     h
1725+ 6C84 CB 1D                        rr      l
1726+ 6C86
1727+ 6C86                              psh1
1727+ 6C86 E5          >                push    hl
1727+ 6C87 DD E9       >                jp      (ix)
1728+ 6C89
1729+ 6C89              //  ______________________________________________________________________
1730+ 6C89              //
1731+ 6C89              // lshift       n1 u -- n2
1732+ 6C89              // bit left shift of u bits
1733+ 6C89                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1733+ 6C89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1733+ 6C89             >
1733+ 6C89             >                // dummy db directives used to calculate length of namec
1733+ 6C89 4C 53 48 49 >                db      "LSHIFT"
1733+ 6C8D 46 54       >
1733+ 6C8F             >len_NFA         defl    $ - temp_NFA
1733+ 6C8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1733+ 6C89             >
1733+ 6C89 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1733+ 6C8A 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1733+ 6C8E 46 54       >
1733+ 6C90             >                org     $-1                 // alter last byte of Name just above to set
1733+ 6C8F D4          >                db      {b $} | END_BIT     // msb as name end
1733+ 6C90             >
1733+ 6C90 7A 6C       >                dw      last_NFA            // Link to previous definition Name
1733+ 6C92             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1733+ 6C92 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1733+ 6C92             >                else
1733+ 6C92 94 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1733+ 6C94             >                endif           ; ok        // for other definitions it "points" the correct handler
1733+ 6C94             >                // Use of "; ok" to suppress "warning[fwdref]"
1733+ 6C94             >
1733+ 6C94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1734+ 6C94 D1                           pop     de
1735+ 6C95
1736+ 6C95 E1                           pop     hl
1737+ 6C96 7B                           ld      a, e
1738+ 6C97 B7                           or      a
1739+ 6C98 28 04                        jr      z, Lshift_Zero
1740+ 6C9A              Lshift_Loop:
1741+ 6C9A 29                                   add     hl, hl
1742+ 6C9B 3D                                   dec     a
1743+ 6C9C 20 FC                            jr      nz, Lshift_Loop
1744+ 6C9E              Lshift_Zero:
1745+ 6C9E
1746+ 6C9E
1747+ 6C9E                              psh1
1747+ 6C9E E5          >                push    hl
1747+ 6C9F DD E9       >                jp      (ix)
1748+ 6CA1
1749+ 6CA1              //  ______________________________________________________________________
1750+ 6CA1              //
1751+ 6CA1              // rshift       n1 u -- n2
1752+ 6CA1              // bit right shift of u bits
1753+ 6CA1                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1753+ 6CA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1753+ 6CA1             >
1753+ 6CA1             >                // dummy db directives used to calculate length of namec
1753+ 6CA1 52 53 48 49 >                db      "RSHIFT"
1753+ 6CA5 46 54       >
1753+ 6CA7             >len_NFA         defl    $ - temp_NFA
1753+ 6CA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1753+ 6CA1             >
1753+ 6CA1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1753+ 6CA2 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1753+ 6CA6 46 54       >
1753+ 6CA8             >                org     $-1                 // alter last byte of Name just above to set
1753+ 6CA7 D4          >                db      {b $} | END_BIT     // msb as name end
1753+ 6CA8             >
1753+ 6CA8 89 6C       >                dw      last_NFA            // Link to previous definition Name
1753+ 6CAA             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1753+ 6CAA ~           >                dw      runcode ; ok        // for primitive definitions  actual code
1753+ 6CAA             >                else
1753+ 6CAA AC 6C       >                dw      $ + 2   ; ok        // is pointed by CFA
1753+ 6CAC             >                endif           ; ok        // for other definitions it "points" the correct handler
1753+ 6CAC             >                // Use of "; ok" to suppress "warning[fwdref]"
1753+ 6CAC             >
1753+ 6CAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1754+ 6CAC D1                           pop     de
1755+ 6CAD
1756+ 6CAD E1                           pop     hl
1757+ 6CAE 7B                           ld      a, e
1758+ 6CAF B7                           or      a
1759+ 6CB0 28 07                        jr      z, Rshift_Zero
1760+ 6CB2              Rshift_Loop:
1761+ 6CB2 CB 3C                                srl     h
1762+ 6CB4 CB 1D                                rr      l
1763+ 6CB6 3D                                   dec     a
1764+ 6CB7 20 F9                            jr      nz, Rshift_Loop
1765+ 6CB9              Rshift_Zero:
1766+ 6CB9
1767+ 6CB9
1768+ 6CB9                              psh1
1768+ 6CB9 E5          >                push    hl
1768+ 6CBA DD E9       >                jp      (ix)
1769+ 6CBC
1770+ 6CBC              //  ______________________________________________________________________
1771+ 6CBC              //
1772+ 6CBC              // cells        n1 -- n2
1773+ 6CBC              // decrement by 2 top of stack
1774+ 6CBC                              New_Def CELLS, "CELLS", Two_Mul_Ptr, is_normal
1774+ 6CBC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1774+ 6CBC             >
1774+ 6CBC             >                // dummy db directives used to calculate length of namec
1774+ 6CBC 43 45 4C 4C >                db      "CELLS"
1774+ 6CC0 53          >
1774+ 6CC1             >len_NFA         defl    $ - temp_NFA
1774+ 6CC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1774+ 6CBC             >
1774+ 6CBC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1774+ 6CBD 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1774+ 6CC1 53          >
1774+ 6CC2             >                org     $-1                 // alter last byte of Name just above to set
1774+ 6CC1 D3          >                db      {b $} | END_BIT     // msb as name end
1774+ 6CC2             >
1774+ 6CC2 A1 6C       >                dw      last_NFA            // Link to previous definition Name
1774+ 6CC4             >CELLS:          if Two_Mul_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1774+ 6CC4 75 6C       >                dw      Two_Mul_Ptr ; ok        // for primitive definitions  actual code
1774+ 6CC6             >                else
1774+ 6CC6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1774+ 6CC6             >                endif           ; ok        // for other definitions it "points" the correct handler
1774+ 6CC6             >                // Use of "; ok" to suppress "warning[fwdref]"
1774+ 6CC6             >
1774+ 6CC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1775+ 6CC6
1776+ 6CC6
1777+ 6CC6              //  ______________________________________________________________________
1778+ 6CC6
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L0.asm
 109  6CC6                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
   1+ 6CC6              //  ______________________________________________________________________
   2+ 6CC6              //
   3+ 6CC6              //  L1.asm
   4+ 6CC6              //
   5+ 6CC6              //  Level-1 definitions and derivate
   6+ 6CC6              //  ______________________________________________________________________
   7+ 6CC6
   8+ 6CC6              //  ______________________________________________________________________
   9+ 6CC6              //
  10+ 6CC6              // :            -- cccc     ( compile time )
  11+ 6CC6              //              i*x -- j*x  ( run time )
  12+ 6CC6              // Colon Definition
  13+ 6CC6                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6CC6             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6CC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6CC6             >
  13+ 6CC6             >                // dummy db directives used to calculate length of namec
  13+ 6CC6 3A          >                db      ":"
  13+ 6CC7             >len_NFA         defl    $ - temp_NFA
  13+ 6CC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6CC6             >
  13+ 6CC6 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6CC7 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6CC8             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6CC7 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6CC8             >
  13+ 6CC8 BC 6C       >                dw      last_NFA            // Link to previous definition Name
  13+ 6CCA             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6CCA E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6CCC             >                else
  13+ 6CCC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 6CCC             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6CCC             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6CCC             >
  13+ 6CCC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6CCC
  15+ 6CCC 2A 71                        dw      QEXEC                   // ?exec
  16+ 6CCE E5 70                        dw      STORE_CSP               // !csp
  17+ 6CD0 9B 6E EF 6B                  dw      CURRENT, FETCH          // current @
  18+ 6CD4 8E 6E FC 6B                  dw      CONTEXT, STORE          // context !
  19+ 6CD8 C0 76                        dw      CREATE                  // create  ( forward )
  20+ 6CDA C4 71                        dw      SMUDGE                  // dmudge
  21+ 6CDC AF 71                        dw      SQUARED_CLOSE           // ]
  22+ 6CDE 1A 72                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6CE0                                                              // ... immediate
  24+ 6CE0              Enter_Ptr:
  25+ 6CE0                              // via call coded in CFA
  26+ 6CE0                              ldhlrp
  26+ 6CE0 2A 30 64    >                ld      hl,(RP_Pointer)
  27+ 6CE3 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6CE4 70                           ld      (hl), b
  29+ 6CE5 2B                           dec     hl
  30+ 6CE6 71                           ld      (hl), c
  31+ 6CE7                              ldrphl
  31+ 6CE7 22 30 64    >                ld      (RP_Pointer),hl
  32+ 6CEA 13                           inc     de
  33+ 6CEB 4B                           ld      c, e
  34+ 6CEC 42                           ld      b, d
  35+ 6CED                              next
  35+ 6CED DD E9       >                jp      (ix)
  36+ 6CEF
  37+ 6CEF              //  ______________________________________________________________________
  38+ 6CEF              //
  39+ 6CEF              // ;            --
  40+ 6CEF              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6CEF                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6CEF             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6CEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6CEF             >
  41+ 6CEF             >                // dummy db directives used to calculate length of namec
  41+ 6CEF 3B          >                db      ";"
  41+ 6CF0             >len_NFA         defl    $ - temp_NFA
  41+ 6CF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6CEF             >
  41+ 6CEF C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6CF0 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6CF1             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6CF0 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6CF1             >
  41+ 6CF1 C6 6C       >                dw      last_NFA            // Link to previous definition Name
  41+ 6CF3             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6CF3 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6CF5             >                else
  41+ 6CF5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  41+ 6CF5             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6CF5             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6CF5             >
  41+ 6CF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6CF5
  43+ 6CF5 54 71                        dw      QCSP                    // ?csp
  44+ 6CF7 8B 71 B6 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6CFB C4 71                        dw      SMUDGE                  // smudge
  46+ 6CFD A1 71                        dw      SQUARED_OPEN            // [
  47+ 6CFF B6 69                        dw      EXIT                    // ; immediate
  48+ 6D01
  49+ 6D01              //  ______________________________________________________________________
  50+ 6D01              //
  51+ 6D01              // noop         --
  52+ 6D01
  53+ 6D01                              Colon_Def NOOP, "NOOP", is_normal
  53+ 6D01             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 6D01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6D01             >
  53+ 6D01             >                // dummy db directives used to calculate length of namec
  53+ 6D01 4E 4F 4F 50 >                db      "NOOP"
  53+ 6D05             >len_NFA         defl    $ - temp_NFA
  53+ 6D05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6D01             >
  53+ 6D01 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6D02 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6D06             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6D05 D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6D06             >
  53+ 6D06 EF 6C       >                dw      last_NFA            // Link to previous definition Name
  53+ 6D08             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6D08 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 6D0A             >                else
  53+ 6D0A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  53+ 6D0A             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6D0A             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6D0A             >
  53+ 6D0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6D0A B6 69                        dw      EXIT
  55+ 6D0C
  56+ 6D0C              //  ______________________________________________________________________
  57+ 6D0C              //
  58+ 6D0C              // constant     n -- cccc     ( compile time )
  59+ 6D0C              //              -- n          ( run time )
  60+ 6D0C              // Constant definition.
  61+ 6D0C                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6D0C             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6D0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6D0C             >
  61+ 6D0C             >                // dummy db directives used to calculate length of namec
  61+ 6D0C 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6D10 54 41 4E 54 >
  61+ 6D14             >len_NFA         defl    $ - temp_NFA
  61+ 6D14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6D0C             >
  61+ 6D0C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6D0D 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6D11 54 41 4E 54 >
  61+ 6D15             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6D14 D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6D15             >
  61+ 6D15 01 6D       >                dw      last_NFA            // Link to previous definition Name
  61+ 6D17             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6D17 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6D19             >                else
  61+ 6D19 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  61+ 6D19             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6D19             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6D19             >
  61+ 6D19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6D19
  63+ 6D19 C0 76                        dw      CREATE                  // create
  64+ 6D1B 49 6F                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6D1D 1A 72                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6D1F              Constant_Ptr:
  67+ 6D1F
  68+ 6D1F 13                           inc     de
  69+ 6D20 EB                           ex      de, hl
  70+ 6D21
  71+ 6D21 5E                           ld      e, (hl)
  72+ 6D22 23                           inc     hl
  73+ 6D23 56                           ld      d, (hl)
  74+ 6D24 D5                           push    de
  75+ 6D25                              next
  75+ 6D25 DD E9       >                jp      (ix)
  76+ 6D27
  77+ 6D27              //  ______________________________________________________________________
  78+ 6D27              //
  79+ 6D27              // variable     n -- cccc     ( compile time )
  80+ 6D27              //              -- a          ( run time )
  81+ 6D27              // Variable definition, n is the initial value.
  82+ 6D27                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6D27             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6D27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6D27             >
  82+ 6D27             >                // dummy db directives used to calculate length of namec
  82+ 6D27 56 41 52 49 >                db      "VARIABLE"
  82+ 6D2B 41 42 4C 45 >
  82+ 6D2F             >len_NFA         defl    $ - temp_NFA
  82+ 6D2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6D27             >
  82+ 6D27 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6D28 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6D2C 41 42 4C 45 >
  82+ 6D30             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6D2F C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6D30             >
  82+ 6D30 0C 6D       >                dw      last_NFA            // Link to previous definition Name
  82+ 6D32             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6D32 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6D34             >                else
  82+ 6D34 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  82+ 6D34             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6D34             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6D34             >
  82+ 6D34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6D34
  84+ 6D34 17 6D                        dw      CONSTANT                // constant
  85+ 6D36 1A 72                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6D38              Variable_Ptr:
  87+ 6D38
  88+ 6D38 13                           inc     de
  89+ 6D39 D5                           push    de                  // balance TOS before overwrite it
  90+ 6D3A
  91+ 6D3A                              next
  91+ 6D3A DD E9       >                jp      (ix)
  92+ 6D3C
  93+ 6D3C              //  ______________________________________________________________________
  94+ 6D3C              //
  95+ 6D3C              // user         b -- cccc     ( compile time )
  96+ 6D3C              //              -- a          ( run time )
  97+ 6D3C              // User variable definition
  98+ 6D3C                              Colon_Def USER, "USER", is_normal
  98+ 6D3C             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6D3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6D3C             >
  98+ 6D3C             >                // dummy db directives used to calculate length of namec
  98+ 6D3C 55 53 45 52 >                db      "USER"
  98+ 6D40             >len_NFA         defl    $ - temp_NFA
  98+ 6D40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6D3C             >
  98+ 6D3C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6D3D 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6D41             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6D40 D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6D41             >
  98+ 6D41 27 6D       >                dw      last_NFA            // Link to previous definition Name
  98+ 6D43             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6D43 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6D45             >                else
  98+ 6D45 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  98+ 6D45             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6D45             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6D45             >
  98+ 6D45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6D45
 100+ 6D45 C0 76                        dw      CREATE                  // create
 101+ 6D47 5A 6F                        dw      CCOMMA                  // c,
 102+ 6D49 1A 72                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6D4B
 104+ 6D4B
 105+ 6D4B              User_Ptr:
 106+ 6D4B                              // via call coded in CFA
 107+ 6D4B 13                           inc     de
 108+ 6D4C EB                           ex      de, hl
 109+ 6D4D 5E                           ld      e, (hl)
 110+ 6D4E 16 00                        ld      d, 0
 111+ 6D50 2A 2E 64                     ld      hl, (USER_Pointer)
 112+ 6D53 19                           add     hl, de
 113+ 6D54
 114+ 6D54                              psh1
 114+ 6D54 E5          >                push    hl
 114+ 6D55 DD E9       >                jp      (ix)
 115+ 6D57
 116+ 6D57              //  ______________________________________________________________________
 117+ 6D57              //
 118+ 6D57                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6D57             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6D57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6D57             >
 118+ 6D57             >                // dummy db directives used to calculate length of namec
 118+ 6D57 30          >                db      "0"
 118+ 6D58             >len_NFA         defl    $ - temp_NFA
 118+ 6D58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6D57             >
 118+ 6D57 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6D58 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6D59             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6D58 B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6D59             >
 118+ 6D59 3C 6D       >                dw      last_NFA            // Link to previous definition Name
 118+ 6D5B             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6D5B 1F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6D5D             >                else
 118+ 6D5D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 118+ 6D5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6D5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6D5D             >
 118+ 6D5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6D5D 00 00       >                dw      0
 119+ 6D5F                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6D5F             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6D5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6D5F             >
 119+ 6D5F             >                // dummy db directives used to calculate length of namec
 119+ 6D5F 31          >                db      "1"
 119+ 6D60             >len_NFA         defl    $ - temp_NFA
 119+ 6D60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6D5F             >
 119+ 6D5F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6D60 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6D61             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6D60 B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6D61             >
 119+ 6D61 57 6D       >                dw      last_NFA            // Link to previous definition Name
 119+ 6D63             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6D63 1F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6D65             >                else
 119+ 6D65 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 119+ 6D65             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6D65             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6D65             >
 119+ 6D65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6D65 01 00       >                dw      1
 120+ 6D67                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6D67             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6D67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6D67             >
 120+ 6D67             >                // dummy db directives used to calculate length of namec
 120+ 6D67 32          >                db      "2"
 120+ 6D68             >len_NFA         defl    $ - temp_NFA
 120+ 6D68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6D67             >
 120+ 6D67 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6D68 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6D69             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6D68 B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6D69             >
 120+ 6D69 5F 6D       >                dw      last_NFA            // Link to previous definition Name
 120+ 6D6B             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6D6B 1F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6D6D             >                else
 120+ 6D6D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 120+ 6D6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6D6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6D6D             >
 120+ 6D6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6D6D 02 00       >                dw      2
 121+ 6D6F                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6D6F             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6D6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6D6F             >
 121+ 6D6F             >                // dummy db directives used to calculate length of namec
 121+ 6D6F 33          >                db      "3"
 121+ 6D70             >len_NFA         defl    $ - temp_NFA
 121+ 6D70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6D6F             >
 121+ 6D6F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6D70 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6D71             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6D70 B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6D71             >
 121+ 6D71 67 6D       >                dw      last_NFA            // Link to previous definition Name
 121+ 6D73             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6D73 1F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6D75             >                else
 121+ 6D75 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 121+ 6D75             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6D75             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6D75             >
 121+ 6D75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6D75 03 00       >                dw      3
 122+ 6D77                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6D77             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6D77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6D77             >
 122+ 6D77             >                // dummy db directives used to calculate length of namec
 122+ 6D77 2D 31       >                db      "-1"
 122+ 6D79             >len_NFA         defl    $ - temp_NFA
 122+ 6D79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6D77             >
 122+ 6D77 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6D78 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6D7A             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6D79 B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6D7A             >
 122+ 6D7A 6F 6D       >                dw      last_NFA            // Link to previous definition Name
 122+ 6D7C             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6D7C 1F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6D7E             >                else
 122+ 6D7E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 6D7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6D7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6D7E             >
 122+ 6D7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6D7E FF FF       >                dw      -1
 123+ 6D80                              Constant_Def BL         ,   "BL"    , $20
 123+ 6D80             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6D80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6D80             >
 123+ 6D80             >                // dummy db directives used to calculate length of namec
 123+ 6D80 42 4C       >                db      "BL"
 123+ 6D82             >len_NFA         defl    $ - temp_NFA
 123+ 6D82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6D80             >
 123+ 6D80 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6D81 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6D83             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6D82 CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6D83             >
 123+ 6D83 77 6D       >                dw      last_NFA            // Link to previous definition Name
 123+ 6D85             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6D85 1F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6D87             >                else
 123+ 6D87 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 123+ 6D87             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6D87             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6D87             >
 123+ 6D87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6D87 20 00       >                dw      $20
 124+ 6D89                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6D89             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6D89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6D89             >
 124+ 6D89             >                // dummy db directives used to calculate length of namec
 124+ 6D89 43 2F 4C    >                db      "C/L"
 124+ 6D8C             >len_NFA         defl    $ - temp_NFA
 124+ 6D8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6D89             >
 124+ 6D89 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6D8A 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6D8D             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6D8C CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6D8D             >
 124+ 6D8D 80 6D       >                dw      last_NFA            // Link to previous definition Name
 124+ 6D8F             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6D8F 1F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6D91             >                else
 124+ 6D91 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 124+ 6D91             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6D91             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6D91             >
 124+ 6D91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6D91 40 00       >                dw      64
 125+ 6D93                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6D93             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6D93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6D93             >
 125+ 6D93             >                // dummy db directives used to calculate length of namec
 125+ 6D93 42 2F 42 55 >                db      "B/BUF"
 125+ 6D97 46          >
 125+ 6D98             >len_NFA         defl    $ - temp_NFA
 125+ 6D98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6D93             >
 125+ 6D93 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6D94 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6D98 46          >
 125+ 6D99             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6D98 C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6D99             >
 125+ 6D99 89 6D       >                dw      last_NFA            // Link to previous definition Name
 125+ 6D9B             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6D9B 1F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6D9D             >                else
 125+ 6D9D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 125+ 6D9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6D9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6D9D             >
 125+ 6D9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6D9D 00 02       >                dw      512
 126+ 6D9F                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6D9F             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6D9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6D9F             >
 126+ 6D9F             >                // dummy db directives used to calculate length of namec
 126+ 6D9F 42 2F 53 43 >                db      "B/SCR"
 126+ 6DA3 52          >
 126+ 6DA4             >len_NFA         defl    $ - temp_NFA
 126+ 6DA4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6D9F             >
 126+ 6D9F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6DA0 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6DA4 52          >
 126+ 6DA5             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6DA4 D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6DA5             >
 126+ 6DA5 93 6D       >                dw      last_NFA            // Link to previous definition Name
 126+ 6DA7             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6DA7 1F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6DA9             >                else
 126+ 6DA9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 126+ 6DA9             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6DA9             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6DA9             >
 126+ 6DA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6DA9 02 00       >                dw      2
 127+ 6DAB                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6DAB             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6DAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6DAB             >
 127+ 6DAB             >                // dummy db directives used to calculate length of namec
 127+ 6DAB 4C 2F 53 43 >                db      "L/SCR"
 127+ 6DAF 52          >
 127+ 6DB0             >len_NFA         defl    $ - temp_NFA
 127+ 6DB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6DAB             >
 127+ 6DAB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6DAC 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6DB0 52          >
 127+ 6DB1             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6DB0 D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6DB1             >
 127+ 6DB1 9F 6D       >                dw      last_NFA            // Link to previous definition Name
 127+ 6DB3             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6DB3 1F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6DB5             >                else
 127+ 6DB5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 127+ 6DB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6DB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6DB5             >
 127+ 6DB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6DB5 10 00       >                dw      16
 128+ 6DB7
 129+ 6DB7              //  ______________________________________________________________________
 130+ 6DB7              //
 131+ 6DB7              // +origin         --
 132+ 6DB7                              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 132+ 6DB7             >                New_Def  PLUS_ORIGIN, "+ORIGIN", Enter_Ptr, is_normal ; ok
 132+ 6DB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 6DB7             >
 132+ 6DB7             >                // dummy db directives used to calculate length of namec
 132+ 6DB7 2B 4F 52 49 >                db      "+ORIGIN"
 132+ 6DBB 47 49 4E    >
 132+ 6DBE             >len_NFA         defl    $ - temp_NFA
 132+ 6DBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 6DB7             >
 132+ 6DB7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 6DB8 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 132+ 6DBC 47 49 4E    >
 132+ 6DBF             >                org     $-1                 // alter last byte of Name just above to set
 132+ 6DBE CE          >                db      {b $} | END_BIT     // msb as name end
 132+ 6DBF             >
 132+ 6DBF AB 6D       >                dw      last_NFA            // Link to previous definition Name
 132+ 6DC1             >PLUS_ORIGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 6DC1 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 132+ 6DC3             >                else
 132+ 6DC3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 132+ 6DC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 6DC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 6DC3             >
 132+ 6DC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 6DC3 45 64 00 64                  dw      LIT, Cold_origin        // [ hex 6400 ] literal
 134+ 6DC7 48 6A                        dw      PLUS                    // +
 135+ 6DC9 B6 69                        dw      EXIT                    // ;
 136+ 6DCB
 137+ 6DCB              //  ______________________________________________________________________
 138+ 6DCB              //
 139+ 6DCB                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 139+ 6DCB             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 139+ 6DCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 6DCB             >
 139+ 6DCB             >                // dummy db directives used to calculate length of namec
 139+ 6DCB 28 4E 45 58 >                db      "(NEXT)"
 139+ 6DCF 54 29       >
 139+ 6DD1             >len_NFA         defl    $ - temp_NFA
 139+ 6DD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 6DCB             >
 139+ 6DCB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 6DCC 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 139+ 6DD0 54 29       >
 139+ 6DD2             >                org     $-1                 // alter last byte of Name just above to set
 139+ 6DD1 A9          >                db      {b $} | END_BIT     // msb as name end
 139+ 6DD2             >
 139+ 6DD2 B7 6D       >                dw      last_NFA            // Link to previous definition Name
 139+ 6DD4             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 6DD4 1F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 139+ 6DD6             >                else
 139+ 6DD6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 139+ 6DD6             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 6DD6             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 6DD6             >
 139+ 6DD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6DD6 34 64       >                dw      Next_Ptr
 140+ 6DD8
 141+ 6DD8              //  ______________________________________________________________________
 142+ 6DD8              //
 143+ 6DD8
 144+ 6DD8                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 144+ 6DD8             >                New_Def  S0, "S0", User_Ptr, is_normal
 144+ 6DD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 6DD8             >
 144+ 6DD8             >                // dummy db directives used to calculate length of namec
 144+ 6DD8 53 30       >                db      "S0"
 144+ 6DDA             >len_NFA         defl    $ - temp_NFA
 144+ 6DDA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 6DD8             >
 144+ 6DD8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 6DD9 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 144+ 6DDB             >                org     $-1                 // alter last byte of Name just above to set
 144+ 6DDA B0          >                db      {b $} | END_BIT     // msb as name end
 144+ 6DDB             >
 144+ 6DDB CB 6D       >                dw      last_NFA            // Link to previous definition Name
 144+ 6DDD             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 6DDD 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 144+ 6DDF             >                else
 144+ 6DDF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 6DDF             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 6DDF             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 6DDF             >
 144+ 6DDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 6DDF 06          >                db      06
 145+ 6DE0                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 145+ 6DE0             >                New_Def  R0, "R0", User_Ptr, is_normal
 145+ 6DE0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 145+ 6DE0             >
 145+ 6DE0             >                // dummy db directives used to calculate length of namec
 145+ 6DE0 52 30       >                db      "R0"
 145+ 6DE2             >len_NFA         defl    $ - temp_NFA
 145+ 6DE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 145+ 6DE0             >
 145+ 6DE0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 145+ 6DE1 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 145+ 6DE3             >                org     $-1                 // alter last byte of Name just above to set
 145+ 6DE2 B0          >                db      {b $} | END_BIT     // msb as name end
 145+ 6DE3             >
 145+ 6DE3 D8 6D       >                dw      last_NFA            // Link to previous definition Name
 145+ 6DE5             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 145+ 6DE5 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 145+ 6DE7             >                else
 145+ 6DE7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 145+ 6DE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 145+ 6DE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 145+ 6DE7             >
 145+ 6DE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 6DE7 08          >                db      08
 146+ 6DE8                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 146+ 6DE8             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 146+ 6DE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 6DE8             >
 146+ 6DE8             >                // dummy db directives used to calculate length of namec
 146+ 6DE8 54 49 42    >                db      "TIB"
 146+ 6DEB             >len_NFA         defl    $ - temp_NFA
 146+ 6DEB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 6DE8             >
 146+ 6DE8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 6DE9 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 146+ 6DEC             >                org     $-1                 // alter last byte of Name just above to set
 146+ 6DEB C2          >                db      {b $} | END_BIT     // msb as name end
 146+ 6DEC             >
 146+ 6DEC E0 6D       >                dw      last_NFA            // Link to previous definition Name
 146+ 6DEE             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 6DEE 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 146+ 6DF0             >                else
 146+ 6DF0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 146+ 6DF0             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 6DF0             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 6DF0             >
 146+ 6DF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 6DF0 0A          >                db      10
 147+ 6DF1                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 147+ 6DF1             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 147+ 6DF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147+ 6DF1             >
 147+ 6DF1             >                // dummy db directives used to calculate length of namec
 147+ 6DF1 57 49 44 54 >                db      "WIDTH"
 147+ 6DF5 48          >
 147+ 6DF6             >len_NFA         defl    $ - temp_NFA
 147+ 6DF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147+ 6DF1             >
 147+ 6DF1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147+ 6DF2 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 147+ 6DF6 48          >
 147+ 6DF7             >                org     $-1                 // alter last byte of Name just above to set
 147+ 6DF6 C8          >                db      {b $} | END_BIT     // msb as name end
 147+ 6DF7             >
 147+ 6DF7 E8 6D       >                dw      last_NFA            // Link to previous definition Name
 147+ 6DF9             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 147+ 6DF9 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 147+ 6DFB             >                else
 147+ 6DFB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 147+ 6DFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 147+ 6DFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 147+ 6DFB             >
 147+ 6DFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 147+ 6DFB 0C          >                db      12
 148+ 6DFC                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 148+ 6DFC             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 148+ 6DFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 148+ 6DFC             >
 148+ 6DFC             >                // dummy db directives used to calculate length of namec
 148+ 6DFC 57 41 52 4E >                db      "WARNING"
 148+ 6E00 49 4E 47    >
 148+ 6E03             >len_NFA         defl    $ - temp_NFA
 148+ 6E03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 148+ 6DFC             >
 148+ 6DFC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 148+ 6DFD 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 148+ 6E01 49 4E 47    >
 148+ 6E04             >                org     $-1                 // alter last byte of Name just above to set
 148+ 6E03 C7          >                db      {b $} | END_BIT     // msb as name end
 148+ 6E04             >
 148+ 6E04 F1 6D       >                dw      last_NFA            // Link to previous definition Name
 148+ 6E06             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 148+ 6E06 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 148+ 6E08             >                else
 148+ 6E08 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 148+ 6E08             >                endif           ; ok        // for other definitions it "points" the correct handler
 148+ 6E08             >                // Use of "; ok" to suppress "warning[fwdref]"
 148+ 6E08             >
 148+ 6E08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 148+ 6E08 0E          >                db      14
 149+ 6E09                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 149+ 6E09             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 149+ 6E09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 149+ 6E09             >
 149+ 6E09             >                // dummy db directives used to calculate length of namec
 149+ 6E09 46 45 4E 43 >                db      "FENCE"
 149+ 6E0D 45          >
 149+ 6E0E             >len_NFA         defl    $ - temp_NFA
 149+ 6E0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 149+ 6E09             >
 149+ 6E09 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 149+ 6E0A 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 149+ 6E0E 45          >
 149+ 6E0F             >                org     $-1                 // alter last byte of Name just above to set
 149+ 6E0E C5          >                db      {b $} | END_BIT     // msb as name end
 149+ 6E0F             >
 149+ 6E0F FC 6D       >                dw      last_NFA            // Link to previous definition Name
 149+ 6E11             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 149+ 6E11 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 149+ 6E13             >                else
 149+ 6E13 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 149+ 6E13             >                endif           ; ok        // for other definitions it "points" the correct handler
 149+ 6E13             >                // Use of "; ok" to suppress "warning[fwdref]"
 149+ 6E13             >
 149+ 6E13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 149+ 6E13 10          >                db      16
 150+ 6E14                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 150+ 6E14             >                New_Def  DP, "DP", User_Ptr, is_normal
 150+ 6E14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ 6E14             >
 150+ 6E14             >                // dummy db directives used to calculate length of namec
 150+ 6E14 44 50       >                db      "DP"
 150+ 6E16             >len_NFA         defl    $ - temp_NFA
 150+ 6E16             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ 6E14             >
 150+ 6E14 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ 6E15 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 150+ 6E17             >                org     $-1                 // alter last byte of Name just above to set
 150+ 6E16 D0          >                db      {b $} | END_BIT     // msb as name end
 150+ 6E17             >
 150+ 6E17 09 6E       >                dw      last_NFA            // Link to previous definition Name
 150+ 6E19             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6E19 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 150+ 6E1B             >                else
 150+ 6E1B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 150+ 6E1B             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6E1B             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6E1B             >
 150+ 6E1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6E1B 12          >                db      18
 151+ 6E1C                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 151+ 6E1C             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 151+ 6E1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6E1C             >
 151+ 6E1C             >                // dummy db directives used to calculate length of namec
 151+ 6E1C 56 4F 43 2D >                db      "VOC-LINK"
 151+ 6E20 4C 49 4E 4B >
 151+ 6E24             >len_NFA         defl    $ - temp_NFA
 151+ 6E24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6E1C             >
 151+ 6E1C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6E1D 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 151+ 6E21 4C 49 4E 4B >
 151+ 6E25             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6E24 CB          >                db      {b $} | END_BIT     // msb as name end
 151+ 6E25             >
 151+ 6E25 14 6E       >                dw      last_NFA            // Link to previous definition Name
 151+ 6E27             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6E27 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6E29             >                else
 151+ 6E29 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 6E29             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6E29             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6E29             >
 151+ 6E29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6E29 14          >                db      20
 152+ 6E2A                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 152+ 6E2A             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 152+ 6E2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6E2A             >
 152+ 6E2A             >                // dummy db directives used to calculate length of namec
 152+ 6E2A 46 49 52 53 >                db      "FIRST"
 152+ 6E2E 54          >
 152+ 6E2F             >len_NFA         defl    $ - temp_NFA
 152+ 6E2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6E2A             >
 152+ 6E2A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6E2B 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 152+ 6E2F 54          >
 152+ 6E30             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6E2F D4          >                db      {b $} | END_BIT     // msb as name end
 152+ 6E30             >
 152+ 6E30 1C 6E       >                dw      last_NFA            // Link to previous definition Name
 152+ 6E32             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6E32 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6E34             >                else
 152+ 6E34 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 152+ 6E34             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6E34             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6E34             >
 152+ 6E34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6E34 16          >                db      22
 153+ 6E35                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 153+ 6E35             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 153+ 6E35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6E35             >
 153+ 6E35             >                // dummy db directives used to calculate length of namec
 153+ 6E35 4C 49 4D 49 >                db      "LIMIT"
 153+ 6E39 54          >
 153+ 6E3A             >len_NFA         defl    $ - temp_NFA
 153+ 6E3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6E35             >
 153+ 6E35 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6E36 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 153+ 6E3A 54          >
 153+ 6E3B             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6E3A D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 6E3B             >
 153+ 6E3B 2A 6E       >                dw      last_NFA            // Link to previous definition Name
 153+ 6E3D             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6E3D 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6E3F             >                else
 153+ 6E3F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 6E3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6E3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6E3F             >
 153+ 6E3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6E3F 18          >                db      24
 154+ 6E40                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 154+ 6E40             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 154+ 6E40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6E40             >
 154+ 6E40             >                // dummy db directives used to calculate length of namec
 154+ 6E40 45 58 50    >                db      "EXP"
 154+ 6E43             >len_NFA         defl    $ - temp_NFA
 154+ 6E43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6E40             >
 154+ 6E40 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6E41 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 154+ 6E44             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6E43 D0          >                db      {b $} | END_BIT     // msb as name end
 154+ 6E44             >
 154+ 6E44 35 6E       >                dw      last_NFA            // Link to previous definition Name
 154+ 6E46             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6E46 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6E48             >                else
 154+ 6E48 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 154+ 6E48             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6E48             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6E48             >
 154+ 6E48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6E48 1A          >                db      26
 155+ 6E49                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 155+ 6E49             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 155+ 6E49             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6E49             >
 155+ 6E49             >                // dummy db directives used to calculate length of namec
 155+ 6E49 4E 4D 4F 44 >                db      "NMODE"
 155+ 6E4D 45          >
 155+ 6E4E             >len_NFA         defl    $ - temp_NFA
 155+ 6E4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6E49             >
 155+ 6E49 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6E4A 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 155+ 6E4E 45          >
 155+ 6E4F             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6E4E C5          >                db      {b $} | END_BIT     // msb as name end
 155+ 6E4F             >
 155+ 6E4F 40 6E       >                dw      last_NFA            // Link to previous definition Name
 155+ 6E51             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6E51 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6E53             >                else
 155+ 6E53 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 155+ 6E53             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6E53             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6E53             >
 155+ 6E53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6E53 1C          >                db      28
 156+ 6E54                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 156+ 6E54             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 156+ 6E54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6E54             >
 156+ 6E54             >                // dummy db directives used to calculate length of namec
 156+ 6E54 42 4C 4B    >                db      "BLK"
 156+ 6E57             >len_NFA         defl    $ - temp_NFA
 156+ 6E57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6E54             >
 156+ 6E54 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6E55 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 156+ 6E58             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6E57 CB          >                db      {b $} | END_BIT     // msb as name end
 156+ 6E58             >
 156+ 6E58 49 6E       >                dw      last_NFA            // Link to previous definition Name
 156+ 6E5A             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6E5A 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6E5C             >                else
 156+ 6E5C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 6E5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6E5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6E5C             >
 156+ 6E5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6E5C 1E          >                db      30
 157+ 6E5D                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 157+ 6E5D             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 157+ 6E5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6E5D             >
 157+ 6E5D             >                // dummy db directives used to calculate length of namec
 157+ 6E5D 3E 49 4E    >                db      ">IN"
 157+ 6E60             >len_NFA         defl    $ - temp_NFA
 157+ 6E60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6E5D             >
 157+ 6E5D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6E5E 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 157+ 6E61             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6E60 CE          >                db      {b $} | END_BIT     // msb as name end
 157+ 6E61             >
 157+ 6E61 54 6E       >                dw      last_NFA            // Link to previous definition Name
 157+ 6E63             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6E63 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6E65             >                else
 157+ 6E65 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 157+ 6E65             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6E65             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6E65             >
 157+ 6E65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6E65 20          >                db      32
 158+ 6E66                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 158+ 6E66             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 158+ 6E66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6E66             >
 158+ 6E66             >                // dummy db directives used to calculate length of namec
 158+ 6E66 4F 55 54    >                db      "OUT"
 158+ 6E69             >len_NFA         defl    $ - temp_NFA
 158+ 6E69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6E66             >
 158+ 6E66 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6E67 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 158+ 6E6A             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6E69 D4          >                db      {b $} | END_BIT     // msb as name end
 158+ 6E6A             >
 158+ 6E6A 5D 6E       >                dw      last_NFA            // Link to previous definition Name
 158+ 6E6C             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6E6C 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6E6E             >                else
 158+ 6E6E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 158+ 6E6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6E6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6E6E             >
 158+ 6E6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6E6E 22          >                db      34
 159+ 6E6F                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 159+ 6E6F             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 159+ 6E6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6E6F             >
 159+ 6E6F             >                // dummy db directives used to calculate length of namec
 159+ 6E6F 53 43 52    >                db      "SCR"
 159+ 6E72             >len_NFA         defl    $ - temp_NFA
 159+ 6E72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6E6F             >
 159+ 6E6F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6E70 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 159+ 6E73             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6E72 D2          >                db      {b $} | END_BIT     // msb as name end
 159+ 6E73             >
 159+ 6E73 66 6E       >                dw      last_NFA            // Link to previous definition Name
 159+ 6E75             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6E75 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6E77             >                else
 159+ 6E77 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 159+ 6E77             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6E77             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6E77             >
 159+ 6E77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6E77 24          >                db      36
 160+ 6E78                              User_Def OFFSET     , "OFFSET"    , 38 //
 160+ 6E78             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 160+ 6E78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6E78             >
 160+ 6E78             >                // dummy db directives used to calculate length of namec
 160+ 6E78 4F 46 46 53 >                db      "OFFSET"
 160+ 6E7C 45 54       >
 160+ 6E7E             >len_NFA         defl    $ - temp_NFA
 160+ 6E7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6E78             >
 160+ 6E78 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6E79 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 160+ 6E7D 45 54       >
 160+ 6E7F             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6E7E D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6E7F             >
 160+ 6E7F 6F 6E       >                dw      last_NFA            // Link to previous definition Name
 160+ 6E81             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6E81 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6E83             >                else
 160+ 6E83 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 160+ 6E83             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6E83             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6E83             >
 160+ 6E83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6E83 26          >                db      38
 161+ 6E84                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 161+ 6E84             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 161+ 6E84             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6E84             >
 161+ 6E84             >                // dummy db directives used to calculate length of namec
 161+ 6E84 43 4F 4E 54 >                db      "CONTEXT"
 161+ 6E88 45 58 54    >
 161+ 6E8B             >len_NFA         defl    $ - temp_NFA
 161+ 6E8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6E84             >
 161+ 6E84 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6E85 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 161+ 6E89 45 58 54    >
 161+ 6E8C             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6E8B D4          >                db      {b $} | END_BIT     // msb as name end
 161+ 6E8C             >
 161+ 6E8C 78 6E       >                dw      last_NFA            // Link to previous definition Name
 161+ 6E8E             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6E8E 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6E90             >                else
 161+ 6E90 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 161+ 6E90             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6E90             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6E90             >
 161+ 6E90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6E90 28          >                db      40
 162+ 6E91                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 162+ 6E91             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 162+ 6E91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6E91             >
 162+ 6E91             >                // dummy db directives used to calculate length of namec
 162+ 6E91 43 55 52 52 >                db      "CURRENT"
 162+ 6E95 45 4E 54    >
 162+ 6E98             >len_NFA         defl    $ - temp_NFA
 162+ 6E98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6E91             >
 162+ 6E91 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6E92 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 162+ 6E96 45 4E 54    >
 162+ 6E99             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6E98 D4          >                db      {b $} | END_BIT     // msb as name end
 162+ 6E99             >
 162+ 6E99 84 6E       >                dw      last_NFA            // Link to previous definition Name
 162+ 6E9B             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6E9B 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6E9D             >                else
 162+ 6E9D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 162+ 6E9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6E9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6E9D             >
 162+ 6E9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6E9D 2A          >                db      42
 163+ 6E9E                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 163+ 6E9E             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 163+ 6E9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6E9E             >
 163+ 6E9E             >                // dummy db directives used to calculate length of namec
 163+ 6E9E 53 54 41 54 >                db      "STATE"
 163+ 6EA2 45          >
 163+ 6EA3             >len_NFA         defl    $ - temp_NFA
 163+ 6EA3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6E9E             >
 163+ 6E9E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6E9F 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 163+ 6EA3 45          >
 163+ 6EA4             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6EA3 C5          >                db      {b $} | END_BIT     // msb as name end
 163+ 6EA4             >
 163+ 6EA4 91 6E       >                dw      last_NFA            // Link to previous definition Name
 163+ 6EA6             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6EA6 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6EA8             >                else
 163+ 6EA8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 163+ 6EA8             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6EA8             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6EA8             >
 163+ 6EA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6EA8 2C          >                db      44
 164+ 6EA9                              User_Def BASE       , "BASE"      , 46 //
 164+ 6EA9             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 164+ 6EA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6EA9             >
 164+ 6EA9             >                // dummy db directives used to calculate length of namec
 164+ 6EA9 42 41 53 45 >                db      "BASE"
 164+ 6EAD             >len_NFA         defl    $ - temp_NFA
 164+ 6EAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6EA9             >
 164+ 6EA9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6EAA 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 164+ 6EAE             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6EAD C5          >                db      {b $} | END_BIT     // msb as name end
 164+ 6EAE             >
 164+ 6EAE 9E 6E       >                dw      last_NFA            // Link to previous definition Name
 164+ 6EB0             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6EB0 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6EB2             >                else
 164+ 6EB2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 164+ 6EB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6EB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6EB2             >
 164+ 6EB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6EB2 2E          >                db      46
 165+ 6EB3                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 165+ 6EB3             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 165+ 6EB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6EB3             >
 165+ 6EB3             >                // dummy db directives used to calculate length of namec
 165+ 6EB3 44 50 4C    >                db      "DPL"
 165+ 6EB6             >len_NFA         defl    $ - temp_NFA
 165+ 6EB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6EB3             >
 165+ 6EB3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6EB4 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 165+ 6EB7             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6EB6 CC          >                db      {b $} | END_BIT     // msb as name end
 165+ 6EB7             >
 165+ 6EB7 A9 6E       >                dw      last_NFA            // Link to previous definition Name
 165+ 6EB9             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6EB9 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6EBB             >                else
 165+ 6EBB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 6EBB             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6EBB             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6EBB             >
 165+ 6EBB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6EBB 30          >                db      48
 166+ 6EBC                              User_Def FLD        , "FLD"       , 50 // output field width
 166+ 6EBC             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 166+ 6EBC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6EBC             >
 166+ 6EBC             >                // dummy db directives used to calculate length of namec
 166+ 6EBC 46 4C 44    >                db      "FLD"
 166+ 6EBF             >len_NFA         defl    $ - temp_NFA
 166+ 6EBF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6EBC             >
 166+ 6EBC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6EBD 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 166+ 6EC0             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6EBF C4          >                db      {b $} | END_BIT     // msb as name end
 166+ 6EC0             >
 166+ 6EC0 B3 6E       >                dw      last_NFA            // Link to previous definition Name
 166+ 6EC2             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6EC2 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6EC4             >                else
 166+ 6EC4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 166+ 6EC4             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6EC4             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6EC4             >
 166+ 6EC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6EC4 32          >                db      50
 167+ 6EC5                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 167+ 6EC5             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 167+ 6EC5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6EC5             >
 167+ 6EC5             >                // dummy db directives used to calculate length of namec
 167+ 6EC5 43 53 50    >                db      "CSP"
 167+ 6EC8             >len_NFA         defl    $ - temp_NFA
 167+ 6EC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6EC5             >
 167+ 6EC5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6EC6 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 167+ 6EC9             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6EC8 D0          >                db      {b $} | END_BIT     // msb as name end
 167+ 6EC9             >
 167+ 6EC9 BC 6E       >                dw      last_NFA            // Link to previous definition Name
 167+ 6ECB             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6ECB 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6ECD             >                else
 167+ 6ECD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 6ECD             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6ECD             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6ECD             >
 167+ 6ECD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6ECD 34          >                db      52
 168+ 6ECE                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 168+ 6ECE             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 168+ 6ECE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6ECE             >
 168+ 6ECE             >                // dummy db directives used to calculate length of namec
 168+ 6ECE 52 23       >                db      "R#"
 168+ 6ED0             >len_NFA         defl    $ - temp_NFA
 168+ 6ED0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6ECE             >
 168+ 6ECE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6ECF 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 168+ 6ED1             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6ED0 A3          >                db      {b $} | END_BIT     // msb as name end
 168+ 6ED1             >
 168+ 6ED1 C5 6E       >                dw      last_NFA            // Link to previous definition Name
 168+ 6ED3             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6ED3 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6ED5             >                else
 168+ 6ED5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 168+ 6ED5             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6ED5             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6ED5             >
 168+ 6ED5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6ED5 36          >                db      54
 169+ 6ED6                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 169+ 6ED6             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 169+ 6ED6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6ED6             >
 169+ 6ED6             >                // dummy db directives used to calculate length of namec
 169+ 6ED6 48 4C 44    >                db      "HLD"
 169+ 6ED9             >len_NFA         defl    $ - temp_NFA
 169+ 6ED9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6ED6             >
 169+ 6ED6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6ED7 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 169+ 6EDA             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6ED9 C4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6EDA             >
 169+ 6EDA CE 6E       >                dw      last_NFA            // Link to previous definition Name
 169+ 6EDC             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6EDC 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6EDE             >                else
 169+ 6EDE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 169+ 6EDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6EDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6EDE             >
 169+ 6EDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6EDE 38          >                db      56
 170+ 6EDF                              User_Def USE        , "USE"       , 58 // address of last used block
 170+ 6EDF             >                New_Def  USE, "USE", User_Ptr, is_normal
 170+ 6EDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6EDF             >
 170+ 6EDF             >                // dummy db directives used to calculate length of namec
 170+ 6EDF 55 53 45    >                db      "USE"
 170+ 6EE2             >len_NFA         defl    $ - temp_NFA
 170+ 6EE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6EDF             >
 170+ 6EDF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6EE0 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 170+ 6EE3             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6EE2 C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 6EE3             >
 170+ 6EE3 D6 6E       >                dw      last_NFA            // Link to previous definition Name
 170+ 6EE5             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6EE5 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6EE7             >                else
 170+ 6EE7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 170+ 6EE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6EE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6EE7             >
 170+ 6EE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6EE7 3A          >                db      58
 171+ 6EE8                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 171+ 6EE8             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 171+ 6EE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6EE8             >
 171+ 6EE8             >                // dummy db directives used to calculate length of namec
 171+ 6EE8 50 52 45 56 >                db      "PREV"
 171+ 6EEC             >len_NFA         defl    $ - temp_NFA
 171+ 6EEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6EE8             >
 171+ 6EE8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6EE9 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 171+ 6EED             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6EEC D6          >                db      {b $} | END_BIT     // msb as name end
 171+ 6EED             >
 171+ 6EED DF 6E       >                dw      last_NFA            // Link to previous definition Name
 171+ 6EEF             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6EEF 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6EF1             >                else
 171+ 6EF1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 171+ 6EF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6EF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6EF1             >
 171+ 6EF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6EF1 3C          >                db      60
 172+ 6EF2                              User_Def LP         , "LP"        , 62 // line printer (not used)
 172+ 6EF2             >                New_Def  LP, "LP", User_Ptr, is_normal
 172+ 6EF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6EF2             >
 172+ 6EF2             >                // dummy db directives used to calculate length of namec
 172+ 6EF2 4C 50       >                db      "LP"
 172+ 6EF4             >len_NFA         defl    $ - temp_NFA
 172+ 6EF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6EF2             >
 172+ 6EF2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6EF3 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 172+ 6EF5             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6EF4 D0          >                db      {b $} | END_BIT     // msb as name end
 172+ 6EF5             >
 172+ 6EF5 E8 6E       >                dw      last_NFA            // Link to previous definition Name
 172+ 6EF7             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6EF7 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6EF9             >                else
 172+ 6EF9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 172+ 6EF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6EF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6EF9             >
 172+ 6EF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6EF9 3E          >                db      62
 173+ 6EFA                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 173+ 6EFA             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 173+ 6EFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6EFA             >
 173+ 6EFA             >                // dummy db directives used to calculate length of namec
 173+ 6EFA 50 4C 41 43 >                db      "PLACE"
 173+ 6EFE 45          >
 173+ 6EFF             >len_NFA         defl    $ - temp_NFA
 173+ 6EFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6EFA             >
 173+ 6EFA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6EFB 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 173+ 6EFF 45          >
 173+ 6F00             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6EFF C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 6F00             >
 173+ 6F00 F2 6E       >                dw      last_NFA            // Link to previous definition Name
 173+ 6F02             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6F02 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6F04             >                else
 173+ 6F04 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 6F04             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6F04             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6F04             >
 173+ 6F04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6F04 40          >                db      64
 174+ 6F05                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 174+ 6F05             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 174+ 6F05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6F05             >
 174+ 6F05             >                // dummy db directives used to calculate length of namec
 174+ 6F05 53 4F 55 52 >                db      "SOURCE-ID"
 174+ 6F09 43 45 2D 49 >
 174+ 6F0D 44          >
 174+ 6F0E             >len_NFA         defl    $ - temp_NFA
 174+ 6F0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6F05             >
 174+ 6F05 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6F06 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 174+ 6F0A 43 45 2D 49 >
 174+ 6F0E 44          >
 174+ 6F0F             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6F0E C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6F0F             >
 174+ 6F0F FA 6E       >                dw      last_NFA            // Link to previous definition Name
 174+ 6F11             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6F11 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6F13             >                else
 174+ 6F13 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 174+ 6F13             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6F13             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6F13             >
 174+ 6F13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6F13 42          >                db      66
 175+ 6F14                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 175+ 6F14             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 175+ 6F14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6F14             >
 175+ 6F14             >                // dummy db directives used to calculate length of namec
 175+ 6F14 53 50 41 4E >                db      "SPAN"
 175+ 6F18             >len_NFA         defl    $ - temp_NFA
 175+ 6F18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6F14             >
 175+ 6F14 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6F15 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 175+ 6F19             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6F18 CE          >                db      {b $} | END_BIT     // msb as name end
 175+ 6F19             >
 175+ 6F19 05 6F       >                dw      last_NFA            // Link to previous definition Name
 175+ 6F1B             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6F1B 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6F1D             >                else
 175+ 6F1D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 6F1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6F1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6F1D             >
 175+ 6F1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6F1D 44          >                db      68
 176+ 6F1E                              User_Def HP         , "HP"        , 70 // heap-pointer address
 176+ 6F1E             >                New_Def  HP, "HP", User_Ptr, is_normal
 176+ 6F1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6F1E             >
 176+ 6F1E             >                // dummy db directives used to calculate length of namec
 176+ 6F1E 48 50       >                db      "HP"
 176+ 6F20             >len_NFA         defl    $ - temp_NFA
 176+ 6F20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6F1E             >
 176+ 6F1E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6F1F 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 176+ 6F21             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6F20 D0          >                db      {b $} | END_BIT     // msb as name end
 176+ 6F21             >
 176+ 6F21 14 6F       >                dw      last_NFA            // Link to previous definition Name
 176+ 6F23             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6F23 4B 6D       >                dw      User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6F25             >                else
 176+ 6F25 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 176+ 6F25             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6F25             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6F25             >
 176+ 6F25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6F25 46          >                db      70
 177+ 6F26
 178+ 6F26              //  ______________________________________________________________________
 179+ 6F26              //
 180+ 6F26              // here         -- a
 181+ 6F26                              Colon_Def HERE, "HERE", is_normal
 181+ 6F26             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 181+ 6F26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6F26             >
 181+ 6F26             >                // dummy db directives used to calculate length of namec
 181+ 6F26 48 45 52 45 >                db      "HERE"
 181+ 6F2A             >len_NFA         defl    $ - temp_NFA
 181+ 6F2A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6F26             >
 181+ 6F26 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6F27 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 181+ 6F2B             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6F2A C5          >                db      {b $} | END_BIT     // msb as name end
 181+ 6F2B             >
 181+ 6F2B 1E 6F       >                dw      last_NFA            // Link to previous definition Name
 181+ 6F2D             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6F2D E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 181+ 6F2F             >                else
 181+ 6F2F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 181+ 6F2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6F2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6F2F             >
 181+ 6F2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6F2F 19 6E EF 6B                  dw      DP, FETCH               // dp @
 183+ 6F33 B6 69                        dw      EXIT                    // ;
 184+ 6F35
 185+ 6F35              //  ______________________________________________________________________
 186+ 6F35              //
 187+ 6F35              // allot        n --
 188+ 6F35                              Colon_Def ALLOT, "ALLOT", is_normal
 188+ 6F35             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 188+ 6F35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 6F35             >
 188+ 6F35             >                // dummy db directives used to calculate length of namec
 188+ 6F35 41 4C 4C 4F >                db      "ALLOT"
 188+ 6F39 54          >
 188+ 6F3A             >len_NFA         defl    $ - temp_NFA
 188+ 6F3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 6F35             >
 188+ 6F35 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 6F36 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 188+ 6F3A 54          >
 188+ 6F3B             >                org     $-1                 // alter last byte of Name just above to set
 188+ 6F3A D4          >                db      {b $} | END_BIT     // msb as name end
 188+ 6F3B             >
 188+ 6F3B 26 6F       >                dw      last_NFA            // Link to previous definition Name
 188+ 6F3D             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6F3D E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 188+ 6F3F             >                else
 188+ 6F3F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 188+ 6F3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6F3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6F3F             >
 188+ 6F3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 189+ 6F3F 19 6E CC 6B                  dw      DP,  PLUSSTORE          // dp +!
 190+ 6F43 B6 69                        dw      EXIT                    // ;
 191+ 6F45
 192+ 6F45              //  ______________________________________________________________________
 193+ 6F45              //
 194+ 6F45              // comma        n --
 195+ 6F45                              Colon_Def COMMA, ",", is_normal
 195+ 6F45             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 195+ 6F45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 6F45             >
 195+ 6F45             >                // dummy db directives used to calculate length of namec
 195+ 6F45 2C          >                db      ","
 195+ 6F46             >len_NFA         defl    $ - temp_NFA
 195+ 6F46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 6F45             >
 195+ 6F45 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 6F46 2C          >                db      ","               // name string in 7-bit ascii, but
 195+ 6F47             >                org     $-1                 // alter last byte of Name just above to set
 195+ 6F46 AC          >                db      {b $} | END_BIT     // msb as name end
 195+ 6F47             >
 195+ 6F47 35 6F       >                dw      last_NFA            // Link to previous definition Name
 195+ 6F49             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 6F49 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 6F4B             >                else
 195+ 6F4B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 6F4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 6F4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 6F4B             >
 195+ 6F4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 6F4B 2D 6F FC 6B                  dw      HERE, STORE             // here !
 197+ 6F4F 6B 6D 3D 6F                  dw      TWO, ALLOT              // 2 allot
 198+ 6F53 B6 69                        dw      EXIT                    // ;
 199+ 6F55
 200+ 6F55              //  ______________________________________________________________________
 201+ 6F55              //
 202+ 6F55              // ccomma       c --
 203+ 6F55                              Colon_Def CCOMMA, "C,", is_normal
 203+ 6F55             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 203+ 6F55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 203+ 6F55             >
 203+ 6F55             >                // dummy db directives used to calculate length of namec
 203+ 6F55 43 2C       >                db      "C,"
 203+ 6F57             >len_NFA         defl    $ - temp_NFA
 203+ 6F57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 203+ 6F55             >
 203+ 6F55 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 203+ 6F56 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 203+ 6F58             >                org     $-1                 // alter last byte of Name just above to set
 203+ 6F57 AC          >                db      {b $} | END_BIT     // msb as name end
 203+ 6F58             >
 203+ 6F58 45 6F       >                dw      last_NFA            // Link to previous definition Name
 203+ 6F5A             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 203+ 6F5A E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 203+ 6F5C             >                else
 203+ 6F5C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 203+ 6F5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 203+ 6F5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 203+ 6F5C             >
 203+ 6F5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 204+ 6F5C 2D 6F 18 6C                  dw      HERE, CSTORE            // here c!
 205+ 6F60 63 6D 3D 6F                  dw      ONE, ALLOT              // 1 allot
 206+ 6F64 B6 69                        dw      EXIT                    // ;
 207+ 6F66
 208+ 6F66              //  ______________________________________________________________________
 209+ 6F66              //
 210+ 6F66              // s->d         n -- d
 211+ 6F66              // converts a single precision integer in a double precision
 212+ 6F66                              New_Def S_TO_D, "S->D", is_code, is_normal
 212+ 6F66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 6F66             >
 212+ 6F66             >                // dummy db directives used to calculate length of namec
 212+ 6F66 53 2D 3E 44 >                db      "S->D"
 212+ 6F6A             >len_NFA         defl    $ - temp_NFA
 212+ 6F6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 6F66             >
 212+ 6F66 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 6F67 53 2D 3E 44 >                db      "S->D"               // name string in 7-bit ascii, but
 212+ 6F6B             >                org     $-1                 // alter last byte of Name just above to set
 212+ 6F6A C4          >                db      {b $} | END_BIT     // msb as name end
 212+ 6F6B             >
 212+ 6F6B 55 6F       >                dw      last_NFA            // Link to previous definition Name
 212+ 6F6D             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 6F6D ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 212+ 6F6D             >                else
 212+ 6F6D 6F 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 212+ 6F6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 6F6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 6F6F             >
 212+ 6F6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 6F6F D1                           pop     de
 214+ 6F70 21 00 00                     ld      hl, 0
 215+ 6F73 7A                           ld      a, d
 216+ 6F74 E6 80                        and     $80
 217+ 6F76 28 01                        jr      z, S_to_D_Skip
 218+ 6F78 2B                           dec     hl                  // $FFFF
 219+ 6F79              S_to_D_Skip:
 220+ 6F79 D5                           push    de
 221+ 6F7A E5                           push    hl
 222+ 6F7B                              next
 222+ 6F7B DD E9       >                jp      (ix)
 223+ 6F7D
 224+ 6F7D              //  ______________________________________________________________________
 225+ 6F7D              //
 226+ 6F7D              // -            n1 n2 -- n3
 227+ 6F7D              // subtraction
 228+ 6F7D                              New_Def SUBTRACT, "-", is_code, is_normal
 228+ 6F7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 228+ 6F7D             >
 228+ 6F7D             >                // dummy db directives used to calculate length of namec
 228+ 6F7D 2D          >                db      "-"
 228+ 6F7E             >len_NFA         defl    $ - temp_NFA
 228+ 6F7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 228+ 6F7D             >
 228+ 6F7D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 228+ 6F7E 2D          >                db      "-"               // name string in 7-bit ascii, but
 228+ 6F7F             >                org     $-1                 // alter last byte of Name just above to set
 228+ 6F7E AD          >                db      {b $} | END_BIT     // msb as name end
 228+ 6F7F             >
 228+ 6F7F 66 6F       >                dw      last_NFA            // Link to previous definition Name
 228+ 6F81             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 228+ 6F81 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 228+ 6F81             >                else
 228+ 6F81 83 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 228+ 6F83             >                endif           ; ok        // for other definitions it "points" the correct handler
 228+ 6F83             >                // Use of "; ok" to suppress "warning[fwdref]"
 228+ 6F83             >
 228+ 6F83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 229+ 6F83 D1                           pop     de
 230+ 6F84 E1                           pop     hl
 231+ 6F85 A7                           and     a
 232+ 6F86 ED 52                        sbc     hl, de
 233+ 6F88
 234+ 6F88                              psh1
 234+ 6F88 E5          >                push    hl
 234+ 6F89 DD E9       >                jp      (ix)
 235+ 6F8B
 236+ 6F8B              //  ______________________________________________________________________
 237+ 6F8B              //
 238+ 6F8B              // =            n1 n2 -- n3
 239+ 6F8B              // equals
 240+ 6F8B                              Colon_Def EQUALS, "=", is_normal
 240+ 6F8B             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 240+ 6F8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 240+ 6F8B             >
 240+ 6F8B             >                // dummy db directives used to calculate length of namec
 240+ 6F8B 3D          >                db      "="
 240+ 6F8C             >len_NFA         defl    $ - temp_NFA
 240+ 6F8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 240+ 6F8B             >
 240+ 6F8B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 240+ 6F8C 3D          >                db      "="               // name string in 7-bit ascii, but
 240+ 6F8D             >                org     $-1                 // alter last byte of Name just above to set
 240+ 6F8C BD          >                db      {b $} | END_BIT     // msb as name end
 240+ 6F8D             >
 240+ 6F8D 7D 6F       >                dw      last_NFA            // Link to previous definition Name
 240+ 6F8F             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 240+ 6F8F E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 240+ 6F91             >                else
 240+ 6F91 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 240+ 6F91             >                endif           ; ok        // for other definitions it "points" the correct handler
 240+ 6F91             >                // Use of "; ok" to suppress "warning[fwdref]"
 240+ 6F91             >
 240+ 6F91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 241+ 6F91 81 6F 0D 6A                  dw      SUBTRACT, ZEQUAL        // - 0=
 242+ 6F95 B6 69                        dw      EXIT                    // ;
 243+ 6F97
 244+ 6F97              //  ______________________________________________________________________
 245+ 6F97              //
 246+ 6F97              // u<           u1 u2 -- u3
 247+ 6F97              // unsigned less-than
 248+ 6F97                              New_Def ULESS, "U<", is_code, is_normal
 248+ 6F97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 6F97             >
 248+ 6F97             >                // dummy db directives used to calculate length of namec
 248+ 6F97 55 3C       >                db      "U<"
 248+ 6F99             >len_NFA         defl    $ - temp_NFA
 248+ 6F99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 6F97             >
 248+ 6F97 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 6F98 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 248+ 6F9A             >                org     $-1                 // alter last byte of Name just above to set
 248+ 6F99 BC          >                db      {b $} | END_BIT     // msb as name end
 248+ 6F9A             >
 248+ 6F9A 8B 6F       >                dw      last_NFA            // Link to previous definition Name
 248+ 6F9C             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 6F9C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 248+ 6F9C             >                else
 248+ 6F9C 9E 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 248+ 6F9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 6F9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 6F9E             >
 248+ 6F9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 6F9E D1                           pop     de
 250+ 6F9F E1                           pop     hl
 251+ 6FA0 A7                           and     a
 252+ 6FA1 ED 52                        sbc     hl, de
 253+ 6FA3 21 01 00                     ld      hl, 1
 254+ 6FA6 38 01                        jr      c, ULess_Skip
 255+ 6FA8 2D                               dec     l
 256+ 6FA9              ULess_Skip:
 257+ 6FA9
 258+ 6FA9                              psh1
 258+ 6FA9 E5          >                push    hl
 258+ 6FAA DD E9       >                jp      (ix)
 259+ 6FAC
 260+ 6FAC              //  ______________________________________________________________________
 261+ 6FAC              //
 262+ 6FAC              // <           n1 n2 -- n3
 263+ 6FAC              // less-than
 264+ 6FAC                              New_Def LESS, "<", is_code, is_normal
 264+ 6FAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 264+ 6FAC             >
 264+ 6FAC             >                // dummy db directives used to calculate length of namec
 264+ 6FAC 3C          >                db      "<"
 264+ 6FAD             >len_NFA         defl    $ - temp_NFA
 264+ 6FAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 264+ 6FAC             >
 264+ 6FAC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 264+ 6FAD 3C          >                db      "<"               // name string in 7-bit ascii, but
 264+ 6FAE             >                org     $-1                 // alter last byte of Name just above to set
 264+ 6FAD BC          >                db      {b $} | END_BIT     // msb as name end
 264+ 6FAE             >
 264+ 6FAE 97 6F       >                dw      last_NFA            // Link to previous definition Name
 264+ 6FB0             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 264+ 6FB0 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 264+ 6FB0             >                else
 264+ 6FB0 B2 6F       >                dw      $ + 2   ; ok        // is pointed by CFA
 264+ 6FB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 264+ 6FB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 264+ 6FB2             >
 264+ 6FB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 265+ 6FB2 D1                           pop     de
 266+ 6FB3 E1                           pop     hl
 267+ 6FB4 7C                           ld      a, h
 268+ 6FB5 EE 80                        xor     $80
 269+ 6FB7 67                           ld      h, a
 270+ 6FB8 7A                           ld      a, d
 271+ 6FB9 EE 80                        xor     $80
 272+ 6FBB 57                           ld      d, a
 273+ 6FBC A7                           and     a
 274+ 6FBD ED 52                        sbc     hl, de
 275+ 6FBF 21 01 00                     ld      hl, 1
 276+ 6FC2 38 01                        jr      c, Less_Skip
 277+ 6FC4 2D                               dec     l
 278+ 6FC5              Less_Skip:
 279+ 6FC5
 280+ 6FC5                              psh1
 280+ 6FC5 E5          >                push    hl
 280+ 6FC6 DD E9       >                jp      (ix)
 281+ 6FC8
 282+ 6FC8              //  ______________________________________________________________________
 283+ 6FC8              //
 284+ 6FC8              // >            n1 n2 -- n3
 285+ 6FC8              // greater than
 286+ 6FC8                              Colon_Def GREATER, ">", is_normal
 286+ 6FC8             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 286+ 6FC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 286+ 6FC8             >
 286+ 6FC8             >                // dummy db directives used to calculate length of namec
 286+ 6FC8 3E          >                db      ">"
 286+ 6FC9             >len_NFA         defl    $ - temp_NFA
 286+ 6FC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 286+ 6FC8             >
 286+ 6FC8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 286+ 6FC9 3E          >                db      ">"               // name string in 7-bit ascii, but
 286+ 6FCA             >                org     $-1                 // alter last byte of Name just above to set
 286+ 6FC9 BE          >                db      {b $} | END_BIT     // msb as name end
 286+ 6FCA             >
 286+ 6FCA AC 6F       >                dw      last_NFA            // Link to previous definition Name
 286+ 6FCC             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 286+ 6FCC E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 286+ 6FCE             >                else
 286+ 6FCE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 286+ 6FCE             >                endif           ; ok        // for other definitions it "points" the correct handler
 286+ 6FCE             >                // Use of "; ok" to suppress "warning[fwdref]"
 286+ 6FCE             >
 286+ 6FCE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 287+ 6FCE 1E 6B B0 6F                  dw      SWAP, LESS              // swap <
 288+ 6FD2 B6 69                        dw      EXIT                    // ;
 289+ 6FD4              //  ______________________________________________________________________
 290+ 6FD4              //
 291+ 6FD4              // min          n1 n2 -- n3
 292+ 6FD4              // minimum between n1 and n2
 293+ 6FD4                              Colon_Def MIN, "MIN" , is_normal
 293+ 6FD4             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 293+ 6FD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 6FD4             >
 293+ 6FD4             >                // dummy db directives used to calculate length of namec
 293+ 6FD4 4D 49 4E    >                db      "MIN"
 293+ 6FD7             >len_NFA         defl    $ - temp_NFA
 293+ 6FD7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 6FD4             >
 293+ 6FD4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 6FD5 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 293+ 6FD8             >                org     $-1                 // alter last byte of Name just above to set
 293+ 6FD7 CE          >                db      {b $} | END_BIT     // msb as name end
 293+ 6FD8             >
 293+ 6FD8 C8 6F       >                dw      last_NFA            // Link to previous definition Name
 293+ 6FDA             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 6FDA E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 6FDC             >                else
 293+ 6FDC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 6FDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 6FDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 6FDC             >
 293+ 6FDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 6FDC 95 6B                        dw      TWO_DUP                 // 2dup
 295+ 6FDE CC 6F                        dw      GREATER                 // >
 296+ 6FE0 7F 64                        dw      ZBRANCH
 297+ 6FE2 04 00                        dw      Min_Skip - $   // if
 298+ 6FE4 1E 6B                        dw          SWAP                //      swap
 299+ 6FE6              Min_Skip:                                       // endif
 300+ 6FE6 F6 6A                        dw      DROP                    // drop
 301+ 6FE8 B6 69                        dw      EXIT                    // ;
 302+ 6FEA
 303+ 6FEA              //  ______________________________________________________________________
 304+ 6FEA              //
 305+ 6FEA              // max          n1 n2 -- n3
 306+ 6FEA              // maximum between n1 and n2
 307+ 6FEA                              Colon_Def MAX, "MAX", is_normal
 307+ 6FEA             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 307+ 6FEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 307+ 6FEA             >
 307+ 6FEA             >                // dummy db directives used to calculate length of namec
 307+ 6FEA 4D 41 58    >                db      "MAX"
 307+ 6FED             >len_NFA         defl    $ - temp_NFA
 307+ 6FED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 307+ 6FEA             >
 307+ 6FEA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 307+ 6FEB 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 307+ 6FEE             >                org     $-1                 // alter last byte of Name just above to set
 307+ 6FED D8          >                db      {b $} | END_BIT     // msb as name end
 307+ 6FEE             >
 307+ 6FEE D4 6F       >                dw      last_NFA            // Link to previous definition Name
 307+ 6FF0             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 307+ 6FF0 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 307+ 6FF2             >                else
 307+ 6FF2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 307+ 6FF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 307+ 6FF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 307+ 6FF2             >
 307+ 6FF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 308+ 6FF2 95 6B                        dw      TWO_DUP                 // 2dup
 309+ 6FF4 B0 6F                        dw      LESS                    // <
 310+ 6FF6 7F 64                        dw      ZBRANCH
 311+ 6FF8 04 00                        dw      Max_Skip - $   // if
 312+ 6FFA 1E 6B                        dw          SWAP                //      swap
 313+ 6FFC              Max_Skip:                                       // endif
 314+ 6FFC F6 6A                        dw      DROP                    // drop
 315+ 6FFE B6 69                        dw      EXIT                    // ;
 316+ 7000
 317+ 7000              //  ______________________________________________________________________
 318+ 7000              //
 319+ 7000              // -dup         n -- 0 | n n
 320+ 7000              // duplicate if not zero
 321+ 7000                              New_Def LDUP, "-DUP", is_code, is_normal
 321+ 7000             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 7000             >
 321+ 7000             >                // dummy db directives used to calculate length of namec
 321+ 7000 2D 44 55 50 >                db      "-DUP"
 321+ 7004             >len_NFA         defl    $ - temp_NFA
 321+ 7004             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 7000             >
 321+ 7000 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 7001 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 321+ 7005             >                org     $-1                 // alter last byte of Name just above to set
 321+ 7004 D0          >                db      {b $} | END_BIT     // msb as name end
 321+ 7005             >
 321+ 7005 EA 6F       >                dw      last_NFA            // Link to previous definition Name
 321+ 7007             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 7007 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 321+ 7007             >                else
 321+ 7007 09 70       >                dw      $ + 2   ; ok        // is pointed by CFA
 321+ 7009             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 7009             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 7009             >
 321+ 7009             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 7009              QDup_Ptr:
 323+ 7009 E1                           pop     hl
 324+ 700A 7C                           ld      a, h
 325+ 700B B5                           or      l
 326+ 700C 28 01                        jr      z, QDup_Skip
 327+ 700E E5                               push    hl
 328+ 700F              QDup_Skip:
 329+ 700F                              psh1
 329+ 700F E5          >                push    hl
 329+ 7010 DD E9       >                jp      (ix)
 330+ 7012
 331+ 7012              //  ______________________________________________________________________
 332+ 7012              //
 333+ 7012              // ?dup         n -- 0 | n n
 334+ 7012              // duplicate if not zero
 335+ 7012                              New_Def QDUP, "?DUP", QDup_Ptr, is_normal
 335+ 7012             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 335+ 7012             >
 335+ 7012             >                // dummy db directives used to calculate length of namec
 335+ 7012 3F 44 55 50 >                db      "?DUP"
 335+ 7016             >len_NFA         defl    $ - temp_NFA
 335+ 7016             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 335+ 7012             >
 335+ 7012 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 335+ 7013 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 335+ 7017             >                org     $-1                 // alter last byte of Name just above to set
 335+ 7016 D0          >                db      {b $} | END_BIT     // msb as name end
 335+ 7017             >
 335+ 7017 00 70       >                dw      last_NFA            // Link to previous definition Name
 335+ 7019             >QDUP:          if QDup_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 335+ 7019 09 70       >                dw      QDup_Ptr ; ok        // for primitive definitions  actual code
 335+ 701B             >                else
 335+ 701B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 335+ 701B             >                endif           ; ok        // for other definitions it "points" the correct handler
 335+ 701B             >                // Use of "; ok" to suppress "warning[fwdref]"
 335+ 701B             >
 335+ 701B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 336+ 701B
 337+ 701B              //  ______________________________________________________________________
 338+ 701B              //
 339+ 701B              // emit         c --
 340+ 701B                              Colon_Def EMIT, "EMIT", is_normal
 340+ 701B             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 340+ 701B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 340+ 701B             >
 340+ 701B             >                // dummy db directives used to calculate length of namec
 340+ 701B 45 4D 49 54 >                db      "EMIT"
 340+ 701F             >len_NFA         defl    $ - temp_NFA
 340+ 701F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 340+ 701B             >
 340+ 701B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 340+ 701C 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 340+ 7020             >                org     $-1                 // alter last byte of Name just above to set
 340+ 701F D4          >                db      {b $} | END_BIT     // msb as name end
 340+ 7020             >
 340+ 7020 12 70       >                dw      last_NFA            // Link to previous definition Name
 340+ 7022             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 340+ 7022 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 340+ 7024             >                else
 340+ 7024 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 340+ 7024             >                endif           ; ok        // for other definitions it "points" the correct handler
 340+ 7024             >                // Use of "; ok" to suppress "warning[fwdref]"
 340+ 7024             >
 340+ 7024             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 341+ 7024 BB 66                        dw      C_EMIT                      // (?emit)
 342+ 7026 07 70                        dw      LDUP                        // ?dup
 343+ 7028                                                                  // if
 344+ 7028 7F 64                        dw      ZBRANCH
 345+ 702A 0A 00                        dw      Emit_Skip - $
 346+ 702C 87 66                        dw          EMITC                   //      emitc
 347+ 702E 63 6D                        dw          ONE                     //      1
 348+ 7030 6C 6E CC 6B                  dw          OUT, PLUSSTORE        //      out +!
 349+ 7034              Emit_Skip:                                          // endif
 350+ 7034 B6 69                        dw      EXIT                        // ;
 351+ 7036
 352+ 7036              //  ______________________________________________________________________
 353+ 7036              //
 354+ 7036              // space        --
 355+ 7036                              Colon_Def SPACE, "SPACE", is_normal
 355+ 7036             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 355+ 7036             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 7036             >
 355+ 7036             >                // dummy db directives used to calculate length of namec
 355+ 7036 53 50 41 43 >                db      "SPACE"
 355+ 703A 45          >
 355+ 703B             >len_NFA         defl    $ - temp_NFA
 355+ 703B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 7036             >
 355+ 7036 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 7037 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 355+ 703B 45          >
 355+ 703C             >                org     $-1                 // alter last byte of Name just above to set
 355+ 703B C5          >                db      {b $} | END_BIT     // msb as name end
 355+ 703C             >
 355+ 703C 1B 70       >                dw      last_NFA            // Link to previous definition Name
 355+ 703E             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 703E E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 355+ 7040             >                else
 355+ 7040 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 355+ 7040             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 7040             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 7040             >
 355+ 7040             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 7040 85 6D 22 70                  dw      BL, EMIT                // bl emit
 357+ 7044 B6 69                        dw      EXIT                    // ;
 358+ 7046
 359+ 7046              //  ______________________________________________________________________
 360+ 7046              //
 361+ 7046              // traverse     a n -- a
 362+ 7046              // A dictionary entry is structured as follows
 363+ 7046              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 364+ 7046              //      +1   word name, last character is toggled with $80
 365+ 7046              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 366+ 7046              // CFA: +3+n routine address. Colon definitions here have pointer to code
 367+ 7046              // PFA: +5+n "is_code", definitions have no PFA.
 368+ 7046              //
 369+ 7046                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 369+ 7046             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 369+ 7046             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ 7046             >
 369+ 7046             >                // dummy db directives used to calculate length of namec
 369+ 7046 54 52 41 56 >                db      "TRAVERSE"
 369+ 704A 45 52 53 45 >
 369+ 704E             >len_NFA         defl    $ - temp_NFA
 369+ 704E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ 7046             >
 369+ 7046 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ 7047 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 369+ 704B 45 52 53 45 >
 369+ 704F             >                org     $-1                 // alter last byte of Name just above to set
 369+ 704E C5          >                db      {b $} | END_BIT     // msb as name end
 369+ 704F             >
 369+ 704F 36 70       >                dw      last_NFA            // Link to previous definition Name
 369+ 7051             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 7051 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 369+ 7053             >                else
 369+ 7053 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 369+ 7053             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 7053             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 7053             >
 369+ 7053             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 7053 1E 6B                        dw      SWAP                    // swap
 371+ 7055              Traverse_Begin:                                 // begin
 372+ 7055 E6 6A 48 6A                  dw          OVER, PLUS          //      over +
 373+ 7059 45 64 7F 00                  dw          LIT, 127            //      127
 374+ 705D E6 6A 0A 6C                  dw          OVER, CFETCH        //      over @
 375+ 7061 B0 6F                        dw          LESS                //      <
 376+ 7063                                                              // until
 377+ 7063 7F 64                        dw      ZBRANCH
 378+ 7065 F0 FF                        dw      Traverse_Begin - $
 379+ 7067 01 6B                        dw      NIP                     //  nip
 380+ 7069 B6 69                        dw      EXIT                    //  ;
 381+ 706B
 382+ 706B              //  ______________________________________________________________________
 383+ 706B              //
 384+ 706B              // latest       -- nfa
 385+ 706B                              Colon_Def LATEST, "LATEST", is_normal
 385+ 706B             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 385+ 706B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 706B             >
 385+ 706B             >                // dummy db directives used to calculate length of namec
 385+ 706B 4C 41 54 45 >                db      "LATEST"
 385+ 706F 53 54       >
 385+ 7071             >len_NFA         defl    $ - temp_NFA
 385+ 7071             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 706B             >
 385+ 706B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 706C 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 385+ 7070 53 54       >
 385+ 7072             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7071 D4          >                db      {b $} | END_BIT     // msb as name end
 385+ 7072             >
 385+ 7072 46 70       >                dw      last_NFA            // Link to previous definition Name
 385+ 7074             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7074 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7076             >                else
 385+ 7076 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 385+ 7076             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7076             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7076             >
 385+ 7076             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7076 9B 6E                        dw      CURRENT                 // current
 387+ 7078 EF 6B EF 6B                  dw      FETCH, FETCH            // @ @
 388+ 707C B6 69                        dw      EXIT                    // ;
 389+ 707E
 390+ 707E              //  ______________________________________________________________________
 391+ 707E              //
 392+ 707E              // lfa          pfa -- lfa
 393+ 707E                              Colon_Def LFA, "LFA", is_normal
 393+ 707E             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 393+ 707E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 707E             >
 393+ 707E             >                // dummy db directives used to calculate length of namec
 393+ 707E 4C 46 41    >                db      "LFA"
 393+ 7081             >len_NFA         defl    $ - temp_NFA
 393+ 7081             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 707E             >
 393+ 707E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 707F 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 393+ 7082             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7081 C1          >                db      {b $} | END_BIT     // msb as name end
 393+ 7082             >
 393+ 7082 6B 70       >                dw      last_NFA            // Link to previous definition Name
 393+ 7084             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7084 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7086             >                else
 393+ 7086 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 393+ 7086             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7086             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7086             >
 393+ 7086             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7086 A3 6A                        dw      CELL_MINUS              // cell-
 395+ 7088 A3 6A                        dw      CELL_MINUS              // cell-
 396+ 708A B6 69                        dw      EXIT                    // ;
 397+ 708C
 398+ 708C              //  ______________________________________________________________________
 399+ 708C              //
 400+ 708C              // cfa          pfa -- cfa
 401+ 708C                              Colon_Def CFA, "CFA", is_normal
 401+ 708C             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 401+ 708C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 401+ 708C             >
 401+ 708C             >                // dummy db directives used to calculate length of namec
 401+ 708C 43 46 41    >                db      "CFA"
 401+ 708F             >len_NFA         defl    $ - temp_NFA
 401+ 708F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 401+ 708C             >
 401+ 708C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 401+ 708D 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 401+ 7090             >                org     $-1                 // alter last byte of Name just above to set
 401+ 708F C1          >                db      {b $} | END_BIT     // msb as name end
 401+ 7090             >
 401+ 7090 7E 70       >                dw      last_NFA            // Link to previous definition Name
 401+ 7092             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 401+ 7092 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 401+ 7094             >                else
 401+ 7094 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 401+ 7094             >                endif           ; ok        // for other definitions it "points" the correct handler
 401+ 7094             >                // Use of "; ok" to suppress "warning[fwdref]"
 401+ 7094             >
 401+ 7094             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 402+ 7094 A3 6A                        dw      CELL_MINUS              // cell-
 403+ 7096 B6 69                        dw      EXIT                    // ;
 404+ 7098
 405+ 7098              //  ______________________________________________________________________
 406+ 7098              //
 407+ 7098              // nfa          pfa -- nfa
 408+ 7098                              Colon_Def NFA, "NFA", is_normal
 408+ 7098             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 408+ 7098             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 408+ 7098             >
 408+ 7098             >                // dummy db directives used to calculate length of namec
 408+ 7098 4E 46 41    >                db      "NFA"
 408+ 709B             >len_NFA         defl    $ - temp_NFA
 408+ 709B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 408+ 7098             >
 408+ 7098 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 408+ 7099 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 408+ 709C             >                org     $-1                 // alter last byte of Name just above to set
 408+ 709B C1          >                db      {b $} | END_BIT     // msb as name end
 408+ 709C             >
 408+ 709C 8C 70       >                dw      last_NFA            // Link to previous definition Name
 408+ 709E             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 408+ 709E E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 408+ 70A0             >                else
 408+ 70A0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 408+ 70A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 408+ 70A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 408+ 70A0             >
 408+ 70A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 409+ 70A0 45 64 05 00                  dw      LIT, 5                  // 5
 410+ 70A4 81 6F                        dw      SUBTRACT                // -
 411+ 70A6 7C 6D                        dw      NEG_ONE                 // -1
 412+ 70A8 51 70                        dw      TRAVERSE                // traverse
 413+ 70AA B6 69                        dw      EXIT                    // ;
 414+ 70AC
 415+ 70AC              //  ______________________________________________________________________
 416+ 70AC              //
 417+ 70AC              // pfa          nfa -- pfa
 418+ 70AC                              Colon_Def PFA, "PFA", is_normal
 418+ 70AC             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 418+ 70AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 70AC             >
 418+ 70AC             >                // dummy db directives used to calculate length of namec
 418+ 70AC 50 46 41    >                db      "PFA"
 418+ 70AF             >len_NFA         defl    $ - temp_NFA
 418+ 70AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 70AC             >
 418+ 70AC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 70AD 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 418+ 70B0             >                org     $-1                 // alter last byte of Name just above to set
 418+ 70AF C1          >                db      {b $} | END_BIT     // msb as name end
 418+ 70B0             >
 418+ 70B0 98 70       >                dw      last_NFA            // Link to previous definition Name
 418+ 70B2             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 70B2 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 70B4             >                else
 418+ 70B4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 418+ 70B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 70B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 70B4             >
 418+ 70B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 70B4 63 6D                        dw      ONE                     // 1
 420+ 70B6 51 70                        dw      TRAVERSE                // traverse
 421+ 70B8 45 64 05 00                  dw      LIT, 5                  // 6
 422+ 70BC 48 6A                        dw      PLUS                    // +
 423+ 70BE B6 69                        dw      EXIT                    // ;
 424+ 70C0
 425+ 70C0              //  ______________________________________________________________________
 426+ 70C0              //
 427+ 70C0              // >body        cfa -- pfa
 428+ 70C0                              Colon_Def TO_BODY, ">BODY", is_normal
 428+ 70C0             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 428+ 70C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 70C0             >
 428+ 70C0             >                // dummy db directives used to calculate length of namec
 428+ 70C0 3E 42 4F 44 >                db      ">BODY"
 428+ 70C4 59          >
 428+ 70C5             >len_NFA         defl    $ - temp_NFA
 428+ 70C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 70C0             >
 428+ 70C0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 70C1 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 428+ 70C5 59          >
 428+ 70C6             >                org     $-1                 // alter last byte of Name just above to set
 428+ 70C5 D9          >                db      {b $} | END_BIT     // msb as name end
 428+ 70C6             >
 428+ 70C6 AC 70       >                dw      last_NFA            // Link to previous definition Name
 428+ 70C8             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 70C8 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 70CA             >                else
 428+ 70CA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 428+ 70CA             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 70CA             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 70CA             >
 428+ 70CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 70CA 99 6A                        dw      CELL_PLUS               // cell+
 430+ 70CC B6 69                        dw      EXIT                    // ;
 431+ 70CE
 432+ 70CE              //  ______________________________________________________________________
 433+ 70CE              //
 434+ 70CE              // <name        cfa -- nfa
 435+ 70CE                              Colon_Def TO_NAME, "<NAME", is_normal
 435+ 70CE             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 435+ 70CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 435+ 70CE             >
 435+ 70CE             >                // dummy db directives used to calculate length of namec
 435+ 70CE 3C 4E 41 4D >                db      "<NAME"
 435+ 70D2 45          >
 435+ 70D3             >len_NFA         defl    $ - temp_NFA
 435+ 70D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 435+ 70CE             >
 435+ 70CE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 435+ 70CF 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 435+ 70D3 45          >
 435+ 70D4             >                org     $-1                 // alter last byte of Name just above to set
 435+ 70D3 C5          >                db      {b $} | END_BIT     // msb as name end
 435+ 70D4             >
 435+ 70D4 C0 70       >                dw      last_NFA            // Link to previous definition Name
 435+ 70D6             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 435+ 70D6 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 435+ 70D8             >                else
 435+ 70D8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 435+ 70D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 435+ 70D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 435+ 70D8             >
 435+ 70D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 436+ 70D8 C8 70                        dw      TO_BODY                 // >body
 437+ 70DA 9E 70                        dw      NFA                     // nfa
 438+ 70DC B6 69                        dw      EXIT                    // ;
 439+ 70DE
 440+ 70DE              //  ______________________________________________________________________
 441+ 70DE              //
 442+ 70DE              // !csp         --
 443+ 70DE              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 444+ 70DE                              Colon_Def STORE_CSP, "!CSP", is_normal
 444+ 70DE             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 444+ 70DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 444+ 70DE             >
 444+ 70DE             >                // dummy db directives used to calculate length of namec
 444+ 70DE 21 43 53 50 >                db      "!CSP"
 444+ 70E2             >len_NFA         defl    $ - temp_NFA
 444+ 70E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 444+ 70DE             >
 444+ 70DE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 444+ 70DF 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 444+ 70E3             >                org     $-1                 // alter last byte of Name just above to set
 444+ 70E2 D0          >                db      {b $} | END_BIT     // msb as name end
 444+ 70E3             >
 444+ 70E3 CE 70       >                dw      last_NFA            // Link to previous definition Name
 444+ 70E5             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 444+ 70E5 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 444+ 70E7             >                else
 444+ 70E7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 444+ 70E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 444+ 70E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 444+ 70E7             >
 444+ 70E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 445+ 70E7 80 69                        dw      SPFETCH                 // sp@
 446+ 70E9 CB 6E FC 6B                  dw      CSP, STORE              // csp !
 447+ 70ED B6 69                        dw      EXIT                    // ;
 448+ 70EF
 449+ 70EF              //  ______________________________________________________________________
 450+ 70EF              //
 451+ 70EF              // ?error       f n --
 452+ 70EF              // rase error n if flag f it true
 453+ 70EF                              Colon_Def QERROR, "?ERROR", is_normal
 453+ 70EF             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 453+ 70EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 453+ 70EF             >
 453+ 70EF             >                // dummy db directives used to calculate length of namec
 453+ 70EF 3F 45 52 52 >                db      "?ERROR"
 453+ 70F3 4F 52       >
 453+ 70F5             >len_NFA         defl    $ - temp_NFA
 453+ 70F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 453+ 70EF             >
 453+ 70EF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 453+ 70F0 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 453+ 70F4 4F 52       >
 453+ 70F6             >                org     $-1                 // alter last byte of Name just above to set
 453+ 70F5 D2          >                db      {b $} | END_BIT     // msb as name end
 453+ 70F6             >
 453+ 70F6 DE 70       >                dw      last_NFA            // Link to previous definition Name
 453+ 70F8             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 453+ 70F8 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 453+ 70FA             >                else
 453+ 70FA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 453+ 70FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 453+ 70FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 453+ 70FA             >
 453+ 70FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 454+ 70FA 1E 6B                        dw      SWAP                    // swap
 455+ 70FC                                                              // if
 456+ 70FC 7F 64                        dw      ZBRANCH
 457+ 70FE 08 00                        dw      QError_Else - $
 458+ 7100 FD 75                        dw          ERROR               //      error  ( is a forward-ref )
 459+ 7102                                                              // else
 460+ 7102 68 64                        dw      BRANCH
 461+ 7104 04 00                        dw      QError_Endif - $
 462+ 7106              QError_Else:
 463+ 7106 F6 6A                        dw          DROP                //      drop
 464+ 7108              QError_Endif:                                   // endif
 465+ 7108 B6 69                        dw      EXIT                    // ;
 466+ 710A
 467+ 710A              //  ______________________________________________________________________
 468+ 710A              //
 469+ 710A              // ?comp       --
 470+ 710A              // raise msg #17 if not compiling
 471+ 710A                              Colon_Def QCOMP, "?COMP", is_normal
 471+ 710A             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 471+ 710A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 471+ 710A             >
 471+ 710A             >                // dummy db directives used to calculate length of namec
 471+ 710A 3F 43 4F 4D >                db      "?COMP"
 471+ 710E 50          >
 471+ 710F             >len_NFA         defl    $ - temp_NFA
 471+ 710F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 471+ 710A             >
 471+ 710A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 471+ 710B 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 471+ 710F 50          >
 471+ 7110             >                org     $-1                 // alter last byte of Name just above to set
 471+ 710F D0          >                db      {b $} | END_BIT     // msb as name end
 471+ 7110             >
 471+ 7110 EF 70       >                dw      last_NFA            // Link to previous definition Name
 471+ 7112             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 471+ 7112 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 471+ 7114             >                else
 471+ 7114 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 471+ 7114             >                endif           ; ok        // for other definitions it "points" the correct handler
 471+ 7114             >                // Use of "; ok" to suppress "warning[fwdref]"
 471+ 7114             >
 471+ 7114             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 472+ 7114 A6 6E EF 6B                  dw      STATE, FETCH            // state @
 473+ 7118 0D 6A                        dw      ZEQUAL                  // 0=
 474+ 711A 45 64 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 475+ 711E F8 70                        dw      QERROR                  // ?error
 476+ 7120 B6 69                        dw      EXIT                    // ;
 477+ 7122
 478+ 7122              //  ______________________________________________________________________
 479+ 7122              //
 480+ 7122              // ?exec       --
 481+ 7122              // raise msg #18 if compiling
 482+ 7122                              Colon_Def QEXEC, "?EXEC", is_normal
 482+ 7122             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 482+ 7122             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 482+ 7122             >
 482+ 7122             >                // dummy db directives used to calculate length of namec
 482+ 7122 3F 45 58 45 >                db      "?EXEC"
 482+ 7126 43          >
 482+ 7127             >len_NFA         defl    $ - temp_NFA
 482+ 7127             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 482+ 7122             >
 482+ 7122 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 482+ 7123 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 482+ 7127 43          >
 482+ 7128             >                org     $-1                 // alter last byte of Name just above to set
 482+ 7127 C3          >                db      {b $} | END_BIT     // msb as name end
 482+ 7128             >
 482+ 7128 0A 71       >                dw      last_NFA            // Link to previous definition Name
 482+ 712A             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 482+ 712A E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 482+ 712C             >                else
 482+ 712C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 482+ 712C             >                endif           ; ok        // for other definitions it "points" the correct handler
 482+ 712C             >                // Use of "; ok" to suppress "warning[fwdref]"
 482+ 712C             >
 482+ 712C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 483+ 712C A6 6E EF 6B                  dw      STATE, FETCH            // state @
 484+ 7130 45 64 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 485+ 7134 F8 70                        dw      QERROR                  // ?error
 486+ 7136 B6 69                        dw      EXIT                    // ;
 487+ 7138
 488+ 7138              //  ______________________________________________________________________
 489+ 7138              //
 490+ 7138              // ?pairs       n1 n2 --
 491+ 7138              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 492+ 7138                              Colon_Def QPAIRS, "?PAIRS", is_normal
 492+ 7138             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 492+ 7138             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ 7138             >
 492+ 7138             >                // dummy db directives used to calculate length of namec
 492+ 7138 3F 50 41 49 >                db      "?PAIRS"
 492+ 713C 52 53       >
 492+ 713E             >len_NFA         defl    $ - temp_NFA
 492+ 713E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ 7138             >
 492+ 7138 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ 7139 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 492+ 713D 52 53       >
 492+ 713F             >                org     $-1                 // alter last byte of Name just above to set
 492+ 713E D3          >                db      {b $} | END_BIT     // msb as name end
 492+ 713F             >
 492+ 713F 22 71       >                dw      last_NFA            // Link to previous definition Name
 492+ 7141             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 7141 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 492+ 7143             >                else
 492+ 7143 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 492+ 7143             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 7143             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 7143             >
 492+ 7143             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 7143 81 6F                        dw      SUBTRACT                // -
 494+ 7145 45 64 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 495+ 7149 F8 70                        dw      QERROR                  // ?error
 496+ 714B B6 69                        dw      EXIT                    // ;
 497+ 714D
 498+ 714D              //  ______________________________________________________________________
 499+ 714D              //
 500+ 714D              // ?csp       --
 501+ 714D              // raise msg #20 if surrent SP in not what previously saved in CSP.
 502+ 714D              // Compiler relies on that for  syntax checking of structures
 503+ 714D                              Colon_Def QCSP, "?CSP", is_normal
 503+ 714D             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 503+ 714D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ 714D             >
 503+ 714D             >                // dummy db directives used to calculate length of namec
 503+ 714D 3F 43 53 50 >                db      "?CSP"
 503+ 7151             >len_NFA         defl    $ - temp_NFA
 503+ 7151             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ 714D             >
 503+ 714D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ 714E 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 503+ 7152             >                org     $-1                 // alter last byte of Name just above to set
 503+ 7151 D0          >                db      {b $} | END_BIT     // msb as name end
 503+ 7152             >
 503+ 7152 38 71       >                dw      last_NFA            // Link to previous definition Name
 503+ 7154             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 7154 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 7156             >                else
 503+ 7156 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 503+ 7156             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 7156             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 7156             >
 503+ 7156             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 7156 80 69                        dw      SPFETCH                 // sp@
 505+ 7158 CB 6E EF 6B                  dw      CSP, FETCH              // csp @
 506+ 715C 81 6F                        dw      SUBTRACT                // -
 507+ 715E 45 64 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 508+ 7162 F8 70                        dw      QERROR                  // ?error
 509+ 7164 B6 69                        dw      EXIT                    // ;
 510+ 7166
 511+ 7166              //  ______________________________________________________________________
 512+ 7166              //
 513+ 7166              // ?loading      --
 514+ 7166              // raise msg #22 if not loading
 515+ 7166                              Colon_Def QLOADING, "?LOADING", is_normal
 515+ 7166             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 515+ 7166             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7166             >
 515+ 7166             >                // dummy db directives used to calculate length of namec
 515+ 7166 3F 4C 4F 41 >                db      "?LOADING"
 515+ 716A 44 49 4E 47 >
 515+ 716E             >len_NFA         defl    $ - temp_NFA
 515+ 716E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7166             >
 515+ 7166 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7167 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 515+ 716B 44 49 4E 47 >
 515+ 716F             >                org     $-1                 // alter last byte of Name just above to set
 515+ 716E C7          >                db      {b $} | END_BIT     // msb as name end
 515+ 716F             >
 515+ 716F 4D 71       >                dw      last_NFA            // Link to previous definition Name
 515+ 7171             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7171 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 515+ 7173             >                else
 515+ 7173 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 515+ 7173             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7173             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7173             >
 515+ 7173             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 516+ 7173 5A 6E EF 6B                  dw      BLK, FETCH              // blk @
 517+ 7177 0D 6A                        dw      ZEQUAL                  // 0=
 518+ 7179 45 64 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 519+ 717D F8 70                        dw      QERROR                  // ?error
 520+ 717F B6 69                        dw      EXIT                    // ;
 521+ 7181
 522+ 7181              //  ______________________________________________________________________
 523+ 7181              //
 524+ 7181              // compile      --
 525+ 7181              // compiles the following word
 526+ 7181                              Colon_Def COMPILE, "COMPILE", is_normal
 526+ 7181             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 526+ 7181             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 526+ 7181             >
 526+ 7181             >                // dummy db directives used to calculate length of namec
 526+ 7181 43 4F 4D 50 >                db      "COMPILE"
 526+ 7185 49 4C 45    >
 526+ 7188             >len_NFA         defl    $ - temp_NFA
 526+ 7188             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 526+ 7181             >
 526+ 7181 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 526+ 7182 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 526+ 7186 49 4C 45    >
 526+ 7189             >                org     $-1                 // alter last byte of Name just above to set
 526+ 7188 C5          >                db      {b $} | END_BIT     // msb as name end
 526+ 7189             >
 526+ 7189 66 71       >                dw      last_NFA            // Link to previous definition Name
 526+ 718B             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 526+ 718B E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 526+ 718D             >                else
 526+ 718D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 526+ 718D             >                endif           ; ok        // for other definitions it "points" the correct handler
 526+ 718D             >                // Use of "; ok" to suppress "warning[fwdref]"
 526+ 718D             >
 526+ 718D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 527+ 718D 12 71                        dw      QCOMP                   // ?comp
 528+ 718F F3 69                        dw      R_TO                    // r>
 529+ 7191 2B 6B 99 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 530+ 7195 DF 69                        dw      TO_R                    // >r
 531+ 7197 EF 6B 49 6F                  dw      FETCH, COMMA            // @ ,
 532+ 719B B6 69                        dw      EXIT                    // ;
 533+ 719D
 534+ 719D              //  ______________________________________________________________________
 535+ 719D              //
 536+ 719D              // [            --
 537+ 719D              // stop compilation
 538+ 719D                              Colon_Def SQUARED_OPEN, "[", is_immediate
 538+ 719D             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 538+ 719D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 538+ 719D             >
 538+ 719D             >                // dummy db directives used to calculate length of namec
 538+ 719D 5B          >                db      "["
 538+ 719E             >len_NFA         defl    $ - temp_NFA
 538+ 719E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 538+ 719D             >
 538+ 719D C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 538+ 719E 5B          >                db      "["               // name string in 7-bit ascii, but
 538+ 719F             >                org     $-1                 // alter last byte of Name just above to set
 538+ 719E DB          >                db      {b $} | END_BIT     // msb as name end
 538+ 719F             >
 538+ 719F 81 71       >                dw      last_NFA            // Link to previous definition Name
 538+ 71A1             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 538+ 71A1 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 538+ 71A3             >                else
 538+ 71A3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 538+ 71A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 538+ 71A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 538+ 71A3             >
 538+ 71A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 539+ 71A3 5B 6D                        dw      ZERO                    // 0
 540+ 71A5 A6 6E FC 6B                  dw      STATE, STORE            // state !
 541+ 71A9 B6 69                        dw      EXIT                    // ; immediate
 542+ 71AB
 543+ 71AB              //  ______________________________________________________________________
 544+ 71AB              //
 545+ 71AB              // ]            --
 546+ 71AB              // start compilation
 547+ 71AB                              Colon_Def SQUARED_CLOSE, "]", is_normal
 547+ 71AB             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 547+ 71AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 547+ 71AB             >
 547+ 71AB             >                // dummy db directives used to calculate length of namec
 547+ 71AB 5D          >                db      "]"
 547+ 71AC             >len_NFA         defl    $ - temp_NFA
 547+ 71AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 547+ 71AB             >
 547+ 71AB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 547+ 71AC 5D          >                db      "]"               // name string in 7-bit ascii, but
 547+ 71AD             >                org     $-1                 // alter last byte of Name just above to set
 547+ 71AC DD          >                db      {b $} | END_BIT     // msb as name end
 547+ 71AD             >
 547+ 71AD 9D 71       >                dw      last_NFA            // Link to previous definition Name
 547+ 71AF             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 547+ 71AF E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 547+ 71B1             >                else
 547+ 71B1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 547+ 71B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 547+ 71B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 547+ 71B1             >
 547+ 71B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 548+ 71B1 45 64 C0 00                  dw      LIT, $C0                // 192
 549+ 71B5 A6 6E FC 6B                  dw      STATE, STORE            // state !
 550+ 71B9 B6 69                        dw      EXIT                    // ;
 551+ 71BB
 552+ 71BB              //  ______________________________________________________________________
 553+ 71BB              //
 554+ 71BB              // smudge       --
 555+ 71BB              // toggle smudge bit of latest definition
 556+ 71BB                              Colon_Def SMUDGE, "SMUDGE", is_normal
 556+ 71BB             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 556+ 71BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 556+ 71BB             >
 556+ 71BB             >                // dummy db directives used to calculate length of namec
 556+ 71BB 53 4D 55 44 >                db      "SMUDGE"
 556+ 71BF 47 45       >
 556+ 71C1             >len_NFA         defl    $ - temp_NFA
 556+ 71C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 556+ 71BB             >
 556+ 71BB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 556+ 71BC 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 556+ 71C0 47 45       >
 556+ 71C2             >                org     $-1                 // alter last byte of Name just above to set
 556+ 71C1 C5          >                db      {b $} | END_BIT     // msb as name end
 556+ 71C2             >
 556+ 71C2 AB 71       >                dw      last_NFA            // Link to previous definition Name
 556+ 71C4             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 556+ 71C4 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 556+ 71C6             >                else
 556+ 71C6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 556+ 71C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 556+ 71C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 556+ 71C6             >
 556+ 71C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 557+ 71C6 74 70                        dw      LATEST                  // latest
 558+ 71C8 45 64 20 00                  dw      LIT, SMUDGE_BIT         // 32
 559+ 71CC E2 6B                        dw      TOGGLE                  // toggle
 560+ 71CE B6 69                        dw      EXIT                    // ;
 561+ 71D0
 562+ 71D0              //  ______________________________________________________________________
 563+ 71D0              //
 564+ 71D0              // immediate    --
 565+ 71D0              // make immediate the latest definition
 566+ 71D0                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 566+ 71D0             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 566+ 71D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ 71D0             >
 566+ 71D0             >                // dummy db directives used to calculate length of namec
 566+ 71D0 49 4D 4D 45 >                db      "IMMEDIATE"
 566+ 71D4 44 49 41 54 >
 566+ 71D8 45          >
 566+ 71D9             >len_NFA         defl    $ - temp_NFA
 566+ 71D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ 71D0             >
 566+ 71D0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ 71D1 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 566+ 71D5 44 49 41 54 >
 566+ 71D9 45          >
 566+ 71DA             >                org     $-1                 // alter last byte of Name just above to set
 566+ 71D9 C5          >                db      {b $} | END_BIT     // msb as name end
 566+ 71DA             >
 566+ 71DA BB 71       >                dw      last_NFA            // Link to previous definition Name
 566+ 71DC             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 71DC E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 71DE             >                else
 566+ 71DE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 566+ 71DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 71DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 71DE             >
 566+ 71DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 71DE 74 70                        dw      LATEST                  // latest
 568+ 71E0 45 64 40 00                  dw      LIT, $40                // 64
 569+ 71E4 E2 6B                        dw      TOGGLE                  // toggle
 570+ 71E6 B6 69                        dw      EXIT                    // ;
 571+ 71E8
 572+ 71E8              //  ______________________________________________________________________
 573+ 71E8              //
 574+ 71E8              // hex          --
 575+ 71E8              // change numeration base
 576+ 71E8                              Colon_Def HEX, "HEX", is_normal
 576+ 71E8             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 576+ 71E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ 71E8             >
 576+ 71E8             >                // dummy db directives used to calculate length of namec
 576+ 71E8 48 45 58    >                db      "HEX"
 576+ 71EB             >len_NFA         defl    $ - temp_NFA
 576+ 71EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ 71E8             >
 576+ 71E8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ 71E9 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 576+ 71EC             >                org     $-1                 // alter last byte of Name just above to set
 576+ 71EB D8          >                db      {b $} | END_BIT     // msb as name end
 576+ 71EC             >
 576+ 71EC D0 71       >                dw      last_NFA            // Link to previous definition Name
 576+ 71EE             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 71EE E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 71F0             >                else
 576+ 71F0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 576+ 71F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 71F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 71F0             >
 576+ 71F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 71F0 45 64 10 00                  dw      LIT, 16                 // 16
 578+ 71F4 B0 6E FC 6B                  dw      BASE, STORE             // base !
 579+ 71F8 B6 69                        dw      EXIT                    // ;
 580+ 71FA
 581+ 71FA              //  ______________________________________________________________________
 582+ 71FA              //
 583+ 71FA              // decimal      --
 584+ 71FA              // change numeration base
 585+ 71FA                              Colon_Def DECIMAL, "DECIMAL", is_normal
 585+ 71FA             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 585+ 71FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 585+ 71FA             >
 585+ 71FA             >                // dummy db directives used to calculate length of namec
 585+ 71FA 44 45 43 49 >                db      "DECIMAL"
 585+ 71FE 4D 41 4C    >
 585+ 7201             >len_NFA         defl    $ - temp_NFA
 585+ 7201             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 585+ 71FA             >
 585+ 71FA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 585+ 71FB 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 585+ 71FF 4D 41 4C    >
 585+ 7202             >                org     $-1                 // alter last byte of Name just above to set
 585+ 7201 CC          >                db      {b $} | END_BIT     // msb as name end
 585+ 7202             >
 585+ 7202 E8 71       >                dw      last_NFA            // Link to previous definition Name
 585+ 7204             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 585+ 7204 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 585+ 7206             >                else
 585+ 7206 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 585+ 7206             >                endif           ; ok        // for other definitions it "points" the correct handler
 585+ 7206             >                // Use of "; ok" to suppress "warning[fwdref]"
 585+ 7206             >
 585+ 7206             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 586+ 7206 45 64 0A 00                  dw      LIT, 10                 // 10
 587+ 720A B0 6E FC 6B                  dw      BASE, STORE             // base !
 588+ 720E B6 69                        dw      EXIT                    // ;
 589+ 7210
 590+ 7210              //  ______________________________________________________________________
 591+ 7210              //
 592+ 7210              // (;code)       --
 593+ 7210              // patch to CFA to call/jump to the "following code"
 594+ 7210                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 594+ 7210             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 594+ 7210             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ 7210             >
 594+ 7210             >                // dummy db directives used to calculate length of namec
 594+ 7210 28 3B 43 4F >                db      "(;CODE)"
 594+ 7214 44 45 29    >
 594+ 7217             >len_NFA         defl    $ - temp_NFA
 594+ 7217             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ 7210             >
 594+ 7210 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ 7211 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 594+ 7215 44 45 29    >
 594+ 7218             >                org     $-1                 // alter last byte of Name just above to set
 594+ 7217 A9          >                db      {b $} | END_BIT     // msb as name end
 594+ 7218             >
 594+ 7218 FA 71       >                dw      last_NFA            // Link to previous definition Name
 594+ 721A             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 721A E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 721C             >                else
 594+ 721C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 594+ 721C             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 721C             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 721C             >
 594+ 721C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 721C F3 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 596+ 721E 74 70                        dw      LATEST                  // latest   ( Word being defined in this moment )
 597+ 7220 B2 70 92 70                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 598+ 7224
 599+ 7224
 600+ 7224
 601+ 7224
 602+ 7224
 603+ 7224 FC 6B                        dw      STORE                   // !
 604+ 7226 B6 69                        dw      EXIT                    // ;
 605+ 7228
 606+ 7228              //  ______________________________________________________________________
 607+ 7228              //
 608+ 7228              // ;code        --
 609+ 7228                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 609+ 7228             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 609+ 7228             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ 7228             >
 609+ 7228             >                // dummy db directives used to calculate length of namec
 609+ 7228 3B 43 4F 44 >                db      ";CODE"
 609+ 722C 45          >
 609+ 722D             >len_NFA         defl    $ - temp_NFA
 609+ 722D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ 7228             >
 609+ 7228 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ 7229 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 609+ 722D 45          >
 609+ 722E             >                org     $-1                 // alter last byte of Name just above to set
 609+ 722D C5          >                db      {b $} | END_BIT     // msb as name end
 609+ 722E             >
 609+ 722E 10 72       >                dw      last_NFA            // Link to previous definition Name
 609+ 7230             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 7230 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 7232             >                else
 609+ 7232 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 609+ 7232             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 7232             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 7232             >
 609+ 7232             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 7232 54 71                        dw      QCSP                    // ?csp
 611+ 7234 8B 71                        dw      COMPILE                 // compile
 612+ 7236 1A 72                        dw      C_SEMICOLON_CODE        // (;code)
 613+ 7238 A1 71                        dw      SQUARED_OPEN            // [
 614+ 723A 08 6D                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 615+ 723C B6 69                        dw      EXIT                    // ; immediate
 616+ 723E
 617+ 723E              //  ______________________________________________________________________
 618+ 723E              //
 619+ 723E              // <builds      --
 620+ 723E                              Colon_Def CBUILDS, "<BUILDS", is_normal
 620+ 723E             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 620+ 723E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 620+ 723E             >
 620+ 723E             >                // dummy db directives used to calculate length of namec
 620+ 723E 3C 42 55 49 >                db      "<BUILDS"
 620+ 7242 4C 44 53    >
 620+ 7245             >len_NFA         defl    $ - temp_NFA
 620+ 7245             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 620+ 723E             >
 620+ 723E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 620+ 723F 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 620+ 7243 4C 44 53    >
 620+ 7246             >                org     $-1                 // alter last byte of Name just above to set
 620+ 7245 D3          >                db      {b $} | END_BIT     // msb as name end
 620+ 7246             >
 620+ 7246 28 72       >                dw      last_NFA            // Link to previous definition Name
 620+ 7248             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 620+ 7248 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 620+ 724A             >                else
 620+ 724A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 620+ 724A             >                endif           ; ok        // for other definitions it "points" the correct handler
 620+ 724A             >                // Use of "; ok" to suppress "warning[fwdref]"
 620+ 724A             >
 620+ 724A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 621+ 724A 5B 6D                        dw      ZERO                    // 0
 622+ 724C 17 6D                        dw      CONSTANT                // constant
 623+ 724E B6 69                        dw      EXIT                    // ;
 624+ 7250
 625+ 7250              //  ______________________________________________________________________
 626+ 7250              //
 627+ 7250              // recurse      --
 628+ 7250              //              Colon_Def RECURSE, "RECURSE", is_immediate
 629+ 7250              //              dw      QCOMP                   // ?comp
 630+ 7250              //              dw      LATEST                  // latest
 631+ 7250              //              dw      PFA, CFA                // pfa cfa
 632+ 7250              //              dw      COMMA                   // ,
 633+ 7250              //              dw      EXIT                    // ; immediate
 634+ 7250
 635+ 7250              //  ______________________________________________________________________
 636+ 7250              //
 637+ 7250              // does>     --
 638+ 7250                              Colon_Def DOES_TO, "DOES>", is_normal
 638+ 7250             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 638+ 7250             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 638+ 7250             >
 638+ 7250             >                // dummy db directives used to calculate length of namec
 638+ 7250 44 4F 45 53 >                db      "DOES>"
 638+ 7254 3E          >
 638+ 7255             >len_NFA         defl    $ - temp_NFA
 638+ 7255             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 638+ 7250             >
 638+ 7250 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 638+ 7251 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 638+ 7255 3E          >
 638+ 7256             >                org     $-1                 // alter last byte of Name just above to set
 638+ 7255 BE          >                db      {b $} | END_BIT     // msb as name end
 638+ 7256             >
 638+ 7256 3E 72       >                dw      last_NFA            // Link to previous definition Name
 638+ 7258             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 638+ 7258 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 638+ 725A             >                else
 638+ 725A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 638+ 725A             >                endif           ; ok        // for other definitions it "points" the correct handler
 638+ 725A             >                // Use of "; ok" to suppress "warning[fwdref]"
 638+ 725A             >
 638+ 725A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 639+ 725A F3 69                        dw      R_TO                    // r>
 640+ 725C 74 70                        dw      LATEST                  // latest
 641+ 725E B2 70                        dw      PFA                     // pfa
 642+ 7260 FC 6B                        dw      STORE                   // !
 643+ 7262 1A 72                        dw      C_SEMICOLON_CODE        // ;code
 644+ 7264              Does_Ptr:
 645+ 7264                              // via call coded in CFA
 646+ 7264                              ldhlrp
 646+ 7264 2A 30 64    >                ld      hl,(RP_Pointer)
 647+ 7267 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 648+ 7268 70                           ld      (hl), b
 649+ 7269 2B                           dec     hl
 650+ 726A 71                           ld      (hl), c
 651+ 726B                              ldrphl
 651+ 726B 22 30 64    >                ld      (RP_Pointer),hl
 652+ 726E 13                           inc     de
 653+ 726F EB                           ex      de, hl
 654+ 7270 4E                           ld      c, (hl)
 655+ 7271 23                           inc     hl
 656+ 7272 46                           ld      b, (hl)
 657+ 7273 23                           inc     hl
 658+ 7274
 659+ 7274                              psh1
 659+ 7274 E5          >                push    hl
 659+ 7275 DD E9       >                jp      (ix)
 660+ 7277                              // SMUDGE !
 661+ 7277
 662+ 7277              //  ______________________________________________________________________
 663+ 7277              //
 664+ 7277              // count        a -- a2 n
 665+ 7277              // expects a counted string at address a, returns string address and counter
 666+ 7277                              Colon_Def COUNT, "COUNT", is_normal
 666+ 7277             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 666+ 7277             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 666+ 7277             >
 666+ 7277             >                // dummy db directives used to calculate length of namec
 666+ 7277 43 4F 55 4E >                db      "COUNT"
 666+ 727B 54          >
 666+ 727C             >len_NFA         defl    $ - temp_NFA
 666+ 727C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 666+ 7277             >
 666+ 7277 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 666+ 7278 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 666+ 727C 54          >
 666+ 727D             >                org     $-1                 // alter last byte of Name just above to set
 666+ 727C D4          >                db      {b $} | END_BIT     // msb as name end
 666+ 727D             >
 666+ 727D 50 72       >                dw      last_NFA            // Link to previous definition Name
 666+ 727F             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 666+ 727F E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 666+ 7281             >                else
 666+ 7281 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 666+ 7281             >                endif           ; ok        // for other definitions it "points" the correct handler
 666+ 7281             >                // Use of "; ok" to suppress "warning[fwdref]"
 666+ 7281             >
 666+ 7281             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 667+ 7281 2B 6B                        dw      DUP                     // dup
 668+ 7283 71 6A                        dw      ONE_PLUS                // 1+
 669+ 7285 1E 6B 0A 6C                  dw      SWAP, CFETCH             // swap @
 670+ 7289 B6 69                        dw      EXIT                    // ;
 671+ 728B
 672+ 728B              //  ______________________________________________________________________
 673+ 728B              //
 674+ 728B              // type         a n --
 675+ 728B              // Sends to current output channel n characters starting at address a.
 676+ 728B                              Colon_Def TYPE, "TYPE", is_normal
 676+ 728B             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 676+ 728B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 676+ 728B             >
 676+ 728B             >                // dummy db directives used to calculate length of namec
 676+ 728B 54 59 50 45 >                db      "TYPE"
 676+ 728F             >len_NFA         defl    $ - temp_NFA
 676+ 728F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 676+ 728B             >
 676+ 728B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 676+ 728C 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 676+ 7290             >                org     $-1                 // alter last byte of Name just above to set
 676+ 728F C5          >                db      {b $} | END_BIT     // msb as name end
 676+ 7290             >
 676+ 7290 77 72       >                dw      last_NFA            // Link to previous definition Name
 676+ 7292             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 676+ 7292 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 676+ 7294             >                else
 676+ 7294 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 676+ 7294             >                endif           ; ok        // for other definitions it "points" the correct handler
 676+ 7294             >                // Use of "; ok" to suppress "warning[fwdref]"
 676+ 7294             >
 676+ 7294             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 677+ 7294 E6 6A                        dw      OVER                    // over
 678+ 7296 48 6A                        dw      PLUS                    // +
 679+ 7298 1E 6B                        dw      SWAP                    // swap
 680+ 729A D9 64                        dw      C_Q_DO                  // ?do
 681+ 729C 0C 00                        dw      Type_Skip - $
 682+ 729E              Type_Loop:
 683+ 729E 12 65 0A 6C                  dw          I, CFETCH           //      i c@
 684+ 72A2 22 70                        dw          EMIT                //      emit
 685+ 72A4 94 64                        dw      C_LOOP                  // loop
 686+ 72A6 F8 FF                        dw      Type_Loop - $
 687+ 72A8              Type_Skip:
 688+ 72A8 B6 69                        dw      EXIT                    // ;
 689+ 72AA
 690+ 72AA              //  ______________________________________________________________________
 691+ 72AA              //
 692+ 72AA              // -trailing    a n1 -- a n2
 693+ 72AA              // Assumes that an n1 bytes-long string is stored at address a
 694+ 72AA              // and the string contains a space delimited word,
 695+ 72AA              // Finds n2 as the position of the first character after the word.
 696+ 72AA                              Colon_Def LTRAILING, "-TRAILING", is_normal
 696+ 72AA             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 696+ 72AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 696+ 72AA             >
 696+ 72AA             >                // dummy db directives used to calculate length of namec
 696+ 72AA 2D 54 52 41 >                db      "-TRAILING"
 696+ 72AE 49 4C 49 4E >
 696+ 72B2 47          >
 696+ 72B3             >len_NFA         defl    $ - temp_NFA
 696+ 72B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 696+ 72AA             >
 696+ 72AA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 696+ 72AB 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 696+ 72AF 49 4C 49 4E >
 696+ 72B3 47          >
 696+ 72B4             >                org     $-1                 // alter last byte of Name just above to set
 696+ 72B3 C7          >                db      {b $} | END_BIT     // msb as name end
 696+ 72B4             >
 696+ 72B4 8B 72       >                dw      last_NFA            // Link to previous definition Name
 696+ 72B6             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 696+ 72B6 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 696+ 72B8             >                else
 696+ 72B8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 696+ 72B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 696+ 72B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 696+ 72B8             >
 696+ 72B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 697+ 72B8 2B 6B 5B 6D                  dw      DUP, ZERO               // dup 0
 698+ 72BC                                                              // do
 699+ 72BC 07 65                        dw      C_DO
 700+ 72BE              LTrailing_Loop:
 701+ 72BE 95 6B 48 6A                  dw          TWO_DUP, PLUS       //      2dup +
 702+ 72C2 7D 6A                        dw          ONE_SUBTRACT        //      1-
 703+ 72C4 0A 6C                        dw          CFETCH              //      c@
 704+ 72C6 85 6D 81 6F                  dw          BL, SUBTRACT        //      bl -
 705+ 72CA                                                              //      if
 706+ 72CA 7F 64                        dw          ZBRANCH
 707+ 72CC 08 00                        dw          LTrailing_Else - $
 708+ 72CE CC 69                        dw              LEAVE           //          leave
 709+ 72D0 68 64                        dw          BRANCH              //      else
 710+ 72D2 04 00                        dw          LTrailing_Endif - $
 711+ 72D4              LTrailing_Else:
 712+ 72D4 7D 6A                        dw              ONE_SUBTRACT    //          1-
 713+ 72D6              LTrailing_Endif:                                //      endif
 714+ 72D6                                                              // loop
 715+ 72D6 94 64                        dw      C_LOOP
 716+ 72D8 E6 FF                        dw      LTrailing_Loop - $
 717+ 72DA B6 69                        dw      EXIT                    // ;
 718+ 72DC
 719+ 72DC              //  ______________________________________________________________________
 720+ 72DC              //
 721+ 72DC              // accept       a n1 -- n2
 722+ 72DC              // Accepts at most n1 characters from terminal and stores them at address a
 723+ 72DC              // CR stops input. A 'nul' is added as trailer.
 724+ 72DC              // n2 is the string length. n2 is kept in span user variable also.
 725+ 72DC                              Colon_Def ACCEPT, "ACCEPT", is_normal
 725+ 72DC             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 725+ 72DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 725+ 72DC             >
 725+ 72DC             >                // dummy db directives used to calculate length of namec
 725+ 72DC 41 43 43 45 >                db      "ACCEPT"
 725+ 72E0 50 54       >
 725+ 72E2             >len_NFA         defl    $ - temp_NFA
 725+ 72E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 725+ 72DC             >
 725+ 72DC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 725+ 72DD 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 725+ 72E1 50 54       >
 725+ 72E3             >                org     $-1                 // alter last byte of Name just above to set
 725+ 72E2 D4          >                db      {b $} | END_BIT     // msb as name end
 725+ 72E3             >
 725+ 72E3 AA 72       >                dw      last_NFA            // Link to previous definition Name
 725+ 72E5             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 725+ 72E5 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 725+ 72E7             >                else
 725+ 72E7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 725+ 72E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 725+ 72E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 725+ 72E7             >
 725+ 72E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 726+ 72E7 E6 6A 48 6A                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 726+ 72EB E6 6A
 727+ 72ED 5B 6D 38 6B                  dw      ZERO, ROT, ROT          //                      ( a  0     a+n1  a )
 727+ 72F1 38 6B
 728+ 72F3                                                              // do
 729+ 72F3 07 65                        dw      C_DO                    //                      ( a  0 )
 730+ 72F5              Accept_Loop:
 731+ 72F5 F6 6A 21 67                  dw          DROP, KEY           //      drop key        ( a  c )
 732+ 72F9 2B 6B                        dw          DUP                 //      dup             ( a  c  c )
 733+ 72FB 45 64 0E 00                  dw          LIT, $0E            //      0E
 734+ 72FF C1 6D                        dw          PLUS_ORIGIN         //      +origin
 735+ 7301 EF 6B                        dw          FETCH               //      @               ( a  c  c  del )
 736+ 7303 8F 6F                        dw          EQUALS              //      =               ( a  c  c==del )
 737+ 7305                                                              //      if
 738+ 7305 7F 64                        dw          ZBRANCH
 739+ 7307 2A 00                        dw          Accept_Else_0 - $
 740+ 7309 F6 6A                        dw              DROP            //          drop        ( a  )
 741+ 730B 2B 6B 12 65                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 741+ 730F 8F 6F
 742+ 7311 2B 6B                        dw              DUP             //          dup         ( a  a==i  a==i )
 743+ 7313 F3 69                        dw              R_TO            //          r> 2 - + r>
 744+ 7315 6B 6D 81 6F                  dw              TWO, SUBTRACT, PLUS //      ( decrement index by 1 or 2 )
 744+ 7319 48 6A
 745+ 731B DF 69                        dw              TO_R            //
 746+ 731D                                                              //          if
 747+ 731D 7F 64                        dw              ZBRANCH
 748+ 731F 0A 00                        dw              Accept_Else_1 - $
 749+ 7321 45 64 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 750+ 7325                                                              //          else
 751+ 7325 68 64                        dw              BRANCH
 752+ 7327 06 00                        dw              Accept_Endif_1 - $
 753+ 7329              Accept_Else_1:
 754+ 7329 45 64 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 755+ 732D              Accept_Endif_1:                                 //          endif
 756+ 732D 68 64                        dw          BRANCH
 757+ 732F 30 00                        dw          Accept_Endif_0 - $
 758+ 7331              Accept_Else_0:                                  //      else
 759+ 7331 2B 6B                        dw              DUP             //          dup         ( a  c  c )
 760+ 7333 45 64 0D 00                  dw              LIT, 13         //          13
 761+ 7337 8F 6F                        dw              EQUALS          //          =           ( a  c  c==CR )
 762+ 7339                                                              //          if
 763+ 7339 7F 64                        dw              ZBRANCH
 764+ 733B 0E 00                        dw              Accept_Else_2 - $
 765+ 733D F6 6A 85 6D                  dw                  DROP, BL    //              drop bl ( a  bl )
 766+ 7341 5B 6D                        dw                  ZERO        //              0       ( a  c  0 )
 767+ 7343 CC 69                        dw                  LEAVE       //              leave
 768+ 7345                                                              //          else
 769+ 7345 68 64                        dw              BRANCH
 770+ 7347 04 00                        dw              Accept_Endif_2 - $
 771+ 7349              Accept_Else_2:
 772+ 7349 2B 6B                        dw                  DUP         //              dup     ( a  c  c )
 773+ 734B                                                              //          endif
 774+ 734B              Accept_Endif_2:
 775+ 734B 12 65 18 6C                  dw              I, CSTORE       //          i           ( a  c )
 776+ 734F 2B 6B 85 6D                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 776+ 7353 B0 6F
 777+ 7355                                                              //          if
 778+ 7355 7F 64                        dw              ZBRANCH
 779+ 7357 08 00                        dw              Accept_Endif_3 - $
 780+ 7359 F3 69                        dw                  R_TO        //              r>
 781+ 735B 7D 6A                        dw                  ONE_SUBTRACT//              1-
 782+ 735D DF 69                        dw                  TO_R        //              >r
 783+ 735F                                                              //          endif
 784+ 735F              Accept_Endif_3:
 785+ 735F              Accept_Endif_0:                                 //      endif
 786+ 735F 22 70                        dw          EMIT                //      emit
 787+ 7361 5B 6D 12 65                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 787+ 7365 71 6A
 788+ 7367 FC 6B                        dw          STORE               //          ( zero pad )
 789+ 7369 12 65                        dw          I                   //      i
 790+ 736B                                                              // loop
 791+ 736B 94 64                        dw      C_LOOP
 792+ 736D 88 FF                        dw      Accept_Loop - $
 793+ 736F 1E 6B 81 6F                  dw      SWAP, SUBTRACT          // swap -
 794+ 7373 71 6A                        dw      ONE_PLUS                // 1+
 795+ 7375 2B 6B 1B 6F                  dw      DUP, SPAN, STORE        // dup span !
 795+ 7379 FC 6B
 796+ 737B B6 69                        dw      EXIT                    // ;
 797+ 737D
 798+ 737D              //  ______________________________________________________________________
 799+ 737D              //
 800+ 737D              // expect      a n --
 801+ 737D              // Accepts at most n1 characters from terminal and stores them at address a
 802+ 737D              // CR stops input. A 'nul' is added as trailer.
 803+ 737D              // n2 is the string length. n2 is kept in span user variable also.
 804+ 737D                              Colon_Def EXPECT, "EXPECT", is_normal
 804+ 737D             >                New_Def  EXPECT, "EXPECT", Enter_Ptr, is_normal ; ok
 804+ 737D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 804+ 737D             >
 804+ 737D             >                // dummy db directives used to calculate length of namec
 804+ 737D 45 58 50 45 >                db      "EXPECT"
 804+ 7381 43 54       >
 804+ 7383             >len_NFA         defl    $ - temp_NFA
 804+ 7383             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 804+ 737D             >
 804+ 737D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 804+ 737E 45 58 50 45 >                db      "EXPECT"               // name string in 7-bit ascii, but
 804+ 7382 43 54       >
 804+ 7384             >                org     $-1                 // alter last byte of Name just above to set
 804+ 7383 D4          >                db      {b $} | END_BIT     // msb as name end
 804+ 7384             >
 804+ 7384 DC 72       >                dw      last_NFA            // Link to previous definition Name
 804+ 7386             >EXPECT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 804+ 7386 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 804+ 7388             >                else
 804+ 7388 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 804+ 7388             >                endif           ; ok        // for other definitions it "points" the correct handler
 804+ 7388             >                // Use of "; ok" to suppress "warning[fwdref]"
 804+ 7388             >
 804+ 7388             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 805+ 7388 E5 72 F6 6A                  dw      ACCEPT, DROP            // accept drop
 806+ 738C B6 69                        dw      EXIT                    // ;
 807+ 738E
 808+ 738E              //  ______________________________________________________________________
 809+ 738E              //
 810+ 738E              // query        --
 811+ 738E              // Accept at most 80 character from console. CR stops.
 812+ 738E              // Text is stored in TIB. Variable IN is zeroed.
 813+ 738E                              Colon_Def QUERY, "QUERY", is_normal
 813+ 738E             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 813+ 738E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 813+ 738E             >
 813+ 738E             >                // dummy db directives used to calculate length of namec
 813+ 738E 51 55 45 52 >                db      "QUERY"
 813+ 7392 59          >
 813+ 7393             >len_NFA         defl    $ - temp_NFA
 813+ 7393             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 813+ 738E             >
 813+ 738E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 813+ 738F 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 813+ 7393 59          >
 813+ 7394             >                org     $-1                 // alter last byte of Name just above to set
 813+ 7393 D9          >                db      {b $} | END_BIT     // msb as name end
 813+ 7394             >
 813+ 7394 7D 73       >                dw      last_NFA            // Link to previous definition Name
 813+ 7396             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 813+ 7396 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 813+ 7398             >                else
 813+ 7398 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 813+ 7398             >                endif           ; ok        // for other definitions it "points" the correct handler
 813+ 7398             >                // Use of "; ok" to suppress "warning[fwdref]"
 813+ 7398             >
 813+ 7398             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 814+ 7398 EE 6D EF 6B                  dw      TIB, FETCH              // tib @
 815+ 739C 45 64 50 00                  dw      LIT, 80                 // 80
 816+ 73A0 86 73                        dw      EXPECT                  // expect
 817+ 73A2 5B 6D 63 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 817+ 73A6 FC 6B
 818+ 73A8 B6 69                        dw      EXIT                    // ;
 819+ 73AA
 820+ 73AA              //  ______________________________________________________________________
 821+ 73AA              //
 822+ 73AA              // fill        a n c --
 823+ 73AA              // If n > 0, fills n locations starting from address a with the value c.
 824+ 73AA                              New_Def FILL, "FILL", is_code, is_normal
 824+ 73AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 824+ 73AA             >
 824+ 73AA             >                // dummy db directives used to calculate length of namec
 824+ 73AA 46 49 4C 4C >                db      "FILL"
 824+ 73AE             >len_NFA         defl    $ - temp_NFA
 824+ 73AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 824+ 73AA             >
 824+ 73AA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 824+ 73AB 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 824+ 73AF             >                org     $-1                 // alter last byte of Name just above to set
 824+ 73AE CC          >                db      {b $} | END_BIT     // msb as name end
 824+ 73AF             >
 824+ 73AF 8E 73       >                dw      last_NFA            // Link to previous definition Name
 824+ 73B1             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 824+ 73B1 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 824+ 73B1             >                else
 824+ 73B1 B3 73       >                dw      $ + 2   ; ok        // is pointed by CFA
 824+ 73B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 824+ 73B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 824+ 73B3             >
 824+ 73B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 825+ 73B3 69                           ld      l, c
 826+ 73B4 60                           ld      h, b
 827+ 73B5 D1                           pop     de                  // de has character
 828+ 73B6 C1                           pop     bc                  // bc has counter
 829+ 73B7 E3                           ex      (sp), hl            // hl has address, save Instruction Pointer
 830+ 73B8              Fill_Loop:
 831+ 73B8 78                               ld      a, b
 832+ 73B9 B1                               or      c
 833+ 73BA 28 05                        jr      z, Fill_While_End
 834+ 73BC 73                               ld      (hl), e
 835+ 73BD 0B                               dec     bc
 836+ 73BE 23                               inc     hl
 837+ 73BF 18 F7                        jr      Fill_Loop
 838+ 73C1              Fill_While_End:
 839+ 73C1 C1                           pop     bc                  // Restore Instruction Pointer
 840+ 73C2
 841+ 73C2                              next
 841+ 73C2 DD E9       >                jp      (ix)
 842+ 73C4
 843+ 73C4              //  ______________________________________________________________________
 844+ 73C4              //
 845+ 73C4              // erase        a n --
 846+ 73C4              // If n > 0, fills n locations starting from address a with 'nul' characters.
 847+ 73C4                              Colon_Def ERASE, "ERASE", is_normal
 847+ 73C4             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 847+ 73C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 847+ 73C4             >
 847+ 73C4             >                // dummy db directives used to calculate length of namec
 847+ 73C4 45 52 41 53 >                db      "ERASE"
 847+ 73C8 45          >
 847+ 73C9             >len_NFA         defl    $ - temp_NFA
 847+ 73C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 847+ 73C4             >
 847+ 73C4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 847+ 73C5 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 847+ 73C9 45          >
 847+ 73CA             >                org     $-1                 // alter last byte of Name just above to set
 847+ 73C9 C5          >                db      {b $} | END_BIT     // msb as name end
 847+ 73CA             >
 847+ 73CA AA 73       >                dw      last_NFA            // Link to previous definition Name
 847+ 73CC             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 847+ 73CC E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 847+ 73CE             >                else
 847+ 73CE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 847+ 73CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 847+ 73CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 847+ 73CE             >
 847+ 73CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 848+ 73CE 5B 6D B1 73                  dw      ZERO, FILL              // 0 fill
 849+ 73D2 B6 69                        dw      EXIT                    // ;
 850+ 73D4
 851+ 73D4              //  ______________________________________________________________________
 852+ 73D4              //
 853+ 73D4              // blanks       a n --
 854+ 73D4              // If n > 0, fills n locations starting from address a with 'nul' characters.
 855+ 73D4                              Colon_Def BLANKS, "BLANKS", is_normal
 855+ 73D4             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 855+ 73D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 855+ 73D4             >
 855+ 73D4             >                // dummy db directives used to calculate length of namec
 855+ 73D4 42 4C 41 4E >                db      "BLANKS"
 855+ 73D8 4B 53       >
 855+ 73DA             >len_NFA         defl    $ - temp_NFA
 855+ 73DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 855+ 73D4             >
 855+ 73D4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 855+ 73D5 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 855+ 73D9 4B 53       >
 855+ 73DB             >                org     $-1                 // alter last byte of Name just above to set
 855+ 73DA D3          >                db      {b $} | END_BIT     // msb as name end
 855+ 73DB             >
 855+ 73DB C4 73       >                dw      last_NFA            // Link to previous definition Name
 855+ 73DD             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 855+ 73DD E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 855+ 73DF             >                else
 855+ 73DF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 855+ 73DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 855+ 73DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 855+ 73DF             >
 855+ 73DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 856+ 73DF 85 6D B1 73                  dw      BL, FILL                // bl fill
 857+ 73E3 B6 69                        dw      EXIT                    // ;
 858+ 73E5
 859+ 73E5              //  ______________________________________________________________________
 860+ 73E5              //
 861+ 73E5              // hold         c --
 862+ 73E5              // Used between <# and #> to insert a character c in numeric formatting.
 863+ 73E5                              Colon_Def HOLD, "HOLD", is_normal
 863+ 73E5             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 863+ 73E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 863+ 73E5             >
 863+ 73E5             >                // dummy db directives used to calculate length of namec
 863+ 73E5 48 4F 4C 44 >                db      "HOLD"
 863+ 73E9             >len_NFA         defl    $ - temp_NFA
 863+ 73E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 863+ 73E5             >
 863+ 73E5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 863+ 73E6 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 863+ 73EA             >                org     $-1                 // alter last byte of Name just above to set
 863+ 73E9 C4          >                db      {b $} | END_BIT     // msb as name end
 863+ 73EA             >
 863+ 73EA D4 73       >                dw      last_NFA            // Link to previous definition Name
 863+ 73EC             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 863+ 73EC E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 863+ 73EE             >                else
 863+ 73EE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 863+ 73EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 863+ 73EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 863+ 73EE             >
 863+ 73EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 864+ 73EE 7C 6D                        dw      NEG_ONE                 // -1
 865+ 73F0 DC 6E CC 6B                  dw      HLD, PLUSSTORE          // hld +!
 866+ 73F4 DC 6E EF 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 866+ 73F8 18 6C
 867+ 73FA B6 69                        dw      EXIT                    // ;
 868+ 73FC
 869+ 73FC              //  ______________________________________________________________________
 870+ 73FC              //
 871+ 73FC              // pad         -- a
 872+ 73FC              // leaves the buffer text address. This is at a fixed distance over HERE.
 873+ 73FC                              Colon_Def PAD, "PAD", is_normal
 873+ 73FC             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 873+ 73FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 873+ 73FC             >
 873+ 73FC             >                // dummy db directives used to calculate length of namec
 873+ 73FC 50 41 44    >                db      "PAD"
 873+ 73FF             >len_NFA         defl    $ - temp_NFA
 873+ 73FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 873+ 73FC             >
 873+ 73FC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 873+ 73FD 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 873+ 7400             >                org     $-1                 // alter last byte of Name just above to set
 873+ 73FF C4          >                db      {b $} | END_BIT     // msb as name end
 873+ 7400             >
 873+ 7400 E5 73       >                dw      last_NFA            // Link to previous definition Name
 873+ 7402             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 873+ 7402 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 873+ 7404             >                else
 873+ 7404 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 873+ 7404             >                endif           ; ok        // for other definitions it "points" the correct handler
 873+ 7404             >                // Use of "; ok" to suppress "warning[fwdref]"
 873+ 7404             >
 873+ 7404             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 874+ 7404 2D 6F                        dw      HERE                    // here
 875+ 7406 45 64 44 00                  dw      LIT, 68                 // 68
 876+ 740A 48 6A                        dw      PLUS                    // +
 877+ 740C B6 69                        dw      EXIT                    // ;
 878+ 740E
 879+ 740E              //  ______________________________________________________________________
 880+ 740E              //
 881+ 740E              // word         c -- a
 882+ 740E              // reads characters from input streams until it encouners a c delimiter.
 883+ 740E              // Stores that packet so it starts from HERE
 884+ 740E              // WORD leaves a counter as first byte and ends the packet with two spaces.
 885+ 740E              // Other occurrences of c are ignored.
 886+ 740E              // If BLK is zero, text is taken from terminal buffer TIB.
 887+ 740E              // Otherwise text is taken from the disk-block given by BLK.
 888+ 740E              // "in" variable is incremented of the number of character read.
 889+ 740E              // The number of characters read is given by ENCLOSE.
 890+ 740E                              Colon_Def WORD, "WORD", is_normal
 890+ 740E             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 890+ 740E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 890+ 740E             >
 890+ 740E             >                // dummy db directives used to calculate length of namec
 890+ 740E 57 4F 52 44 >                db      "WORD"
 890+ 7412             >len_NFA         defl    $ - temp_NFA
 890+ 7412             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 890+ 740E             >
 890+ 740E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 890+ 740F 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 890+ 7413             >                org     $-1                 // alter last byte of Name just above to set
 890+ 7412 C4          >                db      {b $} | END_BIT     // msb as name end
 890+ 7413             >
 890+ 7413 FC 73       >                dw      last_NFA            // Link to previous definition Name
 890+ 7415             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 890+ 7415 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 890+ 7417             >                else
 890+ 7417 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 890+ 7417             >                endif           ; ok        // for other definitions it "points" the correct handler
 890+ 7417             >                // Use of "; ok" to suppress "warning[fwdref]"
 890+ 7417             >
 890+ 7417             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 891+ 7417 5A 6E EF 6B                  dw      BLK, FETCH              // blk @
 892+ 741B                                                              // if
 893+ 741B 7F 64                        dw      ZBRANCH
 894+ 741D 0C 00                        dw      Word_Else - $
 895+ 741F 5A 6E EF 6B                  dw          BLK, FETCH          //      blk @
 896+ 7423 8C 7D                        dw          BLOCK               //      block ( forward )
 897+ 7425                                                              // else
 898+ 7425 68 64                        dw      BRANCH
 899+ 7427 06 00                        dw      Word_Endif - $
 900+ 7429              Word_Else:
 901+ 7429 EE 6D EF 6B                  dw         TIB, FETCH           //      tib @
 902+ 742D              Word_Endif:                                     // endif
 903+ 742D 63 6E EF 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 903+ 7431 48 6A
 904+ 7433 1E 6B F2 65                  dw      SWAP, ENCLOSE           // swap enclose
 905+ 7437 2D 6F 45 64                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 905+ 743B 22 00 DD 73
 906+ 743F 63 6E CC 6B                  dw      TO_IN, PLUSSTORE        // >in @ +
 907+ 7443 E6 6A 81 6F                  dw      OVER, SUBTRACT, TO_R    // over - >r
 907+ 7447 DF 69
 908+ 7449 06 6A 2D 6F                  dw      R_OP, HERE, CSTORE      // r here c!
 908+ 744D 18 6C
 909+ 744F 48 6A                        dw      PLUS                    // +
 910+ 7451 2D 6F 71 6A                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 910+ 7455 F3 69
 911+ 7457 AD 68                        dw      CMOVE                   // cmove
 912+ 7459 2D 6F                        dw      HERE                    // here
 913+ 745B B6 69                        dw      EXIT                    // ;
 914+ 745D
 915+ 745D              //  ______________________________________________________________________
 916+ 745D              //
 917+ 745D              // (.")         --
 918+ 745D              // Direct procedure compiled by ." and  .(  It executes TYPE.
 919+ 745D                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 919+ 745D             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 919+ 745D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 919+ 745D             >
 919+ 745D             >                // dummy db directives used to calculate length of namec
 919+ 745D 28 2E 22 29 >                db      '(.")'
 919+ 7461             >len_NFA         defl    $ - temp_NFA
 919+ 7461             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 919+ 745D             >
 919+ 745D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 919+ 745E 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 919+ 7462             >                org     $-1                 // alter last byte of Name just above to set
 919+ 7461 A9          >                db      {b $} | END_BIT     // msb as name end
 919+ 7462             >
 919+ 7462 0E 74       >                dw      last_NFA            // Link to previous definition Name
 919+ 7464             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 919+ 7464 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 919+ 7466             >                else
 919+ 7466 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 919+ 7466             >                endif           ; ok        // for other definitions it "points" the correct handler
 919+ 7466             >                // Use of "; ok" to suppress "warning[fwdref]"
 919+ 7466             >
 919+ 7466             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 920+ 7466 06 6A 7F 72                  dw      R_OP, COUNT             // r count
 921+ 746A 2B 6B 71 6A                  dw      DUP, ONE_PLUS           // dup 1+
 922+ 746E F3 69 48 6A                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 922+ 7472 DF 69
 923+ 7474 92 72                        dw      TYPE                    // type
 924+ 7476 B6 69                        dw      EXIT                    // ;
 925+ 7478
 926+ 7478              //  ______________________________________________________________________
 927+ 7478              //
 928+ 7478              // char         -- c
 929+ 7478              // get first character from next input word
 930+ 7478                              Colon_Def CHAR,  "CHAR", is_normal
 930+ 7478             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 930+ 7478             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 930+ 7478             >
 930+ 7478             >                // dummy db directives used to calculate length of namec
 930+ 7478 43 48 41 52 >                db      "CHAR"
 930+ 747C             >len_NFA         defl    $ - temp_NFA
 930+ 747C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 930+ 7478             >
 930+ 7478 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 930+ 7479 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 930+ 747D             >                org     $-1                 // alter last byte of Name just above to set
 930+ 747C D2          >                db      {b $} | END_BIT     // msb as name end
 930+ 747D             >
 930+ 747D 5D 74       >                dw      last_NFA            // Link to previous definition Name
 930+ 747F             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 930+ 747F E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 930+ 7481             >                else
 930+ 7481 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 930+ 7481             >                endif           ; ok        // for other definitions it "points" the correct handler
 930+ 7481             >                // Use of "; ok" to suppress "warning[fwdref]"
 930+ 7481             >
 930+ 7481             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 931+ 7481 85 6D 15 74                  dw      BL, WORD                // bl word
 932+ 7485 71 6A 0A 6C                  dw      ONE_PLUS, CFETCH        // 1+ c@
 933+ 7489 B6 69                        dw      EXIT                    // ;
 934+ 748B
 935+ 748B              //  ______________________________________________________________________
 936+ 748B              //
 937+ 748B              // ,"           --
 938+ 748B              // compiles a string terminated by " as a counted string from next input stream
 939+ 748B                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 939+ 748B             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 939+ 748B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 939+ 748B             >
 939+ 748B             >                // dummy db directives used to calculate length of namec
 939+ 748B 2C 22       >                db      ',"'
 939+ 748D             >len_NFA         defl    $ - temp_NFA
 939+ 748D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 939+ 748B             >
 939+ 748B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 939+ 748C 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 939+ 748E             >                org     $-1                 // alter last byte of Name just above to set
 939+ 748D A2          >                db      {b $} | END_BIT     // msb as name end
 939+ 748E             >
 939+ 748E 78 74       >                dw      last_NFA            // Link to previous definition Name
 939+ 7490             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 939+ 7490 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 939+ 7492             >                else
 939+ 7492 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 939+ 7492             >                endif           ; ok        // for other definitions it "points" the correct handler
 939+ 7492             >                // Use of "; ok" to suppress "warning[fwdref]"
 939+ 7492             >
 939+ 7492             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 940+ 7492 45 64 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 941+ 7496 15 74                        dw      WORD                    // word
 942+ 7498 0A 6C 71 6A                  dw      CFETCH, ONE_PLUS        // c@ 1+
 943+ 749C 3D 6F                        dw      ALLOT                   // allot
 944+ 749E 5B 6D 5A 6F                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
 945+ 74A2 B6 69                        dw      EXIT
 946+ 74A4
 947+ 74A4              //  ______________________________________________________________________
 948+ 74A4              //
 949+ 74A4              // .c           c --
 950+ 74A4              // intermediate general purpose string builder, used by ." and .(
 951+ 74A4                              Colon_Def DOT_C,  ".C", is_immediate
 951+ 74A4             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
 951+ 74A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 951+ 74A4             >
 951+ 74A4             >                // dummy db directives used to calculate length of namec
 951+ 74A4 2E 43       >                db      ".C"
 951+ 74A6             >len_NFA         defl    $ - temp_NFA
 951+ 74A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 951+ 74A4             >
 951+ 74A4 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 951+ 74A5 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
 951+ 74A7             >                org     $-1                 // alter last byte of Name just above to set
 951+ 74A6 C3          >                db      {b $} | END_BIT     // msb as name end
 951+ 74A7             >
 951+ 74A7 8B 74       >                dw      last_NFA            // Link to previous definition Name
 951+ 74A9             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 951+ 74A9 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 951+ 74AB             >                else
 951+ 74AB ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 951+ 74AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 951+ 74AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 951+ 74AB             >
 951+ 74AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 952+ 74AB A6 6E EF 6B                  dw      STATE, FETCH            // state @
 953+ 74AF                                                              // if
 954+ 74AF 7F 64                        dw      ZBRANCH
 955+ 74B1 12 00                        dw      Dot_C_Else - $
 956+ 74B3 8B 71 64 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
 957+ 74B7 15 74 0A 6C                  dw          WORD, CFETCH        //      word c@
 958+ 74BB 71 6A 3D 6F                  dw          ONE_PLUS, ALLOT     //      1+ allot
 959+ 74BF                                                              // else
 960+ 74BF 68 64                        dw      BRANCH
 961+ 74C1 08 00                        dw      Dot_C_Endif - $
 962+ 74C3              Dot_C_Else:
 963+ 74C3 15 74 7F 72                  dw          WORD, COUNT, TYPE   //      word count type
 963+ 74C7 92 72
 964+ 74C9              Dot_C_Endif:                                    // endif
 965+ 74C9 B6 69                        dw      EXIT                    ;
 966+ 74CB
 967+ 74CB              //  ______________________________________________________________________
 968+ 74CB              //
 969+ 74CB              // ."           c --
 970+ 74CB                              Colon_Def DOT_QUOTE,  '."', is_immediate
 970+ 74CB             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
 970+ 74CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 970+ 74CB             >
 970+ 74CB             >                // dummy db directives used to calculate length of namec
 970+ 74CB 2E 22       >                db      '."'
 970+ 74CD             >len_NFA         defl    $ - temp_NFA
 970+ 74CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 970+ 74CB             >
 970+ 74CB C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 970+ 74CC 2E 22       >                db      '."'               // name string in 7-bit ascii, but
 970+ 74CE             >                org     $-1                 // alter last byte of Name just above to set
 970+ 74CD A2          >                db      {b $} | END_BIT     // msb as name end
 970+ 74CE             >
 970+ 74CE A4 74       >                dw      last_NFA            // Link to previous definition Name
 970+ 74D0             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 970+ 74D0 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 970+ 74D2             >                else
 970+ 74D2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 970+ 74D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 970+ 74D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 970+ 74D2             >
 970+ 74D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 971+ 74D2 45 64 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 972+ 74D6 A9 74                        dw      DOT_C                   // [compile] .c
 973+ 74D8 B6 69                        dw      EXIT                    // ; immediate
 974+ 74DA
 975+ 74DA              //  ______________________________________________________________________
 976+ 74DA              //
 977+ 74DA              // .(           c --
 978+ 74DA                              Colon_Def DOT_BRACKET,  ".(", is_immediate
 978+ 74DA             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
 978+ 74DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ 74DA             >
 978+ 74DA             >                // dummy db directives used to calculate length of namec
 978+ 74DA 2E 28       >                db      ".("
 978+ 74DC             >len_NFA         defl    $ - temp_NFA
 978+ 74DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ 74DA             >
 978+ 74DA C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ 74DB 2E 28       >                db      ".("               // name string in 7-bit ascii, but
 978+ 74DD             >                org     $-1                 // alter last byte of Name just above to set
 978+ 74DC A8          >                db      {b $} | END_BIT     // msb as name end
 978+ 74DD             >
 978+ 74DD CB 74       >                dw      last_NFA            // Link to previous definition Name
 978+ 74DF             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 74DF E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 978+ 74E1             >                else
 978+ 74E1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 978+ 74E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 74E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 74E1             >
 978+ 74E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 74E1 45 64 29 00                  dw      LIT, ")"                // [char] )
 980+ 74E5 A9 74                        dw      DOT_C                   // [compile] .c
 981+ 74E7 B6 69                        dw      EXIT                    // ; immediate
 982+ 74E9
 983+ 74E9              //  ______________________________________________________________________
 984+ 74E9              //
 985+ 74E9              // (sgn)        a -- a f
 986+ 74E9              // determines if char in addr a is a sign (+ or -), and in that case increments
 987+ 74E9              // a flag. Returns f as the sign, true for negative, false for positive.
 988+ 74E9              // called by NUMBER and (EXP)
 989+ 74E9                              Colon_Def CSGN,  "(SGN)", is_normal
 989+ 74E9             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
 989+ 74E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 989+ 74E9             >
 989+ 74E9             >                // dummy db directives used to calculate length of namec
 989+ 74E9 28 53 47 4E >                db      "(SGN)"
 989+ 74ED 29          >
 989+ 74EE             >len_NFA         defl    $ - temp_NFA
 989+ 74EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 989+ 74E9             >
 989+ 74E9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 989+ 74EA 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
 989+ 74EE 29          >
 989+ 74EF             >                org     $-1                 // alter last byte of Name just above to set
 989+ 74EE A9          >                db      {b $} | END_BIT     // msb as name end
 989+ 74EF             >
 989+ 74EF DA 74       >                dw      last_NFA            // Link to previous definition Name
 989+ 74F1             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 989+ 74F1 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 989+ 74F3             >                else
 989+ 74F3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 989+ 74F3             >                endif           ; ok        // for other definitions it "points" the correct handler
 989+ 74F3             >                // Use of "; ok" to suppress "warning[fwdref]"
 989+ 74F3             >
 989+ 74F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 990+ 74F3 2B 6B 71 6A                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
 990+ 74F7 0A 6C
 991+ 74F9 2B 6B 45 64                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
 991+ 74FD 2D 00 8F 6F
 992+ 7501                                                              // if
 993+ 7501 7F 64                        dw      ZBRANCH
 994+ 7503 12 00                        dw      CSgn_Else_0 - $
 995+ 7505 F6 6A                        dw          DROP                //      drop
 996+ 7507 71 6A                        dw          ONE_PLUS            //      1+
 997+ 7509 63 6D B9 6E                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
 997+ 750D CC 6B
 998+ 750F 63 6D                        dw          ONE                 //      1
 999+ 7511                                                              // else
1000+ 7511 68 64                        dw      BRANCH
1001+ 7513 16 00                        dw      CSgn_Endif_0 - $
1002+ 7515              CSgn_Else_0:
1003+ 7515 45 64 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1003+ 7519 8F 6F
1004+ 751B                                                              //      if
1005+ 751B 7F 64                        dw          ZBRANCH
1006+ 751D 0A 00                        dw          CSgn_Endif_1 - $
1007+ 751F 71 6A                        dw              ONE_PLUS        //          1+
1008+ 7521 63 6D B9 6E                  dw              ONE, DPL        //          1 dpl
1009+ 7525 CC 6B                        dw              PLUSSTORE       //          +!
1010+ 7527              CSgn_Endif_1                                    //      endif
1011+ 7527 5B 6D                        dw          ZERO                //      0
1012+ 7529              CSgn_Endif_0:                                   // endif
1013+ 7529 B6 69                        dw      EXIT
1014+ 752B
1015+ 752B              //  ______________________________________________________________________
1016+ 752B              //
1017+ 752B              // (number)     d a -- d1 a1
1018+ 752B              // using the current BASE parse characters stored in address a
1019+ 752B              // accumulating a double precision integer d
1020+ 752B              // the process stops at the first not-convertible character
1021+ 752B              // A double-number is kept in CPU registers as HLDE.
1022+ 752B              // On the stack a double number is treated as two single numbers
1023+ 752B              // where HL is on the top of the stack and DE is the second from top,
1024+ 752B              // so in the stack memory it appears as LHED.
1025+ 752B              // Instead, in 2VARIABLE a double number is stored as EDLH.
1026+ 752B                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1026+ 752B             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1026+ 752B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1026+ 752B             >
1026+ 752B             >                // dummy db directives used to calculate length of namec
1026+ 752B 28 4E 55 4D >                db      "(NUMBER)"
1026+ 752F 42 45 52 29 >
1026+ 7533             >len_NFA         defl    $ - temp_NFA
1026+ 7533             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1026+ 752B             >
1026+ 752B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1026+ 752C 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1026+ 7530 42 45 52 29 >
1026+ 7534             >                org     $-1                 // alter last byte of Name just above to set
1026+ 7533 A9          >                db      {b $} | END_BIT     // msb as name end
1026+ 7534             >
1026+ 7534 E9 74       >                dw      last_NFA            // Link to previous definition Name
1026+ 7536             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1026+ 7536 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1026+ 7538             >                else
1026+ 7538 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1026+ 7538             >                endif           ; ok        // for other definitions it "points" the correct handler
1026+ 7538             >                // Use of "; ok" to suppress "warning[fwdref]"
1026+ 7538             >
1026+ 7538             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1027+ 7538                                                              // begin
1028+ 7538              CNumber_Begin:
1029+ 7538 71 6A                        dw          ONE_PLUS            //      1+
1030+ 753A 2B 6B DF 69                  dw          DUP, TO_R           //      dup >r
1031+ 753E 0A 6C                        dw          CFETCH              //      @
1032+ 7540 B0 6E EF 6B                  dw          BASE, FETCH         //      base @
1033+ 7544 25 65                        dw          DIGIT               //      digit
1034+ 7546                                                              // while
1035+ 7546 7F 64                        dw      ZBRANCH
1036+ 7548 2C 00                        dw      CNumber_While_end - $
1037+ 754A 1E 6B                        dw          SWAP                //      swap
1038+ 754C B0 6E EF 6B                  dw          BASE, FETCH         //      base @
1039+ 7550 E2 68                        dw          UM_MUL              //      um*
1040+ 7552 F6 6A 38 6B                  dw          DROP, ROT           //      drop rot
1041+ 7556 B0 6E EF 6B                  dw          BASE, FETCH         //      base @
1042+ 755A E2 68                        dw          UM_MUL              //      um*
1043+ 755C 55 6A                        dw          DPLUS               //      d+
1044+ 755E B9 6E EF 6B                  dw          DPL, FETCH          //      dpl @
1045+ 7562 71 6A                        dw          ONE_PLUS            //      1+
1046+ 7564                                                              //      if
1047+ 7564 7F 64                        dw          ZBRANCH
1048+ 7566 08 00                        dw          CNumber_Endif - $
1049+ 7568 63 6D B9 6E                  dw              ONE, DPL        //          1 dpl
1050+ 756C CC 6B                        dw              PLUSSTORE       //          +!
1051+ 756E              CNumber_Endif:                                  //      endif
1052+ 756E F3 69                        dw             R_TO             //      r>  ( balance rp )
1053+ 7570 68 64                        dw      BRANCH
1054+ 7572 C6 FF                        dw      CNumber_Begin - $
1055+ 7574              CNumber_While_end:                              // repeat
1056+ 7574 F3 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1057+ 7576 B6 69                        dw      EXIT                    // ;
1058+ 7578
1059+ 7578              //  ______________________________________________________________________
1060+ 7578              //
1061+ 7578              // number       a -- d
1062+ 7578                              Colon_Def NUMBER,  "NUMBER", is_normal
1062+ 7578             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1062+ 7578             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1062+ 7578             >
1062+ 7578             >                // dummy db directives used to calculate length of namec
1062+ 7578 4E 55 4D 42 >                db      "NUMBER"
1062+ 757C 45 52       >
1062+ 757E             >len_NFA         defl    $ - temp_NFA
1062+ 757E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1062+ 7578             >
1062+ 7578 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1062+ 7579 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1062+ 757D 45 52       >
1062+ 757F             >                org     $-1                 // alter last byte of Name just above to set
1062+ 757E D2          >                db      {b $} | END_BIT     // msb as name end
1062+ 757F             >
1062+ 757F 2B 75       >                dw      last_NFA            // Link to previous definition Name
1062+ 7581             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1062+ 7581 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1062+ 7583             >                else
1062+ 7583 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1062+ 7583             >                endif           ; ok        // for other definitions it "points" the correct handler
1062+ 7583             >                // Use of "; ok" to suppress "warning[fwdref]"
1062+ 7583             >
1062+ 7583             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1063+ 7583 5B 6D 5B 6D                  dw      ZERO, ZERO              // 0 0
1064+ 7587 38 6B                        dw      ROT                     // rot
1065+ 7589 F1 74 DF 69                  dw      CSGN, TO_R              // (sgn) >r
1066+ 758D 7C 6D B9 6E                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1066+ 7591 FC 6B
1067+ 7593 36 75                        dw      CNUMBER                 // (number)
1068+ 7595 2B 6B 0A 6C                  dw      DUP, CFETCH             // dup c@
1069+ 7599 45 64 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1069+ 759D 8F 6F
1070+ 759F                                                              // if
1071+ 759F 7F 64                        dw      ZBRANCH
1072+ 75A1 0A 00                        dw      Number_Endif_1 - $
1073+ 75A3 5B 6D B9 6E                  dw          ZERO, DPL, STORE    //      0 dpl !
1073+ 75A7 FC 6B
1074+ 75A9 36 75                        dw          CNUMBER             //      (number)
1075+ 75AB              Number_Endif_1:                                 // endif
1076+ 75AB 0A 6C 85 6D                  dw      CFETCH, BL              // c@ bl
1077+ 75AF 81 6F 5B 6D                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1077+ 75B3 F8 70
1078+ 75B5 F3 69                        dw      R_TO                    // r>
1079+ 75B7                                                              // if
1080+ 75B7 7F 64                        dw      ZBRANCH
1081+ 75B9 04 00                        dw      Number_Endif_2 - $
1082+ 75BB C8 6A                        dw          DMINUS              //      dminus
1083+ 75BD              Number_Endif_2:                                 // endif
1084+ 75BD B6 69                        dw      EXIT                    // ;
1085+ 75BF
1086+ 75BF              //  ______________________________________________________________________
1087+ 75BF              //
1088+ 75BF              // -find        a -- d
1089+ 75BF                              Colon_Def LFIND,  "-FIND", is_normal
1089+ 75BF             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1089+ 75BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1089+ 75BF             >
1089+ 75BF             >                // dummy db directives used to calculate length of namec
1089+ 75BF 2D 46 49 4E >                db      "-FIND"
1089+ 75C3 44          >
1089+ 75C4             >len_NFA         defl    $ - temp_NFA
1089+ 75C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1089+ 75BF             >
1089+ 75BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1089+ 75C0 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1089+ 75C4 44          >
1089+ 75C5             >                org     $-1                 // alter last byte of Name just above to set
1089+ 75C4 C4          >                db      {b $} | END_BIT     // msb as name end
1089+ 75C5             >
1089+ 75C5 78 75       >                dw      last_NFA            // Link to previous definition Name
1089+ 75C7             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1089+ 75C7 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1089+ 75C9             >                else
1089+ 75C9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1089+ 75C9             >                endif           ; ok        // for other definitions it "points" the correct handler
1089+ 75C9             >                // Use of "; ok" to suppress "warning[fwdref]"
1089+ 75C9             >
1089+ 75C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1090+ 75C9 85 6D 15 74                  dw      BL, WORD                // bl word
1091+ 75CD 8E 6E EF 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1091+ 75D1 EF 6B
1092+ 75D3 9A 65                        dw      C_FIND                  // (find)
1093+ 75D5 19 70                        dw      QDUP                    // ?dup
1094+ 75D7 0D 6A                        dw      ZEQUAL                  // 0=
1095+ 75D9                                                              // if
1096+ 75D9 7F 64                        dw      ZBRANCH
1097+ 75DB 08 00                        dw      LFind_Endif - $
1098+ 75DD 2D 6F                        dw          HERE                //      here
1099+ 75DF 74 70                        dw          LATEST              //      latest
1100+ 75E1 9A 65                        dw          C_FIND              //      (find)
1101+ 75E3              LFind_Endif:                                    // endif
1102+ 75E3 B6 69                        dw      EXIT                    // ;
1103+ 75E5
1104+ 75E5              //  ______________________________________________________________________
1105+ 75E5              //
1106+ 75E5              // (abort)      --
1107+ 75E5                              Colon_Def CABORT,  "(ABORT)", is_normal
1107+ 75E5             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1107+ 75E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1107+ 75E5             >
1107+ 75E5             >                // dummy db directives used to calculate length of namec
1107+ 75E5 28 41 42 4F >                db      "(ABORT)"
1107+ 75E9 52 54 29    >
1107+ 75EC             >len_NFA         defl    $ - temp_NFA
1107+ 75EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1107+ 75E5             >
1107+ 75E5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1107+ 75E6 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1107+ 75EA 52 54 29    >
1107+ 75ED             >                org     $-1                 // alter last byte of Name just above to set
1107+ 75EC A9          >                db      {b $} | END_BIT     // msb as name end
1107+ 75ED             >
1107+ 75ED BF 75       >                dw      last_NFA            // Link to previous definition Name
1107+ 75EF             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1107+ 75EF E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1107+ 75F1             >                else
1107+ 75F1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1107+ 75F1             >                endif           ; ok        // for other definitions it "points" the correct handler
1107+ 75F1             >                // Use of "; ok" to suppress "warning[fwdref]"
1107+ 75F1             >
1107+ 75F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1108+ 75F1 C4 78                        dw      ABORT                   // abort
1109+ 75F3 B6 69                        dw      EXIT                    // ;
1110+ 75F5
1111+ 75F5              //  ______________________________________________________________________
1112+ 75F5              //
1113+ 75F5              // error        n --
1114+ 75F5              // raise an error
1115+ 75F5              // if WARNING is 0, prints "MSG#n".
1116+ 75F5              // if WARNING is 1, prints line n of screen 4.
1117+ 75F5              // if WARNING is -1 does (ABORT) that normally does ABORT
1118+ 75F5              // value can be negative or beyond block 4.
1119+ 75F5                              Colon_Def ERROR,  "ERROR", is_normal
1119+ 75F5             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1119+ 75F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1119+ 75F5             >
1119+ 75F5             >                // dummy db directives used to calculate length of namec
1119+ 75F5 45 52 52 4F >                db      "ERROR"
1119+ 75F9 52          >
1119+ 75FA             >len_NFA         defl    $ - temp_NFA
1119+ 75FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1119+ 75F5             >
1119+ 75F5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1119+ 75F6 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1119+ 75FA 52          >
1119+ 75FB             >                org     $-1                 // alter last byte of Name just above to set
1119+ 75FA D2          >                db      {b $} | END_BIT     // msb as name end
1119+ 75FB             >
1119+ 75FB E5 75       >                dw      last_NFA            // Link to previous definition Name
1119+ 75FD             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1119+ 75FD E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1119+ 75FF             >                else
1119+ 75FF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1119+ 75FF             >                endif           ; ok        // for other definitions it "points" the correct handler
1119+ 75FF             >                // Use of "; ok" to suppress "warning[fwdref]"
1119+ 75FF             >
1119+ 75FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1120+ 75FF 06 6E EF 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1120+ 7603 20 6A
1121+ 7605                                                              // if
1122+ 7605 7F 64                        dw      ZBRANCH
1123+ 7607 04 00                        dw      Error_Endif_1 - $
1124+ 7609 EF 75                        dw          CABORT              //      (abort)
1125+ 760B              Error_Endif_1:                                  // endif
1126+ 760B 2D 6F 7F 72                  dw      HERE, COUNT, TYPE       // here count type
1126+ 760F 92 72
1127+ 7611 64 74                        dw      C_DOT_QUOTE             // .( ? )
1128+ 7613 02 3F 20                     db      2, "? "
1129+ 7616 B7 7A                        dw      MESSAGE                 // message  ( forward )
1130+ 7618 DD 6D EF 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1130+ 761C 8F 69
1131+ 761E 5A 6E EF 6B                  dw      BLK, FETCH, LDUP        // blk @ -dup
1131+ 7622 07 70
1132+ 7624                                                              // if
1133+ 7624 7F 64                        dw      ZBRANCH
1134+ 7626 08 00                        dw      Error_Endif_2 - $
1135+ 7628 63 6E EF 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1135+ 762C 1E 6B
1136+ 762E              Error_Endif_2:                                  // endif
1137+ 762E 83 78                        dw      QUIT                    // quit ( forward )
1138+ 7630 B6 69                        dw      EXIT                    // ;
1139+ 7632              //  ______________________________________________________________________
1140+ 7632              //
1141+ 7632              // id.          nfa --
1142+ 7632                              Colon_Def ID_DOT,  "ID.", is_normal
1142+ 7632             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1142+ 7632             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1142+ 7632             >
1142+ 7632             >                // dummy db directives used to calculate length of namec
1142+ 7632 49 44 2E    >                db      "ID."
1142+ 7635             >len_NFA         defl    $ - temp_NFA
1142+ 7635             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1142+ 7632             >
1142+ 7632 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1142+ 7633 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1142+ 7636             >                org     $-1                 // alter last byte of Name just above to set
1142+ 7635 AE          >                db      {b $} | END_BIT     // msb as name end
1142+ 7636             >
1142+ 7636 F5 75       >                dw      last_NFA            // Link to previous definition Name
1142+ 7638             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1142+ 7638 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1142+ 763A             >                else
1142+ 763A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1142+ 763A             >                endif           ; ok        // for other definitions it "points" the correct handler
1142+ 763A             >                // Use of "; ok" to suppress "warning[fwdref]"
1142+ 763A             >
1142+ 763A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1143+ 763A 02 74 45 64                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1143+ 763E 20 00 45 64
1143+ 7642 60 00
1144+ 7644 B1 73                        dw      FILL                    // fill
1145+ 7646 2B 6B B2 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1145+ 764A 84 70
1146+ 764C E6 6A 81 6F                  dw      OVER, SUBTRACT          // over -
1147+ 7650 02 74 1E 6B                  dw      PAD, SWAP               // pad swap
1148+ 7654 AD 68                        dw      CMOVE                   // cmove
1149+ 7656 02 74 7F 72                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1149+ 765A 45 64 1F 00
1150+ 765E 48 69                        dw      AND_OP                  // and  ( use only lower bits )
1151+ 7660 92 72 3E 70                  dw      TYPE, SPACE             // type
1152+ 7664 B6 69                        dw      EXIT                    // ;
1153+ 7666
1154+ 7666              //  ______________________________________________________________________
1155+ 7666              //
1156+ 7666              // code         -- cccc
1157+ 7666                              Colon_Def CODE,  "CODE", is_normal
1157+ 7666             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1157+ 7666             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1157+ 7666             >
1157+ 7666             >                // dummy db directives used to calculate length of namec
1157+ 7666 43 4F 44 45 >                db      "CODE"
1157+ 766A             >len_NFA         defl    $ - temp_NFA
1157+ 766A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1157+ 7666             >
1157+ 7666 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1157+ 7667 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1157+ 766B             >                org     $-1                 // alter last byte of Name just above to set
1157+ 766A C5          >                db      {b $} | END_BIT     // msb as name end
1157+ 766B             >
1157+ 766B 32 76       >                dw      last_NFA            // Link to previous definition Name
1157+ 766D             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1157+ 766D E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1157+ 766F             >                else
1157+ 766F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1157+ 766F             >                endif           ; ok        // for other definitions it "points" the correct handler
1157+ 766F             >                // Use of "; ok" to suppress "warning[fwdref]"
1157+ 766F             >
1157+ 766F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1158+ 766F C7 75                        dw      LFIND                   // -find
1159+ 7671                                                              // if
1160+ 7671 7F 64                        dw      ZBRANCH
1161+ 7673 10 00                        dw      Code_Endif - $
1162+ 7675 F6 6A                        dw          DROP                //      drop
1163+ 7677 D6 70 38 76                  dw          TO_NAME, ID_DOT     //      >name id.
1164+ 767B 45 64 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1164+ 767F B7 7A
1165+ 7681 3E 70                        dw          SPACE               //      space
1166+ 7683              Code_Endif:                                     // endif
1167+ 7683 2D 6F                        dw      HERE                    // here
1168+ 7685                                                              // ( ---- here begins NFA ---- )
1169+ 7685 2B 6B 0A 6C                  dw      DUP, CFETCH             // dup c@
1170+ 7689 F9 6D EF 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1170+ 768D DA 6F
1171+ 768F 71 6A 3D 6F                  dw      ONE_PLUS, ALLOT         // 1+ allot
1172+ 7693 2B 6B                        dw      DUP                     // dup
1173+ 7695 45 64                        dw      LIT
1174+ 7697 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1175+ 7699 E2 6B                        dw      TOGGLE                  // toggle
1176+ 769B 2D 6F 7D 6A                  dw      HERE, ONE_SUBTRACT     // here 1- ( last character )
1177+ 769F 45 64 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1177+ 76A3 E2 6B
1178+ 76A5                                                              // ( ---- here is LFA ---- )
1179+ 76A5 74 70 49 6F                  dw      LATEST, COMMA           // latest ,
1180+ 76A9 9B 6E EF 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1180+ 76AD FC 6B
1181+ 76AF 2D 6F 99 6A                  dw      HERE, CELL_PLUS, COMMA  // ( CFA point PFA )
1181+ 76B3 49 6F
1182+ 76B5 B6 69                        dw      EXIT                    // ;
1183+ 76B7
1184+ 76B7              //  ______________________________________________________________________
1185+ 76B7              //
1186+ 76B7              // create       -- cccc     ( compile time )
1187+ 76B7              //              -- a        ( run time )
1188+ 76B7                              Colon_Def CREATE,  "CREATE", is_normal
1188+ 76B7             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1188+ 76B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1188+ 76B7             >
1188+ 76B7             >                // dummy db directives used to calculate length of namec
1188+ 76B7 43 52 45 41 >                db      "CREATE"
1188+ 76BB 54 45       >
1188+ 76BD             >len_NFA         defl    $ - temp_NFA
1188+ 76BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1188+ 76B7             >
1188+ 76B7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1188+ 76B8 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1188+ 76BC 54 45       >
1188+ 76BE             >                org     $-1                 // alter last byte of Name just above to set
1188+ 76BD C5          >                db      {b $} | END_BIT     // msb as name end
1188+ 76BE             >
1188+ 76BE 66 76       >                dw      last_NFA            // Link to previous definition Name
1188+ 76C0             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1188+ 76C0 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1188+ 76C2             >                else
1188+ 76C2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1188+ 76C2             >                endif           ; ok        // for other definitions it "points" the correct handler
1188+ 76C2             >                // Use of "; ok" to suppress "warning[fwdref]"
1188+ 76C2             >
1188+ 76C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1189+ 76C2 6D 76 C4 71                  dw      CODE, SMUDGE        // code smudge
1190+ 76C6
1191+ 76C6
1192+ 76C6 1A 72                        dw      C_SEMICOLON_CODE
1193+ 76C8                              // this routine is called from the call coded in CFA
1194+ 76C8              Create_Ptr:
1195+ 76C8 13                           inc     de
1196+ 76C9 D5                           push    de                  // balance TOS before overwrite it
1197+ 76CA
1198+ 76CA                              next
1198+ 76CA DD E9       >                jp      (ix)
1199+ 76CC
1200+ 76CC              //  ______________________________________________________________________
1201+ 76CC              //
1202+ 76CC              // [compile]    -- cccc     ( compile time )
1203+ 76CC                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1203+ 76CC             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1203+ 76CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1203+ 76CC             >
1203+ 76CC             >                // dummy db directives used to calculate length of namec
1203+ 76CC 5B 43 4F 4D >                db      "[COMPILE]"
1203+ 76D0 50 49 4C 45 >
1203+ 76D4 5D          >
1203+ 76D5             >len_NFA         defl    $ - temp_NFA
1203+ 76D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1203+ 76CC             >
1203+ 76CC C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1203+ 76CD 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1203+ 76D1 50 49 4C 45 >
1203+ 76D5 5D          >
1203+ 76D6             >                org     $-1                 // alter last byte of Name just above to set
1203+ 76D5 DD          >                db      {b $} | END_BIT     // msb as name end
1203+ 76D6             >
1203+ 76D6 B7 76       >                dw      last_NFA            // Link to previous definition Name
1203+ 76D8             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1203+ 76D8 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1203+ 76DA             >                else
1203+ 76DA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1203+ 76DA             >                endif           ; ok        // for other definitions it "points" the correct handler
1203+ 76DA             >                // Use of "; ok" to suppress "warning[fwdref]"
1203+ 76DA             >
1203+ 76DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1204+ 76DA C7 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1205+ 76DC 0D 6A                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1206+ 76DE 5B 6D F8 70                  dw      ZERO, QERROR            // 0 ?error
1207+ 76E2 F6 6A                        dw      DROP                    // drop       (  cfa  )
1208+ 76E4 49 6F                        dw      COMMA                   // ,
1209+ 76E6 B6 69                        dw      EXIT                    // ; immediate
1210+ 76E8
1211+ 76E8              //  ______________________________________________________________________
1212+ 76E8              //
1213+ 76E8              // literal      n --      ( compile time )
1214+ 76E8                              Colon_Def LITERAL,  "LITERAL", is_immediate
1214+ 76E8             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1214+ 76E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1214+ 76E8             >
1214+ 76E8             >                // dummy db directives used to calculate length of namec
1214+ 76E8 4C 49 54 45 >                db      "LITERAL"
1214+ 76EC 52 41 4C    >
1214+ 76EF             >len_NFA         defl    $ - temp_NFA
1214+ 76EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1214+ 76E8             >
1214+ 76E8 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1214+ 76E9 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1214+ 76ED 52 41 4C    >
1214+ 76F0             >                org     $-1                 // alter last byte of Name just above to set
1214+ 76EF CC          >                db      {b $} | END_BIT     // msb as name end
1214+ 76F0             >
1214+ 76F0 CC 76       >                dw      last_NFA            // Link to previous definition Name
1214+ 76F2             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1214+ 76F2 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1214+ 76F4             >                else
1214+ 76F4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1214+ 76F4             >                endif           ; ok        // for other definitions it "points" the correct handler
1214+ 76F4             >                // Use of "; ok" to suppress "warning[fwdref]"
1214+ 76F4             >
1214+ 76F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1215+ 76F4 A6 6E EF 6B                  dw      STATE, FETCH            // state @
1216+ 76F8                                                              // if
1217+ 76F8 7F 64                        dw      ZBRANCH
1218+ 76FA 08 00                        dw      Literal_Endif - $
1219+ 76FC 8B 71 45 64                  dw          COMPILE, LIT        //      compile lit
1220+ 7700 49 6F                        dw          COMMA               //      ,
1221+ 7702              Literal_Endif:                                  // endif
1222+ 7702 B6 69                        dw      EXIT                    // ; immediate
1223+ 7704
1224+ 7704              //  ______________________________________________________________________
1225+ 7704              //
1226+ 7704              // dliteral     n --      ( compile time )
1227+ 7704                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1227+ 7704             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1227+ 7704             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1227+ 7704             >
1227+ 7704             >                // dummy db directives used to calculate length of namec
1227+ 7704 44 4C 49 54 >                db      "DLITERAL"
1227+ 7708 45 52 41 4C >
1227+ 770C             >len_NFA         defl    $ - temp_NFA
1227+ 770C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1227+ 7704             >
1227+ 7704 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1227+ 7705 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1227+ 7709 45 52 41 4C >
1227+ 770D             >                org     $-1                 // alter last byte of Name just above to set
1227+ 770C CC          >                db      {b $} | END_BIT     // msb as name end
1227+ 770D             >
1227+ 770D E8 76       >                dw      last_NFA            // Link to previous definition Name
1227+ 770F             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1227+ 770F E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1227+ 7711             >                else
1227+ 7711 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1227+ 7711             >                endif           ; ok        // for other definitions it "points" the correct handler
1227+ 7711             >                // Use of "; ok" to suppress "warning[fwdref]"
1227+ 7711             >
1227+ 7711             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1228+ 7711 A6 6E EF 6B                  dw      STATE, FETCH            // state @
1229+ 7715                                                              // if
1230+ 7715 7F 64                        dw      ZBRANCH
1231+ 7717 08 00                        dw      DLiteral_Endif - $
1232+ 7719 1E 6B                        dw          SWAP                //      swap
1233+ 771B F2 76 F2 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1234+ 771F              DLiteral_Endif:                                 // endif
1235+ 771F B6 69                        dw      EXIT                    // ; immediate
1236+ 7721
1237+ 7721              //  ______________________________________________________________________
1238+ 7721              //
1239+ 7721              // [char]       n --      ( compile time )
1240+ 7721              // inside colon definition, gets first character from next input word
1241+ 7721              // and compiles it as literal.
1242+ 7721                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1242+ 7721             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1242+ 7721             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1242+ 7721             >
1242+ 7721             >                // dummy db directives used to calculate length of namec
1242+ 7721 5B 43 48 41 >                db      "[CHAR]"
1242+ 7725 52 5D       >
1242+ 7727             >len_NFA         defl    $ - temp_NFA
1242+ 7727             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1242+ 7721             >
1242+ 7721 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1242+ 7722 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1242+ 7726 52 5D       >
1242+ 7728             >                org     $-1                 // alter last byte of Name just above to set
1242+ 7727 DD          >                db      {b $} | END_BIT     // msb as name end
1242+ 7728             >
1242+ 7728 04 77       >                dw      last_NFA            // Link to previous definition Name
1242+ 772A             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1242+ 772A E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1242+ 772C             >                else
1242+ 772C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1242+ 772C             >                endif           ; ok        // for other definitions it "points" the correct handler
1242+ 772C             >                // Use of "; ok" to suppress "warning[fwdref]"
1242+ 772C             >
1242+ 772C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1243+ 772C 7F 74 F2 76                  dw      CHAR, LITERAL           // char [compile] literal
1244+ 7730 B6 69                        dw      EXIT                    // ; immediate
1245+ 7732
1246+ 7732              //  ______________________________________________________________________
1247+ 7732              //
1248+ 7732              // 0x00         n --      ( compile time )
1249+ 7732                              Colon_Def NUL_WORD,  $00, is_immediate
1249+ 7732             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1249+ 7732             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1249+ 7732             >
1249+ 7732             >                // dummy db directives used to calculate length of namec
1249+ 7732 00          >                db      $00
1249+ 7733             >len_NFA         defl    $ - temp_NFA
1249+ 7733             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1249+ 7732             >
1249+ 7732 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1249+ 7733 00          >                db      $00               // name string in 7-bit ascii, but
1249+ 7734             >                org     $-1                 // alter last byte of Name just above to set
1249+ 7733 80          >                db      {b $} | END_BIT     // msb as name end
1249+ 7734             >
1249+ 7734 21 77       >                dw      last_NFA            // Link to previous definition Name
1249+ 7736             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1249+ 7736 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1249+ 7738             >                else
1249+ 7738 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1249+ 7738             >                endif           ; ok        // for other definitions it "points" the correct handler
1249+ 7738             >                // Use of "; ok" to suppress "warning[fwdref]"
1249+ 7738             >
1249+ 7738             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1250+ 7738 5A 6E EF 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1250+ 773C 63 6D
1251+ 773E CC 6F                        dw      GREATER                 // > if
1252+ 7740                                                              // if
1253+ 7740 7F 64                        dw      ZBRANCH
1254+ 7742 28 00                        dw      Nul_Else_1 - $
1255+ 7744 63 6D 5A 6E                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1255+ 7748 CC 6B
1256+ 774A 5B 6D 63 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
1256+ 774E FC 6B
1257+ 7750 5A 6E EF 6B                  dw          BLK, FETCH          //      blk @
1258+ 7754 A7 6D                        dw          BSCR                //      b/scr
1259+ 7756 7D 6A                        dw          ONE_SUBTRACT        //      1 -
1260+ 7758 48 69                        dw          AND_OP              //      and  ( this is tricky )
1261+ 775A 0D 6A                        dw          ZEQUAL              //      0=
1262+ 775C                                                              //      if
1263+ 775C 7F 64                        dw          ZBRANCH
1264+ 775E 08 00                        dw          Nul_Endif_2 - $
1265+ 7760 2A 71                        dw              QEXEC           //          ?exec
1266+ 7762 F3 69 F6 6A                  dw              R_TO, DROP      //          r> drop
1267+ 7766              Nul_Endif_2:                                    //      endif
1268+ 7766 68 64                        dw      BRANCH
1269+ 7768 06 00                        dw      Nul_Endif_1 - $
1270+ 776A              Nul_Else_1:                                     // else
1271+ 776A F3 69 F6 6A                  dw          R_TO, DROP          //      r> drop
1272+ 776E              Nul_Endif_1:                                    // endif
1273+ 776E B6 69                        dw      EXIT                    // ;
1274+ 7770
1275+ 7770              //  ______________________________________________________________________
1276+ 7770              //
1277+ 7770              // ?stack       --
1278+ 7770              // Raise error #1 if stack is empty and you pop it
1279+ 7770              // Raise error #7 if stack is full.
1280+ 7770              // This means SP must always stay between HERE and FFFF
1281+ 7770              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1282+ 7770              // for Next 8K MMU paging this is $DOE8
1283+ 7770                              Colon_Def QSTACK, "?STACK", is_normal
1283+ 7770             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1283+ 7770             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1283+ 7770             >
1283+ 7770             >                // dummy db directives used to calculate length of namec
1283+ 7770 3F 53 54 41 >                db      "?STACK"
1283+ 7774 43 4B       >
1283+ 7776             >len_NFA         defl    $ - temp_NFA
1283+ 7776             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1283+ 7770             >
1283+ 7770 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1283+ 7771 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1283+ 7775 43 4B       >
1283+ 7777             >                org     $-1                 // alter last byte of Name just above to set
1283+ 7776 CB          >                db      {b $} | END_BIT     // msb as name end
1283+ 7777             >
1283+ 7777 32 77       >                dw      last_NFA            // Link to previous definition Name
1283+ 7779             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1283+ 7779 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
1283+ 777B             >                else
1283+ 777B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
1283+ 777B             >                endif           ; ok        // for other definitions it "points" the correct handler
1283+ 777B             >                // Use of "; ok" to suppress "warning[fwdref]"
1283+ 777B             >
1283+ 777B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1284+ 777B 80 69                        dw      SPFETCH                 // sp@
1285+ 777D DD 6D EF 6B                  dw      S0, FETCH               // s0 @
1286+ 7781 1E 6B 9C 6F                  dw      SWAP, ULESS             // swap u<
1287+ 7785 63 6D F8 70                  dw      ONE, QERROR             // 1 ?error
1288+ 7789 2D 6F                        dw      HERE                    // here
1289+ 778B DD 6D EF 6B                  dw      S0, FETCH, LESS         // s0 @ <
1289+ 778F B0 6F
1290+ 7791                                                              // if
1291+ 7791 7F 64                        dw      ZBRANCH
1292+ 7793 14 00                        dw      QStack_Endif - $
1293+ 7795 80 69                        dw          SPFETCH             //      sp@
1294+ 7797 2D 6F 45 64                  dw          HERE, LIT, 128      //      here 128
1294+ 779B 80 00
1295+ 779D 48 6A 9C 6F                  dw          PLUS, ULESS         //      plus u<
1296+ 77A1 45 64 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1296+ 77A5 F8 70
1297+ 77A7              QStack_Endif:                                   // endif
1298+ 77A7 B6 69                        dw      EXIT                    // ;
1299+ 77A9
1300+ 77A9
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L1.asm
 110  77A9                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
   1+ 77A9              //  ______________________________________________________________________
   2+ 77A9              //
   3+ 77A9              //  L2.asm
   4+ 77A9              //
   5+ 77A9              //  Level-2
   6+ 77A9              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 77A9              //  ______________________________________________________________________
   8+ 77A9
   9+ 77A9
  10+ 77A9              //  ______________________________________________________________________
  11+ 77A9              //
  12+ 77A9              // interpret    --
  13+ 77A9              // This is the text interpreter.
  14+ 77A9              // It executes or compiles, depending on STATE, the text coming from
  15+ 77A9              // current input stream.
  16+ 77A9              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 77A9              // the word is interpreted as numeric and converted, using current BASE,
  18+ 77A9              // leaving on top of stack a single or double precision number, depending
  19+ 77A9              // on the presence of a decimal point.
  20+ 77A9              // If the number conversion fails, the terminal is notified with ? followed
  21+ 77A9              // by the offending word.
  22+ 77A9                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 77A9             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 77A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 77A9             >
  22+ 77A9             >                // dummy db directives used to calculate length of namec
  22+ 77A9 49 4E 54 45 >                db      "INTERPRET"
  22+ 77AD 52 50 52 45 >
  22+ 77B1 54          >
  22+ 77B2             >len_NFA         defl    $ - temp_NFA
  22+ 77B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 77A9             >
  22+ 77A9 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 77AA 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 77AE 52 50 52 45 >
  22+ 77B2 54          >
  22+ 77B3             >                org     $-1                 // alter last byte of Name just above to set
  22+ 77B2 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 77B3             >
  22+ 77B3 70 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 77B5             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 77B5 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 77B7             >                else
  22+ 77B7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  22+ 77B7             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 77B7             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 77B7             >
  22+ 77B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 77B7
  24+ 77B7              Interpret_Begin:                                        // begin
  25+ 77B7 C7 75                        dw          LFIND                       //      -find
  26+ 77B9                                                                      //      if
  27+ 77B9 7F 64                        dw          ZBRANCH
  28+ 77BB 1A 00                        dw          Interpret_Else_1 - $
  29+ 77BD A6 6E EF 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 77C1 B0 6F
  30+ 77C3                                                                      //          if
  31+ 77C3 7F 64                        dw              ZBRANCH
  32+ 77C5 08 00                        dw              Interpret_Else_2 - $
  33+ 77C7 49 6F                        dw                  COMMA               //              ,
  34+ 77C9                                                                      //          else
  35+ 77C9 68 64                        dw              BRANCH
  36+ 77CB 06 00                        dw              Interpret_Endif_2 - $
  37+ 77CD              Interpret_Else_2:
  38+ 77CD 5A 64 08 6D                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77D1              Interpret_Endif_2:                                      //          endif
  40+ 77D1                                                                      //      else
  41+ 77D1 68 64                        dw          BRANCH
  42+ 77D3 28 00                        dw          Interpret_Endif_1 - $
  43+ 77D5              Interpret_Else_1:
  44+ 77D5 2D 6F 81 75                  dw              HERE, NUMBER            //          here number
  45+ 77D9 B9 6E EF 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77DD 71 6A
  46+ 77DF                                                                      //          if
  47+ 77DF 7F 64                        dw              ZBRANCH
  48+ 77E1 16 00                        dw              Interpret_Else_3 - $
  49+ 77E3 51 6E EF 6B                  dw                  NMODE, FETCH        //              nmode @
  50+ 77E7                                                                      //              if
  51+ 77E7 7F 64                        dw                  ZBRANCH
  52+ 77E9 08 00                        dw                  Interpret_Endif_4 - $
  53+ 77EB 63 6D 5B 6D                  dw                      ONE, ZERO       //                  1 0
  54+ 77EF 75 6B                        dw                      TWO_DROP        //                  2drop
  55+ 77F1              Interpret_Endif_4:                                      //              endif
  56+ 77F1 0F 77                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77F3                                                                      //          else
  58+ 77F3 68 64                        dw              BRANCH
  59+ 77F5 06 00                        dw              Interpret_Endif_3 - $
  60+ 77F7              Interpret_Else_3:
  61+ 77F7 F6 6A                        dw                  DROP                //              drop
  62+ 77F9 F2 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77FB              Interpret_Endif_3:                                      //          endif
  64+ 77FB              Interpret_Endif_1:                                      //      endif
  65+ 77FB 79 77                        dw          QSTACK                      //      ?stack
  66+ 77FD A8 67                        dw          QTERMINAL                   //      ?terminal
  67+ 77FF                                                                      //      if
  68+ 77FF 7F 64                        dw          ZBRANCH
  69+ 7801 04 00                        dw          Interpret_Endif_5 - $
  70+ 7803 EF 75                        dw              CABORT                  //          (abort)
  71+ 7805              Interpret_Endif_5:                                      //      endif
  72+ 7805 68 64                        dw      BRANCH
  73+ 7807 B0 FF                        dw      Interpret_Begin - $
  74+ 7809 B6 69                        dw      EXIT                            // ;
  75+ 780B
  76+ 780B              //  ______________________________________________________________________
  77+ 780B              //
  78+ 780B              // vocabulary   -- cccc     ( compile time )
  79+ 780B              // Defining word used in the form   VOCABULARY cccc
  80+ 780B              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 780B              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 780B              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 780B              // so new definitions can be inserted in that vocabulary.
  84+ 780B                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 780B             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 780B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 780B             >
  84+ 780B             >                // dummy db directives used to calculate length of namec
  84+ 780B 56 4F 43 41 >                db      "VOCABULARY"
  84+ 780F 42 55 4C 41 >
  84+ 7813 52 59       >
  84+ 7815             >len_NFA         defl    $ - temp_NFA
  84+ 7815             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 780B             >
  84+ 780B 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 780C 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 7810 42 55 4C 41 >
  84+ 7814 52 59       >
  84+ 7816             >                org     $-1                 // alter last byte of Name just above to set
  84+ 7815 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 7816             >
  84+ 7816 A9 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 7818             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 7818 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 781A             >                else
  84+ 781A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  84+ 781A             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 781A             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 781A             >
  84+ 781A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 781A
  86+ 781A 48 72                        dw      CBUILDS
  87+ 781C
  88+ 781C 45 64 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 7820 49 6F
  89+ 7822 9B 6E EF 6B                  dw      CURRENT, FETCH          // current @
  90+ 7826 A3 6A 49 6F                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 782A 2D 6F                        dw      HERE                    // here
  92+ 782C 27 6E EF 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 7830 49 6F
  93+ 7832 27 6E FC 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 7836
  95+ 7836 58 72                        dw      DOES_TO                 // does>
  96+ 7838              Vocabulary_Does:
  97+ 7838 99 6A                        dw      CELL_PLUS               // cell+
  98+ 783A 8E 6E FC 6B                  dw      CONTEXT, STORE          // context !
  99+ 783E B6 69                        dw      EXIT                    // ;
 100+ 7840
 101+ 7840              //  ______________________________________________________________________
 102+ 7840              //
 103+ 7840              // forth        --
 104+ 7840              // Name of the first vocabulary.
 105+ 7840              // It makes FORTH the CONTEXT vocabulary.
 106+ 7840              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7840              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7840              // of a colon definition to be able to select the vocabulary.
 109+ 7840
 110+ 7840                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7840             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7840             >
 110+ 7840             >                // dummy db directives used to calculate length of namec
 110+ 7840 46 4F 52 54 >                db      "FORTH"
 110+ 7844 48          >
 110+ 7845             >len_NFA         defl    $ - temp_NFA
 110+ 7845             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7840             >
 110+ 7840 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 7841 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 7845 48          >
 110+ 7846             >                org     $-1                 // alter last byte of Name just above to set
 110+ 7845 C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 7846             >
 110+ 7846 0B 78       >                dw      last_NFA            // Link to previous definition Name
 110+ 7848             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 7848 64 72       >                dw      Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 784A             >                else
 110+ 784A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 110+ 784A             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 784A             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 784A             >
 110+ 784A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 784A 38 78                        dw      Vocabulary_Does
 112+ 784C 81 A0                        db      $81, $A0
 113+ 784E              Forth_Latest_Ptr:
 114+ 784E E0 86                        dw      Latest_Definition // Fence_Word // Latest_Definition
 115+ 7850              Voclink_Ptr:
 116+ 7850 00 00                        dw      0
 117+ 7852              // Any new vocabulary is structured as follow:
 118+ 7852              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7852              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7852              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7852              //       at creations it points to the null-word of its parent vocabulary
 122+ 7852              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7852              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7852              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7852              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7852              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7852              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7852
 129+ 7852              //  ______________________________________________________________________
 130+ 7852              //
 131+ 7852              // definitions  --
 132+ 7852              // Used in the form  cccc DEFINITIONS
 133+ 7852              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7852              // vocabulary cccc.
 135+ 7852                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7852             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7852             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7852             >
 135+ 7852             >                // dummy db directives used to calculate length of namec
 135+ 7852 44 45 46 49 >                db      "DEFINITIONS"
 135+ 7856 4E 49 54 49 >
 135+ 785A 4F 4E 53    >
 135+ 785D             >len_NFA         defl    $ - temp_NFA
 135+ 785D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7852             >
 135+ 7852 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7853 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 7857 4E 49 54 49 >
 135+ 785B 4F 4E 53    >
 135+ 785E             >                org     $-1                 // alter last byte of Name just above to set
 135+ 785D D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 785E             >
 135+ 785E 40 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 7860             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7860 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7862             >                else
 135+ 7862 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 135+ 7862             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7862             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7862             >
 135+ 7862             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7862 8E 6E EF 6B                  dw      CONTEXT, FETCH          // context @
 137+ 7866 9B 6E FC 6B                  dw      CURRENT, STORE          // current !
 138+ 786A B6 69                        dw      EXIT                    // ;
 139+ 786C
 140+ 786C              //  ______________________________________________________________________
 141+ 786C              //
 142+ 786C              // (            -- cccc )
 143+ 786C              // the following text is interpreted as a comment until a closing )
 144+ 786C                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 786C             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 786C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 786C             >
 144+ 786C             >                // dummy db directives used to calculate length of namec
 144+ 786C 28          >                db      "("
 144+ 786D             >len_NFA         defl    $ - temp_NFA
 144+ 786D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 786C             >
 144+ 786C C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 786D 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 786E             >                org     $-1                 // alter last byte of Name just above to set
 144+ 786D A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 786E             >
 144+ 786E 52 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7870             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7870 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7872             >                else
 144+ 7872 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 144+ 7872             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7872             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7872             >
 144+ 7872             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7872 45 64 29 00                  dw      LIT, ")"                // [char] )
 146+ 7876 15 74 F6 6A                  dw      WORD, DROP              // word drop
 147+ 787A B6 69                        dw      EXIT                    // ;
 148+ 787C
 149+ 787C              //  ______________________________________________________________________
 150+ 787C              //
 151+ 787C              // quit         --
 152+ 787C              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 787C                              Colon_Def QUIT, "QUIT", is_normal
 153+ 787C             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 787C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 787C             >
 153+ 787C             >                // dummy db directives used to calculate length of namec
 153+ 787C 51 55 49 54 >                db      "QUIT"
 153+ 7880             >len_NFA         defl    $ - temp_NFA
 153+ 7880             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 787C             >
 153+ 787C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 787D 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7881             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7880 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7881             >
 153+ 7881 6C 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7883             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7883 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 7885             >                else
 153+ 7885 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 153+ 7885             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 7885             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 7885             >
 153+ 7885             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 7885
 155+ 7885 11 6F EF 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7889 4B 68 F6 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 788D 5B 6D 11 6F                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 7891 FC 6B
 158+ 7893 5B 6D 5A 6E                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 7897 FC 6B
 159+ 7899 A1 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 789B                                                              // begin
 161+ 789B              Quit_Begin:
 162+ 789B E5 6D EF 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 789F A9 69
 163+ 78A1 9E 68                        dw      CR                      //      cr
 164+ 78A3 96 73                        dw      QUERY                   //      query
 165+ 78A5              Next_Breakpoint_1:
 166+ 78A5 B5 77                        dw      INTERPRET               //      interpret
 167+ 78A7 A6 6E EF 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 78AB 0D 6A
 168+ 78AD                                                              //      if
 169+ 78AD 7F 64                        dw      ZBRANCH
 170+ 78AF 07 00                        dw      Quit_Endif - $
 171+ 78B1 64 74                        dw          C_DOT_QUOTE
 172+ 78B3 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 78B6              Quit_Endif:                                     //      else
 174+ 78B6                                                              // again
 175+ 78B6 68 64                        dw      BRANCH
 176+ 78B8 E3 FF                        dw      Quit_Begin - $
 177+ 78BA B6 69                        dw      EXIT                    // ;
 178+ 78BC
 179+ 78BC              //  ______________________________________________________________________
 180+ 78BC              //
 181+ 78BC              // abort        --
 182+ 78BC                              Colon_Def ABORT, "ABORT", is_normal
 182+ 78BC             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 78BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 78BC             >
 182+ 78BC             >                // dummy db directives used to calculate length of namec
 182+ 78BC 41 42 4F 52 >                db      "ABORT"
 182+ 78C0 54          >
 182+ 78C1             >len_NFA         defl    $ - temp_NFA
 182+ 78C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 78BC             >
 182+ 78BC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 78BD 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 78C1 54          >
 182+ 78C2             >                org     $-1                 // alter last byte of Name just above to set
 182+ 78C1 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 78C2             >
 182+ 78C2 7C 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 78C4             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 78C4 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 78C6             >                else
 182+ 78C6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 182+ 78C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 78C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 78C6             >
 182+ 78C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78C6 DD 6D EF 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 78CA 8F 69
 184+ 78CC 04 72                        dw      DECIMAL                 // decimal
 185+ 78CE 48 78                        dw      FORTH                   // [compile] forth
 186+ 78D0 60 78                        dw      DEFINITIONS             // definitions
 187+ 78D2              Autoexec_Ptr:
 188+ 78D2 1A 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78D4 83 78                        dw      QUIT                    // quit
 190+ 78D6 B6 69                        dw      EXIT                    // ;
 191+ 78D8
 192+ 78D8              //  ______________________________________________________________________
 193+ 78D8              //
 194+ 78D8              // warm         --
 195+ 78D8                              Colon_Def WARM, "WARM", is_normal
 195+ 78D8             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78D8             >
 195+ 78D8             >                // dummy db directives used to calculate length of namec
 195+ 78D8 57 41 52 4D >                db      "WARM"
 195+ 78DC             >len_NFA         defl    $ - temp_NFA
 195+ 78DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78D8             >
 195+ 78D8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78D9 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78DD             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78DC CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78DD             >
 195+ 78DD BC 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78DF             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78DF E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78E1             >                else
 195+ 78E1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 195+ 78E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78E1             >
 195+ 78E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78E1 74 7C                        dw      BLK_INIT                // blk-init
 197+ 78E3 E4 83                        dw      SPLASH                  // splash
 198+ 78E5 45 64 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78E9 22 70
 199+ 78EB C4 78                        dw      ABORT                   // abort
 200+ 78ED B6 69                        dw      EXIT                    // exit
 201+ 78EF
 202+ 78EF              //  ______________________________________________________________________
 203+ 78EF              //
 204+ 78EF              // cold         --
 205+ 78EF                              Colon_Def COLD, "COLD", is_normal
 205+ 78EF             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78EF             >
 205+ 78EF             >                // dummy db directives used to calculate length of namec
 205+ 78EF 43 4F 4C 44 >                db      "COLD"
 205+ 78F3             >len_NFA         defl    $ - temp_NFA
 205+ 78F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78EF             >
 205+ 78EF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78F0 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78F4             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78F3 C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78F4             >
 205+ 78F4 D8 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78F6             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78F6 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78F8             >                else
 205+ 78F8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 205+ 78F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78F8             >
 205+ 78F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78F8 45 64 12 64                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78FC 45 64 2E 64                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 7900 EF 6B                        dw      FETCH                   // @
 209+ 7902 45 64 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 7906 48 6A
 210+ 7908 45 64 14 00                  dw      LIT, 20                 // 20
 211+ 790C AD 68                        dw      CMOVE
 212+ 790E 45 64 0C 64                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 7912 EF 6B                        dw      FETCH                   // @
 214+ 7914 45 64 4E 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 7918 FC 6B                        dw      STORE                   // !
 216+ 791A 5B 6D 51 6E                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 791E FC 6B
 217+ 7920 32 6E EF 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 7924 2B 6B
 218+ 7926 E5 6E FC 6B                  dw      USE, STORE              // use !
 219+ 792A EF 6E FC 6B                  dw      PREV, STORE             // prev !
 220+ 792E 45 64 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 7932 02 6F FC 6B
 221+ 7936              //              dw      LIT, 8
 222+ 7936              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 7936 6B 6D 23 6F                  dw      TWO, HP, STORE          // 2 hp !
 223+ 793A FC 6B
 224+ 793C DF 78        Warm_Start:     dw      WARM
 225+ 793E F6 78        Cold_Start:     dw      COLD
 226+ 7940 B6 69                        dw      EXIT
 227+ 7942
 228+ 7942              //  ______________________________________________________________________
 229+ 7942              WarmRoutine:
 230+ 7942              ColdRoutine:
 231+ 7942 DD 21 34 64                  ld      ix, Next_Ptr
 232+ 7946 D9                           exx
 233+ 7947 E5                           push    hl
 234+ 7948 D9                           exx
 235+ 7949
 236+ 7949 ED 73 08 64                  ld      (SP_Basic), sp
 237+ 794D ED 7B 12 64                  ld      sp, (S0_origin)
 238+ 7951              //              nop
 239+ 7951 2A 14 64                     ld      hl, (R0_origin)
 240+ 7954              //              nop
 241+ 7954                              ldrphl
 241+ 7954 22 30 64    >                ld      (RP_Pointer),hl
 242+ 7957 01 3C 79                     ld      bc, Warm_Start
 243+ 795A 38 02                        jr      c, Warm_Skip
 244+ 795C 03                           inc     bc
 245+ 795D 03                           inc     bc
 246+ 795E              Warm_Skip:
 247+ 795E                              next
 247+ 795E DD E9       >                jp      (ix)
 248+ 7960
 249+ 7960              //  ______________________________________________________________________
 250+ 7960              //
 251+ 7960              // basic        --
 252+ 7960                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7960             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7960             >
 252+ 7960             >                // dummy db directives used to calculate length of namec
 252+ 7960 42 41 53 49 >                db      "BASIC"
 252+ 7964 43          >
 252+ 7965             >len_NFA         defl    $ - temp_NFA
 252+ 7965             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7960             >
 252+ 7960 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7961 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 7965 43          >
 252+ 7966             >                org     $-1                 // alter last byte of Name just above to set
 252+ 7965 C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 7966             >
 252+ 7966 EF 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 7968             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 7968 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 252+ 7968             >                else
 252+ 7968 6A 79       >                dw      $ + 2   ; ok        // is pointed by CFA
 252+ 796A             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 796A             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 796A             >
 252+ 796A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 796A C1                           pop     bc
 254+ 796B 21 00 00                     ld      hl, 0
 255+ 796E 39                           add     hl, sp
 256+ 796F ED 7B 08 64                  ld      sp, (SP_Basic)
 257+ 7973              //              nop
 258+ 7973 22 08 64                     ld      (SP_Basic),hl
 259+ 7976 D9                           exx
 260+ 7977 E1                           pop     hl
 261+ 7978 D9                           exx
 262+ 7979 C9                           ret     // to Basic
 263+ 797A
 264+ 797A              //  ______________________________________________________________________
 265+ 797A              //
 266+ 797A              // +-           n1 n2 -- n3
 267+ 797A              // leaves n1 with the sign of n2 as n3.
 268+ 797A                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 797A             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 797A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 797A             >
 268+ 797A             >                // dummy db directives used to calculate length of namec
 268+ 797A 2B 2D       >                db      "+-"
 268+ 797C             >len_NFA         defl    $ - temp_NFA
 268+ 797C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 797A             >
 268+ 797A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 797B 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 797D             >                org     $-1                 // alter last byte of Name just above to set
 268+ 797C AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 797D             >
 268+ 797D 60 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 797F             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 797F E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7981             >                else
 268+ 7981 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 268+ 7981             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7981             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7981             >
 268+ 7981             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7981 20 6A                        dw      ZLESS                   // 0<
 270+ 7983                                                              // if
 271+ 7983 7F 64                        dw      ZBRANCH
 272+ 7985 04 00                        dw      Plus_Minus_Endif - $
 273+ 7987 B3 6A                        dw          MINUS               //      minus
 274+ 7989              Plus_Minus_Endif:                               // endif
 275+ 7989 B6 69                        dw      EXIT                    // ;
 276+ 798B
 277+ 798B              //  ______________________________________________________________________
 278+ 798B              //
 279+ 798B              // d+-          d1 n -- d2
 280+ 798B              // leaves d1 with the sign of n as d2.
 281+ 798B                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 798B             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 798B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 798B             >
 281+ 798B             >                // dummy db directives used to calculate length of namec
 281+ 798B 44 2B 2D    >                db      "D+-"
 281+ 798E             >len_NFA         defl    $ - temp_NFA
 281+ 798E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 798B             >
 281+ 798B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 798C 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 798F             >                org     $-1                 // alter last byte of Name just above to set
 281+ 798E AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 798F             >
 281+ 798F 7A 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7991             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7991 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 7993             >                else
 281+ 7993 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 281+ 7993             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 7993             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 7993             >
 281+ 7993             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 7993 20 6A                        dw      ZLESS                   // 0<
 283+ 7995                                                              // if
 284+ 7995 7F 64                        dw      ZBRANCH
 285+ 7997 04 00                        dw      DPlus_Minus_Endif - $
 286+ 7999 C8 6A                        dw          DMINUS              //      dminus
 287+ 799B              DPlus_Minus_Endif:                              // endif
 288+ 799B B6 69                        dw      EXIT                    // ;
 289+ 799D
 290+ 799D              //  ______________________________________________________________________
 291+ 799D              //
 292+ 799D              // abs          n1 -- n2
 293+ 799D                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 799D             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 799D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 799D             >
 293+ 799D             >                // dummy db directives used to calculate length of namec
 293+ 799D 41 42 53    >                db      "ABS"
 293+ 79A0             >len_NFA         defl    $ - temp_NFA
 293+ 79A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 799D             >
 293+ 799D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 799E 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 79A1             >                org     $-1                 // alter last byte of Name just above to set
 293+ 79A0 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 79A1             >
 293+ 79A1 8B 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 79A3             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 79A3 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 79A5             >                else
 293+ 79A5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 293+ 79A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 79A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 79A5             >
 293+ 79A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 79A5 2B 6B                        dw      DUP                     // dup
 295+ 79A7 7F 79                        dw      PLUS_MINUS              // +-
 296+ 79A9 B6 69                        dw      EXIT                    // ;
 297+ 79AB
 298+ 79AB              //  ______________________________________________________________________
 299+ 79AB              //
 300+ 79AB              // dabs         d1 -- d2
 301+ 79AB                              Colon_Def DABS, "DABS", is_normal
 301+ 79AB             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 79AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 79AB             >
 301+ 79AB             >                // dummy db directives used to calculate length of namec
 301+ 79AB 44 41 42 53 >                db      "DABS"
 301+ 79AF             >len_NFA         defl    $ - temp_NFA
 301+ 79AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 79AB             >
 301+ 79AB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 79AC 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 79B0             >                org     $-1                 // alter last byte of Name just above to set
 301+ 79AF D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 79B0             >
 301+ 79B0 9D 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 79B2             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 79B2 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 79B4             >                else
 301+ 79B4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 79B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 79B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 79B4             >
 301+ 79B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 79B4 2B 6B                        dw      DUP                     // dup
 303+ 79B6 91 79                        dw      DPLUS_MINUS             // d+-
 304+ 79B8 B6 69                        dw      EXIT                    // ;
 305+ 79BA
 306+ 79BA              //  ______________________________________________________________________
 307+ 79BA              //
 308+ 79BA              // m*           n1 n2 -- d
 309+ 79BA              // multiply two integer giving a double
 310+ 79BA                              Colon_Def MMUL, "M*", is_normal
 310+ 79BA             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 79BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 79BA             >
 310+ 79BA             >                // dummy db directives used to calculate length of namec
 310+ 79BA 4D 2A       >                db      "M*"
 310+ 79BC             >len_NFA         defl    $ - temp_NFA
 310+ 79BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 79BA             >
 310+ 79BA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 79BB 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 79BD             >                org     $-1                 // alter last byte of Name just above to set
 310+ 79BC AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 79BD             >
 310+ 79BD AB 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 79BF             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 79BF E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 79C1             >                else
 310+ 79C1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 310+ 79C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 79C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 79C1             >
 310+ 79C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 79C1 95 6B 6D 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 79C5 DF 69
 312+ 79C7 A3 79 1E 6B                  dw      ABS_OP, SWAP            // abs swap
 313+ 79CB A3 79 E2 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79CF F3 69 91 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79D3 B6 69                        dw      EXIT                    // ;
 316+ 79D5
 317+ 79D5              //  ______________________________________________________________________
 318+ 79D5              //
 319+ 79D5              // m/         d n -- q r
 320+ 79D5              // multiply two integer giving a double
 321+ 79D5                              Colon_Def MDIV, "M/", is_normal
 321+ 79D5             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 321+ 79D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 79D5             >
 321+ 79D5             >                // dummy db directives used to calculate length of namec
 321+ 79D5 4D 2F       >                db      "M/"
 321+ 79D7             >len_NFA         defl    $ - temp_NFA
 321+ 79D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 79D5             >
 321+ 79D5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 79D6 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 321+ 79D8             >                org     $-1                 // alter last byte of Name just above to set
 321+ 79D7 AF          >                db      {b $} | END_BIT     // msb as name end
 321+ 79D8             >
 321+ 79D8 BA 79       >                dw      last_NFA            // Link to previous definition Name
 321+ 79DA             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 79DA E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 321+ 79DC             >                else
 321+ 79DC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 321+ 79DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 79DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 79DC             >
 321+ 79DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 79DC E6 6A DF 69                  dw      OVER, TO_R, TO_R        // over >r >r
 322+ 79E0 DF 69
 323+ 79E2 B2 79 06 6A                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 323+ 79E6 A3 79
 324+ 79E8 0A 69                        dw      UMDIVMOD                // um/mod
 325+ 79EA F3 69                        dw      R_TO                    // r>
 326+ 79EC 06 6A 6D 69                  dw      R_OP, XOR_OP            // r xor
 327+ 79F0 7F 79 1E 6B                  dw      PLUS_MINUS, SWAP        // +- swap
 328+ 79F4 F3 69                        dw      R_TO                    // r>
 329+ 79F6 7F 79 1E 6B                  dw      PLUS_MINUS, SWAP        // +- swap
 330+ 79FA B6 69                        dw      EXIT                    // ;
 331+ 79FC
 332+ 79FC              //  ______________________________________________________________________
 333+ 79FC              //
 334+ 79FC              // *            n1 n2 -- n3
 335+ 79FC              // multiply two integer
 336+ 79FC                              Colon_Def MUL, "*", is_normal
 336+ 79FC             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 336+ 79FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ 79FC             >
 336+ 79FC             >                // dummy db directives used to calculate length of namec
 336+ 79FC 2A          >                db      "*"
 336+ 79FD             >len_NFA         defl    $ - temp_NFA
 336+ 79FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ 79FC             >
 336+ 79FC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ 79FD 2A          >                db      "*"               // name string in 7-bit ascii, but
 336+ 79FE             >                org     $-1                 // alter last byte of Name just above to set
 336+ 79FD AA          >                db      {b $} | END_BIT     // msb as name end
 336+ 79FE             >
 336+ 79FE D5 79       >                dw      last_NFA            // Link to previous definition Name
 336+ 7A00             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 7A00 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 336+ 7A02             >                else
 336+ 7A02 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 336+ 7A02             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 7A02             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 7A02             >
 336+ 7A02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 7A02 BF 79 F6 6A                  dw      MMUL, DROP              // m* drop
 338+ 7A06 B6 69                        dw      EXIT                    // ;
 339+ 7A08
 340+ 7A08              //  ______________________________________________________________________
 341+ 7A08              //
 342+ 7A08              // /mod         n1 n2 -- n3 n4
 343+ 7A08              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 344+ 7A08              // The remainder has the sign of n1
 345+ 7A08                              Colon_Def DIVMOD, "/MOD", is_normal
 345+ 7A08             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 345+ 7A08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 345+ 7A08             >
 345+ 7A08             >                // dummy db directives used to calculate length of namec
 345+ 7A08 2F 4D 4F 44 >                db      "/MOD"
 345+ 7A0C             >len_NFA         defl    $ - temp_NFA
 345+ 7A0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 345+ 7A08             >
 345+ 7A08 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 345+ 7A09 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 345+ 7A0D             >                org     $-1                 // alter last byte of Name just above to set
 345+ 7A0C C4          >                db      {b $} | END_BIT     // msb as name end
 345+ 7A0D             >
 345+ 7A0D FC 79       >                dw      last_NFA            // Link to previous definition Name
 345+ 7A0F             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 345+ 7A0F E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 345+ 7A11             >                else
 345+ 7A11 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 345+ 7A11             >                endif           ; ok        // for other definitions it "points" the correct handler
 345+ 7A11             >                // Use of "; ok" to suppress "warning[fwdref]"
 345+ 7A11             >
 345+ 7A11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 346+ 7A11 DF 69 6D 6F                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 346+ 7A15 F3 69
 347+ 7A17 DA 79                        dw      MDIV                    // m/
 348+ 7A19 B6 69                        dw      EXIT                    // ;
 349+ 7A1B
 350+ 7A1B              //  ______________________________________________________________________
 351+ 7A1B              //
 352+ 7A1B              // /            n1 n2 -- n3
 353+ 7A1B              // division
 354+ 7A1B                              Colon_Def DIV, "/", is_normal
 354+ 7A1B             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 354+ 7A1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 354+ 7A1B             >
 354+ 7A1B             >                // dummy db directives used to calculate length of namec
 354+ 7A1B 2F          >                db      "/"
 354+ 7A1C             >len_NFA         defl    $ - temp_NFA
 354+ 7A1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 354+ 7A1B             >
 354+ 7A1B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 354+ 7A1C 2F          >                db      "/"               // name string in 7-bit ascii, but
 354+ 7A1D             >                org     $-1                 // alter last byte of Name just above to set
 354+ 7A1C AF          >                db      {b $} | END_BIT     // msb as name end
 354+ 7A1D             >
 354+ 7A1D 08 7A       >                dw      last_NFA            // Link to previous definition Name
 354+ 7A1F             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 354+ 7A1F E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 354+ 7A21             >                else
 354+ 7A21 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 354+ 7A21             >                endif           ; ok        // for other definitions it "points" the correct handler
 354+ 7A21             >                // Use of "; ok" to suppress "warning[fwdref]"
 354+ 7A21             >
 354+ 7A21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 355+ 7A21 0F 7A 01 6B                  dw      DIVMOD, NIP             // /mod nip
 356+ 7A25 B6 69                        dw      EXIT                    // ;
 357+ 7A27
 358+ 7A27              //  ______________________________________________________________________
 359+ 7A27              //
 360+ 7A27              // mod          n1 n2 -- n3
 361+ 7A27                              Colon_Def MOD, "MOD", is_normal
 361+ 7A27             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 361+ 7A27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 361+ 7A27             >
 361+ 7A27             >                // dummy db directives used to calculate length of namec
 361+ 7A27 4D 4F 44    >                db      "MOD"
 361+ 7A2A             >len_NFA         defl    $ - temp_NFA
 361+ 7A2A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 361+ 7A27             >
 361+ 7A27 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 361+ 7A28 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 361+ 7A2B             >                org     $-1                 // alter last byte of Name just above to set
 361+ 7A2A C4          >                db      {b $} | END_BIT     // msb as name end
 361+ 7A2B             >
 361+ 7A2B 1B 7A       >                dw      last_NFA            // Link to previous definition Name
 361+ 7A2D             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 361+ 7A2D E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 361+ 7A2F             >                else
 361+ 7A2F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 361+ 7A2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 361+ 7A2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 361+ 7A2F             >
 361+ 7A2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 362+ 7A2F 0F 7A F6 6A                  dw      DIVMOD, DROP            // /mod drop
 363+ 7A33 B6 69                        dw      EXIT                    // ;
 364+ 7A35
 365+ 7A35              //  ______________________________________________________________________
 366+ 7A35              //
 367+ 7A35              // */mod        n1 n2 n3 -- n4 n5
 368+ 7A35              // leaves the quotient n5 and the remainder n4 of the operation
 369+ 7A35              // (n1 * n2) / n3. The intermediate passage through a double number
 370+ 7A35              // avoids loss of precision
 371+ 7A35                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 371+ 7A35             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 371+ 7A35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 371+ 7A35             >
 371+ 7A35             >                // dummy db directives used to calculate length of namec
 371+ 7A35 2A 2F 4D 4F >                db      "*/MOD"
 371+ 7A39 44          >
 371+ 7A3A             >len_NFA         defl    $ - temp_NFA
 371+ 7A3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 371+ 7A35             >
 371+ 7A35 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 371+ 7A36 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 371+ 7A3A 44          >
 371+ 7A3B             >                org     $-1                 // alter last byte of Name just above to set
 371+ 7A3A C4          >                db      {b $} | END_BIT     // msb as name end
 371+ 7A3B             >
 371+ 7A3B 27 7A       >                dw      last_NFA            // Link to previous definition Name
 371+ 7A3D             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 371+ 7A3D E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 371+ 7A3F             >                else
 371+ 7A3F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 371+ 7A3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 371+ 7A3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 371+ 7A3F             >
 371+ 7A3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 372+ 7A3F DF 69 BF 79                  dw      TO_R, MMUL              // >r  m*
 373+ 7A43 F3 69 DA 79                  dw      R_TO, MDIV              // r>  m/
 374+ 7A47 B6 69                        dw      EXIT                    // ;
 375+ 7A49
 376+ 7A49              //  ______________________________________________________________________
 377+ 7A49              //
 378+ 7A49              // */          n1 n2 n3 -- n4
 379+ 7A49              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 380+ 7A49                              Colon_Def MUL_DIV, "*/", is_normal
 380+ 7A49             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 380+ 7A49             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ 7A49             >
 380+ 7A49             >                // dummy db directives used to calculate length of namec
 380+ 7A49 2A 2F       >                db      "*/"
 380+ 7A4B             >len_NFA         defl    $ - temp_NFA
 380+ 7A4B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ 7A49             >
 380+ 7A49 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ 7A4A 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 380+ 7A4C             >                org     $-1                 // alter last byte of Name just above to set
 380+ 7A4B AF          >                db      {b $} | END_BIT     // msb as name end
 380+ 7A4C             >
 380+ 7A4C 35 7A       >                dw      last_NFA            // Link to previous definition Name
 380+ 7A4E             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 7A4E E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 7A50             >                else
 380+ 7A50 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 380+ 7A50             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 7A50             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 7A50             >
 380+ 7A50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 7A50 3D 7A                        dw     MUL_DIV_MOD              // */mod
 382+ 7A52 01 6B                        dw     NIP                      // nip
 383+ 7A54 B6 69                        dw     EXIT                     // ;
 384+ 7A56
 385+ 7A56
 386+ 7A56              //  ______________________________________________________________________
 387+ 7A56              //
 388+ 7A56              // m/mod        ud1 u2 -- u3 ud4
 389+ 7A56              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 390+ 7A56              // All terms are unsigned.
 391+ 7A56                              Colon_Def MDIV_MOD, "M/MOD", is_normal
 391+ 7A56             >                New_Def  MDIV_MOD, "M/MOD", Enter_Ptr, is_normal ; ok
 391+ 7A56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 391+ 7A56             >
 391+ 7A56             >                // dummy db directives used to calculate length of namec
 391+ 7A56 4D 2F 4D 4F >                db      "M/MOD"
 391+ 7A5A 44          >
 391+ 7A5B             >len_NFA         defl    $ - temp_NFA
 391+ 7A5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 391+ 7A56             >
 391+ 7A56 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 391+ 7A57 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 391+ 7A5B 44          >
 391+ 7A5C             >                org     $-1                 // alter last byte of Name just above to set
 391+ 7A5B C4          >                db      {b $} | END_BIT     // msb as name end
 391+ 7A5C             >
 391+ 7A5C 49 7A       >                dw      last_NFA            // Link to previous definition Name
 391+ 7A5E             >MDIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 391+ 7A5E E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 391+ 7A60             >                else
 391+ 7A60 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 391+ 7A60             >                endif           ; ok        // for other definitions it "points" the correct handler
 391+ 7A60             >                // Use of "; ok" to suppress "warning[fwdref]"
 391+ 7A60             >
 391+ 7A60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 392+ 7A60 DF 69                        dw      TO_R                    // >r           ( ud1 )
 393+ 7A62 5B 6D 06 6A                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 393+ 7A66 0A 69
 394+ 7A68 F3 69 1E 6B                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 394+ 7A6C DF 69
 395+ 7A6E 0A 69                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 396+ 7A70 F3 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 397+ 7A72 B6 69                        dw      EXIT                    // ;
 398+ 7A74
 399+ 7A74              //  ______________________________________________________________________
 400+ 7A74              //
 401+ 7A74              // (line)       n1 n2 -- a b
 402+ 7A74              // sends the line n1 of block n2 to the disk buffer.
 403+ 7A74              // it returns the address a and ca counter b = C/L meaning a whole line.
 404+ 7A74                              Colon_Def CLINE, "(LINE)", is_normal
 404+ 7A74             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 404+ 7A74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 7A74             >
 404+ 7A74             >                // dummy db directives used to calculate length of namec
 404+ 7A74 28 4C 49 4E >                db      "(LINE)"
 404+ 7A78 45 29       >
 404+ 7A7A             >len_NFA         defl    $ - temp_NFA
 404+ 7A7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 7A74             >
 404+ 7A74 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 7A75 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 404+ 7A79 45 29       >
 404+ 7A7B             >                org     $-1                 // alter last byte of Name just above to set
 404+ 7A7A A9          >                db      {b $} | END_BIT     // msb as name end
 404+ 7A7B             >
 404+ 7A7B 56 7A       >                dw      last_NFA            // Link to previous definition Name
 404+ 7A7D             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 7A7D E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 404+ 7A7F             >                else
 404+ 7A7F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 404+ 7A7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 7A7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 7A7F             >
 404+ 7A7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 7A7F DF 69                        dw      TO_R                    // >r
 406+ 7A81 08 6D                        dw      NOOP                    // noop
 407+ 7A83 8F 6D                        dw      CL                      // c/l
 408+ 7A85 9B 6D 3D 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 409+ 7A89 F3 69                        dw      R_TO                    // r>
 410+ 7A8B A7 6D 00 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 410+ 7A8F 48 6A
 411+ 7A91 8C 7D                        dw      BLOCK                   // block   ( forward )
 412+ 7A93 48 6A                        dw      PLUS                    // +
 413+ 7A95 08 6D                        dw      NOOP                    // noop
 414+ 7A97 8F 6D                        dw      CL                      // c/l
 415+ 7A99 B6 69                        dw      EXIT                    // ;
 416+ 7A9B
 417+ 7A9B              //  ______________________________________________________________________
 418+ 7A9B              //
 419+ 7A9B              // .line        n1 n2 --
 420+ 7A9B              // Sends to output line  n1  of screen n2.
 421+ 7A9B                              Colon_Def DOT_LINE, ".LINE", is_normal
 421+ 7A9B             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 421+ 7A9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 7A9B             >
 421+ 7A9B             >                // dummy db directives used to calculate length of namec
 421+ 7A9B 2E 4C 49 4E >                db      ".LINE"
 421+ 7A9F 45          >
 421+ 7AA0             >len_NFA         defl    $ - temp_NFA
 421+ 7AA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 7A9B             >
 421+ 7A9B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 7A9C 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 421+ 7AA0 45          >
 421+ 7AA1             >                org     $-1                 // alter last byte of Name just above to set
 421+ 7AA0 C5          >                db      {b $} | END_BIT     // msb as name end
 421+ 7AA1             >
 421+ 7AA1 74 7A       >                dw      last_NFA            // Link to previous definition Name
 421+ 7AA3             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 7AA3 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 421+ 7AA5             >                else
 421+ 7AA5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 421+ 7AA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 7AA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 7AA5             >
 421+ 7AA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 7AA5 7D 7A B6 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 422+ 7AA9 92 72
 423+ 7AAB B6 69                        dw      EXIT                    // ;
 424+ 7AAD
 425+ 7AAD              //  ______________________________________________________________________
 426+ 7AAD              //
 427+ 7AAD              // message       n1 n2 --
 428+ 7AAD              // prints error message to current channel.
 429+ 7AAD              // if WARNING is 0, prints "MSG#n".
 430+ 7AAD              // if WARNING is 1, prints line n of screen 4.
 431+ 7AAD              // if WARNING is -1, see ERROR
 432+ 7AAD              // value can be negative or beyond block 4.
 433+ 7AAD                              Colon_Def MESSAGE, "MESSAGE", is_normal
 433+ 7AAD             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 433+ 7AAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 433+ 7AAD             >
 433+ 7AAD             >                // dummy db directives used to calculate length of namec
 433+ 7AAD 4D 45 53 53 >                db      "MESSAGE"
 433+ 7AB1 41 47 45    >
 433+ 7AB4             >len_NFA         defl    $ - temp_NFA
 433+ 7AB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 433+ 7AAD             >
 433+ 7AAD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 433+ 7AAE 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 433+ 7AB2 41 47 45    >
 433+ 7AB5             >                org     $-1                 // alter last byte of Name just above to set
 433+ 7AB4 C5          >                db      {b $} | END_BIT     // msb as name end
 433+ 7AB5             >
 433+ 7AB5 9B 7A       >                dw      last_NFA            // Link to previous definition Name
 433+ 7AB7             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 433+ 7AB7 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 433+ 7AB9             >                else
 433+ 7AB9 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 433+ 7AB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 433+ 7AB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 433+ 7AB9             >
 433+ 7AB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 434+ 7AB9 06 6E EF 6B                  dw      WARNING, FETCH          // warning @
 435+ 7ABD                                                              // if
 436+ 7ABD 7F 64                        dw      ZBRANCH
 437+ 7ABF 18 00                        dw      Message_Else - $
 438+ 7AC1 45 64 04 00                  dw          LIT, 4              //      4
 439+ 7AC5 81 6E EF 6B                  dw          OFFSET, FETCH       //      offset @
 440+ 7AC9 A7 6D 1F 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 440+ 7ACD 81 6F
 441+ 7ACF A3 7A                        dw          DOT_LINE            //      .line
 442+ 7AD1 3E 70                        dw          SPACE               //      space
 443+ 7AD3                                                              // else
 444+ 7AD3
 445+ 7AD3 68 64                        dw      BRANCH
 446+ 7AD5 0B 00                        dw      Message_ENdif - $
 447+ 7AD7              Message_Else:
 448+ 7AD7 64 74                        dw          C_DOT_QUOTE         //      .( msg#)
 449+ 7AD9 04 6D 73 67                  db          4, "msg#"
 449+ 7ADD 23
 450+ 7ADE E3 82                        dw          DOT                 //      .  ( forward )
 451+ 7AE0              Message_ENdif:                                  // endif
 452+ 7AE0 B6 69                        dw      EXIT                    // ;
 453+ 7AE2
 454+ 7AE2
 455+ 7AE2              //  ______________________________________________________________________
 456+ 7AE2              //
 457+ 7AE2              // device
 458+ 7AE2                              Variable_Def DEVICE,   "DEVICE",   2
 458+ 7AE2             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 458+ 7AE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 458+ 7AE2             >
 458+ 7AE2             >                // dummy db directives used to calculate length of namec
 458+ 7AE2 44 45 56 49 >                db      "DEVICE"
 458+ 7AE6 43 45       >
 458+ 7AE8             >len_NFA         defl    $ - temp_NFA
 458+ 7AE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 458+ 7AE2             >
 458+ 7AE2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 458+ 7AE3 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 458+ 7AE7 43 45       >
 458+ 7AE9             >                org     $-1                 // alter last byte of Name just above to set
 458+ 7AE8 C5          >                db      {b $} | END_BIT     // msb as name end
 458+ 7AE9             >
 458+ 7AE9 AD 7A       >                dw      last_NFA            // Link to previous definition Name
 458+ 7AEB             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 458+ 7AEB 38 6D       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 458+ 7AED             >                else
 458+ 7AED ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 458+ 7AED             >                endif           ; ok        // for other definitions it "points" the correct handler
 458+ 7AED             >                // Use of "; ok" to suppress "warning[fwdref]"
 458+ 7AED             >
 458+ 7AED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 7AED 02 00       >                dw      2
 459+ 7AEF
 460+ 7AEF              //  ______________________________________________________________________
 461+ 7AEF              //
 462+ 7AEF              // inkey        -- c | 0
 463+ 7AEF              // call ROM inkey$ routine, returns c or "zero".
 464+ 7AEF
 465+ 7AEF                              New_Def INKEY, "INKEY", is_code, is_normal
 465+ 7AEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 465+ 7AEF             >
 465+ 7AEF             >                // dummy db directives used to calculate length of namec
 465+ 7AEF 49 4E 4B 45 >                db      "INKEY"
 465+ 7AF3 59          >
 465+ 7AF4             >len_NFA         defl    $ - temp_NFA
 465+ 7AF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 465+ 7AEF             >
 465+ 7AEF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 465+ 7AF0 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 465+ 7AF4 59          >
 465+ 7AF5             >                org     $-1                 // alter last byte of Name just above to set
 465+ 7AF4 D9          >                db      {b $} | END_BIT     // msb as name end
 465+ 7AF5             >
 465+ 7AF5 E2 7A       >                dw      last_NFA            // Link to previous definition Name
 465+ 7AF7             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 465+ 7AF7 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 465+ 7AF7             >                else
 465+ 7AF7 F9 7A       >                dw      $ + 2   ; ok        // is pointed by CFA
 465+ 7AF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 465+ 7AF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 465+ 7AF9             >
 465+ 7AF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 466+ 7AF9
 467+ 7AF9 C5                           push    bc
 468+ 7AFA ED 73 2C 64                  ld      (SP_Saved), sp
 469+ 7AFE 31 FE 63                     ld      sp, Cold_origin - 2
 470+ 7B01 DD E5                        push    ix
 471+ 7B03 CD E6 15                     call    $15E6                   // instead of 15E9
 472+ 7B06 DD E1                        pop     ix
 473+ 7B08 ED 7B 2C 64                  ld      sp, (SP_Saved)
 474+ 7B0C 6F                           ld      l, a
 475+ 7B0D 26 00                        ld      h, 0
 476+ 7B0F C1                           pop     bc
 477+ 7B10                              psh1
 477+ 7B10 E5          >                push    hl
 477+ 7B11 DD E9       >                jp      (ix)
 478+ 7B13
 479+ 7B13              //  ______________________________________________________________________
 480+ 7B13              //
 481+ 7B13              // select      n --
 482+ 7B13              // selects the given channel number
 483+ 7B13
 484+ 7B13                              New_Def SELECT, "SELECT", is_code, is_normal
 484+ 7B13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 484+ 7B13             >
 484+ 7B13             >                // dummy db directives used to calculate length of namec
 484+ 7B13 53 45 4C 45 >                db      "SELECT"
 484+ 7B17 43 54       >
 484+ 7B19             >len_NFA         defl    $ - temp_NFA
 484+ 7B19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 484+ 7B13             >
 484+ 7B13 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 484+ 7B14 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 484+ 7B18 43 54       >
 484+ 7B1A             >                org     $-1                 // alter last byte of Name just above to set
 484+ 7B19 D4          >                db      {b $} | END_BIT     // msb as name end
 484+ 7B1A             >
 484+ 7B1A EF 7A       >                dw      last_NFA            // Link to previous definition Name
 484+ 7B1C             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 484+ 7B1C ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 484+ 7B1C             >                else
 484+ 7B1C 1E 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 484+ 7B1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 484+ 7B1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 484+ 7B1E             >
 484+ 7B1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 485+ 7B1E E1                           pop     hl
 486+ 7B1F C5                           push    bc
 487+ 7B20 7D                           ld      a, l
 488+ 7B21 ED 73 2C 64                  ld      (SP_Saved), sp
 489+ 7B25 31 FE 63                     ld      sp, Cold_origin - 2
 490+ 7B28 DD E5                        push    ix
 491+ 7B2A CD 01 16                     call    $1601
 492+ 7B2D DD E1                        pop     ix
 493+ 7B2F ED 7B 2C 64                  ld      sp, (SP_Saved)
 494+ 7B33 C1                           pop     bc
 495+ 7B34
 496+ 7B34                              next
 496+ 7B34 DD E9       >                jp      (ix)
 497+ 7B36
 498+ 7B36              //  ______________________________________________________________________
 499+ 7B36
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L2.asm
 111  7B36                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
   1+ 7B36              //  ______________________________________________________________________
   2+ 7B36              //
   3+ 7B36              //  next-opt.asm
   4+ 7B36              //
   5+ 7B36              //  ZX Spectrum Next - peculiar definitions
   6+ 7B36              //  ______________________________________________________________________
   7+ 7B36
   8+ 7B36              //  ______________________________________________________________________
   9+ 7B36              //
  10+ 7B36              // reg@         n -- b
  11+ 7B36              // read Next REGister n giving byte b
  12+ 7B36
  13+ 7B36                              Colon_Def REG_FETCH, "REG@", is_normal
  13+ 7B36             >                New_Def  REG_FETCH, "REG@", Enter_Ptr, is_normal ; ok
  13+ 7B36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7B36             >
  13+ 7B36             >                // dummy db directives used to calculate length of namec
  13+ 7B36 52 45 47 40 >                db      "REG@"
  13+ 7B3A             >len_NFA         defl    $ - temp_NFA
  13+ 7B3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7B36             >
  13+ 7B36 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7B37 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7B3B             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7B3A C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7B3B             >
  13+ 7B3B 13 7B       >                dw      last_NFA            // Link to previous definition Name
  13+ 7B3D             >REG_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7B3D E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 7B3F             >                else
  13+ 7B3F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  13+ 7B3F             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7B3F             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7B3F             >
  13+ 7B3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7B3F 45 64 3B 24                  dw      LIT, $243B
  15+ 7B43 62 6C                        dw      PSTORE
  16+ 7B45 45 64 3B 25                  dw      LIT, $253B
  17+ 7B49 4F 6C                        dw      PFETCH
  18+ 7B4B B6 69                        dw      EXIT
  19+ 7B4D
  20+ 7B4D              //  ______________________________________________________________________
  21+ 7B4D              //
  22+ 7B4D              // reg!         b n --
  23+ 7B4D              // write value b to Next REGister n
  24+ 7B4D
  25+ 7B4D                              Colon_Def REG_STORE, "REG!", is_normal
  25+ 7B4D             >                New_Def  REG_STORE, "REG!", Enter_Ptr, is_normal ; ok
  25+ 7B4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  25+ 7B4D             >
  25+ 7B4D             >                // dummy db directives used to calculate length of namec
  25+ 7B4D 52 45 47 21 >                db      "REG!"
  25+ 7B51             >len_NFA         defl    $ - temp_NFA
  25+ 7B51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  25+ 7B4D             >
  25+ 7B4D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  25+ 7B4E 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  25+ 7B52             >                org     $-1                 // alter last byte of Name just above to set
  25+ 7B51 A1          >                db      {b $} | END_BIT     // msb as name end
  25+ 7B52             >
  25+ 7B52 36 7B       >                dw      last_NFA            // Link to previous definition Name
  25+ 7B54             >REG_STORE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  25+ 7B54 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  25+ 7B56             >                else
  25+ 7B56 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  25+ 7B56             >                endif           ; ok        // for other definitions it "points" the correct handler
  25+ 7B56             >                // Use of "; ok" to suppress "warning[fwdref]"
  25+ 7B56             >
  25+ 7B56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  26+ 7B56 45 64 3B 24                  dw      LIT, $243B
  27+ 7B5A 62 6C                        dw      PSTORE
  28+ 7B5C 45 64 3B 25                  dw      LIT, $253B
  29+ 7B60 62 6C                        dw      PSTORE
  30+ 7B62 B6 69                        dw      EXIT
  31+ 7B64
  32+ 7B64              //  ______________________________________________________________________
  33+ 7B64              //
  34+ 7B64              // mmu7@        -- n
  35+ 7B64              // query current page in MMU7 8K-RAM : 0 and 223
  36+ 7B64
  37+ 7B64                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  37+ 7B64             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  37+ 7B64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  37+ 7B64             >
  37+ 7B64             >                // dummy db directives used to calculate length of namec
  37+ 7B64 4D 4D 55 37 >                db      "MMU7@"
  37+ 7B68 40          >
  37+ 7B69             >len_NFA         defl    $ - temp_NFA
  37+ 7B69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  37+ 7B64             >
  37+ 7B64 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  37+ 7B65 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  37+ 7B69 40          >
  37+ 7B6A             >                org     $-1                 // alter last byte of Name just above to set
  37+ 7B69 C0          >                db      {b $} | END_BIT     // msb as name end
  37+ 7B6A             >
  37+ 7B6A 4D 7B       >                dw      last_NFA            // Link to previous definition Name
  37+ 7B6C             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  37+ 7B6C E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  37+ 7B6E             >                else
  37+ 7B6E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  37+ 7B6E             >                endif           ; ok        // for other definitions it "points" the correct handler
  37+ 7B6E             >                // Use of "; ok" to suppress "warning[fwdref]"
  37+ 7B6E             >
  37+ 7B6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  38+ 7B6E 45 64 57 00                  dw      LIT, 87, REG_FETCH
  38+ 7B72 3D 7B
  39+ 7B74 B6 69                        dw      EXIT
  40+ 7B76
  41+ 7B76              //  ______________________________________________________________________
  42+ 7B76              //
  43+ 7B76              // mmu7!        n --
  44+ 7B76              // set MMU7 8K-RAM page to n given between 0 and 223
  45+ 7B76              // optimized version that uses NEXTREG n,A Z80n op-code.
  46+ 7B76
  47+ 7B76                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  47+ 7B76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7B76             >
  47+ 7B76             >                // dummy db directives used to calculate length of namec
  47+ 7B76 4D 4D 55 37 >                db      "MMU7!"
  47+ 7B7A 21          >
  47+ 7B7B             >len_NFA         defl    $ - temp_NFA
  47+ 7B7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7B76             >
  47+ 7B76 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7B77 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  47+ 7B7B 21          >
  47+ 7B7C             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7B7B A1          >                db      {b $} | END_BIT     // msb as name end
  47+ 7B7C             >
  47+ 7B7C 64 7B       >                dw      last_NFA            // Link to previous definition Name
  47+ 7B7E             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7B7E ~           >                dw      runcode ; ok        // for primitive definitions  actual code
  47+ 7B7E             >                else
  47+ 7B7E 80 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
  47+ 7B80             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7B80             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7B80             >
  47+ 7B80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7B80 E1                           pop     hl
  49+ 7B81 7D                           ld      a, l
  50+ 7B82 ED 92 57                     nextreg 87, a
  51+ 7B85
  52+ 7B85                              next
  52+ 7B85 DD E9       >                jp      (ix)
  53+ 7B87
  54+ 7B87              //  ______________________________________________________________________
  55+ 7B87              //
  56+ 7B87              // >far         ha -- a n
  57+ 7B87              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  58+ 7B87              // take lower bits of H and L as an offset from E000h
  59+ 7B87              // then return address  a  between E000h-FFFFh
  60+ 7B87              // and page number n  between 64-71 (40h-47h)
  61+ 7B87              // For example, in hex:
  62+ 7B87              //   0000 >FAR  gives  40.E000
  63+ 7B87              //   1FFF >FAR  gives  40.FFFF
  64+ 7B87              //   2000 >FAR  gives  41.E000
  65+ 7B87              //   3FFF >FAR  gives  41.FFFF
  66+ 7B87              //   EFFF >FAR  gives  47.EFFF
  67+ 7B87              //   FFFF >FAR  gives  47.FFFF
  68+ 7B87              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  69+ 7B87              //                pop     de
  70+ 7B87              //                ld      a, d
  71+ 7B87              //                and     $E0
  72+ 7B87              //                rlca
  73+ 7B87              //                rlca
  74+ 7B87              //                rlca
  75+ 7B87              //                add     $40
  76+ 7B87              //                ld      l, a
  77+ 7B87              //                ld      h, 0
  78+ 7B87              //                ld      a, d
  79+ 7B87              //                or      $E0
  80+ 7B87              //                ld      d, a
  81+ 7B87              //                push    hl
  82+ 7B87              //                push    de
  83+ 7B87              //                next
  84+ 7B87
  85+ 7B87              //  ______________________________________________________________________
  86+ 7B87              //
  87+ 7B87              // <far         a n  -- ha
  88+ 7B87              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  89+ 7B87              // reverse of >FAR: encodes a FAR address compressing
  90+ 7B87              // to bits 765 of H, lower bits of HL address offset from E000h
  91+ 7B87              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
  92+ 7B87              //                pop     de                  // page number in e
  93+ 7B87              //                pop     hl                  // address in hl
  94+ 7B87              //                ld      a, e
  95+ 7B87              //                sub     $40                 // reduced to 0-7
  96+ 7B87              //                rrca
  97+ 7B87              //                rrca
  98+ 7B87              //                rrca
  99+ 7B87              //                ld      d, a                // save to d bits 765
 100+ 7B87              //                ld      a, h                // drops
 101+ 7B87              //                and     $1F
 102+ 7B87              //                or      d
 103+ 7B87              //                ld      h, a
 104+ 7B87              //
 105+ 7B87              //                psh1
 106+ 7B87
 107+ 7B87              //  ______________________________________________________________________
 108+ 7B87              //
 109+ 7B87              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 110+ 7B87              // NextZXOS call wrapper.
 111+ 7B87              //  n1 = hl register parameter value
 112+ 7B87              //  n2 = de register parameter value
 113+ 7B87              //  n3 = bc register parameter value
 114+ 7B87              //  n4 =  a register parameter value
 115+ 7B87              //   a = routine address in ROM 3
 116+ 7B87              // ----
 117+ 7B87              //  n5 = hl returned value
 118+ 7B87              //  n6 = de returned value
 119+ 7B87              //  n7 = bc returned value
 120+ 7B87              //  n8 =  a returned value
 121+ 7B87              //   f
 122+ 7B87                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 122+ 7B87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 7B87             >
 122+ 7B87             >                // dummy db directives used to calculate length of namec
 122+ 7B87 4D 5F 50 33 >                db      "M_P3DOS"
 122+ 7B8B 44 4F 53    >
 122+ 7B8E             >len_NFA         defl    $ - temp_NFA
 122+ 7B8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 7B87             >
 122+ 7B87 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 7B88 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 122+ 7B8C 44 4F 53    >
 122+ 7B8F             >                org     $-1                 // alter last byte of Name just above to set
 122+ 7B8E D3          >                db      {b $} | END_BIT     // msb as name end
 122+ 7B8F             >
 122+ 7B8F 76 7B       >                dw      last_NFA            // Link to previous definition Name
 122+ 7B91             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 7B91 ~           >                dw      runcode ; ok        // for primitive definitions  actual code
 122+ 7B91             >                else
 122+ 7B91 93 7B       >                dw      $ + 2   ; ok        // is pointed by CFA
 122+ 7B93             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 7B93             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 7B93             >
 122+ 7B93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 7B93 D1                           pop     de                  // dos call entry address in de
 124+ 7B94 E1                           pop     hl                  // a register
 125+ 7B95 7D                           ld      a, l
 126+ 7B96 D9                           exx
 127+ 7B97 C1                           pop     bc
 128+ 7B98 D1                           pop     de
 129+ 7B99 E1                           pop     hl
 130+ 7B9A D9                           exx
 131+ 7B9B
 132+ 7B9B C5                           push    bc
 133+ 7B9C DD E5                        push    ix
 134+ 7B9E
 135+ 7B9E ED 73 2C 64                  ld      (SP_Saved), sp
 136+ 7BA2 31 FE 63                     ld      sp, Cold_origin - 2
 137+ 7BA5 0E 07                        ld      c, 7                // use 7 RAM Bank
 138+ 7BA7
 139+ 7BA7 CF                           rst     08
 140+ 7BA8 94                           db      $94
 141+ 7BA9
 142+ 7BA9 ED 7B 2C 64                  ld      sp, (SP_Saved)
 143+ 7BAD DD E5                        push    ix
 144+ 7BAF E1                           pop     hl
 145+ 7BB0 22 2A 64                     ld      (IX_Echo), hl
 146+ 7BB3              //              nop
 147+ 7BB3 DD E1                        pop     ix
 148+ 7BB5 E3                           ex      (sp), hl            // hl argument and retrieve bc
 149+ 7BB6 D5                           push    de
 150+ 7BB7 C5                           push    bc
 151+ 7BB8 4D                           ld      c, l
 152+ 7BB9 44                           ld      b, h
 153+ 7BBA
 154+ 7BBA 26 00                        ld      h, 0
 155+ 7BBC 6F                           ld      l, a
 156+ 7BBD E5                           push    hl
 157+ 7BBE ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 158+ 7BC0 23                           inc     hl                  //  0 for OK ; 1 for ko
 159+ 7BC1
 160+ 7BC1                              psh1
 160+ 7BC1 E5          >                push    hl
 160+ 7BC2 DD E9       >                jp      (ix)
 161+ 7BC4
 162+ 7BC4              //  ______________________________________________________________________
 163+ 7BC4              //
 164+ 7BC4              // blk-fh
 165+ 7BC4                              Variable_Def BLK_FH,   "BLK-FH",   1
 165+ 7BC4             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 165+ 7BC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 7BC4             >
 165+ 7BC4             >                // dummy db directives used to calculate length of namec
 165+ 7BC4 42 4C 4B 2D >                db      "BLK-FH"
 165+ 7BC8 46 48       >
 165+ 7BCA             >len_NFA         defl    $ - temp_NFA
 165+ 7BCA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 7BC4             >
 165+ 7BC4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 7BC5 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 165+ 7BC9 46 48       >
 165+ 7BCB             >                org     $-1                 // alter last byte of Name just above to set
 165+ 7BCA C8          >                db      {b $} | END_BIT     // msb as name end
 165+ 7BCB             >
 165+ 7BCB 87 7B       >                dw      last_NFA            // Link to previous definition Name
 165+ 7BCD             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 7BCD 38 6D       >                dw      Variable_Ptr ; ok        // for primitive definitions  actual code
 165+ 7BCF             >                else
 165+ 7BCF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 165+ 7BCF             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 7BCF             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 7BCF             >
 165+ 7BCF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 7BCF 01 00       >                dw      1
 166+ 7BD1
 167+ 7BD1                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 167+ 7BD1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 7BD1             >
 167+ 7BD1             >                // dummy db directives used to calculate length of namec
 167+ 7BD1 42 4C 4B 2D >                db      "BLK-FNAME"
 167+ 7BD5 46 4E 41 4D >
 167+ 7BD9 45          >
 167+ 7BDA             >len_NFA         defl    $ - temp_NFA
 167+ 7BDA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 7BD1             >
 167+ 7BD1 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 7BD2 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 167+ 7BD6 46 4E 41 4D >
 167+ 7BDA 45          >
 167+ 7BDB             >                org     $-1                 // alter last byte of Name just above to set
 167+ 7BDA C5          >                db      {b $} | END_BIT     // msb as name end
 167+ 7BDB             >
 167+ 7BDB C4 7B       >                dw      last_NFA            // Link to previous definition Name
 167+ 7BDD             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 7BDD C8 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 167+ 7BDF             >                else
 167+ 7BDF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 167+ 7BDF             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 7BDF             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 7BDF             >
 167+ 7BDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 7BDF 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 168+ 7BE3 6F 63 6B 73
 168+ 7BE7 2D 36 34 2E
 168+ 7BEB 62 69 6E 00
 169+ 7BEF 00 00 00...                  ds      24
 170+ 7C07
 171+ 7C07              //  ______________________________________________________________________
 172+ 7C07              //
 173+ 7C07              // blk-seek     n --
 174+ 7C07              // seek block n  within blocks!.bin  file
 175+ 7C07                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 175+ 7C07             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 175+ 7C07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 7C07             >
 175+ 7C07             >                // dummy db directives used to calculate length of namec
 175+ 7C07 42 4C 4B 2D >                db      "BLK-SEEK"
 175+ 7C0B 53 45 45 4B >
 175+ 7C0F             >len_NFA         defl    $ - temp_NFA
 175+ 7C0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 7C07             >
 175+ 7C07 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 7C08 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 175+ 7C0C 53 45 45 4B >
 175+ 7C10             >                org     $-1                 // alter last byte of Name just above to set
 175+ 7C0F CB          >                db      {b $} | END_BIT     // msb as name end
 175+ 7C10             >
 175+ 7C10 D1 7B       >                dw      last_NFA            // Link to previous definition Name
 175+ 7C12             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 7C12 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 175+ 7C14             >                else
 175+ 7C14 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 175+ 7C14             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 7C14             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 7C14             >
 175+ 7C14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 7C14 9B 6D BF 79                  dw  BBUF, MMUL
 177+ 7C18 CD 7B EF 6B                  dw  BLK_FH, FETCH
 178+ 7C1C CA 67                        dw  F_SEEK
 179+ 7C1E 45 64 2D 00                  dw  LIT, $2D, QERROR
 179+ 7C22 F8 70
 180+ 7C24 B6 69                        dw  EXIT
 181+ 7C26
 182+ 7C26              //  ______________________________________________________________________
 183+ 7C26              //
 184+ 7C26              // blk-read     n --
 185+ 7C26              // seek block n  within blocks!.bin  file
 186+ 7C26                              Colon_Def BLK_READ, "BLK-READ", is_normal
 186+ 7C26             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 186+ 7C26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ 7C26             >
 186+ 7C26             >                // dummy db directives used to calculate length of namec
 186+ 7C26 42 4C 4B 2D >                db      "BLK-READ"
 186+ 7C2A 52 45 41 44 >
 186+ 7C2E             >len_NFA         defl    $ - temp_NFA
 186+ 7C2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ 7C26             >
 186+ 7C26 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ 7C27 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 186+ 7C2B 52 45 41 44 >
 186+ 7C2F             >                org     $-1                 // alter last byte of Name just above to set
 186+ 7C2E C4          >                db      {b $} | END_BIT     // msb as name end
 186+ 7C2F             >
 186+ 7C2F 07 7C       >                dw      last_NFA            // Link to previous definition Name
 186+ 7C31             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 7C31 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 186+ 7C33             >                else
 186+ 7C33 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 186+ 7C33             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 7C33             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 7C33             >
 186+ 7C33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 7C33 12 7C                        dw  BLK_SEEK
 188+ 7C35 9B 6D                        dw  BBUF
 189+ 7C37 CD 7B EF 6B                  dw  BLK_FH, FETCH
 190+ 7C3B 0D 68                        dw  F_READ
 191+ 7C3D 45 64 2E 00                  dw  LIT, $2E, QERROR
 191+ 7C41 F8 70
 192+ 7C43 F6 6A                        dw  DROP
 193+ 7C45 B6 69                        dw  EXIT
 194+ 7C47
 195+ 7C47              //  ______________________________________________________________________
 196+ 7C47              //
 197+ 7C47              // blk-write     n --
 198+ 7C47              // seek block n  within blocks!.bin  file
 199+ 7C47                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 199+ 7C47             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 199+ 7C47             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 199+ 7C47             >
 199+ 7C47             >                // dummy db directives used to calculate length of namec
 199+ 7C47 42 4C 4B 2D >                db      "BLK-WRITE"
 199+ 7C4B 57 52 49 54 >
 199+ 7C4F 45          >
 199+ 7C50             >len_NFA         defl    $ - temp_NFA
 199+ 7C50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 199+ 7C47             >
 199+ 7C47 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 199+ 7C48 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 199+ 7C4C 57 52 49 54 >
 199+ 7C50 45          >
 199+ 7C51             >                org     $-1                 // alter last byte of Name just above to set
 199+ 7C50 C5          >                db      {b $} | END_BIT     // msb as name end
 199+ 7C51             >
 199+ 7C51 26 7C       >                dw      last_NFA            // Link to previous definition Name
 199+ 7C53             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 199+ 7C53 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 199+ 7C55             >                else
 199+ 7C55 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 199+ 7C55             >                endif           ; ok        // for other definitions it "points" the correct handler
 199+ 7C55             >                // Use of "; ok" to suppress "warning[fwdref]"
 199+ 7C55             >
 199+ 7C55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 200+ 7C55 12 7C                        dw  BLK_SEEK
 201+ 7C57 9B 6D                        dw  BBUF
 202+ 7C59 CD 7B EF 6B                  dw  BLK_FH, FETCH
 203+ 7C5D 2C 68                        dw  F_WRITE
 204+ 7C5F 45 64 2F 00                  dw  LIT, $2F, QERROR
 204+ 7C63 F8 70
 205+ 7C65 F6 6A                        dw  DROP
 206+ 7C67 B6 69                        dw  EXIT
 207+ 7C69
 208+ 7C69              //  ______________________________________________________________________
 209+ 7C69              //
 210+ 7C69              // blk-init     n --
 211+ 7C69              // seek block n  within blocks!.bin  file
 212+ 7C69                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 212+ 7C69             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 212+ 7C69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 7C69             >
 212+ 7C69             >                // dummy db directives used to calculate length of namec
 212+ 7C69 42 4C 4B 2D >                db      "BLK-INIT"
 212+ 7C6D 49 4E 49 54 >
 212+ 7C71             >len_NFA         defl    $ - temp_NFA
 212+ 7C71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 7C69             >
 212+ 7C69 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 7C6A 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 212+ 7C6E 49 4E 49 54 >
 212+ 7C72             >                org     $-1                 // alter last byte of Name just above to set
 212+ 7C71 D4          >                db      {b $} | END_BIT     // msb as name end
 212+ 7C72             >
 212+ 7C72 47 7C       >                dw      last_NFA            // Link to previous definition Name
 212+ 7C74             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 7C74 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 212+ 7C76             >                else
 212+ 7C76 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 212+ 7C76             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 7C76             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 7C76             >
 212+ 7C76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 7C76 CD 7B EF 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 213+ 7C7A 4B 68 F6 6A
 214+ 7C7E DD 7B 71 6A                  dw  BLK_FNAME, ONE_PLUS
 215+ 7C82 2D 6F 73 6D                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 215+ 7C86 65 68
 216+ 7C88 45 64 2C 00                  dw  LIT, $2C, QERROR
 216+ 7C8C F8 70
 217+ 7C8E CD 7B FC 6B                  dw  BLK_FH, STORE
 218+ 7C92 B6 69                        dw  EXIT
 219+ 7C94
 220+ 7C94              //  ______________________________________________________________________
 221+ 7C94              //
 222+ 7C94              // #sec
 223+ 7C94              // number of 512 Byte "sector" available on thie sysstem.
 224+ 7C94              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 225+ 7C94
 226+ 7C94                              Constant_Def NSEC , "#SEC", 32767
 226+ 7C94             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 226+ 7C94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 226+ 7C94             >
 226+ 7C94             >                // dummy db directives used to calculate length of namec
 226+ 7C94 23 53 45 43 >                db      "#SEC"
 226+ 7C98             >len_NFA         defl    $ - temp_NFA
 226+ 7C98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 226+ 7C94             >
 226+ 7C94 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 226+ 7C95 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 226+ 7C99             >                org     $-1                 // alter last byte of Name just above to set
 226+ 7C98 C3          >                db      {b $} | END_BIT     // msb as name end
 226+ 7C99             >
 226+ 7C99 69 7C       >                dw      last_NFA            // Link to previous definition Name
 226+ 7C9B             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 226+ 7C9B 1F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 226+ 7C9D             >                else
 226+ 7C9D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 226+ 7C9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 226+ 7C9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 226+ 7C9D             >
 226+ 7C9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 7C9D FF 7F       >                dw      32767
 227+ 7C9F
 228+ 7C9F              //  ______________________________________________________________________
 229+ 7C9F
 230+ 7C9F
 231+ 7C9F
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/next-opt1.asm
 112  7C9F                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
   1+ 7C9F              //  ______________________________________________________________________
   2+ 7C9F              //
   3+ 7C9F              //  L3.asm
   4+ 7C9F              //
   5+ 7C9F              //  Continuation of L2.asm
   6+ 7C9F              //  I/O Block definitions
   7+ 7C9F              //  ______________________________________________________________________
   8+ 7C9F
   9+ 7C9F
  10+ 7C9F              //  ______________________________________________________________________
  11+ 7C9F              //
  12+ 7C9F              // r/w          a n f --
  13+ 7C9F              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C9F                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C9F             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C9F             >
  14+ 7C9F             >                // dummy db directives used to calculate length of namec
  14+ 7C9F 52 2F 57    >                db      "R/W"
  14+ 7CA2             >len_NFA         defl    $ - temp_NFA
  14+ 7CA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C9F             >
  14+ 7C9F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7CA0 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7CA3             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7CA2 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7CA3             >
  14+ 7CA3 94 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7CA5             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7CA5 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7CA7             >                else
  14+ 7CA7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  14+ 7CA7             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7CA7             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7CA7             >
  14+ 7CA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7CA7 DF 69                        dw      TO_R                    // >r
  16+ 7CA9 7D 6A                        dw      ONE_SUBTRACT            // 1-
  17+ 7CAB 2B 6B 20 6A                  dw      DUP, ZLESS              // dup 0<
  18+ 7CAF E6 6A 9B 7C                  dw      OVER, NSEC              // over #sec
  19+ 7CB3 7D 6A CC 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7CB7 5A 69                        dw      OR_OP                   // or
  21+ 7CB9 45 64 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7CBD F8 70
  22+ 7CBF F3 69                        dw      R_TO                    // r>
  23+ 7CC1                                                              // if
  24+ 7CC1 7F 64                        dw      ZBRANCH
  25+ 7CC3 08 00                        dw      Read_Write_Else - $
  26+ 7CC5 31 7C                        dw          BLK_READ            //      blk-read
  27+ 7CC7 68 64                        dw      BRANCH
  28+ 7CC9 04 00                        dw      Read_Write_Endif - $
  29+ 7CCB              Read_Write_Else:                                // else
  30+ 7CCB 53 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CCD              Read_Write_Endif:                               // endif
  32+ 7CCD B6 69                        dw      EXIT                    // ;
  33+ 7CCF
  34+ 7CCF
  35+ 7CCF              //  ______________________________________________________________________
  36+ 7CCF              //
  37+ 7CCF              // +buf        a1 -- a2 f
  38+ 7CCF              // advences to next buffer, cyclically rotating along them
  39+ 7CCF                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CCF             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CCF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CCF             >
  39+ 7CCF             >                // dummy db directives used to calculate length of namec
  39+ 7CCF 2B 42 55 46 >                db      "+BUF"
  39+ 7CD3             >len_NFA         defl    $ - temp_NFA
  39+ 7CD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CCF             >
  39+ 7CCF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CD0 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CD4             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CD3 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CD4             >
  39+ 7CD4 9F 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CD6             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CD6 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CD8             >                else
  39+ 7CD8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  39+ 7CD8             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CD8             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CD8             >
  39+ 7CD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CD8 45 64 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CDC 48 6A
  41+ 7CDE 2B 6B 3D 6E                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CE2 EF 6B
  42+ 7CE4 8F 6F                        dw      EQUALS                  // =
  43+ 7CE6                                                              // if
  44+ 7CE6 7F 64                        dw      ZBRANCH
  45+ 7CE8 08 00                        dw      PBuf_Endif - $
  46+ 7CEA F6 6A                        dw          DROP                //      drop
  47+ 7CEC 32 6E EF 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CF0              PBuf_Endif:                                     // endif
  49+ 7CF0 2B 6B EF 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CF4 EF 6B
  50+ 7CF6 81 6F                        dw      SUBTRACT                // -
  51+ 7CF8 B6 69                        dw      EXIT                    // ;
  52+ 7CFA
  53+ 7CFA              //  ______________________________________________________________________
  54+ 7CFA              //
  55+ 7CFA              // update       --
  56+ 7CFA              // mark the last used block to be written to disk
  57+ 7CFA                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CFA             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CFA             >
  57+ 7CFA             >                // dummy db directives used to calculate length of namec
  57+ 7CFA 55 50 44 41 >                db      "UPDATE"
  57+ 7CFE 54 45       >
  57+ 7D00             >len_NFA         defl    $ - temp_NFA
  57+ 7D00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CFA             >
  57+ 7CFA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CFB 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CFF 54 45       >
  57+ 7D01             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7D00 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7D01             >
  57+ 7D01 CF 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7D03             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7D03 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7D05             >                else
  57+ 7D05 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  57+ 7D05             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7D05             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7D05             >
  57+ 7D05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7D05 EF 6E EF 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7D09 EF 6B
  59+ 7D0B 45 64 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7D0F 5A 69
  60+ 7D11 EF 6E EF 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7D15 FC 6B
  61+ 7D17 B6 69                        dw      EXIT                    // ;
  62+ 7D19
  63+ 7D19
  64+ 7D19              //  ______________________________________________________________________
  65+ 7D19              //
  66+ 7D19              // empty-buffers --
  67+ 7D19                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7D19             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7D19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7D19             >
  67+ 7D19             >                // dummy db directives used to calculate length of namec
  67+ 7D19 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7D1D 59 2D 42 55 >
  67+ 7D21 46 46 45 52 >
  67+ 7D25 53          >
  67+ 7D26             >len_NFA         defl    $ - temp_NFA
  67+ 7D26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7D19             >
  67+ 7D19 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7D1A 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7D1E 59 2D 42 55 >
  67+ 7D22 46 46 45 52 >
  67+ 7D26 53          >
  67+ 7D27             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D26 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D27             >
  67+ 7D27 FA 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D29             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D29 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D2B             >                else
  67+ 7D2B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  67+ 7D2B             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D2B             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D2B             >
  67+ 7D2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D2B 32 6E EF 6B                  dw      FIRST, FETCH            // first @
  69+ 7D2F 3D 6E EF 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D33 E6 6A 81 6F                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D37 CC 73
  71+ 7D39 B6 69                        dw      EXIT                    // ;
  72+ 7D3B
  73+ 7D3B              //  ______________________________________________________________________
  74+ 7D3B              //
  75+ 7D3B              // buffer       n -- a
  76+ 7D3B              // read block n and gives the address to a buffer
  77+ 7D3B              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D3B              // disk before reading the block n.
  79+ 7D3B
  80+ 7D3B                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D3B             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D3B             >
  80+ 7D3B             >                // dummy db directives used to calculate length of namec
  80+ 7D3B 42 55 46 46 >                db      "BUFFER"
  80+ 7D3F 45 52       >
  80+ 7D41             >len_NFA         defl    $ - temp_NFA
  80+ 7D41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D3B             >
  80+ 7D3B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D3C 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D40 45 52       >
  80+ 7D42             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D41 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D42             >
  80+ 7D42 19 7D       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D44             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D44 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D46             >                else
  80+ 7D46 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
  80+ 7D46             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D46             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D46             >
  80+ 7D46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D46 E5 6E EF 6B                  dw      USE, FETCH              // use @
  82+ 7D4A 2B 6B DF 69                  dw      DUP, TO_R               // dup >r
  83+ 7D4E                                                              // begin
  84+ 7D4E              Buffer_Begin:
  85+ 7D4E D6 7C                        dw          PBUF                //      +buf
  86+ 7D50                                                              // until
  87+ 7D50 7F 64                        dw      ZBRANCH
  88+ 7D52 FC FF                        dw      Buffer_Begin - $
  89+ 7D54 E5 6E FC 6B                  dw      USE, STORE              // use !
  90+ 7D58 06 6A EF 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D5C 20 6A
  91+ 7D5E                                                              // if
  92+ 7D5E 7F 64                        dw      ZBRANCH
  93+ 7D60 14 00                        dw      Buffer_Endif - $
  94+ 7D62 06 6A 99 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D66 06 6A EF 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D6A 45 64 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D6E 48 69                        dw          AND_OP              //      and
  98+ 7D70 5B 6D A5 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D74              Buffer_Endif:                                   // endif
 100+ 7D74 06 6A FC 6B                  dw      R_OP, STORE             // r !
 101+ 7D78 06 6A EF 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D7C FC 6B
 102+ 7D7E F3 69 99 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D82 B6 69                        dw      EXIT                    // ;
 104+ 7D84
 105+ 7D84              //  ______________________________________________________________________
 106+ 7D84              //
 107+ 7D84              // block        n -- a
 108+ 7D84              // Leaves the buffer address that contains the block n.
 109+ 7D84              // If the block is not already present, it will be loaded from disk
 110+ 7D84              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D84              // disk before reading the block n.
 112+ 7D84              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D84
 114+ 7D84                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D84             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D84             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D84             >
 114+ 7D84             >                // dummy db directives used to calculate length of namec
 114+ 7D84 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D88 4B          >
 114+ 7D89             >len_NFA         defl    $ - temp_NFA
 114+ 7D89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D84             >
 114+ 7D84 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D85 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D89 4B          >
 114+ 7D8A             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D89 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D8A             >
 114+ 7D8A 3B 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D8C             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D8C E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D8E             >                else
 114+ 7D8E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 114+ 7D8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D8E             >
 114+ 7D8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D8E 81 6E EF 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D92 48 6A DF 69                  dw      PLUS, TO_R              // + >r
 117+ 7D96 EF 6E EF 6B                  dw      PREV, FETCH             // prev @
 118+ 7D9A 2B 6B EF 6B                  dw      DUP, FETCH              // dup @
 119+ 7D9E 06 6A 81 6F                  dw      R_OP, SUBTRACT          // r -
 120+ 7DA2 2B 6B 48 6A                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7DA6                                                              // if
 122+ 7DA6 7F 64                        dw        ZBRANCH
 123+ 7DA8 34 00                        dw        Block_Endif_1 - $
 124+ 7DAA              Block_Begin:                                    //      begin
 125+ 7DAA D6 7C 0D 6A                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7DAE                                                              //          if
 127+ 7DAE 7F 64                        dw          ZBRANCH
 128+ 7DB0 14 00                        dw          Block_Endif_2 - $
 129+ 7DB2 F6 6A                        dw              DROP            //              drop
 130+ 7DB4 06 6A 44 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7DB8 2B 6B                        dw              DUP             //              dup
 132+ 7DBA 06 6A 63 6D                  dw              R_OP, ONE       //              r 1
 133+ 7DBE A5 7C                        dw              READ_WRITE      //              r/w
 134+ 7DC0 6B 6D 81 6F                  dw              TWO, SUBTRACT   //              2 -
 135+ 7DC4              Block_Endif_2:                                  //          endif
 136+ 7DC4 2B 6B EF 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DC8 06 6A
 137+ 7DCA 81 6F 2B 6B                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DCE 48 6A 0D 6A                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DD2                                                              //      until
 140+ 7DD2 7F 64                        dw        ZBRANCH
 141+ 7DD4 D6 FF                        dw        Block_Begin - $
 142+ 7DD6 2B 6B EF 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DDA FC 6B
 143+ 7DDC              Block_Endif_1:                                  // endif
 144+ 7DDC F3 69 F6 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DE0 99 6A
 145+ 7DE2 B6 69                        dw      EXIT                    // ;
 146+ 7DE4
 147+ 7DE4              //  ______________________________________________________________________
 148+ 7DE4              //
 149+ 7DE4              // #buff        -- n
 150+ 7DE4              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DE4                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DE4             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DE4             >
 151+ 7DE4             >                // dummy db directives used to calculate length of namec
 151+ 7DE4 23 42 55 46 >                db      "#BUFF"
 151+ 7DE8 46          >
 151+ 7DE9             >len_NFA         defl    $ - temp_NFA
 151+ 7DE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DE4             >
 151+ 7DE4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DE5 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DE9 46          >
 151+ 7DEA             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DE9 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DEA             >
 151+ 7DEA 84 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DEC             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DEC 1F 6D       >                dw      Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DEE             >                else
 151+ 7DEE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 151+ 7DEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DEE             >
 151+ 7DEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DEE 07 00       >                dw      7
 152+ 7DF0
 153+ 7DF0              //  ______________________________________________________________________
 154+ 7DF0              //
 155+ 7DF0              // flush        --
 156+ 7DF0                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DF0             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DF0             >
 156+ 7DF0             >                // dummy db directives used to calculate length of namec
 156+ 7DF0 46 4C 55 53 >                db      "FLUSH"
 156+ 7DF4 48          >
 156+ 7DF5             >len_NFA         defl    $ - temp_NFA
 156+ 7DF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DF0             >
 156+ 7DF0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DF1 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DF5 48          >
 156+ 7DF6             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DF5 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DF6             >
 156+ 7DF6 E4 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DF8             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DF8 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DFA             >                else
 156+ 7DFA ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 156+ 7DFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DFA             >
 156+ 7DFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DFA EC 7D 71 6A                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DFE 5B 6D
 158+ 7E00              Flush_Do:                                       // do
 159+ 7E00 07 65                        dw      C_DO
 160+ 7E02 5B 6D 44 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7E06 F6 6A
 161+ 7E08                                                              // loop
 162+ 7E08 94 64 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7E0C CD 7B EF 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7E10 88 68 F6 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7E14 B6 69                        dw      EXIT                    // exit
 166+ 7E16
 167+ 7E16              //  ______________________________________________________________________
 168+ 7E16              //
 169+ 7E16              // f_getline    a fh -- a n
 170+ 7E16              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7E16              // Address a is left for subsequent processing
 172+ 7E16              // and n as the actual number of byte read, that is the length of line
 173+ 7E16                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7E16             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7E16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7E16             >
 173+ 7E16             >                // dummy db directives used to calculate length of namec
 173+ 7E16 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7E1A 54 4C 49 4E >
 173+ 7E1E 45          >
 173+ 7E1F             >len_NFA         defl    $ - temp_NFA
 173+ 7E1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7E16             >
 173+ 7E16 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7E17 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7E1B 54 4C 49 4E >
 173+ 7E1F 45          >
 173+ 7E20             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7E1F C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7E20             >
 173+ 7E20 F0 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E22             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E22 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E24             >                else
 173+ 7E24 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 173+ 7E24             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E24             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E24             >
 173+ 7E24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E24 2B 6B DF 69                  dw      DUP, TO_R               // dup >r           ( a  fh )  \  fh
 175+ 7E28 EF 67                        dw      F_FGETPOS               // f_fgetpos        ( a  d  f )  \  fh
 176+ 7E2A 45 64 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( a  d  )  \  fh
 176+ 7E2E F8 70
 177+ 7E30
 178+ 7E30 38 6B 2B 6B                  dw      ROT, DUP, BBUF          // rot dup b/buf    ( d  a  a  512 )  \  fh
 178+ 7E34 9B 6D
 179+ 7E36              //              dw      TWO_DUP, BLANKS         // 2dup blanks      ( d  a  a  512 )  \  fh
 180+ 7E36
 181+ 7E36 A3 6A                        dw      CELL_MINUS              //  cell-           ( d  a  a  510 )  \  fh
 182+ 7E38 1E 6B 71 6A                  dw      SWAP, ONE_PLUS, SWAP    // swap 1+ swap     ( d  a  a+1  510 )  \  fh
 182+ 7E3C 1E 6B
 183+ 7E3E
 184+ 7E3E 7D 6A 06 6A                  dw      ONE_SUBTRACT, R_OP      // 1- r             ( d  a  a+1  509  fh )  \  fh
 185+ 7E42 0D 68                        dw      F_READ                  // f_read           ( d  a  n  f )  \  fh
 186+ 7E44 45 64 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( d  a  n )  \  fh
 186+ 7E48 F8 70
 187+ 7E4A                                                              // if ( at least 1 chr was read )  \  fh
 188+ 7E4A 7F 64                        dw      ZBRANCH
 189+ 7E4C 36 00                        dw      FGetline_Else - $
 190+ 7E4E 45 64 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( d  a   i j k )  \  fh
 190+ 7E52 F2 65
 191+ 7E54 F6 6A 01 6B                  dw          DROP, NIP           //      drop nip         ( d  a  j  )  \  fh
 192+ 7E58 1E 6B                        dw          SWAP                //      drop swap        ( d  j  a  )  \  fh
 193+ 7E5A 45 64 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( d  j  a   i j k )  \  fh
 193+ 7E5E F2 65
 194+ 7E60 F6 6A 01 6B                  dw          DROP, NIP           //      drop nip         ( d  jnl  a  jcr  )  \  fh
 195+ 7E64 38 6B DA 6F                  dw          ROT, MIN            //      rot min          ( d  a  n  )  \  fh
 196+ 7E68 2B 6B DF 69                  dw          DUP, TO_R           //      dup >r           ( d  a  n  )    \  fh n
 197+ 7E6C 83 6B F3 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( a  n  d  n  )  \  fh
 198+ 7E70 5B 6D 55 6A                  dw          ZERO, DPLUS         //      0 d+             ( a  n  d+n  )  \  fh
 199+ 7E74 F3 69 CA 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( a  n  f )
 200+ 7E78 45 64 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( a  n  )
 200+ 7E7C F8 70
 201+ 7E7E                                                              // else
 202+ 7E7E 68 64                        dw      BRANCH
 203+ 7E80 0C 00                        dw      FGetline_Endif - $
 204+ 7E82              FGetline_Else:
 205+ 7E82 F3 69                        dw          R_TO                //      r>              ( d  a  fh  )
 206+ 7E84 83 6B 75 6B                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( a  fh  )
 207+ 7E88 F6 6A 5B 6D                  dw          DROP, ZERO          //      drop, 0         ( a  0 )
 208+ 7E8C              FGetline_Endif:                                 // endif
 209+ 7E8C 95 6B 48 6A                  dw      TWO_DUP, PLUS, OVER     // 2dup + over          ( a  n  a+n  n )
 209+ 7E90 E6 6A
 210+ 7E92 9B 6D 1E 6B                  dw      BBUF, SWAP, SUBTRACT    // b/buf swap -         ( a  n  a+n  512-n )
 210+ 7E96 81 6F
 211+ 7E98 DD 73                        dw      BLANKS                  // blanks               ( a  n )
 212+ 7E9A 95 6B 48 6A                  dw      TWO_DUP, PLUS, ZERO     // 2dup + 0             ( a  n  a+n  0 )
 212+ 7E9E 5B 6D
 213+ 7EA0 1E 6B 18 6C                  dw      SWAP, CSTORE            // swap c!              ( a  n )
 214+ 7EA4 B6 69                        dw      EXIT                    // ;
 215+ 7EA6
 216+ 7EA6              //  ______________________________________________________________________
 217+ 7EA6              //
 218+ 7EA6              // f_include    fh --
 219+ 7EA6              // Given a filehandle includes the source from file
 220+ 7EA6                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 220+ 7EA6             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 220+ 7EA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 7EA6             >
 220+ 7EA6             >                // dummy db directives used to calculate length of namec
 220+ 7EA6 46 5F 49 4E >                db      "F_INCLUDE"
 220+ 7EAA 43 4C 55 44 >
 220+ 7EAE 45          >
 220+ 7EAF             >len_NFA         defl    $ - temp_NFA
 220+ 7EAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 7EA6             >
 220+ 7EA6 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 7EA7 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 220+ 7EAB 43 4C 55 44 >
 220+ 7EAF 45          >
 220+ 7EB0             >                org     $-1                 // alter last byte of Name just above to set
 220+ 7EAF C5          >                db      {b $} | END_BIT     // msb as name end
 220+ 7EB0             >
 220+ 7EB0 16 7E       >                dw      last_NFA            // Link to previous definition Name
 220+ 7EB2             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 7EB2 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 220+ 7EB4             >                else
 220+ 7EB4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 220+ 7EB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 7EB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 7EB4             >
 220+ 7EB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 7EB4 5A 6E EF 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 221+ 7EB8 DF 69
 222+ 7EBA 63 6E EF 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 222+ 7EBE DF 69
 223+ 7EC0 11 6F EF 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 223+ 7EC4 DF 69
 224+ 7EC6 06 6A                        dw      R_OP                    // r
 225+ 7EC8                                                              // if
 226+ 7EC8 7F 64                        dw      ZBRANCH
 227+ 7ECA 10 00                        dw      FInclude_Else_1 - $
 228+ 7ECC 06 6A EF 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 229+ 7ED0 45 64 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 229+ 7ED4 F8 70
 230+ 7ED6                                                              // else
 231+ 7ED6 68 64                        dw      BRANCH
 232+ 7ED8 06 00                        dw      FInclude_Endif_1 - $
 233+ 7EDA              FInclude_Else_1:
 234+ 7EDA 5B 6D 5B 6D                  dw          ZERO, ZERO          //      0 0
 235+ 7EDE                                                              // endif
 236+ 7EDE              FInclude_Endif_1:
 237+ 7EDE DF 69 DF 69                  dw      TO_R, TO_R              // >r >r
 238+ 7EE2 11 6F FC 6B                  dw      SOURCE_ID, STORE        // source-id !
 239+ 7EE6              FInclude_Begin:                                 // begin
 240+ 7EE6 63 6D 44 7D                  dw          ONE, BUFFER         //      1 buffer
 241+ 7EEA 2B 6B 9B 6D                  dw          DUP, BBUF, BLANKS   //      dup b/buf blanks
 241+ 7EEE DD 73
 242+ 7EF0 71 6A                        dw          ONE_PLUS            //      1+
 243+ 7EF2 11 6F EF 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 244+ 7EF6 22 7E                        dw          F_GETLINE           //      f_getline
 245+ 7EF8 01 6B                        dw          NIP                 //      nip
 246+ 7EFA                                                              // while
 247+ 7EFA 7F 64                        dw      ZBRANCH
 248+ 7EFC 16 00                        dw      FInclude_Repeat - $
 249+ 7EFE 03 7D                        dw          UPDATE              //      update
 250+ 7F00 63 6D 5A 6E                  dw          ONE, BLK, STORE     //      1 blk !
 250+ 7F04 FC 6B
 251+ 7F06 5B 6D 63 6E                  dw          ZERO, TO_IN, STORE  //      0 >in !
 251+ 7F0A FC 6B
 252+ 7F0C B5 77                        dw          INTERPRET           //      interpret
 253+ 7F0E 68 64                        dw      BRANCH
 254+ 7F10 D6 FF                        dw      FInclude_Begin - $
 255+ 7F12              FInclude_Repeat:                                // repeat
 256+ 7F12 11 6F EF 6B                  dw      SOURCE_ID, FETCH        // source-id @
 257+ 7F16 5B 6D 11 6F                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 257+ 7F1A FC 6B
 258+ 7F1C 4B 68                        dw      F_CLOSE                 // f_close
 259+ 7F1E 45 64 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 259+ 7F22 F8 70
 260+ 7F24 F3 69 F3 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 260+ 7F28 F3 69
 261+ 7F2A 2B 6B 11 6F                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 261+ 7F2E FC 6B
 262+ 7F30                                                              // if
 263+ 7F30 7F 64                        dw      ZBRANCH
 264+ 7F32 12 00                        dw      FInclude_Else_2 - $
 265+ 7F34 11 6F EF 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 266+ 7F38 CA 67                        dw          F_SEEK              //      f_seek
 267+ 7F3A 45 64 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 267+ 7F3E F8 70
 268+ 7F40                                                              // else
 269+ 7F40 68 64                        dw      BRANCH
 270+ 7F42 04 00                        dw      FInclude_Endif_2 - $
 271+ 7F44              FInclude_Else_2:
 272+ 7F44 75 6B                        dw          TWO_DROP            //      2drop
 273+ 7F46              FInclude_Endif_2:                               // endif
 274+ 7F46 F3 69 63 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 274+ 7F4A FC 6B
 275+ 7F4C F3 69 5A 6E                  dw      R_TO, BLK, STORE        // r> blk !
 275+ 7F50 FC 6B
 276+ 7F52 B6 69                        dw      EXIT                    // ;
 277+ 7F54
 278+ 7F54              //  ______________________________________________________________________
 279+ 7F54              //
 280+ 7F54              // include      -- cccc
 281+ 7F54              // Include the following filename
 282+ 7F54                              Colon_Def INCLUDE, "INCLUDE", is_normal
 282+ 7F54             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 282+ 7F54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 282+ 7F54             >
 282+ 7F54             >                // dummy db directives used to calculate length of namec
 282+ 7F54 49 4E 43 4C >                db      "INCLUDE"
 282+ 7F58 55 44 45    >
 282+ 7F5B             >len_NFA         defl    $ - temp_NFA
 282+ 7F5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 282+ 7F54             >
 282+ 7F54 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 282+ 7F55 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 282+ 7F59 55 44 45    >
 282+ 7F5C             >                org     $-1                 // alter last byte of Name just above to set
 282+ 7F5B C5          >                db      {b $} | END_BIT     // msb as name end
 282+ 7F5C             >
 282+ 7F5C A6 7E       >                dw      last_NFA            // Link to previous definition Name
 282+ 7F5E             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 282+ 7F5E E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 282+ 7F60             >                else
 282+ 7F60 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 282+ 7F60             >                endif           ; ok        // for other definitions it "points" the correct handler
 282+ 7F60             >                // Use of "; ok" to suppress "warning[fwdref]"
 282+ 7F60             >
 282+ 7F60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 283+ 7F60 85 6D 15 74                  dw      BL, WORD, COUNT, OVER   // bl word count over
 283+ 7F64 7F 72 E6 6A
 284+ 7F68 48 6A 5B 6D                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 284+ 7F6C 1E 6B FC 6B
 285+ 7F70 02 74 63 6D                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 285+ 7F74 65 68
 286+ 7F76 45 64 2B 00                  dw      LIT, 43, QERROR         // 43 ?error
 286+ 7F7A F8 70
 287+ 7F7C 2B 6B B2 7E                  dw      DUP, F_INCLUDE          // dup f_include
 288+ 7F80 4B 68 F6 6A                  dw      F_CLOSE, DROP           // f_close drop
 289+ 7F84 B6 69                        dw      EXIT                    // ;
 290+ 7F86
 291+ 7F86              //  ______________________________________________________________________
 292+ 7F86              //
 293+ 7F86              // needs
 294+ 7F86              // check for cccc exists in vocabulary
 295+ 7F86              // if it doesn't then  INCLUDE  inc/cccc.F
 296+ 7F86
 297+ 7F86              // temp filename cccc.f as counted string zero-padded
 298+ 7F86                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 298+ 7F86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 298+ 7F86             >
 298+ 7F86             >                // dummy db directives used to calculate length of namec
 298+ 7F86 4E 45 45 44 >                db      "NEEDS-W"
 298+ 7F8A 53 2D 57    >
 298+ 7F8D             >len_NFA         defl    $ - temp_NFA
 298+ 7F8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 298+ 7F86             >
 298+ 7F86 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 298+ 7F87 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 298+ 7F8B 53 2D 57    >
 298+ 7F8E             >                org     $-1                 // alter last byte of Name just above to set
 298+ 7F8D D7          >                db      {b $} | END_BIT     // msb as name end
 298+ 7F8E             >
 298+ 7F8E 54 7F       >                dw      last_NFA            // Link to previous definition Name
 298+ 7F90             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 298+ 7F90 C8 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 298+ 7F92             >                else
 298+ 7F92 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 298+ 7F92             >                endif           ; ok        // for other definitions it "points" the correct handler
 298+ 7F92             >                // Use of "; ok" to suppress "warning[fwdref]"
 298+ 7F92             >
 298+ 7F92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 299+ 7F92 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 300+ 7FB5              // temp complete path+filename
 301+ 7FB5                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 301+ 7FB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 7FB5             >
 301+ 7FB5             >                // dummy db directives used to calculate length of namec
 301+ 7FB5 4E 45 45 44 >                db      "NEEDS-FN"
 301+ 7FB9 53 2D 46 4E >
 301+ 7FBD             >len_NFA         defl    $ - temp_NFA
 301+ 7FBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 7FB5             >
 301+ 7FB5 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 7FB6 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 301+ 7FBA 53 2D 46 4E >
 301+ 7FBE             >                org     $-1                 // alter last byte of Name just above to set
 301+ 7FBD CE          >                db      {b $} | END_BIT     // msb as name end
 301+ 7FBE             >
 301+ 7FBE 86 7F       >                dw      last_NFA            // Link to previous definition Name
 301+ 7FC0             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 7FC0 C8 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 301+ 7FC2             >                else
 301+ 7FC2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 301+ 7FC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 7FC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 7FC2             >
 301+ 7FC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 7FC2 00 00 00...                  ds      40
 303+ 7FEA              // constant path
 304+ 7FEA                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 304+ 7FEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ 7FEA             >
 304+ 7FEA             >                // dummy db directives used to calculate length of namec
 304+ 7FEA 4E 45 45 44 >                db      "NEEDS-INC"
 304+ 7FEE 53 2D 49 4E >
 304+ 7FF2 43          >
 304+ 7FF3             >len_NFA         defl    $ - temp_NFA
 304+ 7FF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ 7FEA             >
 304+ 7FEA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ 7FEB 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 304+ 7FEF 53 2D 49 4E >
 304+ 7FF3 43          >
 304+ 7FF4             >                org     $-1                 // alter last byte of Name just above to set
 304+ 7FF3 C3          >                db      {b $} | END_BIT     // msb as name end
 304+ 7FF4             >
 304+ 7FF4 B5 7F       >                dw      last_NFA            // Link to previous definition Name
 304+ 7FF6             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 7FF6 C8 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 304+ 7FF8             >                else
 304+ 7FF8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 304+ 7FF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 7FF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 7FF8             >
 304+ 7FF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 7FF8 04 69 6E 63                  db      4, "inc/", 0
 305+ 7FFC 2F 00
 306+ 7FFE
 307+ 7FFE              // Concatenate path at a and filename and include it
 308+ 7FFE              // No error is issued if filename doesn't exist.
 309+ 7FFE                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 309+ 7FFE             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 309+ 7FFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 309+ 7FFE             >
 309+ 7FFE             >                // dummy db directives used to calculate length of namec
 309+ 7FFE 4E 45 45 44 >                db      "NEEDS/"
 309+ 8002 53 2F       >
 309+ 8004             >len_NFA         defl    $ - temp_NFA
 309+ 8004             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 309+ 7FFE             >
 309+ 7FFE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 309+ 7FFF 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 309+ 8003 53 2F       >
 309+ 8005             >                org     $-1                 // alter last byte of Name just above to set
 309+ 8004 AF          >                db      {b $} | END_BIT     // msb as name end
 309+ 8005             >
 309+ 8005 EA 7F       >                dw      last_NFA            // Link to previous definition Name
 309+ 8007             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 309+ 8007 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 309+ 8009             >                else
 309+ 8009 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 309+ 8009             >                endif           ; ok        // for other definitions it "points" the correct handler
 309+ 8009             >                // Use of "; ok" to suppress "warning[fwdref]"
 309+ 8009             >
 309+ 8009             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 310+ 8009 7F 72 0E 6B                  dw      COUNT, TUCK             // n a n
 311+ 800D C0 7F 1E 6B                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 311+ 8011 AD 68
 312+ 8013 C0 7F 48 6A                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 313+ 8017 90 7F 71 6A                  dw      NEEDS_W, ONE_PLUS, SWAP
 313+ 801B 1E 6B
 314+ 801D 45 64 23 00                  dw      LIT, 35
 315+ 8021 AD 68                        dw      CMOVE
 316+ 8023 C0 7F                        dw      NEEDS_FN
 317+ 8025 02 74 63 6D                  dw      PAD, ONE, F_OPEN
 317+ 8029 65 68
 318+ 802B 7F 64                        dw      ZBRANCH
 319+ 802D 16 00                        dw      Needs_1 - $
 320+ 802F 90 7F 7F 72                  dw          NEEDS_W, COUNT, TYPE, SPACE
 320+ 8033 92 72 3E 70
 321+ 8037 45 64 2B 00                  dw          LIT, 43, MESSAGE, DROP
 321+ 803B B7 7A F6 6A
 322+ 803F 68 64                        dw      BRANCH
 323+ 8041 04 00                        dw      Needs_2 - $
 324+ 8043              Needs_1:
 325+ 8043 B2 7E                        dw          F_INCLUDE
 326+ 8045              Needs_2:
 327+ 8045 B6 69                        dw      EXIT                    // ;
 328+ 8047
 329+ 8047
 330+ 8047                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 330+ 8047             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 330+ 8047             >
 330+ 8047             >                // dummy db directives used to calculate length of namec
 330+ 8047 4E 43 44 4D >                db      "NCDM"
 330+ 804B             >len_NFA         defl    $ - temp_NFA
 330+ 804B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 330+ 8047             >
 330+ 8047 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 330+ 8048 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 330+ 804C             >                org     $-1                 // alter last byte of Name just above to set
 330+ 804B CD          >                db      {b $} | END_BIT     // msb as name end
 330+ 804C             >
 330+ 804C FE 7F       >                dw      last_NFA            // Link to previous definition Name
 330+ 804E             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 330+ 804E C8 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 330+ 8050             >                else
 330+ 8050 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 330+ 8050             >                endif           ; ok        // for other definitions it "points" the correct handler
 330+ 8050             >                // Use of "; ok" to suppress "warning[fwdref]"
 330+ 8050             >
 330+ 8050             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 331+ 8050 5E 60 25 26                  db $5E, $60, $25, $26, $24, $5F, $7B, $7D, $7E
 331+ 8054 24 5F 7B 7D
 331+ 8058 7E
 332+ 8059
 333+ 8059                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 333+ 8059             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 333+ 8059             >
 333+ 8059             >                // dummy db directives used to calculate length of namec
 333+ 8059 4E 44 4F 4D >                db      "NDOM"
 333+ 805D             >len_NFA         defl    $ - temp_NFA
 333+ 805D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 333+ 8059             >
 333+ 8059 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 333+ 805A 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 333+ 805E             >                org     $-1                 // alter last byte of Name just above to set
 333+ 805D CD          >                db      {b $} | END_BIT     // msb as name end
 333+ 805E             >
 333+ 805E 47 80       >                dw      last_NFA            // Link to previous definition Name
 333+ 8060             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 333+ 8060 C8 76       >                dw      Create_Ptr ; ok        // for primitive definitions  actual code
 333+ 8062             >                else
 333+ 8062 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 333+ 8062             >                endif           ; ok        // for other definitions it "points" the correct handler
 333+ 8062             >                // Use of "; ok" to suppress "warning[fwdref]"
 333+ 8062             >
 333+ 8062             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 334+ 8062 3A 3F 2F 2A                  db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 334+ 8066 7C 5C 3C 3E
 334+ 806A 22
 335+ 806B
 336+ 806B
 337+ 806B              // Replace illegal character in filename with tilde ~
 338+ 806B              // at the moment we need only  "
 339+ 806B                              Colon_Def NEEDS_CHECK, "NEEDS-CHECK", is_normal
 339+ 806B             >                New_Def  NEEDS_CHECK, "NEEDS-CHECK", Enter_Ptr, is_normal ; ok
 339+ 806B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ 806B             >
 339+ 806B             >                // dummy db directives used to calculate length of namec
 339+ 806B 4E 45 45 44 >                db      "NEEDS-CHECK"
 339+ 806F 53 2D 43 48 >
 339+ 8073 45 43 4B    >
 339+ 8076             >len_NFA         defl    $ - temp_NFA
 339+ 8076             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ 806B             >
 339+ 806B 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ 806C 4E 45 45 44 >                db      "NEEDS-CHECK"               // name string in 7-bit ascii, but
 339+ 8070 53 2D 43 48 >
 339+ 8074 45 43 4B    >
 339+ 8077             >                org     $-1                 // alter last byte of Name just above to set
 339+ 8076 CB          >                db      {b $} | END_BIT     // msb as name end
 339+ 8077             >
 339+ 8077 59 80       >                dw      last_NFA            // Link to previous definition Name
 339+ 8079             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 8079 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 339+ 807B             >                else
 339+ 807B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 339+ 807B             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 807B             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 807B             >
 339+ 807B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 807B 90 7F 7F 72                  dw      NEEDS_W, COUNT, OVER
 340+ 807F E6 6A
 341+ 8081 48 6A 1E 6B                  dw      PLUS, SWAP
 342+ 8085 07 65                        dw      C_DO
 343+ 8087              Needs_3:
 344+ 8087 4E 80 60 80                  dw          NCDM, NDOM, LIT, 9
 344+ 808B 45 64 09 00
 345+ 808F 12 65 0A 6C                  dw          I, CFETCH
 346+ 8093 2C 66                        dw          C_MAP
 347+ 8095 12 65 18 6C                  dw          I, CSTORE
 348+ 8099              Needs_4:
 349+ 8099 94 64                        dw      C_LOOP
 350+ 809B EC FF                        dw      Needs_3 - $
 351+ 809D B6 69                        dw      EXIT
 352+ 809F
 353+ 809F
 354+ 809F              // include  "path/cccc.f" if cccc is not defined
 355+ 809F              // filename cccc.f is temporary stored at NEEDS-W
 356+ 809F                              Colon_Def NEEDS_PATH, "NEEDS-PATH", is_normal
 356+ 809F             >                New_Def  NEEDS_PATH, "NEEDS-PATH", Enter_Ptr, is_normal ; ok
 356+ 809F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 356+ 809F             >
 356+ 809F             >                // dummy db directives used to calculate length of namec
 356+ 809F 4E 45 45 44 >                db      "NEEDS-PATH"
 356+ 80A3 53 2D 50 41 >
 356+ 80A7 54 48       >
 356+ 80A9             >len_NFA         defl    $ - temp_NFA
 356+ 80A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 356+ 809F             >
 356+ 809F 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 356+ 80A0 4E 45 45 44 >                db      "NEEDS-PATH"               // name string in 7-bit ascii, but
 356+ 80A4 53 2D 50 41 >
 356+ 80A8 54 48       >
 356+ 80AA             >                org     $-1                 // alter last byte of Name just above to set
 356+ 80A9 C8          >                db      {b $} | END_BIT     // msb as name end
 356+ 80AA             >
 356+ 80AA 6B 80       >                dw      last_NFA            // Link to previous definition Name
 356+ 80AC             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 356+ 80AC E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 356+ 80AE             >                else
 356+ 80AE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 356+ 80AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 356+ 80AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 356+ 80AE             >
 356+ 80AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 357+ 80AE C7 75 0D 6A                  dw      LFIND, ZEQUAL
 358+ 80B2 7F 64                        dw      ZBRANCH
 359+ 80B4 2E 00                        dw      Needs_5 - $
 360+ 80B6 90 7F                        dw          NEEDS_W
 361+ 80B8 45 64 23 00                  dw          LIT, 35
 362+ 80BC CC 73                        dw          ERASE                   // a
 363+ 80BE 2D 6F 0A 6C                  dw          HERE, CFETCH, ONE_PLUS  // a n
 363+ 80C2 71 6A
 364+ 80C4 2D 6F E6 6A                  dw          HERE, OVER              // a n here n
 365+ 80C8 90 7F 1E 6B                  dw          NEEDS_W, SWAP, CMOVE    // a n
 365+ 80CC AD 68
 366+ 80CE 79 80                        dw          NEEDS_CHECK
 367+ 80D0 90 7F 48 6A                  dw          NEEDS_W, PLUS           // a a1+1
 368+ 80D4 45 64 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 369+ 80D8 1E 6B FC 6B                  dw          SWAP, STORE             // a
 370+ 80DC 07 80                        dw          NEEDS_SLASH
 371+ 80DE 68 64                        dw      BRANCH
 372+ 80E0 06 00                        dw      Needs_6 - $
 373+ 80E2              Needs_5:
 374+ 80E2 F6 6A 75 6B                  dw          DROP, TWO_DROP
 375+ 80E6              Needs_6:
 376+ 80E6 B6 69                        dw      EXIT
 377+ 80E8
 378+ 80E8
 379+ 80E8              // check for cccc exists in vocabulary
 380+ 80E8              // if it doesn't then  INCLUDE  inc/cccc.F
 381+ 80E8              // search in inc subdirectory
 382+ 80E8                              Colon_Def NEEDS, "NEEDS", is_normal
 382+ 80E8             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 382+ 80E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 382+ 80E8             >
 382+ 80E8             >                // dummy db directives used to calculate length of namec
 382+ 80E8 4E 45 45 44 >                db      "NEEDS"
 382+ 80EC 53          >
 382+ 80ED             >len_NFA         defl    $ - temp_NFA
 382+ 80ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 382+ 80E8             >
 382+ 80E8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 382+ 80E9 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 382+ 80ED 53          >
 382+ 80EE             >                org     $-1                 // alter last byte of Name just above to set
 382+ 80ED D3          >                db      {b $} | END_BIT     // msb as name end
 382+ 80EE             >
 382+ 80EE 9F 80       >                dw      last_NFA            // Link to previous definition Name
 382+ 80F0             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 382+ 80F0 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 382+ 80F2             >                else
 382+ 80F2 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 382+ 80F2             >                endif           ; ok        // for other definitions it "points" the correct handler
 382+ 80F2             >                // Use of "; ok" to suppress "warning[fwdref]"
 382+ 80F2             >
 382+ 80F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 383+ 80F2 F6 7F AC 80                  dw      NEEDS_INC, NEEDS_PATH
 384+ 80F6 B6 69                        dw      EXIT
 385+ 80F8
 386+ 80F8
 387+ 80F8              //  ______________________________________________________________________
 388+ 80F8              //
 389+ 80F8              // load+        n --
 390+ 80F8                              Colon_Def LOAD_P, "LOAD+", is_normal
 390+ 80F8             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 390+ 80F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 390+ 80F8             >
 390+ 80F8             >                // dummy db directives used to calculate length of namec
 390+ 80F8 4C 4F 41 44 >                db      "LOAD+"
 390+ 80FC 2B          >
 390+ 80FD             >len_NFA         defl    $ - temp_NFA
 390+ 80FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 390+ 80F8             >
 390+ 80F8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 390+ 80F9 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 390+ 80FD 2B          >
 390+ 80FE             >                org     $-1                 // alter last byte of Name just above to set
 390+ 80FD AB          >                db      {b $} | END_BIT     // msb as name end
 390+ 80FE             >
 390+ 80FE E8 80       >                dw      last_NFA            // Link to previous definition Name
 390+ 8100             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 390+ 8100 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 390+ 8102             >                else
 390+ 8102 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 390+ 8102             >                endif           ; ok        // for other definitions it "points" the correct handler
 390+ 8102             >                // Use of "; ok" to suppress "warning[fwdref]"
 390+ 8102             >
 390+ 8102             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 391+ 8102 5A 6E EF 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 391+ 8106 DF 69
 392+ 8108 63 6E EF 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 392+ 810C DF 69
 393+ 810E
 394+ 810E 5B 6D 63 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 394+ 8112 FC 6B
 395+ 8114 A7 6D 00 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 395+ 8118 5A 6E FC 6B
 396+ 811C B5 77                        dw      INTERPRET               // interpret
 397+ 811E
 398+ 811E F3 69 63 6E                  dw      R_TO, TO_IN, STORE      // r> >in !
 398+ 8122 FC 6B
 399+ 8124 F3 69 5A 6E                  dw      R_TO, BLK, STORE        // r> blk !
 399+ 8128 FC 6B
 400+ 812A B6 69                        dw      EXIT                    // ;
 401+ 812C
 402+ 812C              //  ______________________________________________________________________
 403+ 812C              //
 404+ 812C              // -->          --
 405+ 812C                              Colon_Def LOAD_NEXT, "-->", is_immediate
 405+ 812C             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 405+ 812C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 405+ 812C             >
 405+ 812C             >                // dummy db directives used to calculate length of namec
 405+ 812C 2D 2D 3E    >                db      "-->"
 405+ 812F             >len_NFA         defl    $ - temp_NFA
 405+ 812F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 405+ 812C             >
 405+ 812C C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 405+ 812D 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 405+ 8130             >                org     $-1                 // alter last byte of Name just above to set
 405+ 812F BE          >                db      {b $} | END_BIT     // msb as name end
 405+ 8130             >
 405+ 8130 F8 80       >                dw      last_NFA            // Link to previous definition Name
 405+ 8132             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 405+ 8132 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 405+ 8134             >                else
 405+ 8134 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 405+ 8134             >                endif           ; ok        // for other definitions it "points" the correct handler
 405+ 8134             >                // Use of "; ok" to suppress "warning[fwdref]"
 405+ 8134             >
 405+ 8134             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 406+ 8134 71 71                        dw      QLOADING                // ?loading
 407+ 8136 5B 6D 63 6E                  dw      ZERO, TO_IN, STORE      // 0 >in !
 407+ 813A FC 6B
 408+ 813C A7 6D                        dw      BSCR                    // b/scr
 409+ 813E 5A 6E EF 6B                  dw      BLK, FETCH              // blk @
 410+ 8142 E6 6A                        dw      OVER                    // over
 411+ 8144 2D 7A                        dw      MOD                     // mod
 412+ 8146 81 6F                        dw      SUBTRACT                // -
 413+ 8148 5A 6E CC 6B                  dw      BLK, PLUSSTORE          // +!
 414+ 814C B6 69                        dw      EXIT                    // ;
 415+ 814E
 416+ 814E              //  ______________________________________________________________________
 417+ 814E              //
 418+ 814E              // '            -- xt
 419+ 814E                              Colon_Def TICK, "'", is_normal
 419+ 814E             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 419+ 814E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 419+ 814E             >
 419+ 814E             >                // dummy db directives used to calculate length of namec
 419+ 814E 27          >                db      "'"
 419+ 814F             >len_NFA         defl    $ - temp_NFA
 419+ 814F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 419+ 814E             >
 419+ 814E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 419+ 814F 27          >                db      "'"               // name string in 7-bit ascii, but
 419+ 8150             >                org     $-1                 // alter last byte of Name just above to set
 419+ 814F A7          >                db      {b $} | END_BIT     // msb as name end
 419+ 8150             >
 419+ 8150 2C 81       >                dw      last_NFA            // Link to previous definition Name
 419+ 8152             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 419+ 8152 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 419+ 8154             >                else
 419+ 8154 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 419+ 8154             >                endif           ; ok        // for other definitions it "points" the correct handler
 419+ 8154             >                // Use of "; ok" to suppress "warning[fwdref]"
 419+ 8154             >
 419+ 8154             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 420+ 8154 C7 75                        dw      LFIND                   // -find
 421+ 8156 0D 6A                        dw      ZEQUAL                  // 0=
 422+ 8158 5B 6D F8 70                  dw      ZERO, QERROR            // 0 ?error
 423+ 815C F6 6A                        dw      DROP                    // drop
 424+ 815E B6 69                        dw      EXIT                    // ;
 425+ 8160
 426+ 8160              //  ______________________________________________________________________
 427+ 8160              //
 428+ 8160              // forget       -- cccc
 429+ 8160                              Colon_Def FORGET, "FORGET", is_normal
 429+ 8160             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 429+ 8160             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 429+ 8160             >
 429+ 8160             >                // dummy db directives used to calculate length of namec
 429+ 8160 46 4F 52 47 >                db      "FORGET"
 429+ 8164 45 54       >
 429+ 8166             >len_NFA         defl    $ - temp_NFA
 429+ 8166             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 429+ 8160             >
 429+ 8160 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 429+ 8161 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 429+ 8165 45 54       >
 429+ 8167             >                org     $-1                 // alter last byte of Name just above to set
 429+ 8166 D4          >                db      {b $} | END_BIT     // msb as name end
 429+ 8167             >
 429+ 8167 4E 81       >                dw      last_NFA            // Link to previous definition Name
 429+ 8169             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 429+ 8169 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 429+ 816B             >                else
 429+ 816B ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 429+ 816B             >                endif           ; ok        // for other definitions it "points" the correct handler
 429+ 816B             >                // Use of "; ok" to suppress "warning[fwdref]"
 429+ 816B             >
 429+ 816B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 430+ 816B 9B 6E EF 6B                  dw      CURRENT, FETCH          // current @
 431+ 816F 8E 6E EF 6B                  dw      CONTEXT, FETCH          // context @
 432+ 8173 81 6F 45 64                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 432+ 8177 17 00 F8 70
 433+ 817B 52 81 C8 70                  dw      TICK, TO_BODY           // ' >body
 434+ 817F 2B 6B 11 6E                  dw      DUP, FENCE, FETCH       // dup fence @
 434+ 8183 EF 6B
 435+ 8185 9C 6F 45 64                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 435+ 8189 15 00 F8 70
 436+ 818D 2B 6B 9E 70                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 436+ 8191 19 6E FC 6B
 437+ 8195 84 70 EF 6B                  dw      LFA, FETCH              // lfa @
 438+ 8199 8E 6E EF 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 438+ 819D FC 6B
 439+ 819F B6 69                        dw      EXIT                    // ;
 440+ 81A1
 441+ 81A1              //  ______________________________________________________________________
 442+ 81A1              //
 443+ 81A1              // marker       -- cccc
 444+ 81A1                              Colon_Def MARKER, "MARKER", is_immediate
 444+ 81A1             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 444+ 81A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 444+ 81A1             >
 444+ 81A1             >                // dummy db directives used to calculate length of namec
 444+ 81A1 4D 41 52 4B >                db      "MARKER"
 444+ 81A5 45 52       >
 444+ 81A7             >len_NFA         defl    $ - temp_NFA
 444+ 81A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 444+ 81A1             >
 444+ 81A1 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 444+ 81A2 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 444+ 81A6 45 52       >
 444+ 81A8             >                org     $-1                 // alter last byte of Name just above to set
 444+ 81A7 D2          >                db      {b $} | END_BIT     // msb as name end
 444+ 81A8             >
 444+ 81A8 60 81       >                dw      last_NFA            // Link to previous definition Name
 444+ 81AA             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 444+ 81AA E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 444+ 81AC             >                else
 444+ 81AC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 444+ 81AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 444+ 81AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 444+ 81AC             >
 444+ 81AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 445+ 81AC 48 72                        dw      CBUILDS
 446+ 81AE 27 6E EF 6B                  dw      VOC_LINK, FETCH, COMMA
 446+ 81B2 49 6F
 447+ 81B4 9B 6E EF 6B                  dw      CURRENT, FETCH, COMMA
 447+ 81B8 49 6F
 448+ 81BA 8E 6E EF 6B                  dw      CONTEXT, FETCH, COMMA
 448+ 81BE 49 6F
 449+ 81C0 74 70 49 6F                  dw      LATEST, COMMA
 450+ 81C4 74 70 B2 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 450+ 81C8 84 70 EF 6B
 450+ 81CC 49 6F
 451+ 81CE 58 72                        dw      DOES_TO
 452+ 81D0 2B 6B EF 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 452+ 81D4 27 6E FC 6B
 452+ 81D8 99 6A
 453+ 81DA 2B 6B EF 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 453+ 81DE 9B 6E FC 6B
 453+ 81E2 99 6A
 454+ 81E4 2B 6B EF 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 454+ 81E8 8E 6E FC 6B
 454+ 81EC 99 6A
 455+ 81EE 2B 6B EF 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 455+ 81F2 19 6E FC 6B
 455+ 81F6 99 6A
 456+ 81F8 EF 6B 9B 6E                  dw           FETCH, CURRENT, FETCH, STORE
 456+ 81FC EF 6B FC 6B
 457+ 8200 B6 69                        dw      EXIT
 458+ 8202
 459+ 8202              //  ______________________________________________________________________
 460+ 8202              //
 461+ 8202              // spaces       n --
 462+ 8202                              Colon_Def SPACES, "SPACES", is_normal
 462+ 8202             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 462+ 8202             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 462+ 8202             >
 462+ 8202             >                // dummy db directives used to calculate length of namec
 462+ 8202 53 50 41 43 >                db      "SPACES"
 462+ 8206 45 53       >
 462+ 8208             >len_NFA         defl    $ - temp_NFA
 462+ 8208             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 462+ 8202             >
 462+ 8202 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 462+ 8203 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 462+ 8207 45 53       >
 462+ 8209             >                org     $-1                 // alter last byte of Name just above to set
 462+ 8208 D3          >                db      {b $} | END_BIT     // msb as name end
 462+ 8209             >
 462+ 8209 A1 81       >                dw      last_NFA            // Link to previous definition Name
 462+ 820B             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 462+ 820B E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 462+ 820D             >                else
 462+ 820D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 462+ 820D             >                endif           ; ok        // for other definitions it "points" the correct handler
 462+ 820D             >                // Use of "; ok" to suppress "warning[fwdref]"
 462+ 820D             >
 462+ 820D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 463+ 820D 5B 6D F0 6F                  dw      ZERO, MAX
 464+ 8211 5B 6D D9 64                  dw      ZERO, C_Q_DO
 465+ 8215 08 00                        dw      Spaces_Leave - $
 466+ 8217              Spaces_Loop:
 467+ 8217 3E 70                        dw          SPACE
 468+ 8219 94 64                        dw      C_LOOP
 469+ 821B FC FF                        dw      Spaces_Loop - $
 470+ 821D              Spaces_Leave:
 471+ 821D B6 69                        dw      EXIT                    // ;
 472+ 821F
 473+ 821F              //  ______________________________________________________________________
 474+ 821F              //
 475+ 821F              // <#           --
 476+ 821F                              Colon_Def BEGIN_DASH, "<#", is_normal
 476+ 821F             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 476+ 821F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 476+ 821F             >
 476+ 821F             >                // dummy db directives used to calculate length of namec
 476+ 821F 3C 23       >                db      "<#"
 476+ 8221             >len_NFA         defl    $ - temp_NFA
 476+ 8221             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 476+ 821F             >
 476+ 821F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 476+ 8220 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 476+ 8222             >                org     $-1                 // alter last byte of Name just above to set
 476+ 8221 A3          >                db      {b $} | END_BIT     // msb as name end
 476+ 8222             >
 476+ 8222 02 82       >                dw      last_NFA            // Link to previous definition Name
 476+ 8224             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 476+ 8224 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 476+ 8226             >                else
 476+ 8226 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 476+ 8226             >                endif           ; ok        // for other definitions it "points" the correct handler
 476+ 8226             >                // Use of "; ok" to suppress "warning[fwdref]"
 476+ 8226             >
 476+ 8226             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 477+ 8226 02 74 DC 6E                  dw      PAD, HLD, STORE
 477+ 822A FC 6B
 478+ 822C B6 69                        dw      EXIT
 479+ 822E
 480+ 822E              //  ______________________________________________________________________
 481+ 822E              //
 482+ 822E              // #>           --
 483+ 822E                              Colon_Def DASH_END, "#>", is_normal
 483+ 822E             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 483+ 822E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 483+ 822E             >
 483+ 822E             >                // dummy db directives used to calculate length of namec
 483+ 822E 23 3E       >                db      "#>"
 483+ 8230             >len_NFA         defl    $ - temp_NFA
 483+ 8230             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 483+ 822E             >
 483+ 822E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 483+ 822F 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 483+ 8231             >                org     $-1                 // alter last byte of Name just above to set
 483+ 8230 BE          >                db      {b $} | END_BIT     // msb as name end
 483+ 8231             >
 483+ 8231 1F 82       >                dw      last_NFA            // Link to previous definition Name
 483+ 8233             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 483+ 8233 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 483+ 8235             >                else
 483+ 8235 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 483+ 8235             >                endif           ; ok        // for other definitions it "points" the correct handler
 483+ 8235             >                // Use of "; ok" to suppress "warning[fwdref]"
 483+ 8235             >
 483+ 8235             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 484+ 8235 75 6B                        dw      TWO_DROP
 485+ 8237 DC 6E EF 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 485+ 823B 02 74 E6 6A
 485+ 823F 81 6F
 486+ 8241 B6 69                        dw      EXIT
 487+ 8243
 488+ 8243              //  ______________________________________________________________________
 489+ 8243              //
 490+ 8243              // sign         n d -- d
 491+ 8243                              Colon_Def SIGN, "SIGN", is_normal
 491+ 8243             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 491+ 8243             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 491+ 8243             >
 491+ 8243             >                // dummy db directives used to calculate length of namec
 491+ 8243 53 49 47 4E >                db      "SIGN"
 491+ 8247             >len_NFA         defl    $ - temp_NFA
 491+ 8247             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 491+ 8243             >
 491+ 8243 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 491+ 8244 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 491+ 8248             >                org     $-1                 // alter last byte of Name just above to set
 491+ 8247 CE          >                db      {b $} | END_BIT     // msb as name end
 491+ 8248             >
 491+ 8248 2E 82       >                dw      last_NFA            // Link to previous definition Name
 491+ 824A             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 491+ 824A E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 491+ 824C             >                else
 491+ 824C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 491+ 824C             >                endif           ; ok        // for other definitions it "points" the correct handler
 491+ 824C             >                // Use of "; ok" to suppress "warning[fwdref]"
 491+ 824C             >
 491+ 824C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 492+ 824C 38 6B 20 6A                  dw      ROT, ZLESS
 493+ 8250 7F 64                        dw      ZBRANCH
 494+ 8252 08 00                        dw      Sign_Endif - $
 495+ 8254 45 64 2D 00                  dw          LIT, 45, HOLD
 495+ 8258 EC 73
 496+ 825A              Sign_Endif:
 497+ 825A B6 69                        dw      EXIT
 498+ 825C
 499+ 825C              //  ______________________________________________________________________
 500+ 825C              //
 501+ 825C              // #           d1 -- d2
 502+ 825C                              Colon_Def DASH, "#", is_normal
 502+ 825C             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 502+ 825C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 502+ 825C             >
 502+ 825C             >                // dummy db directives used to calculate length of namec
 502+ 825C 23          >                db      "#"
 502+ 825D             >len_NFA         defl    $ - temp_NFA
 502+ 825D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 502+ 825C             >
 502+ 825C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 502+ 825D 23          >                db      "#"               // name string in 7-bit ascii, but
 502+ 825E             >                org     $-1                 // alter last byte of Name just above to set
 502+ 825D A3          >                db      {b $} | END_BIT     // msb as name end
 502+ 825E             >
 502+ 825E 43 82       >                dw      last_NFA            // Link to previous definition Name
 502+ 8260             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 502+ 8260 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 502+ 8262             >                else
 502+ 8262 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 502+ 8262             >                endif           ; ok        // for other definitions it "points" the correct handler
 502+ 8262             >                // Use of "; ok" to suppress "warning[fwdref]"
 502+ 8262             >
 502+ 8262             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 503+ 8262 B0 6E EF 6B                  dw      BASE, FETCH, MDIV_MOD, ROT
 503+ 8266 5E 7A 38 6B
 504+ 826A 45 64 09 00                  dw      LIT, 9, OVER, LESS
 504+ 826E E6 6A B0 6F
 505+ 8272 7F 64                        dw      ZBRANCH
 506+ 8274 08 00                        dw      Dash_Endif - $
 507+ 8276 45 64 07 00                  dw          LIT, 7, PLUS
 507+ 827A 48 6A
 508+ 827C              Dash_Endif:
 509+ 827C
 510+ 827C 45 64 30 00                  dw      LIT, 48, PLUS, HOLD
 510+ 8280 48 6A EC 73
 511+ 8284 B6 69                        dw      EXIT
 512+ 8286
 513+ 8286              //  ______________________________________________________________________
 514+ 8286              //
 515+ 8286              // #s           d1 -- d2
 516+ 8286                              Colon_Def DASHES, "#S", is_normal
 516+ 8286             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 516+ 8286             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 516+ 8286             >
 516+ 8286             >                // dummy db directives used to calculate length of namec
 516+ 8286 23 53       >                db      "#S"
 516+ 8288             >len_NFA         defl    $ - temp_NFA
 516+ 8288             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 516+ 8286             >
 516+ 8286 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 516+ 8287 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 516+ 8289             >                org     $-1                 // alter last byte of Name just above to set
 516+ 8288 D3          >                db      {b $} | END_BIT     // msb as name end
 516+ 8289             >
 516+ 8289 5C 82       >                dw      last_NFA            // Link to previous definition Name
 516+ 828B             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 516+ 828B E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 516+ 828D             >                else
 516+ 828D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 516+ 828D             >                endif           ; ok        // for other definitions it "points" the correct handler
 516+ 828D             >                // Use of "; ok" to suppress "warning[fwdref]"
 516+ 828D             >
 516+ 828D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 517+ 828D              Dashes_Begin:
 518+ 828D 60 82 95 6B                  dw      DASH, TWO_DUP
 519+ 8291 5A 69 0D 6A                  dw          OR_OP, ZEQUAL
 520+ 8295 7F 64                        dw      ZBRANCH
 521+ 8297 F6 FF                        dw      Dashes_Begin - $
 522+ 8299 B6 69                        dw      EXIT
 523+ 829B
 524+ 829B              //  ______________________________________________________________________
 525+ 829B              //
 526+ 829B              // d.r          d n --
 527+ 829B                              Colon_Def D_DOT_R, "D.R", is_normal
 527+ 829B             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 527+ 829B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 527+ 829B             >
 527+ 829B             >                // dummy db directives used to calculate length of namec
 527+ 829B 44 2E 52    >                db      "D.R"
 527+ 829E             >len_NFA         defl    $ - temp_NFA
 527+ 829E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 527+ 829B             >
 527+ 829B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 527+ 829C 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 527+ 829F             >                org     $-1                 // alter last byte of Name just above to set
 527+ 829E D2          >                db      {b $} | END_BIT     // msb as name end
 527+ 829F             >
 527+ 829F 86 82       >                dw      last_NFA            // Link to previous definition Name
 527+ 82A1             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 527+ 82A1 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 527+ 82A3             >                else
 527+ 82A3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 527+ 82A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 527+ 82A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 527+ 82A3             >
 527+ 82A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 528+ 82A3 DF 69                        dw      TO_R
 529+ 82A5 1E 6B E6 6A                  dw      SWAP, OVER, DABS
 529+ 82A9 B2 79
 530+ 82AB 24 82 8B 82                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 530+ 82AF 4A 82 33 82
 531+ 82B3 F3 69                        dw      R_TO
 532+ 82B5 E6 6A 81 6F                  dw      OVER, SUBTRACT, SPACES, TYPE
 532+ 82B9 0B 82 92 72
 533+ 82BD B6 69                        dw      EXIT
 534+ 82BF
 535+ 82BF              //  ______________________________________________________________________
 536+ 82BF              //
 537+ 82BF              // .r           n1 n2 --
 538+ 82BF                              Colon_Def DOT_R, ".R", is_normal
 538+ 82BF             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 538+ 82BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 538+ 82BF             >
 538+ 82BF             >                // dummy db directives used to calculate length of namec
 538+ 82BF 2E 52       >                db      ".R"
 538+ 82C1             >len_NFA         defl    $ - temp_NFA
 538+ 82C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 538+ 82BF             >
 538+ 82BF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 538+ 82C0 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 538+ 82C2             >                org     $-1                 // alter last byte of Name just above to set
 538+ 82C1 D2          >                db      {b $} | END_BIT     // msb as name end
 538+ 82C2             >
 538+ 82C2 9B 82       >                dw      last_NFA            // Link to previous definition Name
 538+ 82C4             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 538+ 82C4 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 538+ 82C6             >                else
 538+ 82C6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 538+ 82C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 538+ 82C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 538+ 82C6             >
 538+ 82C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 539+ 82C6 DF 69                        dw      TO_R
 540+ 82C8 6D 6F F3 69                  dw      S_TO_D, R_TO
 541+ 82CC A1 82                        dw      D_DOT_R
 542+ 82CE B6 69                        dw      EXIT
 543+ 82D0
 544+ 82D0              //  ______________________________________________________________________
 545+ 82D0              //
 546+ 82D0              // d.           d --
 547+ 82D0                              Colon_Def D_DOT, "D.", is_normal
 547+ 82D0             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 547+ 82D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 547+ 82D0             >
 547+ 82D0             >                // dummy db directives used to calculate length of namec
 547+ 82D0 44 2E       >                db      "D."
 547+ 82D2             >len_NFA         defl    $ - temp_NFA
 547+ 82D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 547+ 82D0             >
 547+ 82D0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 547+ 82D1 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 547+ 82D3             >                org     $-1                 // alter last byte of Name just above to set
 547+ 82D2 AE          >                db      {b $} | END_BIT     // msb as name end
 547+ 82D3             >
 547+ 82D3 BF 82       >                dw      last_NFA            // Link to previous definition Name
 547+ 82D5             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 547+ 82D5 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 547+ 82D7             >                else
 547+ 82D7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 547+ 82D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 547+ 82D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 547+ 82D7             >
 547+ 82D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 548+ 82D7 5B 6D A1 82                  dw      ZERO, D_DOT_R, SPACE
 548+ 82DB 3E 70
 549+ 82DD B6 69                        dw      EXIT
 550+ 82DF
 551+ 82DF              //  ______________________________________________________________________
 552+ 82DF              //
 553+ 82DF              // .            n --
 554+ 82DF                              Colon_Def DOT, ".", is_normal
 554+ 82DF             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 554+ 82DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 554+ 82DF             >
 554+ 82DF             >                // dummy db directives used to calculate length of namec
 554+ 82DF 2E          >                db      "."
 554+ 82E0             >len_NFA         defl    $ - temp_NFA
 554+ 82E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 554+ 82DF             >
 554+ 82DF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 554+ 82E0 2E          >                db      "."               // name string in 7-bit ascii, but
 554+ 82E1             >                org     $-1                 // alter last byte of Name just above to set
 554+ 82E0 AE          >                db      {b $} | END_BIT     // msb as name end
 554+ 82E1             >
 554+ 82E1 D0 82       >                dw      last_NFA            // Link to previous definition Name
 554+ 82E3             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 554+ 82E3 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 554+ 82E5             >                else
 554+ 82E5 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 554+ 82E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 554+ 82E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 554+ 82E5             >
 554+ 82E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 555+ 82E5 6D 6F D5 82                  dw      S_TO_D, D_DOT
 556+ 82E9 B6 69                        dw      EXIT
 557+ 82EB
 558+ 82EB              //  ______________________________________________________________________
 559+ 82EB              //
 560+ 82EB              // ?            n --
 561+ 82EB                              Colon_Def QUESTION, "?", is_normal
 561+ 82EB             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 561+ 82EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 561+ 82EB             >
 561+ 82EB             >                // dummy db directives used to calculate length of namec
 561+ 82EB 3F          >                db      "?"
 561+ 82EC             >len_NFA         defl    $ - temp_NFA
 561+ 82EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 561+ 82EB             >
 561+ 82EB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 561+ 82EC 3F          >                db      "?"               // name string in 7-bit ascii, but
 561+ 82ED             >                org     $-1                 // alter last byte of Name just above to set
 561+ 82EC BF          >                db      {b $} | END_BIT     // msb as name end
 561+ 82ED             >
 561+ 82ED DF 82       >                dw      last_NFA            // Link to previous definition Name
 561+ 82EF             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 561+ 82EF E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 561+ 82F1             >                else
 561+ 82F1 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 561+ 82F1             >                endif           ; ok        // for other definitions it "points" the correct handler
 561+ 82F1             >                // Use of "; ok" to suppress "warning[fwdref]"
 561+ 82F1             >
 561+ 82F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 562+ 82F1 EF 6B E3 82                  dw      FETCH, DOT
 563+ 82F5 B6 69                        dw      EXIT
 564+ 82F7
 565+ 82F7              //  ______________________________________________________________________
 566+ 82F7              //
 567+ 82F7              // u.           u --
 568+ 82F7                              Colon_Def U_DOT, "U.", is_normal
 568+ 82F7             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 568+ 82F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 568+ 82F7             >
 568+ 82F7             >                // dummy db directives used to calculate length of namec
 568+ 82F7 55 2E       >                db      "U."
 568+ 82F9             >len_NFA         defl    $ - temp_NFA
 568+ 82F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 568+ 82F7             >
 568+ 82F7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 568+ 82F8 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 568+ 82FA             >                org     $-1                 // alter last byte of Name just above to set
 568+ 82F9 AE          >                db      {b $} | END_BIT     // msb as name end
 568+ 82FA             >
 568+ 82FA EB 82       >                dw      last_NFA            // Link to previous definition Name
 568+ 82FC             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 568+ 82FC E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 568+ 82FE             >                else
 568+ 82FE ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 568+ 82FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 568+ 82FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 568+ 82FE             >
 568+ 82FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 569+ 82FE 5B 6D D5 82                  dw      ZERO, D_DOT
 570+ 8302 B6 69                        dw      EXIT
 571+ 8304
 572+ 8304              //  ______________________________________________________________________
 573+ 8304              //
 574+ 8304              // words        --
 575+ 8304                              Colon_Def WORDS, "WORDS", is_normal
 575+ 8304             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 575+ 8304             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ 8304             >
 575+ 8304             >                // dummy db directives used to calculate length of namec
 575+ 8304 57 4F 52 44 >                db      "WORDS"
 575+ 8308 53          >
 575+ 8309             >len_NFA         defl    $ - temp_NFA
 575+ 8309             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ 8304             >
 575+ 8304 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ 8305 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 575+ 8309 53          >
 575+ 830A             >                org     $-1                 // alter last byte of Name just above to set
 575+ 8309 D3          >                db      {b $} | END_BIT     // msb as name end
 575+ 830A             >
 575+ 830A F7 82       >                dw      last_NFA            // Link to previous definition Name
 575+ 830C             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 830C E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 575+ 830E             >                else
 575+ 830E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 575+ 830E             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 830E             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 830E             >
 575+ 830E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 830E 45 64 80 00                  dw      LIT, 128, OUT, STORE
 576+ 8312 6C 6E FC 6B
 577+ 8316 8E 6E EF 6B                  dw      CONTEXT, FETCH, FETCH
 577+ 831A EF 6B
 578+ 831C              Words_Begin:
 579+ 831C 2B 6B 0A 6C                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 579+ 8320 45 64 1F 00
 579+ 8324 48 69
 580+ 8326 6C 6E EF 6B                  dw          OUT, FETCH, PLUS
 580+ 832A 48 6A
 581+ 832C 8F 6D B0 6F                  dw          CL, LESS, ZEQUAL
 581+ 8330 0D 6A
 582+ 8332 7F 64                        dw          ZBRANCH
 583+ 8334 0A 00                        dw          Words_Endif - $
 584+ 8336 9E 68 5B 6D                  dw              CR, ZERO, OUT, STORE
 584+ 833A 6C 6E FC 6B
 585+ 833E              Words_Endif:
 586+ 833E 2B 6B 38 76                  dw          DUP, ID_DOT
 587+ 8342 B2 70 84 70                  dw          PFA, LFA, FETCH
 587+ 8346 EF 6B
 588+ 8348 2B 6B 0D 6A                  dw          DUP, ZEQUAL
 589+ 834C A8 67 5A 69                  dw          QTERMINAL, OR_OP
 590+ 8350 7F 64                        dw      ZBRANCH
 591+ 8352 CA FF                        dw      Words_Begin - $
 592+ 8354 F6 6A                        dw      DROP
 593+ 8356 B6 69                        dw      EXIT
 594+ 8358
 595+ 8358              //  ______________________________________________________________________
 596+ 8358              //
 597+ 8358              // list         n --
 598+ 8358                              Colon_Def LIST, "LIST", is_normal
 598+ 8358             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 598+ 8358             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 598+ 8358             >
 598+ 8358             >                // dummy db directives used to calculate length of namec
 598+ 8358 4C 49 53 54 >                db      "LIST"
 598+ 835C             >len_NFA         defl    $ - temp_NFA
 598+ 835C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 598+ 8358             >
 598+ 8358 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 598+ 8359 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 598+ 835D             >                org     $-1                 // alter last byte of Name just above to set
 598+ 835C D4          >                db      {b $} | END_BIT     // msb as name end
 598+ 835D             >
 598+ 835D 04 83       >                dw      last_NFA            // Link to previous definition Name
 598+ 835F             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 598+ 835F E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 598+ 8361             >                else
 598+ 8361 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 598+ 8361             >                endif           ; ok        // for other definitions it "points" the correct handler
 598+ 8361             >                // Use of "; ok" to suppress "warning[fwdref]"
 598+ 8361             >
 598+ 8361             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 599+ 8361 04 72 9E 68                  dw      DECIMAL, CR
 600+ 8365 2B 6B 75 6E                  dw      DUP, SCR, STORE
 600+ 8369 FC 6B
 601+ 836B 64 74                        dw      C_DOT_QUOTE
 602+ 836D 05 53 63 72                  db      5, "Scr# "
 602+ 8371 23 20
 603+ 8373 E3 82                        dw      DOT
 604+ 8375 B3 6D 5B 6D                  dw      LSCR, ZERO, C_DO
 604+ 8379 07 65
 605+ 837B              List_Loop:
 606+ 837B 9E 68                        dw          CR
 607+ 837D 12 65 73 6D                  dw          I, THREE
 608+ 8381 C4 82 3E 70                  dw          DOT_R, SPACE
 609+ 8385 12 65 75 6E                  dw          I, SCR, FETCH, DOT_LINE
 609+ 8389 EF 6B A3 7A
 610+ 838D A8 67                        dw          QTERMINAL
 611+ 838F 7F 64                        dw          ZBRANCH
 612+ 8391 04 00                        dw          List_Endif - $
 613+ 8393 CC 69                        dw              LEAVE
 614+ 8395              List_Endif:
 615+ 8395 94 64                        dw      C_LOOP
 616+ 8397 E4 FF                        dw      List_Loop - $
 617+ 8399 9E 68                        dw      CR
 618+ 839B B6 69                        dw      EXIT
 619+ 839D
 620+ 839D              //  ______________________________________________________________________
 621+ 839D              //
 622+ 839D              // index        n1 n2 --
 623+ 839D                              Colon_Def INDEX, "INDEX", is_normal
 623+ 839D             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 623+ 839D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 623+ 839D             >
 623+ 839D             >                // dummy db directives used to calculate length of namec
 623+ 839D 49 4E 44 45 >                db      "INDEX"
 623+ 83A1 58          >
 623+ 83A2             >len_NFA         defl    $ - temp_NFA
 623+ 83A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 623+ 839D             >
 623+ 839D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 623+ 839E 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 623+ 83A2 58          >
 623+ 83A3             >                org     $-1                 // alter last byte of Name just above to set
 623+ 83A2 D8          >                db      {b $} | END_BIT     // msb as name end
 623+ 83A3             >
 623+ 83A3 58 83       >                dw      last_NFA            // Link to previous definition Name
 623+ 83A5             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 623+ 83A5 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 623+ 83A7             >                else
 623+ 83A7 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 623+ 83A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 623+ 83A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 623+ 83A7             >
 623+ 83A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 624+ 83A7 71 6A 1E 6B                  dw      ONE_PLUS, SWAP, C_DO
 624+ 83AB 07 65
 625+ 83AD              Index_Loop:
 626+ 83AD 9E 68 12 65                  dw          CR, I, THREE
 626+ 83B1 73 6D
 627+ 83B3 C4 82 3E 70                  dw          DOT_R, SPACE
 628+ 83B7 5B 6D 12 65                  dw          ZERO, I, DOT_LINE
 628+ 83BB A3 7A
 629+ 83BD A8 67                        dw          QTERMINAL
 630+ 83BF 7F 64                        dw          ZBRANCH
 631+ 83C1 04 00                        dw          Index_Endif - $
 632+ 83C3 CC 69                        dw              LEAVE
 633+ 83C5              Index_Endif:
 634+ 83C5 94 64                        dw      C_LOOP
 635+ 83C7 E6 FF                        dw      Index_Loop - $
 636+ 83C9 B6 69                        dw      EXIT
 637+ 83CB
 638+ 83CB              //  ______________________________________________________________________
 639+ 83CB              //
 640+ 83CB              // cls          --
 641+ 83CB                              Colon_Def CLS, "CLS", is_normal
 641+ 83CB             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 641+ 83CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 641+ 83CB             >
 641+ 83CB             >                // dummy db directives used to calculate length of namec
 641+ 83CB 43 4C 53    >                db      "CLS"
 641+ 83CE             >len_NFA         defl    $ - temp_NFA
 641+ 83CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 641+ 83CB             >
 641+ 83CB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 641+ 83CC 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 641+ 83CF             >                org     $-1                 // alter last byte of Name just above to set
 641+ 83CE D3          >                db      {b $} | END_BIT     // msb as name end
 641+ 83CF             >
 641+ 83CF 9D 83       >                dw      last_NFA            // Link to previous definition Name
 641+ 83D1             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 641+ 83D1 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 641+ 83D3             >                else
 641+ 83D3 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 641+ 83D3             >                endif           ; ok        // for other definitions it "points" the correct handler
 641+ 83D3             >                // Use of "; ok" to suppress "warning[fwdref]"
 641+ 83D3             >
 641+ 83D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 642+ 83D3 45 64 0E 00                  dw      LIT, $0E, EMITC
 642+ 83D7 87 66
 643+ 83D9 B6 69                        dw      EXIT
 644+ 83DB
 645+ 83DB              //  ______________________________________________________________________
 646+ 83DB              //
 647+ 83DB              // splash       --
 648+ 83DB                              Colon_Def SPLASH, "SPLASH", is_normal
 648+ 83DB             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 648+ 83DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 648+ 83DB             >
 648+ 83DB             >                // dummy db directives used to calculate length of namec
 648+ 83DB 53 50 4C 41 >                db      "SPLASH"
 648+ 83DF 53 48       >
 648+ 83E1             >len_NFA         defl    $ - temp_NFA
 648+ 83E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 648+ 83DB             >
 648+ 83DB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 648+ 83DC 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 648+ 83E0 53 48       >
 648+ 83E2             >                org     $-1                 // alter last byte of Name just above to set
 648+ 83E1 C8          >                db      {b $} | END_BIT     // msb as name end
 648+ 83E2             >
 648+ 83E2 CB 83       >                dw      last_NFA            // Link to previous definition Name
 648+ 83E4             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 648+ 83E4 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 648+ 83E6             >                else
 648+ 83E6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 648+ 83E6             >                endif           ; ok        // for other definitions it "points" the correct handler
 648+ 83E6             >                // Use of "; ok" to suppress "warning[fwdref]"
 648+ 83E6             >
 648+ 83E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 649+ 83E6 D1 83                        dw      CLS
 650+ 83E8 64 74                        dw      C_DOT_QUOTE
 651+ 83EA 45                           db      69
 652+ 83EB 76 2D 46 6F                  db      "v-Forth 1.5 NextZXOS version", 13
 652+ 83EF 72 74 68 20
 652+ 83F3 31 2E 35 20
 652+ 83F7 4E 65 78 74
 652+ 83FB 5A 58 4F 53
 652+ 83FF 20 76 65 72
 652+ 8403 73 69 6F 6E
 652+ 8407 0D
 653+ 8408 62 75 69 6C                  db      "build 20210430", 13
 653+ 840C 64 20 32 30
 653+ 8410 32 31 30 34
 653+ 8414 33 30 0D
 654+ 8417 31 39 39 30                  db      "1990-2021 Matteo Vitturi", 13
 654+ 841B 2D 32 30 32
 654+ 841F 31 20 4D 61
 654+ 8423 74 74 65 6F
 654+ 8427 20 56 69 74
 654+ 842B 74 75 72 69
 654+ 842F 0D
 655+ 8430 B6 69                        dw      EXIT
 656+ 8432
 657+ 8432              //  ______________________________________________________________________
 658+ 8432              //
 659+ 8432              // video        --
 660+ 8432                              Colon_Def VIDEO, "VIDEO", is_normal
 660+ 8432             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 660+ 8432             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 660+ 8432             >
 660+ 8432             >                // dummy db directives used to calculate length of namec
 660+ 8432 56 49 44 45 >                db      "VIDEO"
 660+ 8436 4F          >
 660+ 8437             >len_NFA         defl    $ - temp_NFA
 660+ 8437             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 660+ 8432             >
 660+ 8432 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 660+ 8433 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 660+ 8437 4F          >
 660+ 8438             >                org     $-1                 // alter last byte of Name just above to set
 660+ 8437 CF          >                db      {b $} | END_BIT     // msb as name end
 660+ 8438             >
 660+ 8438 DB 83       >                dw      last_NFA            // Link to previous definition Name
 660+ 843A             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 660+ 843A E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 660+ 843C             >                else
 660+ 843C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 660+ 843C             >                endif           ; ok        // for other definitions it "points" the correct handler
 660+ 843C             >                // Use of "; ok" to suppress "warning[fwdref]"
 660+ 843C             >
 660+ 843C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 661+ 843C 6B 6D 2B 6B                  dw      TWO, DUP, DEVICE, STORE
 661+ 8440 EB 7A FC 6B
 662+ 8444 1C 7B                        dw      SELECT
 663+ 8446 B6 69                        dw      EXIT
 664+ 8448
 665+ 8448              //  ______________________________________________________________________
 666+ 8448              //
 667+ 8448              // accept-      a n1 -- n2
 668+ 8448                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 668+ 8448             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 668+ 8448             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 668+ 8448             >
 668+ 8448             >                // dummy db directives used to calculate length of namec
 668+ 8448 41 43 43 45 >                db      "ACCEPT-"
 668+ 844C 50 54 2D    >
 668+ 844F             >len_NFA         defl    $ - temp_NFA
 668+ 844F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 668+ 8448             >
 668+ 8448 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 668+ 8449 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 668+ 844D 50 54 2D    >
 668+ 8450             >                org     $-1                 // alter last byte of Name just above to set
 668+ 844F AD          >                db      {b $} | END_BIT     // msb as name end
 668+ 8450             >
 668+ 8450 32 84       >                dw      last_NFA            // Link to previous definition Name
 668+ 8452             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 668+ 8452 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 668+ 8454             >                else
 668+ 8454 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 668+ 8454             >                endif           ; ok        // for other definitions it "points" the correct handler
 668+ 8454             >                // Use of "; ok" to suppress "warning[fwdref]"
 668+ 8454             >
 668+ 8454             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 669+ 8454 DF 69                        dw      TO_R
 670+ 8456 5B 6D                        dw      ZERO
 671+ 8458 1E 6B                        dw      SWAP
 672+ 845A 2B 6B                        dw      DUP
 673+ 845C F3 69                        dw      R_TO
 674+ 845E 48 6A                        dw      PLUS
 675+ 8460 1E 6B                        dw      SWAP
 676+ 8462 07 65                        dw      C_DO
 677+ 8464              AcceptN_Loop:
 678+ 8464 6C 7B                        dw          MMU7_FETCH
 679+ 8466 F7 7A                        dw          INKEY
 680+ 8468 1E 6B 7E 7B                  dw          SWAP, MMU7_STORE
 681+ 846C 2B 6B 0D 6A                  dw          DUP, ZEQUAL
 682+ 8470 7F 64                        dw          ZBRANCH
 683+ 8472 06 00                        dw          AcceptN_Endif_1 - $
 684+ 8474 3A 84 83 78                  dw              VIDEO, QUIT
 685+ 8478              AcceptN_Endif_1:
 686+ 8478 2B 6B 45 64                  dw          DUP, LIT, 13, EQUALS
 686+ 847C 0D 00 8F 6F
 687+ 8480 7F 64                        dw          ZBRANCH
 688+ 8482 06 00                        dw          AcceptN_Endif_2 - $
 689+ 8484 F6 6A 5B 6D                  dw              DROP, ZERO
 690+ 8488              AcceptN_Endif_2:
 691+ 8488 2B 6B 45 64                  dw          DUP, LIT, 10, EQUALS
 691+ 848C 0A 00 8F 6F
 692+ 8490 7F 64                        dw          ZBRANCH
 693+ 8492 06 00                        dw          AcceptN_Endif_3 - $
 694+ 8494 F6 6A 5B 6D                  dw              DROP, ZERO
 695+ 8498              AcceptN_Endif_3:
 696+ 8498 2B 6B 0D 6A                  dw          DUP, ZEQUAL
 697+ 849C 7F 64                        dw          ZBRANCH
 698+ 849E 04 00                        dw          AcceptN_Endif_4 - $
 699+ 84A0 CC 69                        dw              LEAVE
 700+ 84A2              AcceptN_Endif_4:
 701+ 84A2 12 65 18 6C                  dw          I, CSTORE, ONE_PLUS
 701+ 84A6 71 6A
 702+ 84A8 94 64                        dw      C_LOOP
 703+ 84AA BA FF                        dw      AcceptN_Loop -$
 704+ 84AC B6 69                        dw      EXIT
 705+ 84AE
 706+ 84AE              //  ______________________________________________________________________
 707+ 84AE              //
 708+ 84AE              // load-        n --
 709+ 84AE              // Provided that a stream n is OPEN# via the standart BASIC
 710+ 84AE              // it accepts text from stream #n to the normal INTERPRET
 711+ 84AE              // up to now, text-file must end with QUIT
 712+ 84AE                              Colon_Def LOAD_N, "LOAD-", is_normal
 712+ 84AE             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 712+ 84AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 712+ 84AE             >
 712+ 84AE             >                // dummy db directives used to calculate length of namec
 712+ 84AE 4C 4F 41 44 >                db      "LOAD-"
 712+ 84B2 2D          >
 712+ 84B3             >len_NFA         defl    $ - temp_NFA
 712+ 84B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 712+ 84AE             >
 712+ 84AE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 712+ 84AF 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 712+ 84B3 2D          >
 712+ 84B4             >                org     $-1                 // alter last byte of Name just above to set
 712+ 84B3 AD          >                db      {b $} | END_BIT     // msb as name end
 712+ 84B4             >
 712+ 84B4 48 84       >                dw      last_NFA            // Link to previous definition Name
 712+ 84B6             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 712+ 84B6 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 712+ 84B8             >                else
 712+ 84B8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 712+ 84B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 712+ 84B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 712+ 84B8             >
 712+ 84B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 713+ 84B8 11 6F FC 6B                  dw      SOURCE_ID, STORE
 714+ 84BC              Load_N_Begin:
 715+ 84BC EE 6D EF 6B                  dw          TIB, FETCH
 716+ 84C0 2B 6B 45 64                  dw          DUP, LIT, 80
 716+ 84C4 50 00
 717+ 84C6 95 6B DD 73                  dw          TWO_DUP, BLANKS
 718+ 84CA 11 6F EF 6B                  dw          SOURCE_ID, FETCH
 719+ 84CE A3 79 2B 6B                  dw          ABS_OP, DUP, DEVICE, STORE
 719+ 84D2 EB 7A FC 6B
 720+ 84D6 1C 7B                        dw          SELECT
 721+ 84D8 52 84                        dw          ACCEPT_N
 722+ 84DA 3A 84                        dw          VIDEO
 723+ 84DC 75 6B                        dw          TWO_DROP
 724+ 84DE 5B 6D 5A 6E                  dw          ZERO, BLK, STORE
 724+ 84E2 FC 6B
 725+ 84E4 5B 6D 63 6E                  dw          ZERO, TO_IN, STORE
 725+ 84E8 FC 6B
 726+ 84EA B5 77                        dw          INTERPRET
 727+ 84EC A8 67                        dw          QTERMINAL
 728+ 84EE 7F 64                        dw      ZBRANCH
 729+ 84F0 CC FF                        dw      Load_N_Begin - $
 730+ 84F2 B6 69                        dw      EXIT
 731+ 84F4
 732+ 84F4              //  ______________________________________________________________________
 733+ 84F4              //
 734+ 84F4              // load         n --
 735+ 84F4              // if n is positive, it loads screen #n (as usual)
 736+ 84F4              // if n is negative, it connects stream #n to the normal INTERPRET
 737+ 84F4              // this second way is useful if you want to load any kind of file
 738+ 84F4              // provied that it is OPEN# the usual BASIC way.
 739+ 84F4                              Colon_Def LOAD, "LOAD", is_normal
 739+ 84F4             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 739+ 84F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 739+ 84F4             >
 739+ 84F4             >                // dummy db directives used to calculate length of namec
 739+ 84F4 4C 4F 41 44 >                db      "LOAD"
 739+ 84F8             >len_NFA         defl    $ - temp_NFA
 739+ 84F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 739+ 84F4             >
 739+ 84F4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 739+ 84F5 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 739+ 84F9             >                org     $-1                 // alter last byte of Name just above to set
 739+ 84F8 C4          >                db      {b $} | END_BIT     // msb as name end
 739+ 84F9             >
 739+ 84F9 AE 84       >                dw      last_NFA            // Link to previous definition Name
 739+ 84FB             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 739+ 84FB E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 739+ 84FD             >                else
 739+ 84FD ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 739+ 84FD             >                endif           ; ok        // for other definitions it "points" the correct handler
 739+ 84FD             >                // Use of "; ok" to suppress "warning[fwdref]"
 739+ 84FD             >
 739+ 84FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 740+ 84FD 2B 6B 20 6A                  dw      DUP, ZLESS
 741+ 8501 7F 64                        dw      ZBRANCH
 742+ 8503 08 00                        dw      Load_Else - $
 743+ 8505 B6 84                        dw          LOAD_N
 744+ 8507 68 64                        dw      BRANCH
 745+ 8509 04 00                        dw      Load_Endif - $
 746+ 850B              Load_Else:
 747+ 850B 00 81                        dw          LOAD_P
 748+ 850D              Load_Endif:
 749+ 850D B6 69                        dw      EXIT
 750+ 850F
 751+ 850F
 752+ 850F              //  ______________________________________________________________________
 753+ 850F              //
 754+ 850F              // autoexec     --
 755+ 850F              // this word is called the first time the Forth system boot to
 756+ 850F              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 757+ 850F                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 757+ 850F             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 757+ 850F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 757+ 850F             >
 757+ 850F             >                // dummy db directives used to calculate length of namec
 757+ 850F 41 55 54 4F >                db      "AUTOEXEC"
 757+ 8513 45 58 45 43 >
 757+ 8517             >len_NFA         defl    $ - temp_NFA
 757+ 8517             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 757+ 850F             >
 757+ 850F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 757+ 8510 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 757+ 8514 45 58 45 43 >
 757+ 8518             >                org     $-1                 // alter last byte of Name just above to set
 757+ 8517 C3          >                db      {b $} | END_BIT     // msb as name end
 757+ 8518             >
 757+ 8518 F4 84       >                dw      last_NFA            // Link to previous definition Name
 757+ 851A             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 757+ 851A E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 757+ 851C             >                else
 757+ 851C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 757+ 851C             >                endif           ; ok        // for other definitions it "points" the correct handler
 757+ 851C             >                // Use of "; ok" to suppress "warning[fwdref]"
 757+ 851C             >
 757+ 851C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 758+ 851C 45 64 0B 00                  dw      LIT, 11
 759+ 8520 45 64 08 6D                  dw      LIT, NOOP
 760+ 8524 45 64 D2 78                  dw      LIT, Autoexec_Ptr
 761+ 8528 FC 6B                        dw      STORE
 762+ 852A FB 84                        dw      LOAD
 763+ 852C 83 78                        dw      QUIT
 764+ 852E B6 69                        dw      EXIT
 765+ 8530
 766+ 8530
 767+ 8530              //  ______________________________________________________________________
 768+ 8530              //
 769+ 8530              // bye     --
 770+ 8530              //
 771+ 8530                              Colon_Def BYE, "BYE", is_normal
 771+ 8530             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 771+ 8530             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 771+ 8530             >
 771+ 8530             >                // dummy db directives used to calculate length of namec
 771+ 8530 42 59 45    >                db      "BYE"
 771+ 8533             >len_NFA         defl    $ - temp_NFA
 771+ 8533             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 771+ 8530             >
 771+ 8530 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 771+ 8531 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 771+ 8534             >                org     $-1                 // alter last byte of Name just above to set
 771+ 8533 C5          >                db      {b $} | END_BIT     // msb as name end
 771+ 8534             >
 771+ 8534 0F 85       >                dw      last_NFA            // Link to previous definition Name
 771+ 8536             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 771+ 8536 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 771+ 8538             >                else
 771+ 8538 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 771+ 8538             >                endif           ; ok        // for other definitions it "points" the correct handler
 771+ 8538             >                // Use of "; ok" to suppress "warning[fwdref]"
 771+ 8538             >
 771+ 8538             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 772+ 8538 F8 7D                        dw      FLUSH
 773+ 853A 29 7D                        dw      EMPTY_BUFFERS
 774+ 853C CD 7B EF 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 774+ 8540 4B 68 F6 6A
 775+ 8544 5B 6D C1 6D                  dw      ZERO, PLUS_ORIGIN
 776+ 8548 68 79                        dw      BASIC
 777+ 854A
 778+ 854A              //  ______________________________________________________________________
 779+ 854A              //
 780+ 854A              // invv     --
 781+ 854A              //
 782+ 854A                              Colon_Def INVV, "INVV", is_normal
 782+ 854A             >                New_Def  INVV, "INVV", Enter_Ptr, is_normal ; ok
 782+ 854A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 782+ 854A             >
 782+ 854A             >                // dummy db directives used to calculate length of namec
 782+ 854A 49 4E 56 56 >                db      "INVV"
 782+ 854E             >len_NFA         defl    $ - temp_NFA
 782+ 854E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 782+ 854A             >
 782+ 854A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 782+ 854B 49 4E 56 56 >                db      "INVV"               // name string in 7-bit ascii, but
 782+ 854F             >                org     $-1                 // alter last byte of Name just above to set
 782+ 854E D6          >                db      {b $} | END_BIT     // msb as name end
 782+ 854F             >
 782+ 854F 30 85       >                dw      last_NFA            // Link to previous definition Name
 782+ 8551             >INVV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 782+ 8551 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 782+ 8553             >                else
 782+ 8553 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 782+ 8553             >                endif           ; ok        // for other definitions it "points" the correct handler
 782+ 8553             >                // Use of "; ok" to suppress "warning[fwdref]"
 782+ 8553             >
 782+ 8553             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 783+ 8553 45 64 14 00                  dw      LIT, 20, EMITC, ONE, EMITC
 783+ 8557 87 66 63 6D
 783+ 855B 87 66
 784+ 855D B6 69                        dw      EXIT
 785+ 855F
 786+ 855F              //  ______________________________________________________________________
 787+ 855F              //
 788+ 855F              // truv     --
 789+ 855F              //
 790+ 855F                              Colon_Def TRUV, "TRUV", is_normal
 790+ 855F             >                New_Def  TRUV, "TRUV", Enter_Ptr, is_normal ; ok
 790+ 855F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 790+ 855F             >
 790+ 855F             >                // dummy db directives used to calculate length of namec
 790+ 855F 54 52 55 56 >                db      "TRUV"
 790+ 8563             >len_NFA         defl    $ - temp_NFA
 790+ 8563             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 790+ 855F             >
 790+ 855F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 790+ 8560 54 52 55 56 >                db      "TRUV"               // name string in 7-bit ascii, but
 790+ 8564             >                org     $-1                 // alter last byte of Name just above to set
 790+ 8563 D6          >                db      {b $} | END_BIT     // msb as name end
 790+ 8564             >
 790+ 8564 4A 85       >                dw      last_NFA            // Link to previous definition Name
 790+ 8566             >TRUV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 790+ 8566 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 790+ 8568             >                else
 790+ 8568 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 790+ 8568             >                endif           ; ok        // for other definitions it "points" the correct handler
 790+ 8568             >                // Use of "; ok" to suppress "warning[fwdref]"
 790+ 8568             >
 790+ 8568             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 791+ 8568 45 64 14 00                  dw      LIT, 20, EMITC, ZERO, EMITC
 791+ 856C 87 66 5B 6D
 791+ 8570 87 66
 792+ 8572 B6 69                        dw      EXIT
 793+ 8574
 794+ 8574              //  ______________________________________________________________________
 795+ 8574              //
 796+ 8574              // mark     --
 797+ 8574              //
 798+ 8574              //              Colon_Def MARK, "MARK", is_normal
 799+ 8574              //              dw      INVV, TYPE, TRUV
 800+ 8574              //              dw      EXIT
 801+ 8574
 802+ 8574              //  ______________________________________________________________________
 803+ 8574              //
 804+ 8574              // back     --
 805+ 8574              //
 806+ 8574                              Colon_Def BACK, "BACK", is_normal
 806+ 8574             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 806+ 8574             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 806+ 8574             >
 806+ 8574             >                // dummy db directives used to calculate length of namec
 806+ 8574 42 41 43 4B >                db      "BACK"
 806+ 8578             >len_NFA         defl    $ - temp_NFA
 806+ 8578             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 806+ 8574             >
 806+ 8574 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 806+ 8575 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 806+ 8579             >                org     $-1                 // alter last byte of Name just above to set
 806+ 8578 CB          >                db      {b $} | END_BIT     // msb as name end
 806+ 8579             >
 806+ 8579 5F 85       >                dw      last_NFA            // Link to previous definition Name
 806+ 857B             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 806+ 857B E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 806+ 857D             >                else
 806+ 857D ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 806+ 857D             >                endif           ; ok        // for other definitions it "points" the correct handler
 806+ 857D             >                // Use of "; ok" to suppress "warning[fwdref]"
 806+ 857D             >
 806+ 857D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 807+ 857D 2D 6F 81 6F                  dw      HERE, SUBTRACT, COMMA
 807+ 8581 49 6F
 808+ 8583 B6 69                        dw      EXIT
 809+ 8585
 810+ 8585              //  ______________________________________________________________________
 811+ 8585              //
 812+ 8585              // if          ( -- a 2 ) \ compile-time
 813+ 8585              // IF ... THEN
 814+ 8585              // IF ... ELSE ... ENDIF
 815+ 8585                              Colon_Def IF, "IF", is_immediate
 815+ 8585             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 815+ 8585             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 815+ 8585             >
 815+ 8585             >                // dummy db directives used to calculate length of namec
 815+ 8585 49 46       >                db      "IF"
 815+ 8587             >len_NFA         defl    $ - temp_NFA
 815+ 8587             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 815+ 8585             >
 815+ 8585 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 815+ 8586 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 815+ 8588             >                org     $-1                 // alter last byte of Name just above to set
 815+ 8587 C6          >                db      {b $} | END_BIT     // msb as name end
 815+ 8588             >
 815+ 8588 74 85       >                dw      last_NFA            // Link to previous definition Name
 815+ 858A             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 815+ 858A E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 815+ 858C             >                else
 815+ 858C ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 815+ 858C             >                endif           ; ok        // for other definitions it "points" the correct handler
 815+ 858C             >                // Use of "; ok" to suppress "warning[fwdref]"
 815+ 858C             >
 815+ 858C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 816+ 858C 8B 71 7F 64                  dw      COMPILE, ZBRANCH
 817+ 8590 2D 6F 5B 6D                  dw      HERE, ZERO, COMMA
 817+ 8594 49 6F
 818+ 8596 6B 6D                        dw      TWO
 819+ 8598 B6 69                        dw      EXIT
 820+ 859A
 821+ 859A              //  ______________________________________________________________________
 822+ 859A              //
 823+ 859A              // endif        ( a 2 -- ) \ compile-time
 824+ 859A              //
 825+ 859A                              Colon_Def ENDIF, "ENDIF", is_immediate
 825+ 859A             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 825+ 859A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 825+ 859A             >
 825+ 859A             >                // dummy db directives used to calculate length of namec
 825+ 859A 45 4E 44 49 >                db      "ENDIF"
 825+ 859E 46          >
 825+ 859F             >len_NFA         defl    $ - temp_NFA
 825+ 859F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 825+ 859A             >
 825+ 859A C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 825+ 859B 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 825+ 859F 46          >
 825+ 85A0             >                org     $-1                 // alter last byte of Name just above to set
 825+ 859F C6          >                db      {b $} | END_BIT     // msb as name end
 825+ 85A0             >
 825+ 85A0 85 85       >                dw      last_NFA            // Link to previous definition Name
 825+ 85A2             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 825+ 85A2 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 825+ 85A4             >                else
 825+ 85A4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 825+ 85A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 825+ 85A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 825+ 85A4             >
 825+ 85A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 826+ 85A4 12 71                        dw      QCOMP
 827+ 85A6 6B 6D 41 71                  dw      TWO, QPAIRS
 828+ 85AA 2D 6F E6 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 828+ 85AE 81 6F 1E 6B
 828+ 85B2 FC 6B
 829+ 85B4 B6 69                        dw      EXIT
 830+ 85B6
 831+ 85B6              //  ______________________________________________________________________
 832+ 85B6              //
 833+ 85B6              // then        ( a 2 -- ) \ compile-time
 834+ 85B6              //
 835+ 85B6                              Colon_Def THEN, "THEN", is_immediate
 835+ 85B6             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 835+ 85B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 835+ 85B6             >
 835+ 85B6             >                // dummy db directives used to calculate length of namec
 835+ 85B6 54 48 45 4E >                db      "THEN"
 835+ 85BA             >len_NFA         defl    $ - temp_NFA
 835+ 85BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 835+ 85B6             >
 835+ 85B6 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 835+ 85B7 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 835+ 85BB             >                org     $-1                 // alter last byte of Name just above to set
 835+ 85BA CE          >                db      {b $} | END_BIT     // msb as name end
 835+ 85BB             >
 835+ 85BB 9A 85       >                dw      last_NFA            // Link to previous definition Name
 835+ 85BD             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 835+ 85BD E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 835+ 85BF             >                else
 835+ 85BF ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 835+ 85BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 835+ 85BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 835+ 85BF             >
 835+ 85BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 836+ 85BF A2 85                        dw      ENDIF
 837+ 85C1 B6 69                        dw      EXIT
 838+ 85C3
 839+ 85C3              //  ______________________________________________________________________
 840+ 85C3              //
 841+ 85C3              // else        ( a1 2 -- a2 2 ) \ compile-time
 842+ 85C3              //
 843+ 85C3                              Colon_Def ELSE, "ELSE", is_immediate
 843+ 85C3             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 843+ 85C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 843+ 85C3             >
 843+ 85C3             >                // dummy db directives used to calculate length of namec
 843+ 85C3 45 4C 53 45 >                db      "ELSE"
 843+ 85C7             >len_NFA         defl    $ - temp_NFA
 843+ 85C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 843+ 85C3             >
 843+ 85C3 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 843+ 85C4 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 843+ 85C8             >                org     $-1                 // alter last byte of Name just above to set
 843+ 85C7 C5          >                db      {b $} | END_BIT     // msb as name end
 843+ 85C8             >
 843+ 85C8 B6 85       >                dw      last_NFA            // Link to previous definition Name
 843+ 85CA             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 843+ 85CA E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 843+ 85CC             >                else
 843+ 85CC ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 843+ 85CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 843+ 85CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 843+ 85CC             >
 843+ 85CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 844+ 85CC 12 71                        dw      QCOMP
 845+ 85CE 6B 6D 41 71                  dw      TWO, QPAIRS
 846+ 85D2 8B 71 68 64                  dw      COMPILE, BRANCH
 847+ 85D6 2D 6F 5B 6D                  dw      HERE, ZERO, COMMA
 847+ 85DA 49 6F
 848+ 85DC 1E 6B 6B 6D                  dw      SWAP, TWO, ENDIF
 848+ 85E0 A2 85
 849+ 85E2 6B 6D                        dw      TWO
 850+ 85E4 B6 69                        dw      EXIT
 851+ 85E6
 852+ 85E6              //  ______________________________________________________________________
 853+ 85E6              //
 854+ 85E6              // begin        ( -- a 1 ) \ compile-time
 855+ 85E6              // BEGIN ... AGAIN
 856+ 85E6              // BEGIN ... f UNTIL
 857+ 85E6              // BEGIN ... f WHILE ... REPEAT
 858+ 85E6                              Colon_Def BEGIN, "BEGIN", is_immediate
 858+ 85E6             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 858+ 85E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 858+ 85E6             >
 858+ 85E6             >                // dummy db directives used to calculate length of namec
 858+ 85E6 42 45 47 49 >                db      "BEGIN"
 858+ 85EA 4E          >
 858+ 85EB             >len_NFA         defl    $ - temp_NFA
 858+ 85EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 858+ 85E6             >
 858+ 85E6 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 858+ 85E7 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 858+ 85EB 4E          >
 858+ 85EC             >                org     $-1                 // alter last byte of Name just above to set
 858+ 85EB CE          >                db      {b $} | END_BIT     // msb as name end
 858+ 85EC             >
 858+ 85EC C3 85       >                dw      last_NFA            // Link to previous definition Name
 858+ 85EE             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 858+ 85EE E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 858+ 85F0             >                else
 858+ 85F0 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 858+ 85F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 858+ 85F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 858+ 85F0             >
 858+ 85F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 859+ 85F0 12 71                        dw      QCOMP
 860+ 85F2 2D 6F                        dw      HERE
 861+ 85F4 63 6D                        dw      ONE
 862+ 85F6 B6 69                        dw      EXIT
 863+ 85F8
 864+ 85F8              //  ______________________________________________________________________
 865+ 85F8              //
 866+ 85F8              // again        ( a 1 -- ) \ compile-time
 867+ 85F8                              Colon_Def AGAIN, "AGAIN", is_immediate
 867+ 85F8             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 867+ 85F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 867+ 85F8             >
 867+ 85F8             >                // dummy db directives used to calculate length of namec
 867+ 85F8 41 47 41 49 >                db      "AGAIN"
 867+ 85FC 4E          >
 867+ 85FD             >len_NFA         defl    $ - temp_NFA
 867+ 85FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 867+ 85F8             >
 867+ 85F8 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 867+ 85F9 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 867+ 85FD 4E          >
 867+ 85FE             >                org     $-1                 // alter last byte of Name just above to set
 867+ 85FD CE          >                db      {b $} | END_BIT     // msb as name end
 867+ 85FE             >
 867+ 85FE E6 85       >                dw      last_NFA            // Link to previous definition Name
 867+ 8600             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 867+ 8600 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 867+ 8602             >                else
 867+ 8602 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 867+ 8602             >                endif           ; ok        // for other definitions it "points" the correct handler
 867+ 8602             >                // Use of "; ok" to suppress "warning[fwdref]"
 867+ 8602             >
 867+ 8602             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 868+ 8602 12 71                        dw      QCOMP
 869+ 8604 63 6D 41 71                  dw      ONE, QPAIRS
 870+ 8608 8B 71 68 64                  dw      COMPILE, BRANCH
 871+ 860C 7B 85                        dw      BACK
 872+ 860E B6 69                        dw      EXIT
 873+ 8610
 874+ 8610              //  ______________________________________________________________________
 875+ 8610              //
 876+ 8610              // until        ( a 1 -- ) \ compile-time
 877+ 8610                              Colon_Def UNTIL, "UNTIL", is_immediate
 877+ 8610             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 877+ 8610             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 877+ 8610             >
 877+ 8610             >                // dummy db directives used to calculate length of namec
 877+ 8610 55 4E 54 49 >                db      "UNTIL"
 877+ 8614 4C          >
 877+ 8615             >len_NFA         defl    $ - temp_NFA
 877+ 8615             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 877+ 8610             >
 877+ 8610 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 877+ 8611 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 877+ 8615 4C          >
 877+ 8616             >                org     $-1                 // alter last byte of Name just above to set
 877+ 8615 CC          >                db      {b $} | END_BIT     // msb as name end
 877+ 8616             >
 877+ 8616 F8 85       >                dw      last_NFA            // Link to previous definition Name
 877+ 8618             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 877+ 8618 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 877+ 861A             >                else
 877+ 861A ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 877+ 861A             >                endif           ; ok        // for other definitions it "points" the correct handler
 877+ 861A             >                // Use of "; ok" to suppress "warning[fwdref]"
 877+ 861A             >
 877+ 861A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 878+ 861A 12 71                        dw      QCOMP
 879+ 861C 63 6D 41 71                  dw      ONE, QPAIRS
 880+ 8620 8B 71 7F 64                  dw      COMPILE, ZBRANCH
 881+ 8624 7B 85                        dw      BACK
 882+ 8626 B6 69                        dw      EXIT
 883+ 8628
 884+ 8628              //  ______________________________________________________________________
 885+ 8628              //
 886+ 8628              // end          ( a 1 -- ) \ compile-time
 887+ 8628                              Colon_Def END, "END", is_immediate
 887+ 8628             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 887+ 8628             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 887+ 8628             >
 887+ 8628             >                // dummy db directives used to calculate length of namec
 887+ 8628 45 4E 44    >                db      "END"
 887+ 862B             >len_NFA         defl    $ - temp_NFA
 887+ 862B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 887+ 8628             >
 887+ 8628 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 887+ 8629 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 887+ 862C             >                org     $-1                 // alter last byte of Name just above to set
 887+ 862B C4          >                db      {b $} | END_BIT     // msb as name end
 887+ 862C             >
 887+ 862C 10 86       >                dw      last_NFA            // Link to previous definition Name
 887+ 862E             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 887+ 862E E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 887+ 8630             >                else
 887+ 8630 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 887+ 8630             >                endif           ; ok        // for other definitions it "points" the correct handler
 887+ 8630             >                // Use of "; ok" to suppress "warning[fwdref]"
 887+ 8630             >
 887+ 8630             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 888+ 8630 18 86                        dw      UNTIL
 889+ 8632 B6 69                        dw      EXIT
 890+ 8634
 891+ 8634              //  ______________________________________________________________________
 892+ 8634              //
 893+ 8634              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 894+ 8634                              Colon_Def WHILE, "WHILE", is_immediate
 894+ 8634             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 894+ 8634             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 894+ 8634             >
 894+ 8634             >                // dummy db directives used to calculate length of namec
 894+ 8634 57 48 49 4C >                db      "WHILE"
 894+ 8638 45          >
 894+ 8639             >len_NFA         defl    $ - temp_NFA
 894+ 8639             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 894+ 8634             >
 894+ 8634 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 894+ 8635 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 894+ 8639 45          >
 894+ 863A             >                org     $-1                 // alter last byte of Name just above to set
 894+ 8639 C5          >                db      {b $} | END_BIT     // msb as name end
 894+ 863A             >
 894+ 863A 28 86       >                dw      last_NFA            // Link to previous definition Name
 894+ 863C             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 894+ 863C E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 894+ 863E             >                else
 894+ 863E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 894+ 863E             >                endif           ; ok        // for other definitions it "points" the correct handler
 894+ 863E             >                // Use of "; ok" to suppress "warning[fwdref]"
 894+ 863E             >
 894+ 863E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 895+ 863E 8A 85                        dw      IF
 896+ 8640 89 6A                        dw      TWO_PLUS // ( that is 4 )
 897+ 8642 B6 69                        dw      EXIT
 898+ 8644
 899+ 8644              //  ______________________________________________________________________
 900+ 8644              //
 901+ 8644              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 902+ 8644                              Colon_Def REPEAT, "REPEAT", is_immediate
 902+ 8644             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 902+ 8644             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 902+ 8644             >
 902+ 8644             >                // dummy db directives used to calculate length of namec
 902+ 8644 52 45 50 45 >                db      "REPEAT"
 902+ 8648 41 54       >
 902+ 864A             >len_NFA         defl    $ - temp_NFA
 902+ 864A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 902+ 8644             >
 902+ 8644 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 902+ 8645 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 902+ 8649 41 54       >
 902+ 864B             >                org     $-1                 // alter last byte of Name just above to set
 902+ 864A D4          >                db      {b $} | END_BIT     // msb as name end
 902+ 864B             >
 902+ 864B 34 86       >                dw      last_NFA            // Link to previous definition Name
 902+ 864D             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 902+ 864D E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 902+ 864F             >                else
 902+ 864F ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 902+ 864F             >                endif           ; ok        // for other definitions it "points" the correct handler
 902+ 864F             >                // Use of "; ok" to suppress "warning[fwdref]"
 902+ 864F             >
 902+ 864F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 903+ 864F 83 6B                        dw      TWO_SWAP
 904+ 8651 00 86                        dw      AGAIN
 905+ 8653 6B 6D 81 6F                  dw      TWO, SUBTRACT
 906+ 8657 A2 85                        dw      ENDIF
 907+ 8659 B6 69                        dw      EXIT
 908+ 865B
 909+ 865B              //  ______________________________________________________________________
 910+ 865B              //
 911+ 865B              // ?do-
 912+ 865B              // special version of "BACK" used by ?DO and LOOP
 913+ 865B                              Colon_Def C_DO_BACK, "?DO-", is_normal
 913+ 865B             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 913+ 865B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 913+ 865B             >
 913+ 865B             >                // dummy db directives used to calculate length of namec
 913+ 865B 3F 44 4F 2D >                db      "?DO-"
 913+ 865F             >len_NFA         defl    $ - temp_NFA
 913+ 865F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 913+ 865B             >
 913+ 865B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 913+ 865C 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 913+ 8660             >                org     $-1                 // alter last byte of Name just above to set
 913+ 865F AD          >                db      {b $} | END_BIT     // msb as name end
 913+ 8660             >
 913+ 8660 44 86       >                dw      last_NFA            // Link to previous definition Name
 913+ 8662             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 913+ 8662 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 913+ 8664             >                else
 913+ 8664 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 913+ 8664             >                endif           ; ok        // for other definitions it "points" the correct handler
 913+ 8664             >                // Use of "; ok" to suppress "warning[fwdref]"
 913+ 8664             >
 913+ 8664             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 914+ 8664 7B 85                        dw      BACK
 915+ 8666 80 69 CB 6E                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 915+ 866A EF 6B 81 6F
 916+ 866E 7F 64                        dw      ZBRANCH
 917+ 8670 06 00                        dw      CDoBack_Endif - $
 918+ 8672 89 6A A2 85                  dw          TWO_PLUS, ENDIF
 919+ 8676              CDoBack_Endif:
 920+ 8676 54 71 CB 6E                  dw      QCSP, CSP, STORE
 920+ 867A FC 6B
 921+ 867C B6 69                        dw      EXIT
 922+ 867E
 923+ 867E              //  ______________________________________________________________________
 924+ 867E              //
 925+ 867E              // do
 926+ 867E              // DO  ... LOOP
 927+ 867E              // DO  ... n +LOOP
 928+ 867E              // ?DO ... LOOP
 929+ 867E              // ?DO ... n +LOOP
 930+ 867E                              Colon_Def DO, "DO", is_immediate
 930+ 867E             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 930+ 867E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 930+ 867E             >
 930+ 867E             >                // dummy db directives used to calculate length of namec
 930+ 867E 44 4F       >                db      "DO"
 930+ 8680             >len_NFA         defl    $ - temp_NFA
 930+ 8680             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 930+ 867E             >
 930+ 867E C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 930+ 867F 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 930+ 8681             >                org     $-1                 // alter last byte of Name just above to set
 930+ 8680 CF          >                db      {b $} | END_BIT     // msb as name end
 930+ 8681             >
 930+ 8681 5B 86       >                dw      last_NFA            // Link to previous definition Name
 930+ 8683             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 930+ 8683 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 930+ 8685             >                else
 930+ 8685 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 930+ 8685             >                endif           ; ok        // for other definitions it "points" the correct handler
 930+ 8685             >                // Use of "; ok" to suppress "warning[fwdref]"
 930+ 8685             >
 930+ 8685             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 931+ 8685 8B 71 07 65                  dw      COMPILE, C_DO
 932+ 8689 CB 6E EF 6B                  dw      CSP, FETCH, STORE_CSP
 932+ 868D E5 70
 933+ 868F 2D 6F 73 6D                  dw      HERE, THREE
 934+ 8693 B6 69                        dw      EXIT
 935+ 8695
 936+ 8695              //  ______________________________________________________________________
 937+ 8695              //
 938+ 8695              // loop
 939+ 8695                              Colon_Def LOOP, "LOOP", is_immediate
 939+ 8695             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 939+ 8695             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 939+ 8695             >
 939+ 8695             >                // dummy db directives used to calculate length of namec
 939+ 8695 4C 4F 4F 50 >                db      "LOOP"
 939+ 8699             >len_NFA         defl    $ - temp_NFA
 939+ 8699             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 939+ 8695             >
 939+ 8695 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 939+ 8696 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 939+ 869A             >                org     $-1                 // alter last byte of Name just above to set
 939+ 8699 D0          >                db      {b $} | END_BIT     // msb as name end
 939+ 869A             >
 939+ 869A 7E 86       >                dw      last_NFA            // Link to previous definition Name
 939+ 869C             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 939+ 869C E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 939+ 869E             >                else
 939+ 869E ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 939+ 869E             >                endif           ; ok        // for other definitions it "points" the correct handler
 939+ 869E             >                // Use of "; ok" to suppress "warning[fwdref]"
 939+ 869E             >
 939+ 869E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 940+ 869E 73 6D 41 71                  dw      THREE, QPAIRS
 941+ 86A2 8B 71 94 64                  dw      COMPILE, C_LOOP
 942+ 86A6 62 86                        dw      C_DO_BACK
 943+ 86A8 B6 69                        dw      EXIT
 944+ 86AA
 945+ 86AA              //  ______________________________________________________________________
 946+ 86AA              //
 947+ 86AA              // +loop
 948+ 86AA                              Colon_Def PLOOP, "+LOOP", is_immediate
 948+ 86AA             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 948+ 86AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ 86AA             >
 948+ 86AA             >                // dummy db directives used to calculate length of namec
 948+ 86AA 2B 4C 4F 4F >                db      "+LOOP"
 948+ 86AE 50          >
 948+ 86AF             >len_NFA         defl    $ - temp_NFA
 948+ 86AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ 86AA             >
 948+ 86AA C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ 86AB 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 948+ 86AF 50          >
 948+ 86B0             >                org     $-1                 // alter last byte of Name just above to set
 948+ 86AF D0          >                db      {b $} | END_BIT     // msb as name end
 948+ 86B0             >
 948+ 86B0 95 86       >                dw      last_NFA            // Link to previous definition Name
 948+ 86B2             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 86B2 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 948+ 86B4             >                else
 948+ 86B4 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 948+ 86B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 86B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 86B4             >
 948+ 86B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 86B4 73 6D 41 71                  dw      THREE, QPAIRS
 950+ 86B8 8B 71 CB 64                  dw      COMPILE, C_PLOOP
 951+ 86BC 62 86                        dw      C_DO_BACK
 952+ 86BE B6 69                        dw      EXIT
 953+ 86C0
 954+ 86C0              //  ______________________________________________________________________
 955+ 86C0              //
 956+ 86C0              // ?do
 957+ 86C0                              Colon_Def QDO, "?DO", is_immediate
 957+ 86C0             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 957+ 86C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 957+ 86C0             >
 957+ 86C0             >                // dummy db directives used to calculate length of namec
 957+ 86C0 3F 44 4F    >                db      "?DO"
 957+ 86C3             >len_NFA         defl    $ - temp_NFA
 957+ 86C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 957+ 86C0             >
 957+ 86C0 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 957+ 86C1 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 957+ 86C4             >                org     $-1                 // alter last byte of Name just above to set
 957+ 86C3 CF          >                db      {b $} | END_BIT     // msb as name end
 957+ 86C4             >
 957+ 86C4 AA 86       >                dw      last_NFA            // Link to previous definition Name
 957+ 86C6             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 957+ 86C6 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 957+ 86C8             >                else
 957+ 86C8 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 957+ 86C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 957+ 86C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 957+ 86C8             >
 957+ 86C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 958+ 86C8 8B 71 D9 64                  dw      COMPILE, C_Q_DO
 959+ 86CC CB 6E EF 6B                  dw      CSP, FETCH, STORE_CSP
 959+ 86D0 E5 70
 960+ 86D2 2D 6F 5B 6D                  dw      HERE, ZERO, COMMA, ZERO
 960+ 86D6 49 6F 5B 6D
 961+ 86DA 2D 6F 73 6D                  dw      HERE, THREE
 962+ 86DE B6 69                        dw      EXIT
 963+ 86E0
 964+ 86E0              Latest_Definition:
 965+ 86E0              //  ______________________________________________________________________
 966+ 86E0              //
 967+ 86E0              // \
 968+ 86E0                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
 968+ 86E0             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
 968+ 86E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 968+ 86E0             >
 968+ 86E0             >                // dummy db directives used to calculate length of namec
 968+ 86E0 5C          >                db      "\\"
 968+ 86E1             >len_NFA         defl    $ - temp_NFA
 968+ 86E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 968+ 86E0             >
 968+ 86E0 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 968+ 86E1 5C          >                db      "\\"               // name string in 7-bit ascii, but
 968+ 86E2             >                org     $-1                 // alter last byte of Name just above to set
 968+ 86E1 DC          >                db      {b $} | END_BIT     // msb as name end
 968+ 86E2             >
 968+ 86E2 C0 86       >                dw      last_NFA            // Link to previous definition Name
 968+ 86E4             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 968+ 86E4 E0 6C       >                dw      Enter_Ptr ; ok        // for primitive definitions  actual code
 968+ 86E6             >                else
 968+ 86E6 ~           >                dw      $ + 2   ; ok        // is pointed by CFA
 968+ 86E6             >                endif           ; ok        // for other definitions it "points" the correct handler
 968+ 86E6             >                // Use of "; ok" to suppress "warning[fwdref]"
 968+ 86E6             >
 968+ 86E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 969+ 86E6 5A 6E EF 6B                  dw      BLK, FETCH
 970+ 86EA 7F 64                        dw      ZBRANCH
 971+ 86EC 30 00                        dw      Backslash_Else_1 - $
 972+ 86EE 5A 6E EF 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
 972+ 86F2 63 6D CC 6F
 973+ 86F6 7F 64                        dw          ZBRANCH
 974+ 86F8 18 00                        dw          Backslash_Else_2 - $
 975+ 86FA 63 6E EF 6B                  dw              TO_IN, FETCH, CL, MOD, CL
 975+ 86FE 8F 6D 2D 7A
 975+ 8702 8F 6D
 976+ 8704 1E 6B 81 6F                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
 976+ 8708 63 6E CC 6B
 977+ 870C 68 64                        dw          BRANCH
 978+ 870E 0A 00                        dw          Backslash_Endif_2 - $
 979+ 8710              Backslash_Else_2:
 980+ 8710 9B 6D A3 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
 980+ 8714 63 6E FC 6B
 981+ 8718              Backslash_Endif_2:
 982+ 8718 68 64                        dw      BRANCH
 983+ 871A 0A 00                        dw      Backslash_Endif_1 - $
 984+ 871C              Backslash_Else_1:
 985+ 871C 45 64 50 00                  dw          LIT, 80, TO_IN, STORE
 985+ 8720 63 6E FC 6B
 986+ 8724              Backslash_Endif_1:
 987+ 8724 B6 69                        dw      EXIT
 988+ 8726
 989+ 8726              Fence_Word:
 990+ 8726              //  ______________________________________________________________________
 991+ 8726              //
 992+ 8726
 993+ 8726 00           Here_Dictionary db      0
 994+ 8727
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/L3.asm
 113  8727
 114  8727              // now we save the compiled file so we can either run it or debug it
 115  8727                              SAVENEX OPEN "output/main.nex", ORIGIN
 116  8727                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 117  8727                              SAVENEX CFG  0
 118  8727                              SAVENEX BANK 2, 0
 119  8727                              SAVENEX AUTO
 120  8727                              SAVENEX CLOSE
 121  8727
 122  8727              //              PAGE 7 ;set 7 page to current slot
 123  8727              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 124  8727              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 125  8727
 126  8727              //              SAVETAP "output/F15j.tap", CODE, "forth15j", $6400, 9000
 127  8727
 128  8727                              SAVEBIN "output/forth15j.bin", ORIGIN, 9400
 129  8727
 130  8727                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_INDIRECT/source/main.asm
