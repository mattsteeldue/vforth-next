# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.6 NextZXOS version
   7  0000              //  build 20220227
   8  0000              //
   9  0000              //  Direct-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2022
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000              //ORIGIN          equ     $8CC1                   // for binary comparison
  69  0000                              endif
  70  0000              //  ______________________________________________________________________
  71  0000
  72  0000                              if (  0 == DEBUGGING )
  73  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  74  0000                              endif
  75  0000              //  ______________________________________________________________________
  76  0000
  77  0000                              if (  1 == DEBUGGING )
  78  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  79  0000                              endif
  80  0000              //  ______________________________________________________________________
  81  0000
  82  0000                              DEVICE  ZXSPECTRUMNEXT
  83  0000
  84  0000                              ORG     ORIGIN
  85  62E6
  86  62E6                              if ( -1 == DEBUGGING )
  87  62E6 00 00 00...                  ds 128                            // for binary comparison
  88  62EA                              endif
  89  6366
  90  6366              //  ______________________________________________________________________
  91  6366              //
  92  6366              //  Naming convention for Label vs Forth correspondance
  93  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  94  6366              //    - Leading "0" is converted into "Z_"
  95  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  96  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  97  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  98  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  99  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 100  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 101  6366              //    - Equal sign "=" is converted in EQUAL
 102  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 103  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 104  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 105  6366              //    - Exclamation mark "!" is converted in STORE
 106  6366              //    - At-Sign "@" is converted in FETCH
 107  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 108  6366
 109  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~
 125+ 6366 ~
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
 110  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 15 79                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 15 79                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 47 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 8E 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 8E 87        DP_origin       dw      Fence_Word
  39+ 6386 1D 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E
 100+ 639E
 101+ 639E
 102+ 639E
 103+ 639E E9                           jp      (hl)                // and jump to it
 104+ 639F                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 639F
 106+ 639F              //  ______________________________________________________________________
 107+ 639F              //
 108+ 639F              // lit          -- x
 109+ 639F              // puts on top of stack the value of the following word.
 110+ 639F              // it is compiled in colon definition before a literal number
 111+ 639F
 112+ 639F                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 639F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 639F             >
 112+ 639F             >                // dummy db directives used to calculate length of namec
 112+ 639F 4C 49 54    >                db      "LIT"
 112+ 63A2             >len_NFA         defl    $ - temp_NFA
 112+ 63A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 639F             >
 112+ 639F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A0 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A3             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A2 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A3             >
 112+ 63A3 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A5             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 112+ 63A5 ~           >
 112+ 63A5 ~           >
 112+ 63A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63A5             >
 112+ 63A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63A5
 114+ 63A5 0A                           ld      a, (bc)
 115+ 63A6 03                           inc     bc
 116+ 63A7 6F                           ld      l, a
 117+ 63A8 0A                           ld      a, (bc)
 118+ 63A9 03                           inc     bc
 119+ 63AA 67                           ld      h, a
 120+ 63AB                              psh1
 120+ 63AB E5          >                push    hl
 120+ 63AC DD E9       >                jp      (ix)
 121+ 63AE
 122+ 63AE              //  ______________________________________________________________________
 123+ 63AE              //
 124+ 63AE              // execute      i*x xt -- j*x
 125+ 63AE              // execution token. usually xt is given by CFA
 126+ 63AE
 127+ 63AE                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63AE             >
 127+ 63AE             >                // dummy db directives used to calculate length of namec
 127+ 63AE 45 58 45 43 >                db      "EXECUTE"
 127+ 63B2 55 54 45    >
 127+ 63B5             >len_NFA         defl    $ - temp_NFA
 127+ 63B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63AE             >
 127+ 63AE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63AF 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B3 55 54 45    >
 127+ 63B6             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63B5 C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63B6             >
 127+ 63B6 9F 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63B8             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 127+ 63B8 ~           >
 127+ 63B8 ~           >
 127+ 63B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63B8             >
 127+ 63B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63B8 C9                           ret
 129+ 63B9              //              pop     hl
 130+ 63B9              //              jp      (hl)
 131+ 63B9              //              jr      Exec_Ptr
 132+ 63B9
 133+ 63B9
 134+ 63B9              //  ______________________________________________________________________
 135+ 63B9              //
 136+ 63B9              // (+loop)       --
 137+ 63B9              // compiled by +LOOP. it uses the top two values of return-stack to
 138+ 63B9              // keep track of index and limit, they are accessed via I and I'
 139+ 63B9                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 139+ 63B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 63B9             >
 139+ 63B9             >                // dummy db directives used to calculate length of namec
 139+ 63B9 28 2B 4C 4F >                db      "(+LOOP)"
 139+ 63BD 4F 50 29    >
 139+ 63C0             >len_NFA         defl    $ - temp_NFA
 139+ 63C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 63B9             >
 139+ 63B9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 63BA 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 139+ 63BE 4F 50 29    >
 139+ 63C1             >                org     $-1                 // alter last byte of Name just above to set
 139+ 63C0 A9          >                db      {b $} | END_BIT     // msb as name end
 139+ 63C1             >
 139+ 63C1 AE 63       >                dw      last_NFA            // Link to previous definition Name
 139+ 63C3             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 63C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 139+ 63C3 ~           >
 139+ 63C3 ~           >
 139+ 63C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 63C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 63C3             >
 139+ 63C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 140+ 63C3
 141+ 63C3              Loop_Ptr:
 142+ 63C3 D9                           exx
 143+ 63C4                              ldhlrp                      // ld hl,rp macro 30h +Origin
 143+ 63C4 2A 96 63    >                ld      hl,(RP_Pointer)
 144+ 63C7
 145+ 63C7 C1                           pop     bc                  // bc is increment
 146+ 63C8
 147+ 63C8 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 148+ 63C9 7B                           ld      a, e                // de keeps index before increment.
 149+ 63CA 81                           add     c
 150+ 63CB 77                           ld      (hl), a
 151+ 63CC 23                           inc     hl
 152+ 63CD 56                           ld      d, (hl)
 153+ 63CE 7A                           ld      a, d
 154+ 63CF 88                           adc     b
 155+ 63D0 77                           ld      (hl),a
 156+ 63D1 23                           inc     hl
 157+ 63D2
 158+ 63D2 7B                           ld      a, e
 159+ 63D3 96                           sub     (hl)
 160+ 63D4 5F                           ld      e, a
 161+ 63D5 23                           inc     hl
 162+ 63D6 7A                           ld      a, d
 163+ 63D7 9E                           sbc     (hl)
 164+ 63D8 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 165+ 63D9
 166+ 63D9 EB                           ex      de, hl
 167+ 63DA 09                           add     hl, bc
 168+ 63DB
 169+ 63DB CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 170+ 63DD 28 01                        jr      z, Loop_NegativeIncrement
 171+ 63DF 3F                               ccf
 172+ 63E0              Loop_NegativeIncrement:
 173+ 63E0 38 03                        jr      c, Loop_Endif
 174+ 63E2 D9                               exx
 175+ 63E3 18 22                            jr      Branch_Ptr      // perform branch consuming following cell
 176+ 63E5              Loop_Endif:
 177+ 63E5 EB                           ex      de, hl
 178+ 63E6 23                           inc     hl
 179+ 63E7                              ldrphl                      // ld rp,hl macro 30h +Origin
 179+ 63E7 22 96 63    >                ld      (RP_Pointer),hl
 180+ 63EA D9                           exx
 181+ 63EB 03                           inc     bc                  // skip branch-style offset
 182+ 63EC 03                           inc     bc
 183+ 63ED                              next
 183+ 63ED DD E9       >                jp      (ix)
 184+ 63EF
 185+ 63EF              //  ______________________________________________________________________
 186+ 63EF              //
 187+ 63EF              // (loop)       n --
 188+ 63EF              // same as (LOOP) but index is incremented by 1
 189+ 63EF              // compiled by LOOP.
 190+ 63EF                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 190+ 63EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 63EF             >
 190+ 63EF             >                // dummy db directives used to calculate length of namec
 190+ 63EF 28 4C 4F 4F >                db      "(LOOP)"
 190+ 63F3 50 29       >
 190+ 63F5             >len_NFA         defl    $ - temp_NFA
 190+ 63F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 63EF             >
 190+ 63EF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 63F0 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 190+ 63F4 50 29       >
 190+ 63F6             >                org     $-1                 // alter last byte of Name just above to set
 190+ 63F5 A9          >                db      {b $} | END_BIT     // msb as name end
 190+ 63F6             >
 190+ 63F6 B9 63       >                dw      last_NFA            // Link to previous definition Name
 190+ 63F8             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 63F8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190+ 63F8 ~           >
 190+ 63F8 ~           >
 190+ 63F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 63F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 63F8             >
 190+ 63F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 63F8 ED 8A 00 01                  push    1
 192+ 63FC 18 C5                        jr      Loop_Ptr
 193+ 63FE
 194+ 63FE              //  ______________________________________________________________________
 195+ 63FE              //
 196+ 63FE              // branch       --
 197+ 63FE              // unconditional branch in colon definition using the following cell as an offset from current IP value
 198+ 63FE              // compiled by ELSE, AGAIN and some other immediate words
 199+ 63FE
 200+ 63FE                              New_Def BRANCH, "BRANCH", is_code, is_normal
 200+ 63FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ 63FE             >
 200+ 63FE             >                // dummy db directives used to calculate length of namec
 200+ 63FE 42 52 41 4E >                db      "BRANCH"
 200+ 6402 43 48       >
 200+ 6404             >len_NFA         defl    $ - temp_NFA
 200+ 6404             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ 63FE             >
 200+ 63FE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ 63FF 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 200+ 6403 43 48       >
 200+ 6405             >                org     $-1                 // alter last byte of Name just above to set
 200+ 6404 C8          >                db      {b $} | END_BIT     // msb as name end
 200+ 6405             >
 200+ 6405 EF 63       >                dw      last_NFA            // Link to previous definition Name
 200+ 6407             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 6407 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 200+ 6407 ~           >
 200+ 6407 ~           >
 200+ 6407             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 6407             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 6407             >
 200+ 6407             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 6407              Branch_Ptr:
 202+ 6407 60                           ld      h, b
 203+ 6408 69                           ld      l, c
 204+ 6409 5E                           ld      e, (hl)
 205+ 640A 23                           inc     hl
 206+ 640B 56                           ld      d, (hl)
 207+ 640C 2B                           dec     hl                  // offset is calculated from current IP
 208+ 640D 19                           add     hl, de
 209+ 640E 4D                           ld      c, l
 210+ 640F 44                           ld      b, h
 211+ 6410                              next
 211+ 6410 DD E9       >                jp      (ix)
 212+ 6412
 213+ 6412
 214+ 6412              //  ______________________________________________________________________
 215+ 6412              //
 216+ 6412              // 0branch      f --
 217+ 6412              // conditional branch if the top-of-stack is ZERO or FALSE.
 218+ 6412              // compiled by IF, UNTIL and some other immediate words
 219+ 6412
 220+ 6412                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 220+ 6412             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 6412             >
 220+ 6412             >                // dummy db directives used to calculate length of namec
 220+ 6412 30 42 52 41 >                db      "0BRANCH"
 220+ 6416 4E 43 48    >
 220+ 6419             >len_NFA         defl    $ - temp_NFA
 220+ 6419             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 6412             >
 220+ 6412 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 6413 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 220+ 6417 4E 43 48    >
 220+ 641A             >                org     $-1                 // alter last byte of Name just above to set
 220+ 6419 C8          >                db      {b $} | END_BIT     // msb as name end
 220+ 641A             >
 220+ 641A FE 63       >                dw      last_NFA            // Link to previous definition Name
 220+ 641C             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 641C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 220+ 641C ~           >
 220+ 641C ~           >
 220+ 641C             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 641C             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 641C             >
 220+ 641C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 641C              ZBranch_Ptr:
 222+ 641C E1                           pop     hl
 223+ 641D 7D                           ld      a, l
 224+ 641E B4                           or      h
 225+ 641F 28 E6                        jr      z, Branch_Ptr
 226+ 6421 03                           inc     bc                  // if not branch, skip offset cell.
 227+ 6422 03                           inc     bc
 228+ 6423                              next
 228+ 6423 DD E9       >                jp      (ix)
 229+ 6425
 230+ 6425              //  ______________________________________________________________________
 231+ 6425              //
 232+ 6425              // (leave)        --
 233+ 6425              // compiled by LEAVE
 234+ 6425              // this forces to exit from loop and jump past
 235+ 6425                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 235+ 6425             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 235+ 6425             >
 235+ 6425             >                // dummy db directives used to calculate length of namec
 235+ 6425 28 4C 45 41 >                db      "(LEAVE)"
 235+ 6429 56 45 29    >
 235+ 642C             >len_NFA         defl    $ - temp_NFA
 235+ 642C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 235+ 6425             >
 235+ 6425 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 235+ 6426 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 235+ 642A 56 45 29    >
 235+ 642D             >                org     $-1                 // alter last byte of Name just above to set
 235+ 642C A9          >                db      {b $} | END_BIT     // msb as name end
 235+ 642D             >
 235+ 642D 12 64       >                dw      last_NFA            // Link to previous definition Name
 235+ 642F             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 235+ 642F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 235+ 642F ~           >
 235+ 642F ~           >
 235+ 642F             >                endif           ; ok        // for other definitions it "points" the correct handler
 235+ 642F             >                // Use of "; ok" to suppress "warning[fwdref]"
 235+ 642F             >
 235+ 642F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 642F
 237+ 642F                              ldhlrp
 237+ 642F 2A 96 63    >                ld      hl,(RP_Pointer)
 238+ 6432 11 04 00                     ld      de, 4
 239+ 6435 19                           add     hl, de
 240+ 6436                              ldrphl
 240+ 6436 22 96 63    >                ld      (RP_Pointer),hl
 241+ 6439
 242+ 6439 18 CC                        jr      Branch_Ptr       // perform branch consuming following cell
 243+ 643B                              next
 243+ 643B DD E9       >                jp      (ix)
 244+ 643D
 245+ 643D              //  ______________________________________________________________________
 246+ 643D              //
 247+ 643D              // (?do)        lim ind --
 248+ 643D              // compiled by ?DO to make a loop checking for lim == ind first
 249+ 643D              // at run-time (?DO) must be followed by a BRANCH offset
 250+ 643D              // used to skip the loop if lim == ind
 251+ 643D                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 251+ 643D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 251+ 643D             >
 251+ 643D             >                // dummy db directives used to calculate length of namec
 251+ 643D 28 3F 44 4F >                db      "(?DO)"
 251+ 6441 29          >
 251+ 6442             >len_NFA         defl    $ - temp_NFA
 251+ 6442             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 251+ 643D             >
 251+ 643D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 251+ 643E 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 251+ 6442 29          >
 251+ 6443             >                org     $-1                 // alter last byte of Name just above to set
 251+ 6442 A9          >                db      {b $} | END_BIT     // msb as name end
 251+ 6443             >
 251+ 6443 25 64       >                dw      last_NFA            // Link to previous definition Name
 251+ 6445             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 251+ 6445 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 251+ 6445 ~           >
 251+ 6445 ~           >
 251+ 6445             >                endif           ; ok        // for other definitions it "points" the correct handler
 251+ 6445             >                // Use of "; ok" to suppress "warning[fwdref]"
 251+ 6445             >
 251+ 6445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 252+ 6445 D1                           pop     de                  // de has the index
 253+ 6446 E1                           pop     hl                  // hl has the limit
 254+ 6447 E5                           push    hl
 255+ 6448 D5                           push    de
 256+ 6449 A7                           and     a                   // reset carry flag
 257+ 644A ED 52                        sbc     hl, de              // compute limit - index
 258+ 644C 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 259+ 644E D1                               pop     de
 260+ 644F E1                               pop     hl
 261+ 6450
 262+ 6450 18 B5                            jr      Branch_Ptr          // perform branch consuming following cell
 263+ 6452              Do_Ptr:
 264+ 6452                              ldhlrp                      // prepare RP
 264+ 6452 2A 96 63    >                ld      hl,(RP_Pointer)
 265+ 6455 2B                           dec     hl
 266+ 6456 2B                           dec     hl
 267+ 6457 2B                           dec     hl
 268+ 6458 2B                           dec     hl
 269+ 6459                              ldrphl
 269+ 6459 22 96 63    >                ld      (RP_Pointer),hl
 270+ 645C
 271+ 645C                              // store index as top RP
 272+ 645C D1                           pop     de
 273+ 645D 73                           ld      (hl), e
 274+ 645E 23                           inc     hl
 275+ 645F 72                           ld      (hl), d
 276+ 6460 23                           inc     hl
 277+ 6461                              // stores lim as second from top RP
 278+ 6461 D1                           pop     de
 279+ 6462 73                           ld      (hl), e
 280+ 6463 23                           inc     hl
 281+ 6464 72                           ld      (hl), d
 282+ 6465
 283+ 6465                              // skip branch-style offseet
 284+ 6465 03                           inc     bc
 285+ 6466 03                           inc     bc
 286+ 6467                              next
 286+ 6467 DD E9       >                jp      (ix)
 287+ 6469
 288+ 6469              //  ______________________________________________________________________
 289+ 6469              //
 290+ 6469              // (do)        lim ind --
 291+ 6469              // compiled by DO to make a loop checking for lim == ind first
 292+ 6469              // this is a simpler version of (?DO)
 293+ 6469                              New_Def C_DO, "(DO)", is_code, is_normal
 293+ 6469             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 6469             >
 293+ 6469             >                // dummy db directives used to calculate length of namec
 293+ 6469 28 44 4F 29 >                db      "(DO)"
 293+ 646D             >len_NFA         defl    $ - temp_NFA
 293+ 646D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 6469             >
 293+ 6469 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 646A 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 293+ 646E             >                org     $-1                 // alter last byte of Name just above to set
 293+ 646D A9          >                db      {b $} | END_BIT     // msb as name end
 293+ 646E             >
 293+ 646E 3D 64       >                dw      last_NFA            // Link to previous definition Name
 293+ 6470             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 6470 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 293+ 6470 ~           >
 293+ 6470 ~           >
 293+ 6470             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 6470             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 6470             >
 293+ 6470             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 6470 0B                           dec     bc                  // prepare IP beforehand
 295+ 6471 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 296+ 6472 18 DE                        jr      Do_Ptr
 297+ 6474
 298+ 6474              //  ______________________________________________________________________
 299+ 6474              //
 300+ 6474              // i            -- n
 301+ 6474              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 302+ 6474              // the current value of the index-loop
 303+ 6474                              New_Def I, "I", is_code, is_normal
 303+ 6474             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 6474             >
 303+ 6474             >                // dummy db directives used to calculate length of namec
 303+ 6474 49          >                db      "I"
 303+ 6475             >len_NFA         defl    $ - temp_NFA
 303+ 6475             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 6474             >
 303+ 6474 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 6475 49          >                db      "I"               // name string in 7-bit ascii, but
 303+ 6476             >                org     $-1                 // alter last byte of Name just above to set
 303+ 6475 C9          >                db      {b $} | END_BIT     // msb as name end
 303+ 6476             >
 303+ 6476 69 64       >                dw      last_NFA            // Link to previous definition Name
 303+ 6478             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 6478 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 303+ 6478 ~           >
 303+ 6478 ~           >
 303+ 6478             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 6478             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 6478             >
 303+ 6478             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 6478              I_Ptr:
 305+ 6478
 306+ 6478                              ldhlrp
 306+ 6478 2A 96 63    >                ld      hl,(RP_Pointer)
 307+ 647B              I_Ptr_prime
 308+ 647B 5E                           ld      e, (hl)
 309+ 647C 23                           inc     hl
 310+ 647D 56                           ld      d, (hl)
 311+ 647E D5                           push    de
 312+ 647F                              next
 312+ 647F DD E9       >                jp      (ix)
 313+ 6481
 314+ 6481
 315+ 6481              //  ______________________________________________________________________
 316+ 6481              //
 317+ 6481              // i'            -- n
 318+ 6481              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 319+ 6481              // the limit of the index-loop
 320+ 6481
 321+ 6481                              New_Def II, "I'", is_code, is_normal
 321+ 6481             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 6481             >
 321+ 6481             >                // dummy db directives used to calculate length of namec
 321+ 6481 49 27       >                db      "I'"
 321+ 6483             >len_NFA         defl    $ - temp_NFA
 321+ 6483             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 6481             >
 321+ 6481 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 6482 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 321+ 6484             >                org     $-1                 // alter last byte of Name just above to set
 321+ 6483 A7          >                db      {b $} | END_BIT     // msb as name end
 321+ 6484             >
 321+ 6484 74 64       >                dw      last_NFA            // Link to previous definition Name
 321+ 6486             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 6486 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 321+ 6486 ~           >
 321+ 6486 ~           >
 321+ 6486             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 6486             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 6486             >
 321+ 6486             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 6486                              ldhlrp
 322+ 6486 2A 96 63    >                ld      hl,(RP_Pointer)
 323+ 6489 23                           inc     hl
 324+ 648A 23                           inc     hl
 325+ 648B 18 EE                        jr      I_Ptr_prime
 326+ 648D
 327+ 648D
 328+ 648D              //  ______________________________________________________________________
 329+ 648D              //
 330+ 648D              // digit        c n -- u 1  |  0
 331+ 648D              // convert a character c using base n
 332+ 648D              // returns a unsigned number and a true flag
 333+ 648D              // or just a false flag if the conversion fails
 334+ 648D                              New_Def DIGIT, "DIGIT", is_code, is_normal
 334+ 648D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 334+ 648D             >
 334+ 648D             >                // dummy db directives used to calculate length of namec
 334+ 648D 44 49 47 49 >                db      "DIGIT"
 334+ 6491 54          >
 334+ 6492             >len_NFA         defl    $ - temp_NFA
 334+ 6492             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 334+ 648D             >
 334+ 648D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 334+ 648E 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 334+ 6492 54          >
 334+ 6493             >                org     $-1                 // alter last byte of Name just above to set
 334+ 6492 D4          >                db      {b $} | END_BIT     // msb as name end
 334+ 6493             >
 334+ 6493 81 64       >                dw      last_NFA            // Link to previous definition Name
 334+ 6495             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 334+ 6495 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 334+ 6495 ~           >
 334+ 6495 ~           >
 334+ 6495             >                endif           ; ok        // for other definitions it "points" the correct handler
 334+ 6495             >                // Use of "; ok" to suppress "warning[fwdref]"
 334+ 6495             >
 334+ 6495             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 335+ 6495 E1                           pop     hl                  // l has the base
 336+ 6496 D1                           pop     de                  // e has the digit
 337+ 6497 7B                           ld      a, e
 338+ 6498 FE 60                        cp      $60                 // check if lowercase
 339+ 649A 38 02                        jr      c, Digit_Uppercase
 340+ 649C D6 20                            sub     $20                 // quick'n'dirty uppercase
 341+ 649E              Digit_Uppercase:
 342+ 649E D6 30                        sub     $30
 343+ 64A0 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 344+ 64A2 FE 0A                            cp      $0A
 345+ 64A4 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 346+ 64A6 D6 07                                sub     7                   // try hex and subtract 7
 347+ 64A8 FE 0A                                cp      $0A
 348+ 64AA 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 349+ 64AC
 350+ 64AC              Digit_Decimal:
 351+ 64AC                              // compare digit
 352+ 64AC BD                           cp      l                   // compare with base
 353+ 64AD
 354+ 64AD 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 355+ 64AF 5F                               ld      e, a                // digit is returned as second from TOS
 356+ 64B0 21 01 00                         ld      hl, 1
 357+ 64B3
 358+ 64B3                                  psh2
 358+ 64B3 D5          >                push    de
 358+ 64B4 E5          >                push    hl
 358+ 64B5 DD E9       >                jp      (ix)
 359+ 64B7              Digit_Fail:
 360+ 64B7 21 00 00                     ld      hl, 0
 361+ 64BA                              psh1
 361+ 64BA E5          >                push    hl
 361+ 64BB DD E9       >                jp      (ix)
 362+ 64BD
 363+ 64BD              //  ______________________________________________________________________
 364+ 64BD              //
 365+ 64BD              //  parametric uppercase routine
 366+ 64BD              //  depending on the following op-code the routine can be by-passed
 367+ 64BD              //  changing the behaviour of some callers.
 368+ 64BD              //  If it is "ret" then the system is Case-Sensitive
 369+ 64BD              //  If it is "Nop" then the system is Case-Insensitive
 370+ 64BD              //  Only A register is touched.
 371+ 64BD 00           Case_Sensitive: nop                         // Default is case-insensitive.
 372+ 64BE              Case_Upper:
 373+ 64BE FE 61                        cp      LC_A_CHAR           // lower-case "a"
 374+ 64C0 D8                           ret     c                   // no change if A < "a"
 375+ 64C1 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 376+ 64C3 D0                           ret     nc                  // no change if A > "z"
 377+ 64C4 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 378+ 64C6 C9                           ret
 379+ 64C7
 380+ 64C7              //  ______________________________________________________________________
 381+ 64C7              //
 382+ 64C7              //  caseon      --
 383+ 64C7              // set system case-sensitivity on
 384+ 64C7              // it patches a RET/NOP at the beginning of the uppercase-routine
 385+ 64C7                              New_Def CASEON, "CASEON", is_code, is_normal
 385+ 64C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 64C7             >
 385+ 64C7             >                // dummy db directives used to calculate length of namec
 385+ 64C7 43 41 53 45 >                db      "CASEON"
 385+ 64CB 4F 4E       >
 385+ 64CD             >len_NFA         defl    $ - temp_NFA
 385+ 64CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 64C7             >
 385+ 64C7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 64C8 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 385+ 64CC 4F 4E       >
 385+ 64CE             >                org     $-1                 // alter last byte of Name just above to set
 385+ 64CD CE          >                db      {b $} | END_BIT     // msb as name end
 385+ 64CE             >
 385+ 64CE 8D 64       >                dw      last_NFA            // Link to previous definition Name
 385+ 64D0             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 64D0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 385+ 64D0 ~           >
 385+ 64D0 ~           >
 385+ 64D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 64D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 64D0             >
 385+ 64D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 64D0 3E C9                        ld      a, $C9              // "ret"
 387+ 64D2 32 BD 64                     ld      (Case_Sensitive), a
 388+ 64D5                              next
 388+ 64D5 DD E9       >                jp      (ix)
 389+ 64D7
 390+ 64D7              //  ______________________________________________________________________
 391+ 64D7              //
 392+ 64D7              //  caseoff     --
 393+ 64D7              // set system case-sensitivity on
 394+ 64D7              // it patches a RET/NOP at the beginning of the uppercase-routine
 395+ 64D7                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 395+ 64D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 395+ 64D7             >
 395+ 64D7             >                // dummy db directives used to calculate length of namec
 395+ 64D7 43 41 53 45 >                db      "CASEOFF"
 395+ 64DB 4F 46 46    >
 395+ 64DE             >len_NFA         defl    $ - temp_NFA
 395+ 64DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 395+ 64D7             >
 395+ 64D7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 395+ 64D8 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 395+ 64DC 4F 46 46    >
 395+ 64DF             >                org     $-1                 // alter last byte of Name just above to set
 395+ 64DE C6          >                db      {b $} | END_BIT     // msb as name end
 395+ 64DF             >
 395+ 64DF C7 64       >                dw      last_NFA            // Link to previous definition Name
 395+ 64E1             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 395+ 64E1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 395+ 64E1 ~           >
 395+ 64E1 ~           >
 395+ 64E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 395+ 64E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 395+ 64E1             >
 395+ 64E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 396+ 64E1 3E 00                        ld      a, $00              // "nop"
 397+ 64E3 32 BD 64                     ld      (Case_Sensitive), a
 398+ 64E6                              next
 398+ 64E6 DD E9       >                jp      (ix)
 399+ 64E8
 400+ 64E8              //  ______________________________________________________________________
 401+ 64E8              //
 402+ 64E8              //  upper       c1 -- c1 | c2
 403+ 64E8              // character on top of stack is forced to Uppercase.
 404+ 64E8                              New_Def UPPER, "UPPER", is_code, is_normal
 404+ 64E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 64E8             >
 404+ 64E8             >                // dummy db directives used to calculate length of namec
 404+ 64E8 55 50 50 45 >                db      "UPPER"
 404+ 64EC 52          >
 404+ 64ED             >len_NFA         defl    $ - temp_NFA
 404+ 64ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 64E8             >
 404+ 64E8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 64E9 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 404+ 64ED 52          >
 404+ 64EE             >                org     $-1                 // alter last byte of Name just above to set
 404+ 64ED D2          >                db      {b $} | END_BIT     // msb as name end
 404+ 64EE             >
 404+ 64EE D7 64       >                dw      last_NFA            // Link to previous definition Name
 404+ 64F0             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 64F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 404+ 64F0 ~           >
 404+ 64F0 ~           >
 404+ 64F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 64F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 64F0             >
 404+ 64F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 64F0 E1                           pop     hl
 406+ 64F1 7D                           ld      a, l
 407+ 64F2 CD BE 64                     call    Case_Upper
 408+ 64F5 6F                           ld      l, a
 409+ 64F6
 410+ 64F6                              psh1
 410+ 64F6 E5          >                push    hl
 410+ 64F7 DD E9       >                jp      (ix)
 411+ 64F9
 412+ 64F9              //  ______________________________________________________________________
 413+ 64F9              //
 414+ 64F9              // (find)       addr voc -- addr 0 | cfa b 1
 415+ 64F9              // vocabulary search,
 416+ 64F9              // - voc is starting word's NFA
 417+ 64F9              // - addr is the string to be searched for
 418+ 64F9              // On success, it returns the CFA of found word, the first NFA byte
 419+ 64F9              // (which contains length and some flags) and a true flag.
 420+ 64F9              // On fail, a false flag  (no more: leaves addr unchanged)
 421+ 64F9                              New_Def C_FIND, "(FIND)", is_code, is_normal
 421+ 64F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 64F9             >
 421+ 64F9             >                // dummy db directives used to calculate length of namec
 421+ 64F9 28 46 49 4E >                db      "(FIND)"
 421+ 64FD 44 29       >
 421+ 64FF             >len_NFA         defl    $ - temp_NFA
 421+ 64FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 64F9             >
 421+ 64F9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 64FA 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 421+ 64FE 44 29       >
 421+ 6500             >                org     $-1                 // alter last byte of Name just above to set
 421+ 64FF A9          >                db      {b $} | END_BIT     // msb as name end
 421+ 6500             >
 421+ 6500 E8 64       >                dw      last_NFA            // Link to previous definition Name
 421+ 6502             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6502 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 6502 ~           >
 421+ 6502 ~           >
 421+ 6502             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6502             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6502             >
 421+ 6502             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6502                                                              // de has dictionary pointer
 423+ 6502 D1                               pop     de
 424+ 6503              Find_VocabularyLoop:
 425+ 6503 E1                               pop     hl                  // string pointer to search for
 426+ 6504 E5                               push    hl                  // keep it on stack too for the end.
 427+ 6505 1A                               ld      a, (de)             // save NFA length byte
 428+ 6506 08                               ex      af,af'              // for later use (!)
 429+ 6507 1A                               ld      a, (de)             // reload NFA length byte
 430+ 6508 AE                               xor     (hl)                // check if same length
 431+ 6509 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 432+ 650B                                  // word an text haven't the same length, skip to next vocabulary entry
 433+ 650B 20 2C                            jr      nz, Find_DifferentLenght
 434+ 650D
 435+ 650D              Find_ThisWord:  // begin loop
 436+ 650D 23                                   inc     hl
 437+ 650E 13                                   inc     de
 438+ 650F 1A                                   ld      a, (de)
 439+ 6510                                      // case insensitive option - begin
 440+ 6510 C5                                   push    bc
 441+ 6511 E6 80                                and     $80                 // split A in msb and the rest
 442+ 6513 47                                   ld      b, a
 443+ 6514 1A                                   ld      a, (de)
 444+ 6515 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 445+ 6517 CD BD 64                             call    Case_Sensitive      // uppercase routine
 446+ 651A 4F                                   ld      c, a
 447+ 651B 7E                                   ld      a, (hl)
 448+ 651C CD BD 64                             call    Case_Sensitive      // uppercase routine
 449+ 651F A9                                   xor     c
 450+ 6520 A8                                   xor     b
 451+ 6521 C1                                   pop     bc
 452+ 6522                                      // case insensitive option - end
 453+ 6522 87                                   add     a                   // ignore msb during compare
 454+ 6523 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 455+ 6525
 456+ 6525                                  // loop back until last byte msb is found set
 457+ 6525                                  // that bit marks the ending char of this word
 458+ 6525 30 E6                            jr      nc, Find_ThisWord
 459+ 6527
 460+ 6527                                  // match found !
 461+ 6527 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 462+ 652A 19                                   add     hl, de
 463+ 652B E3                                   ex      (sp), hl            // CFA on stack and drop addr
 464+ 652C 08                                   ex      af, af'             // retrieve NFA byte (!)
 465+ 652D 5F                                   ld      e, a
 466+ 652E 16 00                                ld      d, 0
 467+ 6530
 468+ 6530
 469+ 6530 21 01 00                             ld      hl, 1
 470+ 6533                                      psh2
 470+ 6533 D5          >                push    de
 470+ 6534 E5          >                push    hl
 470+ 6535 DD E9       >                jp      (ix)
 471+ 6537
 472+ 6537              Find_DidntMatch: // didn't match (*)
 473+ 6537 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 474+ 6539
 475+ 6539              Find_DifferentLenght:
 476+ 6539                              // consume chars until the end of the word
 477+ 6539                              // that is last byte msb is found set
 478+ 6539 13                               inc     de
 479+ 653A 1A                               ld      a, (de)
 480+ 653B 87                               add     a, a
 481+ 653C 30 FB                        jr      nc, Find_DifferentLenght
 482+ 653E
 483+ 653E              Find_WordEnd:   // word-end  found (**)
 484+ 653E                              // take LFA and use it
 485+ 653E 13                           inc     de
 486+ 653F EB                           ex      de, hl
 487+ 6540 5E                           ld      e, (hl)
 488+ 6541 23                           inc     hl
 489+ 6542 56                           ld      d, (hl)
 490+ 6543 7A                           ld      a, d
 491+ 6544 B3                           or      e
 492+ 6545
 493+ 6545                          // loop until end of vocabulary
 494+ 6545 20 BC                    jr      nz, Find_VocabularyLoop
 495+ 6547
 496+ 6547 E1                       pop     hl              // with this, it leaves addr unchanged
 497+ 6548 21 00 00                 ld      hl, FALSE_FLAG
 498+ 654B
 499+ 654B                          psh1
 499+ 654B E5          >                push    hl
 499+ 654C DD E9       >                jp      (ix)
 500+ 654E
 501+ 654E              //  ______________________________________________________________________
 502+ 654E              //
 503+ 654E              // enclose      a c -- a  n1 n2 n3
 504+ 654E              // starting from a, using delimiter c, determines the offsets:
 505+ 654E              //   n1   the first character non-delimiter
 506+ 654E              //   n2   the first delimiter after the text
 507+ 654E              //   n3   the first character non enclosed.
 508+ 654E              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 509+ 654E              // an uncoditional delimiter.
 510+ 654E              // Examples:
 511+ 654E              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 512+ 654E              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 513+ 654E              // iii:	c  c  'nul'          -- 2  3  2
 514+ 654E                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 514+ 654E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 514+ 654E             >
 514+ 654E             >                // dummy db directives used to calculate length of namec
 514+ 654E 45 4E 43 4C >                db      "ENCLOSE"
 514+ 6552 4F 53 45    >
 514+ 6555             >len_NFA         defl    $ - temp_NFA
 514+ 6555             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 514+ 654E             >
 514+ 654E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 514+ 654F 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 514+ 6553 4F 53 45    >
 514+ 6556             >                org     $-1                 // alter last byte of Name just above to set
 514+ 6555 C5          >                db      {b $} | END_BIT     // msb as name end
 514+ 6556             >
 514+ 6556 F9 64       >                dw      last_NFA            // Link to previous definition Name
 514+ 6558             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 514+ 6558 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 514+ 6558 ~           >
 514+ 6558 ~           >
 514+ 6558             >                endif           ; ok        // for other definitions it "points" the correct handler
 514+ 6558             >                // Use of "; ok" to suppress "warning[fwdref]"
 514+ 6558             >
 514+ 6558             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 6558 D1                           pop     de                  //  e has the character
 516+ 6559 E1                           pop     hl                  // hl has the string address
 517+ 655A E5                           push    hl
 518+ 655B 7B                           ld      a, e
 519+ 655C 11 FF FF                     ld      de, -1              // let's start from -1
 520+ 655F 2B                           dec     hl
 521+ 6560              Enclose_NonDelimiter:
 522+ 6560                              // find first non delimiter
 523+ 6560 23                               inc     hl
 524+ 6561 13                               inc     de
 525+ 6562 BE                               cp      (hl)
 526+ 6563 28 FB                        jr      z, Enclose_NonDelimiter
 527+ 6565 D5                           push    de
 528+ 6566
 529+ 6566 C5                           push    bc                  // save Instruction Pointer
 530+ 6567
 531+ 6567 4F                           ld      c, a                // save char
 532+ 6568 7E                           ld      a, (hl)
 533+ 6569 A7                           and     a                   // stop if 0x00
 534+ 656A 20 07                        jr      nz, Enclose_NextChar
 535+ 656C
 536+ 656C                              /// case iii. no more character in string
 537+ 656C C1                               pop     bc                  // restore Instruction Pointer
 538+ 656D 13                               inc     de
 539+ 656E D5                               push    de
 540+ 656F 1B                               dec     de
 541+ 6570 D5                               push    de
 542+ 6571                                  next
 542+ 6571 DD E9       >                jp      (ix)
 543+ 6573              Enclose_NextChar:
 544+ 6573 79                               ld      a, c
 545+ 6574 23                               inc     hl
 546+ 6575 13                               inc     de
 547+ 6576 BE                               cp      (hl)
 548+ 6577 20 06                            jr      nz, Enclose_NonSeparator
 549+ 6579
 550+ 6579                                      // case i. first non enclosed
 551+ 6579 C1                                   pop     bc                  // restore Instruction Pointer
 552+ 657A D5                                   push    de
 553+ 657B 13                                   inc     de
 554+ 657C D5                                   push    de
 555+ 657D                                      next
 555+ 657D DD E9       >                jp      (ix)
 556+ 657F              Enclose_NonSeparator:
 557+ 657F 7E                               ld      a, (hl)
 558+ 6580 A7                               and     a
 559+ 6581 20 F0                        jr      nz, Enclose_NextChar
 560+ 6583
 561+ 6583                              // case ii. separator & terminator
 562+ 6583 C1                           pop     bc                  // restore Instruction Pointer
 563+ 6584 D5                           push    de
 564+ 6585 D5                           push    de
 565+ 6586                              next
 565+ 6586 DD E9       >                jp      (ix)
 566+ 6588
 567+ 6588              //  ______________________________________________________________________
 568+ 6588              //
 569+ 6588              // (map)        a2 a1 n c1 -- c2
 570+ 6588              // translate character c1 using mapping string a2 and a2
 571+ 6588              // if c1 is not present within string a1 then
 572+ 6588              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 573+ 6588                              New_Def C_MAP, "(MAP)", is_code, is_normal
 573+ 6588             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 573+ 6588             >
 573+ 6588             >                // dummy db directives used to calculate length of namec
 573+ 6588 28 4D 41 50 >                db      "(MAP)"
 573+ 658C 29          >
 573+ 658D             >len_NFA         defl    $ - temp_NFA
 573+ 658D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 573+ 6588             >
 573+ 6588 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 573+ 6589 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 573+ 658D 29          >
 573+ 658E             >                org     $-1                 // alter last byte of Name just above to set
 573+ 658D A9          >                db      {b $} | END_BIT     // msb as name end
 573+ 658E             >
 573+ 658E 4E 65       >                dw      last_NFA            // Link to previous definition Name
 573+ 6590             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 573+ 6590 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 573+ 6590 ~           >
 573+ 6590 ~           >
 573+ 6590             >                endif           ; ok        // for other definitions it "points" the correct handler
 573+ 6590             >                // Use of "; ok" to suppress "warning[fwdref]"
 573+ 6590             >
 573+ 6590             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 574+ 6590 D9                           exx
 575+ 6591 E1                           pop     hl
 576+ 6592 7D                           ld      a, l
 577+ 6593 C1                           pop     bc
 578+ 6594 E1                           pop     hl
 579+ 6595 50                           ld      d, b
 580+ 6596 59                           ld      e, c
 581+ 6597 ED B1                        cpir
 582+ 6599 E1                           pop     hl
 583+ 659A 20 05                        jr      nz, C_Map_Then
 583+ 659C
 584+ 659C 19                               add     hl, de
 585+ 659D 2B                               dec     hl
 586+ 659E ED 42                            sbc     hl, bc
 587+ 65A0 7E                               ld      a, (hl)
 588+ 65A1              C_Map_Then:
 589+ 65A1 6F                           ld      l, a
 590+ 65A2 26 00                        ld      h, 0
 591+ 65A4 E5                           push    hl
 592+ 65A5 D9                           exx
 593+ 65A6                              next
 593+ 65A6 DD E9       >                jp      (ix)
 594+ 65A8
 595+ 65A8              //  ______________________________________________________________________
 596+ 65A8              //
 597+ 65A8              // (compare)    a1 a2 n -- b
 598+ 65A8              // this word performs a lexicographic compare of n bytes of text at address a1
 599+ 65A8              // with n bytes of text at address a2. It returns numeric a value:
 600+ 65A8              //  0 : if strings are equal
 601+ 65A8              // +1 : if string at a1 greater than string at a2
 602+ 65A8              // -1 : if string at a1 less than string at a2
 603+ 65A8              // strings can be 256 bytes in length at most.
 604+ 65A8                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 604+ 65A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 604+ 65A8             >
 604+ 65A8             >                // dummy db directives used to calculate length of namec
 604+ 65A8 28 43 4F 4D >                db      "(COMPARE)"
 604+ 65AC 50 41 52 45 >
 604+ 65B0 29          >
 604+ 65B1             >len_NFA         defl    $ - temp_NFA
 604+ 65B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 604+ 65A8             >
 604+ 65A8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 604+ 65A9 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 604+ 65AD 50 41 52 45 >
 604+ 65B1 29          >
 604+ 65B2             >                org     $-1                 // alter last byte of Name just above to set
 604+ 65B1 A9          >                db      {b $} | END_BIT     // msb as name end
 604+ 65B2             >
 604+ 65B2 88 65       >                dw      last_NFA            // Link to previous definition Name
 604+ 65B4             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 604+ 65B4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 604+ 65B4 ~           >
 604+ 65B4 ~           >
 604+ 65B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 604+ 65B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 604+ 65B4             >
 604+ 65B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 605+ 65B4 D9                           exx
 606+ 65B5 E1                           pop     hl                  // Number of bytes
 607+ 65B6 7D                           ld      a, l
 608+ 65B7 E1                           pop     hl                  // hl points string a2
 609+ 65B8 D1                           pop     de                  // hl points string a1
 610+ 65B9              //              push    bc                  // Instruction pointer on stack
 611+ 65B9 47                           ld      b, a
 612+ 65BA              C_Compare_Loop:
 613+ 65BA 7E                               ld      a, (hl)
 614+ 65BB CD BD 64                         call    Case_Sensitive
 615+ 65BE 4F                               ld      c, a
 616+ 65BF 1A                               ld      a, (de)
 617+ 65C0 CD BD 64                         call    Case_Sensitive
 618+ 65C3 B9                               cp      c
 619+ 65C4 13                               inc     de
 620+ 65C5 23                               inc     hl
 621+ 65C6 28 0E                            jr      z, C_Compare_Equal
 622+ 65C8 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 623+ 65CA 21 01 00                                 ld      hl, 1               // a1 gt a2
 624+ 65CD 18 03                                jr      C_Compare_Then      // Else
 625+ 65CF              C_Compare_NotLessThan:
 626+ 65CF 21 FF FF                                 ld      hl, -1              // a1 lt a2
 627+ 65D2              C_Compare_Then:                                 // Endif
 628+ 65D2              //                      pop     bc              // restore Instruction Pointer
 629+ 65D2 E5                                   push    hl
 630+ 65D3 D9                                   exx
 631+ 65D4
 632+ 65D4                                      next
 632+ 65D4 DD E9       >                jp      (ix)
 633+ 65D6
 634+ 65D6              C_Compare_Equal:
 635+ 65D6 10 E2                        djnz    C_Compare_Loop
 636+ 65D8 21 00 00                     ld      hl, 0               // a1 eq a2
 637+ 65DB              //              pop     bc                  // restore Instruction Pointer
 638+ 65DB E5                           push    hl
 639+ 65DC D9                           exx
 640+ 65DD
 641+ 65DD                              next
 641+ 65DD DD E9       >                jp      (ix)
 642+ 65DF
 643+ 65DF              //  ______________________________________________________________________
 644+ 65DF              //
 645+ 65DF              // emitc        c --
 646+ 65DF              // low level emit, calls ROM routine at #10 to send a character to
 647+ 65DF              // the the current channel (see SELECT to change stream-channel)
 648+ 65DF                              New_Def EMITC, "EMITC", is_code, is_normal
 648+ 65DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 648+ 65DF             >
 648+ 65DF             >                // dummy db directives used to calculate length of namec
 648+ 65DF 45 4D 49 54 >                db      "EMITC"
 648+ 65E3 43          >
 648+ 65E4             >len_NFA         defl    $ - temp_NFA
 648+ 65E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 648+ 65DF             >
 648+ 65DF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 648+ 65E0 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 648+ 65E4 43          >
 648+ 65E5             >                org     $-1                 // alter last byte of Name just above to set
 648+ 65E4 C3          >                db      {b $} | END_BIT     // msb as name end
 648+ 65E5             >
 648+ 65E5 A8 65       >                dw      last_NFA            // Link to previous definition Name
 648+ 65E7             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 648+ 65E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 648+ 65E7 ~           >
 648+ 65E7 ~           >
 648+ 65E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 648+ 65E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 648+ 65E7             >
 648+ 65E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 649+ 65E7 E1                           pop     hl
 650+ 65E8 7D                           ld      a, l
 651+ 65E9              Emitc_Ptr:
 652+ 65E9 C5                           push    bc
 653+ 65EA DD E5                        push    ix
 654+ 65EC D7                           rst     $10
 655+ 65ED DD E1                        pop     ix
 656+ 65EF C1                           pop     bc
 657+ 65F0 3E FF                        ld      a, 255            // max possible
 658+ 65F2 32 8C 5C                     ld      (SCR_CT), a
 659+ 65F5
 660+ 65F5                              next
 660+ 65F5 DD E9       >                jp      (ix)
 661+ 65F7
 662+ 65F7              //  ______________________________________________________________________
 663+ 65F7              //
 664+ 65F7              // cr           --
 665+ 65F7              // send a CR via EMITC
 666+ 65F7                              New_Def CR, "CR", is_code, is_normal
 666+ 65F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 666+ 65F7             >
 666+ 65F7             >                // dummy db directives used to calculate length of namec
 666+ 65F7 43 52       >                db      "CR"
 666+ 65F9             >len_NFA         defl    $ - temp_NFA
 666+ 65F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 666+ 65F7             >
 666+ 65F7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 666+ 65F8 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 666+ 65FA             >                org     $-1                 // alter last byte of Name just above to set
 666+ 65F9 D2          >                db      {b $} | END_BIT     // msb as name end
 666+ 65FA             >
 666+ 65FA DF 65       >                dw      last_NFA            // Link to previous definition Name
 666+ 65FC             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 666+ 65FC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 666+ 65FC ~           >
 666+ 65FC ~           >
 666+ 65FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 666+ 65FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 666+ 65FC             >
 666+ 65FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 667+ 65FC
 668+ 65FC 3E 0D                        ld      a, CR_CHAR
 669+ 65FE 18 E9                        jr      Emitc_Ptr
 670+ 6600
 671+ 6600              Emitc_Vec:
 672+ 6600 43 66                        dw      C_Emit_Printable  // comma
 673+ 6602 49 66                        dw      C_Emit_Bel        // bel
 674+ 6604 43 66                        dw      C_Emit_Printable  // bs
 675+ 6606 5E 66                        dw      C_Emit_Tab        // tab
 676+ 6608 43 66                        dw      C_Emit_Printable  // cr
 677+ 660A 64 66                        dw      C_Emit_NL         // lf (unix newline)
 678+ 660C 43 66                        dw      C_Emit_Printable  // blank
 679+ 660E 43 66                        dw      C_Emit_Printable  // blank
 680+ 6610
 681+ 6610              Emit_Selector_Start:
 682+ 6610 06                           db      $06                 // comma
 683+ 6611 07                           db      $07                 // bel
 684+ 6612 08                           db      $08                 // bs
 685+ 6613 09                           db      $09                 // tab
 686+ 6614 0D                           db      $0D                 // cr
 687+ 6615 0A                           db      $0A                 // lf (unix newline)
 688+ 6616 20                           db      $20
 689+ 6617              Emit_Selector_End:
 690+ 6617 20                           db      $20
 691+ 6618
 692+ 6618              //  ______________________________________________________________________
 693+ 6618              //
 694+ 6618              // (?emit)      c1 -- c2 | c1
 695+ 6618              // decode a character to be sent via EMIT
 696+ 6618              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 697+ 6618              // the routine should resolve anything and convert the character anyway.
 698+ 6618                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 698+ 6618             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 698+ 6618             >
 698+ 6618             >                // dummy db directives used to calculate length of namec
 698+ 6618 28 3F 45 4D >                db      "(?EMIT)"
 698+ 661C 49 54 29    >
 698+ 661F             >len_NFA         defl    $ - temp_NFA
 698+ 661F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 698+ 6618             >
 698+ 6618 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 698+ 6619 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 698+ 661D 49 54 29    >
 698+ 6620             >                org     $-1                 // alter last byte of Name just above to set
 698+ 661F A9          >                db      {b $} | END_BIT     // msb as name end
 698+ 6620             >
 698+ 6620 F7 65       >                dw      last_NFA            // Link to previous definition Name
 698+ 6622             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 698+ 6622 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 698+ 6622 ~           >
 698+ 6622 ~           >
 698+ 6622             >                endif           ; ok        // for other definitions it "points" the correct handler
 698+ 6622             >                // Use of "; ok" to suppress "warning[fwdref]"
 698+ 6622             >
 698+ 6622             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 699+ 6622 D1                           pop     de
 700+ 6623 7B                           ld      a, e                //  de has c1
 701+ 6624 E6 7F                        and     $7F                 // 7-bit ascii only
 702+ 6626 C5                           push    bc                  // save Instruction Pointer
 703+ 6627 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 704+ 662A 21 17 66                     ld      hl, Emit_Selector_End
 705+ 662D ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 706+ 662F 20 0B                        jr      nz, C_Emit_Not_Found
 707+ 6631                                  // Found then decode it
 708+ 6631 21 00 66                         ld      hl, Emitc_Vec
 709+ 6634 09                               add     hl, bc
 710+ 6635 09                               add     hl, bc
 711+ 6636 5E                               ld      e, (hl)
 712+ 6637 23                               inc     hl
 713+ 6638 56                               ld      d, (hl)
 714+ 6639 EB                               ex      de, hl
 715+ 663A C1                               pop     bc                  // restore Instruction Pointer
 716+ 663B E9                               jp      (hl)                // one of the following labels
 717+ 663C              C_Emit_Not_Found:
 718+ 663C C1                           pop     bc                  // restore Instruction Pointer
 719+ 663D FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 720+ 663F 30 02                        jr      nc, C_Emit_Printable
 721+ 6641 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 722+ 6643              C_Emit_Printable:
 723+ 6643 6F                           ld      l, a
 724+ 6644 26 00                        ld      h, 0
 725+ 6646
 726+ 6646                              psh1
 726+ 6646 E5          >                push    hl
 726+ 6647 DD E9       >                jp      (ix)
 727+ 6649
 728+ 6649              C_Emit_Bel:
 729+ 6649 C5                           push    bc                  // save Instruction Pointer
 730+ 664A 11 00 01                     ld      de, $0100
 731+ 664D 21 00 02                     ld      hl, $0200
 732+ 6650 DD E5                        push    ix                  // save Next Pointer
 733+ 6652 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 734+ 6655 DD E1                        pop     ix                  // restore Next Pointer
 735+ 6657 C1                           pop     bc                  // restore Instruction Pointer
 736+ 6658 21 00 00                     ld      hl, NUL_CHAR
 737+ 665B
 738+ 665B                              psh1
 738+ 665B E5          >                push    hl
 738+ 665C DD E9       >                jp      (ix)
 739+ 665E
 740+ 665E 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 741+ 6661
 742+ 6661                              psh1
 742+ 6661 E5          >                push    hl
 742+ 6662 DD E9       >                jp      (ix)
 743+ 6664
 744+ 6664 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 745+ 6667
 746+ 6667                              psh1
 746+ 6667 E5          >                push    hl
 746+ 6668 DD E9       >                jp      (ix)
 747+ 666A
 748+ 666A              //  ______________________________________________________________________
 749+ 666A
 750+ 666A              Key_Table:
 751+ 666A E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 752+ 666B C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 753+ 666C CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 754+ 666D CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 755+ 666E CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 756+ 666F C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 757+ 6670 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 758+ 6671 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 759+ 6672 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 760+ 6673 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 761+ 6674 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 762+ 6675              Key_MapTo:
 763+ 6675 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 764+ 6676 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 765+ 6677 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 766+ 6678 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 767+ 6679 5D                           db      $5D                 //  6: SYMBOL+U : ]
 768+ 667A 5B                           db      $5B                 //  5: SYMBOL+Y : [
 769+ 667B 7D                           db      $7D                 //  4: SYMBOL+G : }
 770+ 667C 7B                           db      $7B                 //  3: SYMBOL+F : {
 771+ 667D 5C                           db      $5C                 //  2: SYMBOl+D : //
 772+ 667E 7C                           db      $7C                 //  1: SYMBOL+S : |
 773+ 667F 7E                           db      $7E                 //  0: SYMBOL+A : ~
 774+ 6680
 775+ 6680              //  ______________________________________________________________________
 776+ 6680              //
 777+ 6680              // key          -- c
 778+ 6680              // wait for a keypress
 779+ 6680              // This definition need Standard ROM Interrupt to be served
 780+ 6680
 781+ 6680                              New_Def KEY, "KEY", is_code, is_normal
 781+ 6680             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 781+ 6680             >
 781+ 6680             >                // dummy db directives used to calculate length of namec
 781+ 6680 4B 45 59    >                db      "KEY"
 781+ 6683             >len_NFA         defl    $ - temp_NFA
 781+ 6683             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 781+ 6680             >
 781+ 6680 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 781+ 6681 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 781+ 6684             >                org     $-1                 // alter last byte of Name just above to set
 781+ 6683 D9          >                db      {b $} | END_BIT     // msb as name end
 781+ 6684             >
 781+ 6684 18 66       >                dw      last_NFA            // Link to previous definition Name
 781+ 6686             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 781+ 6686 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 781+ 6686 ~           >
 781+ 6686 ~           >
 781+ 6686             >                endif           ; ok        // for other definitions it "points" the correct handler
 781+ 6686             >                // Use of "; ok" to suppress "warning[fwdref]"
 781+ 6686             >
 781+ 6686             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 782+ 6686
 783+ 6686 C5                           push    bc                  // save Instruction Pointer
 784+ 6687 DD E5                        push    ix
 785+ 6689
 786+ 6689 ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 787+ 668D 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 788+ 6690 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 789+ 6694
 790+ 6694              Key_Wait:
 791+ 6694 76                               halt
 792+ 6695 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 793+ 6697 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 794+ 669A
 795+ 669A                                  // software-flash: flips face every 320 ms
 796+ 669A 3E 10                            ld      a, $10              // Timing based
 797+ 669C FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 798+ 669F
 799+ 669F 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 800+ 66A2 20 0C                            jr      nz, Key_Cursor
 801+ 66A4 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 802+ 66A7 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 803+ 66AB 28 03                                jr      z, Key_Cursor
 804+ 66AD 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 805+ 66B0              Key_Cursor:
 806+ 66B0 D7                               rst     $10
 807+ 66B1 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 808+ 66B3 D7                               rst     $10
 809+ 66B4
 810+ 66B4 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 811+ 66B8 28 DA                        jr      z, Key_Wait
 812+ 66BA
 813+ 66BA 76                           halt    // this is to sync flashing cursor.
 814+ 66BB
 815+ 66BB 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 816+ 66BD D7                           rst     $10
 817+ 66BE 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 818+ 66C0 D7                           rst     $10
 819+ 66C1 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 820+ 66C4
 821+ 66C4                              // decode character from above table
 822+ 66C4 21 6A 66                     ld      hl, Key_Table
 823+ 66C7 01 0B 00                     ld      bc, $000B
 824+ 66CA ED B1                        cpir
 825+ 66CC 20 05                        jr      nz, Key_DontMap
 826+ 66CE 21 75 66                         ld      hl, Key_MapTo
 827+ 66D1 09                               add     hl, bc
 828+ 66D2 7E                               ld      a, (hl)
 829+ 66D3 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 830+ 66D5 20 09                        jr      nz, Key_NoCapsLock
 831+ 66D7 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 832+ 66DA 7E                               ld      a, (hl)
 833+ 66DB EE 08                            xor     $08
 834+ 66DD 77                               ld      (hl), a
 835+ 66DE 3E 00                            ld      a, NUL_CHAR
 836+ 66E0 6F           Key_NoCapsLock: ld      l, a
 837+ 66E1 26 00                        ld      h, 0                // Prepare TOS
 838+ 66E3
 839+ 66E3 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 840+ 66E6 1F                           rra
 841+ 66E7 1F                           rra
 842+ 66E8 1F                           rra
 843+ 66E9 F6 18                        or      $18                 // quick'n'dirty click
 844+ 66EB D3 FE                        out     ($fe), a
 845+ 66ED 06 00                        ld      b, 0
 846+ 66EF 10 FE                        djnz    $                   // wait loop
 847+ 66F1 EE 18                        xor     $18
 848+ 66F3 D3 FE                        out     ($fe), a
 849+ 66F5
 850+ 66F5 ED 7B 92 63                  ld      sp, (SP_Saved)
 851+ 66F9
 852+ 66F9 DD E1                        pop     ix
 853+ 66FB C1                           pop     bc                  // Restore Instruction Pointer
 854+ 66FC
 855+ 66FC                              psh1
 855+ 66FC E5          >                push    hl
 855+ 66FD DD E9       >                jp      (ix)
 856+ 66FF
 857+ 66FF              //  ______________________________________________________________________
 858+ 66FF              //
 859+ 66FF              // ?terminal    -- FALSE | TRUE
 860+ 66FF              // test for BREAK keypress
 861+ 66FF                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 861+ 66FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 861+ 66FF             >
 861+ 66FF             >                // dummy db directives used to calculate length of namec
 861+ 66FF 3F 54 45 52 >                db      "?TERMINAL"
 861+ 6703 4D 49 4E 41 >
 861+ 6707 4C          >
 861+ 6708             >len_NFA         defl    $ - temp_NFA
 861+ 6708             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 861+ 66FF             >
 861+ 66FF 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 861+ 6700 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 861+ 6704 4D 49 4E 41 >
 861+ 6708 4C          >
 861+ 6709             >                org     $-1                 // alter last byte of Name just above to set
 861+ 6708 CC          >                db      {b $} | END_BIT     // msb as name end
 861+ 6709             >
 861+ 6709 80 66       >                dw      last_NFA            // Link to previous definition Name
 861+ 670B             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 861+ 670B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 861+ 670B ~           >
 861+ 670B ~           >
 861+ 670B             >                endif           ; ok        // for other definitions it "points" the correct handler
 861+ 670B             >                // Use of "; ok" to suppress "warning[fwdref]"
 861+ 670B             >
 861+ 670B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 862+ 670B D9                           exx
 863+ 670C 01 FE 7F                     ld      bc, $7ffe
 864+ 670F ED 50                        in      d, (c)
 865+ 6711 41                           ld      b, c
 866+ 6712 ED 78                        in      a, (c)
 867+ 6714 B2                           or       d
 868+ 6715 1F                           rra
 869+ 6716 3F                           ccf
 870+ 6717 ED 62                        sbc     hl, hl
 871+ 6719 E5                           push    hl
 872+ 671A D9                           exx
 873+ 671B                              next
 873+ 671B DD E9       >                jp      (ix)
 874+ 671D
 875+ 671D
 876+ 671D              //  ______________________________________________________________________
 877+ 671D              //
 878+ 671D              // inkey        -- c | 0
 879+ 671D              // call ROM inkey$ routine, returns c or "zero".
 880+ 671D
 881+ 671D                              New_Def INKEY, "INKEY", is_code, is_normal
 881+ 671D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 881+ 671D             >
 881+ 671D             >                // dummy db directives used to calculate length of namec
 881+ 671D 49 4E 4B 45 >                db      "INKEY"
 881+ 6721 59          >
 881+ 6722             >len_NFA         defl    $ - temp_NFA
 881+ 6722             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 881+ 671D             >
 881+ 671D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 881+ 671E 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 881+ 6722 59          >
 881+ 6723             >                org     $-1                 // alter last byte of Name just above to set
 881+ 6722 D9          >                db      {b $} | END_BIT     // msb as name end
 881+ 6723             >
 881+ 6723 FF 66       >                dw      last_NFA            // Link to previous definition Name
 881+ 6725             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 881+ 6725 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 881+ 6725 ~           >
 881+ 6725 ~           >
 881+ 6725             >                endif           ; ok        // for other definitions it "points" the correct handler
 881+ 6725             >                // Use of "; ok" to suppress "warning[fwdref]"
 881+ 6725             >
 881+ 6725             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 882+ 6725
 883+ 6725 C5                           push    bc
 884+ 6726 ED 73 92 63                  ld      (SP_Saved), sp
 885+ 672A 31 61 63                     ld      sp, Cold_origin - 5
 886+ 672D DD E5                        push    ix
 887+ 672F CD E6 15                     call    $15E6                   // instead of 15E9
 888+ 6732 DD E1                        pop     ix
 889+ 6734 ED 7B 92 63                  ld      sp, (SP_Saved)
 890+ 6738 6F                           ld      l, a
 891+ 6739 26 00                        ld      h, 0
 892+ 673B C1                           pop     bc
 893+ 673C                              psh1
 893+ 673C E5          >                push    hl
 893+ 673D DD E9       >                jp      (ix)
 894+ 673F
 895+ 673F              //  ______________________________________________________________________
 896+ 673F              //
 897+ 673F              // select      n --
 898+ 673F              // selects the given channel number
 899+ 673F
 900+ 673F                              New_Def SELECT, "SELECT", is_code, is_normal
 900+ 673F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 900+ 673F             >
 900+ 673F             >                // dummy db directives used to calculate length of namec
 900+ 673F 53 45 4C 45 >                db      "SELECT"
 900+ 6743 43 54       >
 900+ 6745             >len_NFA         defl    $ - temp_NFA
 900+ 6745             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 900+ 673F             >
 900+ 673F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 900+ 6740 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 900+ 6744 43 54       >
 900+ 6746             >                org     $-1                 // alter last byte of Name just above to set
 900+ 6745 D4          >                db      {b $} | END_BIT     // msb as name end
 900+ 6746             >
 900+ 6746 1D 67       >                dw      last_NFA            // Link to previous definition Name
 900+ 6748             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 900+ 6748 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 900+ 6748 ~           >
 900+ 6748 ~           >
 900+ 6748             >                endif           ; ok        // for other definitions it "points" the correct handler
 900+ 6748             >                // Use of "; ok" to suppress "warning[fwdref]"
 900+ 6748             >
 900+ 6748             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 901+ 6748 E1                           pop     hl
 902+ 6749 C5                           push    bc
 903+ 674A 7D                           ld      a, l
 904+ 674B ED 73 92 63                  ld      (SP_Saved), sp
 905+ 674F 31 61 63                     ld      sp, Cold_origin - 5
 906+ 6752 DD E5                        push    ix
 907+ 6754 CD 01 16                     call    $1601
 908+ 6757 DD E1                        pop     ix
 909+ 6759 ED 7B 92 63                  ld      sp, (SP_Saved)
 910+ 675D C1                           pop     bc
 911+ 675E
 912+ 675E                              next
 912+ 675E DD E9       >                jp      (ix)
 913+ 6760
 914+ 6760              //  ______________________________________________________________________
 915+ 6760              //
 916+ 6760              // ZX Spectrum Next - Low Level disk primitives.
 917+ 6760              // this include is "here" for backward compatibility
 918+ 6760
 919+ 6760                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
   1++6760              //  ______________________________________________________________________
   2++6760              //
   3++6760              //  next-opt.asm
   4++6760              //
   5++6760              //  ZX Spectrum Next - peculiar definitions
   6++6760              //  ______________________________________________________________________
   7++6760
   8++6760              //  ______________________________________________________________________
   9++6760              //
  10++6760              // f_seek       d u -- f
  11++6760              // Seek to position d in file-handle u.
  12++6760              // Return a false-flag 0 on success, True flag on error
  13++6760                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++6760             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++6760             >
  13++6760             >                // dummy db directives used to calculate length of namec
  13++6760 46 5F 53 45 >                db      "F_SEEK"
  13++6764 45 4B       >
  13++6766             >len_NFA         defl    $ - temp_NFA
  13++6766             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++6760             >
  13++6760 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++6761 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++6765 45 4B       >
  13++6767             >                org     $-1                 // alter last byte of Name just above to set
  13++6766 CB          >                db      {b $} | END_BIT     // msb as name end
  13++6767             >
  13++6767 3F 67       >                dw      last_NFA            // Link to previous definition Name
  13++6769             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++6769 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++6769 ~           >
  13++6769 ~           >
  13++6769             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++6769             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++6769             >
  13++6769             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++6769 E1                           pop     hl                  // file-handle
  15++676A 7D                           ld      a, l                // file-handle
  16++676B 60                           ld      h, b                // save Intruction Pointer
  17++676C 69                           ld      l, c
  18++676D C1                           pop     bc                  // bc has high-word of d
  19++676E D1                           pop     de
  20++676F DD E5                        push    ix
  21++6771 E5                           push    hl                  // save Instruction Pointer
  22++6772 DD 21 00 00                  ld      ix, 0
  23++6776 CF                           rst     $08
  24++6777 9F                           db      $9F
  25++6778              F_Seek_Exit:
  26++6778 C1                           pop     bc                  // restore Instruction Pointer
  27++6779 DD E1                        pop     ix
  28++677B ED 62                        sbc     hl, hl              // to get 0 or -1
  29++677D
  30++677D                              psh1
  30++677D E5          >                push    hl
  30++677E DD E9       >                jp      (ix)
  31++6780
  32++6780              //  ______________________________________________________________________
  33++6780              //
  34++6780              // f_close      u -- f
  35++6780              // Close file-handle u.
  36++6780              // Return 0 on success, True flag on error
  37++6780
  38++6780                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++6780             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++6780             >
  38++6780             >                // dummy db directives used to calculate length of namec
  38++6780 46 5F 43 4C >                db      "F_CLOSE"
  38++6784 4F 53 45    >
  38++6787             >len_NFA         defl    $ - temp_NFA
  38++6787             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++6780             >
  38++6780 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++6781 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++6785 4F 53 45    >
  38++6788             >                org     $-1                 // alter last byte of Name just above to set
  38++6787 C5          >                db      {b $} | END_BIT     // msb as name end
  38++6788             >
  38++6788 60 67       >                dw      last_NFA            // Link to previous definition Name
  38++678A             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++678A ~           >                call    runcode ; ok        // for primitive definitions  actual code
  38++678A ~           >
  38++678A ~           >
  38++678A             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++678A             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++678A             >
  38++678A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++678A
  40++678A E1                           pop     hl
  41++678B 7D                           ld      a, l                // file-handle
  42++678C DD E5                        push    ix
  43++678E C5                           push    bc                  // Save Instruction pointer
  44++678F CF                           rst     $08
  45++6790 9B                           db      $9B
  46++6791 18 E5                        jr      F_Seek_Exit
  47++6793              //              pop     bc
  48++6793              //              pop     ix
  49++6793              //              sbc     hl, hl
  50++6793              //              psh1
  51++6793
  52++6793              //  ______________________________________________________________________
  53++6793              //
  54++6793              // f_sync      u -- f
  55++6793              // Close file-handle u.
  56++6793              // Return 0 on success, True flag on error
  57++6793
  58++6793                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++6793             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++6793             >
  58++6793             >                // dummy db directives used to calculate length of namec
  58++6793 46 5F 53 59 >                db      "F_SYNC"
  58++6797 4E 43       >
  58++6799             >len_NFA         defl    $ - temp_NFA
  58++6799             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++6793             >
  58++6793 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++6794 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++6798 4E 43       >
  58++679A             >                org     $-1                 // alter last byte of Name just above to set
  58++6799 C3          >                db      {b $} | END_BIT     // msb as name end
  58++679A             >
  58++679A 80 67       >                dw      last_NFA            // Link to previous definition Name
  58++679C             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++679C ~           >                call    runcode ; ok        // for primitive definitions  actual code
  58++679C ~           >
  58++679C ~           >
  58++679C             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++679C             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++679C             >
  58++679C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++679C E1                           pop     hl
  60++679D 7D                           ld      a, l                // file-handle
  61++679E DD E5                        push    ix
  62++67A0 C5                           push    bc
  63++67A1 CF                           rst     $08
  64++67A2 9C                           db      $9C
  65++67A3 18 D3                        jr      F_Seek_Exit
  66++67A5              //              pop     bc
  67++67A5              //              pop     ix
  68++67A5              //              sbc     hl, hl
  69++67A5              //              psh1
  70++67A5
  71++67A5              //  ______________________________________________________________________
  72++67A5              //
  73++67A5              // f_fgetpos    u -- d f
  74++67A5              // Seek to position d in file-handle u.
  75++67A5              // Return a false-flag 0 on success, True flag on error
  76++67A5                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++67A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++67A5             >
  76++67A5             >                // dummy db directives used to calculate length of namec
  76++67A5 46 5F 46 47 >                db      "F_FGETPOS"
  76++67A9 45 54 50 4F >
  76++67AD 53          >
  76++67AE             >len_NFA         defl    $ - temp_NFA
  76++67AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++67A5             >
  76++67A5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++67A6 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++67AA 45 54 50 4F >
  76++67AE 53          >
  76++67AF             >                org     $-1                 // alter last byte of Name just above to set
  76++67AE D3          >                db      {b $} | END_BIT     // msb as name end
  76++67AF             >
  76++67AF 93 67       >                dw      last_NFA            // Link to previous definition Name
  76++67B1             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++67B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  76++67B1 ~           >
  76++67B1 ~           >
  76++67B1             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++67B1             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++67B1             >
  76++67B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++67B1 E1                           pop     hl
  78++67B2 7D                           ld      a, l                // file-handle
  79++67B3 DD E5                        push    ix
  80++67B5 C5                           push    bc
  81++67B6 CF                           rst     $08
  82++67B7 A0                           db      $A0
  83++67B8 E1                           pop     hl                  // restore Instruction Pointer
  84++67B9 DD E1                        pop     ix
  85++67BB D5                           push    de
  86++67BC C5                           push    bc
  87++67BD 44                           ld      b, h                // restore Instruction Pointer
  88++67BE 4D                           ld      c, l
  89++67BF ED 62                        sbc     hl, hl
  90++67C1
  91++67C1                              psh1
  91++67C1 E5          >                push    hl
  91++67C2 DD E9       >                jp      (ix)
  92++67C4
  93++67C4              //  ______________________________________________________________________
  94++67C4              //
  95++67C4              // f_read       a b u -- n f
  96++67C4              // Read b bytes from file-handle u to address a
  97++67C4              // Return the actual number n of bytes read
  98++67C4              // Return 0 on success, True flag on error
  99++67C4                              New_Def F_READ, "F_READ", is_code, is_normal
  99++67C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++67C4             >
  99++67C4             >                // dummy db directives used to calculate length of namec
  99++67C4 46 5F 52 45 >                db      "F_READ"
  99++67C8 41 44       >
  99++67CA             >len_NFA         defl    $ - temp_NFA
  99++67CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++67C4             >
  99++67C4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++67C5 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++67C9 41 44       >
  99++67CB             >                org     $-1                 // alter last byte of Name just above to set
  99++67CA C4          >                db      {b $} | END_BIT     // msb as name end
  99++67CB             >
  99++67CB A5 67       >                dw      last_NFA            // Link to previous definition Name
  99++67CD             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++67CD ~           >                call    runcode ; ok        // for primitive definitions  actual code
  99++67CD ~           >
  99++67CD ~           >
  99++67CD             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++67CD             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++67CD             >
  99++67CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++67CD
 101++67CD 50                           ld      d, b
 102++67CE 59                           ld      e, c
 103++67CF E1                           pop     hl
 104++67D0 7D                           ld      a, l                // file-handle
 105++67D1 C1                           pop     bc                  // bc has bytes to read
 106++67D2 DD E3                        ex      (sp), ix            // ix has address
 107++67D4 D5                           push    de                  // Save Instruction pointer
 108++67D5 CF                           rst     $08
 109++67D6 9D                           db      $9D
 110++67D7              F_Read_Exit:
 111++67D7 C1                           pop     bc                  // Restore Instruction pointer
 112++67D8 DD E1                        pop     ix                  // Restore ix
 113++67DA D5                           push    de                  // bytes written
 114++67DB ED 62                        sbc     hl, hl
 115++67DD
 116++67DD                              psh1
 116++67DD E5          >                push    hl
 116++67DE DD E9       >                jp      (ix)
 117++67E0
 118++67E0              //  ______________________________________________________________________
 119++67E0              //
 120++67E0              // f_write      a b u -- n f
 121++67E0              // Write bytes currently stored at address a to file-handle u.
 122++67E0              // Return the actual n bytes written and 0 on success, True flag on error.
 123++67E0                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++67E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++67E0             >
 123++67E0             >                // dummy db directives used to calculate length of namec
 123++67E0 46 5F 57 52 >                db      "F_WRITE"
 123++67E4 49 54 45    >
 123++67E7             >len_NFA         defl    $ - temp_NFA
 123++67E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++67E0             >
 123++67E0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++67E1 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++67E5 49 54 45    >
 123++67E8             >                org     $-1                 // alter last byte of Name just above to set
 123++67E7 C5          >                db      {b $} | END_BIT     // msb as name end
 123++67E8             >
 123++67E8 C4 67       >                dw      last_NFA            // Link to previous definition Name
 123++67EA             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++67EA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 123++67EA ~           >
 123++67EA ~           >
 123++67EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++67EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++67EA             >
 123++67EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++67EA
 125++67EA 50                           ld      d, b
 126++67EB 59                           ld      e, c
 127++67EC E1                           pop     hl
 128++67ED 7D                           ld      a, l                // file-handle
 129++67EE C1                           pop     bc                  // bc has bytes to read
 130++67EF DD E3                        ex      (sp), ix            // ix has address
 131++67F1 D5                           push    de                  // Save Instruction pointer
 132++67F2 CF                           rst     $08
 133++67F3 9E                           db      $9E
 134++67F4 18 E1                        jr F_Read_Exit
 135++67F6              //              pop     bc                  // Restore Instruction pointer
 136++67F6              //              pop     ix                  // Restore ix
 137++67F6              //              push    de                  // bytes written
 138++67F6              //              sbc     hl, hl
 139++67F6              //
 140++67F6              //              psh1
 141++67F6
 142++67F6              //  ______________________________________________________________________
 143++67F6              //
 144++67F6              // f_open       a1 a2 b -- u f
 145++67F6              // open a file
 146++67F6              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++67F6              // a2 is address to an 8-byte header data used in some cases.
 148++67F6              // b is access mode-byte, that is a combination of:
 149++67F6              // any/all of:
 150++67F6              //   esx_mode_read          $01 request read access
 151++67F6              //   esx_mode_write         $02 request write access
 152++67F6              //   esx_mode_use_header    $40 read/write +3DOS header
 153++67F6              // plus one of:
 154++67F6              //   esx_mode_open_exist    $00 only open existing file
 155++67F6              //   esx_mode_open_creat    $08 open existing or create file
 156++67F6              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++67F6              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++67F6              // Return file-handle u and 0 on success, True flag on error
 159++67F6                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++67F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++67F6             >
 159++67F6             >                // dummy db directives used to calculate length of namec
 159++67F6 46 5F 4F 50 >                db      "F_OPEN"
 159++67FA 45 4E       >
 159++67FC             >len_NFA         defl    $ - temp_NFA
 159++67FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++67F6             >
 159++67F6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++67F7 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++67FB 45 4E       >
 159++67FD             >                org     $-1                 // alter last byte of Name just above to set
 159++67FC CE          >                db      {b $} | END_BIT     // msb as name end
 159++67FD             >
 159++67FD E0 67       >                dw      last_NFA            // Link to previous definition Name
 159++67FF             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++67FF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 159++67FF ~           >
 159++67FF ~           >
 159++67FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++67FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++67FF             >
 159++67FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++67FF 60                           ld      h, b                // Save Instruction pointer
 161++6800 69                           ld      l, c
 162++6801 C1                           pop     bc                  // file-mode
 163++6802 41                           ld      b, c                // file-mode
 164++6803 D1                           pop     de                  // 8-bytes buffer if any
 165++6804 DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++6806 E5                           push    hl                  // Save Instruction pointer
 167++6807 3E 2A                        ld      a, "*"
 168++6809 CF                           rst     $08
 169++680A 9A                           db      $9A
 170++680B              F_Open_Exit:
 171++680B C1                           pop     bc
 172++680C DD E1                        pop     ix
 173++680E ED 62                        sbc     hl, hl
 174++6810 5F                           ld      e, a
 175++6811 16 00                        ld      d, 0
 176++6813
 177++6813
 178++6813                              psh2
 178++6813 D5          >                push    de
 178++6814 E5          >                push    hl
 178++6815 DD E9       >                jp      (ix)
 179++6817
 180++6817              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 181++6817              //   \ FILENAME 1+ PAD 1 F_OPEN
 182++6817              //   \ DROP
 183++6817              //   \ F_CLOSE
 184++6817
 185++6817
 186++6817              //  ______________________________________________________________________
 187++6817              //
 188++6817              // f_opendir    a1 a2 b -- u f
 189++6817              // open a file
 190++6817                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 190++6817             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190++6817             >
 190++6817             >                // dummy db directives used to calculate length of namec
 190++6817 46 5F 4F 50 >                db      "F_OPENDIR"
 190++681B 45 4E 44 49 >
 190++681F 52          >
 190++6820             >len_NFA         defl    $ - temp_NFA
 190++6820             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190++6817             >
 190++6817 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190++6818 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 190++681C 45 4E 44 49 >
 190++6820 52          >
 190++6821             >                org     $-1                 // alter last byte of Name just above to set
 190++6820 D2          >                db      {b $} | END_BIT     // msb as name end
 190++6821             >
 190++6821 F6 67       >                dw      last_NFA            // Link to previous definition Name
 190++6823             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190++6823 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190++6823 ~           >
 190++6823 ~           >
 190++6823             >                endif           ; ok        // for other definitions it "points" the correct handler
 190++6823             >                // Use of "; ok" to suppress "warning[fwdref]"
 190++6823             >
 190++6823             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191++6823 DD E3                        ex      (sp), ix            // filespec nul-terminated
 192++6825 C5                           push    bc                  // Save Instruction pointer
 193++6826 06 10                        ld      b, $10              // file-mode
 194++6828 3E 43                        ld      a, "C"
 195++682A CF                           rst     $08
 196++682B A3                           db      $A3
 197++682C 18 DD                        jr      F_Open_Exit
 198++682E
 199++682E
 200++682E              //  ______________________________________________________________________
 201++682E              //
 202++682E              // f_readdir    a1 a2 b -- u f
 203++682E              // open a file
 204++682E                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 204++682E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204++682E             >
 204++682E             >                // dummy db directives used to calculate length of namec
 204++682E 46 5F 52 45 >                db      "F_READDIR"
 204++6832 41 44 44 49 >
 204++6836 52          >
 204++6837             >len_NFA         defl    $ - temp_NFA
 204++6837             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204++682E             >
 204++682E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204++682F 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 204++6833 41 44 44 49 >
 204++6837 52          >
 204++6838             >                org     $-1                 // alter last byte of Name just above to set
 204++6837 D2          >                db      {b $} | END_BIT     // msb as name end
 204++6838             >
 204++6838 17 68       >                dw      last_NFA            // Link to previous definition Name
 204++683A             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 204++683A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 204++683A ~           >
 204++683A ~           >
 204++683A             >                endif           ; ok        // for other definitions it "points" the correct handler
 204++683A             >                // Use of "; ok" to suppress "warning[fwdref]"
 204++683A             >
 204++683A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205++683A E1                           pop     hl
 206++683B 7D                           ld      a, l
 207++683C D1                           pop     de
 208++683D DD E3                        ex      (sp), ix            // filespec nul-terminated
 209++683F C5                           push    bc                  // Save Instruction pointer
 210++6840 CF                           rst     $08
 211++6841 A4                           db      $A4
 212++6842 18 C7                        jr      F_Open_Exit
 213++6844
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
 920+ 6844
 921+ 6844
 922+ 6844              //  ______________________________________________________________________
 923+ 6844              //
 924+ 6844              // cmove    a1 a2 u --
 925+ 6844              // If u > 0, moves memory content starting at address a1 for n bytes long
 926+ 6844              // storing then starting at address addr2.
 927+ 6844              // The content of a1 is moved first. See CMOVE> also.
 928+ 6844                              New_Def CMOVE, "CMOVE", is_code, is_normal
 928+ 6844             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 928+ 6844             >
 928+ 6844             >                // dummy db directives used to calculate length of namec
 928+ 6844 43 4D 4F 56 >                db      "CMOVE"
 928+ 6848 45          >
 928+ 6849             >len_NFA         defl    $ - temp_NFA
 928+ 6849             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 928+ 6844             >
 928+ 6844 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 928+ 6845 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 928+ 6849 45          >
 928+ 684A             >                org     $-1                 // alter last byte of Name just above to set
 928+ 6849 C5          >                db      {b $} | END_BIT     // msb as name end
 928+ 684A             >
 928+ 684A 2E 68       >                dw      last_NFA            // Link to previous definition Name
 928+ 684C             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 928+ 684C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 928+ 684C ~           >
 928+ 684C ~           >
 928+ 684C             >                endif           ; ok        // for other definitions it "points" the correct handler
 928+ 684C             >                // Use of "; ok" to suppress "warning[fwdref]"
 928+ 684C             >
 928+ 684C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 929+ 684C D9                           exx
 930+ 684D
 931+ 684D C1                           pop     bc                  // bc has counter
 932+ 684E D1                           pop     de                  // de now has dest
 933+ 684F E1                           pop     hl                 // hl has source, save Instruction Pointer
 934+ 6850 78                           ld      a, b
 935+ 6851 B1                           or      c
 936+ 6852 28 02                        jr      z, Cmove_NoMove
 937+ 6854 ED B0                            ldir
 938+ 6856              Cmove_NoMove:
 939+ 6856 D9                           exx
 940+ 6857
 941+ 6857                              next
 941+ 6857 DD E9       >                jp      (ix)
 942+ 6859
 943+ 6859              //  ______________________________________________________________________
 944+ 6859              //
 945+ 6859              // cmove>    a1 a2 u --
 946+ 6859              // If u > 0, moves memory content starting at address a1 for n bytes long
 947+ 6859              // storing then starting at address addr2.
 948+ 6859              // The content of a1 is moved last. See cmove.
 949+ 6859                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 949+ 6859             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 949+ 6859             >
 949+ 6859             >                // dummy db directives used to calculate length of namec
 949+ 6859 43 4D 4F 56 >                db      "CMOVE>"
 949+ 685D 45 3E       >
 949+ 685F             >len_NFA         defl    $ - temp_NFA
 949+ 685F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 949+ 6859             >
 949+ 6859 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 949+ 685A 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 949+ 685E 45 3E       >
 949+ 6860             >                org     $-1                 // alter last byte of Name just above to set
 949+ 685F BE          >                db      {b $} | END_BIT     // msb as name end
 949+ 6860             >
 949+ 6860 44 68       >                dw      last_NFA            // Link to previous definition Name
 949+ 6862             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 949+ 6862 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 949+ 6862 ~           >
 949+ 6862 ~           >
 949+ 6862             >                endif           ; ok        // for other definitions it "points" the correct handler
 949+ 6862             >                // Use of "; ok" to suppress "warning[fwdref]"
 949+ 6862             >
 949+ 6862             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 950+ 6862 D9                           exx
 951+ 6863
 952+ 6863 C1                           pop     bc                  // bc has counter
 953+ 6864 D1                           pop     de                  // de has dest
 954+ 6865 E1                           pop     hl                  // hl has source, save Instruction Pointer
 955+ 6866 78                           ld      a, b
 956+ 6867 B1                           or      c
 957+ 6868 28 08                        jr      z, CmoveV_NoMove
 958+ 686A EB                               ex      de, hl              // compute address to
 959+ 686B 09                               add     hl, bc              // operate backward
 960+ 686C 2B                               dec     hl
 961+ 686D EB                               ex      de, hl
 962+ 686E 09                               add     hl, bc
 963+ 686F 2B                               dec     hl
 964+ 6870 ED B8                            lddr                        // backward
 965+ 6872              CmoveV_NoMove:
 966+ 6872 D9                           exx
 967+ 6873
 968+ 6873                              next
 968+ 6873 DD E9       >                jp      (ix)
 969+ 6875
 970+ 6875              //  ______________________________________________________________________
 971+ 6875              //
 972+ 6875              // um*      u1 u2 -- ud
 973+ 6875              // Unsigned multiplication
 974+ 6875              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 975+ 6875              // On the stack a double number is treated as two single numbers
 976+ 6875              // where DE is on the top of the stack and HL is the second from top,
 977+ 6875              // Instead, in 2VARIABLE a double number is stored as EDLH.
 978+ 6875              // this definition could use "MUL" Z80N new op-code.
 979+ 6875                              New_Def UM_MUL, "UM*", is_code, is_normal
 979+ 6875             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 979+ 6875             >
 979+ 6875             >                // dummy db directives used to calculate length of namec
 979+ 6875 55 4D 2A    >                db      "UM*"
 979+ 6878             >len_NFA         defl    $ - temp_NFA
 979+ 6878             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 979+ 6875             >
 979+ 6875 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 979+ 6876 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 979+ 6879             >                org     $-1                 // alter last byte of Name just above to set
 979+ 6878 AA          >                db      {b $} | END_BIT     // msb as name end
 979+ 6879             >
 979+ 6879 59 68       >                dw      last_NFA            // Link to previous definition Name
 979+ 687B             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 979+ 687B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 979+ 687B ~           >
 979+ 687B ~           >
 979+ 687B             >                endif           ; ok        // for other definitions it "points" the correct handler
 979+ 687B             >                // Use of "; ok" to suppress "warning[fwdref]"
 979+ 687B             >
 979+ 687B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 980+ 687B D9                           exx
 981+ 687C D1                           pop     de                    // de has u2 operand
 982+ 687D E1                           pop     hl                    // hl has u1 operand
 983+ 687E 45                           ld      b, l
 984+ 687F 4B                           ld      c, e
 985+ 6880 5D                           ld      e, l
 986+ 6881 6A                           ld      l, d
 987+ 6882 E5                           push    hl
 988+ 6883 69                           ld      l, c
 989+ 6884 ED 30                        mul
 990+ 6886 EB                           ex      de, hl
 991+ 6887 ED 30                        mul
 992+ 6889 AF                           xor     a
 993+ 688A 19                           add     hl, de
 994+ 688B 8F                           adc     a
 995+ 688C 59                           ld      e, c
 996+ 688D 50                           ld      d, b
 997+ 688E ED 30                        mul
 998+ 6890 47                           ld      b, a
 999+ 6891 4C                           ld      c, h
1000+ 6892 7A                           ld      a, d
1001+ 6893 85                           add     l
1002+ 6894 67                           ld      h, a
1003+ 6895 6B                           ld      l, e
1004+ 6896 D1                           pop     de
1005+ 6897 ED 30                        mul
1006+ 6899 EB                           ex      de, hl
1007+ 689A ED 4A                        adc     hl, bc
1008+ 689C D5                           push    de
1009+ 689D E5                           push    hl
1010+ 689E D9                           exx
1011+ 689F                              next
1011+ 689F DD E9       >                jp      (ix)
1012+ 68A1
1013+ 68A1              //  ______________________________________________________________________
1014+ 68A1              //
1015+ 68A1              // um/mod      ud u1 -- q r
1016+ 68A1              // divides ud into u1 giving quotient q and remainder r
1017+ 68A1              // algorithm takes 16 bit at a time starting from msb
1018+ 68A1              // DE grows from lsb upward with quotient result
1019+ 68A1              // HL keeps the remainder at each stage of division
1020+ 68A1              // each loop 'lowers' the next binary digit to form the current dividend
1021+ 68A1                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1021+ 68A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1021+ 68A1             >
1021+ 68A1             >                // dummy db directives used to calculate length of namec
1021+ 68A1 55 4D 2F 4D >                db      "UM/MOD"
1021+ 68A5 4F 44       >
1021+ 68A7             >len_NFA         defl    $ - temp_NFA
1021+ 68A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1021+ 68A1             >
1021+ 68A1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1021+ 68A2 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1021+ 68A6 4F 44       >
1021+ 68A8             >                org     $-1                 // alter last byte of Name just above to set
1021+ 68A7 C4          >                db      {b $} | END_BIT     // msb as name end
1021+ 68A8             >
1021+ 68A8 75 68       >                dw      last_NFA            // Link to previous definition Name
1021+ 68AA             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1021+ 68AA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1021+ 68AA ~           >
1021+ 68AA ~           >
1021+ 68AA             >                endif           ; ok        // for other definitions it "points" the correct handler
1021+ 68AA             >                // Use of "; ok" to suppress "warning[fwdref]"
1021+ 68AA             >
1021+ 68AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1022+ 68AA D9                           exx
1023+ 68AB C1                           pop     bc                      // divisor
1024+ 68AC
1025+ 68AC E1                           pop     hl                      // < high part
1026+ 68AD D1                           pop     de                      // < low part and
1027+ 68AE
1028+ 68AE 7D                           ld      a, l                    // check without changing arguments
1029+ 68AF 91                           sub     c                       // if divisor is greater than high part
1030+ 68B0 7C                           ld      a, h                    // so quotient will be in range
1031+ 68B1 98                           sbc     a, b
1032+ 68B2 30 20                        jr      nc, Um_DivMod_OutOfRange
1033+ 68B4 3E 10                            ld      a, 16
1034+ 68B6              Um_DivMod_Loop:
1035+ 68B6 CB 23                                sla     e
1036+ 68B8 CB 12                                rl      d
1037+ 68BA ED 6A                                adc     hl, hl
1038+ 68BC 30 05                                jr      nc, Um_DivMod_Carry
1039+ 68BE A7                                       and     a
1040+ 68BF ED 42                                    sbc     hl, bc
1041+ 68C1 18 07                                jr      Um_DivMod_Endif    // else
1042+ 68C3              Um_DivMod_Carry:
1043+ 68C3 A7                                       and     a
1044+ 68C4 ED 42                                    sbc     hl, bc
1045+ 68C6 30 02                                    jr      nc, Um_DivMod_Endif
1046+ 68C8 09                                           add     hl, bc
1047+ 68C9 1B                                           dec     de
1048+ 68CA              Um_DivMod_Endif:                                   // endif
1049+ 68CA 13                                   inc     de
1050+ 68CB 3D                                   dec     a
1051+ 68CC 20 E8                            jr      nz, Um_DivMod_Loop
1052+ 68CE EB                               ex      de, hl
1053+ 68CF              Um_DivMod_Bailout:
1054+ 68CF D5                               push    de                  // de := remanider
1055+ 68D0 E5                               push    hl                  // hl := quotient
1056+ 68D1 D9                               exx
1057+ 68D2                                  next
1057+ 68D2 DD E9       >                jp      (ix)
1058+ 68D4
1059+ 68D4              Um_DivMod_OutOfRange:
1060+ 68D4 21 FF FF                     ld      hl, -1
1061+ 68D7 54                           ld      d, h
1062+ 68D8 5D                           ld      e, l
1063+ 68D9 18 F4                        jr      Um_DivMod_Bailout
1064+ 68DB
1065+ 68DB              //  ______________________________________________________________________
1066+ 68DB              //
1067+ 68DB              // and          n1 n2 -- n3
1068+ 68DB              // bit logical AND. Returns n3 as n1 & n2
1069+ 68DB                              New_Def AND_OP, "AND", is_code, is_normal
1069+ 68DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1069+ 68DB             >
1069+ 68DB             >                // dummy db directives used to calculate length of namec
1069+ 68DB 41 4E 44    >                db      "AND"
1069+ 68DE             >len_NFA         defl    $ - temp_NFA
1069+ 68DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1069+ 68DB             >
1069+ 68DB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1069+ 68DC 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1069+ 68DF             >                org     $-1                 // alter last byte of Name just above to set
1069+ 68DE C4          >                db      {b $} | END_BIT     // msb as name end
1069+ 68DF             >
1069+ 68DF A1 68       >                dw      last_NFA            // Link to previous definition Name
1069+ 68E1             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1069+ 68E1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1069+ 68E1 ~           >
1069+ 68E1 ~           >
1069+ 68E1             >                endif           ; ok        // for other definitions it "points" the correct handler
1069+ 68E1             >                // Use of "; ok" to suppress "warning[fwdref]"
1069+ 68E1             >
1069+ 68E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1070+ 68E1 D1                           pop     de
1071+ 68E2 E1                           pop     hl
1072+ 68E3 7B                           ld      a, e
1073+ 68E4 A5                           and     l
1074+ 68E5 6F                           ld      l, a
1075+ 68E6 7A                           ld      a, d
1076+ 68E7 A4                           and     h
1077+ 68E8 67                           ld      h, a
1078+ 68E9
1079+ 68E9                              psh1
1079+ 68E9 E5          >                push    hl
1079+ 68EA DD E9       >                jp      (ix)
1080+ 68EC
1081+ 68EC              //  ______________________________________________________________________
1082+ 68EC              //
1083+ 68EC              // or           n1 n2 -- n3
1084+ 68EC              // bit logical OR. Returns n3 as n1 | n2
1085+ 68EC                              New_Def OR_OP, "OR", is_code, is_normal
1085+ 68EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1085+ 68EC             >
1085+ 68EC             >                // dummy db directives used to calculate length of namec
1085+ 68EC 4F 52       >                db      "OR"
1085+ 68EE             >len_NFA         defl    $ - temp_NFA
1085+ 68EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1085+ 68EC             >
1085+ 68EC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1085+ 68ED 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1085+ 68EF             >                org     $-1                 // alter last byte of Name just above to set
1085+ 68EE D2          >                db      {b $} | END_BIT     // msb as name end
1085+ 68EF             >
1085+ 68EF DB 68       >                dw      last_NFA            // Link to previous definition Name
1085+ 68F1             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1085+ 68F1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1085+ 68F1 ~           >
1085+ 68F1 ~           >
1085+ 68F1             >                endif           ; ok        // for other definitions it "points" the correct handler
1085+ 68F1             >                // Use of "; ok" to suppress "warning[fwdref]"
1085+ 68F1             >
1085+ 68F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1086+ 68F1 D1                           pop     de
1087+ 68F2 E1                           pop     hl
1088+ 68F3 7B                           ld      a, e
1089+ 68F4 B5                           or      l
1090+ 68F5 6F                           ld      l, a
1091+ 68F6 7A                           ld      a, d
1092+ 68F7 B4                           or      h
1093+ 68F8 67                           ld      h, a
1094+ 68F9
1095+ 68F9                              psh1
1095+ 68F9 E5          >                push    hl
1095+ 68FA DD E9       >                jp      (ix)
1096+ 68FC
1097+ 68FC              //  ______________________________________________________________________
1098+ 68FC              //
1099+ 68FC              // xor          n1 n2 -- n3
1100+ 68FC              // bit logical OR. Returns n3 as n1 ^ n2
1101+ 68FC                              New_Def XOR_OP, "XOR", is_code, is_normal
1101+ 68FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1101+ 68FC             >
1101+ 68FC             >                // dummy db directives used to calculate length of namec
1101+ 68FC 58 4F 52    >                db      "XOR"
1101+ 68FF             >len_NFA         defl    $ - temp_NFA
1101+ 68FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1101+ 68FC             >
1101+ 68FC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1101+ 68FD 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1101+ 6900             >                org     $-1                 // alter last byte of Name just above to set
1101+ 68FF D2          >                db      {b $} | END_BIT     // msb as name end
1101+ 6900             >
1101+ 6900 EC 68       >                dw      last_NFA            // Link to previous definition Name
1101+ 6902             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1101+ 6902 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1101+ 6902 ~           >
1101+ 6902 ~           >
1101+ 6902             >                endif           ; ok        // for other definitions it "points" the correct handler
1101+ 6902             >                // Use of "; ok" to suppress "warning[fwdref]"
1101+ 6902             >
1101+ 6902             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1102+ 6902 D1                           pop     de
1103+ 6903 E1                           pop     hl
1104+ 6904 7B                           ld      a, e
1105+ 6905 AD                           xor     l
1106+ 6906 6F                           ld      l, a
1107+ 6907 7A                           ld      a, d
1108+ 6908 AC                           xor     h
1109+ 6909 67                           ld      h, a
1110+ 690A
1111+ 690A                              psh1
1111+ 690A E5          >                push    hl
1111+ 690B DD E9       >                jp      (ix)
1112+ 690D
1113+ 690D              //  ______________________________________________________________________
1114+ 690D              //
1115+ 690D              // sp@      -- a
1116+ 690D              // returns on top of stack the value of SP before execution
1117+ 690D                              New_Def SPFETCH, "SP@", is_code, is_normal
1117+ 690D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1117+ 690D             >
1117+ 690D             >                // dummy db directives used to calculate length of namec
1117+ 690D 53 50 40    >                db      "SP@"
1117+ 6910             >len_NFA         defl    $ - temp_NFA
1117+ 6910             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1117+ 690D             >
1117+ 690D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1117+ 690E 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1117+ 6911             >                org     $-1                 // alter last byte of Name just above to set
1117+ 6910 C0          >                db      {b $} | END_BIT     // msb as name end
1117+ 6911             >
1117+ 6911 FC 68       >                dw      last_NFA            // Link to previous definition Name
1117+ 6913             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1117+ 6913 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1117+ 6913 ~           >
1117+ 6913 ~           >
1117+ 6913             >                endif           ; ok        // for other definitions it "points" the correct handler
1117+ 6913             >                // Use of "; ok" to suppress "warning[fwdref]"
1117+ 6913             >
1117+ 6913             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1118+ 6913
1119+ 6913 21 00 00                     ld      hl, 0
1120+ 6916 39                           add     hl, sp
1121+ 6917
1122+ 6917                              psh1
1122+ 6917 E5          >                push    hl
1122+ 6918 DD E9       >                jp      (ix)
1123+ 691A
1124+ 691A              //  ______________________________________________________________________
1125+ 691A              //
1126+ 691A              // sp!      a --
1127+ 691A              // restore SP to the initial value passed
1128+ 691A              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1129+ 691A                              New_Def SPSTORE, "SP!", is_code, is_normal
1129+ 691A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1129+ 691A             >
1129+ 691A             >                // dummy db directives used to calculate length of namec
1129+ 691A 53 50 21    >                db      "SP!"
1129+ 691D             >len_NFA         defl    $ - temp_NFA
1129+ 691D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1129+ 691A             >
1129+ 691A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1129+ 691B 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1129+ 691E             >                org     $-1                 // alter last byte of Name just above to set
1129+ 691D A1          >                db      {b $} | END_BIT     // msb as name end
1129+ 691E             >
1129+ 691E 0D 69       >                dw      last_NFA            // Link to previous definition Name
1129+ 6920             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1129+ 6920 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1129+ 6920 ~           >
1129+ 6920 ~           >
1129+ 6920             >                endif           ; ok        // for other definitions it "points" the correct handler
1129+ 6920             >                // Use of "; ok" to suppress "warning[fwdref]"
1129+ 6920             >
1129+ 6920             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1130+ 6920 E1                           pop     hl
1131+ 6921 F9                           ld      sp, hl
1132+ 6922
1133+ 6922                              next
1133+ 6922 DD E9       >                jp      (ix)
1134+ 6924
1135+ 6924              //  ______________________________________________________________________
1136+ 6924              //
1137+ 6924              // rp@      -- a
1138+ 6924              // returns on top of stack the value of Return-Pointer
1139+ 6924                              New_Def RPFETCH, "RP@", is_code, is_normal
1139+ 6924             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1139+ 6924             >
1139+ 6924             >                // dummy db directives used to calculate length of namec
1139+ 6924 52 50 40    >                db      "RP@"
1139+ 6927             >len_NFA         defl    $ - temp_NFA
1139+ 6927             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1139+ 6924             >
1139+ 6924 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1139+ 6925 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1139+ 6928             >                org     $-1                 // alter last byte of Name just above to set
1139+ 6927 C0          >                db      {b $} | END_BIT     // msb as name end
1139+ 6928             >
1139+ 6928 1A 69       >                dw      last_NFA            // Link to previous definition Name
1139+ 692A             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1139+ 692A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1139+ 692A ~           >
1139+ 692A ~           >
1139+ 692A             >                endif           ; ok        // for other definitions it "points" the correct handler
1139+ 692A             >                // Use of "; ok" to suppress "warning[fwdref]"
1139+ 692A             >
1139+ 692A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1140+ 692A
1141+ 692A                              ldhlrp
1141+ 692A 2A 96 63    >                ld      hl,(RP_Pointer)
1142+ 692D
1143+ 692D                              psh1
1143+ 692D E5          >                push    hl
1143+ 692E DD E9       >                jp      (ix)
1144+ 6930
1145+ 6930              //  ______________________________________________________________________
1146+ 6930              //
1147+ 6930              // rp!      a --
1148+ 6930              // restore RP to the initial value passed
1149+ 6930              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1150+ 6930                              New_Def RPSTORE, "RP!", is_code, is_normal
1150+ 6930             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1150+ 6930             >
1150+ 6930             >                // dummy db directives used to calculate length of namec
1150+ 6930 52 50 21    >                db      "RP!"
1150+ 6933             >len_NFA         defl    $ - temp_NFA
1150+ 6933             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1150+ 6930             >
1150+ 6930 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1150+ 6931 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1150+ 6934             >                org     $-1                 // alter last byte of Name just above to set
1150+ 6933 A1          >                db      {b $} | END_BIT     // msb as name end
1150+ 6934             >
1150+ 6934 24 69       >                dw      last_NFA            // Link to previous definition Name
1150+ 6936             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1150+ 6936 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1150+ 6936 ~           >
1150+ 6936 ~           >
1150+ 6936             >                endif           ; ok        // for other definitions it "points" the correct handler
1150+ 6936             >                // Use of "; ok" to suppress "warning[fwdref]"
1150+ 6936             >
1150+ 6936             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1151+ 6936 E1                           pop     hl
1152+ 6937                              ldrphl
1152+ 6937 22 96 63    >                ld      (RP_Pointer),hl
1153+ 693A
1154+ 693A                              next
1154+ 693A DD E9       >                jp      (ix)
1155+ 693C
1156+ 693C              //  ______________________________________________________________________
1157+ 693C              //
1158+ 693C              // exit       --
1159+ 693C              // exits back to the caller word
1160+ 693C                              New_Def EXIT, "EXIT", is_code, is_normal
1160+ 693C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1160+ 693C             >
1160+ 693C             >                // dummy db directives used to calculate length of namec
1160+ 693C 45 58 49 54 >                db      "EXIT"
1160+ 6940             >len_NFA         defl    $ - temp_NFA
1160+ 6940             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1160+ 693C             >
1160+ 693C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1160+ 693D 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1160+ 6941             >                org     $-1                 // alter last byte of Name just above to set
1160+ 6940 D4          >                db      {b $} | END_BIT     // msb as name end
1160+ 6941             >
1160+ 6941 30 69       >                dw      last_NFA            // Link to previous definition Name
1160+ 6943             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1160+ 6943 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1160+ 6943 ~           >
1160+ 6943 ~           >
1160+ 6943             >                endif           ; ok        // for other definitions it "points" the correct handler
1160+ 6943             >                // Use of "; ok" to suppress "warning[fwdref]"
1160+ 6943             >
1160+ 6943             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1161+ 6943                              ldhlrp                      // Get Return Stack Pointer
1161+ 6943 2A 96 63    >                ld      hl,(RP_Pointer)
1162+ 6946 4E                           ld      c, (hl)             // pop Instruction Pointer
1163+ 6947 23                           inc     hl                  // from Return Stack
1164+ 6948 46                           ld      b, (hl)
1165+ 6949 23                           inc     hl
1166+ 694A                              ldrphl                      // Set Return Stack Pointer
1166+ 694A 22 96 63    >                ld      (RP_Pointer),hl
1167+ 694D                              next
1167+ 694D DD E9       >                jp      (ix)
1168+ 694F
1169+ 694F              //  ______________________________________________________________________
1170+ 694F              //
1171+ 694F              // lastl      --
1172+ 694F              // exits back to the caller word
1173+ 694F              //              New_Def EXIT, "LASTL", is_code, is_normal
1174+ 694F              //              ldhlrp                      // Get Return Stack Pointer
1175+ 694F              //              ld      e, (hl)             // pop Instruction Pointer
1176+ 694F              //              inc     hl                  // from Return Stack
1177+ 694F              //              ld      d, (hl)
1178+ 694F              //              inc     hl
1179+ 694F              //              ld      (hl), e
1180+ 694F              //              inc     hl
1181+ 694F              //              ld      (hl), d
1182+ 694F              //              next
1183+ 694F
1184+ 694F              //  ______________________________________________________________________
1185+ 694F              //
1186+ 694F              // >r      n --
1187+ 694F              // pop from calculator-stack and push into return-stack
1188+ 694F                              New_Def TO_R, ">R", is_code, is_normal
1188+ 694F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1188+ 694F             >
1188+ 694F             >                // dummy db directives used to calculate length of namec
1188+ 694F 3E 52       >                db      ">R"
1188+ 6951             >len_NFA         defl    $ - temp_NFA
1188+ 6951             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1188+ 694F             >
1188+ 694F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1188+ 6950 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1188+ 6952             >                org     $-1                 // alter last byte of Name just above to set
1188+ 6951 D2          >                db      {b $} | END_BIT     // msb as name end
1188+ 6952             >
1188+ 6952 3C 69       >                dw      last_NFA            // Link to previous definition Name
1188+ 6954             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1188+ 6954 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1188+ 6954 ~           >
1188+ 6954 ~           >
1188+ 6954             >                endif           ; ok        // for other definitions it "points" the correct handler
1188+ 6954             >                // Use of "; ok" to suppress "warning[fwdref]"
1188+ 6954             >
1188+ 6954             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1189+ 6954 D1                           pop     de
1190+ 6955                              ldhlrp
1190+ 6955 2A 96 63    >                ld      hl,(RP_Pointer)
1191+ 6958 2B                           dec     hl
1192+ 6959 72                           ld      (hl), d             // store current TOS
1193+ 695A 2B                           dec     hl                  // to Return Stack
1194+ 695B 73                           ld      (hl), e
1195+ 695C                              ldrphl
1195+ 695C 22 96 63    >                ld      (RP_Pointer),hl
1196+ 695F
1197+ 695F                              next
1197+ 695F DD E9       >                jp      (ix)
1198+ 6961
1199+ 6961              //  ______________________________________________________________________
1200+ 6961              //
1201+ 6961              // r>      -- n
1202+ 6961              // pop from return-stack and push into calculator-stack
1203+ 6961                              New_Def R_TO, "R>", is_code, is_normal
1203+ 6961             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1203+ 6961             >
1203+ 6961             >                // dummy db directives used to calculate length of namec
1203+ 6961 52 3E       >                db      "R>"
1203+ 6963             >len_NFA         defl    $ - temp_NFA
1203+ 6963             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1203+ 6961             >
1203+ 6961 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1203+ 6962 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1203+ 6964             >                org     $-1                 // alter last byte of Name just above to set
1203+ 6963 BE          >                db      {b $} | END_BIT     // msb as name end
1203+ 6964             >
1203+ 6964 4F 69       >                dw      last_NFA            // Link to previous definition Name
1203+ 6966             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1203+ 6966 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1203+ 6966 ~           >
1203+ 6966 ~           >
1203+ 6966             >                endif           ; ok        // for other definitions it "points" the correct handler
1203+ 6966             >                // Use of "; ok" to suppress "warning[fwdref]"
1203+ 6966             >
1203+ 6966             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1204+ 6966
1205+ 6966                              ldhlrp
1205+ 6966 2A 96 63    >                ld      hl,(RP_Pointer)
1206+ 6969 5E                           ld      e, (hl)             // retrieve from Return Stack
1207+ 696A 23                           inc     hl
1208+ 696B 56                           ld      d, (hl)
1209+ 696C 23                           inc     hl
1210+ 696D                              ldrphl
1210+ 696D 22 96 63    >                ld      (RP_Pointer),hl
1211+ 6970 D5                           push    de
1212+ 6971                              next
1212+ 6971 DD E9       >                jp      (ix)
1213+ 6973
1214+ 6973              //  ______________________________________________________________________
1215+ 6973              //
1216+ 6973              // r@           -- n
1217+ 6973              // return on top of stack the value of top of return-stack
1218+ 6973              // Since this is the same as I, we alter R's CFA to jump there
1219+ 6973                              New_Def R_OP, "R@", is_code, is_normal
1219+ 6973             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1219+ 6973             >
1219+ 6973             >                // dummy db directives used to calculate length of namec
1219+ 6973 52 40       >                db      "R@"
1219+ 6975             >len_NFA         defl    $ - temp_NFA
1219+ 6975             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1219+ 6973             >
1219+ 6973 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1219+ 6974 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1219+ 6976             >                org     $-1                 // alter last byte of Name just above to set
1219+ 6975 C0          >                db      {b $} | END_BIT     // msb as name end
1219+ 6976             >
1219+ 6976 61 69       >                dw      last_NFA            // Link to previous definition Name
1219+ 6978             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1219+ 6978 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1219+ 6978 ~           >
1219+ 6978 ~           >
1219+ 6978             >                endif           ; ok        // for other definitions it "points" the correct handler
1219+ 6978             >                // Use of "; ok" to suppress "warning[fwdref]"
1219+ 6978             >
1219+ 6978             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1220+ 6978 C3 78 64                     jp      I_Ptr
1221+ 697B
1222+ 697B              //  ______________________________________________________________________
1223+ 697B              //
1224+ 697B              // r            -- n
1225+ 697B              // return on top of stack the value of top of return-stack
1226+ 697B              // Since this is the same as I, we alter R's CFA to jump there
1227+ 697B              //              New_Def R_OLD, "R", is_code, is_normal
1228+ 697B              //              jp      I_Ptr
1229+ 697B
1230+ 697B              //  ______________________________________________________________________
1231+ 697B              //
1232+ 697B              // 0=           n -- f
1233+ 697B              // true (non zero) if n is zero, false (0) elsewere
1234+ 697B                              New_Def ZEQUAL, "0=", is_code, is_normal
1234+ 697B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1234+ 697B             >
1234+ 697B             >                // dummy db directives used to calculate length of namec
1234+ 697B 30 3D       >                db      "0="
1234+ 697D             >len_NFA         defl    $ - temp_NFA
1234+ 697D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1234+ 697B             >
1234+ 697B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1234+ 697C 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1234+ 697E             >                org     $-1                 // alter last byte of Name just above to set
1234+ 697D BD          >                db      {b $} | END_BIT     // msb as name end
1234+ 697E             >
1234+ 697E 73 69       >                dw      last_NFA            // Link to previous definition Name
1234+ 6980             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1234+ 6980 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1234+ 6980 ~           >
1234+ 6980 ~           >
1234+ 6980             >                endif           ; ok        // for other definitions it "points" the correct handler
1234+ 6980             >                // Use of "; ok" to suppress "warning[fwdref]"
1234+ 6980             >
1234+ 6980             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1235+ 6980              Zero_Equal:
1236+ 6980 E1                           pop     hl
1237+ 6981 7D                           ld      a, l
1238+ 6982 B4                           or      h
1239+ 6983 21 00 00                     ld      hl, FALSE_FLAG
1240+ 6986 20 01                        jr      nz, ZEqual_Skip
1241+ 6988 2B                               dec     hl
1242+ 6989              ZEqual_Skip:
1243+ 6989                              psh1
1243+ 6989 E5          >                push    hl
1243+ 698A DD E9       >                jp      (ix)
1244+ 698C
1245+ 698C              //  ______________________________________________________________________
1246+ 698C              //
1247+ 698C              // not         a1 -- a2
1248+ 698C              // increment by 2 top of stack
1249+ 698C                              New_Def NOT_OP, "NOT", is_code, is_normal
1249+ 698C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1249+ 698C             >
1249+ 698C             >                // dummy db directives used to calculate length of namec
1249+ 698C 4E 4F 54    >                db      "NOT"
1249+ 698F             >len_NFA         defl    $ - temp_NFA
1249+ 698F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1249+ 698C             >
1249+ 698C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1249+ 698D 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1249+ 6990             >                org     $-1                 // alter last byte of Name just above to set
1249+ 698F D4          >                db      {b $} | END_BIT     // msb as name end
1249+ 6990             >
1249+ 6990 7B 69       >                dw      last_NFA            // Link to previous definition Name
1249+ 6992             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1249+ 6992 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1249+ 6992 ~           >
1249+ 6992 ~           >
1249+ 6992             >                endif           ; ok        // for other definitions it "points" the correct handler
1249+ 6992             >                // Use of "; ok" to suppress "warning[fwdref]"
1249+ 6992             >
1249+ 6992             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1250+ 6992 C3 80 69                     jp      Zero_Equal
1251+ 6995
1252+ 6995              //  ______________________________________________________________________
1253+ 6995              //
1254+ 6995              // 0<           n -- f
1255+ 6995              // true (non zero) if n is less than zero, false (0) elsewere
1256+ 6995                              New_Def ZLESS, "0<", is_code, is_normal
1256+ 6995             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1256+ 6995             >
1256+ 6995             >                // dummy db directives used to calculate length of namec
1256+ 6995 30 3C       >                db      "0<"
1256+ 6997             >len_NFA         defl    $ - temp_NFA
1256+ 6997             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1256+ 6995             >
1256+ 6995 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1256+ 6996 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1256+ 6998             >                org     $-1                 // alter last byte of Name just above to set
1256+ 6997 BC          >                db      {b $} | END_BIT     // msb as name end
1256+ 6998             >
1256+ 6998 8C 69       >                dw      last_NFA            // Link to previous definition Name
1256+ 699A             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1256+ 699A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1256+ 699A ~           >
1256+ 699A ~           >
1256+ 699A             >                endif           ; ok        // for other definitions it "points" the correct handler
1256+ 699A             >                // Use of "; ok" to suppress "warning[fwdref]"
1256+ 699A             >
1256+ 699A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1257+ 699A E1                           pop     hl
1258+ 699B 29                           add     hl, hl
1259+ 699C 21 00 00                     ld      hl, 0
1260+ 699F 30 01                        jr      nc, ZLess_Skip
1261+ 69A1 2B                               dec     hl
1262+ 69A2              ZLess_Skip:
1263+ 69A2                              psh1
1263+ 69A2 E5          >                push    hl
1263+ 69A3 DD E9       >                jp      (ix)
1264+ 69A5
1265+ 69A5              //  ______________________________________________________________________
1266+ 69A5              //
1267+ 69A5              // 0>           n -- f
1268+ 69A5              // true (non zero) if n is less than zero, false (0) elsewere
1269+ 69A5                              New_Def ZGREATER, "0>", is_code, is_normal
1269+ 69A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1269+ 69A5             >
1269+ 69A5             >                // dummy db directives used to calculate length of namec
1269+ 69A5 30 3E       >                db      "0>"
1269+ 69A7             >len_NFA         defl    $ - temp_NFA
1269+ 69A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1269+ 69A5             >
1269+ 69A5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1269+ 69A6 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1269+ 69A8             >                org     $-1                 // alter last byte of Name just above to set
1269+ 69A7 BE          >                db      {b $} | END_BIT     // msb as name end
1269+ 69A8             >
1269+ 69A8 95 69       >                dw      last_NFA            // Link to previous definition Name
1269+ 69AA             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1269+ 69AA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1269+ 69AA ~           >
1269+ 69AA ~           >
1269+ 69AA             >                endif           ; ok        // for other definitions it "points" the correct handler
1269+ 69AA             >                // Use of "; ok" to suppress "warning[fwdref]"
1269+ 69AA             >
1269+ 69AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1270+ 69AA E1                           pop     hl
1271+ 69AB 7D                           ld      a, l
1272+ 69AC B4                           or      h
1273+ 69AD 29                           add     hl, hl
1274+ 69AE 21 00 00                     ld      hl, FALSE_FLAG
1275+ 69B1 38 04                        jr      c, ZGreater_Skip
1276+ 69B3 A7                               and     a
1277+ 69B4 28 01                            jr      z, ZGreater_Skip
1278+ 69B6 2B                                   dec     hl
1279+ 69B7              ZGreater_Skip:
1280+ 69B7                              psh1
1280+ 69B7 E5          >                push    hl
1280+ 69B8 DD E9       >                jp      (ix)
1281+ 69BA
1282+ 69BA              //  ______________________________________________________________________
1283+ 69BA              //
1284+ 69BA              // +            n1 n2 -- n3
1285+ 69BA              // returns the unsigned sum of two top values
1286+ 69BA                              New_Def PLUS, "+", is_code, is_normal
1286+ 69BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1286+ 69BA             >
1286+ 69BA             >                // dummy db directives used to calculate length of namec
1286+ 69BA 2B          >                db      "+"
1286+ 69BB             >len_NFA         defl    $ - temp_NFA
1286+ 69BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1286+ 69BA             >
1286+ 69BA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1286+ 69BB 2B          >                db      "+"               // name string in 7-bit ascii, but
1286+ 69BC             >                org     $-1                 // alter last byte of Name just above to set
1286+ 69BB AB          >                db      {b $} | END_BIT     // msb as name end
1286+ 69BC             >
1286+ 69BC A5 69       >                dw      last_NFA            // Link to previous definition Name
1286+ 69BE             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1286+ 69BE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1286+ 69BE ~           >
1286+ 69BE ~           >
1286+ 69BE             >                endif           ; ok        // for other definitions it "points" the correct handler
1286+ 69BE             >                // Use of "; ok" to suppress "warning[fwdref]"
1286+ 69BE             >
1286+ 69BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1287+ 69BE E1                           pop     hl
1288+ 69BF D1                           pop     de
1289+ 69C0 19                           add     hl, de
1290+ 69C1
1291+ 69C1                              psh1
1291+ 69C1 E5          >                push    hl
1291+ 69C2 DD E9       >                jp      (ix)
1292+ 69C4
1293+ 69C4
1294+ 69C4              //  ______________________________________________________________________
1295+ 69C4              //
1296+ 69C4              // d+           d1 d2 -- d3
1297+ 69C4              // returns the unsigned sum of two top double-numbers
1298+ 69C4              //      d2  d1
1299+ 69C4              //      h l h l
1300+ 69C4              // SP   LHEDLHED
1301+ 69C4              // SP  +01234567
1302+ 69C4                              New_Def DPLUS, "D+", is_code, is_normal
1302+ 69C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1302+ 69C4             >
1302+ 69C4             >                // dummy db directives used to calculate length of namec
1302+ 69C4 44 2B       >                db      "D+"
1302+ 69C6             >len_NFA         defl    $ - temp_NFA
1302+ 69C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1302+ 69C4             >
1302+ 69C4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1302+ 69C5 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1302+ 69C7             >                org     $-1                 // alter last byte of Name just above to set
1302+ 69C6 AB          >                db      {b $} | END_BIT     // msb as name end
1302+ 69C7             >
1302+ 69C7 BA 69       >                dw      last_NFA            // Link to previous definition Name
1302+ 69C9             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1302+ 69C9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1302+ 69C9 ~           >
1302+ 69C9 ~           >
1302+ 69C9             >                endif           ; ok        // for other definitions it "points" the correct handler
1302+ 69C9             >                // Use of "; ok" to suppress "warning[fwdref]"
1302+ 69C9             >
1302+ 69C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1303+ 69C9
1304+ 69C9 D9                           exx
1305+ 69CA C1                           pop     bc                  // bc := d2.H
1306+ 69CB D1                           pop     de                  // hl := d2.L
1307+ 69CC E1                           pop     hl                  // d1.H
1308+ 69CD E3                           ex      (sp), hl            // d1.L
1309+ 69CE 19                           add     hl, de              // hl := d2.L + d1.L
1310+ 69CF E3                           ex      (sp), hl            // d1.H
1311+ 69D0 ED 4A                        adc     hl, bc              // d1.H + d2.H
1312+ 69D2 E5                           push    hl
1313+ 69D3 D9                           exx
1314+ 69D4                              next
1314+ 69D4 DD E9       >                jp      (ix)
1315+ 69D6
1316+ 69D6              //  ______________________________________________________________________
1317+ 69D6              //
1318+ 69D6              // 1+           n1 -- n2
1319+ 69D6              // increment by 1 top of stack
1320+ 69D6                              New_Def ONE_PLUS, "1+", is_code, is_normal
1320+ 69D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1320+ 69D6             >
1320+ 69D6             >                // dummy db directives used to calculate length of namec
1320+ 69D6 31 2B       >                db      "1+"
1320+ 69D8             >len_NFA         defl    $ - temp_NFA
1320+ 69D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1320+ 69D6             >
1320+ 69D6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1320+ 69D7 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1320+ 69D9             >                org     $-1                 // alter last byte of Name just above to set
1320+ 69D8 AB          >                db      {b $} | END_BIT     // msb as name end
1320+ 69D9             >
1320+ 69D9 C4 69       >                dw      last_NFA            // Link to previous definition Name
1320+ 69DB             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1320+ 69DB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1320+ 69DB ~           >
1320+ 69DB ~           >
1320+ 69DB             >                endif           ; ok        // for other definitions it "points" the correct handler
1320+ 69DB             >                // Use of "; ok" to suppress "warning[fwdref]"
1320+ 69DB             >
1320+ 69DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1321+ 69DB E1                           pop     hl
1322+ 69DC 23                           inc     hl
1323+ 69DD
1324+ 69DD                              psh1
1324+ 69DD E5          >                push    hl
1324+ 69DE DD E9       >                jp      (ix)
1325+ 69E0
1326+ 69E0              //  ______________________________________________________________________
1327+ 69E0              //
1328+ 69E0              // 1-           n1 -- n2
1329+ 69E0              // decrement by 1 top of stack
1330+ 69E0                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1330+ 69E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1330+ 69E0             >
1330+ 69E0             >                // dummy db directives used to calculate length of namec
1330+ 69E0 31 2D       >                db      "1-"
1330+ 69E2             >len_NFA         defl    $ - temp_NFA
1330+ 69E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1330+ 69E0             >
1330+ 69E0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1330+ 69E1 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1330+ 69E3             >                org     $-1                 // alter last byte of Name just above to set
1330+ 69E2 AD          >                db      {b $} | END_BIT     // msb as name end
1330+ 69E3             >
1330+ 69E3 D6 69       >                dw      last_NFA            // Link to previous definition Name
1330+ 69E5             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1330+ 69E5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1330+ 69E5 ~           >
1330+ 69E5 ~           >
1330+ 69E5             >                endif           ; ok        // for other definitions it "points" the correct handler
1330+ 69E5             >                // Use of "; ok" to suppress "warning[fwdref]"
1330+ 69E5             >
1330+ 69E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1331+ 69E5 E1                           pop     hl
1332+ 69E6 2B                           dec     hl
1333+ 69E7
1334+ 69E7                              psh1
1334+ 69E7 E5          >                push    hl
1334+ 69E8 DD E9       >                jp      (ix)
1335+ 69EA
1336+ 69EA              //  ______________________________________________________________________
1337+ 69EA              //
1338+ 69EA              // 2+           n1 -- n2
1339+ 69EA              // increment by 2 top of stack
1340+ 69EA                              New_Def TWO_PLUS, "2+", is_code, is_normal
1340+ 69EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1340+ 69EA             >
1340+ 69EA             >                // dummy db directives used to calculate length of namec
1340+ 69EA 32 2B       >                db      "2+"
1340+ 69EC             >len_NFA         defl    $ - temp_NFA
1340+ 69EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1340+ 69EA             >
1340+ 69EA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1340+ 69EB 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1340+ 69ED             >                org     $-1                 // alter last byte of Name just above to set
1340+ 69EC AB          >                db      {b $} | END_BIT     // msb as name end
1340+ 69ED             >
1340+ 69ED E0 69       >                dw      last_NFA            // Link to previous definition Name
1340+ 69EF             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1340+ 69EF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1340+ 69EF ~           >
1340+ 69EF ~           >
1340+ 69EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1340+ 69EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1340+ 69EF             >
1340+ 69EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1341+ 69EF              Two_Plus:
1342+ 69EF E1                           pop     hl
1343+ 69F0 23                           inc     hl
1344+ 69F1 23                           inc     hl
1345+ 69F2
1346+ 69F2                              psh1
1346+ 69F2 E5          >                push    hl
1346+ 69F3 DD E9       >                jp      (ix)
1347+ 69F5
1348+ 69F5              //  ______________________________________________________________________
1349+ 69F5              //
1350+ 69F5              // cell+        a1 -- a2
1351+ 69F5              // increment by 2 top of stack
1352+ 69F5                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1352+ 69F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1352+ 69F5             >
1352+ 69F5             >                // dummy db directives used to calculate length of namec
1352+ 69F5 43 45 4C 4C >                db      "CELL+"
1352+ 69F9 2B          >
1352+ 69FA             >len_NFA         defl    $ - temp_NFA
1352+ 69FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1352+ 69F5             >
1352+ 69F5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1352+ 69F6 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1352+ 69FA 2B          >
1352+ 69FB             >                org     $-1                 // alter last byte of Name just above to set
1352+ 69FA AB          >                db      {b $} | END_BIT     // msb as name end
1352+ 69FB             >
1352+ 69FB EA 69       >                dw      last_NFA            // Link to previous definition Name
1352+ 69FD             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1352+ 69FD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1352+ 69FD ~           >
1352+ 69FD ~           >
1352+ 69FD             >                endif           ; ok        // for other definitions it "points" the correct handler
1352+ 69FD             >                // Use of "; ok" to suppress "warning[fwdref]"
1352+ 69FD             >
1352+ 69FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1353+ 69FD C3 EF 69                     jp      Two_Plus
1354+ 6A00
1355+ 6A00              //  ______________________________________________________________________
1356+ 6A00              //
1357+ 6A00              // align        a1 -- a2
1358+ 6A00              // align memory : not used
1359+ 6A00              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1360+ 6A00              //            next
1361+ 6A00
1362+ 6A00              //  ______________________________________________________________________
1363+ 6A00              //
1364+ 6A00              // cell-        a1 -- a2
1365+ 6A00              // decrement by 2 top of stack
1366+ 6A00                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1366+ 6A00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1366+ 6A00             >
1366+ 6A00             >                // dummy db directives used to calculate length of namec
1366+ 6A00 43 45 4C 4C >                db      "CELL-"
1366+ 6A04 2D          >
1366+ 6A05             >len_NFA         defl    $ - temp_NFA
1366+ 6A05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1366+ 6A00             >
1366+ 6A00 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1366+ 6A01 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1366+ 6A05 2D          >
1366+ 6A06             >                org     $-1                 // alter last byte of Name just above to set
1366+ 6A05 AD          >                db      {b $} | END_BIT     // msb as name end
1366+ 6A06             >
1366+ 6A06 F5 69       >                dw      last_NFA            // Link to previous definition Name
1366+ 6A08             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1366+ 6A08 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1366+ 6A08 ~           >
1366+ 6A08 ~           >
1366+ 6A08             >                endif           ; ok        // for other definitions it "points" the correct handler
1366+ 6A08             >                // Use of "; ok" to suppress "warning[fwdref]"
1366+ 6A08             >
1366+ 6A08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1367+ 6A08              CellMinus:
1368+ 6A08 E1                           pop     hl
1369+ 6A09 2B                           dec     hl
1370+ 6A0A 2B                           dec     hl
1371+ 6A0B
1372+ 6A0B                              psh1
1372+ 6A0B E5          >                push    hl
1372+ 6A0C DD E9       >                jp      (ix)
1373+ 6A0E
1374+ 6A0E              //  ______________________________________________________________________
1375+ 6A0E              //
1376+ 6A0E              // 2-           a1 -- a2
1377+ 6A0E              // decrement by 2 top of stack
1378+ 6A0E                              New_Def TWO_MINUS, "2-", is_code, is_normal
1378+ 6A0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1378+ 6A0E             >
1378+ 6A0E             >                // dummy db directives used to calculate length of namec
1378+ 6A0E 32 2D       >                db      "2-"
1378+ 6A10             >len_NFA         defl    $ - temp_NFA
1378+ 6A10             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1378+ 6A0E             >
1378+ 6A0E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1378+ 6A0F 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1378+ 6A11             >                org     $-1                 // alter last byte of Name just above to set
1378+ 6A10 AD          >                db      {b $} | END_BIT     // msb as name end
1378+ 6A11             >
1378+ 6A11 00 6A       >                dw      last_NFA            // Link to previous definition Name
1378+ 6A13             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1378+ 6A13 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1378+ 6A13 ~           >
1378+ 6A13 ~           >
1378+ 6A13             >                endif           ; ok        // for other definitions it "points" the correct handler
1378+ 6A13             >                // Use of "; ok" to suppress "warning[fwdref]"
1378+ 6A13             >
1378+ 6A13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1379+ 6A13 C3 08 6A                     jp      CellMinus
1380+ 6A16
1381+ 6A16              //  ______________________________________________________________________
1382+ 6A16              //
1383+ 6A16              // negate       n1 -- n2
1384+ 6A16              // change the sign of number
1385+ 6A16                              New_Def MINUS, "NEGATE", is_code, is_normal
1385+ 6A16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1385+ 6A16             >
1385+ 6A16             >                // dummy db directives used to calculate length of namec
1385+ 6A16 4E 45 47 41 >                db      "NEGATE"
1385+ 6A1A 54 45       >
1385+ 6A1C             >len_NFA         defl    $ - temp_NFA
1385+ 6A1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1385+ 6A16             >
1385+ 6A16 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1385+ 6A17 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1385+ 6A1B 54 45       >
1385+ 6A1D             >                org     $-1                 // alter last byte of Name just above to set
1385+ 6A1C C5          >                db      {b $} | END_BIT     // msb as name end
1385+ 6A1D             >
1385+ 6A1D 0E 6A       >                dw      last_NFA            // Link to previous definition Name
1385+ 6A1F             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1385+ 6A1F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1385+ 6A1F ~           >
1385+ 6A1F ~           >
1385+ 6A1F             >                endif           ; ok        // for other definitions it "points" the correct handler
1385+ 6A1F             >                // Use of "; ok" to suppress "warning[fwdref]"
1385+ 6A1F             >
1385+ 6A1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1386+ 6A1F 21 00 00                     ld      hl, 0               // subtract from 0
1387+ 6A22 D1                           pop     de
1388+ 6A23 B7                           or      a
1389+ 6A24 ED 52                        sbc     hl, de
1390+ 6A26
1391+ 6A26                              psh1
1391+ 6A26 E5          >                push    hl
1391+ 6A27 DD E9       >                jp      (ix)
1392+ 6A29
1393+ 6A29              //  ______________________________________________________________________
1394+ 6A29              //
1395+ 6A29              // dnegate      d1 -- d2
1396+ 6A29              // change the sign of a double number
1397+ 6A29                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1397+ 6A29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1397+ 6A29             >
1397+ 6A29             >                // dummy db directives used to calculate length of namec
1397+ 6A29 44 4E 45 47 >                db      "DNEGATE"
1397+ 6A2D 41 54 45    >
1397+ 6A30             >len_NFA         defl    $ - temp_NFA
1397+ 6A30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1397+ 6A29             >
1397+ 6A29 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1397+ 6A2A 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1397+ 6A2E 41 54 45    >
1397+ 6A31             >                org     $-1                 // alter last byte of Name just above to set
1397+ 6A30 C5          >                db      {b $} | END_BIT     // msb as name end
1397+ 6A31             >
1397+ 6A31 16 6A       >                dw      last_NFA            // Link to previous definition Name
1397+ 6A33             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1397+ 6A33 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1397+ 6A33 ~           >
1397+ 6A33 ~           >
1397+ 6A33             >                endif           ; ok        // for other definitions it "points" the correct handler
1397+ 6A33             >                // Use of "; ok" to suppress "warning[fwdref]"
1397+ 6A33             >
1397+ 6A33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1398+ 6A33 D9                           exx
1399+ 6A34 C1                           pop     bc                  // d1.H
1400+ 6A35 D1                           pop     de                  // d1.L
1401+ 6A36 AF                           xor     a
1402+ 6A37 67                           ld      h, a
1403+ 6A38 6F                           ld      l, a
1404+ 6A39 ED 52                        sbc     hl, de              // subtact from zero
1405+ 6A3B E5                           push    hl                  // > d2-L
1406+ 6A3C 67                           ld      h, a
1407+ 6A3D 6F                           ld      l, a
1408+ 6A3E ED 42                        sbc     hl, bc              // subtract from zero with carry
1409+ 6A40                                                          // > d2-H
1410+ 6A40 E5                           push    hl
1411+ 6A41 D9                           exx
1412+ 6A42                              next
1412+ 6A42 DD E9       >                jp      (ix)
1413+ 6A44
1414+ 6A44              //  ______________________________________________________________________
1415+ 6A44              //
1416+ 6A44              // over         n1 n2 -- n1 n2 n1
1417+ 6A44              // copy the second value of stack and put it on top.
1418+ 6A44                              New_Def OVER, "OVER", is_code, is_normal
1418+ 6A44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1418+ 6A44             >
1418+ 6A44             >                // dummy db directives used to calculate length of namec
1418+ 6A44 4F 56 45 52 >                db      "OVER"
1418+ 6A48             >len_NFA         defl    $ - temp_NFA
1418+ 6A48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1418+ 6A44             >
1418+ 6A44 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1418+ 6A45 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1418+ 6A49             >                org     $-1                 // alter last byte of Name just above to set
1418+ 6A48 D2          >                db      {b $} | END_BIT     // msb as name end
1418+ 6A49             >
1418+ 6A49 29 6A       >                dw      last_NFA            // Link to previous definition Name
1418+ 6A4B             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1418+ 6A4B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1418+ 6A4B ~           >
1418+ 6A4B ~           >
1418+ 6A4B             >                endif           ; ok        // for other definitions it "points" the correct handler
1418+ 6A4B             >                // Use of "; ok" to suppress "warning[fwdref]"
1418+ 6A4B             >
1418+ 6A4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1419+ 6A4B D1                           pop     de                  //   n2
1420+ 6A4C E1                           pop     hl                  // < n1
1421+ 6A4D E5                           push    hl                  // > n1
1422+ 6A4E D5                           push    de                  // > n2
1423+ 6A4F E5                           push    hl                  // > n1
1424+ 6A50                              next
1424+ 6A50 DD E9       >                jp      (ix)
1425+ 6A52
1426+ 6A52              //  ______________________________________________________________________
1427+ 6A52              //
1428+ 6A52              // drop         n1 --
1429+ 6A52              // drops the top of stack
1430+ 6A52                              New_Def DROP, "DROP", is_code, is_normal
1430+ 6A52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1430+ 6A52             >
1430+ 6A52             >                // dummy db directives used to calculate length of namec
1430+ 6A52 44 52 4F 50 >                db      "DROP"
1430+ 6A56             >len_NFA         defl    $ - temp_NFA
1430+ 6A56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1430+ 6A52             >
1430+ 6A52 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1430+ 6A53 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1430+ 6A57             >                org     $-1                 // alter last byte of Name just above to set
1430+ 6A56 D0          >                db      {b $} | END_BIT     // msb as name end
1430+ 6A57             >
1430+ 6A57 44 6A       >                dw      last_NFA            // Link to previous definition Name
1430+ 6A59             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1430+ 6A59 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1430+ 6A59 ~           >
1430+ 6A59 ~           >
1430+ 6A59             >                endif           ; ok        // for other definitions it "points" the correct handler
1430+ 6A59             >                // Use of "; ok" to suppress "warning[fwdref]"
1430+ 6A59             >
1430+ 6A59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1431+ 6A59 E1                           pop     hl                  // < n1 and discard previous TOS
1432+ 6A5A                              next
1432+ 6A5A DD E9       >                jp      (ix)
1433+ 6A5C
1434+ 6A5C              //  ______________________________________________________________________
1435+ 6A5C              //
1436+ 6A5C              // nip          n1 n2 -- n2
1437+ 6A5C              // drops the second elemento on the stack
1438+ 6A5C                              New_Def NIP, "NIP", is_code, is_normal
1438+ 6A5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1438+ 6A5C             >
1438+ 6A5C             >                // dummy db directives used to calculate length of namec
1438+ 6A5C 4E 49 50    >                db      "NIP"
1438+ 6A5F             >len_NFA         defl    $ - temp_NFA
1438+ 6A5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1438+ 6A5C             >
1438+ 6A5C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1438+ 6A5D 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1438+ 6A60             >                org     $-1                 // alter last byte of Name just above to set
1438+ 6A5F D0          >                db      {b $} | END_BIT     // msb as name end
1438+ 6A60             >
1438+ 6A60 52 6A       >                dw      last_NFA            // Link to previous definition Name
1438+ 6A62             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1438+ 6A62 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1438+ 6A62 ~           >
1438+ 6A62 ~           >
1438+ 6A62             >                endif           ; ok        // for other definitions it "points" the correct handler
1438+ 6A62             >                // Use of "; ok" to suppress "warning[fwdref]"
1438+ 6A62             >
1438+ 6A62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1439+ 6A62
1440+ 6A62 E1                           pop     hl                  // < n1 discarded
1441+ 6A63 E3                           ex      (sp), hl
1442+ 6A64                              next
1442+ 6A64 DD E9       >                jp      (ix)
1443+ 6A66
1444+ 6A66              //  ______________________________________________________________________
1445+ 6A66              //
1446+ 6A66              // tuck         n1 n2 -- n2 n1 n2
1447+ 6A66              // copy the top element after the second.
1448+ 6A66                              New_Def TUCK, "TUCK", is_code, is_normal
1448+ 6A66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1448+ 6A66             >
1448+ 6A66             >                // dummy db directives used to calculate length of namec
1448+ 6A66 54 55 43 4B >                db      "TUCK"
1448+ 6A6A             >len_NFA         defl    $ - temp_NFA
1448+ 6A6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1448+ 6A66             >
1448+ 6A66 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1448+ 6A67 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1448+ 6A6B             >                org     $-1                 // alter last byte of Name just above to set
1448+ 6A6A CB          >                db      {b $} | END_BIT     // msb as name end
1448+ 6A6B             >
1448+ 6A6B 5C 6A       >                dw      last_NFA            // Link to previous definition Name
1448+ 6A6D             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1448+ 6A6D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1448+ 6A6D ~           >
1448+ 6A6D ~           >
1448+ 6A6D             >                endif           ; ok        // for other definitions it "points" the correct handler
1448+ 6A6D             >                // Use of "; ok" to suppress "warning[fwdref]"
1448+ 6A6D             >
1448+ 6A6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1449+ 6A6D E1                           pop     hl
1450+ 6A6E D1                           pop     de                  // < n1
1451+ 6A6F E5                           push    hl                  // > n2  and TOS
1452+ 6A70 D5                           push    de                  // > n1
1453+ 6A71 E5                           push    hl
1454+ 6A72                              next
1454+ 6A72 DD E9       >                jp      (ix)
1455+ 6A74
1456+ 6A74              //  ______________________________________________________________________
1457+ 6A74              //
1458+ 6A74              // swap         n1 n2 -- n2 n1
1459+ 6A74              // swaps the two values on top of stack
1460+ 6A74                              New_Def SWAP, "SWAP", is_code, is_normal
1460+ 6A74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1460+ 6A74             >
1460+ 6A74             >                // dummy db directives used to calculate length of namec
1460+ 6A74 53 57 41 50 >                db      "SWAP"
1460+ 6A78             >len_NFA         defl    $ - temp_NFA
1460+ 6A78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1460+ 6A74             >
1460+ 6A74 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1460+ 6A75 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1460+ 6A79             >                org     $-1                 // alter last byte of Name just above to set
1460+ 6A78 D0          >                db      {b $} | END_BIT     // msb as name end
1460+ 6A79             >
1460+ 6A79 66 6A       >                dw      last_NFA            // Link to previous definition Name
1460+ 6A7B             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1460+ 6A7B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1460+ 6A7B ~           >
1460+ 6A7B ~           >
1460+ 6A7B             >                endif           ; ok        // for other definitions it "points" the correct handler
1460+ 6A7B             >                // Use of "; ok" to suppress "warning[fwdref]"
1460+ 6A7B             >
1460+ 6A7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1461+ 6A7B E1                           pop     hl                  // < n1
1462+ 6A7C E3                           ex      (sp),hl             // > n2
1463+ 6A7D E5                           push    hl                  // copy n1 to TOS
1464+ 6A7E                              next
1464+ 6A7E DD E9       >                jp      (ix)
1465+ 6A80
1466+ 6A80              //  ______________________________________________________________________
1467+ 6A80              //
1468+ 6A80              // dup         n -- n n
1469+ 6A80              // duplicates the top value of stack
1470+ 6A80                              New_Def DUP, "DUP", is_code, is_normal
1470+ 6A80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1470+ 6A80             >
1470+ 6A80             >                // dummy db directives used to calculate length of namec
1470+ 6A80 44 55 50    >                db      "DUP"
1470+ 6A83             >len_NFA         defl    $ - temp_NFA
1470+ 6A83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1470+ 6A80             >
1470+ 6A80 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1470+ 6A81 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1470+ 6A84             >                org     $-1                 // alter last byte of Name just above to set
1470+ 6A83 D0          >                db      {b $} | END_BIT     // msb as name end
1470+ 6A84             >
1470+ 6A84 74 6A       >                dw      last_NFA            // Link to previous definition Name
1470+ 6A86             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1470+ 6A86 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1470+ 6A86 ~           >
1470+ 6A86 ~           >
1470+ 6A86             >                endif           ; ok        // for other definitions it "points" the correct handler
1470+ 6A86             >                // Use of "; ok" to suppress "warning[fwdref]"
1470+ 6A86             >
1470+ 6A86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1471+ 6A86 E1                           pop     hl
1472+ 6A87 E5                           push    hl                  // > n duplicate TOS
1473+ 6A88 E5                           push    hl
1474+ 6A89                              next
1474+ 6A89 DD E9       >                jp      (ix)
1475+ 6A8B
1476+ 6A8B              //  ______________________________________________________________________
1477+ 6A8B              //
1478+ 6A8B              // rot         n1 n2 n3 -- n2 n3 n1
1479+ 6A8B              // Rotates the 3 top values of stack by picking the 3rd in access-order
1480+ 6A8B              // and putting it on top. The other two are shifted down one place.
1481+ 6A8B                              New_Def ROT, "ROT", is_code, is_normal
1481+ 6A8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1481+ 6A8B             >
1481+ 6A8B             >                // dummy db directives used to calculate length of namec
1481+ 6A8B 52 4F 54    >                db      "ROT"
1481+ 6A8E             >len_NFA         defl    $ - temp_NFA
1481+ 6A8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1481+ 6A8B             >
1481+ 6A8B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1481+ 6A8C 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1481+ 6A8F             >                org     $-1                 // alter last byte of Name just above to set
1481+ 6A8E D4          >                db      {b $} | END_BIT     // msb as name end
1481+ 6A8F             >
1481+ 6A8F 80 6A       >                dw      last_NFA            // Link to previous definition Name
1481+ 6A91             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1481+ 6A91 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1481+ 6A91 ~           >
1481+ 6A91 ~           >
1481+ 6A91             >                endif           ; ok        // for other definitions it "points" the correct handler
1481+ 6A91             >                // Use of "; ok" to suppress "warning[fwdref]"
1481+ 6A91             >
1481+ 6A91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1482+ 6A91 D1                           pop     de                  // < n3
1483+ 6A92 E1                           pop     hl                  // < n2
1484+ 6A93 E3                           ex      (sp),hl             // > n2 < n1
1485+ 6A94 D5                           push    de                  // > n3
1486+ 6A95 E5                           push    hl                  // copy n1 to TOS
1487+ 6A96                              next
1487+ 6A96 DD E9       >                jp      (ix)
1488+ 6A98
1489+ 6A98              //  ______________________________________________________________________
1490+ 6A98              //
1491+ 6A98              // -rot         n1 n2 n3 -- n3 n1 n2
1492+ 6A98              // Rotates the 3 top values of stack by picking the 1st in access-order
1493+ 6A98              // and putting back to 3rd place. The other two are shifted down one place.
1494+ 6A98                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1494+ 6A98             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1494+ 6A98             >
1494+ 6A98             >                // dummy db directives used to calculate length of namec
1494+ 6A98 2D 52 4F 54 >                db      "-ROT"
1494+ 6A9C             >len_NFA         defl    $ - temp_NFA
1494+ 6A9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1494+ 6A98             >
1494+ 6A98 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1494+ 6A99 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1494+ 6A9D             >                org     $-1                 // alter last byte of Name just above to set
1494+ 6A9C D4          >                db      {b $} | END_BIT     // msb as name end
1494+ 6A9D             >
1494+ 6A9D 8B 6A       >                dw      last_NFA            // Link to previous definition Name
1494+ 6A9F             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1494+ 6A9F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1494+ 6A9F ~           >
1494+ 6A9F ~           >
1494+ 6A9F             >                endif           ; ok        // for other definitions it "points" the correct handler
1494+ 6A9F             >                // Use of "; ok" to suppress "warning[fwdref]"
1494+ 6A9F             >
1494+ 6A9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1495+ 6A9F E1                           pop     hl                  // < n3
1496+ 6AA0 D1                           pop     de                  // < n2
1497+ 6AA1 E3                           ex      (sp),hl             // > n3 < n1
1498+ 6AA2 E5                           push    hl                  // > n1
1499+ 6AA3 D5                           push    de                  // copy n3 to TOS
1500+ 6AA4                              next
1500+ 6AA4 DD E9       >                jp      (ix)
1501+ 6AA6
1502+ 6AA6              //  ______________________________________________________________________
1503+ 6AA6              //
1504+ 6AA6              // pick        n1 -- nx
1505+ 6AA6              // picks the nth element from TOS
1506+ 6AA6                              New_Def PICK, "PICK", is_code, is_normal
1506+ 6AA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1506+ 6AA6             >
1506+ 6AA6             >                // dummy db directives used to calculate length of namec
1506+ 6AA6 50 49 43 4B >                db      "PICK"
1506+ 6AAA             >len_NFA         defl    $ - temp_NFA
1506+ 6AAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1506+ 6AA6             >
1506+ 6AA6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1506+ 6AA7 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1506+ 6AAB             >                org     $-1                 // alter last byte of Name just above to set
1506+ 6AAA CB          >                db      {b $} | END_BIT     // msb as name end
1506+ 6AAB             >
1506+ 6AAB 98 6A       >                dw      last_NFA            // Link to previous definition Name
1506+ 6AAD             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1506+ 6AAD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1506+ 6AAD ~           >
1506+ 6AAD ~           >
1506+ 6AAD             >                endif           ; ok        // for other definitions it "points" the correct handler
1506+ 6AAD             >                // Use of "; ok" to suppress "warning[fwdref]"
1506+ 6AAD             >
1506+ 6AAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1507+ 6AAD E1                           pop     hl                  // take TOS as index
1508+ 6AAE 29                           add     hl, hl              // as cells
1509+ 6AAF 39                           add     hl, sp              // from Stack Pointer
1510+ 6AB0 7E                           ld      a, (hl)             // replace TOS
1511+ 6AB1 23                           inc     hl
1512+ 6AB2 66                           ld      h, (hl)
1513+ 6AB3 6F                           ld      l, a
1514+ 6AB4
1515+ 6AB4                              psh1
1515+ 6AB4 E5          >                push    hl
1515+ 6AB5 DD E9       >                jp      (ix)
1516+ 6AB7
1517+ 6AB7
1518+ 6AB7              //  ______________________________________________________________________
1519+ 6AB7              //
1520+ 6AB7              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1521+ 6AB7              // picks the nth element from TOS
1522+ 6AB7              //              New_Def ROLL, "ROLL", is_code, is_normal
1523+ 6AB7              //              exx                     // we need all registers free
1524+ 6AB7              //              pop     hl              // number of cells to roll
1525+ 6AB7              //              ld      a, h
1526+ 6AB7              //              or       l
1527+ 6AB7              //              jr      z, Roll_Zero
1528+ 6AB7              //                  add     hl, hl              // number of bytes to move
1529+ 6AB7              //                  ld      b, h
1530+ 6AB7              //                  ld      c, l
1531+ 6AB7              //                  add     hl, sp          // address of n1
1532+ 6AB7              //                  ld      a, (hl)         // take n1 into a and a,
1533+ 6AB7              //                  inc     hl
1534+ 6AB7              //                  ex      af, af'
1535+ 6AB7              //                  ld      a, (hl)         // take n1 into a and a,
1536+ 6AB7              //                  ld      d, h
1537+ 6AB7              //                  ld      e, l
1538+ 6AB7              //                  dec     hl
1539+ 6AB7              //                  dec     hl
1540+ 6AB7              //                  lddr
1541+ 6AB7              //                  ex      de, hl
1542+ 6AB7              //                  ld      (hl), a
1543+ 6AB7              //                  dec     hl
1544+ 6AB7              //                  ex      af, af'
1545+ 6AB7              //                  ld      (hl), a
1546+ 6AB7              //Roll_Zero:
1547+ 6AB7              //              exx
1548+ 6AB7              //              next
1549+ 6AB7
1550+ 6AB7
1551+ 6AB7              //  ______________________________________________________________________
1552+ 6AB7              //
1553+ 6AB7              // 2over        d1 d2 -- d1 d2 d1
1554+ 6AB7              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1555+ 6AB7              // copy the second double of stack and put on top.
1556+ 6AB7              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1557+ 6AB7              //
1558+ 6AB7              //              ld      hl, 7
1559+ 6AB7              //              add     hl, sp
1560+ 6AB7              //              ld      d, (hl)
1561+ 6AB7              //              dec     hl
1562+ 6AB7              //              ld      e, (hl)             // d1-L
1563+ 6AB7              //              push    de
1564+ 6AB7              //              dec     hl
1565+ 6AB7              //              ld      d, (hl)
1566+ 6AB7              //              dec     hl
1567+ 6AB7              //              ld      e, (hl)             // d1-H
1568+ 6AB7              //              push    de
1569+ 6AB7              //              next
1570+ 6AB7
1571+ 6AB7              //  ______________________________________________________________________
1572+ 6AB7              //
1573+ 6AB7              // 2drop        d --
1574+ 6AB7              //              n1 n2 --
1575+ 6AB7              // drops the top double from stack
1576+ 6AB7                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1576+ 6AB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1576+ 6AB7             >
1576+ 6AB7             >                // dummy db directives used to calculate length of namec
1576+ 6AB7 32 44 52 4F >                db      "2DROP"
1576+ 6ABB 50          >
1576+ 6ABC             >len_NFA         defl    $ - temp_NFA
1576+ 6ABC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1576+ 6AB7             >
1576+ 6AB7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1576+ 6AB8 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1576+ 6ABC 50          >
1576+ 6ABD             >                org     $-1                 // alter last byte of Name just above to set
1576+ 6ABC D0          >                db      {b $} | END_BIT     // msb as name end
1576+ 6ABD             >
1576+ 6ABD A6 6A       >                dw      last_NFA            // Link to previous definition Name
1576+ 6ABF             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1576+ 6ABF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1576+ 6ABF ~           >
1576+ 6ABF ~           >
1576+ 6ABF             >                endif           ; ok        // for other definitions it "points" the correct handler
1576+ 6ABF             >                // Use of "; ok" to suppress "warning[fwdref]"
1576+ 6ABF             >
1576+ 6ABF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1577+ 6ABF E1                           pop     hl
1578+ 6AC0 E1                           pop     hl
1579+ 6AC1                              next
1579+ 6AC1 DD E9       >                jp      (ix)
1580+ 6AC3
1581+ 6AC3              //  ______________________________________________________________________
1582+ 6AC3              //
1583+ 6AC3              // 2nip         d1 d2 -- d2
1584+ 6AC3              //              n1 n2 n3 n4 -- n3 n4
1585+ 6AC3              // drops the second double on the stack
1586+ 6AC3              //              New_Def TWO_NIP, 4, "2nip"
1587+ 6AC3              //              ...
1588+ 6AC3
1589+ 6AC3              //  ______________________________________________________________________
1590+ 6AC3              //
1591+ 6AC3              // 2tuck         d1 d2 -- d2 d1 d2
1592+ 6AC3              // copy the top element after the second.
1593+ 6AC3              //              New_Def TWO_TUCK, 5, "2tuck"
1594+ 6AC3              //              ...
1595+ 6AC3
1596+ 6AC3              //  ______________________________________________________________________
1597+ 6AC3              //
1598+ 6AC3              // 2swap         d1 d2 -- d2 d1
1599+ 6AC3              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1600+ 6AC3              // swaps the two doubles on top of stack
1601+ 6AC3                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1601+ 6AC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1601+ 6AC3             >
1601+ 6AC3             >                // dummy db directives used to calculate length of namec
1601+ 6AC3 32 53 57 41 >                db      "2SWAP"
1601+ 6AC7 50          >
1601+ 6AC8             >len_NFA         defl    $ - temp_NFA
1601+ 6AC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1601+ 6AC3             >
1601+ 6AC3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1601+ 6AC4 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1601+ 6AC8 50          >
1601+ 6AC9             >                org     $-1                 // alter last byte of Name just above to set
1601+ 6AC8 D0          >                db      {b $} | END_BIT     // msb as name end
1601+ 6AC9             >
1601+ 6AC9 B7 6A       >                dw      last_NFA            // Link to previous definition Name
1601+ 6ACB             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1601+ 6ACB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1601+ 6ACB ~           >
1601+ 6ACB ~           >
1601+ 6ACB             >                endif           ; ok        // for other definitions it "points" the correct handler
1601+ 6ACB             >                // Use of "; ok" to suppress "warning[fwdref]"
1601+ 6ACB             >
1601+ 6ACB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1602+ 6ACB F1                           pop     af                  //   d2-H
1603+ 6ACC E1                           pop     hl                  // < d2-L
1604+ 6ACD D1                           pop     de                  // < d1-H
1605+ 6ACE E3                           ex      (sp), hl            // < d1-L > d2-L
1606+ 6ACF F5                           push    af                  // > d2-H
1607+ 6AD0 E5                           push    hl                  // > d1-L
1608+ 6AD1 D5                           push    de
1609+ 6AD2
1610+ 6AD2                              next
1610+ 6AD2 DD E9       >                jp      (ix)
1611+ 6AD4
1612+ 6AD4              //  ______________________________________________________________________
1613+ 6AD4              //
1614+ 6AD4              // 2dup         d -- d d
1615+ 6AD4              //              n1 n2 -- n1 n2 n1 n2
1616+ 6AD4              // duplicates the top double of stack
1617+ 6AD4                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1617+ 6AD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1617+ 6AD4             >
1617+ 6AD4             >                // dummy db directives used to calculate length of namec
1617+ 6AD4 32 44 55 50 >                db      "2DUP"
1617+ 6AD8             >len_NFA         defl    $ - temp_NFA
1617+ 6AD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1617+ 6AD4             >
1617+ 6AD4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1617+ 6AD5 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1617+ 6AD9             >                org     $-1                 // alter last byte of Name just above to set
1617+ 6AD8 D0          >                db      {b $} | END_BIT     // msb as name end
1617+ 6AD9             >
1617+ 6AD9 C3 6A       >                dw      last_NFA            // Link to previous definition Name
1617+ 6ADB             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1617+ 6ADB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1617+ 6ADB ~           >
1617+ 6ADB ~           >
1617+ 6ADB             >                endif           ; ok        // for other definitions it "points" the correct handler
1617+ 6ADB             >                // Use of "; ok" to suppress "warning[fwdref]"
1617+ 6ADB             >
1617+ 6ADB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1618+ 6ADB E1                           pop     hl                  // < d-H
1619+ 6ADC D1                           pop     de                  // < d-L
1620+ 6ADD D5                           push    de                  // < d-L
1621+ 6ADE E5                           push    hl                  // > d-H
1622+ 6ADF D5                           push    de                  // > d-L
1623+ 6AE0 E5                           push    hl                  // > d-H
1624+ 6AE1                              next
1624+ 6AE1 DD E9       >                jp      (ix)
1625+ 6AE3
1626+ 6AE3              //  ______________________________________________________________________
1627+ 6AE3              //
1628+ 6AE3              // 2rot         d1 d2 d3 -- d2 d3 d1
1629+ 6AE3              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1630+ 6AE3              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1631+ 6AE3              // and putting it on top. The other two are shifted down one place.
1632+ 6AE3              //              New_Def TWO?ROT, 4, "2rot"
1633+ 6AE3              //              ...
1634+ 6AE3              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1635+ 6AE3              //
1636+ 6AE3              //      d3  |d2  |d1  |
1637+ 6AE3              //      h l |h l |h l |
1638+ 6AE3              // SP   LHED|LHED|LHED|
1639+ 6AE3              // SP  +0123|4567|89ab|
1640+ 6AE3              //              ld      hl, $000B
1641+ 6AE3              //              add     hl, sp
1642+ 6AE3              //              ld      d, (hl)
1643+ 6AE3              //              dec     hl
1644+ 6AE3              //              ld      e, (hl)
1645+ 6AE3              //              dec     hl
1646+ 6AE3              //              push    de
1647+ 6AE3              //              ld      d, (hl)
1648+ 6AE3              //              dec     hl
1649+ 6AE3              //              ld      e, (hl)
1650+ 6AE3              //              dec     hl
1651+ 6AE3              //              push    de
1652+ 6AE3
1653+ 6AE3              //      d1  |d3  |d2  |d1  |
1654+ 6AE3              //      h l |h l |h l |h l |
1655+ 6AE3              // SP   LHED|LHED|LHED|LHED|
1656+ 6AE3              // SP       +0123|4567|89ab|
1657+ 6AE3
1658+ 6AE3              //              ld      d, h
1659+ 6AE3              //              ld      e, l
1660+ 6AE3              //              inc     de
1661+ 6AE3              //              inc     de
1662+ 6AE3              //              inc     de
1663+ 6AE3              //              inc     de
1664+ 6AE3              //              push    bc
1665+ 6AE3              //              ld      bc, $000C
1666+ 6AE3              //              lddr
1667+ 6AE3              //              pop     bc
1668+ 6AE3              //              pop     de
1669+ 6AE3              //              pop     de
1670+ 6AE3              //
1671+ 6AE3              //              next
1672+ 6AE3
1673+ 6AE3
1674+ 6AE3              //  ______________________________________________________________________
1675+ 6AE3              //
1676+ 6AE3              // +!           n a --
1677+ 6AE3              // Sums to the content of address a the number n.
1678+ 6AE3              // It is the same of  a @ n + a !
1679+ 6AE3                              New_Def PLUSSTORE, "+!", is_code, is_normal
1679+ 6AE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1679+ 6AE3             >
1679+ 6AE3             >                // dummy db directives used to calculate length of namec
1679+ 6AE3 2B 21       >                db      "+!"
1679+ 6AE5             >len_NFA         defl    $ - temp_NFA
1679+ 6AE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1679+ 6AE3             >
1679+ 6AE3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1679+ 6AE4 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1679+ 6AE6             >                org     $-1                 // alter last byte of Name just above to set
1679+ 6AE5 A1          >                db      {b $} | END_BIT     // msb as name end
1679+ 6AE6             >
1679+ 6AE6 D4 6A       >                dw      last_NFA            // Link to previous definition Name
1679+ 6AE8             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1679+ 6AE8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1679+ 6AE8 ~           >
1679+ 6AE8 ~           >
1679+ 6AE8             >                endif           ; ok        // for other definitions it "points" the correct handler
1679+ 6AE8             >                // Use of "; ok" to suppress "warning[fwdref]"
1679+ 6AE8             >
1679+ 6AE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1680+ 6AE8 E1                           pop     hl                  // hl is the address
1681+ 6AE9 D1                           pop     de                  // de is the number
1682+ 6AEA 7E                           ld      a, (hl)
1683+ 6AEB 83                           add     e
1684+ 6AEC 77                           ld      (hl), a
1685+ 6AED 23                           inc     hl
1686+ 6AEE 7E                           ld      a, (hl)
1687+ 6AEF 8A                           adc     d
1688+ 6AF0 77                           ld      (hl), a
1689+ 6AF1
1690+ 6AF1                              next
1690+ 6AF1 DD E9       >                jp      (ix)
1691+ 6AF3
1692+ 6AF3              //  ______________________________________________________________________
1693+ 6AF3              //
1694+ 6AF3              // toggle       a n --
1695+ 6AF3              // Complements (xor) the byte at addrress  a  with the model n.
1696+ 6AF3                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1696+ 6AF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1696+ 6AF3             >
1696+ 6AF3             >                // dummy db directives used to calculate length of namec
1696+ 6AF3 54 4F 47 47 >                db      "TOGGLE"
1696+ 6AF7 4C 45       >
1696+ 6AF9             >len_NFA         defl    $ - temp_NFA
1696+ 6AF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1696+ 6AF3             >
1696+ 6AF3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1696+ 6AF4 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1696+ 6AF8 4C 45       >
1696+ 6AFA             >                org     $-1                 // alter last byte of Name just above to set
1696+ 6AF9 C5          >                db      {b $} | END_BIT     // msb as name end
1696+ 6AFA             >
1696+ 6AFA E3 6A       >                dw      last_NFA            // Link to previous definition Name
1696+ 6AFC             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1696+ 6AFC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1696+ 6AFC ~           >
1696+ 6AFC ~           >
1696+ 6AFC             >                endif           ; ok        // for other definitions it "points" the correct handler
1696+ 6AFC             >                // Use of "; ok" to suppress "warning[fwdref]"
1696+ 6AFC             >
1696+ 6AFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1697+ 6AFC D1                           pop     de
1698+ 6AFD E1                           pop     hl
1699+ 6AFE 7E                           ld      a, (hl)
1700+ 6AFF AB                           xor     e
1701+ 6B00 77                           ld      (hl), a
1702+ 6B01
1703+ 6B01                              next
1703+ 6B01 DD E9       >                jp      (ix)
1704+ 6B03
1705+ 6B03              //  ______________________________________________________________________
1706+ 6B03              //
1707+ 6B03              // @            a -- n
1708+ 6B03              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1709+ 6B03                              New_Def FETCH, "@", is_code, is_normal
1709+ 6B03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1709+ 6B03             >
1709+ 6B03             >                // dummy db directives used to calculate length of namec
1709+ 6B03 40          >                db      "@"
1709+ 6B04             >len_NFA         defl    $ - temp_NFA
1709+ 6B04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1709+ 6B03             >
1709+ 6B03 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1709+ 6B04 40          >                db      "@"               // name string in 7-bit ascii, but
1709+ 6B05             >                org     $-1                 // alter last byte of Name just above to set
1709+ 6B04 C0          >                db      {b $} | END_BIT     // msb as name end
1709+ 6B05             >
1709+ 6B05 F3 6A       >                dw      last_NFA            // Link to previous definition Name
1709+ 6B07             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1709+ 6B07 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1709+ 6B07 ~           >
1709+ 6B07 ~           >
1709+ 6B07             >                endif           ; ok        // for other definitions it "points" the correct handler
1709+ 6B07             >                // Use of "; ok" to suppress "warning[fwdref]"
1709+ 6B07             >
1709+ 6B07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1710+ 6B07 E1                           pop     hl
1711+ 6B08 5E                           ld      e, (hl)             // low-byte
1712+ 6B09 23                           inc     hl
1713+ 6B0A 56                           ld      d, (hl)             // high-byte
1714+ 6B0B D5                           push    de
1715+ 6B0C                              next
1715+ 6B0C DD E9       >                jp      (ix)
1716+ 6B0E
1717+ 6B0E              //  ______________________________________________________________________
1718+ 6B0E              //
1719+ 6B0E              // !            n a --
1720+ 6B0E              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1721+ 6B0E                              New_Def STORE, "!", is_code, is_normal
1721+ 6B0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1721+ 6B0E             >
1721+ 6B0E             >                // dummy db directives used to calculate length of namec
1721+ 6B0E 21          >                db      "!"
1721+ 6B0F             >len_NFA         defl    $ - temp_NFA
1721+ 6B0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1721+ 6B0E             >
1721+ 6B0E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1721+ 6B0F 21          >                db      "!"               // name string in 7-bit ascii, but
1721+ 6B10             >                org     $-1                 // alter last byte of Name just above to set
1721+ 6B0F A1          >                db      {b $} | END_BIT     // msb as name end
1721+ 6B10             >
1721+ 6B10 03 6B       >                dw      last_NFA            // Link to previous definition Name
1721+ 6B12             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1721+ 6B12 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1721+ 6B12 ~           >
1721+ 6B12 ~           >
1721+ 6B12             >                endif           ; ok        // for other definitions it "points" the correct handler
1721+ 6B12             >                // Use of "; ok" to suppress "warning[fwdref]"
1721+ 6B12             >
1721+ 6B12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1722+ 6B12 E1                           pop     hl                  // address
1723+ 6B13 D1                           pop     de                  // < n
1724+ 6B14 73                           ld      (hl), e             // low-byte
1725+ 6B15 23                           inc     hl
1726+ 6B16 72                           ld      (hl), d             // high-byte
1727+ 6B17
1728+ 6B17                              next
1728+ 6B17 DD E9       >                jp      (ix)
1729+ 6B19
1730+ 6B19              //  ______________________________________________________________________
1731+ 6B19              //
1732+ 6B19              // c@           a -- c
1733+ 6B19              // fetch a character n from address a
1734+ 6B19                              New_Def CFETCH, "C@", is_code, is_normal
1734+ 6B19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1734+ 6B19             >
1734+ 6B19             >                // dummy db directives used to calculate length of namec
1734+ 6B19 43 40       >                db      "C@"
1734+ 6B1B             >len_NFA         defl    $ - temp_NFA
1734+ 6B1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1734+ 6B19             >
1734+ 6B19 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1734+ 6B1A 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1734+ 6B1C             >                org     $-1                 // alter last byte of Name just above to set
1734+ 6B1B C0          >                db      {b $} | END_BIT     // msb as name end
1734+ 6B1C             >
1734+ 6B1C 0E 6B       >                dw      last_NFA            // Link to previous definition Name
1734+ 6B1E             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1734+ 6B1E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1734+ 6B1E ~           >
1734+ 6B1E ~           >
1734+ 6B1E             >                endif           ; ok        // for other definitions it "points" the correct handler
1734+ 6B1E             >                // Use of "; ok" to suppress "warning[fwdref]"
1734+ 6B1E             >
1734+ 6B1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1735+ 6B1E E1                           pop     hl
1736+ 6B1F 6E                           ld      l, (hl)             // low-byte
1737+ 6B20 26 00                        ld      h, 0
1738+ 6B22
1739+ 6B22                              psh1
1739+ 6B22 E5          >                push    hl
1739+ 6B23 DD E9       >                jp      (ix)
1740+ 6B25
1741+ 6B25              //  ______________________________________________________________________
1742+ 6B25              //
1743+ 6B25              // c!           c a --
1744+ 6B25              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1745+ 6B25                              New_Def CSTORE, "C!", is_code, is_normal
1745+ 6B25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1745+ 6B25             >
1745+ 6B25             >                // dummy db directives used to calculate length of namec
1745+ 6B25 43 21       >                db      "C!"
1745+ 6B27             >len_NFA         defl    $ - temp_NFA
1745+ 6B27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1745+ 6B25             >
1745+ 6B25 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1745+ 6B26 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1745+ 6B28             >                org     $-1                 // alter last byte of Name just above to set
1745+ 6B27 A1          >                db      {b $} | END_BIT     // msb as name end
1745+ 6B28             >
1745+ 6B28 19 6B       >                dw      last_NFA            // Link to previous definition Name
1745+ 6B2A             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1745+ 6B2A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1745+ 6B2A ~           >
1745+ 6B2A ~           >
1745+ 6B2A             >                endif           ; ok        // for other definitions it "points" the correct handler
1745+ 6B2A             >                // Use of "; ok" to suppress "warning[fwdref]"
1745+ 6B2A             >
1745+ 6B2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1746+ 6B2A E1                           pop     hl                  // < address
1747+ 6B2B D1                           pop     de
1748+ 6B2C 73                           ld      (hl), e             // low-byte
1749+ 6B2D
1750+ 6B2D                              next
1750+ 6B2D DD E9       >                jp      (ix)
1751+ 6B2F
1752+ 6B2F              //  ______________________________________________________________________
1753+ 6B2F              //
1754+ 6B2F              // 2@           a -- d
1755+ 6B2F              // fetch a 32 bits number d from address a and leaves it on top of the
1756+ 6B2F              // stack as two single numbers, high part as top of the stack.
1757+ 6B2F              // A double number is normally kept in CPU registers as HLDE.
1758+ 6B2F              // On stack a double number is treated as two single numbers
1759+ 6B2F              // where BC is on the top of the stack and HL is the second from top,
1760+ 6B2F              // so the sign of the number can be checked on top of stack
1761+ 6B2F              // and in the stack memory it appears as LHED.
1762+ 6B2F                              New_Def TWO_FETCH, "2@", is_code, is_normal
1762+ 6B2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1762+ 6B2F             >
1762+ 6B2F             >                // dummy db directives used to calculate length of namec
1762+ 6B2F 32 40       >                db      "2@"
1762+ 6B31             >len_NFA         defl    $ - temp_NFA
1762+ 6B31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1762+ 6B2F             >
1762+ 6B2F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1762+ 6B30 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1762+ 6B32             >                org     $-1                 // alter last byte of Name just above to set
1762+ 6B31 C0          >                db      {b $} | END_BIT     // msb as name end
1762+ 6B32             >
1762+ 6B32 25 6B       >                dw      last_NFA            // Link to previous definition Name
1762+ 6B34             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1762+ 6B34 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1762+ 6B34 ~           >
1762+ 6B34 ~           >
1762+ 6B34             >                endif           ; ok        // for other definitions it "points" the correct handler
1762+ 6B34             >                // Use of "; ok" to suppress "warning[fwdref]"
1762+ 6B34             >
1762+ 6B34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1763+ 6B34 E1                           pop     hl                  // address
1764+ 6B35 5E                           ld      e, (hl)             // low-byte
1765+ 6B36 23                           inc     hl
1766+ 6B37 56                           ld      d, (hl)             // high-byte
1767+ 6B38 23                           inc     hl
1768+ 6B39 7E                           ld      a, (hl)             // low-byte
1769+ 6B3A 23                           inc     hl
1770+ 6B3B 66                           ld      h, (hl)             // high-byte
1771+ 6B3C 6F                           ld      l, a
1772+ 6B3D E5                           push    hl
1773+ 6B3E D5                           push    de
1774+ 6B3F                              next
1774+ 6B3F DD E9       >                jp      (ix)
1775+ 6B41
1776+ 6B41              //  ______________________________________________________________________
1777+ 6B41              //
1778+ 6B41              // 2!           d a --
1779+ 6B41              // stores a 32 bits number d from address a and leaves it on top of the
1780+ 6B41              // stack as two single numbers, high part as top of the stack.
1781+ 6B41              // A double number is normally kept in CPU registers as HLDE.
1782+ 6B41              // On stack a double number is treated as two single numbers
1783+ 6B41              // where BC is on the top of the stack and HL is the second from top,
1784+ 6B41              // so the sign of the number can be checked on top of stack
1785+ 6B41              // and in the stack memory it appears as LHED.
1786+ 6B41                              New_Def TWO_STORE, "2!", is_code, is_normal
1786+ 6B41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1786+ 6B41             >
1786+ 6B41             >                // dummy db directives used to calculate length of namec
1786+ 6B41 32 21       >                db      "2!"
1786+ 6B43             >len_NFA         defl    $ - temp_NFA
1786+ 6B43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1786+ 6B41             >
1786+ 6B41 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1786+ 6B42 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1786+ 6B44             >                org     $-1                 // alter last byte of Name just above to set
1786+ 6B43 A1          >                db      {b $} | END_BIT     // msb as name end
1786+ 6B44             >
1786+ 6B44 2F 6B       >                dw      last_NFA            // Link to previous definition Name
1786+ 6B46             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1786+ 6B46 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1786+ 6B46 ~           >
1786+ 6B46 ~           >
1786+ 6B46             >                endif           ; ok        // for other definitions it "points" the correct handler
1786+ 6B46             >                // Use of "; ok" to suppress "warning[fwdref]"
1786+ 6B46             >
1786+ 6B46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1787+ 6B46 D9                           exx
1788+ 6B47 E1                           pop     hl                  // address
1789+ 6B48 C1                           pop     bc                  // < high-part
1790+ 6B49 D1                           pop     de                  // < low-part > Instruction Pointer
1791+ 6B4A 71                           ld      (hl), c
1792+ 6B4B 23                           inc     hl
1793+ 6B4C 70                           ld      (hl), b
1794+ 6B4D 23                           inc     hl
1795+ 6B4E 73                           ld      (hl), e
1796+ 6B4F 23                           inc     hl
1797+ 6B50 72                           ld      (hl), d
1798+ 6B51 D9                           exx
1799+ 6B52                              next
1799+ 6B52 DD E9       >                jp      (ix)
1800+ 6B54
1801+ 6B54              //  ______________________________________________________________________
1802+ 6B54              //
1803+ 6B54              // p@           a -- c
1804+ 6B54              // Read one byte from port a and leave the result on top of stack
1805+ 6B54                              New_Def PFETCH, "P@", is_code, is_normal
1805+ 6B54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1805+ 6B54             >
1805+ 6B54             >                // dummy db directives used to calculate length of namec
1805+ 6B54 50 40       >                db      "P@"
1805+ 6B56             >len_NFA         defl    $ - temp_NFA
1805+ 6B56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1805+ 6B54             >
1805+ 6B54 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1805+ 6B55 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1805+ 6B57             >                org     $-1                 // alter last byte of Name just above to set
1805+ 6B56 C0          >                db      {b $} | END_BIT     // msb as name end
1805+ 6B57             >
1805+ 6B57 41 6B       >                dw      last_NFA            // Link to previous definition Name
1805+ 6B59             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1805+ 6B59 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1805+ 6B59 ~           >
1805+ 6B59 ~           >
1805+ 6B59             >                endif           ; ok        // for other definitions it "points" the correct handler
1805+ 6B59             >                // Use of "; ok" to suppress "warning[fwdref]"
1805+ 6B59             >
1805+ 6B59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1806+ 6B59 D9                           exx
1807+ 6B5A C1                           pop     bc
1808+ 6B5B 26 00                        ld      h, 0
1809+ 6B5D ED 68                        in      l, (c)
1810+ 6B5F E5                           push    hl
1811+ 6B60 D9                           exx
1812+ 6B61                              next
1812+ 6B61 DD E9       >                jp      (ix)
1813+ 6B63
1814+ 6B63              //  ______________________________________________________________________
1815+ 6B63              //
1816+ 6B63              // p!           c a --
1817+ 6B63              // Send one byte (top of stack) to port a
1818+ 6B63                              New_Def PSTORE, "P!", is_code, is_normal
1818+ 6B63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1818+ 6B63             >
1818+ 6B63             >                // dummy db directives used to calculate length of namec
1818+ 6B63 50 21       >                db      "P!"
1818+ 6B65             >len_NFA         defl    $ - temp_NFA
1818+ 6B65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1818+ 6B63             >
1818+ 6B63 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1818+ 6B64 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1818+ 6B66             >                org     $-1                 // alter last byte of Name just above to set
1818+ 6B65 A1          >                db      {b $} | END_BIT     // msb as name end
1818+ 6B66             >
1818+ 6B66 54 6B       >                dw      last_NFA            // Link to previous definition Name
1818+ 6B68             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1818+ 6B68 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1818+ 6B68 ~           >
1818+ 6B68 ~           >
1818+ 6B68             >                endif           ; ok        // for other definitions it "points" the correct handler
1818+ 6B68             >                // Use of "; ok" to suppress "warning[fwdref]"
1818+ 6B68             >
1818+ 6B68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1819+ 6B68 D9                           exx
1820+ 6B69 C1                           pop     bc
1821+ 6B6A E1                           pop     hl                  // < c
1822+ 6B6B ED 69                        out     (c), l              // low-byte
1823+ 6B6D D9                           exx
1824+ 6B6E                              next
1824+ 6B6E DD E9       >                jp      (ix)
1825+ 6B70
1826+ 6B70
1827+ 6B70              //  ______________________________________________________________________
1828+ 6B70              //
1829+ 6B70              // 2*           n1 -- n2
1830+ 6B70              // doubles the number at top of stack
1831+ 6B70                              New_Def TWO_MUL, "2*", is_code, is_normal
1831+ 6B70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1831+ 6B70             >
1831+ 6B70             >                // dummy db directives used to calculate length of namec
1831+ 6B70 32 2A       >                db      "2*"
1831+ 6B72             >len_NFA         defl    $ - temp_NFA
1831+ 6B72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1831+ 6B70             >
1831+ 6B70 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1831+ 6B71 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1831+ 6B73             >                org     $-1                 // alter last byte of Name just above to set
1831+ 6B72 AA          >                db      {b $} | END_BIT     // msb as name end
1831+ 6B73             >
1831+ 6B73 63 6B       >                dw      last_NFA            // Link to previous definition Name
1831+ 6B75             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1831+ 6B75 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1831+ 6B75 ~           >
1831+ 6B75 ~           >
1831+ 6B75             >                endif           ; ok        // for other definitions it "points" the correct handler
1831+ 6B75             >                // Use of "; ok" to suppress "warning[fwdref]"
1831+ 6B75             >
1831+ 6B75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1832+ 6B75              Two_Mul_Ptr:
1833+ 6B75 E1                           pop     hl
1834+ 6B76 29                           add     hl, hl
1835+ 6B77
1836+ 6B77                              psh1
1836+ 6B77 E5          >                push    hl
1836+ 6B78 DD E9       >                jp      (ix)
1837+ 6B7A
1838+ 6B7A              //  ______________________________________________________________________
1839+ 6B7A              //
1840+ 6B7A              // 2/           n1 -- n2
1841+ 6B7A              // halves the top of stack, sign is unchanged
1842+ 6B7A                              New_Def TWO_DIV, "2/", is_code, is_normal
1842+ 6B7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1842+ 6B7A             >
1842+ 6B7A             >                // dummy db directives used to calculate length of namec
1842+ 6B7A 32 2F       >                db      "2/"
1842+ 6B7C             >len_NFA         defl    $ - temp_NFA
1842+ 6B7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1842+ 6B7A             >
1842+ 6B7A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1842+ 6B7B 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1842+ 6B7D             >                org     $-1                 // alter last byte of Name just above to set
1842+ 6B7C AF          >                db      {b $} | END_BIT     // msb as name end
1842+ 6B7D             >
1842+ 6B7D 70 6B       >                dw      last_NFA            // Link to previous definition Name
1842+ 6B7F             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1842+ 6B7F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1842+ 6B7F ~           >
1842+ 6B7F ~           >
1842+ 6B7F             >                endif           ; ok        // for other definitions it "points" the correct handler
1842+ 6B7F             >                // Use of "; ok" to suppress "warning[fwdref]"
1842+ 6B7F             >
1842+ 6B7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1843+ 6B7F E1                           pop     hl
1844+ 6B80 CB 2C                        sra     h
1845+ 6B82 CB 1D                        rr      l
1846+ 6B84
1847+ 6B84                              psh1
1847+ 6B84 E5          >                push    hl
1847+ 6B85 DD E9       >                jp      (ix)
1848+ 6B87
1849+ 6B87              //  ______________________________________________________________________
1850+ 6B87              //
1851+ 6B87              // lshift       n1 u -- n2
1852+ 6B87              // bit left shift of u bits
1853+ 6B87                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1853+ 6B87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1853+ 6B87             >
1853+ 6B87             >                // dummy db directives used to calculate length of namec
1853+ 6B87 4C 53 48 49 >                db      "LSHIFT"
1853+ 6B8B 46 54       >
1853+ 6B8D             >len_NFA         defl    $ - temp_NFA
1853+ 6B8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1853+ 6B87             >
1853+ 6B87 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1853+ 6B88 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1853+ 6B8C 46 54       >
1853+ 6B8E             >                org     $-1                 // alter last byte of Name just above to set
1853+ 6B8D D4          >                db      {b $} | END_BIT     // msb as name end
1853+ 6B8E             >
1853+ 6B8E 7A 6B       >                dw      last_NFA            // Link to previous definition Name
1853+ 6B90             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1853+ 6B90 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1853+ 6B90 ~           >
1853+ 6B90 ~           >
1853+ 6B90             >                endif           ; ok        // for other definitions it "points" the correct handler
1853+ 6B90             >                // Use of "; ok" to suppress "warning[fwdref]"
1853+ 6B90             >
1853+ 6B90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1854+ 6B90 D1                           pop     de
1855+ 6B91
1856+ 6B91 E1                           pop     hl
1857+ 6B92 7B                           ld      a, e
1858+ 6B93 B7                           or      a
1859+ 6B94 28 04                        jr      z, Lshift_Zero
1860+ 6B96              Lshift_Loop:
1861+ 6B96 29                                   add     hl, hl
1862+ 6B97 3D                                   dec     a
1863+ 6B98 20 FC                            jr      nz, Lshift_Loop
1864+ 6B9A              Lshift_Zero:
1865+ 6B9A
1866+ 6B9A
1867+ 6B9A                              psh1
1867+ 6B9A E5          >                push    hl
1867+ 6B9B DD E9       >                jp      (ix)
1868+ 6B9D
1869+ 6B9D              //  ______________________________________________________________________
1870+ 6B9D              //
1871+ 6B9D              // rshift       n1 u -- n2
1872+ 6B9D              // bit right shift of u bits
1873+ 6B9D                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1873+ 6B9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1873+ 6B9D             >
1873+ 6B9D             >                // dummy db directives used to calculate length of namec
1873+ 6B9D 52 53 48 49 >                db      "RSHIFT"
1873+ 6BA1 46 54       >
1873+ 6BA3             >len_NFA         defl    $ - temp_NFA
1873+ 6BA3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1873+ 6B9D             >
1873+ 6B9D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1873+ 6B9E 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1873+ 6BA2 46 54       >
1873+ 6BA4             >                org     $-1                 // alter last byte of Name just above to set
1873+ 6BA3 D4          >                db      {b $} | END_BIT     // msb as name end
1873+ 6BA4             >
1873+ 6BA4 87 6B       >                dw      last_NFA            // Link to previous definition Name
1873+ 6BA6             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1873+ 6BA6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1873+ 6BA6 ~           >
1873+ 6BA6 ~           >
1873+ 6BA6             >                endif           ; ok        // for other definitions it "points" the correct handler
1873+ 6BA6             >                // Use of "; ok" to suppress "warning[fwdref]"
1873+ 6BA6             >
1873+ 6BA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1874+ 6BA6 D1                           pop     de
1875+ 6BA7
1876+ 6BA7 E1                           pop     hl
1877+ 6BA8 7B                           ld      a, e
1878+ 6BA9 B7                           or      a
1879+ 6BAA 28 07                        jr      z, Rshift_Zero
1880+ 6BAC              Rshift_Loop:
1881+ 6BAC CB 3C                                srl     h
1882+ 6BAE CB 1D                                rr      l
1883+ 6BB0 3D                                   dec     a
1884+ 6BB1 20 F9                            jr      nz, Rshift_Loop
1885+ 6BB3              Rshift_Zero:
1886+ 6BB3
1887+ 6BB3
1888+ 6BB3                              psh1
1888+ 6BB3 E5          >                push    hl
1888+ 6BB4 DD E9       >                jp      (ix)
1889+ 6BB6
1890+ 6BB6              //  ______________________________________________________________________
1891+ 6BB6              //
1892+ 6BB6              // cells        n1 -- n2
1893+ 6BB6              // decrement by 2 top of stack
1894+ 6BB6                              New_Def CELLS, "CELLS", is_code, is_normal
1894+ 6BB6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1894+ 6BB6             >
1894+ 6BB6             >                // dummy db directives used to calculate length of namec
1894+ 6BB6 43 45 4C 4C >                db      "CELLS"
1894+ 6BBA 53          >
1894+ 6BBB             >len_NFA         defl    $ - temp_NFA
1894+ 6BBB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1894+ 6BB6             >
1894+ 6BB6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1894+ 6BB7 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1894+ 6BBB 53          >
1894+ 6BBC             >                org     $-1                 // alter last byte of Name just above to set
1894+ 6BBB D3          >                db      {b $} | END_BIT     // msb as name end
1894+ 6BBC             >
1894+ 6BBC 9D 6B       >                dw      last_NFA            // Link to previous definition Name
1894+ 6BBE             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1894+ 6BBE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1894+ 6BBE ~           >
1894+ 6BBE ~           >
1894+ 6BBE             >                endif           ; ok        // for other definitions it "points" the correct handler
1894+ 6BBE             >                // Use of "; ok" to suppress "warning[fwdref]"
1894+ 6BBE             >
1894+ 6BBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1895+ 6BBE C3 75 6B                     jp      Two_Mul_Ptr
1896+ 6BC1
1897+ 6BC1
1898+ 6BC1              //  ______________________________________________________________________
1899+ 6BC1
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
 111  6BC1                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
   1+ 6BC1              //  ______________________________________________________________________
   2+ 6BC1              //
   3+ 6BC1              //  L1.asm
   4+ 6BC1              //
   5+ 6BC1              //  Level-1 definitions and derivate
   6+ 6BC1              //  ______________________________________________________________________
   7+ 6BC1
   8+ 6BC1              //  ______________________________________________________________________
   9+ 6BC1              //
  10+ 6BC1              // :            -- cccc     ( compile time )
  11+ 6BC1              //              i*x -- j*x  ( run time )
  12+ 6BC1              // Colon Definition
  13+ 6BC1                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6BC1             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6BC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6BC1             >
  13+ 6BC1             >                // dummy db directives used to calculate length of namec
  13+ 6BC1 3A          >                db      ":"
  13+ 6BC2             >len_NFA         defl    $ - temp_NFA
  13+ 6BC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6BC1             >
  13+ 6BC1 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6BC2 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6BC3             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6BC2 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6BC3             >
  13+ 6BC3 B6 6B       >                dw      last_NFA            // Link to previous definition Name
  13+ 6BC5             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6BC5 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6BC8             >
  13+ 6BC8             >
  13+ 6BC8             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6BC8             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6BC8             >
  13+ 6BC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6BC8
  15+ 6BC8 68 70                        dw      QEXEC                   // ?exec
  16+ 6BCA 20 70                        dw      STORE_CSP               // !csp
  17+ 6BCC B0 6D 07 6B                  dw      CURRENT, FETCH          // current @
  18+ 6BD0 A2 6D 12 6B                  dw      CONTEXT, STORE          // context !
  19+ 6BD4 87 76                        dw      CREATE                  // create  ( forward )
  20+ 6BD6 1D 71                        dw      SMUDGE                  // dmudge
  21+ 6BD8 07 71                        dw      SQUARED_CLOSE           // ]
  22+ 6BDA 77 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6BDC                                                              // ... immediate
  24+ 6BDC              Enter_Ptr:
  25+ 6BDC                              // via call coded in CFA
  26+ 6BDC                              ldhlrp
  26+ 6BDC 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6BDF 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6BE0 70                           ld      (hl), b
  29+ 6BE1 2B                           dec     hl
  30+ 6BE2 71                           ld      (hl), c
  31+ 6BE3                              ldrphl
  31+ 6BE3 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6BE6
  33+ 6BE6
  34+ 6BE6 C1                           pop     bc                  // points to PFA of "this" word
  35+ 6BE7                              next
  35+ 6BE7 DD E9       >                jp      (ix)
  36+ 6BE9
  37+ 6BE9              //  ______________________________________________________________________
  38+ 6BE9              //
  39+ 6BE9              // ;            --
  40+ 6BE9              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6BE9                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6BE9             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6BE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6BE9             >
  41+ 6BE9             >                // dummy db directives used to calculate length of namec
  41+ 6BE9 3B          >                db      ";"
  41+ 6BEA             >len_NFA         defl    $ - temp_NFA
  41+ 6BEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6BE9             >
  41+ 6BE9 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6BEA 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6BEB             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6BEA BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6BEB             >
  41+ 6BEB C1 6B       >                dw      last_NFA            // Link to previous definition Name
  41+ 6BED             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6BED CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6BF0             >
  41+ 6BF0             >
  41+ 6BF0             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6BF0             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6BF0             >
  41+ 6BF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6BF0
  43+ 6BF0 94 70                        dw      QCSP                    // ?csp
  44+ 6BF2 CD 70 43 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6BF6 1D 71                        dw      SMUDGE                  // smudge
  46+ 6BF8 F8 70                        dw      SQUARED_OPEN            // [
  47+ 6BFA 43 69                        dw      EXIT                    // ; immediate
  48+ 6BFC
  49+ 6BFC              //  ______________________________________________________________________
  50+ 6BFC              //
  51+ 6BFC              // noop         --
  52+ 6BFC
  53+ 6BFC                              New_Def NOOP, "NOOP", is_code, is_normal
  53+ 6BFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6BFC             >
  53+ 6BFC             >                // dummy db directives used to calculate length of namec
  53+ 6BFC 4E 4F 4F 50 >                db      "NOOP"
  53+ 6C00             >len_NFA         defl    $ - temp_NFA
  53+ 6C00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6BFC             >
  53+ 6BFC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6BFD 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6C01             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6C00 D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6C01             >
  53+ 6C01 E9 6B       >                dw      last_NFA            // Link to previous definition Name
  53+ 6C03             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6C03 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  53+ 6C03 ~           >
  53+ 6C03 ~           >
  53+ 6C03             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6C03             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6C03             >
  53+ 6C03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6C03                              next
  54+ 6C03 DD E9       >                jp      (ix)
  55+ 6C05
  56+ 6C05              //  ______________________________________________________________________
  57+ 6C05              //
  58+ 6C05              // constant     n -- cccc     ( compile time )
  59+ 6C05              //              -- n          ( run time )
  60+ 6C05              // Constant definition.
  61+ 6C05                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6C05             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6C05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6C05             >
  61+ 6C05             >                // dummy db directives used to calculate length of namec
  61+ 6C05 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6C09 54 41 4E 54 >
  61+ 6C0D             >len_NFA         defl    $ - temp_NFA
  61+ 6C0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6C05             >
  61+ 6C05 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6C06 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6C0A 54 41 4E 54 >
  61+ 6C0E             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6C0D D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6C0E             >
  61+ 6C0E FC 6B       >                dw      last_NFA            // Link to previous definition Name
  61+ 6C10             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6C10 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6C13             >
  61+ 6C13             >
  61+ 6C13             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6C13             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6C13             >
  61+ 6C13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6C13
  63+ 6C13 87 76                        dw      CREATE                  // create
  64+ 6C15 7D 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6C17 77 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6C19              Constant_Ptr:
  67+ 6C19
  68+ 6C19
  69+ 6C19 E1                           pop     hl
  70+ 6C1A
  71+ 6C1A 5E                           ld      e, (hl)
  72+ 6C1B 23                           inc     hl
  73+ 6C1C 56                           ld      d, (hl)
  74+ 6C1D D5                           push    de
  75+ 6C1E                              next
  75+ 6C1E DD E9       >                jp      (ix)
  76+ 6C20
  77+ 6C20              //  ______________________________________________________________________
  78+ 6C20              //
  79+ 6C20              // variable     n -- cccc     ( compile time )
  80+ 6C20              //              -- a          ( run time )
  81+ 6C20              // Variable definition, n is the initial value.
  82+ 6C20                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6C20             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6C20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6C20             >
  82+ 6C20             >                // dummy db directives used to calculate length of namec
  82+ 6C20 56 41 52 49 >                db      "VARIABLE"
  82+ 6C24 41 42 4C 45 >
  82+ 6C28             >len_NFA         defl    $ - temp_NFA
  82+ 6C28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6C20             >
  82+ 6C20 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6C21 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6C25 41 42 4C 45 >
  82+ 6C29             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6C28 C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6C29             >
  82+ 6C29 05 6C       >                dw      last_NFA            // Link to previous definition Name
  82+ 6C2B             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6C2B CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6C2E             >
  82+ 6C2E             >
  82+ 6C2E             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6C2E             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6C2E             >
  82+ 6C2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6C2E
  84+ 6C2E 55 6C                        dw      ZERO
  85+ 6C30 10 6C                        dw      CONSTANT                // constant
  86+ 6C32 77 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  87+ 6C34              Variable_Ptr:
  88+ 6C34
  89+ 6C34
  90+ 6C34
  91+ 6C34
  92+ 6C34                              next
  92+ 6C34 DD E9       >                jp      (ix)
  93+ 6C36
  94+ 6C36              //  ______________________________________________________________________
  95+ 6C36              //
  96+ 6C36              // user         b -- cccc     ( compile time )
  97+ 6C36              //              -- a          ( run time )
  98+ 6C36              // User variable definition
  99+ 6C36                              Colon_Def USER, "USER", is_normal
  99+ 6C36             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  99+ 6C36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99+ 6C36             >
  99+ 6C36             >                // dummy db directives used to calculate length of namec
  99+ 6C36 55 53 45 52 >                db      "USER"
  99+ 6C3A             >len_NFA         defl    $ - temp_NFA
  99+ 6C3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99+ 6C36             >
  99+ 6C36 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99+ 6C37 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  99+ 6C3B             >                org     $-1                 // alter last byte of Name just above to set
  99+ 6C3A D2          >                db      {b $} | END_BIT     // msb as name end
  99+ 6C3B             >
  99+ 6C3B 20 6C       >                dw      last_NFA            // Link to previous definition Name
  99+ 6C3D             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  99+ 6C3D CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  99+ 6C40             >
  99+ 6C40             >
  99+ 6C40             >                endif           ; ok        // for other definitions it "points" the correct handler
  99+ 6C40             >                // Use of "; ok" to suppress "warning[fwdref]"
  99+ 6C40             >
  99+ 6C40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100+ 6C40
 101+ 6C40 87 76                        dw      CREATE                  // create
 102+ 6C42 8F 6E                        dw      CCOMMA                  // c,
 103+ 6C44 77 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 104+ 6C46
 105+ 6C46
 106+ 6C46              User_Ptr:
 107+ 6C46                              // via call coded in CFA
 108+ 6C46 E1                           pop     hl
 109+ 6C47
 110+ 6C47 5E                           ld      e, (hl)
 111+ 6C48 16 00                        ld      d, 0
 112+ 6C4A 2A 94 63                     ld      hl, (USER_Pointer)
 113+ 6C4D 19                           add     hl, de
 114+ 6C4E
 115+ 6C4E                              psh1
 115+ 6C4E E5          >                push    hl
 115+ 6C4F DD E9       >                jp      (ix)
 116+ 6C51
 117+ 6C51              //  ______________________________________________________________________
 118+ 6C51              //
 119+ 6C51                              Constant_Def ZERO       ,   "0"     ,   0
 119+ 6C51             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 119+ 6C51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6C51             >
 119+ 6C51             >                // dummy db directives used to calculate length of namec
 119+ 6C51 30          >                db      "0"
 119+ 6C52             >len_NFA         defl    $ - temp_NFA
 119+ 6C52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6C51             >
 119+ 6C51 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6C52 30          >                db      "0"               // name string in 7-bit ascii, but
 119+ 6C53             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6C52 B0          >                db      {b $} | END_BIT     // msb as name end
 119+ 6C53             >
 119+ 6C53 36 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6C55             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6C55 CD 19 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6C58             >
 119+ 6C58             >
 119+ 6C58             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6C58             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6C58             >
 119+ 6C58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6C58 00 00       >                dw      0
 120+ 6C5A                              Constant_Def ONE        ,   "1"     ,   1
 120+ 6C5A             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 120+ 6C5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6C5A             >
 120+ 6C5A             >                // dummy db directives used to calculate length of namec
 120+ 6C5A 31          >                db      "1"
 120+ 6C5B             >len_NFA         defl    $ - temp_NFA
 120+ 6C5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6C5A             >
 120+ 6C5A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6C5B 31          >                db      "1"               // name string in 7-bit ascii, but
 120+ 6C5C             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6C5B B1          >                db      {b $} | END_BIT     // msb as name end
 120+ 6C5C             >
 120+ 6C5C 51 6C       >                dw      last_NFA            // Link to previous definition Name
 120+ 6C5E             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6C5E CD 19 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6C61             >
 120+ 6C61             >
 120+ 6C61             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6C61             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6C61             >
 120+ 6C61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6C61 01 00       >                dw      1
 121+ 6C63                              Constant_Def TWO        ,   "2"     ,   2
 121+ 6C63             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 121+ 6C63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6C63             >
 121+ 6C63             >                // dummy db directives used to calculate length of namec
 121+ 6C63 32          >                db      "2"
 121+ 6C64             >len_NFA         defl    $ - temp_NFA
 121+ 6C64             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6C63             >
 121+ 6C63 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6C64 32          >                db      "2"               // name string in 7-bit ascii, but
 121+ 6C65             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6C64 B2          >                db      {b $} | END_BIT     // msb as name end
 121+ 6C65             >
 121+ 6C65 5A 6C       >                dw      last_NFA            // Link to previous definition Name
 121+ 6C67             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6C67 CD 19 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6C6A             >
 121+ 6C6A             >
 121+ 6C6A             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6C6A             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6C6A             >
 121+ 6C6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6C6A 02 00       >                dw      2
 122+ 6C6C                              Constant_Def THREE      ,   "3"     ,   3
 122+ 6C6C             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 122+ 6C6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6C6C             >
 122+ 6C6C             >                // dummy db directives used to calculate length of namec
 122+ 6C6C 33          >                db      "3"
 122+ 6C6D             >len_NFA         defl    $ - temp_NFA
 122+ 6C6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6C6C             >
 122+ 6C6C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6C6D 33          >                db      "3"               // name string in 7-bit ascii, but
 122+ 6C6E             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6C6D B3          >                db      {b $} | END_BIT     // msb as name end
 122+ 6C6E             >
 122+ 6C6E 63 6C       >                dw      last_NFA            // Link to previous definition Name
 122+ 6C70             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6C70 CD 19 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6C73             >
 122+ 6C73             >
 122+ 6C73             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6C73             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6C73             >
 122+ 6C73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6C73 03 00       >                dw      3
 123+ 6C75                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 123+ 6C75             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 123+ 6C75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6C75             >
 123+ 6C75             >                // dummy db directives used to calculate length of namec
 123+ 6C75 2D 31       >                db      "-1"
 123+ 6C77             >len_NFA         defl    $ - temp_NFA
 123+ 6C77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6C75             >
 123+ 6C75 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6C76 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 123+ 6C78             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6C77 B1          >                db      {b $} | END_BIT     // msb as name end
 123+ 6C78             >
 123+ 6C78 6C 6C       >                dw      last_NFA            // Link to previous definition Name
 123+ 6C7A             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6C7A CD 19 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6C7D             >
 123+ 6C7D             >
 123+ 6C7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6C7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6C7D             >
 123+ 6C7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6C7D FF FF       >                dw      -1
 124+ 6C7F                              Constant_Def BL         ,   "BL"    , $20
 124+ 6C7F             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 124+ 6C7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6C7F             >
 124+ 6C7F             >                // dummy db directives used to calculate length of namec
 124+ 6C7F 42 4C       >                db      "BL"
 124+ 6C81             >len_NFA         defl    $ - temp_NFA
 124+ 6C81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6C7F             >
 124+ 6C7F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6C80 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 124+ 6C82             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6C81 CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6C82             >
 124+ 6C82 75 6C       >                dw      last_NFA            // Link to previous definition Name
 124+ 6C84             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6C84 CD 19 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6C87             >
 124+ 6C87             >
 124+ 6C87             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6C87             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6C87             >
 124+ 6C87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6C87 20 00       >                dw      $20
 125+ 6C89                              Constant_Def CL         ,   "C/L"   ,  64
 125+ 6C89             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 125+ 6C89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6C89             >
 125+ 6C89             >                // dummy db directives used to calculate length of namec
 125+ 6C89 43 2F 4C    >                db      "C/L"
 125+ 6C8C             >len_NFA         defl    $ - temp_NFA
 125+ 6C8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6C89             >
 125+ 6C89 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6C8A 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 125+ 6C8D             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6C8C CC          >                db      {b $} | END_BIT     // msb as name end
 125+ 6C8D             >
 125+ 6C8D 7F 6C       >                dw      last_NFA            // Link to previous definition Name
 125+ 6C8F             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6C8F CD 19 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6C92             >
 125+ 6C92             >
 125+ 6C92             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6C92             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6C92             >
 125+ 6C92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6C92 40 00       >                dw      64
 126+ 6C94                              Constant_Def BBUF       ,   "B/BUF" , 512
 126+ 6C94             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 126+ 6C94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6C94             >
 126+ 6C94             >                // dummy db directives used to calculate length of namec
 126+ 6C94 42 2F 42 55 >                db      "B/BUF"
 126+ 6C98 46          >
 126+ 6C99             >len_NFA         defl    $ - temp_NFA
 126+ 6C99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6C94             >
 126+ 6C94 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6C95 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 126+ 6C99 46          >
 126+ 6C9A             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6C99 C6          >                db      {b $} | END_BIT     // msb as name end
 126+ 6C9A             >
 126+ 6C9A 89 6C       >                dw      last_NFA            // Link to previous definition Name
 126+ 6C9C             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6C9C CD 19 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6C9F             >
 126+ 6C9F             >
 126+ 6C9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6C9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6C9F             >
 126+ 6C9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6C9F 00 02       >                dw      512
 127+ 6CA1                              Constant_Def BSCR       ,   "B/SCR" ,   2
 127+ 6CA1             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 127+ 6CA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6CA1             >
 127+ 6CA1             >                // dummy db directives used to calculate length of namec
 127+ 6CA1 42 2F 53 43 >                db      "B/SCR"
 127+ 6CA5 52          >
 127+ 6CA6             >len_NFA         defl    $ - temp_NFA
 127+ 6CA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6CA1             >
 127+ 6CA1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6CA2 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 127+ 6CA6 52          >
 127+ 6CA7             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6CA6 D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6CA7             >
 127+ 6CA7 94 6C       >                dw      last_NFA            // Link to previous definition Name
 127+ 6CA9             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6CA9 CD 19 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6CAC             >
 127+ 6CAC             >
 127+ 6CAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6CAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6CAC             >
 127+ 6CAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6CAC 02 00       >                dw      2
 128+ 6CAE                              Constant_Def LSCR       ,   "L/SCR" ,  16
 128+ 6CAE             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 128+ 6CAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ 6CAE             >
 128+ 6CAE             >                // dummy db directives used to calculate length of namec
 128+ 6CAE 4C 2F 53 43 >                db      "L/SCR"
 128+ 6CB2 52          >
 128+ 6CB3             >len_NFA         defl    $ - temp_NFA
 128+ 6CB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ 6CAE             >
 128+ 6CAE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ 6CAF 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 128+ 6CB3 52          >
 128+ 6CB4             >                org     $-1                 // alter last byte of Name just above to set
 128+ 6CB3 D2          >                db      {b $} | END_BIT     // msb as name end
 128+ 6CB4             >
 128+ 6CB4 A1 6C       >                dw      last_NFA            // Link to previous definition Name
 128+ 6CB6             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6CB6 CD 19 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6CB9             >
 128+ 6CB9             >
 128+ 6CB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6CB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6CB9             >
 128+ 6CB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6CB9 10 00       >                dw      16
 129+ 6CBB
 130+ 6CBB              //  ______________________________________________________________________
 131+ 6CBB              //
 132+ 6CBB              // +origin         --
 133+ 6CBB              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 134+ 6CBB              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 135+ 6CBB              //              dw      PLUS                    // +
 136+ 6CBB              //              dw      EXIT                    // ;
 137+ 6CBB                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 137+ 6CBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ 6CBB             >
 137+ 6CBB             >                // dummy db directives used to calculate length of namec
 137+ 6CBB 2B 4F 52 49 >                db      "+ORIGIN"
 137+ 6CBF 47 49 4E    >
 137+ 6CC2             >len_NFA         defl    $ - temp_NFA
 137+ 6CC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ 6CBB             >
 137+ 6CBB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ 6CBC 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 137+ 6CC0 47 49 4E    >
 137+ 6CC3             >                org     $-1                 // alter last byte of Name just above to set
 137+ 6CC2 CE          >                db      {b $} | END_BIT     // msb as name end
 137+ 6CC3             >
 137+ 6CC3 AE 6C       >                dw      last_NFA            // Link to previous definition Name
 137+ 6CC5             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 6CC5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 137+ 6CC5 ~           >
 137+ 6CC5 ~           >
 137+ 6CC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 6CC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 6CC5             >
 137+ 6CC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 6CC5 E1                           pop     hl
 139+ 6CC6 11 66 63                     ld      de, Cold_origin
 140+ 6CC9 19                           add     hl, de
 141+ 6CCA E5                           push    hl
 142+ 6CCB                              next
 142+ 6CCB DD E9       >                jp      (ix)
 143+ 6CCD
 144+ 6CCD
 145+ 6CCD              //  ______________________________________________________________________
 146+ 6CCD              //
 147+ 6CCD                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 147+ 6CCD             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 147+ 6CCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147+ 6CCD             >
 147+ 6CCD             >                // dummy db directives used to calculate length of namec
 147+ 6CCD 28 4E 45 58 >                db      "(NEXT)"
 147+ 6CD1 54 29       >
 147+ 6CD3             >len_NFA         defl    $ - temp_NFA
 147+ 6CD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147+ 6CCD             >
 147+ 6CCD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147+ 6CCE 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 147+ 6CD2 54 29       >
 147+ 6CD4             >                org     $-1                 // alter last byte of Name just above to set
 147+ 6CD3 A9          >                db      {b $} | END_BIT     // msb as name end
 147+ 6CD4             >
 147+ 6CD4 BB 6C       >                dw      last_NFA            // Link to previous definition Name
 147+ 6CD6             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 147+ 6CD6 CD 19 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 147+ 6CD9             >
 147+ 6CD9             >
 147+ 6CD9             >                endif           ; ok        // for other definitions it "points" the correct handler
 147+ 6CD9             >                // Use of "; ok" to suppress "warning[fwdref]"
 147+ 6CD9             >
 147+ 6CD9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 147+ 6CD9 98 63       >                dw      Next_Ptr
 148+ 6CDB
 149+ 6CDB              //  ______________________________________________________________________
 150+ 6CDB              //
 151+ 6CDB
 152+ 6CDB                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 152+ 6CDB             >                New_Def  S0, "S0", User_Ptr, is_normal
 152+ 6CDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6CDB             >
 152+ 6CDB             >                // dummy db directives used to calculate length of namec
 152+ 6CDB 53 30       >                db      "S0"
 152+ 6CDD             >len_NFA         defl    $ - temp_NFA
 152+ 6CDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6CDB             >
 152+ 6CDB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6CDC 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 152+ 6CDE             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6CDD B0          >                db      {b $} | END_BIT     // msb as name end
 152+ 6CDE             >
 152+ 6CDE CD 6C       >                dw      last_NFA            // Link to previous definition Name
 152+ 6CE0             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6CE0 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6CE3             >
 152+ 6CE3             >
 152+ 6CE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6CE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6CE3             >
 152+ 6CE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6CE3 06          >                db      06
 153+ 6CE4                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 153+ 6CE4             >                New_Def  R0, "R0", User_Ptr, is_normal
 153+ 6CE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6CE4             >
 153+ 6CE4             >                // dummy db directives used to calculate length of namec
 153+ 6CE4 52 30       >                db      "R0"
 153+ 6CE6             >len_NFA         defl    $ - temp_NFA
 153+ 6CE6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6CE4             >
 153+ 6CE4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6CE5 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 153+ 6CE7             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6CE6 B0          >                db      {b $} | END_BIT     // msb as name end
 153+ 6CE7             >
 153+ 6CE7 DB 6C       >                dw      last_NFA            // Link to previous definition Name
 153+ 6CE9             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6CE9 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6CEC             >
 153+ 6CEC             >
 153+ 6CEC             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6CEC             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6CEC             >
 153+ 6CEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6CEC 08          >                db      08
 154+ 6CED                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 154+ 6CED             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 154+ 6CED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6CED             >
 154+ 6CED             >                // dummy db directives used to calculate length of namec
 154+ 6CED 54 49 42    >                db      "TIB"
 154+ 6CF0             >len_NFA         defl    $ - temp_NFA
 154+ 6CF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6CED             >
 154+ 6CED 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6CEE 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 154+ 6CF1             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6CF0 C2          >                db      {b $} | END_BIT     // msb as name end
 154+ 6CF1             >
 154+ 6CF1 E4 6C       >                dw      last_NFA            // Link to previous definition Name
 154+ 6CF3             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6CF3 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6CF6             >
 154+ 6CF6             >
 154+ 6CF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6CF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6CF6             >
 154+ 6CF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6CF6 0A          >                db      10
 155+ 6CF7                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 155+ 6CF7             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 155+ 6CF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6CF7             >
 155+ 6CF7             >                // dummy db directives used to calculate length of namec
 155+ 6CF7 57 49 44 54 >                db      "WIDTH"
 155+ 6CFB 48          >
 155+ 6CFC             >len_NFA         defl    $ - temp_NFA
 155+ 6CFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6CF7             >
 155+ 6CF7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6CF8 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 155+ 6CFC 48          >
 155+ 6CFD             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6CFC C8          >                db      {b $} | END_BIT     // msb as name end
 155+ 6CFD             >
 155+ 6CFD ED 6C       >                dw      last_NFA            // Link to previous definition Name
 155+ 6CFF             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6CFF CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6D02             >
 155+ 6D02             >
 155+ 6D02             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6D02             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6D02             >
 155+ 6D02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6D02 0C          >                db      12
 156+ 6D03                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 156+ 6D03             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 156+ 6D03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6D03             >
 156+ 6D03             >                // dummy db directives used to calculate length of namec
 156+ 6D03 57 41 52 4E >                db      "WARNING"
 156+ 6D07 49 4E 47    >
 156+ 6D0A             >len_NFA         defl    $ - temp_NFA
 156+ 6D0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6D03             >
 156+ 6D03 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6D04 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 156+ 6D08 49 4E 47    >
 156+ 6D0B             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6D0A C7          >                db      {b $} | END_BIT     // msb as name end
 156+ 6D0B             >
 156+ 6D0B F7 6C       >                dw      last_NFA            // Link to previous definition Name
 156+ 6D0D             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6D0D CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6D10             >
 156+ 6D10             >
 156+ 6D10             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6D10             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6D10             >
 156+ 6D10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6D10 0E          >                db      14
 157+ 6D11                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 157+ 6D11             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 157+ 6D11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6D11             >
 157+ 6D11             >                // dummy db directives used to calculate length of namec
 157+ 6D11 46 45 4E 43 >                db      "FENCE"
 157+ 6D15 45          >
 157+ 6D16             >len_NFA         defl    $ - temp_NFA
 157+ 6D16             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6D11             >
 157+ 6D11 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6D12 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 157+ 6D16 45          >
 157+ 6D17             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6D16 C5          >                db      {b $} | END_BIT     // msb as name end
 157+ 6D17             >
 157+ 6D17 03 6D       >                dw      last_NFA            // Link to previous definition Name
 157+ 6D19             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6D19 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6D1C             >
 157+ 6D1C             >
 157+ 6D1C             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6D1C             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6D1C             >
 157+ 6D1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6D1C 10          >                db      16
 158+ 6D1D                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 158+ 6D1D             >                New_Def  DP, "DP", User_Ptr, is_normal
 158+ 6D1D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6D1D             >
 158+ 6D1D             >                // dummy db directives used to calculate length of namec
 158+ 6D1D 44 50       >                db      "DP"
 158+ 6D1F             >len_NFA         defl    $ - temp_NFA
 158+ 6D1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6D1D             >
 158+ 6D1D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6D1E 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 158+ 6D20             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6D1F D0          >                db      {b $} | END_BIT     // msb as name end
 158+ 6D20             >
 158+ 6D20 11 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6D22             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6D22 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6D25             >
 158+ 6D25             >
 158+ 6D25             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6D25             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6D25             >
 158+ 6D25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6D25 12          >                db      18
 159+ 6D26                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 159+ 6D26             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 159+ 6D26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6D26             >
 159+ 6D26             >                // dummy db directives used to calculate length of namec
 159+ 6D26 56 4F 43 2D >                db      "VOC-LINK"
 159+ 6D2A 4C 49 4E 4B >
 159+ 6D2E             >len_NFA         defl    $ - temp_NFA
 159+ 6D2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6D26             >
 159+ 6D26 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6D27 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 159+ 6D2B 4C 49 4E 4B >
 159+ 6D2F             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6D2E CB          >                db      {b $} | END_BIT     // msb as name end
 159+ 6D2F             >
 159+ 6D2F 1D 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6D31             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6D31 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6D34             >
 159+ 6D34             >
 159+ 6D34             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6D34             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6D34             >
 159+ 6D34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6D34 14          >                db      20
 160+ 6D35                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 160+ 6D35             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 160+ 6D35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6D35             >
 160+ 6D35             >                // dummy db directives used to calculate length of namec
 160+ 6D35 46 49 52 53 >                db      "FIRST"
 160+ 6D39 54          >
 160+ 6D3A             >len_NFA         defl    $ - temp_NFA
 160+ 6D3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6D35             >
 160+ 6D35 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6D36 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 160+ 6D3A 54          >
 160+ 6D3B             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6D3A D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6D3B             >
 160+ 6D3B 26 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6D3D             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6D3D CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6D40             >
 160+ 6D40             >
 160+ 6D40             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6D40             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6D40             >
 160+ 6D40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6D40 16          >                db      22
 161+ 6D41                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 161+ 6D41             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 161+ 6D41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6D41             >
 161+ 6D41             >                // dummy db directives used to calculate length of namec
 161+ 6D41 4C 49 4D 49 >                db      "LIMIT"
 161+ 6D45 54          >
 161+ 6D46             >len_NFA         defl    $ - temp_NFA
 161+ 6D46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6D41             >
 161+ 6D41 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6D42 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 161+ 6D46 54          >
 161+ 6D47             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6D46 D4          >                db      {b $} | END_BIT     // msb as name end
 161+ 6D47             >
 161+ 6D47 35 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6D49             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6D49 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6D4C             >
 161+ 6D4C             >
 161+ 6D4C             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6D4C             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6D4C             >
 161+ 6D4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6D4C 18          >                db      24
 162+ 6D4D                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 162+ 6D4D             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 162+ 6D4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6D4D             >
 162+ 6D4D             >                // dummy db directives used to calculate length of namec
 162+ 6D4D 45 58 50    >                db      "EXP"
 162+ 6D50             >len_NFA         defl    $ - temp_NFA
 162+ 6D50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6D4D             >
 162+ 6D4D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6D4E 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 162+ 6D51             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6D50 D0          >                db      {b $} | END_BIT     // msb as name end
 162+ 6D51             >
 162+ 6D51 41 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6D53             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6D53 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6D56             >
 162+ 6D56             >
 162+ 6D56             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6D56             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6D56             >
 162+ 6D56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6D56 1A          >                db      26
 163+ 6D57                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 163+ 6D57             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 163+ 6D57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6D57             >
 163+ 6D57             >                // dummy db directives used to calculate length of namec
 163+ 6D57 4E 4D 4F 44 >                db      "NMODE"
 163+ 6D5B 45          >
 163+ 6D5C             >len_NFA         defl    $ - temp_NFA
 163+ 6D5C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6D57             >
 163+ 6D57 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6D58 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 163+ 6D5C 45          >
 163+ 6D5D             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6D5C C5          >                db      {b $} | END_BIT     // msb as name end
 163+ 6D5D             >
 163+ 6D5D 4D 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6D5F             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6D5F CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6D62             >
 163+ 6D62             >
 163+ 6D62             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6D62             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6D62             >
 163+ 6D62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6D62 1C          >                db      28
 164+ 6D63                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 164+ 6D63             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 164+ 6D63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6D63             >
 164+ 6D63             >                // dummy db directives used to calculate length of namec
 164+ 6D63 42 4C 4B    >                db      "BLK"
 164+ 6D66             >len_NFA         defl    $ - temp_NFA
 164+ 6D66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6D63             >
 164+ 6D63 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6D64 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 164+ 6D67             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6D66 CB          >                db      {b $} | END_BIT     // msb as name end
 164+ 6D67             >
 164+ 6D67 57 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6D69             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6D69 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6D6C             >
 164+ 6D6C             >
 164+ 6D6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6D6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6D6C             >
 164+ 6D6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6D6C 1E          >                db      30
 165+ 6D6D                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 165+ 6D6D             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 165+ 6D6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6D6D             >
 165+ 6D6D             >                // dummy db directives used to calculate length of namec
 165+ 6D6D 3E 49 4E    >                db      ">IN"
 165+ 6D70             >len_NFA         defl    $ - temp_NFA
 165+ 6D70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6D6D             >
 165+ 6D6D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6D6E 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 165+ 6D71             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6D70 CE          >                db      {b $} | END_BIT     // msb as name end
 165+ 6D71             >
 165+ 6D71 63 6D       >                dw      last_NFA            // Link to previous definition Name
 165+ 6D73             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6D73 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6D76             >
 165+ 6D76             >
 165+ 6D76             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6D76             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6D76             >
 165+ 6D76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6D76 20          >                db      32
 166+ 6D77                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 166+ 6D77             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 166+ 6D77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6D77             >
 166+ 6D77             >                // dummy db directives used to calculate length of namec
 166+ 6D77 4F 55 54    >                db      "OUT"
 166+ 6D7A             >len_NFA         defl    $ - temp_NFA
 166+ 6D7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6D77             >
 166+ 6D77 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6D78 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 166+ 6D7B             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6D7A D4          >                db      {b $} | END_BIT     // msb as name end
 166+ 6D7B             >
 166+ 6D7B 6D 6D       >                dw      last_NFA            // Link to previous definition Name
 166+ 6D7D             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6D7D CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6D80             >
 166+ 6D80             >
 166+ 6D80             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6D80             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6D80             >
 166+ 6D80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6D80 22          >                db      34
 167+ 6D81                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 167+ 6D81             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 167+ 6D81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6D81             >
 167+ 6D81             >                // dummy db directives used to calculate length of namec
 167+ 6D81 53 43 52    >                db      "SCR"
 167+ 6D84             >len_NFA         defl    $ - temp_NFA
 167+ 6D84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6D81             >
 167+ 6D81 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6D82 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 167+ 6D85             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6D84 D2          >                db      {b $} | END_BIT     // msb as name end
 167+ 6D85             >
 167+ 6D85 77 6D       >                dw      last_NFA            // Link to previous definition Name
 167+ 6D87             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6D87 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6D8A             >
 167+ 6D8A             >
 167+ 6D8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6D8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6D8A             >
 167+ 6D8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6D8A 24          >                db      36
 168+ 6D8B                              User_Def OFFSET     , "OFFSET"    , 38 //
 168+ 6D8B             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 168+ 6D8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6D8B             >
 168+ 6D8B             >                // dummy db directives used to calculate length of namec
 168+ 6D8B 4F 46 46 53 >                db      "OFFSET"
 168+ 6D8F 45 54       >
 168+ 6D91             >len_NFA         defl    $ - temp_NFA
 168+ 6D91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6D8B             >
 168+ 6D8B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6D8C 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 168+ 6D90 45 54       >
 168+ 6D92             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6D91 D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6D92             >
 168+ 6D92 81 6D       >                dw      last_NFA            // Link to previous definition Name
 168+ 6D94             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6D94 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6D97             >
 168+ 6D97             >
 168+ 6D97             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6D97             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6D97             >
 168+ 6D97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6D97 26          >                db      38
 169+ 6D98                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 169+ 6D98             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 169+ 6D98             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6D98             >
 169+ 6D98             >                // dummy db directives used to calculate length of namec
 169+ 6D98 43 4F 4E 54 >                db      "CONTEXT"
 169+ 6D9C 45 58 54    >
 169+ 6D9F             >len_NFA         defl    $ - temp_NFA
 169+ 6D9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6D98             >
 169+ 6D98 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6D99 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 169+ 6D9D 45 58 54    >
 169+ 6DA0             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6D9F D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6DA0             >
 169+ 6DA0 8B 6D       >                dw      last_NFA            // Link to previous definition Name
 169+ 6DA2             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6DA2 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6DA5             >
 169+ 6DA5             >
 169+ 6DA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6DA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6DA5             >
 169+ 6DA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6DA5 28          >                db      40
 170+ 6DA6                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 170+ 6DA6             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 170+ 6DA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6DA6             >
 170+ 6DA6             >                // dummy db directives used to calculate length of namec
 170+ 6DA6 43 55 52 52 >                db      "CURRENT"
 170+ 6DAA 45 4E 54    >
 170+ 6DAD             >len_NFA         defl    $ - temp_NFA
 170+ 6DAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6DA6             >
 170+ 6DA6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6DA7 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 170+ 6DAB 45 4E 54    >
 170+ 6DAE             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6DAD D4          >                db      {b $} | END_BIT     // msb as name end
 170+ 6DAE             >
 170+ 6DAE 98 6D       >                dw      last_NFA            // Link to previous definition Name
 170+ 6DB0             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6DB0 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6DB3             >
 170+ 6DB3             >
 170+ 6DB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6DB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6DB3             >
 170+ 6DB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6DB3 2A          >                db      42
 171+ 6DB4                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 171+ 6DB4             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 171+ 6DB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6DB4             >
 171+ 6DB4             >                // dummy db directives used to calculate length of namec
 171+ 6DB4 53 54 41 54 >                db      "STATE"
 171+ 6DB8 45          >
 171+ 6DB9             >len_NFA         defl    $ - temp_NFA
 171+ 6DB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6DB4             >
 171+ 6DB4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6DB5 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 171+ 6DB9 45          >
 171+ 6DBA             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6DB9 C5          >                db      {b $} | END_BIT     // msb as name end
 171+ 6DBA             >
 171+ 6DBA A6 6D       >                dw      last_NFA            // Link to previous definition Name
 171+ 6DBC             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6DBC CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6DBF             >
 171+ 6DBF             >
 171+ 6DBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6DBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6DBF             >
 171+ 6DBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6DBF 2C          >                db      44
 172+ 6DC0                              User_Def BASE       , "BASE"      , 46 //
 172+ 6DC0             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 172+ 6DC0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6DC0             >
 172+ 6DC0             >                // dummy db directives used to calculate length of namec
 172+ 6DC0 42 41 53 45 >                db      "BASE"
 172+ 6DC4             >len_NFA         defl    $ - temp_NFA
 172+ 6DC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6DC0             >
 172+ 6DC0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6DC1 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 172+ 6DC5             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6DC4 C5          >                db      {b $} | END_BIT     // msb as name end
 172+ 6DC5             >
 172+ 6DC5 B4 6D       >                dw      last_NFA            // Link to previous definition Name
 172+ 6DC7             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6DC7 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6DCA             >
 172+ 6DCA             >
 172+ 6DCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6DCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6DCA             >
 172+ 6DCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6DCA 2E          >                db      46
 173+ 6DCB                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 173+ 6DCB             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 173+ 6DCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6DCB             >
 173+ 6DCB             >                // dummy db directives used to calculate length of namec
 173+ 6DCB 44 50 4C    >                db      "DPL"
 173+ 6DCE             >len_NFA         defl    $ - temp_NFA
 173+ 6DCE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6DCB             >
 173+ 6DCB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6DCC 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 173+ 6DCF             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6DCE CC          >                db      {b $} | END_BIT     // msb as name end
 173+ 6DCF             >
 173+ 6DCF C0 6D       >                dw      last_NFA            // Link to previous definition Name
 173+ 6DD1             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6DD1 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6DD4             >
 173+ 6DD4             >
 173+ 6DD4             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6DD4             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6DD4             >
 173+ 6DD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6DD4 30          >                db      48
 174+ 6DD5                              User_Def FLD        , "FLD"       , 50 // output field width
 174+ 6DD5             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 174+ 6DD5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6DD5             >
 174+ 6DD5             >                // dummy db directives used to calculate length of namec
 174+ 6DD5 46 4C 44    >                db      "FLD"
 174+ 6DD8             >len_NFA         defl    $ - temp_NFA
 174+ 6DD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6DD5             >
 174+ 6DD5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6DD6 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 174+ 6DD9             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6DD8 C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6DD9             >
 174+ 6DD9 CB 6D       >                dw      last_NFA            // Link to previous definition Name
 174+ 6DDB             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6DDB CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6DDE             >
 174+ 6DDE             >
 174+ 6DDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6DDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6DDE             >
 174+ 6DDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6DDE 32          >                db      50
 175+ 6DDF                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 175+ 6DDF             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 175+ 6DDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6DDF             >
 175+ 6DDF             >                // dummy db directives used to calculate length of namec
 175+ 6DDF 43 53 50    >                db      "CSP"
 175+ 6DE2             >len_NFA         defl    $ - temp_NFA
 175+ 6DE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6DDF             >
 175+ 6DDF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6DE0 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 175+ 6DE3             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6DE2 D0          >                db      {b $} | END_BIT     // msb as name end
 175+ 6DE3             >
 175+ 6DE3 D5 6D       >                dw      last_NFA            // Link to previous definition Name
 175+ 6DE5             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6DE5 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6DE8             >
 175+ 6DE8             >
 175+ 6DE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6DE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6DE8             >
 175+ 6DE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6DE8 34          >                db      52
 176+ 6DE9                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 176+ 6DE9             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 176+ 6DE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6DE9             >
 176+ 6DE9             >                // dummy db directives used to calculate length of namec
 176+ 6DE9 52 23       >                db      "R#"
 176+ 6DEB             >len_NFA         defl    $ - temp_NFA
 176+ 6DEB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6DE9             >
 176+ 6DE9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6DEA 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 176+ 6DEC             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6DEB A3          >                db      {b $} | END_BIT     // msb as name end
 176+ 6DEC             >
 176+ 6DEC DF 6D       >                dw      last_NFA            // Link to previous definition Name
 176+ 6DEE             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6DEE CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6DF1             >
 176+ 6DF1             >
 176+ 6DF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6DF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6DF1             >
 176+ 6DF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6DF1 36          >                db      54
 177+ 6DF2                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 177+ 6DF2             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 177+ 6DF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6DF2             >
 177+ 6DF2             >                // dummy db directives used to calculate length of namec
 177+ 6DF2 48 4C 44    >                db      "HLD"
 177+ 6DF5             >len_NFA         defl    $ - temp_NFA
 177+ 6DF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6DF2             >
 177+ 6DF2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6DF3 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 177+ 6DF6             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6DF5 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ 6DF6             >
 177+ 6DF6 E9 6D       >                dw      last_NFA            // Link to previous definition Name
 177+ 6DF8             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6DF8 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6DFB             >
 177+ 6DFB             >
 177+ 6DFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6DFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6DFB             >
 177+ 6DFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6DFB 38          >                db      56
 178+ 6DFC                              User_Def USE        , "USE"       , 58 // address of last used block
 178+ 6DFC             >                New_Def  USE, "USE", User_Ptr, is_normal
 178+ 6DFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6DFC             >
 178+ 6DFC             >                // dummy db directives used to calculate length of namec
 178+ 6DFC 55 53 45    >                db      "USE"
 178+ 6DFF             >len_NFA         defl    $ - temp_NFA
 178+ 6DFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6DFC             >
 178+ 6DFC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6DFD 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 178+ 6E00             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6DFF C5          >                db      {b $} | END_BIT     // msb as name end
 178+ 6E00             >
 178+ 6E00 F2 6D       >                dw      last_NFA            // Link to previous definition Name
 178+ 6E02             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6E02 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6E05             >
 178+ 6E05             >
 178+ 6E05             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6E05             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6E05             >
 178+ 6E05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6E05 3A          >                db      58
 179+ 6E06                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 179+ 6E06             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 179+ 6E06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6E06             >
 179+ 6E06             >                // dummy db directives used to calculate length of namec
 179+ 6E06 50 52 45 56 >                db      "PREV"
 179+ 6E0A             >len_NFA         defl    $ - temp_NFA
 179+ 6E0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6E06             >
 179+ 6E06 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6E07 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 179+ 6E0B             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6E0A D6          >                db      {b $} | END_BIT     // msb as name end
 179+ 6E0B             >
 179+ 6E0B FC 6D       >                dw      last_NFA            // Link to previous definition Name
 179+ 6E0D             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6E0D CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6E10             >
 179+ 6E10             >
 179+ 6E10             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6E10             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6E10             >
 179+ 6E10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6E10 3C          >                db      60
 180+ 6E11                              User_Def LP         , "LP"        , 62 // line printer (not used)
 180+ 6E11             >                New_Def  LP, "LP", User_Ptr, is_normal
 180+ 6E11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6E11             >
 180+ 6E11             >                // dummy db directives used to calculate length of namec
 180+ 6E11 4C 50       >                db      "LP"
 180+ 6E13             >len_NFA         defl    $ - temp_NFA
 180+ 6E13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6E11             >
 180+ 6E11 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6E12 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 180+ 6E14             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6E13 D0          >                db      {b $} | END_BIT     // msb as name end
 180+ 6E14             >
 180+ 6E14 06 6E       >                dw      last_NFA            // Link to previous definition Name
 180+ 6E16             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6E16 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6E19             >
 180+ 6E19             >
 180+ 6E19             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6E19             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6E19             >
 180+ 6E19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6E19 3E          >                db      62
 181+ 6E1A                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 181+ 6E1A             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 181+ 6E1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6E1A             >
 181+ 6E1A             >                // dummy db directives used to calculate length of namec
 181+ 6E1A 50 4C 41 43 >                db      "PLACE"
 181+ 6E1E 45          >
 181+ 6E1F             >len_NFA         defl    $ - temp_NFA
 181+ 6E1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6E1A             >
 181+ 6E1A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6E1B 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 181+ 6E1F 45          >
 181+ 6E20             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6E1F C5          >                db      {b $} | END_BIT     // msb as name end
 181+ 6E20             >
 181+ 6E20 11 6E       >                dw      last_NFA            // Link to previous definition Name
 181+ 6E22             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6E22 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6E25             >
 181+ 6E25             >
 181+ 6E25             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6E25             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6E25             >
 181+ 6E25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6E25 40          >                db      64
 182+ 6E26                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 182+ 6E26             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 182+ 6E26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6E26             >
 182+ 6E26             >                // dummy db directives used to calculate length of namec
 182+ 6E26 53 4F 55 52 >                db      "SOURCE-ID"
 182+ 6E2A 43 45 2D 49 >
 182+ 6E2E 44          >
 182+ 6E2F             >len_NFA         defl    $ - temp_NFA
 182+ 6E2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6E26             >
 182+ 6E26 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6E27 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 182+ 6E2B 43 45 2D 49 >
 182+ 6E2F 44          >
 182+ 6E30             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6E2F C4          >                db      {b $} | END_BIT     // msb as name end
 182+ 6E30             >
 182+ 6E30 1A 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6E32             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6E32 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6E35             >
 182+ 6E35             >
 182+ 6E35             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6E35             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6E35             >
 182+ 6E35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6E35 42          >                db      66
 183+ 6E36                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 183+ 6E36             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 183+ 6E36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6E36             >
 183+ 6E36             >                // dummy db directives used to calculate length of namec
 183+ 6E36 53 50 41 4E >                db      "SPAN"
 183+ 6E3A             >len_NFA         defl    $ - temp_NFA
 183+ 6E3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6E36             >
 183+ 6E36 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6E37 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 183+ 6E3B             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6E3A CE          >                db      {b $} | END_BIT     // msb as name end
 183+ 6E3B             >
 183+ 6E3B 26 6E       >                dw      last_NFA            // Link to previous definition Name
 183+ 6E3D             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6E3D CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6E40             >
 183+ 6E40             >
 183+ 6E40             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6E40             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6E40             >
 183+ 6E40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6E40 44          >                db      68
 184+ 6E41                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 184+ 6E41             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 184+ 6E41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6E41             >
 184+ 6E41             >                // dummy db directives used to calculate length of namec
 184+ 6E41 48 41 4E 44 >                db      "HANDLER"
 184+ 6E45 4C 45 52    >
 184+ 6E48             >len_NFA         defl    $ - temp_NFA
 184+ 6E48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6E41             >
 184+ 6E41 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6E42 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 184+ 6E46 4C 45 52    >
 184+ 6E49             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6E48 D2          >                db      {b $} | END_BIT     // msb as name end
 184+ 6E49             >
 184+ 6E49 36 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6E4B             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6E4B CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6E4E             >
 184+ 6E4E             >
 184+ 6E4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6E4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6E4E             >
 184+ 6E4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6E4E 46          >                db      70
 185+ 6E4F                              User_Def HP         , "HP"        , 72 // heap-pointer address
 185+ 6E4F             >                New_Def  HP, "HP", User_Ptr, is_normal
 185+ 6E4F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ 6E4F             >
 185+ 6E4F             >                // dummy db directives used to calculate length of namec
 185+ 6E4F 48 50       >                db      "HP"
 185+ 6E51             >len_NFA         defl    $ - temp_NFA
 185+ 6E51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ 6E4F             >
 185+ 6E4F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ 6E50 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 185+ 6E52             >                org     $-1                 // alter last byte of Name just above to set
 185+ 6E51 D0          >                db      {b $} | END_BIT     // msb as name end
 185+ 6E52             >
 185+ 6E52 41 6E       >                dw      last_NFA            // Link to previous definition Name
 185+ 6E54             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6E54 CD 46 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6E57             >
 185+ 6E57             >
 185+ 6E57             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6E57             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6E57             >
 185+ 6E57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6E57 48          >                db      72
 186+ 6E58
 187+ 6E58              //  ______________________________________________________________________
 188+ 6E58              //
 189+ 6E58              // here         -- a
 190+ 6E58                              Colon_Def HERE, "HERE", is_normal
 190+ 6E58             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 190+ 6E58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 6E58             >
 190+ 6E58             >                // dummy db directives used to calculate length of namec
 190+ 6E58 48 45 52 45 >                db      "HERE"
 190+ 6E5C             >len_NFA         defl    $ - temp_NFA
 190+ 6E5C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 6E58             >
 190+ 6E58 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 6E59 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 190+ 6E5D             >                org     $-1                 // alter last byte of Name just above to set
 190+ 6E5C C5          >                db      {b $} | END_BIT     // msb as name end
 190+ 6E5D             >
 190+ 6E5D 4F 6E       >                dw      last_NFA            // Link to previous definition Name
 190+ 6E5F             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 6E5F CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 190+ 6E62             >
 190+ 6E62             >
 190+ 6E62             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 6E62             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 6E62             >
 190+ 6E62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 6E62 22 6D 07 6B                  dw      DP, FETCH               // dp @
 192+ 6E66 43 69                        dw      EXIT                    // ;
 193+ 6E68
 194+ 6E68              //  ______________________________________________________________________
 195+ 6E68              //
 196+ 6E68              // allot        n --
 197+ 6E68                              Colon_Def ALLOT, "ALLOT", is_normal
 197+ 6E68             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 197+ 6E68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 6E68             >
 197+ 6E68             >                // dummy db directives used to calculate length of namec
 197+ 6E68 41 4C 4C 4F >                db      "ALLOT"
 197+ 6E6C 54          >
 197+ 6E6D             >len_NFA         defl    $ - temp_NFA
 197+ 6E6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 6E68             >
 197+ 6E68 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 6E69 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 197+ 6E6D 54          >
 197+ 6E6E             >                org     $-1                 // alter last byte of Name just above to set
 197+ 6E6D D4          >                db      {b $} | END_BIT     // msb as name end
 197+ 6E6E             >
 197+ 6E6E 58 6E       >                dw      last_NFA            // Link to previous definition Name
 197+ 6E70             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 6E70 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 6E73             >
 197+ 6E73             >
 197+ 6E73             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 6E73             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 6E73             >
 197+ 6E73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 6E73 22 6D E8 6A                  dw      DP,  PLUSSTORE          // dp +!
 199+ 6E77 43 69                        dw      EXIT                    // ;
 200+ 6E79
 201+ 6E79              //  ______________________________________________________________________
 202+ 6E79              //
 203+ 6E79              // comma        n --
 204+ 6E79                              Colon_Def COMMA, ",", is_normal
 204+ 6E79             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 204+ 6E79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204+ 6E79             >
 204+ 6E79             >                // dummy db directives used to calculate length of namec
 204+ 6E79 2C          >                db      ","
 204+ 6E7A             >len_NFA         defl    $ - temp_NFA
 204+ 6E7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204+ 6E79             >
 204+ 6E79 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204+ 6E7A 2C          >                db      ","               // name string in 7-bit ascii, but
 204+ 6E7B             >                org     $-1                 // alter last byte of Name just above to set
 204+ 6E7A AC          >                db      {b $} | END_BIT     // msb as name end
 204+ 6E7B             >
 204+ 6E7B 68 6E       >                dw      last_NFA            // Link to previous definition Name
 204+ 6E7D             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 204+ 6E7D CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 204+ 6E80             >
 204+ 6E80             >
 204+ 6E80             >                endif           ; ok        // for other definitions it "points" the correct handler
 204+ 6E80             >                // Use of "; ok" to suppress "warning[fwdref]"
 204+ 6E80             >
 204+ 6E80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205+ 6E80 5F 6E 12 6B                  dw      HERE, STORE             // here !
 206+ 6E84 67 6C 70 6E                  dw      TWO, ALLOT              // 2 allot
 207+ 6E88 43 69                        dw      EXIT                    // ;
 208+ 6E8A
 209+ 6E8A              //  ______________________________________________________________________
 210+ 6E8A              //
 211+ 6E8A              // ccomma       c --
 212+ 6E8A                              Colon_Def CCOMMA, "C,", is_normal
 212+ 6E8A             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 212+ 6E8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 6E8A             >
 212+ 6E8A             >                // dummy db directives used to calculate length of namec
 212+ 6E8A 43 2C       >                db      "C,"
 212+ 6E8C             >len_NFA         defl    $ - temp_NFA
 212+ 6E8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 6E8A             >
 212+ 6E8A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 6E8B 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 212+ 6E8D             >                org     $-1                 // alter last byte of Name just above to set
 212+ 6E8C AC          >                db      {b $} | END_BIT     // msb as name end
 212+ 6E8D             >
 212+ 6E8D 79 6E       >                dw      last_NFA            // Link to previous definition Name
 212+ 6E8F             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 6E8F CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 212+ 6E92             >
 212+ 6E92             >
 212+ 6E92             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 6E92             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 6E92             >
 212+ 6E92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 6E92 5F 6E 2A 6B                  dw      HERE, CSTORE            // here c!
 214+ 6E96 5E 6C 70 6E                  dw      ONE, ALLOT              // 1 allot
 215+ 6E9A 43 69                        dw      EXIT                    // ;
 216+ 6E9C
 217+ 6E9C              //  ______________________________________________________________________
 218+ 6E9C              //
 219+ 6E9C              // s>d          n -- d
 220+ 6E9C              // converts a single precision integer in a double precision
 221+ 6E9C                              New_Def S_TO_D, "S>D", is_code, is_normal
 221+ 6E9C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 221+ 6E9C             >
 221+ 6E9C             >                // dummy db directives used to calculate length of namec
 221+ 6E9C 53 3E 44    >                db      "S>D"
 221+ 6E9F             >len_NFA         defl    $ - temp_NFA
 221+ 6E9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 221+ 6E9C             >
 221+ 6E9C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 221+ 6E9D 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 221+ 6EA0             >                org     $-1                 // alter last byte of Name just above to set
 221+ 6E9F C4          >                db      {b $} | END_BIT     // msb as name end
 221+ 6EA0             >
 221+ 6EA0 8A 6E       >                dw      last_NFA            // Link to previous definition Name
 221+ 6EA2             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 221+ 6EA2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 221+ 6EA2 ~           >
 221+ 6EA2 ~           >
 221+ 6EA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 221+ 6EA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 221+ 6EA2             >
 221+ 6EA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 222+ 6EA2 D1                           pop     de
 223+ 6EA3 21 00 00                     ld      hl, 0
 224+ 6EA6 7A                           ld      a, d
 225+ 6EA7 E6 80                        and     $80
 226+ 6EA9 28 01                        jr      z, S_to_D_Skip
 227+ 6EAB 2B                           dec     hl                  // $FFFF
 228+ 6EAC              S_to_D_Skip:
 229+ 6EAC D5                           push    de
 230+ 6EAD E5                           push    hl
 231+ 6EAE                              next
 231+ 6EAE DD E9       >                jp      (ix)
 232+ 6EB0
 233+ 6EB0              //  ______________________________________________________________________
 234+ 6EB0              //
 235+ 6EB0              // -            n1 n2 -- n3
 236+ 6EB0              // subtraction
 237+ 6EB0                              New_Def SUBTRACT, "-", is_code, is_normal
 237+ 6EB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 237+ 6EB0             >
 237+ 6EB0             >                // dummy db directives used to calculate length of namec
 237+ 6EB0 2D          >                db      "-"
 237+ 6EB1             >len_NFA         defl    $ - temp_NFA
 237+ 6EB1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 237+ 6EB0             >
 237+ 6EB0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 237+ 6EB1 2D          >                db      "-"               // name string in 7-bit ascii, but
 237+ 6EB2             >                org     $-1                 // alter last byte of Name just above to set
 237+ 6EB1 AD          >                db      {b $} | END_BIT     // msb as name end
 237+ 6EB2             >
 237+ 6EB2 9C 6E       >                dw      last_NFA            // Link to previous definition Name
 237+ 6EB4             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 237+ 6EB4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 237+ 6EB4 ~           >
 237+ 6EB4 ~           >
 237+ 6EB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 237+ 6EB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 237+ 6EB4             >
 237+ 6EB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 238+ 6EB4 D1                           pop     de
 239+ 6EB5 E1                           pop     hl
 240+ 6EB6 A7                           and     a
 241+ 6EB7 ED 52                        sbc     hl, de
 242+ 6EB9
 243+ 6EB9                              psh1
 243+ 6EB9 E5          >                push    hl
 243+ 6EBA DD E9       >                jp      (ix)
 244+ 6EBC
 245+ 6EBC              //  ______________________________________________________________________
 246+ 6EBC              //
 247+ 6EBC              // =            n1 n2 -- n3
 248+ 6EBC              // equals
 249+ 6EBC                              Colon_Def EQUALS, "=", is_normal
 249+ 6EBC             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 249+ 6EBC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 6EBC             >
 249+ 6EBC             >                // dummy db directives used to calculate length of namec
 249+ 6EBC 3D          >                db      "="
 249+ 6EBD             >len_NFA         defl    $ - temp_NFA
 249+ 6EBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 6EBC             >
 249+ 6EBC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 6EBD 3D          >                db      "="               // name string in 7-bit ascii, but
 249+ 6EBE             >                org     $-1                 // alter last byte of Name just above to set
 249+ 6EBD BD          >                db      {b $} | END_BIT     // msb as name end
 249+ 6EBE             >
 249+ 6EBE B0 6E       >                dw      last_NFA            // Link to previous definition Name
 249+ 6EC0             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 6EC0 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 249+ 6EC3             >
 249+ 6EC3             >
 249+ 6EC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 6EC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 6EC3             >
 249+ 6EC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 250+ 6EC3 B4 6E 80 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 251+ 6EC7 43 69                        dw      EXIT                    // ;
 252+ 6EC9
 253+ 6EC9              //  ______________________________________________________________________
 254+ 6EC9              //
 255+ 6EC9              // u<           u1 u2 -- u3
 256+ 6EC9              // unsigned less-than
 257+ 6EC9                              New_Def ULESS, "U<", is_code, is_normal
 257+ 6EC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 257+ 6EC9             >
 257+ 6EC9             >                // dummy db directives used to calculate length of namec
 257+ 6EC9 55 3C       >                db      "U<"
 257+ 6ECB             >len_NFA         defl    $ - temp_NFA
 257+ 6ECB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 257+ 6EC9             >
 257+ 6EC9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 257+ 6ECA 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 257+ 6ECC             >                org     $-1                 // alter last byte of Name just above to set
 257+ 6ECB BC          >                db      {b $} | END_BIT     // msb as name end
 257+ 6ECC             >
 257+ 6ECC BC 6E       >                dw      last_NFA            // Link to previous definition Name
 257+ 6ECE             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 257+ 6ECE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 257+ 6ECE ~           >
 257+ 6ECE ~           >
 257+ 6ECE             >                endif           ; ok        // for other definitions it "points" the correct handler
 257+ 6ECE             >                // Use of "; ok" to suppress "warning[fwdref]"
 257+ 6ECE             >
 257+ 6ECE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 258+ 6ECE D1                           pop     de
 259+ 6ECF E1                           pop     hl
 260+ 6ED0 A7                           and     a
 261+ 6ED1 ED 52                        sbc     hl, de
 262+ 6ED3 21 FF FF                     ld      hl, -1
 263+ 6ED6 38 01                        jr      c, ULess_Skip
 264+ 6ED8 23                               inc     hl
 265+ 6ED9              ULess_Skip:
 266+ 6ED9
 267+ 6ED9                              psh1
 267+ 6ED9 E5          >                push    hl
 267+ 6EDA DD E9       >                jp      (ix)
 268+ 6EDC
 269+ 6EDC              //  ______________________________________________________________________
 270+ 6EDC              //
 271+ 6EDC              // <           n1 n2 -- n3
 272+ 6EDC              // less-than
 273+ 6EDC                              New_Def LESS, "<", is_code, is_normal
 273+ 6EDC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 273+ 6EDC             >
 273+ 6EDC             >                // dummy db directives used to calculate length of namec
 273+ 6EDC 3C          >                db      "<"
 273+ 6EDD             >len_NFA         defl    $ - temp_NFA
 273+ 6EDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 273+ 6EDC             >
 273+ 6EDC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 273+ 6EDD 3C          >                db      "<"               // name string in 7-bit ascii, but
 273+ 6EDE             >                org     $-1                 // alter last byte of Name just above to set
 273+ 6EDD BC          >                db      {b $} | END_BIT     // msb as name end
 273+ 6EDE             >
 273+ 6EDE C9 6E       >                dw      last_NFA            // Link to previous definition Name
 273+ 6EE0             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 273+ 6EE0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 273+ 6EE0 ~           >
 273+ 6EE0 ~           >
 273+ 6EE0             >                endif           ; ok        // for other definitions it "points" the correct handler
 273+ 6EE0             >                // Use of "; ok" to suppress "warning[fwdref]"
 273+ 6EE0             >
 273+ 6EE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 274+ 6EE0 D1                           pop     de
 275+ 6EE1 E1                           pop     hl
 276+ 6EE2 7C                           ld      a, h
 277+ 6EE3 EE 80                        xor     $80
 278+ 6EE5 67                           ld      h, a
 279+ 6EE6 7A                           ld      a, d
 280+ 6EE7 EE 80                        xor     $80
 281+ 6EE9 57                           ld      d, a
 282+ 6EEA              //              and     a
 283+ 6EEA ED 52                        sbc     hl, de
 284+ 6EEC ED 62                        sbc     hl, hl
 285+ 6EEE                              psh1
 285+ 6EEE E5          >                push    hl
 285+ 6EEF DD E9       >                jp      (ix)
 286+ 6EF1
 287+ 6EF1              //  ______________________________________________________________________
 288+ 6EF1              //
 289+ 6EF1              // >            n1 n2 -- n3
 290+ 6EF1              // greater than
 291+ 6EF1                              Colon_Def GREATER, ">", is_normal
 291+ 6EF1             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 291+ 6EF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ 6EF1             >
 291+ 6EF1             >                // dummy db directives used to calculate length of namec
 291+ 6EF1 3E          >                db      ">"
 291+ 6EF2             >len_NFA         defl    $ - temp_NFA
 291+ 6EF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ 6EF1             >
 291+ 6EF1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ 6EF2 3E          >                db      ">"               // name string in 7-bit ascii, but
 291+ 6EF3             >                org     $-1                 // alter last byte of Name just above to set
 291+ 6EF2 BE          >                db      {b $} | END_BIT     // msb as name end
 291+ 6EF3             >
 291+ 6EF3 DC 6E       >                dw      last_NFA            // Link to previous definition Name
 291+ 6EF5             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 6EF5 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 291+ 6EF8             >
 291+ 6EF8             >
 291+ 6EF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 6EF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 6EF8             >
 291+ 6EF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 6EF8 7B 6A E0 6E                  dw      SWAP, LESS              // swap <
 293+ 6EFC 43 69                        dw      EXIT                    // ;
 294+ 6EFE              //  ______________________________________________________________________
 295+ 6EFE              //
 296+ 6EFE              // min          n1 n2 -- n3
 297+ 6EFE              // minimum between n1 and n2
 298+ 6EFE                              Colon_Def MIN, "MIN" , is_normal
 298+ 6EFE             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 298+ 6EFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 298+ 6EFE             >
 298+ 6EFE             >                // dummy db directives used to calculate length of namec
 298+ 6EFE 4D 49 4E    >                db      "MIN"
 298+ 6F01             >len_NFA         defl    $ - temp_NFA
 298+ 6F01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 298+ 6EFE             >
 298+ 6EFE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 298+ 6EFF 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 298+ 6F02             >                org     $-1                 // alter last byte of Name just above to set
 298+ 6F01 CE          >                db      {b $} | END_BIT     // msb as name end
 298+ 6F02             >
 298+ 6F02 F1 6E       >                dw      last_NFA            // Link to previous definition Name
 298+ 6F04             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 298+ 6F04 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 298+ 6F07             >
 298+ 6F07             >
 298+ 6F07             >                endif           ; ok        // for other definitions it "points" the correct handler
 298+ 6F07             >                // Use of "; ok" to suppress "warning[fwdref]"
 298+ 6F07             >
 298+ 6F07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 299+ 6F07 DB 6A                        dw      TWO_DUP                 // 2dup
 300+ 6F09 F5 6E                        dw      GREATER                 // >
 301+ 6F0B 1C 64                        dw      ZBRANCH
 302+ 6F0D 04 00                        dw      Min_Skip - $   // if
 303+ 6F0F 7B 6A                        dw          SWAP                //      swap
 304+ 6F11              Min_Skip:                                       // endif
 305+ 6F11 59 6A                        dw      DROP                    // drop
 306+ 6F13 43 69                        dw      EXIT                    // ;
 307+ 6F15
 308+ 6F15              //  ______________________________________________________________________
 309+ 6F15              //
 310+ 6F15              // max          n1 n2 -- n3
 311+ 6F15              // maximum between n1 and n2
 312+ 6F15                              Colon_Def MAX, "MAX", is_normal
 312+ 6F15             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 312+ 6F15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 312+ 6F15             >
 312+ 6F15             >                // dummy db directives used to calculate length of namec
 312+ 6F15 4D 41 58    >                db      "MAX"
 312+ 6F18             >len_NFA         defl    $ - temp_NFA
 312+ 6F18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 312+ 6F15             >
 312+ 6F15 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 312+ 6F16 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 312+ 6F19             >                org     $-1                 // alter last byte of Name just above to set
 312+ 6F18 D8          >                db      {b $} | END_BIT     // msb as name end
 312+ 6F19             >
 312+ 6F19 FE 6E       >                dw      last_NFA            // Link to previous definition Name
 312+ 6F1B             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 312+ 6F1B CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 312+ 6F1E             >
 312+ 6F1E             >
 312+ 6F1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 312+ 6F1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 312+ 6F1E             >
 312+ 6F1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 313+ 6F1E DB 6A                        dw      TWO_DUP                 // 2dup
 314+ 6F20 E0 6E                        dw      LESS                    // <
 315+ 6F22 1C 64                        dw      ZBRANCH
 316+ 6F24 04 00                        dw      Max_Skip - $   // if
 317+ 6F26 7B 6A                        dw          SWAP                //      swap
 318+ 6F28              Max_Skip:                                       // endif
 319+ 6F28 59 6A                        dw      DROP                    // drop
 320+ 6F2A 43 69                        dw      EXIT                    // ;
 321+ 6F2C
 322+ 6F2C              //  ______________________________________________________________________
 323+ 6F2C              //
 324+ 6F2C              // ?dup         n -- 0 | n n
 325+ 6F2C              // duplicate if not zero
 326+ 6F2C                              New_Def QDUP, "?DUP", is_code, is_normal
 326+ 6F2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 326+ 6F2C             >
 326+ 6F2C             >                // dummy db directives used to calculate length of namec
 326+ 6F2C 3F 44 55 50 >                db      "?DUP"
 326+ 6F30             >len_NFA         defl    $ - temp_NFA
 326+ 6F30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 326+ 6F2C             >
 326+ 6F2C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 326+ 6F2D 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 326+ 6F31             >                org     $-1                 // alter last byte of Name just above to set
 326+ 6F30 D0          >                db      {b $} | END_BIT     // msb as name end
 326+ 6F31             >
 326+ 6F31 15 6F       >                dw      last_NFA            // Link to previous definition Name
 326+ 6F33             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 326+ 6F33 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 326+ 6F33 ~           >
 326+ 6F33 ~           >
 326+ 6F33             >                endif           ; ok        // for other definitions it "points" the correct handler
 326+ 6F33             >                // Use of "; ok" to suppress "warning[fwdref]"
 326+ 6F33             >
 326+ 6F33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 327+ 6F33              QDup_Ptr:
 328+ 6F33 E1                           pop     hl
 329+ 6F34 7C                           ld      a, h
 330+ 6F35 B5                           or      l
 331+ 6F36 28 01                        jr      z, QDup_Skip
 332+ 6F38 E5                               push    hl
 333+ 6F39              QDup_Skip:
 334+ 6F39                              psh1
 334+ 6F39 E5          >                push    hl
 334+ 6F3A DD E9       >                jp      (ix)
 335+ 6F3C
 336+ 6F3C              //  ______________________________________________________________________
 337+ 6F3C              //
 338+ 6F3C              // -dup         n -- 0 | n n
 339+ 6F3C              // duplicate if not zero
 340+ 6F3C                              New_Def LDUP, "-DUP", is_code, is_normal
 340+ 6F3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 340+ 6F3C             >
 340+ 6F3C             >                // dummy db directives used to calculate length of namec
 340+ 6F3C 2D 44 55 50 >                db      "-DUP"
 340+ 6F40             >len_NFA         defl    $ - temp_NFA
 340+ 6F40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 340+ 6F3C             >
 340+ 6F3C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 340+ 6F3D 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 340+ 6F41             >                org     $-1                 // alter last byte of Name just above to set
 340+ 6F40 D0          >                db      {b $} | END_BIT     // msb as name end
 340+ 6F41             >
 340+ 6F41 2C 6F       >                dw      last_NFA            // Link to previous definition Name
 340+ 6F43             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 340+ 6F43 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 340+ 6F43 ~           >
 340+ 6F43 ~           >
 340+ 6F43             >                endif           ; ok        // for other definitions it "points" the correct handler
 340+ 6F43             >                // Use of "; ok" to suppress "warning[fwdref]"
 340+ 6F43             >
 340+ 6F43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 341+ 6F43 C3 33 6F                     jp      QDup_Ptr
 342+ 6F46
 343+ 6F46              //  ______________________________________________________________________
 344+ 6F46              //
 345+ 6F46              // emit         c --
 346+ 6F46                              Colon_Def EMIT, "EMIT", is_normal
 346+ 6F46             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 346+ 6F46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 346+ 6F46             >
 346+ 6F46             >                // dummy db directives used to calculate length of namec
 346+ 6F46 45 4D 49 54 >                db      "EMIT"
 346+ 6F4A             >len_NFA         defl    $ - temp_NFA
 346+ 6F4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 346+ 6F46             >
 346+ 6F46 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 346+ 6F47 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 346+ 6F4B             >                org     $-1                 // alter last byte of Name just above to set
 346+ 6F4A D4          >                db      {b $} | END_BIT     // msb as name end
 346+ 6F4B             >
 346+ 6F4B 3C 6F       >                dw      last_NFA            // Link to previous definition Name
 346+ 6F4D             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 346+ 6F4D CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 346+ 6F50             >
 346+ 6F50             >
 346+ 6F50             >                endif           ; ok        // for other definitions it "points" the correct handler
 346+ 6F50             >                // Use of "; ok" to suppress "warning[fwdref]"
 346+ 6F50             >
 346+ 6F50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 347+ 6F50 22 66                        dw      C_EMIT                      // (?emit)
 348+ 6F52 33 6F                        dw      QDUP                        // ?dup
 349+ 6F54                                                                  // if
 350+ 6F54 1C 64                        dw      ZBRANCH
 351+ 6F56 0A 00                        dw      Emit_Skip - $
 352+ 6F58 E7 65                        dw          EMITC                   //      emitc
 353+ 6F5A 5E 6C                        dw          ONE                     //      1
 354+ 6F5C 7D 6D E8 6A                  dw          OUT, PLUSSTORE        //      out +!
 355+ 6F60              Emit_Skip:                                          // endif
 356+ 6F60 43 69                        dw      EXIT                        // ;
 357+ 6F62
 358+ 6F62              //  ______________________________________________________________________
 359+ 6F62              //
 360+ 6F62              // space        --
 361+ 6F62                              Colon_Def SPACE, "SPACE", is_normal
 361+ 6F62             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 361+ 6F62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 361+ 6F62             >
 361+ 6F62             >                // dummy db directives used to calculate length of namec
 361+ 6F62 53 50 41 43 >                db      "SPACE"
 361+ 6F66 45          >
 361+ 6F67             >len_NFA         defl    $ - temp_NFA
 361+ 6F67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 361+ 6F62             >
 361+ 6F62 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 361+ 6F63 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 361+ 6F67 45          >
 361+ 6F68             >                org     $-1                 // alter last byte of Name just above to set
 361+ 6F67 C5          >                db      {b $} | END_BIT     // msb as name end
 361+ 6F68             >
 361+ 6F68 46 6F       >                dw      last_NFA            // Link to previous definition Name
 361+ 6F6A             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 361+ 6F6A CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 361+ 6F6D             >
 361+ 6F6D             >
 361+ 6F6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 361+ 6F6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 361+ 6F6D             >
 361+ 6F6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 362+ 6F6D 84 6C 4D 6F                  dw      BL, EMIT                // bl emit
 363+ 6F71 43 69                        dw      EXIT                    // ;
 364+ 6F73
 365+ 6F73              //  ______________________________________________________________________
 366+ 6F73              //
 367+ 6F73              // traverse     a n -- a
 368+ 6F73              // A dictionary entry is structured as follows
 369+ 6F73              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 370+ 6F73              //      +1   word name, last character is toggled with $80
 371+ 6F73              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 372+ 6F73              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 373+ 6F73              // PFA: +6+n "is_code", definitions have no PFA. // +5
 374+ 6F73              //
 375+ 6F73                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 375+ 6F73             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 375+ 6F73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 375+ 6F73             >
 375+ 6F73             >                // dummy db directives used to calculate length of namec
 375+ 6F73 54 52 41 56 >                db      "TRAVERSE"
 375+ 6F77 45 52 53 45 >
 375+ 6F7B             >len_NFA         defl    $ - temp_NFA
 375+ 6F7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 375+ 6F73             >
 375+ 6F73 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 375+ 6F74 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 375+ 6F78 45 52 53 45 >
 375+ 6F7C             >                org     $-1                 // alter last byte of Name just above to set
 375+ 6F7B C5          >                db      {b $} | END_BIT     // msb as name end
 375+ 6F7C             >
 375+ 6F7C 62 6F       >                dw      last_NFA            // Link to previous definition Name
 375+ 6F7E             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 375+ 6F7E CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 375+ 6F81             >
 375+ 6F81             >
 375+ 6F81             >                endif           ; ok        // for other definitions it "points" the correct handler
 375+ 6F81             >                // Use of "; ok" to suppress "warning[fwdref]"
 375+ 6F81             >
 375+ 6F81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 376+ 6F81 7B 6A                        dw      SWAP                    // swap
 377+ 6F83              Traverse_Begin:                                 // begin
 378+ 6F83 4B 6A BE 69                  dw          OVER, PLUS          //      over +
 379+ 6F87 A5 63 7F 00                  dw          LIT, 127            //      127
 380+ 6F8B 4B 6A 1E 6B                  dw          OVER, CFETCH        //      over @
 381+ 6F8F E0 6E                        dw          LESS                //      <
 382+ 6F91                                                              // until
 383+ 6F91 1C 64                        dw      ZBRANCH
 384+ 6F93 F0 FF                        dw      Traverse_Begin - $
 385+ 6F95 62 6A                        dw      NIP                     //  nip
 386+ 6F97 43 69                        dw      EXIT                    //  ;
 387+ 6F99
 388+ 6F99              //  ______________________________________________________________________
 389+ 6F99              //
 390+ 6F99              // latest       -- nfa
 391+ 6F99                              Colon_Def LATEST, "LATEST", is_normal
 391+ 6F99             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 391+ 6F99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 391+ 6F99             >
 391+ 6F99             >                // dummy db directives used to calculate length of namec
 391+ 6F99 4C 41 54 45 >                db      "LATEST"
 391+ 6F9D 53 54       >
 391+ 6F9F             >len_NFA         defl    $ - temp_NFA
 391+ 6F9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 391+ 6F99             >
 391+ 6F99 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 391+ 6F9A 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 391+ 6F9E 53 54       >
 391+ 6FA0             >                org     $-1                 // alter last byte of Name just above to set
 391+ 6F9F D4          >                db      {b $} | END_BIT     // msb as name end
 391+ 6FA0             >
 391+ 6FA0 73 6F       >                dw      last_NFA            // Link to previous definition Name
 391+ 6FA2             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 391+ 6FA2 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 391+ 6FA5             >
 391+ 6FA5             >
 391+ 6FA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 391+ 6FA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 391+ 6FA5             >
 391+ 6FA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 392+ 6FA5 B0 6D                        dw      CURRENT                 // current
 393+ 6FA7 07 6B 07 6B                  dw      FETCH, FETCH            // @ @
 394+ 6FAB 43 69                        dw      EXIT                    // ;
 395+ 6FAD
 396+ 6FAD              //  ______________________________________________________________________
 397+ 6FAD              //
 398+ 6FAD              // lfa          pfa -- lfa
 399+ 6FAD                              Colon_Def LFA, "LFA", is_normal
 399+ 6FAD             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 399+ 6FAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 399+ 6FAD             >
 399+ 6FAD             >                // dummy db directives used to calculate length of namec
 399+ 6FAD 4C 46 41    >                db      "LFA"
 399+ 6FB0             >len_NFA         defl    $ - temp_NFA
 399+ 6FB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 399+ 6FAD             >
 399+ 6FAD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 399+ 6FAE 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 399+ 6FB1             >                org     $-1                 // alter last byte of Name just above to set
 399+ 6FB0 C1          >                db      {b $} | END_BIT     // msb as name end
 399+ 6FB1             >
 399+ 6FB1 99 6F       >                dw      last_NFA            // Link to previous definition Name
 399+ 6FB3             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 399+ 6FB3 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 399+ 6FB6             >
 399+ 6FB6             >
 399+ 6FB6             >                endif           ; ok        // for other definitions it "points" the correct handler
 399+ 6FB6             >                // Use of "; ok" to suppress "warning[fwdref]"
 399+ 6FB6             >
 399+ 6FB6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 400+ 6FB6 A5 63 05 00                  dw      LIT, 5                  // cell- --> 5
 401+ 6FBA B4 6E                        dw      SUBTRACT                // cell- --> -
 402+ 6FBC 43 69                        dw      EXIT                    // ;
 403+ 6FBE
 404+ 6FBE              //  ______________________________________________________________________
 405+ 6FBE              //
 406+ 6FBE              // cfa          pfa -- cfa
 407+ 6FBE                              Colon_Def CFA, "CFA", is_normal
 407+ 6FBE             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 407+ 6FBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 407+ 6FBE             >
 407+ 6FBE             >                // dummy db directives used to calculate length of namec
 407+ 6FBE 43 46 41    >                db      "CFA"
 407+ 6FC1             >len_NFA         defl    $ - temp_NFA
 407+ 6FC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 407+ 6FBE             >
 407+ 6FBE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 407+ 6FBF 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 407+ 6FC2             >                org     $-1                 // alter last byte of Name just above to set
 407+ 6FC1 C1          >                db      {b $} | END_BIT     // msb as name end
 407+ 6FC2             >
 407+ 6FC2 AD 6F       >                dw      last_NFA            // Link to previous definition Name
 407+ 6FC4             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 407+ 6FC4 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 407+ 6FC7             >
 407+ 6FC7             >
 407+ 6FC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 407+ 6FC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 407+ 6FC7             >
 407+ 6FC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 408+ 6FC7              //              dw      CELL_MINUS              // cell-
 409+ 6FC7 70 6C B4 6E                  dw      THREE, SUBTRACT         // 3 -
 410+ 6FCB 43 69                        dw      EXIT                    // ;
 411+ 6FCD
 412+ 6FCD              //  ______________________________________________________________________
 413+ 6FCD              //
 414+ 6FCD              // nfa          pfa -- nfa
 415+ 6FCD                              Colon_Def NFA, "NFA", is_normal
 415+ 6FCD             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 415+ 6FCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 415+ 6FCD             >
 415+ 6FCD             >                // dummy db directives used to calculate length of namec
 415+ 6FCD 4E 46 41    >                db      "NFA"
 415+ 6FD0             >len_NFA         defl    $ - temp_NFA
 415+ 6FD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 415+ 6FCD             >
 415+ 6FCD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 415+ 6FCE 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 415+ 6FD1             >                org     $-1                 // alter last byte of Name just above to set
 415+ 6FD0 C1          >                db      {b $} | END_BIT     // msb as name end
 415+ 6FD1             >
 415+ 6FD1 BE 6F       >                dw      last_NFA            // Link to previous definition Name
 415+ 6FD3             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 415+ 6FD3 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 415+ 6FD6             >
 415+ 6FD6             >
 415+ 6FD6             >                endif           ; ok        // for other definitions it "points" the correct handler
 415+ 6FD6             >                // Use of "; ok" to suppress "warning[fwdref]"
 415+ 6FD6             >
 415+ 6FD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 416+ 6FD6 A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 417+ 6FDA B4 6E                        dw      SUBTRACT                // -
 418+ 6FDC 7A 6C                        dw      NEG_ONE                 // -1
 419+ 6FDE 7E 6F                        dw      TRAVERSE                // traverse
 420+ 6FE0 43 69                        dw      EXIT                    // ;
 421+ 6FE2
 422+ 6FE2              //  ______________________________________________________________________
 423+ 6FE2              //
 424+ 6FE2              // pfa          nfa -- pfa
 425+ 6FE2                              Colon_Def PFA, "PFA", is_normal
 425+ 6FE2             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 425+ 6FE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 425+ 6FE2             >
 425+ 6FE2             >                // dummy db directives used to calculate length of namec
 425+ 6FE2 50 46 41    >                db      "PFA"
 425+ 6FE5             >len_NFA         defl    $ - temp_NFA
 425+ 6FE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 425+ 6FE2             >
 425+ 6FE2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 425+ 6FE3 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 425+ 6FE6             >                org     $-1                 // alter last byte of Name just above to set
 425+ 6FE5 C1          >                db      {b $} | END_BIT     // msb as name end
 425+ 6FE6             >
 425+ 6FE6 CD 6F       >                dw      last_NFA            // Link to previous definition Name
 425+ 6FE8             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 425+ 6FE8 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 425+ 6FEB             >
 425+ 6FEB             >
 425+ 6FEB             >                endif           ; ok        // for other definitions it "points" the correct handler
 425+ 6FEB             >                // Use of "; ok" to suppress "warning[fwdref]"
 425+ 6FEB             >
 425+ 6FEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 426+ 6FEB 5E 6C                        dw      ONE                     // 1
 427+ 6FED 7E 6F                        dw      TRAVERSE                // traverse
 428+ 6FEF A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 429+ 6FF3 BE 69                        dw      PLUS                    // +
 430+ 6FF5 43 69                        dw      EXIT                    // ;
 431+ 6FF7
 432+ 6FF7              //  ______________________________________________________________________
 433+ 6FF7              //
 434+ 6FF7              // >body        cfa -- pfa
 435+ 6FF7                              Colon_Def TO_BODY, ">BODY", is_normal
 435+ 6FF7             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 435+ 6FF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 435+ 6FF7             >
 435+ 6FF7             >                // dummy db directives used to calculate length of namec
 435+ 6FF7 3E 42 4F 44 >                db      ">BODY"
 435+ 6FFB 59          >
 435+ 6FFC             >len_NFA         defl    $ - temp_NFA
 435+ 6FFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 435+ 6FF7             >
 435+ 6FF7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 435+ 6FF8 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 435+ 6FFC 59          >
 435+ 6FFD             >                org     $-1                 // alter last byte of Name just above to set
 435+ 6FFC D9          >                db      {b $} | END_BIT     // msb as name end
 435+ 6FFD             >
 435+ 6FFD E2 6F       >                dw      last_NFA            // Link to previous definition Name
 435+ 6FFF             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 435+ 6FFF CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 435+ 7002             >
 435+ 7002             >
 435+ 7002             >                endif           ; ok        // for other definitions it "points" the correct handler
 435+ 7002             >                // Use of "; ok" to suppress "warning[fwdref]"
 435+ 7002             >
 435+ 7002             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 436+ 7002 70 6C BE 69                  dw      THREE, PLUS             // cell+ --> 3 +
 437+ 7006 43 69                        dw      EXIT                    // ;
 438+ 7008
 439+ 7008              //  ______________________________________________________________________
 440+ 7008              //
 441+ 7008              // <name        cfa -- nfa
 442+ 7008                              Colon_Def TO_NAME, "<NAME", is_normal
 442+ 7008             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 442+ 7008             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ 7008             >
 442+ 7008             >                // dummy db directives used to calculate length of namec
 442+ 7008 3C 4E 41 4D >                db      "<NAME"
 442+ 700C 45          >
 442+ 700D             >len_NFA         defl    $ - temp_NFA
 442+ 700D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ 7008             >
 442+ 7008 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ 7009 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 442+ 700D 45          >
 442+ 700E             >                org     $-1                 // alter last byte of Name just above to set
 442+ 700D C5          >                db      {b $} | END_BIT     // msb as name end
 442+ 700E             >
 442+ 700E F7 6F       >                dw      last_NFA            // Link to previous definition Name
 442+ 7010             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 7010 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 442+ 7013             >
 442+ 7013             >
 442+ 7013             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 7013             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 7013             >
 442+ 7013             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 7013 FF 6F                        dw      TO_BODY                 // >body
 444+ 7015 D3 6F                        dw      NFA                     // nfa
 445+ 7017 43 69                        dw      EXIT                    // ;
 446+ 7019
 447+ 7019              //  ______________________________________________________________________
 448+ 7019              //
 449+ 7019              // !csp         --
 450+ 7019              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 451+ 7019                              Colon_Def STORE_CSP, "!CSP", is_normal
 451+ 7019             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 451+ 7019             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 451+ 7019             >
 451+ 7019             >                // dummy db directives used to calculate length of namec
 451+ 7019 21 43 53 50 >                db      "!CSP"
 451+ 701D             >len_NFA         defl    $ - temp_NFA
 451+ 701D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 451+ 7019             >
 451+ 7019 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 451+ 701A 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 451+ 701E             >                org     $-1                 // alter last byte of Name just above to set
 451+ 701D D0          >                db      {b $} | END_BIT     // msb as name end
 451+ 701E             >
 451+ 701E 08 70       >                dw      last_NFA            // Link to previous definition Name
 451+ 7020             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 451+ 7020 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 451+ 7023             >
 451+ 7023             >
 451+ 7023             >                endif           ; ok        // for other definitions it "points" the correct handler
 451+ 7023             >                // Use of "; ok" to suppress "warning[fwdref]"
 451+ 7023             >
 451+ 7023             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 452+ 7023 13 69                        dw      SPFETCH                 // sp@
 453+ 7025 E5 6D 12 6B                  dw      CSP, STORE              // csp !
 454+ 7029 43 69                        dw      EXIT                    // ;
 455+ 702B
 456+ 702B              //  ______________________________________________________________________
 457+ 702B              //
 458+ 702B              // ?error       f n --
 459+ 702B              // rase error n if flag f it true
 460+ 702B                              Colon_Def QERROR, "?ERROR", is_normal
 460+ 702B             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 460+ 702B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 460+ 702B             >
 460+ 702B             >                // dummy db directives used to calculate length of namec
 460+ 702B 3F 45 52 52 >                db      "?ERROR"
 460+ 702F 4F 52       >
 460+ 7031             >len_NFA         defl    $ - temp_NFA
 460+ 7031             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 460+ 702B             >
 460+ 702B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 460+ 702C 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 460+ 7030 4F 52       >
 460+ 7032             >                org     $-1                 // alter last byte of Name just above to set
 460+ 7031 D2          >                db      {b $} | END_BIT     // msb as name end
 460+ 7032             >
 460+ 7032 19 70       >                dw      last_NFA            // Link to previous definition Name
 460+ 7034             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 460+ 7034 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 460+ 7037             >
 460+ 7037             >
 460+ 7037             >                endif           ; ok        // for other definitions it "points" the correct handler
 460+ 7037             >                // Use of "; ok" to suppress "warning[fwdref]"
 460+ 7037             >
 460+ 7037             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 461+ 7037 7B 6A                        dw      SWAP                    // swap
 462+ 7039                                                              // if
 463+ 7039 1C 64                        dw      ZBRANCH
 464+ 703B 08 00                        dw      QError_Else - $
 465+ 703D C7 75                        dw          ERROR               //      error  ( is a forward-ref )
 466+ 703F                                                              // else
 467+ 703F 07 64                        dw      BRANCH
 468+ 7041 04 00                        dw      QError_Endif - $
 469+ 7043              QError_Else:
 470+ 7043 59 6A                        dw          DROP                //      drop
 471+ 7045              QError_Endif:                                   // endif
 472+ 7045 43 69                        dw      EXIT                    // ;
 473+ 7047
 474+ 7047              //  ______________________________________________________________________
 475+ 7047              //
 476+ 7047              // ?comp       --
 477+ 7047              // raise msg #17 if not compiling
 478+ 7047                              Colon_Def QCOMP, "?COMP", is_normal
 478+ 7047             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 478+ 7047             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7047             >
 478+ 7047             >                // dummy db directives used to calculate length of namec
 478+ 7047 3F 43 4F 4D >                db      "?COMP"
 478+ 704B 50          >
 478+ 704C             >len_NFA         defl    $ - temp_NFA
 478+ 704C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7047             >
 478+ 7047 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7048 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 478+ 704C 50          >
 478+ 704D             >                org     $-1                 // alter last byte of Name just above to set
 478+ 704C D0          >                db      {b $} | END_BIT     // msb as name end
 478+ 704D             >
 478+ 704D 2B 70       >                dw      last_NFA            // Link to previous definition Name
 478+ 704F             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 704F CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7052             >
 478+ 7052             >
 478+ 7052             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7052             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7052             >
 478+ 7052             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7052 BC 6D 07 6B                  dw      STATE, FETCH            // state @
 480+ 7056 80 69                        dw      ZEQUAL                  // 0=
 481+ 7058 A5 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 482+ 705C 34 70                        dw      QERROR                  // ?error
 483+ 705E 43 69                        dw      EXIT                    // ;
 484+ 7060
 485+ 7060              //  ______________________________________________________________________
 486+ 7060              //
 487+ 7060              // ?exec       --
 488+ 7060              // raise msg #18 if compiling
 489+ 7060                              Colon_Def QEXEC, "?EXEC", is_normal
 489+ 7060             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 489+ 7060             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 489+ 7060             >
 489+ 7060             >                // dummy db directives used to calculate length of namec
 489+ 7060 3F 45 58 45 >                db      "?EXEC"
 489+ 7064 43          >
 489+ 7065             >len_NFA         defl    $ - temp_NFA
 489+ 7065             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 489+ 7060             >
 489+ 7060 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 489+ 7061 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 489+ 7065 43          >
 489+ 7066             >                org     $-1                 // alter last byte of Name just above to set
 489+ 7065 C3          >                db      {b $} | END_BIT     // msb as name end
 489+ 7066             >
 489+ 7066 47 70       >                dw      last_NFA            // Link to previous definition Name
 489+ 7068             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 489+ 7068 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 489+ 706B             >
 489+ 706B             >
 489+ 706B             >                endif           ; ok        // for other definitions it "points" the correct handler
 489+ 706B             >                // Use of "; ok" to suppress "warning[fwdref]"
 489+ 706B             >
 489+ 706B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 490+ 706B BC 6D 07 6B                  dw      STATE, FETCH            // state @
 491+ 706F A5 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 492+ 7073 34 70                        dw      QERROR                  // ?error
 493+ 7075 43 69                        dw      EXIT                    // ;
 494+ 7077
 495+ 7077              //  ______________________________________________________________________
 496+ 7077              //
 497+ 7077              // ?pairs       n1 n2 --
 498+ 7077              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 499+ 7077                              Colon_Def QPAIRS, "?PAIRS", is_normal
 499+ 7077             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 499+ 7077             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 499+ 7077             >
 499+ 7077             >                // dummy db directives used to calculate length of namec
 499+ 7077 3F 50 41 49 >                db      "?PAIRS"
 499+ 707B 52 53       >
 499+ 707D             >len_NFA         defl    $ - temp_NFA
 499+ 707D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 499+ 7077             >
 499+ 7077 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 499+ 7078 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 499+ 707C 52 53       >
 499+ 707E             >                org     $-1                 // alter last byte of Name just above to set
 499+ 707D D3          >                db      {b $} | END_BIT     // msb as name end
 499+ 707E             >
 499+ 707E 60 70       >                dw      last_NFA            // Link to previous definition Name
 499+ 7080             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 499+ 7080 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 499+ 7083             >
 499+ 7083             >
 499+ 7083             >                endif           ; ok        // for other definitions it "points" the correct handler
 499+ 7083             >                // Use of "; ok" to suppress "warning[fwdref]"
 499+ 7083             >
 499+ 7083             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 500+ 7083 B4 6E                        dw      SUBTRACT                // -
 501+ 7085 A5 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 502+ 7089 34 70                        dw      QERROR                  // ?error
 503+ 708B 43 69                        dw      EXIT                    // ;
 504+ 708D
 505+ 708D              //  ______________________________________________________________________
 506+ 708D              //
 507+ 708D              // ?csp       --
 508+ 708D              // raise msg #20 if surrent SP in not what previously saved in CSP.
 509+ 708D              // Compiler relies on that for  syntax checking of structures
 510+ 708D                              Colon_Def QCSP, "?CSP", is_normal
 510+ 708D             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 510+ 708D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 510+ 708D             >
 510+ 708D             >                // dummy db directives used to calculate length of namec
 510+ 708D 3F 43 53 50 >                db      "?CSP"
 510+ 7091             >len_NFA         defl    $ - temp_NFA
 510+ 7091             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 510+ 708D             >
 510+ 708D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 510+ 708E 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 510+ 7092             >                org     $-1                 // alter last byte of Name just above to set
 510+ 7091 D0          >                db      {b $} | END_BIT     // msb as name end
 510+ 7092             >
 510+ 7092 77 70       >                dw      last_NFA            // Link to previous definition Name
 510+ 7094             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 510+ 7094 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 510+ 7097             >
 510+ 7097             >
 510+ 7097             >                endif           ; ok        // for other definitions it "points" the correct handler
 510+ 7097             >                // Use of "; ok" to suppress "warning[fwdref]"
 510+ 7097             >
 510+ 7097             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 511+ 7097 13 69                        dw      SPFETCH                 // sp@
 512+ 7099 E5 6D 07 6B                  dw      CSP, FETCH              // csp @
 513+ 709D B4 6E                        dw      SUBTRACT                // -
 514+ 709F A5 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 515+ 70A3 34 70                        dw      QERROR                  // ?error
 516+ 70A5 43 69                        dw      EXIT                    // ;
 517+ 70A7
 518+ 70A7              //  ______________________________________________________________________
 519+ 70A7              //
 520+ 70A7              // ?loading      --
 521+ 70A7              // raise msg #22 if not loading
 522+ 70A7                              Colon_Def QLOADING, "?LOADING", is_normal
 522+ 70A7             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 522+ 70A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 70A7             >
 522+ 70A7             >                // dummy db directives used to calculate length of namec
 522+ 70A7 3F 4C 4F 41 >                db      "?LOADING"
 522+ 70AB 44 49 4E 47 >
 522+ 70AF             >len_NFA         defl    $ - temp_NFA
 522+ 70AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 70A7             >
 522+ 70A7 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 70A8 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 522+ 70AC 44 49 4E 47 >
 522+ 70B0             >                org     $-1                 // alter last byte of Name just above to set
 522+ 70AF C7          >                db      {b $} | END_BIT     // msb as name end
 522+ 70B0             >
 522+ 70B0 8D 70       >                dw      last_NFA            // Link to previous definition Name
 522+ 70B2             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 70B2 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 522+ 70B5             >
 522+ 70B5             >
 522+ 70B5             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 70B5             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 70B5             >
 522+ 70B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 70B5 69 6D 07 6B                  dw      BLK, FETCH              // blk @
 524+ 70B9 80 69                        dw      ZEQUAL                  // 0=
 525+ 70BB A5 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 526+ 70BF 34 70                        dw      QERROR                  // ?error
 527+ 70C1 43 69                        dw      EXIT                    // ;
 528+ 70C3
 529+ 70C3              //  ______________________________________________________________________
 530+ 70C3              //
 531+ 70C3              // compile      --
 532+ 70C3              // compiles the following word
 533+ 70C3                              Colon_Def COMPILE, "COMPILE", is_normal
 533+ 70C3             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 533+ 70C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 533+ 70C3             >
 533+ 70C3             >                // dummy db directives used to calculate length of namec
 533+ 70C3 43 4F 4D 50 >                db      "COMPILE"
 533+ 70C7 49 4C 45    >
 533+ 70CA             >len_NFA         defl    $ - temp_NFA
 533+ 70CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 533+ 70C3             >
 533+ 70C3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 533+ 70C4 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 533+ 70C8 49 4C 45    >
 533+ 70CB             >                org     $-1                 // alter last byte of Name just above to set
 533+ 70CA C5          >                db      {b $} | END_BIT     // msb as name end
 533+ 70CB             >
 533+ 70CB A7 70       >                dw      last_NFA            // Link to previous definition Name
 533+ 70CD             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 533+ 70CD CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 533+ 70D0             >
 533+ 70D0             >
 533+ 70D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 533+ 70D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 533+ 70D0             >
 533+ 70D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 534+ 70D0 4F 70                        dw      QCOMP                   // ?comp
 535+ 70D2 66 69                        dw      R_TO                    // r>
 536+ 70D4 86 6A FD 69                  dw      DUP, CELL_PLUS          // dup, cell+
 537+ 70D8 54 69                        dw      TO_R                    // >r
 538+ 70DA 07 6B 7D 6E                  dw      FETCH, COMMA            // @ ,
 539+ 70DE 43 69                        dw      EXIT                    // ;
 540+ 70E0
 541+ 70E0              //  ______________________________________________________________________
 542+ 70E0              //
 543+ 70E0              // compile,     --
 544+ 70E0              // compiles the following word
 545+ 70E0                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 545+ 70E0             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 545+ 70E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 545+ 70E0             >
 545+ 70E0             >                // dummy db directives used to calculate length of namec
 545+ 70E0 43 4F 4D 50 >                db      "COMPILE,"
 545+ 70E4 49 4C 45 2C >
 545+ 70E8             >len_NFA         defl    $ - temp_NFA
 545+ 70E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 545+ 70E0             >
 545+ 70E0 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 545+ 70E1 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 545+ 70E5 49 4C 45 2C >
 545+ 70E9             >                org     $-1                 // alter last byte of Name just above to set
 545+ 70E8 AC          >                db      {b $} | END_BIT     // msb as name end
 545+ 70E9             >
 545+ 70E9 C3 70       >                dw      last_NFA            // Link to previous definition Name
 545+ 70EB             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 545+ 70EB CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 545+ 70EE             >
 545+ 70EE             >
 545+ 70EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 545+ 70EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 545+ 70EE             >
 545+ 70EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 546+ 70EE 4F 70                        dw      QCOMP                   // ?comp
 547+ 70F0 7D 6E                        dw      COMMA                   // ,
 548+ 70F2 43 69                        dw      EXIT                    // ;
 549+ 70F4
 550+ 70F4              //  ______________________________________________________________________
 551+ 70F4              //
 552+ 70F4              // [            --
 553+ 70F4              // stop compilation
 554+ 70F4                              Colon_Def SQUARED_OPEN, "[", is_immediate
 554+ 70F4             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 554+ 70F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 554+ 70F4             >
 554+ 70F4             >                // dummy db directives used to calculate length of namec
 554+ 70F4 5B          >                db      "["
 554+ 70F5             >len_NFA         defl    $ - temp_NFA
 554+ 70F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 554+ 70F4             >
 554+ 70F4 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 554+ 70F5 5B          >                db      "["               // name string in 7-bit ascii, but
 554+ 70F6             >                org     $-1                 // alter last byte of Name just above to set
 554+ 70F5 DB          >                db      {b $} | END_BIT     // msb as name end
 554+ 70F6             >
 554+ 70F6 E0 70       >                dw      last_NFA            // Link to previous definition Name
 554+ 70F8             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 554+ 70F8 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 554+ 70FB             >
 554+ 70FB             >
 554+ 70FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 554+ 70FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 554+ 70FB             >
 554+ 70FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 555+ 70FB 55 6C                        dw      ZERO                    // 0
 556+ 70FD BC 6D 12 6B                  dw      STATE, STORE            // state !
 557+ 7101 43 69                        dw      EXIT                    // ; immediate
 558+ 7103
 559+ 7103              //  ______________________________________________________________________
 560+ 7103              //
 561+ 7103              // ]            --
 562+ 7103              // start compilation
 563+ 7103                              Colon_Def SQUARED_CLOSE, "]", is_normal
 563+ 7103             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 563+ 7103             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 563+ 7103             >
 563+ 7103             >                // dummy db directives used to calculate length of namec
 563+ 7103 5D          >                db      "]"
 563+ 7104             >len_NFA         defl    $ - temp_NFA
 563+ 7104             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 563+ 7103             >
 563+ 7103 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 563+ 7104 5D          >                db      "]"               // name string in 7-bit ascii, but
 563+ 7105             >                org     $-1                 // alter last byte of Name just above to set
 563+ 7104 DD          >                db      {b $} | END_BIT     // msb as name end
 563+ 7105             >
 563+ 7105 F4 70       >                dw      last_NFA            // Link to previous definition Name
 563+ 7107             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 563+ 7107 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 563+ 710A             >
 563+ 710A             >
 563+ 710A             >                endif           ; ok        // for other definitions it "points" the correct handler
 563+ 710A             >                // Use of "; ok" to suppress "warning[fwdref]"
 563+ 710A             >
 563+ 710A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 564+ 710A A5 63 C0 00                  dw      LIT, $C0                // 192
 565+ 710E BC 6D 12 6B                  dw      STATE, STORE            // state !
 566+ 7112 43 69                        dw      EXIT                    // ;
 567+ 7114
 568+ 7114              //  ______________________________________________________________________
 569+ 7114              //
 570+ 7114              // smudge       --
 571+ 7114              // toggle smudge bit of latest definition
 572+ 7114                              Colon_Def SMUDGE, "SMUDGE", is_normal
 572+ 7114             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 572+ 7114             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 572+ 7114             >
 572+ 7114             >                // dummy db directives used to calculate length of namec
 572+ 7114 53 4D 55 44 >                db      "SMUDGE"
 572+ 7118 47 45       >
 572+ 711A             >len_NFA         defl    $ - temp_NFA
 572+ 711A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 572+ 7114             >
 572+ 7114 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 572+ 7115 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 572+ 7119 47 45       >
 572+ 711B             >                org     $-1                 // alter last byte of Name just above to set
 572+ 711A C5          >                db      {b $} | END_BIT     // msb as name end
 572+ 711B             >
 572+ 711B 03 71       >                dw      last_NFA            // Link to previous definition Name
 572+ 711D             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 572+ 711D CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 572+ 7120             >
 572+ 7120             >
 572+ 7120             >                endif           ; ok        // for other definitions it "points" the correct handler
 572+ 7120             >                // Use of "; ok" to suppress "warning[fwdref]"
 572+ 7120             >
 572+ 7120             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 573+ 7120 A2 6F                        dw      LATEST                  // latest
 574+ 7122 A5 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 575+ 7126 FC 6A                        dw      TOGGLE                  // toggle
 576+ 7128 43 69                        dw      EXIT                    // ;
 577+ 712A
 578+ 712A              //  ______________________________________________________________________
 579+ 712A              //
 580+ 712A              // immediate    --
 581+ 712A              // make immediate the latest definition
 582+ 712A                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 582+ 712A             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 582+ 712A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 582+ 712A             >
 582+ 712A             >                // dummy db directives used to calculate length of namec
 582+ 712A 49 4D 4D 45 >                db      "IMMEDIATE"
 582+ 712E 44 49 41 54 >
 582+ 7132 45          >
 582+ 7133             >len_NFA         defl    $ - temp_NFA
 582+ 7133             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 582+ 712A             >
 582+ 712A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 582+ 712B 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 582+ 712F 44 49 41 54 >
 582+ 7133 45          >
 582+ 7134             >                org     $-1                 // alter last byte of Name just above to set
 582+ 7133 C5          >                db      {b $} | END_BIT     // msb as name end
 582+ 7134             >
 582+ 7134 14 71       >                dw      last_NFA            // Link to previous definition Name
 582+ 7136             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 582+ 7136 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 582+ 7139             >
 582+ 7139             >
 582+ 7139             >                endif           ; ok        // for other definitions it "points" the correct handler
 582+ 7139             >                // Use of "; ok" to suppress "warning[fwdref]"
 582+ 7139             >
 582+ 7139             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 583+ 7139 A2 6F                        dw      LATEST                  // latest
 584+ 713B A5 63 40 00                  dw      LIT, $40                // 64
 585+ 713F FC 6A                        dw      TOGGLE                  // toggle
 586+ 7141 43 69                        dw      EXIT                    // ;
 587+ 7143
 588+ 7143              //  ______________________________________________________________________
 589+ 7143              //
 590+ 7143              // hex          --
 591+ 7143              // change numeration base
 592+ 7143                              Colon_Def HEX, "HEX", is_normal
 592+ 7143             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 592+ 7143             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 592+ 7143             >
 592+ 7143             >                // dummy db directives used to calculate length of namec
 592+ 7143 48 45 58    >                db      "HEX"
 592+ 7146             >len_NFA         defl    $ - temp_NFA
 592+ 7146             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 592+ 7143             >
 592+ 7143 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 592+ 7144 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 592+ 7147             >                org     $-1                 // alter last byte of Name just above to set
 592+ 7146 D8          >                db      {b $} | END_BIT     // msb as name end
 592+ 7147             >
 592+ 7147 2A 71       >                dw      last_NFA            // Link to previous definition Name
 592+ 7149             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 592+ 7149 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 592+ 714C             >
 592+ 714C             >
 592+ 714C             >                endif           ; ok        // for other definitions it "points" the correct handler
 592+ 714C             >                // Use of "; ok" to suppress "warning[fwdref]"
 592+ 714C             >
 592+ 714C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 593+ 714C A5 63 10 00                  dw      LIT, 16                 // 16
 594+ 7150 C7 6D 12 6B                  dw      BASE, STORE             // base !
 595+ 7154 43 69                        dw      EXIT                    // ;
 596+ 7156
 597+ 7156              //  ______________________________________________________________________
 598+ 7156              //
 599+ 7156              // decimal      --
 600+ 7156              // change numeration base
 601+ 7156                              Colon_Def DECIMAL, "DECIMAL", is_normal
 601+ 7156             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 601+ 7156             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ 7156             >
 601+ 7156             >                // dummy db directives used to calculate length of namec
 601+ 7156 44 45 43 49 >                db      "DECIMAL"
 601+ 715A 4D 41 4C    >
 601+ 715D             >len_NFA         defl    $ - temp_NFA
 601+ 715D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ 7156             >
 601+ 7156 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ 7157 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 601+ 715B 4D 41 4C    >
 601+ 715E             >                org     $-1                 // alter last byte of Name just above to set
 601+ 715D CC          >                db      {b $} | END_BIT     // msb as name end
 601+ 715E             >
 601+ 715E 43 71       >                dw      last_NFA            // Link to previous definition Name
 601+ 7160             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 7160 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 601+ 7163             >
 601+ 7163             >
 601+ 7163             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 7163             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 7163             >
 601+ 7163             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 7163 A5 63 0A 00                  dw      LIT, 10                 // 10
 603+ 7167 C7 6D 12 6B                  dw      BASE, STORE             // base !
 604+ 716B 43 69                        dw      EXIT                    // ;
 605+ 716D
 606+ 716D              //  ______________________________________________________________________
 607+ 716D              //
 608+ 716D              // (;code)       --
 609+ 716D              // patch to CFA to call/jump to the "following code"
 610+ 716D                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 610+ 716D             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 610+ 716D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 610+ 716D             >
 610+ 716D             >                // dummy db directives used to calculate length of namec
 610+ 716D 28 3B 43 4F >                db      "(;CODE)"
 610+ 7171 44 45 29    >
 610+ 7174             >len_NFA         defl    $ - temp_NFA
 610+ 7174             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 610+ 716D             >
 610+ 716D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 610+ 716E 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 610+ 7172 44 45 29    >
 610+ 7175             >                org     $-1                 // alter last byte of Name just above to set
 610+ 7174 A9          >                db      {b $} | END_BIT     // msb as name end
 610+ 7175             >
 610+ 7175 56 71       >                dw      last_NFA            // Link to previous definition Name
 610+ 7177             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 610+ 7177 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 610+ 717A             >
 610+ 717A             >
 610+ 717A             >                endif           ; ok        // for other definitions it "points" the correct handler
 610+ 717A             >                // Use of "; ok" to suppress "warning[fwdref]"
 610+ 717A             >
 610+ 717A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 611+ 717A 66 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 612+ 717C A2 6F                        dw      LATEST                  // latest   ( Word being defined in this moment )
 613+ 717E E8 6F C4 6F                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 614+ 7182
 615+ 7182 A5 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 616+ 7186 4B 6A 2A 6B                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 617+ 718A DB 69                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 618+ 718C
 619+ 718C 12 6B                        dw      STORE                   // !
 620+ 718E 43 69                        dw      EXIT                    // ;
 621+ 7190
 622+ 7190              //  ______________________________________________________________________
 623+ 7190              //
 624+ 7190              // ;code        --
 625+ 7190                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 625+ 7190             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 625+ 7190             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 625+ 7190             >
 625+ 7190             >                // dummy db directives used to calculate length of namec
 625+ 7190 3B 43 4F 44 >                db      ";CODE"
 625+ 7194 45          >
 625+ 7195             >len_NFA         defl    $ - temp_NFA
 625+ 7195             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 625+ 7190             >
 625+ 7190 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 625+ 7191 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 625+ 7195 45          >
 625+ 7196             >                org     $-1                 // alter last byte of Name just above to set
 625+ 7195 C5          >                db      {b $} | END_BIT     // msb as name end
 625+ 7196             >
 625+ 7196 6D 71       >                dw      last_NFA            // Link to previous definition Name
 625+ 7198             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 625+ 7198 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 625+ 719B             >
 625+ 719B             >
 625+ 719B             >                endif           ; ok        // for other definitions it "points" the correct handler
 625+ 719B             >                // Use of "; ok" to suppress "warning[fwdref]"
 625+ 719B             >
 625+ 719B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 626+ 719B 94 70                        dw      QCSP                    // ?csp
 627+ 719D CD 70                        dw      COMPILE                 // compile
 628+ 719F 77 71                        dw      C_SEMICOLON_CODE        // (;code)
 629+ 71A1 F8 70                        dw      SQUARED_OPEN            // [
 630+ 71A3 03 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 631+ 71A5 43 69                        dw      EXIT                    // ; immediate
 632+ 71A7
 633+ 71A7              //  ______________________________________________________________________
 634+ 71A7              //
 635+ 71A7              // <builds      --
 636+ 71A7                              Colon_Def CBUILDS, "<BUILDS", is_normal
 636+ 71A7             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 636+ 71A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 636+ 71A7             >
 636+ 71A7             >                // dummy db directives used to calculate length of namec
 636+ 71A7 3C 42 55 49 >                db      "<BUILDS"
 636+ 71AB 4C 44 53    >
 636+ 71AE             >len_NFA         defl    $ - temp_NFA
 636+ 71AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 636+ 71A7             >
 636+ 71A7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 636+ 71A8 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 636+ 71AC 4C 44 53    >
 636+ 71AF             >                org     $-1                 // alter last byte of Name just above to set
 636+ 71AE D3          >                db      {b $} | END_BIT     // msb as name end
 636+ 71AF             >
 636+ 71AF 90 71       >                dw      last_NFA            // Link to previous definition Name
 636+ 71B1             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 636+ 71B1 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 636+ 71B4             >
 636+ 71B4             >
 636+ 71B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 636+ 71B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 636+ 71B4             >
 636+ 71B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 637+ 71B4 55 6C                        dw      ZERO                    // 0
 638+ 71B6 10 6C                        dw      CONSTANT                // constant
 639+ 71B8 43 69                        dw      EXIT                    // ;
 640+ 71BA
 641+ 71BA              //  ______________________________________________________________________
 642+ 71BA              //
 643+ 71BA              // recurse      --
 644+ 71BA              //              Colon_Def RECURSE, "RECURSE", is_immediate
 645+ 71BA              //              dw      QCOMP                   // ?comp
 646+ 71BA              //              dw      LATEST                  // latest
 647+ 71BA              //              dw      PFA, CFA                // pfa cfa
 648+ 71BA              //              dw      COMMA                   // ,
 649+ 71BA              //              dw      EXIT                    // ; immediate
 650+ 71BA
 651+ 71BA              //  ______________________________________________________________________
 652+ 71BA              //
 653+ 71BA              // does>     --
 654+ 71BA                              Colon_Def DOES_TO, "DOES>", is_normal
 654+ 71BA             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 654+ 71BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 654+ 71BA             >
 654+ 71BA             >                // dummy db directives used to calculate length of namec
 654+ 71BA 44 4F 45 53 >                db      "DOES>"
 654+ 71BE 3E          >
 654+ 71BF             >len_NFA         defl    $ - temp_NFA
 654+ 71BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 654+ 71BA             >
 654+ 71BA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 654+ 71BB 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 654+ 71BF 3E          >
 654+ 71C0             >                org     $-1                 // alter last byte of Name just above to set
 654+ 71BF BE          >                db      {b $} | END_BIT     // msb as name end
 654+ 71C0             >
 654+ 71C0 A7 71       >                dw      last_NFA            // Link to previous definition Name
 654+ 71C2             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 654+ 71C2 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 654+ 71C5             >
 654+ 71C5             >
 654+ 71C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 654+ 71C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 654+ 71C5             >
 654+ 71C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 655+ 71C5 66 69                        dw      R_TO                    // r>
 656+ 71C7 A2 6F                        dw      LATEST                  // latest
 657+ 71C9 E8 6F                        dw      PFA                     // pfa
 658+ 71CB 12 6B                        dw      STORE                   // !
 659+ 71CD 77 71                        dw      C_SEMICOLON_CODE        // ;code
 660+ 71CF              Does_Ptr:
 661+ 71CF                              // via call coded in CFA
 662+ 71CF                              ldhlrp
 662+ 71CF 2A 96 63    >                ld      hl,(RP_Pointer)
 663+ 71D2 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 664+ 71D3 70                           ld      (hl), b
 665+ 71D4 2B                           dec     hl
 666+ 71D5 71                           ld      (hl), c
 667+ 71D6                              ldrphl
 667+ 71D6 22 96 63    >                ld      (RP_Pointer),hl
 668+ 71D9 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 669+ 71DA
 670+ 71DA 4E                           ld      c, (hl)
 671+ 71DB 23                           inc     hl
 672+ 71DC 46                           ld      b, (hl)
 673+ 71DD 23                           inc     hl
 674+ 71DE
 675+ 71DE                              psh1
 675+ 71DE E5          >                push    hl
 675+ 71DF DD E9       >                jp      (ix)
 676+ 71E1                              // SMUDGE !
 677+ 71E1
 678+ 71E1              //  ______________________________________________________________________
 679+ 71E1              //
 680+ 71E1              // count        a -- a2 n
 681+ 71E1              // expects a counted string at address a, returns string address and counter
 682+ 71E1                              New_Def COUNT, "COUNT", is_code, is_normal
 682+ 71E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 682+ 71E1             >
 682+ 71E1             >                // dummy db directives used to calculate length of namec
 682+ 71E1 43 4F 55 4E >                db      "COUNT"
 682+ 71E5 54          >
 682+ 71E6             >len_NFA         defl    $ - temp_NFA
 682+ 71E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 682+ 71E1             >
 682+ 71E1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 682+ 71E2 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 682+ 71E6 54          >
 682+ 71E7             >                org     $-1                 // alter last byte of Name just above to set
 682+ 71E6 D4          >                db      {b $} | END_BIT     // msb as name end
 682+ 71E7             >
 682+ 71E7 BA 71       >                dw      last_NFA            // Link to previous definition Name
 682+ 71E9             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 682+ 71E9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 682+ 71E9 ~           >
 682+ 71E9 ~           >
 682+ 71E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 682+ 71E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 682+ 71E9             >
 682+ 71E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 683+ 71E9 E1                           pop     hl
 684+ 71EA 5E                           ld      e, (hl)
 685+ 71EB 16 00                        ld      d, 0
 686+ 71ED 23                           inc     hl
 687+ 71EE              Count_Ptr:
 688+ 71EE E5                           push    hl
 689+ 71EF D5                           push    de
 690+ 71F0                              next
 690+ 71F0 DD E9       >                jp      (ix)
 691+ 71F2
 692+ 71F2              //  ______________________________________________________________________
 693+ 71F2              //
 694+ 71F2              // bounds       a n -- a+n n
 695+ 71F2              // given an address and a length ( a n ) calculate the bound addresses
 696+ 71F2              // suitable for DO-LOOP
 697+ 71F2                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 697+ 71F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 697+ 71F2             >
 697+ 71F2             >                // dummy db directives used to calculate length of namec
 697+ 71F2 42 4F 55 4E >                db      "BOUNDS"
 697+ 71F6 44 53       >
 697+ 71F8             >len_NFA         defl    $ - temp_NFA
 697+ 71F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 697+ 71F2             >
 697+ 71F2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 697+ 71F3 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 697+ 71F7 44 53       >
 697+ 71F9             >                org     $-1                 // alter last byte of Name just above to set
 697+ 71F8 D3          >                db      {b $} | END_BIT     // msb as name end
 697+ 71F9             >
 697+ 71F9 E1 71       >                dw      last_NFA            // Link to previous definition Name
 697+ 71FB             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 697+ 71FB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 697+ 71FB ~           >
 697+ 71FB ~           >
 697+ 71FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 697+ 71FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 697+ 71FB             >
 697+ 71FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 698+ 71FB E1                           pop     hl
 699+ 71FC D1                           pop     de
 700+ 71FD 19                           add     hl, de
 701+ 71FE 18 EE                        jr      Count_Ptr
 702+ 7200
 703+ 7200              //  ______________________________________________________________________
 704+ 7200              //
 705+ 7200              // type         a n --
 706+ 7200              // Sends to current output channel n characters starting at address a.
 707+ 7200                              Colon_Def TYPE, "TYPE", is_normal
 707+ 7200             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 707+ 7200             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 707+ 7200             >
 707+ 7200             >                // dummy db directives used to calculate length of namec
 707+ 7200 54 59 50 45 >                db      "TYPE"
 707+ 7204             >len_NFA         defl    $ - temp_NFA
 707+ 7204             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 707+ 7200             >
 707+ 7200 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 707+ 7201 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 707+ 7205             >                org     $-1                 // alter last byte of Name just above to set
 707+ 7204 C5          >                db      {b $} | END_BIT     // msb as name end
 707+ 7205             >
 707+ 7205 F2 71       >                dw      last_NFA            // Link to previous definition Name
 707+ 7207             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 707+ 7207 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 707+ 720A             >
 707+ 720A             >
 707+ 720A             >                endif           ; ok        // for other definitions it "points" the correct handler
 707+ 720A             >                // Use of "; ok" to suppress "warning[fwdref]"
 707+ 720A             >
 707+ 720A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 708+ 720A FB 71                        dw      BOUNDS                  // bounds
 709+ 720C 45 64                        dw      C_Q_DO                  // ?do
 710+ 720E 0C 00                        dw      Type_Skip - $
 711+ 7210              Type_Loop:
 712+ 7210 78 64 1E 6B                  dw          I, CFETCH           //      i c@
 713+ 7214 4D 6F                        dw          EMIT                //      emit
 714+ 7216 F8 63                        dw      C_LOOP                  // loop
 715+ 7218 F8 FF                        dw      Type_Loop - $
 716+ 721A              Type_Skip:
 717+ 721A 43 69                        dw      EXIT                    // ;
 718+ 721C
 719+ 721C              //  ______________________________________________________________________
 720+ 721C              //
 721+ 721C              // leave        --
 722+ 721C              // Compile (leave) to leave current LOOP and jump just after it
 723+ 721C                              Colon_Def LEAVE, "LEAVE", is_immediate
 723+ 721C             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 723+ 721C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 723+ 721C             >
 723+ 721C             >                // dummy db directives used to calculate length of namec
 723+ 721C 4C 45 41 56 >                db      "LEAVE"
 723+ 7220 45          >
 723+ 7221             >len_NFA         defl    $ - temp_NFA
 723+ 7221             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 723+ 721C             >
 723+ 721C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 723+ 721D 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 723+ 7221 45          >
 723+ 7222             >                org     $-1                 // alter last byte of Name just above to set
 723+ 7221 C5          >                db      {b $} | END_BIT     // msb as name end
 723+ 7222             >
 723+ 7222 00 72       >                dw      last_NFA            // Link to previous definition Name
 723+ 7224             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 723+ 7224 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 723+ 7227             >
 723+ 7227             >
 723+ 7227             >                endif           ; ok        // for other definitions it "points" the correct handler
 723+ 7227             >                // Use of "; ok" to suppress "warning[fwdref]"
 723+ 7227             >
 723+ 7227             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 724+ 7227 CD 70 2F 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 725+ 722B 5F 6E 54 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 725+ 722F 55 6C 7D 6E
 726+ 7233 55 6C 55 6C                  dw      ZERO, ZERO
 727+ 7237 13 69 86 6A                  dw      SPFETCH, DUP
 728+ 723B FD 69 FD 69                  dw      CELL_PLUS, CELL_PLUS
 729+ 723F 6D 6A                        dw      TUCK
 730+ 7241 E5 6D 07 6B                  dw      CSP, FETCH
 731+ 7245 7B 6A B4 6E                  dw      SWAP, SUBTRACT
 732+ 7249 4C 68                        dw      CMOVE
 733+ 724B E5 6D 07 6B                  dw      CSP, FETCH, CELL_MINUS
 733+ 724F 08 6A
 734+ 7251 66 69 4B 6A                  dw      R_TO, OVER, STORE
 734+ 7255 12 6B
 735+ 7257 08 6A 55 6C                  dw      CELL_MINUS, ZERO
 736+ 725B 7B 6A 12 6B                  dw      SWAP, STORE
 737+ 725F 43 69                        dw      EXIT                    // ;
 738+ 7261
 739+ 7261              //  ______________________________________________________________________
 740+ 7261              //
 741+ 7261              // -trailing    a n1 -- a n2
 742+ 7261              // Assumes that an n1 bytes-long string is stored at address a
 743+ 7261              // and the string contains a space delimited word,
 744+ 7261              // Finds n2 as the position of the first character after the word.
 745+ 7261                              Colon_Def LTRAILING, "-TRAILING", is_normal
 745+ 7261             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 745+ 7261             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 745+ 7261             >
 745+ 7261             >                // dummy db directives used to calculate length of namec
 745+ 7261 2D 54 52 41 >                db      "-TRAILING"
 745+ 7265 49 4C 49 4E >
 745+ 7269 47          >
 745+ 726A             >len_NFA         defl    $ - temp_NFA
 745+ 726A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 745+ 7261             >
 745+ 7261 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 745+ 7262 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 745+ 7266 49 4C 49 4E >
 745+ 726A 47          >
 745+ 726B             >                org     $-1                 // alter last byte of Name just above to set
 745+ 726A C7          >                db      {b $} | END_BIT     // msb as name end
 745+ 726B             >
 745+ 726B 1C 72       >                dw      last_NFA            // Link to previous definition Name
 745+ 726D             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 745+ 726D CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 745+ 7270             >
 745+ 7270             >
 745+ 7270             >                endif           ; ok        // for other definitions it "points" the correct handler
 745+ 7270             >                // Use of "; ok" to suppress "warning[fwdref]"
 745+ 7270             >
 745+ 7270             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 746+ 7270 86 6A 55 6C                  dw      DUP, ZERO               // dup 0
 747+ 7274                                                              // do
 748+ 7274 45 64                        dw      C_Q_DO
 749+ 7276 20 00                        dw      LTrailing_Leave - $
 750+ 7278              LTrailing_Loop:
 751+ 7278 DB 6A BE 69                  dw          TWO_DUP, PLUS       //      2dup +
 752+ 727C E5 69                        dw          ONE_SUBTRACT        //      1-
 753+ 727E 1E 6B                        dw          CFETCH              //      c@
 754+ 7280 84 6C B4 6E                  dw          BL, SUBTRACT        //      bl -
 755+ 7284                                                              //      if
 756+ 7284 1C 64                        dw          ZBRANCH
 757+ 7286 0A 00                        dw          LTrailing_Else - $
 758+ 7288 2F 64                        dw              C_LEAVE         //          leave
 759+ 728A 0C 00                        dw              LTrailing_Leave - $
 760+ 728C 07 64                        dw          BRANCH              //      else
 761+ 728E 04 00                        dw          LTrailing_Endif - $
 762+ 7290              LTrailing_Else:
 763+ 7290 E5 69                        dw              ONE_SUBTRACT    //          1-
 764+ 7292              LTrailing_Endif:                                //      endif
 765+ 7292                                                              // loop
 766+ 7292 F8 63                        dw      C_LOOP
 767+ 7294 E4 FF                        dw      LTrailing_Loop - $
 768+ 7296              LTrailing_Leave:
 769+ 7296 43 69                        dw      EXIT                    // ;
 770+ 7298
 771+ 7298              //  ______________________________________________________________________
 772+ 7298              //
 773+ 7298              // accept       a n1 -- n2
 774+ 7298              // Accepts at most n1 characters from terminal and stores them at address a
 775+ 7298              // CR stops input. A 'nul' is added as trailer.
 776+ 7298              // n2 is the string length. n2 is kept in span user variable also.
 777+ 7298                              Colon_Def ACCEPT, "ACCEPT", is_normal
 777+ 7298             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 777+ 7298             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 777+ 7298             >
 777+ 7298             >                // dummy db directives used to calculate length of namec
 777+ 7298 41 43 43 45 >                db      "ACCEPT"
 777+ 729C 50 54       >
 777+ 729E             >len_NFA         defl    $ - temp_NFA
 777+ 729E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 777+ 7298             >
 777+ 7298 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 777+ 7299 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 777+ 729D 50 54       >
 777+ 729F             >                org     $-1                 // alter last byte of Name just above to set
 777+ 729E D4          >                db      {b $} | END_BIT     // msb as name end
 777+ 729F             >
 777+ 729F 61 72       >                dw      last_NFA            // Link to previous definition Name
 777+ 72A1             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 777+ 72A1 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 777+ 72A4             >
 777+ 72A4             >
 777+ 72A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 777+ 72A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 777+ 72A4             >
 777+ 72A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 778+ 72A4 4B 6A BE 69                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 778+ 72A8 4B 6A
 779+ 72AA 55 6C 9F 6A                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 780+ 72AE                                                              // do
 781+ 72AE 45 64                        dw      C_Q_DO
 782+ 72B0 8A 00                        dw      Accept_Leave - $
 783+ 72B2              Accept_Loop:
 784+ 72B2 59 6A 86 66                  dw          DROP, KEY           //      drop key        ( a  c )
 785+ 72B6 86 6A                        dw          DUP                 //      dup             ( a  c  c )
 786+ 72B8 A5 63 0E 00                  dw          LIT, $0E            //      0E
 787+ 72BC C5 6C                        dw          PLUS_ORIGIN         //      +origin
 788+ 72BE 07 6B                        dw          FETCH               //      @               ( a  c  c  del )
 789+ 72C0 C0 6E                        dw          EQUALS              //      =               ( a  c  c==del )
 790+ 72C2                                                              //      if
 791+ 72C2 1C 64                        dw          ZBRANCH
 792+ 72C4 2C 00                        dw          Accept_Else_0 - $
 793+ 72C6 59 6A                        dw              DROP            //          drop        ( a  )
 794+ 72C8 86 6A 78 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 794+ 72CC C0 6E
 795+ 72CE 5E 6C E1 68                  dw              ONE, AND_OP     //          1 and
 796+ 72D2 86 6A                        dw              DUP             //          dup         ( a  a==i  a==i )
 797+ 72D4 66 69                        dw              R_TO            //          r> 2 - + r>
 798+ 72D6 13 6A BE 69                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 799+ 72DA 54 69                        dw              TO_R            //
 800+ 72DC                                                              //          if
 801+ 72DC 1C 64                        dw              ZBRANCH
 802+ 72DE 0A 00                        dw              Accept_Else_1 - $
 803+ 72E0 A5 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 804+ 72E4                                                              //          else
 805+ 72E4 07 64                        dw              BRANCH
 806+ 72E6 06 00                        dw              Accept_Endif_1 - $
 807+ 72E8              Accept_Else_1:
 808+ 72E8 A5 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 809+ 72EC              Accept_Endif_1:                                 //          endif
 810+ 72EC 07 64                        dw          BRANCH
 811+ 72EE 2E 00                        dw          Accept_Endif_0 - $
 812+ 72F0              Accept_Else_0:                                  //      else
 813+ 72F0 86 6A                        dw              DUP             //          dup         ( a  c  c )
 814+ 72F2 A5 63 0D 00                  dw              LIT, 13         //          13
 815+ 72F6 C0 6E                        dw              EQUALS          //          =           ( a  c  c==CR )
 816+ 72F8                                                              //          if
 817+ 72F8 1C 64                        dw              ZBRANCH
 818+ 72FA 0C 00                        dw              Accept_Else_2 - $
 819+ 72FC 59 6A 84 6C                  dw                  DROP, BL    //              drop bl ( a  bl )
 820+ 7300 55 6C                        dw                  ZERO        //              0       ( a  c  0 )
 821+ 7302                                                              //          else
 822+ 7302 07 64                        dw              BRANCH
 823+ 7304 04 00                        dw              Accept_Endif_2 - $
 824+ 7306              Accept_Else_2:
 825+ 7306 86 6A                        dw                  DUP         //              dup     ( a  c  c )
 826+ 7308                                                              //          endif
 827+ 7308              Accept_Endif_2:
 828+ 7308 78 64 2A 6B                  dw              I, CSTORE       //          i           ( a  c )
 829+ 730C 86 6A 84 6C                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 829+ 7310 E0 6E
 830+ 7312                                                              //          if
 831+ 7312 1C 64                        dw              ZBRANCH
 832+ 7314 08 00                        dw              Accept_Endif_3 - $
 833+ 7316 66 69                        dw                  R_TO        //              r>
 834+ 7318 E5 69                        dw                  ONE_SUBTRACT//              1-
 835+ 731A 54 69                        dw                  TO_R        //              >r
 836+ 731C                                                              //          endif
 837+ 731C              Accept_Endif_3:
 838+ 731C              Accept_Endif_0:                                 //      endif
 839+ 731C 4D 6F                        dw          EMIT                //      emit
 840+ 731E 55 6C 78 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 840+ 7322 DB 69
 841+ 7324 12 6B                        dw          STORE               //          ( zero pad )
 842+ 7326 78 64                        dw          I                   //      i
 843+ 7328 78 64 1E 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 843+ 732C 80 69
 844+ 732E 1C 64                        dw          ZBRANCH             //
 845+ 7330 06 00                        dw              Accept_Endif_4 - $
 846+ 7332 2F 64                        dw                  C_LEAVE     //              leave
 847+ 7334 06 00                        dw                  Accept_Leave - $
 848+ 7336              Accept_Endif_4:                                 //      endif
 849+ 7336                                                              // loop
 850+ 7336 F8 63                        dw      C_LOOP
 851+ 7338 7A FF                        dw      Accept_Loop - $
 852+ 733A              Accept_Leave:
 853+ 733A 7B 6A B4 6E                  dw      SWAP, SUBTRACT          // swap -
 854+ 733E DB 69                        dw      ONE_PLUS                // 1+
 855+ 7340 86 6A 3D 6E                  dw      DUP, SPAN, STORE        // dup span !
 855+ 7344 12 6B
 856+ 7346 43 69                        dw      EXIT                    // ;
 857+ 7348
 858+ 7348              //  ______________________________________________________________________
 859+ 7348              //
 860+ 7348              // expect      a n --
 861+ 7348              // Accepts at most n1 characters from terminal and stores them at address a
 862+ 7348              // CR stops input. A 'nul' is added as trailer.
 863+ 7348              // n2 is the string length. n2 is kept in span user variable also.
 864+ 7348              //              Colon_Def EXPECT, "EXPECT", is_normal
 865+ 7348              //              dw      ACCEPT, DROP            // accept drop
 866+ 7348              //              dw      EXIT                    // ;
 867+ 7348
 868+ 7348              //  ______________________________________________________________________
 869+ 7348              //
 870+ 7348              // query        --
 871+ 7348              // Accept at most 80 character from console. CR stops.
 872+ 7348              // Text is stored in TIB. Variable IN is zeroed.
 873+ 7348                              Colon_Def QUERY, "QUERY", is_normal
 873+ 7348             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 873+ 7348             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 873+ 7348             >
 873+ 7348             >                // dummy db directives used to calculate length of namec
 873+ 7348 51 55 45 52 >                db      "QUERY"
 873+ 734C 59          >
 873+ 734D             >len_NFA         defl    $ - temp_NFA
 873+ 734D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 873+ 7348             >
 873+ 7348 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 873+ 7349 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 873+ 734D 59          >
 873+ 734E             >                org     $-1                 // alter last byte of Name just above to set
 873+ 734D D9          >                db      {b $} | END_BIT     // msb as name end
 873+ 734E             >
 873+ 734E 98 72       >                dw      last_NFA            // Link to previous definition Name
 873+ 7350             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 873+ 7350 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 873+ 7353             >
 873+ 7353             >
 873+ 7353             >                endif           ; ok        // for other definitions it "points" the correct handler
 873+ 7353             >                // Use of "; ok" to suppress "warning[fwdref]"
 873+ 7353             >
 873+ 7353             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 874+ 7353 F3 6C 07 6B                  dw      TIB, FETCH              // tib @
 875+ 7357 A5 63 50 00                  dw      LIT, 80                 // 80
 876+ 735B A1 72 59 6A                  dw      ACCEPT, DROP            // accept drop
 877+ 735F 55 6C 73 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 877+ 7363 12 6B
 878+ 7365 43 69                        dw      EXIT                    // ;
 879+ 7367
 880+ 7367              //  ______________________________________________________________________
 881+ 7367              //
 882+ 7367              // fill        a n c --
 883+ 7367              // If n > 0, fills n locations starting from address a with the value c.
 884+ 7367                              New_Def FILL, "FILL", is_code, is_normal
 884+ 7367             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 884+ 7367             >
 884+ 7367             >                // dummy db directives used to calculate length of namec
 884+ 7367 46 49 4C 4C >                db      "FILL"
 884+ 736B             >len_NFA         defl    $ - temp_NFA
 884+ 736B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 884+ 7367             >
 884+ 7367 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 884+ 7368 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 884+ 736C             >                org     $-1                 // alter last byte of Name just above to set
 884+ 736B CC          >                db      {b $} | END_BIT     // msb as name end
 884+ 736C             >
 884+ 736C 48 73       >                dw      last_NFA            // Link to previous definition Name
 884+ 736E             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 884+ 736E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 884+ 736E ~           >
 884+ 736E ~           >
 884+ 736E             >                endif           ; ok        // for other definitions it "points" the correct handler
 884+ 736E             >                // Use of "; ok" to suppress "warning[fwdref]"
 884+ 736E             >
 884+ 736E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 885+ 736E D9                           exx
 886+ 736F D1                           pop     de                  // de has character
 887+ 7370 C1                           pop     bc                  // bc has counter
 888+ 7371 E1                           pop     hl                  // hl has address, save Instruction Pointer
 889+ 7372              Fill_Loop:
 890+ 7372 78                               ld      a, b
 891+ 7373 B1                               or      c
 892+ 7374 28 05                        jr      z, Fill_While_End
 893+ 7376 73                               ld      (hl), e
 894+ 7377 0B                               dec     bc
 895+ 7378 23                               inc     hl
 896+ 7379 18 F7                        jr      Fill_Loop
 897+ 737B              Fill_While_End:
 898+ 737B D9                           exx
 899+ 737C                              next
 899+ 737C DD E9       >                jp      (ix)
 900+ 737E
 901+ 737E              //  ______________________________________________________________________
 902+ 737E              //
 903+ 737E              // erase        a n --
 904+ 737E              // If n > 0, fills n locations starting from address a with 'nul' characters.
 905+ 737E                              Colon_Def ERASE, "ERASE", is_normal
 905+ 737E             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 905+ 737E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 905+ 737E             >
 905+ 737E             >                // dummy db directives used to calculate length of namec
 905+ 737E 45 52 41 53 >                db      "ERASE"
 905+ 7382 45          >
 905+ 7383             >len_NFA         defl    $ - temp_NFA
 905+ 7383             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 905+ 737E             >
 905+ 737E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 905+ 737F 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 905+ 7383 45          >
 905+ 7384             >                org     $-1                 // alter last byte of Name just above to set
 905+ 7383 C5          >                db      {b $} | END_BIT     // msb as name end
 905+ 7384             >
 905+ 7384 67 73       >                dw      last_NFA            // Link to previous definition Name
 905+ 7386             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 905+ 7386 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 905+ 7389             >
 905+ 7389             >
 905+ 7389             >                endif           ; ok        // for other definitions it "points" the correct handler
 905+ 7389             >                // Use of "; ok" to suppress "warning[fwdref]"
 905+ 7389             >
 905+ 7389             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 906+ 7389 55 6C 6E 73                  dw      ZERO, FILL              // 0 fill
 907+ 738D 43 69                        dw      EXIT                    // ;
 908+ 738F
 909+ 738F              //  ______________________________________________________________________
 910+ 738F              //
 911+ 738F              // blanks       a n --
 912+ 738F              // If n > 0, fills n locations starting from address a with 'nul' characters.
 913+ 738F                              Colon_Def BLANKS, "BLANKS", is_normal
 913+ 738F             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 913+ 738F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 913+ 738F             >
 913+ 738F             >                // dummy db directives used to calculate length of namec
 913+ 738F 42 4C 41 4E >                db      "BLANKS"
 913+ 7393 4B 53       >
 913+ 7395             >len_NFA         defl    $ - temp_NFA
 913+ 7395             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 913+ 738F             >
 913+ 738F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 913+ 7390 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 913+ 7394 4B 53       >
 913+ 7396             >                org     $-1                 // alter last byte of Name just above to set
 913+ 7395 D3          >                db      {b $} | END_BIT     // msb as name end
 913+ 7396             >
 913+ 7396 7E 73       >                dw      last_NFA            // Link to previous definition Name
 913+ 7398             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 913+ 7398 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 913+ 739B             >
 913+ 739B             >
 913+ 739B             >                endif           ; ok        // for other definitions it "points" the correct handler
 913+ 739B             >                // Use of "; ok" to suppress "warning[fwdref]"
 913+ 739B             >
 913+ 739B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 914+ 739B 84 6C 6E 73                  dw      BL, FILL                // bl fill
 915+ 739F 43 69                        dw      EXIT                    // ;
 916+ 73A1
 917+ 73A1              //  ______________________________________________________________________
 918+ 73A1              //
 919+ 73A1              // hold         c --
 920+ 73A1              // Used between <# and #> to insert a character c in numeric formatting.
 921+ 73A1                              Colon_Def HOLD, "HOLD", is_normal
 921+ 73A1             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 921+ 73A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 921+ 73A1             >
 921+ 73A1             >                // dummy db directives used to calculate length of namec
 921+ 73A1 48 4F 4C 44 >                db      "HOLD"
 921+ 73A5             >len_NFA         defl    $ - temp_NFA
 921+ 73A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 921+ 73A1             >
 921+ 73A1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 921+ 73A2 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 921+ 73A6             >                org     $-1                 // alter last byte of Name just above to set
 921+ 73A5 C4          >                db      {b $} | END_BIT     // msb as name end
 921+ 73A6             >
 921+ 73A6 8F 73       >                dw      last_NFA            // Link to previous definition Name
 921+ 73A8             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 921+ 73A8 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 921+ 73AB             >
 921+ 73AB             >
 921+ 73AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 921+ 73AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 921+ 73AB             >
 921+ 73AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 922+ 73AB 7A 6C                        dw      NEG_ONE                 // -1
 923+ 73AD F8 6D E8 6A                  dw      HLD, PLUSSTORE          // hld +!
 924+ 73B1 F8 6D 07 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 924+ 73B5 2A 6B
 925+ 73B7 43 69                        dw      EXIT                    // ;
 926+ 73B9
 927+ 73B9              //  ______________________________________________________________________
 928+ 73B9              //
 929+ 73B9              // pad         -- a
 930+ 73B9              // leaves the buffer text address. This is at a fixed distance over HERE.
 931+ 73B9                              Colon_Def PAD, "PAD", is_normal
 931+ 73B9             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 931+ 73B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 931+ 73B9             >
 931+ 73B9             >                // dummy db directives used to calculate length of namec
 931+ 73B9 50 41 44    >                db      "PAD"
 931+ 73BC             >len_NFA         defl    $ - temp_NFA
 931+ 73BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 931+ 73B9             >
 931+ 73B9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 931+ 73BA 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 931+ 73BD             >                org     $-1                 // alter last byte of Name just above to set
 931+ 73BC C4          >                db      {b $} | END_BIT     // msb as name end
 931+ 73BD             >
 931+ 73BD A1 73       >                dw      last_NFA            // Link to previous definition Name
 931+ 73BF             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 931+ 73BF CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 931+ 73C2             >
 931+ 73C2             >
 931+ 73C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 931+ 73C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 931+ 73C2             >
 931+ 73C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 932+ 73C2 5F 6E                        dw      HERE                    // here
 933+ 73C4 A5 63 44 00                  dw      LIT, 68                 // 68
 934+ 73C8 BE 69                        dw      PLUS                    // +
 935+ 73CA 43 69                        dw      EXIT                    // ;
 936+ 73CC
 937+ 73CC              //  ______________________________________________________________________
 938+ 73CC              //
 939+ 73CC              // word         c -- a
 940+ 73CC              // reads characters from input streams until it encouners a c delimiter.
 941+ 73CC              // Stores that packet so it starts from HERE
 942+ 73CC              // WORD leaves a counter as first byte and ends the packet with two spaces.
 943+ 73CC              // Other occurrences of c are ignored.
 944+ 73CC              // If BLK is zero, text is taken from terminal buffer TIB.
 945+ 73CC              // Otherwise text is taken from the disk-block given by BLK.
 946+ 73CC              // "in" variable is incremented of the number of character read.
 947+ 73CC              // The number of characters read is given by ENCLOSE.
 948+ 73CC                              Colon_Def WORD, "WORD", is_normal
 948+ 73CC             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 948+ 73CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ 73CC             >
 948+ 73CC             >                // dummy db directives used to calculate length of namec
 948+ 73CC 57 4F 52 44 >                db      "WORD"
 948+ 73D0             >len_NFA         defl    $ - temp_NFA
 948+ 73D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ 73CC             >
 948+ 73CC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ 73CD 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 948+ 73D1             >                org     $-1                 // alter last byte of Name just above to set
 948+ 73D0 C4          >                db      {b $} | END_BIT     // msb as name end
 948+ 73D1             >
 948+ 73D1 B9 73       >                dw      last_NFA            // Link to previous definition Name
 948+ 73D3             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 73D3 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 948+ 73D6             >
 948+ 73D6             >
 948+ 73D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 73D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 73D6             >
 948+ 73D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 73D6 69 6D 07 6B                  dw      BLK, FETCH              // blk @
 950+ 73DA                                                              // if
 951+ 73DA 1C 64                        dw      ZBRANCH
 952+ 73DC 0C 00                        dw      Word_Else - $
 953+ 73DE 69 6D 07 6B                  dw          BLK, FETCH          //      blk @
 954+ 73E2 5F 7D                        dw          BLOCK               //      block ( forward )
 955+ 73E4                                                              // else
 956+ 73E4 07 64                        dw      BRANCH
 957+ 73E6 06 00                        dw      Word_Endif - $
 958+ 73E8              Word_Else:
 959+ 73E8 F3 6C 07 6B                  dw         TIB, FETCH           //      tib @
 960+ 73EC              Word_Endif:                                     // endif
 961+ 73EC 73 6D 07 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 961+ 73F0 BE 69
 962+ 73F2 7B 6A 58 65                  dw      SWAP, ENCLOSE           // swap enclose
 963+ 73F6 5F 6E A5 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 963+ 73FA 22 00 98 73
 964+ 73FE 73 6D E8 6A                  dw      TO_IN, PLUSSTORE        // >in @ +
 965+ 7402 4B 6A B4 6E                  dw      OVER, SUBTRACT, TO_R    // over - >r
 965+ 7406 54 69
 966+ 7408 78 69 5F 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 966+ 740C 2A 6B
 967+ 740E BE 69                        dw      PLUS                    // +
 968+ 7410 5F 6E DB 69                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 968+ 7414 66 69
 969+ 7416 4C 68                        dw      CMOVE                   // cmove
 970+ 7418 5F 6E                        dw      HERE                    // here
 971+ 741A 43 69                        dw      EXIT                    // ;
 972+ 741C
 973+ 741C              //  ______________________________________________________________________
 974+ 741C              //
 975+ 741C              // (.")         --
 976+ 741C              // Direct procedure compiled by ." and  .(  It executes TYPE.
 977+ 741C                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 977+ 741C             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 977+ 741C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 977+ 741C             >
 977+ 741C             >                // dummy db directives used to calculate length of namec
 977+ 741C 28 2E 22 29 >                db      '(.")'
 977+ 7420             >len_NFA         defl    $ - temp_NFA
 977+ 7420             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 977+ 741C             >
 977+ 741C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 977+ 741D 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 977+ 7421             >                org     $-1                 // alter last byte of Name just above to set
 977+ 7420 A9          >                db      {b $} | END_BIT     // msb as name end
 977+ 7421             >
 977+ 7421 CC 73       >                dw      last_NFA            // Link to previous definition Name
 977+ 7423             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 977+ 7423 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 977+ 7426             >
 977+ 7426             >
 977+ 7426             >                endif           ; ok        // for other definitions it "points" the correct handler
 977+ 7426             >                // Use of "; ok" to suppress "warning[fwdref]"
 977+ 7426             >
 977+ 7426             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 978+ 7426 78 69 E9 71                  dw      R_OP, COUNT             // r count
 979+ 742A 86 6A DB 69                  dw      DUP, ONE_PLUS           // dup 1+
 980+ 742E 66 69 BE 69                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 980+ 7432 54 69
 981+ 7434 07 72                        dw      TYPE                    // type
 982+ 7436 43 69                        dw      EXIT                    // ;
 983+ 7438
 984+ 7438              //  ______________________________________________________________________
 985+ 7438              //
 986+ 7438              // char         -- c
 987+ 7438              // get first character from next input word
 988+ 7438                              Colon_Def CHAR,  "CHAR", is_normal
 988+ 7438             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 988+ 7438             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 988+ 7438             >
 988+ 7438             >                // dummy db directives used to calculate length of namec
 988+ 7438 43 48 41 52 >                db      "CHAR"
 988+ 743C             >len_NFA         defl    $ - temp_NFA
 988+ 743C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 988+ 7438             >
 988+ 7438 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 988+ 7439 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 988+ 743D             >                org     $-1                 // alter last byte of Name just above to set
 988+ 743C D2          >                db      {b $} | END_BIT     // msb as name end
 988+ 743D             >
 988+ 743D 1C 74       >                dw      last_NFA            // Link to previous definition Name
 988+ 743F             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 988+ 743F CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 988+ 7442             >
 988+ 7442             >
 988+ 7442             >                endif           ; ok        // for other definitions it "points" the correct handler
 988+ 7442             >                // Use of "; ok" to suppress "warning[fwdref]"
 988+ 7442             >
 988+ 7442             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 989+ 7442 84 6C D3 73                  dw      BL, WORD                // bl word
 990+ 7446 DB 69 1E 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 991+ 744A 43 69                        dw      EXIT                    // ;
 992+ 744C
 993+ 744C              //  ______________________________________________________________________
 994+ 744C              //
 995+ 744C              // ,"           --
 996+ 744C              // compiles a string terminated by " as a counted string from next input stream
 997+ 744C                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 997+ 744C             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 997+ 744C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 997+ 744C             >
 997+ 744C             >                // dummy db directives used to calculate length of namec
 997+ 744C 2C 22       >                db      ',"'
 997+ 744E             >len_NFA         defl    $ - temp_NFA
 997+ 744E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 997+ 744C             >
 997+ 744C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 997+ 744D 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 997+ 744F             >                org     $-1                 // alter last byte of Name just above to set
 997+ 744E A2          >                db      {b $} | END_BIT     // msb as name end
 997+ 744F             >
 997+ 744F 38 74       >                dw      last_NFA            // Link to previous definition Name
 997+ 7451             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 997+ 7451 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 997+ 7454             >
 997+ 7454             >
 997+ 7454             >                endif           ; ok        // for other definitions it "points" the correct handler
 997+ 7454             >                // Use of "; ok" to suppress "warning[fwdref]"
 997+ 7454             >
 997+ 7454             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 998+ 7454 A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 999+ 7458 D3 73                        dw      WORD                    // word
1000+ 745A 1E 6B DB 69                  dw      CFETCH, ONE_PLUS        // c@ 1+
1001+ 745E 70 6E                        dw      ALLOT                   // allot
1002+ 7460 55 6C 8F 6E                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1003+ 7464 43 69                        dw      EXIT
1004+ 7466
1005+ 7466              //  ______________________________________________________________________
1006+ 7466              //
1007+ 7466              // .c           c --
1008+ 7466              // intermediate general purpose string builder, used by ." and .(
1009+ 7466                              Colon_Def DOT_C,  ".C", is_immediate
1009+ 7466             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1009+ 7466             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1009+ 7466             >
1009+ 7466             >                // dummy db directives used to calculate length of namec
1009+ 7466 2E 43       >                db      ".C"
1009+ 7468             >len_NFA         defl    $ - temp_NFA
1009+ 7468             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1009+ 7466             >
1009+ 7466 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1009+ 7467 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1009+ 7469             >                org     $-1                 // alter last byte of Name just above to set
1009+ 7468 C3          >                db      {b $} | END_BIT     // msb as name end
1009+ 7469             >
1009+ 7469 4C 74       >                dw      last_NFA            // Link to previous definition Name
1009+ 746B             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1009+ 746B CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1009+ 746E             >
1009+ 746E             >
1009+ 746E             >                endif           ; ok        // for other definitions it "points" the correct handler
1009+ 746E             >                // Use of "; ok" to suppress "warning[fwdref]"
1009+ 746E             >
1009+ 746E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1010+ 746E BC 6D 07 6B                  dw      STATE, FETCH            // state @
1011+ 7472                                                              // if
1012+ 7472 1C 64                        dw      ZBRANCH
1013+ 7474 12 00                        dw      Dot_C_Else - $
1014+ 7476 CD 70 23 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1015+ 747A D3 73 1E 6B                  dw          WORD, CFETCH        //      word c@
1016+ 747E DB 69 70 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1017+ 7482                                                              // else
1018+ 7482 07 64                        dw      BRANCH
1019+ 7484 08 00                        dw      Dot_C_Endif - $
1020+ 7486              Dot_C_Else:
1021+ 7486 D3 73 E9 71                  dw          WORD, COUNT, TYPE   //      word count type
1021+ 748A 07 72
1022+ 748C              Dot_C_Endif:                                    // endif
1023+ 748C 43 69                        dw      EXIT                    ;
1024+ 748E
1025+ 748E              //  ______________________________________________________________________
1026+ 748E              //
1027+ 748E              // ."           c --
1028+ 748E                              Colon_Def DOT_QUOTE,  '."', is_immediate
1028+ 748E             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1028+ 748E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1028+ 748E             >
1028+ 748E             >                // dummy db directives used to calculate length of namec
1028+ 748E 2E 22       >                db      '."'
1028+ 7490             >len_NFA         defl    $ - temp_NFA
1028+ 7490             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1028+ 748E             >
1028+ 748E C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1028+ 748F 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1028+ 7491             >                org     $-1                 // alter last byte of Name just above to set
1028+ 7490 A2          >                db      {b $} | END_BIT     // msb as name end
1028+ 7491             >
1028+ 7491 66 74       >                dw      last_NFA            // Link to previous definition Name
1028+ 7493             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1028+ 7493 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1028+ 7496             >
1028+ 7496             >
1028+ 7496             >                endif           ; ok        // for other definitions it "points" the correct handler
1028+ 7496             >                // Use of "; ok" to suppress "warning[fwdref]"
1028+ 7496             >
1028+ 7496             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1029+ 7496 A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1030+ 749A 6B 74                        dw      DOT_C                   // [compile] .c
1031+ 749C 43 69                        dw      EXIT                    // ; immediate
1032+ 749E
1033+ 749E              //  ______________________________________________________________________
1034+ 749E              //
1035+ 749E              // .(           c --
1036+ 749E                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1036+ 749E             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1036+ 749E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1036+ 749E             >
1036+ 749E             >                // dummy db directives used to calculate length of namec
1036+ 749E 2E 28       >                db      ".("
1036+ 74A0             >len_NFA         defl    $ - temp_NFA
1036+ 74A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1036+ 749E             >
1036+ 749E C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1036+ 749F 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1036+ 74A1             >                org     $-1                 // alter last byte of Name just above to set
1036+ 74A0 A8          >                db      {b $} | END_BIT     // msb as name end
1036+ 74A1             >
1036+ 74A1 8E 74       >                dw      last_NFA            // Link to previous definition Name
1036+ 74A3             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1036+ 74A3 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1036+ 74A6             >
1036+ 74A6             >
1036+ 74A6             >                endif           ; ok        // for other definitions it "points" the correct handler
1036+ 74A6             >                // Use of "; ok" to suppress "warning[fwdref]"
1036+ 74A6             >
1036+ 74A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1037+ 74A6 A5 63 29 00                  dw      LIT, ")"                // [char] )
1038+ 74AA 6B 74                        dw      DOT_C                   // [compile] .c
1039+ 74AC 43 69                        dw      EXIT                    // ; immediate
1040+ 74AE
1041+ 74AE              //  ______________________________________________________________________
1042+ 74AE              //
1043+ 74AE              // (sgn)        a -- a f
1044+ 74AE              // determines if char in addr a is a sign (+ or -), and in that case increments
1045+ 74AE              // a flag. Returns f as the sign, true for negative, false for positive.
1046+ 74AE              // called by NUMBER and (EXP)
1047+ 74AE                              Colon_Def CSGN,  "(SGN)", is_normal
1047+ 74AE             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1047+ 74AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1047+ 74AE             >
1047+ 74AE             >                // dummy db directives used to calculate length of namec
1047+ 74AE 28 53 47 4E >                db      "(SGN)"
1047+ 74B2 29          >
1047+ 74B3             >len_NFA         defl    $ - temp_NFA
1047+ 74B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1047+ 74AE             >
1047+ 74AE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1047+ 74AF 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1047+ 74B3 29          >
1047+ 74B4             >                org     $-1                 // alter last byte of Name just above to set
1047+ 74B3 A9          >                db      {b $} | END_BIT     // msb as name end
1047+ 74B4             >
1047+ 74B4 9E 74       >                dw      last_NFA            // Link to previous definition Name
1047+ 74B6             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1047+ 74B6 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1047+ 74B9             >
1047+ 74B9             >
1047+ 74B9             >                endif           ; ok        // for other definitions it "points" the correct handler
1047+ 74B9             >                // Use of "; ok" to suppress "warning[fwdref]"
1047+ 74B9             >
1047+ 74B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1048+ 74B9 86 6A DB 69                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1048+ 74BD 1E 6B
1049+ 74BF 86 6A A5 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1049+ 74C3 2D 00 C0 6E
1050+ 74C7                                                              // if
1051+ 74C7 1C 64                        dw      ZBRANCH
1052+ 74C9 12 00                        dw      CSgn_Else_0 - $
1053+ 74CB 59 6A                        dw          DROP                //      drop
1054+ 74CD DB 69                        dw          ONE_PLUS            //      1+
1055+ 74CF 5E 6C D1 6D                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1055+ 74D3 E8 6A
1056+ 74D5 5E 6C                        dw          ONE                 //      1
1057+ 74D7                                                              // else
1058+ 74D7 07 64                        dw      BRANCH
1059+ 74D9 16 00                        dw      CSgn_Endif_0 - $
1060+ 74DB              CSgn_Else_0:
1061+ 74DB A5 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1061+ 74DF C0 6E
1062+ 74E1                                                              //      if
1063+ 74E1 1C 64                        dw          ZBRANCH
1064+ 74E3 0A 00                        dw          CSgn_Endif_1 - $
1065+ 74E5 DB 69                        dw              ONE_PLUS        //          1+
1066+ 74E7 5E 6C D1 6D                  dw              ONE, DPL        //          1 dpl
1067+ 74EB E8 6A                        dw              PLUSSTORE       //          +!
1068+ 74ED              CSgn_Endif_1                                    //      endif
1069+ 74ED 55 6C                        dw          ZERO                //      0
1070+ 74EF              CSgn_Endif_0:                                   // endif
1071+ 74EF 43 69                        dw      EXIT
1072+ 74F1
1073+ 74F1              //  ______________________________________________________________________
1074+ 74F1              //
1075+ 74F1              // (number)     d a -- d1 a1
1076+ 74F1              // using the current BASE parse characters stored in address a
1077+ 74F1              // accumulating a double precision integer d
1078+ 74F1              // the process stops at the first not-convertible character
1079+ 74F1              // A double-number is kept in CPU registers as HLDE.
1080+ 74F1              // On the stack a double number is treated as two single numbers
1081+ 74F1              // where HL is on the top of the stack and DE is the second from top,
1082+ 74F1              // so in the stack memory it appears as LHED.
1083+ 74F1              // Instead, in 2VARIABLE a double number is stored as EDLH.
1084+ 74F1                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1084+ 74F1             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1084+ 74F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1084+ 74F1             >
1084+ 74F1             >                // dummy db directives used to calculate length of namec
1084+ 74F1 28 4E 55 4D >                db      "(NUMBER)"
1084+ 74F5 42 45 52 29 >
1084+ 74F9             >len_NFA         defl    $ - temp_NFA
1084+ 74F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1084+ 74F1             >
1084+ 74F1 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1084+ 74F2 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1084+ 74F6 42 45 52 29 >
1084+ 74FA             >                org     $-1                 // alter last byte of Name just above to set
1084+ 74F9 A9          >                db      {b $} | END_BIT     // msb as name end
1084+ 74FA             >
1084+ 74FA AE 74       >                dw      last_NFA            // Link to previous definition Name
1084+ 74FC             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1084+ 74FC CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1084+ 74FF             >
1084+ 74FF             >
1084+ 74FF             >                endif           ; ok        // for other definitions it "points" the correct handler
1084+ 74FF             >                // Use of "; ok" to suppress "warning[fwdref]"
1084+ 74FF             >
1084+ 74FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1085+ 74FF                                                              // begin
1086+ 74FF              CNumber_Begin:
1087+ 74FF DB 69                        dw          ONE_PLUS            //      1+
1088+ 7501 86 6A 54 69                  dw          DUP, TO_R           //      dup >r
1089+ 7505 1E 6B                        dw          CFETCH              //      @
1090+ 7507 C7 6D 07 6B                  dw          BASE, FETCH         //      base @
1091+ 750B 95 64                        dw          DIGIT               //      digit
1092+ 750D                                                              // while
1093+ 750D 1C 64                        dw      ZBRANCH
1094+ 750F 2C 00                        dw      CNumber_While_end - $
1095+ 7511 7B 6A                        dw          SWAP                //      swap
1096+ 7513 C7 6D 07 6B                  dw          BASE, FETCH         //      base @
1097+ 7517 7B 68                        dw          UM_MUL              //      um*
1098+ 7519 59 6A 91 6A                  dw          DROP, ROT           //      drop rot
1099+ 751D C7 6D 07 6B                  dw          BASE, FETCH         //      base @
1100+ 7521 7B 68                        dw          UM_MUL              //      um*
1101+ 7523 C9 69                        dw          DPLUS               //      d+
1102+ 7525 D1 6D 07 6B                  dw          DPL, FETCH          //      dpl @
1103+ 7529 DB 69                        dw          ONE_PLUS            //      1+
1104+ 752B                                                              //      if
1105+ 752B 1C 64                        dw          ZBRANCH
1106+ 752D 08 00                        dw          CNumber_Endif - $
1107+ 752F 5E 6C D1 6D                  dw              ONE, DPL        //          1 dpl
1108+ 7533 E8 6A                        dw              PLUSSTORE       //          +!
1109+ 7535              CNumber_Endif:                                  //      endif
1110+ 7535 66 69                        dw             R_TO             //      r>  ( balance rp )
1111+ 7537 07 64                        dw      BRANCH
1112+ 7539 C6 FF                        dw      CNumber_Begin - $
1113+ 753B              CNumber_While_end:                              // repeat
1114+ 753B 66 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1115+ 753D 43 69                        dw      EXIT                    // ;
1116+ 753F
1117+ 753F              //  ______________________________________________________________________
1118+ 753F              //
1119+ 753F              // number       a -- d
1120+ 753F                              Colon_Def NUMBER,  "NUMBER", is_normal
1120+ 753F             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1120+ 753F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1120+ 753F             >
1120+ 753F             >                // dummy db directives used to calculate length of namec
1120+ 753F 4E 55 4D 42 >                db      "NUMBER"
1120+ 7543 45 52       >
1120+ 7545             >len_NFA         defl    $ - temp_NFA
1120+ 7545             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1120+ 753F             >
1120+ 753F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1120+ 7540 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1120+ 7544 45 52       >
1120+ 7546             >                org     $-1                 // alter last byte of Name just above to set
1120+ 7545 D2          >                db      {b $} | END_BIT     // msb as name end
1120+ 7546             >
1120+ 7546 F1 74       >                dw      last_NFA            // Link to previous definition Name
1120+ 7548             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1120+ 7548 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1120+ 754B             >
1120+ 754B             >
1120+ 754B             >                endif           ; ok        // for other definitions it "points" the correct handler
1120+ 754B             >                // Use of "; ok" to suppress "warning[fwdref]"
1120+ 754B             >
1120+ 754B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1121+ 754B 55 6C 55 6C                  dw      ZERO, ZERO              // 0 0
1122+ 754F 91 6A                        dw      ROT                     // rot
1123+ 7551 B6 74 54 69                  dw      CSGN, TO_R              // (sgn) >r
1124+ 7555 7A 6C D1 6D                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1124+ 7559 12 6B
1125+ 755B FC 74                        dw      CNUMBER                 // (number)
1126+ 755D 86 6A 1E 6B                  dw      DUP, CFETCH             // dup c@
1127+ 7561 A5 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1127+ 7565 C0 6E
1128+ 7567                                                              // if
1129+ 7567 1C 64                        dw      ZBRANCH
1130+ 7569 0A 00                        dw      Number_Endif_1 - $
1131+ 756B 55 6C D1 6D                  dw          ZERO, DPL, STORE    //      0 dpl !
1131+ 756F 12 6B
1132+ 7571 FC 74                        dw          CNUMBER             //      (number)
1133+ 7573              Number_Endif_1:                                 // endif
1134+ 7573 1E 6B 84 6C                  dw      CFETCH, BL              // c@ bl
1135+ 7577 B4 6E 55 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1135+ 757B 34 70
1136+ 757D 66 69                        dw      R_TO                    // r>
1137+ 757F                                                              // if
1138+ 757F 1C 64                        dw      ZBRANCH
1139+ 7581 04 00                        dw      Number_Endif_2 - $
1140+ 7583 33 6A                        dw          DMINUS              //      dminus
1141+ 7585              Number_Endif_2:                                 // endif
1142+ 7585 43 69                        dw      EXIT                    // ;
1143+ 7587
1144+ 7587              //  ______________________________________________________________________
1145+ 7587              //
1146+ 7587              // -find        a -- d
1147+ 7587                              Colon_Def LFIND,  "-FIND", is_normal
1147+ 7587             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1147+ 7587             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1147+ 7587             >
1147+ 7587             >                // dummy db directives used to calculate length of namec
1147+ 7587 2D 46 49 4E >                db      "-FIND"
1147+ 758B 44          >
1147+ 758C             >len_NFA         defl    $ - temp_NFA
1147+ 758C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1147+ 7587             >
1147+ 7587 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1147+ 7588 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1147+ 758C 44          >
1147+ 758D             >                org     $-1                 // alter last byte of Name just above to set
1147+ 758C C4          >                db      {b $} | END_BIT     // msb as name end
1147+ 758D             >
1147+ 758D 3F 75       >                dw      last_NFA            // Link to previous definition Name
1147+ 758F             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1147+ 758F CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1147+ 7592             >
1147+ 7592             >
1147+ 7592             >                endif           ; ok        // for other definitions it "points" the correct handler
1147+ 7592             >                // Use of "; ok" to suppress "warning[fwdref]"
1147+ 7592             >
1147+ 7592             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1148+ 7592 84 6C D3 73                  dw      BL, WORD                // bl word
1149+ 7596 A2 6D 07 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1149+ 759A 07 6B
1150+ 759C 02 65                        dw      C_FIND                  // (find)
1151+ 759E 33 6F                        dw      QDUP                    // ?dup
1152+ 75A0 80 69                        dw      ZEQUAL                  // 0=
1153+ 75A2                                                              // if
1154+ 75A2 1C 64                        dw      ZBRANCH
1155+ 75A4 08 00                        dw      LFind_Endif - $
1156+ 75A6 5F 6E                        dw          HERE                //      here
1157+ 75A8 A2 6F                        dw          LATEST              //      latest
1158+ 75AA 02 65                        dw          C_FIND              //      (find)
1159+ 75AC              LFind_Endif:                                    // endif
1160+ 75AC 43 69                        dw      EXIT                    // ;
1161+ 75AE
1162+ 75AE              //  ______________________________________________________________________
1163+ 75AE              //
1164+ 75AE              // (abort)      --
1165+ 75AE                              Colon_Def CABORT,  "(ABORT)", is_normal
1165+ 75AE             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1165+ 75AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1165+ 75AE             >
1165+ 75AE             >                // dummy db directives used to calculate length of namec
1165+ 75AE 28 41 42 4F >                db      "(ABORT)"
1165+ 75B2 52 54 29    >
1165+ 75B5             >len_NFA         defl    $ - temp_NFA
1165+ 75B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1165+ 75AE             >
1165+ 75AE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1165+ 75AF 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1165+ 75B3 52 54 29    >
1165+ 75B6             >                org     $-1                 // alter last byte of Name just above to set
1165+ 75B5 A9          >                db      {b $} | END_BIT     // msb as name end
1165+ 75B6             >
1165+ 75B6 87 75       >                dw      last_NFA            // Link to previous definition Name
1165+ 75B8             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1165+ 75B8 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1165+ 75BB             >
1165+ 75BB             >
1165+ 75BB             >                endif           ; ok        // for other definitions it "points" the correct handler
1165+ 75BB             >                // Use of "; ok" to suppress "warning[fwdref]"
1165+ 75BB             >
1165+ 75BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1166+ 75BB 94 78                        dw      ABORT                   // abort
1167+ 75BD 43 69                        dw      EXIT                    // ;
1168+ 75BF
1169+ 75BF              //  ______________________________________________________________________
1170+ 75BF              //
1171+ 75BF              // error        n --
1172+ 75BF              // raise an error
1173+ 75BF              // if WARNING is 0, prints "MSG#n".
1174+ 75BF              // if WARNING is 1, prints line n of screen 4.
1175+ 75BF              // if WARNING is -1 does (ABORT) that normally does ABORT
1176+ 75BF              // value can be negative or beyond block 4.
1177+ 75BF                              Colon_Def ERROR,  "ERROR", is_normal
1177+ 75BF             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1177+ 75BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1177+ 75BF             >
1177+ 75BF             >                // dummy db directives used to calculate length of namec
1177+ 75BF 45 52 52 4F >                db      "ERROR"
1177+ 75C3 52          >
1177+ 75C4             >len_NFA         defl    $ - temp_NFA
1177+ 75C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1177+ 75BF             >
1177+ 75BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1177+ 75C0 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1177+ 75C4 52          >
1177+ 75C5             >                org     $-1                 // alter last byte of Name just above to set
1177+ 75C4 D2          >                db      {b $} | END_BIT     // msb as name end
1177+ 75C5             >
1177+ 75C5 AE 75       >                dw      last_NFA            // Link to previous definition Name
1177+ 75C7             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1177+ 75C7 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1177+ 75CA             >
1177+ 75CA             >
1177+ 75CA             >                endif           ; ok        // for other definitions it "points" the correct handler
1177+ 75CA             >                // Use of "; ok" to suppress "warning[fwdref]"
1177+ 75CA             >
1177+ 75CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1178+ 75CA 0D 6D 07 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1178+ 75CE 9A 69
1179+ 75D0                                                              // if
1180+ 75D0 1C 64                        dw      ZBRANCH
1181+ 75D2 04 00                        dw      Error_Endif_1 - $
1182+ 75D4 B8 75                        dw          CABORT              //      (abort)
1183+ 75D6              Error_Endif_1:                                  // endif
1184+ 75D6 5F 6E E9 71                  dw      HERE, COUNT, TYPE       // here count type
1184+ 75DA 07 72
1185+ 75DC 23 74                        dw      C_DOT_QUOTE             // .( ? )
1186+ 75DE 02 3F 20                     db      2, "? "
1187+ 75E1 D7 7A                        dw      MESSAGE                 // message  ( forward )
1188+ 75E3 E0 6C 07 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1188+ 75E7 20 69
1189+ 75E9 69 6D 07 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1189+ 75ED 33 6F
1190+ 75EF                                                              // if
1191+ 75EF 1C 64                        dw      ZBRANCH
1192+ 75F1 08 00                        dw      Error_Endif_2 - $
1193+ 75F3 73 6D 07 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1193+ 75F7 7B 6A
1194+ 75F9              Error_Endif_2:                                  // endif
1195+ 75F9 52 78                        dw      QUIT                    // quit ( forward )
1196+ 75FB 43 69                        dw      EXIT                    // ;
1197+ 75FD              //  ______________________________________________________________________
1198+ 75FD              //
1199+ 75FD              // id.          nfa --
1200+ 75FD                              Colon_Def ID_DOT,  "ID.", is_normal
1200+ 75FD             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1200+ 75FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1200+ 75FD             >
1200+ 75FD             >                // dummy db directives used to calculate length of namec
1200+ 75FD 49 44 2E    >                db      "ID."
1200+ 7600             >len_NFA         defl    $ - temp_NFA
1200+ 7600             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1200+ 75FD             >
1200+ 75FD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1200+ 75FE 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1200+ 7601             >                org     $-1                 // alter last byte of Name just above to set
1200+ 7600 AE          >                db      {b $} | END_BIT     // msb as name end
1200+ 7601             >
1200+ 7601 BF 75       >                dw      last_NFA            // Link to previous definition Name
1200+ 7603             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1200+ 7603 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1200+ 7606             >
1200+ 7606             >
1200+ 7606             >                endif           ; ok        // for other definitions it "points" the correct handler
1200+ 7606             >                // Use of "; ok" to suppress "warning[fwdref]"
1200+ 7606             >
1200+ 7606             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1201+ 7606 BF 73 A5 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1201+ 760A 20 00 A5 63
1201+ 760E 60 00
1202+ 7610 6E 73                        dw      FILL                    // fill
1203+ 7612 86 6A E8 6F                  dw      DUP, PFA, LFA           // dup pfa lfa
1203+ 7616 B3 6F
1204+ 7618 4B 6A B4 6E                  dw      OVER, SUBTRACT          // over -
1205+ 761C BF 73 7B 6A                  dw      PAD, SWAP               // pad swap
1206+ 7620 4C 68                        dw      CMOVE                   // cmove
1207+ 7622 BF 73 E9 71                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1207+ 7626 A5 63 1F 00
1208+ 762A E1 68                        dw      AND_OP                  // and  ( use only lower bits )
1209+ 762C 07 72 6A 6F                  dw      TYPE, SPACE             // type
1210+ 7630 43 69                        dw      EXIT                    // ;
1211+ 7632
1212+ 7632              //  ______________________________________________________________________
1213+ 7632              //
1214+ 7632              // code         -- cccc
1215+ 7632                              Colon_Def CODE,  "CODE", is_normal
1215+ 7632             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1215+ 7632             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1215+ 7632             >
1215+ 7632             >                // dummy db directives used to calculate length of namec
1215+ 7632 43 4F 44 45 >                db      "CODE"
1215+ 7636             >len_NFA         defl    $ - temp_NFA
1215+ 7636             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1215+ 7632             >
1215+ 7632 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1215+ 7633 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1215+ 7637             >                org     $-1                 // alter last byte of Name just above to set
1215+ 7636 C5          >                db      {b $} | END_BIT     // msb as name end
1215+ 7637             >
1215+ 7637 FD 75       >                dw      last_NFA            // Link to previous definition Name
1215+ 7639             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1215+ 7639 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1215+ 763C             >
1215+ 763C             >
1215+ 763C             >                endif           ; ok        // for other definitions it "points" the correct handler
1215+ 763C             >                // Use of "; ok" to suppress "warning[fwdref]"
1215+ 763C             >
1215+ 763C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1216+ 763C 8F 75                        dw      LFIND                   // -find
1217+ 763E                                                              // if
1218+ 763E 1C 64                        dw      ZBRANCH
1219+ 7640 10 00                        dw      Code_Endif - $
1220+ 7642 59 6A                        dw          DROP                //      drop
1221+ 7644 10 70 03 76                  dw          TO_NAME, ID_DOT     //      >name id.
1222+ 7648 A5 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1222+ 764C D7 7A
1223+ 764E 6A 6F                        dw          SPACE               //      space
1224+ 7650              Code_Endif:                                     // endif
1225+ 7650 5F 6E                        dw      HERE                    // here
1226+ 7652                                                              // ( ---- here begins NFA ---- )
1227+ 7652 86 6A 1E 6B                  dw      DUP, CFETCH             // dup c@
1228+ 7656 FF 6C 07 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1228+ 765A 04 6F
1229+ 765C DB 69 70 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1230+ 7660 86 6A                        dw      DUP                     // dup
1231+ 7662 A5 63                        dw      LIT
1232+ 7664 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1233+ 7666 FC 6A                        dw      TOGGLE                  // toggle
1234+ 7668 5F 6E E5 69                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1235+ 766C A5 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1235+ 7670 FC 6A
1236+ 7672                                                              // ( ---- here is LFA ---- )
1237+ 7672 A2 6F 7D 6E                  dw      LATEST, COMMA           // latest ,
1238+ 7676 B0 6D 07 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1238+ 767A 12 6B
1239+ 767C                                                              // ( ---- here is LFA ---- )
1240+ 767C              //              dw      HERE, CELL_PLUS, COMMA  // ( CFA is empty and PFA yet to exist )
1241+ 767C 43 69                        dw      EXIT                    // ;
1242+ 767E
1243+ 767E              //  ______________________________________________________________________
1244+ 767E              //
1245+ 767E              // create       -- cccc     ( compile time )
1246+ 767E              //              -- a        ( run time )
1247+ 767E                              Colon_Def CREATE,  "CREATE", is_normal
1247+ 767E             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1247+ 767E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1247+ 767E             >
1247+ 767E             >                // dummy db directives used to calculate length of namec
1247+ 767E 43 52 45 41 >                db      "CREATE"
1247+ 7682 54 45       >
1247+ 7684             >len_NFA         defl    $ - temp_NFA
1247+ 7684             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1247+ 767E             >
1247+ 767E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1247+ 767F 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1247+ 7683 54 45       >
1247+ 7685             >                org     $-1                 // alter last byte of Name just above to set
1247+ 7684 C5          >                db      {b $} | END_BIT     // msb as name end
1247+ 7685             >
1247+ 7685 32 76       >                dw      last_NFA            // Link to previous definition Name
1247+ 7687             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1247+ 7687 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1247+ 768A             >
1247+ 768A             >
1247+ 768A             >                endif           ; ok        // for other definitions it "points" the correct handler
1247+ 768A             >                // Use of "; ok" to suppress "warning[fwdref]"
1247+ 768A             >
1247+ 768A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1248+ 768A 39 76 1D 71                  dw      CODE, SMUDGE            // code smudge
1249+ 768E A5 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1249+ 7692 8F 6E
1250+ 7694 A5 63 34 6C                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1250+ 7698 7D 6E
1251+ 769A 77 71                        dw      C_SEMICOLON_CODE
1252+ 769C                              // this routine is called from the call coded in CFA
1253+ 769C              Create_Ptr:
1254+ 769C
1255+ 769C
1256+ 769C
1257+ 769C                              next
1257+ 769C DD E9       >                jp      (ix)
1258+ 769E
1259+ 769E              //  ______________________________________________________________________
1260+ 769E              //
1261+ 769E              // [compile]    -- cccc     ( compile time )
1262+ 769E                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1262+ 769E             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1262+ 769E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1262+ 769E             >
1262+ 769E             >                // dummy db directives used to calculate length of namec
1262+ 769E 5B 43 4F 4D >                db      "[COMPILE]"
1262+ 76A2 50 49 4C 45 >
1262+ 76A6 5D          >
1262+ 76A7             >len_NFA         defl    $ - temp_NFA
1262+ 76A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1262+ 769E             >
1262+ 769E C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1262+ 769F 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1262+ 76A3 50 49 4C 45 >
1262+ 76A7 5D          >
1262+ 76A8             >                org     $-1                 // alter last byte of Name just above to set
1262+ 76A7 DD          >                db      {b $} | END_BIT     // msb as name end
1262+ 76A8             >
1262+ 76A8 7E 76       >                dw      last_NFA            // Link to previous definition Name
1262+ 76AA             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1262+ 76AA CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1262+ 76AD             >
1262+ 76AD             >
1262+ 76AD             >                endif           ; ok        // for other definitions it "points" the correct handler
1262+ 76AD             >                // Use of "; ok" to suppress "warning[fwdref]"
1262+ 76AD             >
1262+ 76AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1263+ 76AD 8F 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1264+ 76AF 80 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1265+ 76B1 55 6C 34 70                  dw      ZERO, QERROR            // 0 ?error
1266+ 76B5 59 6A                        dw      DROP                    // drop       (  cfa  )
1267+ 76B7 7D 6E                        dw      COMMA                   // ,
1268+ 76B9 43 69                        dw      EXIT                    // ; immediate
1269+ 76BB
1270+ 76BB              //  ______________________________________________________________________
1271+ 76BB              //
1272+ 76BB              // literal      n --      ( compile time )
1273+ 76BB                              Colon_Def LITERAL,  "LITERAL", is_immediate
1273+ 76BB             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1273+ 76BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1273+ 76BB             >
1273+ 76BB             >                // dummy db directives used to calculate length of namec
1273+ 76BB 4C 49 54 45 >                db      "LITERAL"
1273+ 76BF 52 41 4C    >
1273+ 76C2             >len_NFA         defl    $ - temp_NFA
1273+ 76C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1273+ 76BB             >
1273+ 76BB C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1273+ 76BC 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1273+ 76C0 52 41 4C    >
1273+ 76C3             >                org     $-1                 // alter last byte of Name just above to set
1273+ 76C2 CC          >                db      {b $} | END_BIT     // msb as name end
1273+ 76C3             >
1273+ 76C3 9E 76       >                dw      last_NFA            // Link to previous definition Name
1273+ 76C5             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1273+ 76C5 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1273+ 76C8             >
1273+ 76C8             >
1273+ 76C8             >                endif           ; ok        // for other definitions it "points" the correct handler
1273+ 76C8             >                // Use of "; ok" to suppress "warning[fwdref]"
1273+ 76C8             >
1273+ 76C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1274+ 76C8 BC 6D 07 6B                  dw      STATE, FETCH            // state @
1275+ 76CC                                                              // if
1276+ 76CC 1C 64                        dw      ZBRANCH
1277+ 76CE 08 00                        dw      Literal_Endif - $
1278+ 76D0 CD 70 A5 63                  dw          COMPILE, LIT        //      compile lit
1279+ 76D4 7D 6E                        dw          COMMA               //      ,
1280+ 76D6              Literal_Endif:                                  // endif
1281+ 76D6 43 69                        dw      EXIT                    // ; immediate
1282+ 76D8
1283+ 76D8              //  ______________________________________________________________________
1284+ 76D8              //
1285+ 76D8              // dliteral     n --      ( compile time )
1286+ 76D8                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1286+ 76D8             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1286+ 76D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1286+ 76D8             >
1286+ 76D8             >                // dummy db directives used to calculate length of namec
1286+ 76D8 44 4C 49 54 >                db      "DLITERAL"
1286+ 76DC 45 52 41 4C >
1286+ 76E0             >len_NFA         defl    $ - temp_NFA
1286+ 76E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1286+ 76D8             >
1286+ 76D8 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1286+ 76D9 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1286+ 76DD 45 52 41 4C >
1286+ 76E1             >                org     $-1                 // alter last byte of Name just above to set
1286+ 76E0 CC          >                db      {b $} | END_BIT     // msb as name end
1286+ 76E1             >
1286+ 76E1 BB 76       >                dw      last_NFA            // Link to previous definition Name
1286+ 76E3             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1286+ 76E3 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1286+ 76E6             >
1286+ 76E6             >
1286+ 76E6             >                endif           ; ok        // for other definitions it "points" the correct handler
1286+ 76E6             >                // Use of "; ok" to suppress "warning[fwdref]"
1286+ 76E6             >
1286+ 76E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1287+ 76E6 BC 6D 07 6B                  dw      STATE, FETCH            // state @
1288+ 76EA                                                              // if
1289+ 76EA 1C 64                        dw      ZBRANCH
1290+ 76EC 08 00                        dw      DLiteral_Endif - $
1291+ 76EE 7B 6A                        dw          SWAP                //      swap
1292+ 76F0 C5 76 C5 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1293+ 76F4              DLiteral_Endif:                                 // endif
1294+ 76F4 43 69                        dw      EXIT                    // ; immediate
1295+ 76F6
1296+ 76F6              //  ______________________________________________________________________
1297+ 76F6              //
1298+ 76F6              // [char]       n --      ( compile time )
1299+ 76F6              // inside colon definition, gets first character from next input word
1300+ 76F6              // and compiles it as literal.
1301+ 76F6                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1301+ 76F6             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1301+ 76F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1301+ 76F6             >
1301+ 76F6             >                // dummy db directives used to calculate length of namec
1301+ 76F6 5B 43 48 41 >                db      "[CHAR]"
1301+ 76FA 52 5D       >
1301+ 76FC             >len_NFA         defl    $ - temp_NFA
1301+ 76FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1301+ 76F6             >
1301+ 76F6 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1301+ 76F7 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1301+ 76FB 52 5D       >
1301+ 76FD             >                org     $-1                 // alter last byte of Name just above to set
1301+ 76FC DD          >                db      {b $} | END_BIT     // msb as name end
1301+ 76FD             >
1301+ 76FD D8 76       >                dw      last_NFA            // Link to previous definition Name
1301+ 76FF             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1301+ 76FF CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1301+ 7702             >
1301+ 7702             >
1301+ 7702             >                endif           ; ok        // for other definitions it "points" the correct handler
1301+ 7702             >                // Use of "; ok" to suppress "warning[fwdref]"
1301+ 7702             >
1301+ 7702             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1302+ 7702 3F 74 C5 76                  dw      CHAR, LITERAL           // char [compile] literal
1303+ 7706 43 69                        dw      EXIT                    // ; immediate
1304+ 7708
1305+ 7708              //  ______________________________________________________________________
1306+ 7708              //
1307+ 7708              // 0x00         n --      ( compile time )
1308+ 7708                              Colon_Def NUL_WORD,  $00, is_immediate
1308+ 7708             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1308+ 7708             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1308+ 7708             >
1308+ 7708             >                // dummy db directives used to calculate length of namec
1308+ 7708 00          >                db      $00
1308+ 7709             >len_NFA         defl    $ - temp_NFA
1308+ 7709             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1308+ 7708             >
1308+ 7708 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1308+ 7709 00          >                db      $00               // name string in 7-bit ascii, but
1308+ 770A             >                org     $-1                 // alter last byte of Name just above to set
1308+ 7709 80          >                db      {b $} | END_BIT     // msb as name end
1308+ 770A             >
1308+ 770A F6 76       >                dw      last_NFA            // Link to previous definition Name
1308+ 770C             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1308+ 770C CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1308+ 770F             >
1308+ 770F             >
1308+ 770F             >                endif           ; ok        // for other definitions it "points" the correct handler
1308+ 770F             >                // Use of "; ok" to suppress "warning[fwdref]"
1308+ 770F             >
1308+ 770F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1309+ 770F 69 6D 07 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1309+ 7713 5E 6C
1310+ 7715 F5 6E                        dw      GREATER                 // > if
1311+ 7717                                                              // if
1312+ 7717 1C 64                        dw      ZBRANCH
1313+ 7719 28 00                        dw      Nul_Else_1 - $
1314+ 771B 5E 6C 69 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1314+ 771F E8 6A
1315+ 7721 55 6C 73 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
1315+ 7725 12 6B
1316+ 7727 69 6D 07 6B                  dw          BLK, FETCH          //      blk @
1317+ 772B A9 6C                        dw          BSCR                //      b/scr
1318+ 772D E5 69                        dw          ONE_SUBTRACT        //      1 -
1319+ 772F E1 68                        dw          AND_OP              //      and  ( this is tricky )
1320+ 7731 80 69                        dw          ZEQUAL              //      0=
1321+ 7733                                                              //      if
1322+ 7733 1C 64                        dw          ZBRANCH
1323+ 7735 08 00                        dw          Nul_Endif_2 - $
1324+ 7737 68 70                        dw              QEXEC           //          ?exec
1325+ 7739 66 69 59 6A                  dw              R_TO, DROP      //          r> drop
1326+ 773D              Nul_Endif_2:                                    //      endif
1327+ 773D 07 64                        dw      BRANCH
1328+ 773F 06 00                        dw      Nul_Endif_1 - $
1329+ 7741              Nul_Else_1:                                     // else
1330+ 7741 66 69 59 6A                  dw          R_TO, DROP          //      r> drop
1331+ 7745              Nul_Endif_1:                                    // endif
1332+ 7745 43 69                        dw      EXIT                    // ;
1333+ 7747
1334+ 7747              //  ______________________________________________________________________
1335+ 7747              //
1336+ 7747              // ?stack       --
1337+ 7747              // Raise error #1 if stack is empty and you pop it
1338+ 7747              // Raise error #7 if stack is full.
1339+ 7747              // This means SP must always stay between HERE and FFFF
1340+ 7747              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1341+ 7747              // for Next 8K MMU paging this is $DOE8
1342+ 7747                              Colon_Def QSTACK, "?STACK", is_normal
1342+ 7747             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1342+ 7747             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1342+ 7747             >
1342+ 7747             >                // dummy db directives used to calculate length of namec
1342+ 7747 3F 53 54 41 >                db      "?STACK"
1342+ 774B 43 4B       >
1342+ 774D             >len_NFA         defl    $ - temp_NFA
1342+ 774D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1342+ 7747             >
1342+ 7747 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1342+ 7748 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1342+ 774C 43 4B       >
1342+ 774E             >                org     $-1                 // alter last byte of Name just above to set
1342+ 774D CB          >                db      {b $} | END_BIT     // msb as name end
1342+ 774E             >
1342+ 774E 08 77       >                dw      last_NFA            // Link to previous definition Name
1342+ 7750             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1342+ 7750 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1342+ 7753             >
1342+ 7753             >
1342+ 7753             >                endif           ; ok        // for other definitions it "points" the correct handler
1342+ 7753             >                // Use of "; ok" to suppress "warning[fwdref]"
1342+ 7753             >
1342+ 7753             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1343+ 7753 13 69                        dw      SPFETCH                 // sp@
1344+ 7755 E0 6C 07 6B                  dw      S0, FETCH               // s0 @
1345+ 7759 7B 6A CE 6E                  dw      SWAP, ULESS             // swap u<
1346+ 775D 5E 6C 34 70                  dw      ONE, QERROR             // 1 ?error
1347+ 7761 5F 6E                        dw      HERE                    // here
1348+ 7763 E0 6C 07 6B                  dw      S0, FETCH, LESS         // s0 @ <
1348+ 7767 E0 6E
1349+ 7769                                                              // if
1350+ 7769 1C 64                        dw      ZBRANCH
1351+ 776B 14 00                        dw      QStack_Endif - $
1352+ 776D 13 69                        dw          SPFETCH             //      sp@
1353+ 776F 5F 6E A5 63                  dw          HERE, LIT, 128      //      here 128
1353+ 7773 80 00
1354+ 7775 BE 69 CE 6E                  dw          PLUS, ULESS         //      plus u<
1355+ 7779 A5 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1355+ 777D 34 70
1356+ 777F              QStack_Endif:                                   // endif
1357+ 777F 43 69                        dw      EXIT                    // ;
1358+ 7781
1359+ 7781
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
 112  7781                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
   1+ 7781              //  ______________________________________________________________________
   2+ 7781              //
   3+ 7781              //  L2.asm
   4+ 7781              //
   5+ 7781              //  Level-2
   6+ 7781              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 7781              //  ______________________________________________________________________
   8+ 7781
   9+ 7781
  10+ 7781              //  ______________________________________________________________________
  11+ 7781              //
  12+ 7781              // interpret    --
  13+ 7781              // This is the text interpreter.
  14+ 7781              // It executes or compiles, depending on STATE, the text coming from
  15+ 7781              // current input stream.
  16+ 7781              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 7781              // the word is interpreted as numeric and converted, using current BASE,
  18+ 7781              // leaving on top of stack a single or double precision number, depending
  19+ 7781              // on the presence of a decimal point.
  20+ 7781              // If the number conversion fails, the terminal is notified with ? followed
  21+ 7781              // by the offending word.
  22+ 7781                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 7781             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 7781             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 7781             >
  22+ 7781             >                // dummy db directives used to calculate length of namec
  22+ 7781 49 4E 54 45 >                db      "INTERPRET"
  22+ 7785 52 50 52 45 >
  22+ 7789 54          >
  22+ 778A             >len_NFA         defl    $ - temp_NFA
  22+ 778A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 7781             >
  22+ 7781 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 7782 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 7786 52 50 52 45 >
  22+ 778A 54          >
  22+ 778B             >                org     $-1                 // alter last byte of Name just above to set
  22+ 778A D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 778B             >
  22+ 778B 47 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 778D             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 778D CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 7790             >
  22+ 7790             >
  22+ 7790             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 7790             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 7790             >
  22+ 7790             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 7790
  24+ 7790              Interpret_Begin:                                        // begin
  25+ 7790 8F 75                        dw          LFIND                       //      -find
  26+ 7792                                                                      //      if
  27+ 7792 1C 64                        dw          ZBRANCH
  28+ 7794 1A 00                        dw          Interpret_Else_1 - $
  29+ 7796 BC 6D 07 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 779A E0 6E
  30+ 779C                                                                      //          if
  31+ 779C 1C 64                        dw              ZBRANCH
  32+ 779E 08 00                        dw              Interpret_Else_2 - $
  33+ 77A0 EB 70                        dw                  COMPILE_XT          //              compile,
  34+ 77A2                                                                      //          else
  35+ 77A2 07 64                        dw              BRANCH
  36+ 77A4 06 00                        dw              Interpret_Endif_2 - $
  37+ 77A6              Interpret_Else_2:
  38+ 77A6 B8 63 03 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77AA              Interpret_Endif_2:                                      //          endif
  40+ 77AA                                                                      //      else
  41+ 77AA 07 64                        dw          BRANCH
  42+ 77AC 1A 00                        dw          Interpret_Endif_1 - $
  43+ 77AE              Interpret_Else_1:
  44+ 77AE 5F 6E 48 75                  dw              HERE, NUMBER            //          here number
  45+ 77B2 D1 6D 07 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77B6 DB 69
  46+ 77B8                                                                      //          if
  47+ 77B8 1C 64                        dw              ZBRANCH
  48+ 77BA 08 00                        dw              Interpret_Else_3 - $
  49+ 77BC              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77BC              //                                                      //              if
  51+ 77BC              //              dw                  ZBRANCH
  52+ 77BC              //              dw                  Interpret_Endif_4 - $
  53+ 77BC              //              dw                      ONE, ZERO       //                  1 0
  54+ 77BC              //              dw                      TWO_DROP        //                  2drop
  55+ 77BC              //Interpret_Endif_4:                                      //              endif
  56+ 77BC E3 76                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77BE                                                                      //          else
  58+ 77BE 07 64                        dw              BRANCH
  59+ 77C0 06 00                        dw              Interpret_Endif_3 - $
  60+ 77C2              Interpret_Else_3:
  61+ 77C2 59 6A                        dw                  DROP                //              drop
  62+ 77C4 C5 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77C6              Interpret_Endif_3:                                      //          endif
  64+ 77C6              Interpret_Endif_1:                                      //      endif
  65+ 77C6 50 77                        dw          QSTACK                      //      ?stack
  66+ 77C8 0B 67                        dw          QTERMINAL                   //      ?terminal
  67+ 77CA                                                                      //      if
  68+ 77CA 1C 64                        dw          ZBRANCH
  69+ 77CC 04 00                        dw          Interpret_Endif_5 - $
  70+ 77CE B8 75                        dw              CABORT                  //          (abort)
  71+ 77D0              Interpret_Endif_5:                                      //      endif
  72+ 77D0 07 64                        dw      BRANCH
  73+ 77D2 BE FF                        dw      Interpret_Begin - $
  74+ 77D4 43 69                        dw      EXIT                            // ;
  75+ 77D6
  76+ 77D6              //  ______________________________________________________________________
  77+ 77D6              //
  78+ 77D6              // vocabulary   -- cccc     ( compile time )
  79+ 77D6              // Defining word used in the form   VOCABULARY cccc
  80+ 77D6              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 77D6              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 77D6              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 77D6              // so new definitions can be inserted in that vocabulary.
  84+ 77D6                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 77D6             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 77D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 77D6             >
  84+ 77D6             >                // dummy db directives used to calculate length of namec
  84+ 77D6 56 4F 43 41 >                db      "VOCABULARY"
  84+ 77DA 42 55 4C 41 >
  84+ 77DE 52 59       >
  84+ 77E0             >len_NFA         defl    $ - temp_NFA
  84+ 77E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 77D6             >
  84+ 77D6 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 77D7 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 77DB 42 55 4C 41 >
  84+ 77DF 52 59       >
  84+ 77E1             >                org     $-1                 // alter last byte of Name just above to set
  84+ 77E0 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 77E1             >
  84+ 77E1 81 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 77E3             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 77E3 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 77E6             >
  84+ 77E6             >
  84+ 77E6             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 77E6             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 77E6             >
  84+ 77E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 77E6
  86+ 77E6 B1 71                        dw      CBUILDS
  87+ 77E8
  88+ 77E8 A5 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 77EC 7D 6E
  89+ 77EE B0 6D 07 6B                  dw      CURRENT, FETCH          // current @
  90+ 77F2 08 6A 7D 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 77F6 5F 6E                        dw      HERE                    // here
  92+ 77F8 31 6D 07 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 77FC 7D 6E
  93+ 77FE 31 6D 12 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 7802
  95+ 7802 C2 71                        dw      DOES_TO                 // does>
  96+ 7804              Vocabulary_Does:
  97+ 7804 FD 69                        dw      CELL_PLUS               // cell+
  98+ 7806 A2 6D 12 6B                  dw      CONTEXT, STORE          // context !
  99+ 780A 43 69                        dw      EXIT                    // ;
 100+ 780C
 101+ 780C              //  ______________________________________________________________________
 102+ 780C              //
 103+ 780C              // forth        --
 104+ 780C              // Name of the first vocabulary.
 105+ 780C              // It makes FORTH the CONTEXT vocabulary.
 106+ 780C              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 780C              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 780C              // of a colon definition to be able to select the vocabulary.
 109+ 780C
 110+ 780C                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 780C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 780C             >
 110+ 780C             >                // dummy db directives used to calculate length of namec
 110+ 780C 46 4F 52 54 >                db      "FORTH"
 110+ 7810 48          >
 110+ 7811             >len_NFA         defl    $ - temp_NFA
 110+ 7811             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 780C             >
 110+ 780C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 780D 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 7811 48          >
 110+ 7812             >                org     $-1                 // alter last byte of Name just above to set
 110+ 7811 C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 7812             >
 110+ 7812 D6 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 7814             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 7814 CD CF 71    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 7817             >
 110+ 7817             >
 110+ 7817             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 7817             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 7817             >
 110+ 7817             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 7817 04 78                        dw      Vocabulary_Does
 112+ 7819 81 A0                        db      $81, $A0
 113+ 781B              Forth_Latest_Ptr:
 114+ 781B 8E 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 781D              Voclink_Ptr:
 116+ 781D 00 00                        dw      0
 117+ 781F              // Any new vocabulary is structured as follow:
 118+ 781F              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 781F              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 781F              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 781F              //       at creations it points to the null-word of its parent vocabulary
 122+ 781F              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 781F              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 781F              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 781F              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 781F              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 781F              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 781F
 129+ 781F              //  ______________________________________________________________________
 130+ 781F              //
 131+ 781F              // definitions  --
 132+ 781F              // Used in the form  cccc DEFINITIONS
 133+ 781F              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 781F              // vocabulary cccc.
 135+ 781F                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 781F             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 781F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 781F             >
 135+ 781F             >                // dummy db directives used to calculate length of namec
 135+ 781F 44 45 46 49 >                db      "DEFINITIONS"
 135+ 7823 4E 49 54 49 >
 135+ 7827 4F 4E 53    >
 135+ 782A             >len_NFA         defl    $ - temp_NFA
 135+ 782A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 781F             >
 135+ 781F 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7820 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 7824 4E 49 54 49 >
 135+ 7828 4F 4E 53    >
 135+ 782B             >                org     $-1                 // alter last byte of Name just above to set
 135+ 782A D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 782B             >
 135+ 782B 0C 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 782D             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 782D CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7830             >
 135+ 7830             >
 135+ 7830             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7830             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7830             >
 135+ 7830             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7830 A2 6D 07 6B                  dw      CONTEXT, FETCH          // context @
 137+ 7834 B0 6D 12 6B                  dw      CURRENT, STORE          // current !
 138+ 7838 43 69                        dw      EXIT                    // ;
 139+ 783A
 140+ 783A              //  ______________________________________________________________________
 141+ 783A              //
 142+ 783A              // (            -- cccc )
 143+ 783A              // the following text is interpreted as a comment until a closing )
 144+ 783A                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 783A             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 783A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 783A             >
 144+ 783A             >                // dummy db directives used to calculate length of namec
 144+ 783A 28          >                db      "("
 144+ 783B             >len_NFA         defl    $ - temp_NFA
 144+ 783B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 783A             >
 144+ 783A C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 783B 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 783C             >                org     $-1                 // alter last byte of Name just above to set
 144+ 783B A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 783C             >
 144+ 783C 1F 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 783E             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 783E CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7841             >
 144+ 7841             >
 144+ 7841             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7841             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7841             >
 144+ 7841             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7841 A5 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 7845 D3 73 59 6A                  dw      WORD, DROP              // word drop
 147+ 7849 43 69                        dw      EXIT                    // ;
 148+ 784B
 149+ 784B              //  ______________________________________________________________________
 150+ 784B              //
 151+ 784B              // quit         --
 152+ 784B              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 784B                              Colon_Def QUIT, "QUIT", is_normal
 153+ 784B             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 784B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 784B             >
 153+ 784B             >                // dummy db directives used to calculate length of namec
 153+ 784B 51 55 49 54 >                db      "QUIT"
 153+ 784F             >len_NFA         defl    $ - temp_NFA
 153+ 784F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 784B             >
 153+ 784B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 784C 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7850             >                org     $-1                 // alter last byte of Name just above to set
 153+ 784F D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7850             >
 153+ 7850 3A 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7852             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7852 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 7855             >
 153+ 7855             >
 153+ 7855             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 7855             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 7855             >
 153+ 7855             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 7855
 155+ 7855 32 6E 07 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7859 8A 67 59 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 785D 55 6C 32 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 7861 12 6B
 158+ 7863 55 6C 69 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 7867 12 6B
 159+ 7869 F8 70                        dw      SQUARED_OPEN            // [compile] [
 160+ 786B                                                              // begin
 161+ 786B              Quit_Begin:
 162+ 786B E9 6C 07 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 786F 36 69
 163+ 7871 FC 65                        dw      CR                      //      cr
 164+ 7873 50 73                        dw      QUERY                   //      query
 165+ 7875              Next_Breakpoint_1:
 166+ 7875 8D 77                        dw      INTERPRET               //      interpret
 167+ 7877 BC 6D 07 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 787B 80 69
 168+ 787D                                                              //      if
 169+ 787D 1C 64                        dw      ZBRANCH
 170+ 787F 07 00                        dw      Quit_Endif - $
 171+ 7881 23 74                        dw          C_DOT_QUOTE
 172+ 7883 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 7886              Quit_Endif:                                     //      else
 174+ 7886                                                              // again
 175+ 7886 07 64                        dw      BRANCH
 176+ 7888 E3 FF                        dw      Quit_Begin - $
 177+ 788A 43 69                        dw      EXIT                    // ;
 178+ 788C
 179+ 788C              //  ______________________________________________________________________
 180+ 788C              //
 181+ 788C              // abort        --
 182+ 788C                              Colon_Def ABORT, "ABORT", is_normal
 182+ 788C             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 788C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 788C             >
 182+ 788C             >                // dummy db directives used to calculate length of namec
 182+ 788C 41 42 4F 52 >                db      "ABORT"
 182+ 7890 54          >
 182+ 7891             >len_NFA         defl    $ - temp_NFA
 182+ 7891             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 788C             >
 182+ 788C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 788D 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 7891 54          >
 182+ 7892             >                org     $-1                 // alter last byte of Name just above to set
 182+ 7891 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 7892             >
 182+ 7892 4B 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 7894             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 7894 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 7897             >
 182+ 7897             >
 182+ 7897             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 7897             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 7897             >
 182+ 7897             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 7897 E0 6C 07 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 789B 20 69
 184+ 789D 60 71                        dw      DECIMAL                 // decimal
 185+ 789F 14 78                        dw      FORTH                   // [compile] forth
 186+ 78A1 2D 78                        dw      DEFINITIONS             // definitions
 187+ 78A3              Autoexec_Ptr:
 188+ 78A3 9B 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78A5 52 78                        dw      QUIT                    // quit
 190+ 78A7 43 69                        dw      EXIT                    // ;
 191+ 78A9
 192+ 78A9              //  ______________________________________________________________________
 193+ 78A9              //
 194+ 78A9              // warm         --
 195+ 78A9                              Colon_Def WARM, "WARM", is_normal
 195+ 78A9             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78A9             >
 195+ 78A9             >                // dummy db directives used to calculate length of namec
 195+ 78A9 57 41 52 4D >                db      "WARM"
 195+ 78AD             >len_NFA         defl    $ - temp_NFA
 195+ 78AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78A9             >
 195+ 78A9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78AA 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78AE             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78AD CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78AE             >
 195+ 78AE 8C 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78B0             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78B0 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78B3             >
 195+ 78B3             >
 195+ 78B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78B3             >
 195+ 78B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78B3 40 7C                        dw      BLK_INIT                // blk-init
 197+ 78B5 49 84                        dw      SPLASH                  // splash
 198+ 78B7 A5 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78BB 4D 6F
 199+ 78BD 94 78                        dw      ABORT                   // abort
 200+ 78BF 43 69                        dw      EXIT                    // exit
 201+ 78C1
 202+ 78C1              //  ______________________________________________________________________
 203+ 78C1              //
 204+ 78C1              // cold         --
 205+ 78C1                              Colon_Def COLD, "COLD", is_normal
 205+ 78C1             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78C1             >
 205+ 78C1             >                // dummy db directives used to calculate length of namec
 205+ 78C1 43 4F 4C 44 >                db      "COLD"
 205+ 78C5             >len_NFA         defl    $ - temp_NFA
 205+ 78C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78C1             >
 205+ 78C1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78C2 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78C6             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78C5 C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78C6             >
 205+ 78C6 A9 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78C8             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78C8 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78CB             >
 205+ 78CB             >
 205+ 78CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78CB             >
 205+ 78CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78CB A5 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78CF A5 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78D3 07 6B                        dw      FETCH                   // @
 209+ 78D5 A5 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78D9 BE 69
 210+ 78DB A5 63 14 00                  dw      LIT, 20                 // 20
 211+ 78DF 4C 68                        dw      CMOVE
 212+ 78E1 A5 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 78E5 07 6B                        dw      FETCH                   // @
 214+ 78E7 A5 63 1B 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 78EB 12 6B                        dw      STORE                   // !
 216+ 78ED 55 6C 5F 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 78F1 12 6B
 217+ 78F3 3D 6D 07 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 78F7 86 6A
 218+ 78F9 02 6E 12 6B                  dw      USE, STORE              // use !
 219+ 78FD 0D 6E 12 6B                  dw      PREV, STORE             // prev !
 220+ 7901 A5 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 7905 22 6E 12 6B
 221+ 7909              //              dw      LIT, 8
 222+ 7909              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 7909 67 6C 54 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 790D 12 6B
 224+ 790F B0 78        Warm_Start:     dw      WARM
 225+ 7911 C8 78        Cold_Start:     dw      COLD
 226+ 7913 43 69                        dw      EXIT
 227+ 7915
 228+ 7915              //  ______________________________________________________________________
 229+ 7915              WarmRoutine:
 230+ 7915              ColdRoutine:
 231+ 7915 DD 21 98 63                  ld      ix, Next_Ptr
 232+ 7919 D9                           exx
 233+ 791A E5                           push    hl
 234+ 791B D9                           exx
 235+ 791C
 236+ 791C ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 7920 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 7924              //              nop
 239+ 7924 2A 7A 63                     ld      hl, (R0_origin)
 240+ 7927              //              nop
 241+ 7927                              ldrphl
 241+ 7927 22 96 63    >                ld      (RP_Pointer),hl
 242+ 792A 01 0F 79                     ld      bc, Warm_Start
 243+ 792D 38 02                        jr      c, Warm_Skip
 244+ 792F 03                           inc     bc
 245+ 7930 03                           inc     bc
 246+ 7931              Warm_Skip:
 247+ 7931                              next
 247+ 7931 DD E9       >                jp      (ix)
 248+ 7933
 249+ 7933              //  ______________________________________________________________________
 250+ 7933              //
 251+ 7933              // basic        --
 252+ 7933                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7933             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7933             >
 252+ 7933             >                // dummy db directives used to calculate length of namec
 252+ 7933 42 41 53 49 >                db      "BASIC"
 252+ 7937 43          >
 252+ 7938             >len_NFA         defl    $ - temp_NFA
 252+ 7938             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7933             >
 252+ 7933 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7934 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 7938 43          >
 252+ 7939             >                org     $-1                 // alter last byte of Name just above to set
 252+ 7938 C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 7939             >
 252+ 7939 C1 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 793B             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 793B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 252+ 793B ~           >
 252+ 793B ~           >
 252+ 793B             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 793B             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 793B             >
 252+ 793B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 793B C1                           pop     bc
 254+ 793C 21 00 00                     ld      hl, 0
 255+ 793F 39                           add     hl, sp
 256+ 7940 ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 7944              //              nop
 258+ 7944 22 6E 63                     ld      (SP_Basic),hl
 259+ 7947 D9                           exx
 260+ 7948 E1                           pop     hl
 261+ 7949 D9                           exx
 262+ 794A C9                           ret     // to Basic
 263+ 794B
 264+ 794B              //  ______________________________________________________________________
 265+ 794B              //
 266+ 794B              // +-           n1 n2 -- n3
 267+ 794B              // leaves n1 with the sign of n2 as n3.
 268+ 794B                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 794B             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 794B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 794B             >
 268+ 794B             >                // dummy db directives used to calculate length of namec
 268+ 794B 2B 2D       >                db      "+-"
 268+ 794D             >len_NFA         defl    $ - temp_NFA
 268+ 794D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 794B             >
 268+ 794B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 794C 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 794E             >                org     $-1                 // alter last byte of Name just above to set
 268+ 794D AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 794E             >
 268+ 794E 33 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 7950             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 7950 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7953             >
 268+ 7953             >
 268+ 7953             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7953             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7953             >
 268+ 7953             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7953 9A 69                        dw      ZLESS                   // 0<
 270+ 7955                                                              // if
 271+ 7955 1C 64                        dw      ZBRANCH
 272+ 7957 04 00                        dw      Plus_Minus_Endif - $
 273+ 7959 1F 6A                        dw          MINUS               //      minus
 274+ 795B              Plus_Minus_Endif:                               // endif
 275+ 795B 43 69                        dw      EXIT                    // ;
 276+ 795D
 277+ 795D              //  ______________________________________________________________________
 278+ 795D              //
 279+ 795D              // d+-          d1 n -- d2
 280+ 795D              // leaves d1 with the sign of n as d2.
 281+ 795D                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 795D             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 795D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 795D             >
 281+ 795D             >                // dummy db directives used to calculate length of namec
 281+ 795D 44 2B 2D    >                db      "D+-"
 281+ 7960             >len_NFA         defl    $ - temp_NFA
 281+ 7960             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 795D             >
 281+ 795D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 795E 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 7961             >                org     $-1                 // alter last byte of Name just above to set
 281+ 7960 AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 7961             >
 281+ 7961 4B 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7963             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7963 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 7966             >
 281+ 7966             >
 281+ 7966             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 7966             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 7966             >
 281+ 7966             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 7966 9A 69                        dw      ZLESS                   // 0<
 283+ 7968                                                              // if
 284+ 7968 1C 64                        dw      ZBRANCH
 285+ 796A 04 00                        dw      DPlus_Minus_Endif - $
 286+ 796C 33 6A                        dw          DMINUS              //      dminus
 287+ 796E              DPlus_Minus_Endif:                              // endif
 288+ 796E 43 69                        dw      EXIT                    // ;
 289+ 7970
 290+ 7970              //  ______________________________________________________________________
 291+ 7970              //
 292+ 7970              // abs          n1 -- n2
 293+ 7970                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 7970             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 7970             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 7970             >
 293+ 7970             >                // dummy db directives used to calculate length of namec
 293+ 7970 41 42 53    >                db      "ABS"
 293+ 7973             >len_NFA         defl    $ - temp_NFA
 293+ 7973             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 7970             >
 293+ 7970 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 7971 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 7974             >                org     $-1                 // alter last byte of Name just above to set
 293+ 7973 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 7974             >
 293+ 7974 5D 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 7976             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 7976 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 7979             >
 293+ 7979             >
 293+ 7979             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 7979             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 7979             >
 293+ 7979             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 7979 86 6A                        dw      DUP                     // dup
 295+ 797B 50 79                        dw      PLUS_MINUS              // +-
 296+ 797D 43 69                        dw      EXIT                    // ;
 297+ 797F
 298+ 797F              //  ______________________________________________________________________
 299+ 797F              //
 300+ 797F              // dabs         d1 -- d2
 301+ 797F                              Colon_Def DABS, "DABS", is_normal
 301+ 797F             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 797F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 797F             >
 301+ 797F             >                // dummy db directives used to calculate length of namec
 301+ 797F 44 41 42 53 >                db      "DABS"
 301+ 7983             >len_NFA         defl    $ - temp_NFA
 301+ 7983             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 797F             >
 301+ 797F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 7980 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 7984             >                org     $-1                 // alter last byte of Name just above to set
 301+ 7983 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 7984             >
 301+ 7984 70 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 7986             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 7986 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 7989             >
 301+ 7989             >
 301+ 7989             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 7989             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 7989             >
 301+ 7989             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 7989 86 6A                        dw      DUP                     // dup
 303+ 798B 63 79                        dw      DPLUS_MINUS             // d+-
 304+ 798D 43 69                        dw      EXIT                    // ;
 305+ 798F
 306+ 798F              //  ______________________________________________________________________
 307+ 798F              //
 308+ 798F              // m*           n1 n2 -- d
 309+ 798F              // multiply two integer giving a double
 310+ 798F                              Colon_Def MMUL, "M*", is_normal
 310+ 798F             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 798F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 798F             >
 310+ 798F             >                // dummy db directives used to calculate length of namec
 310+ 798F 4D 2A       >                db      "M*"
 310+ 7991             >len_NFA         defl    $ - temp_NFA
 310+ 7991             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 798F             >
 310+ 798F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 7990 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 7992             >                org     $-1                 // alter last byte of Name just above to set
 310+ 7991 AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 7992             >
 310+ 7992 7F 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 7994             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 7994 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 7997             >
 310+ 7997             >
 310+ 7997             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 7997             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 7997             >
 310+ 7997             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 7997 DB 6A 02 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 799B 54 69
 312+ 799D 76 79 7B 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 79A1 76 79 7B 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79A5 66 69 63 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79A9 43 69                        dw      EXIT                    // ;
 316+ 79AB
 317+ 79AB              //  ______________________________________________________________________
 318+ 79AB              //
 319+ 79AB              // sm/rem       d n -- q r
 320+ 79AB              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 79AB              // the remainder has the sign of d.
 322+ 79AB                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 79AB             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 79AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 79AB             >
 322+ 79AB             >                // dummy db directives used to calculate length of namec
 322+ 79AB 53 4D 2F 52 >                db      "SM/REM"
 322+ 79AF 45 4D       >
 322+ 79B1             >len_NFA         defl    $ - temp_NFA
 322+ 79B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 79AB             >
 322+ 79AB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 79AC 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 79B0 45 4D       >
 322+ 79B2             >                org     $-1                 // alter last byte of Name just above to set
 322+ 79B1 CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 79B2             >
 322+ 79B2 8F 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 79B4             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 79B4 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 79B7             >
 322+ 79B7             >
 322+ 79B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 79B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 79B7             >
 322+ 79B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 79B7 4B 6A 54 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 79BB 54 69
 324+ 79BD 86 79 78 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 79C1 76 79
 325+ 79C3 AA 68                        dw      UMDIVMOD                // um/mod
 326+ 79C5 66 69                        dw      R_TO                    // r>
 327+ 79C7 78 69 02 69                  dw      R_OP, XOR_OP            // r xor
 328+ 79CB 50 79 7B 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 79CF 66 69                        dw      R_TO                    // r>
 330+ 79D1 50 79 7B 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 79D5 43 69                        dw      EXIT                    // ;
 332+ 79D7
 333+ 79D7              //  ______________________________________________________________________
 334+ 79D7              //
 335+ 79D7              // fm/mod       d n -- q r
 336+ 79D7              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 79D7              // the remainder has the sign of d.
 338+ 79D7                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 79D7             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 79D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 79D7             >
 338+ 79D7             >                // dummy db directives used to calculate length of namec
 338+ 79D7 46 4D 2F 4D >                db      "FM/MOD"
 338+ 79DB 4F 44       >
 338+ 79DD             >len_NFA         defl    $ - temp_NFA
 338+ 79DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 79D7             >
 338+ 79D7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 79D8 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 79DC 4F 44       >
 338+ 79DE             >                org     $-1                 // alter last byte of Name just above to set
 338+ 79DD C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 79DE             >
 338+ 79DE AB 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 79E0             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 79E0 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 79E3             >
 338+ 79E3             >
 338+ 79E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 79E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 79E3             >
 338+ 79E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 79E3 86 6A 54 69                  dw      DUP, TO_R               // dup >r
 340+ 79E7 B4 79                        dw      SMDIVM
 341+ 79E9 4B 6A 86 6A                  dw      OVER, DUP
 342+ 79ED 80 69 80 69                  dw      ZEQUAL, ZEQUAL
 343+ 79F1 7B 6A 9A 69                  dw      SWAP, ZLESS
 344+ 79F5 78 69 9A 69                  dw      R_OP, ZLESS
 345+ 79F9 02 69 E1 68                  dw      XOR_OP, AND_OP
 346+ 79FD 1C 64                        dw      ZBRANCH
 347+ 79FF 10 00                        dw      Fm_Mod_Else - $
 348+ 7A01 E5 69                        dw          ONE_SUBTRACT
 349+ 7A03 7B 6A 66 69                  dw          SWAP, R_TO
 350+ 7A07 BE 69 7B 6A                  dw          PLUS, SWAP
 351+ 7A0B 07 64                        dw      BRANCH
 352+ 7A0D 06 00                        dw      Fm_Mod_Endif - $
 353+ 7A0F              Fm_Mod_Else:
 354+ 7A0F 66 69 59 6A                  dw          R_TO, DROP
 355+ 7A13              Fm_Mod_Endif:
 356+ 7A13 43 69                        dw      EXIT
 357+ 7A15              //              dw      TWO_DUP                 // 2dup
 358+ 7A15              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 7A15              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 7A15              //              dw      UMDIVMOD                // um/mod
 361+ 7A15              //              dw      SWAP                    // swap
 362+ 7A15              //              dw      II, ZLESS               // i'
 363+ 7A15              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 7A15              //              dw      R_TO                    // r>
 365+ 7A15              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 7A15              //              dw      R_OP                    // r@
 367+ 7A15              //              dw      ZLESS                   // i'
 368+ 7A15              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 7A15              //              dw      R_TO                    // r>
 370+ 7A15              //              dw      PLUS_MINUS              // +- swap
 371+ 7A15              //              dw      EXIT                    // ;
 372+ 7A15
 373+ 7A15              //  ______________________________________________________________________
 374+ 7A15              //
 375+ 7A15              // m/mod        d n -- q r
 376+ 7A15              // multiply two integer giving a double
 377+ 7A15                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 7A15             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 7A15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 7A15             >
 377+ 7A15             >                // dummy db directives used to calculate length of namec
 377+ 7A15 4D 2F 4D 4F >                db      "M/MOD"
 377+ 7A19 44          >
 377+ 7A1A             >len_NFA         defl    $ - temp_NFA
 377+ 7A1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 7A15             >
 377+ 7A15 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 7A16 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 7A1A 44          >
 377+ 7A1B             >                org     $-1                 // alter last byte of Name just above to set
 377+ 7A1A C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 7A1B             >
 377+ 7A1B D7 79       >                dw      last_NFA            // Link to previous definition Name
 377+ 7A1D             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 7A1D CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A20             >
 377+ 7A20             >
 377+ 7A20             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A20             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A20             >
 377+ 7A20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A20 B4 79                        dw      SMDIVM
 379+ 7A22 43 69                        dw      EXIT                    // ;
 380+ 7A24
 381+ 7A24              //  ______________________________________________________________________
 382+ 7A24              //
 383+ 7A24              // m/           d n -- q
 384+ 7A24              // multiply two integer giving a double
 385+ 7A24                              Colon_Def MDIV, "M/", is_normal
 385+ 7A24             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A24             >
 385+ 7A24             >                // dummy db directives used to calculate length of namec
 385+ 7A24 4D 2F       >                db      "M/"
 385+ 7A26             >len_NFA         defl    $ - temp_NFA
 385+ 7A26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A24             >
 385+ 7A24 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A25 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A27             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A26 AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A27             >
 385+ 7A27 15 7A       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A29             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A29 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A2C             >
 385+ 7A2C             >
 385+ 7A2C             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A2C             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A2C             >
 385+ 7A2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A2C 1D 7A 62 6A                  dw      MDIVM, NIP
 387+ 7A30 43 69                        dw      EXIT                    // ;
 388+ 7A32
 389+ 7A32              //  ______________________________________________________________________
 390+ 7A32              //
 391+ 7A32              // *            n1 n2 -- n3
 392+ 7A32              // multiply two integer
 393+ 7A32                              Colon_Def MUL, "*", is_normal
 393+ 7A32             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A32             >
 393+ 7A32             >                // dummy db directives used to calculate length of namec
 393+ 7A32 2A          >                db      "*"
 393+ 7A33             >len_NFA         defl    $ - temp_NFA
 393+ 7A33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A32             >
 393+ 7A32 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A33 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A34             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A33 AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A34             >
 393+ 7A34 24 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A36             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A36 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A39             >
 393+ 7A39             >
 393+ 7A39             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A39             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A39             >
 393+ 7A39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A39 94 79 59 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A3D 43 69                        dw      EXIT                    // ;
 396+ 7A3F
 397+ 7A3F              //  ______________________________________________________________________
 398+ 7A3F              //
 399+ 7A3F              // /mod         n1 n2 -- n3 n4
 400+ 7A3F              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A3F              // The remainder has the sign of n1
 402+ 7A3F                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A3F             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A3F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A3F             >
 402+ 7A3F             >                // dummy db directives used to calculate length of namec
 402+ 7A3F 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A43             >len_NFA         defl    $ - temp_NFA
 402+ 7A43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A3F             >
 402+ 7A3F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A40 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A44             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A43 C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A44             >
 402+ 7A44 32 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A46             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A46 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A49             >
 402+ 7A49             >
 402+ 7A49             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A49             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A49             >
 402+ 7A49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A49 54 69 A2 6E                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A4D 66 69
 404+ 7A4F 1D 7A                        dw      MDIVM                   // m/mod
 405+ 7A51 43 69                        dw      EXIT                    // ;
 406+ 7A53
 407+ 7A53              //  ______________________________________________________________________
 408+ 7A53              //
 409+ 7A53              // /            n1 n2 -- n3
 410+ 7A53              // division
 411+ 7A53                              Colon_Def DIV, "/", is_normal
 411+ 7A53             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A53             >
 411+ 7A53             >                // dummy db directives used to calculate length of namec
 411+ 7A53 2F          >                db      "/"
 411+ 7A54             >len_NFA         defl    $ - temp_NFA
 411+ 7A54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A53             >
 411+ 7A53 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A54 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A55             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A54 AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A55             >
 411+ 7A55 3F 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A57             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A57 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A5A             >
 411+ 7A5A             >
 411+ 7A5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A5A             >
 411+ 7A5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A5A 46 7A 62 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A5E 43 69                        dw      EXIT                    // ;
 414+ 7A60
 415+ 7A60              //  ______________________________________________________________________
 416+ 7A60              //
 417+ 7A60              // mod          n1 n2 -- n3
 418+ 7A60                              Colon_Def MOD, "MOD", is_normal
 418+ 7A60             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A60             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A60             >
 418+ 7A60             >                // dummy db directives used to calculate length of namec
 418+ 7A60 4D 4F 44    >                db      "MOD"
 418+ 7A63             >len_NFA         defl    $ - temp_NFA
 418+ 7A63             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A60             >
 418+ 7A60 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A61 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A64             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A63 C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A64             >
 418+ 7A64 53 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A66             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A66 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A69             >
 418+ 7A69             >
 418+ 7A69             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A69             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A69             >
 418+ 7A69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A69 46 7A 59 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7A6D 43 69                        dw      EXIT                    // ;
 421+ 7A6F
 422+ 7A6F              //  ______________________________________________________________________
 423+ 7A6F              //
 424+ 7A6F              // */mod        n1 n2 n3 -- n4 n5
 425+ 7A6F              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7A6F              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7A6F              // avoids loss of precision
 428+ 7A6F                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7A6F             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7A6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7A6F             >
 428+ 7A6F             >                // dummy db directives used to calculate length of namec
 428+ 7A6F 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7A73 44          >
 428+ 7A74             >len_NFA         defl    $ - temp_NFA
 428+ 7A74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7A6F             >
 428+ 7A6F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7A70 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7A74 44          >
 428+ 7A75             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7A74 C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7A75             >
 428+ 7A75 60 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7A77             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7A77 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7A7A             >
 428+ 7A7A             >
 428+ 7A7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7A7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7A7A             >
 428+ 7A7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7A7A 54 69 94 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7A7E 66 69 1D 7A                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7A82 43 69                        dw      EXIT                    // ;
 432+ 7A84
 433+ 7A84              //  ______________________________________________________________________
 434+ 7A84              //
 435+ 7A84              // */          n1 n2 n3 -- n4
 436+ 7A84              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7A84                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7A84             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7A84             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7A84             >
 437+ 7A84             >                // dummy db directives used to calculate length of namec
 437+ 7A84 2A 2F       >                db      "*/"
 437+ 7A86             >len_NFA         defl    $ - temp_NFA
 437+ 7A86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7A84             >
 437+ 7A84 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7A85 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7A87             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7A86 AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7A87             >
 437+ 7A87 6F 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7A89             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7A89 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7A8C             >
 437+ 7A8C             >
 437+ 7A8C             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7A8C             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7A8C             >
 437+ 7A8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7A8C 77 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7A8E 62 6A                        dw     NIP                      // nip
 440+ 7A90 43 69                        dw     EXIT                     // ;
 441+ 7A92
 442+ 7A92
 443+ 7A92              //  ______________________________________________________________________
 444+ 7A92              //
 445+ 7A92              // m/mod        ud1 u2 -- u3 ud4
 446+ 7A92              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7A92              // All terms are unsigned.
 448+ 7A92              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7A92              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7A92              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7A92              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7A92              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7A92              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7A92              //              dw      EXIT                    // ;
 455+ 7A92
 456+ 7A92              //  ______________________________________________________________________
 457+ 7A92              //
 458+ 7A92              // (line)       n1 n2 -- a b
 459+ 7A92              // sends the line n1 of block n2 to the disk buffer.
 460+ 7A92              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7A92                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7A92             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7A92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7A92             >
 461+ 7A92             >                // dummy db directives used to calculate length of namec
 461+ 7A92 28 4C 49 4E >                db      "(LINE)"
 461+ 7A96 45 29       >
 461+ 7A98             >len_NFA         defl    $ - temp_NFA
 461+ 7A98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7A92             >
 461+ 7A92 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7A93 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7A97 45 29       >
 461+ 7A99             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7A98 A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7A99             >
 461+ 7A99 84 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7A9B             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7A9B CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7A9E             >
 461+ 7A9E             >
 461+ 7A9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7A9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7A9E             >
 461+ 7A9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7A9E 54 69                        dw      TO_R                    // >r
 463+ 7AA0 03 6C                        dw      NOOP                    // noop
 464+ 7AA2 8F 6C                        dw      CL                      // c/l
 465+ 7AA4 9C 6C 77 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7AA8 66 69                        dw      R_TO                    // r>
 467+ 7AAA A9 6C 36 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7AAE BE 69
 468+ 7AB0 5F 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7AB2 BE 69                        dw      PLUS                    // +
 470+ 7AB4 03 6C                        dw      NOOP                    // noop
 471+ 7AB6 8F 6C                        dw      CL                      // c/l
 472+ 7AB8 43 69                        dw      EXIT                    // ;
 473+ 7ABA
 474+ 7ABA              //  ______________________________________________________________________
 475+ 7ABA              //
 476+ 7ABA              // .line        n1 n2 --
 477+ 7ABA              // Sends to output line  n1  of screen n2.
 478+ 7ABA                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7ABA             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7ABA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7ABA             >
 478+ 7ABA             >                // dummy db directives used to calculate length of namec
 478+ 7ABA 2E 4C 49 4E >                db      ".LINE"
 478+ 7ABE 45          >
 478+ 7ABF             >len_NFA         defl    $ - temp_NFA
 478+ 7ABF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7ABA             >
 478+ 7ABA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7ABB 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7ABF 45          >
 478+ 7AC0             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7ABF C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7AC0             >
 478+ 7AC0 92 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7AC2             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7AC2 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7AC5             >
 478+ 7AC5             >
 478+ 7AC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7AC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7AC5             >
 478+ 7AC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7AC5 9B 7A 6D 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7AC9 07 72
 480+ 7ACB 43 69                        dw      EXIT                    // ;
 481+ 7ACD
 482+ 7ACD              //  ______________________________________________________________________
 483+ 7ACD              //
 484+ 7ACD              // message       n1 n2 --
 485+ 7ACD              // prints error message to current channel.
 486+ 7ACD              // if WARNING is 0, prints "MSG#n".
 487+ 7ACD              // if WARNING is 1, prints line n of screen 4.
 488+ 7ACD              // if WARNING is -1, see ERROR
 489+ 7ACD              // value can be negative or beyond block 4.
 490+ 7ACD                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7ACD             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7ACD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7ACD             >
 490+ 7ACD             >                // dummy db directives used to calculate length of namec
 490+ 7ACD 4D 45 53 53 >                db      "MESSAGE"
 490+ 7AD1 41 47 45    >
 490+ 7AD4             >len_NFA         defl    $ - temp_NFA
 490+ 7AD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7ACD             >
 490+ 7ACD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7ACE 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7AD2 41 47 45    >
 490+ 7AD5             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7AD4 C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7AD5             >
 490+ 7AD5 BA 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7AD7             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7AD7 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7ADA             >
 490+ 7ADA             >
 490+ 7ADA             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7ADA             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7ADA             >
 490+ 7ADA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7ADA 0D 6D 07 6B                  dw      WARNING, FETCH          // warning @
 492+ 7ADE                                                              // if
 493+ 7ADE 1C 64                        dw      ZBRANCH
 494+ 7AE0 18 00                        dw      Message_Else - $
 495+ 7AE2 A5 63 04 00                  dw          LIT, 4              //      4
 496+ 7AE6 94 6D 07 6B                  dw          OFFSET, FETCH       //      offset @
 497+ 7AEA A9 6C 57 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7AEE B4 6E
 498+ 7AF0 C2 7A                        dw          DOT_LINE            //      .line
 499+ 7AF2 6A 6F                        dw          SPACE               //      space
 500+ 7AF4                                                              // else
 501+ 7AF4
 502+ 7AF4 07 64                        dw      BRANCH
 503+ 7AF6 0B 00                        dw      Message_ENdif - $
 504+ 7AF8              Message_Else:
 505+ 7AF8 23 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7AFA 04 6D 73 67                  db          4, "msg#"
 506+ 7AFE 23
 507+ 7AFF 3B 83                        dw          DOT                 //      .  ( forward )
 508+ 7B01              Message_ENdif:                                  // endif
 509+ 7B01 43 69                        dw      EXIT                    // ;
 510+ 7B03
 511+ 7B03
 512+ 7B03              //  ______________________________________________________________________
 513+ 7B03              //
 514+ 7B03              // device
 515+ 7B03                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7B03             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7B03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7B03             >
 515+ 7B03             >                // dummy db directives used to calculate length of namec
 515+ 7B03 44 45 56 49 >                db      "DEVICE"
 515+ 7B07 43 45       >
 515+ 7B09             >len_NFA         defl    $ - temp_NFA
 515+ 7B09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7B03             >
 515+ 7B03 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7B04 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7B08 43 45       >
 515+ 7B0A             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7B09 C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7B0A             >
 515+ 7B0A CD 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7B0C             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7B0C CD 34 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7B0F             >
 515+ 7B0F             >
 515+ 7B0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7B0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7B0F             >
 515+ 7B0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7B0F 02 00       >                dw      2
 516+ 7B11
 517+ 7B11              //  ______________________________________________________________________
 518+ 7B11
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
 113  7B11                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
   1+ 7B11              //  ______________________________________________________________________
   2+ 7B11              //
   3+ 7B11              //  next-opt.asm
   4+ 7B11              //
   5+ 7B11              //  ZX Spectrum Next - peculiar definitions
   6+ 7B11              //  ______________________________________________________________________
   7+ 7B11
   8+ 7B11              //  ______________________________________________________________________
   9+ 7B11              //
  10+ 7B11              // reg@         n -- b
  11+ 7B11              // read Next REGister n giving byte b
  12+ 7B11              //
  13+ 7B11              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 7B11              //              dw      LIT, $243B
  15+ 7B11              //              dw      PSTORE
  16+ 7B11              //              dw      LIT, $253B
  17+ 7B11              //              dw      PFETCH
  18+ 7B11              //              dw      EXIT
  19+ 7B11                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 7B11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ 7B11             >
  19+ 7B11             >                // dummy db directives used to calculate length of namec
  19+ 7B11 52 45 47 40 >                db      "REG@"
  19+ 7B15             >len_NFA         defl    $ - temp_NFA
  19+ 7B15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ 7B11             >
  19+ 7B11 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ 7B12 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ 7B16             >                org     $-1                 // alter last byte of Name just above to set
  19+ 7B15 C0          >                db      {b $} | END_BIT     // msb as name end
  19+ 7B16             >
  19+ 7B16 03 7B       >                dw      last_NFA            // Link to previous definition Name
  19+ 7B18             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 7B18 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 7B18 ~           >
  19+ 7B18 ~           >
  19+ 7B18             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 7B18             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 7B18             >
  19+ 7B18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 7B18 D9                           exx
  21+ 7B19 01 3B 24                     ld      bc, $243B
  22+ 7B1C E1                           pop     hl
  23+ 7B1D ED 69                        out     (c), l
  24+ 7B1F 04                           inc     b
  25+ 7B20 ED 68                        in      l, (c)
  26+ 7B22 E5                           push    hl
  27+ 7B23 D9                           exx
  28+ 7B24                              next
  28+ 7B24 DD E9       >                jp      (ix)
  29+ 7B26
  30+ 7B26
  31+ 7B26              //  ______________________________________________________________________
  32+ 7B26              //
  33+ 7B26              // reg!         b n --
  34+ 7B26              // write value b to Next REGister n
  35+ 7B26              //
  36+ 7B26              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 7B26              //              dw      LIT, $243B
  38+ 7B26              //              dw      PSTORE
  39+ 7B26              //              dw      LIT, $253B
  40+ 7B26              //              dw      PSTORE
  41+ 7B26              //              dw      EXIT
  42+ 7B26                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 7B26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ 7B26             >
  42+ 7B26             >                // dummy db directives used to calculate length of namec
  42+ 7B26 52 45 47 21 >                db      "REG!"
  42+ 7B2A             >len_NFA         defl    $ - temp_NFA
  42+ 7B2A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ 7B26             >
  42+ 7B26 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ 7B27 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ 7B2B             >                org     $-1                 // alter last byte of Name just above to set
  42+ 7B2A A1          >                db      {b $} | END_BIT     // msb as name end
  42+ 7B2B             >
  42+ 7B2B 11 7B       >                dw      last_NFA            // Link to previous definition Name
  42+ 7B2D             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 7B2D ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 7B2D ~           >
  42+ 7B2D ~           >
  42+ 7B2D             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 7B2D             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 7B2D             >
  42+ 7B2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 7B2D D9                           exx
  44+ 7B2E 01 3B 24                     ld      bc, $243B
  45+ 7B31 E1                           pop     hl
  46+ 7B32 ED 69                        out     (c), l
  47+ 7B34 04                           inc     b
  48+ 7B35 E1                           pop     hl
  49+ 7B36 ED 69                        out     (c), l
  50+ 7B38 D9                           exx
  51+ 7B39                              next
  51+ 7B39 DD E9       >                jp      (ix)
  52+ 7B3B
  53+ 7B3B
  54+ 7B3B              //  ______________________________________________________________________
  55+ 7B3B              //
  56+ 7B3B              // mmu7@        -- n
  57+ 7B3B              // query current page in MMU7 8K-RAM : 0 and 223
  58+ 7B3B
  59+ 7B3B                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  59+ 7B3B             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  59+ 7B3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59+ 7B3B             >
  59+ 7B3B             >                // dummy db directives used to calculate length of namec
  59+ 7B3B 4D 4D 55 37 >                db      "MMU7@"
  59+ 7B3F 40          >
  59+ 7B40             >len_NFA         defl    $ - temp_NFA
  59+ 7B40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59+ 7B3B             >
  59+ 7B3B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59+ 7B3C 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  59+ 7B40 40          >
  59+ 7B41             >                org     $-1                 // alter last byte of Name just above to set
  59+ 7B40 C0          >                db      {b $} | END_BIT     // msb as name end
  59+ 7B41             >
  59+ 7B41 26 7B       >                dw      last_NFA            // Link to previous definition Name
  59+ 7B43             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  59+ 7B43 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  59+ 7B46             >
  59+ 7B46             >
  59+ 7B46             >                endif           ; ok        // for other definitions it "points" the correct handler
  59+ 7B46             >                // Use of "; ok" to suppress "warning[fwdref]"
  59+ 7B46             >
  59+ 7B46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60+ 7B46 A5 63 57 00                  dw      LIT, 87, REG_FETCH
  60+ 7B4A 18 7B
  61+ 7B4C 43 69                        dw      EXIT
  62+ 7B4E
  63+ 7B4E              //  ______________________________________________________________________
  64+ 7B4E              //
  65+ 7B4E              // mmu7!        n --
  66+ 7B4E              // set MMU7 8K-RAM page to n given between 0 and 223
  67+ 7B4E              // optimized version that uses NEXTREG n,A Z80n op-code.
  68+ 7B4E
  69+ 7B4E                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  69+ 7B4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ 7B4E             >
  69+ 7B4E             >                // dummy db directives used to calculate length of namec
  69+ 7B4E 4D 4D 55 37 >                db      "MMU7!"
  69+ 7B52 21          >
  69+ 7B53             >len_NFA         defl    $ - temp_NFA
  69+ 7B53             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ 7B4E             >
  69+ 7B4E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ 7B4F 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  69+ 7B53 21          >
  69+ 7B54             >                org     $-1                 // alter last byte of Name just above to set
  69+ 7B53 A1          >                db      {b $} | END_BIT     // msb as name end
  69+ 7B54             >
  69+ 7B54 3B 7B       >                dw      last_NFA            // Link to previous definition Name
  69+ 7B56             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 7B56 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 7B56 ~           >
  69+ 7B56 ~           >
  69+ 7B56             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 7B56             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 7B56             >
  69+ 7B56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 7B56 E1                           pop     hl
  71+ 7B57 7D                           ld      a, l
  72+ 7B58 ED 92 57                     nextreg 87, a
  73+ 7B5B
  74+ 7B5B                              next
  74+ 7B5B DD E9       >                jp      (ix)
  75+ 7B5D
  76+ 7B5D              //  ______________________________________________________________________
  77+ 7B5D              //
  78+ 7B5D              // >far         ha -- a n
  79+ 7B5D              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  80+ 7B5D              // take lower bits of H and L as an offset from E000h
  81+ 7B5D              // then return address  a  between E000h-FFFFh
  82+ 7B5D              // and page number n  between 64-71 (40h-47h)
  83+ 7B5D              // For example, in hex:
  84+ 7B5D              //   0000 >FAR  gives  40.E000
  85+ 7B5D              //   1FFF >FAR  gives  40.FFFF
  86+ 7B5D              //   2000 >FAR  gives  41.E000
  87+ 7B5D              //   3FFF >FAR  gives  41.FFFF
  88+ 7B5D              //   EFFF >FAR  gives  47.EFFF
  89+ 7B5D              //   FFFF >FAR  gives  47.FFFF
  90+ 7B5D              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  91+ 7B5D              //                pop     de
  92+ 7B5D              //                ld      a, d
  93+ 7B5D              //                and     $E0
  94+ 7B5D              //                rlca
  95+ 7B5D              //                rlca
  96+ 7B5D              //                rlca
  97+ 7B5D              //                add     $40
  98+ 7B5D              //                ld      l, a
  99+ 7B5D              //                ld      h, 0
 100+ 7B5D              //                ld      a, d
 101+ 7B5D              //                or      $E0
 102+ 7B5D              //                ld      d, a
 103+ 7B5D              //                push    hl
 104+ 7B5D              //                push    de
 105+ 7B5D              //                next
 106+ 7B5D
 107+ 7B5D              //  ______________________________________________________________________
 108+ 7B5D              //
 109+ 7B5D              // <far         a n  -- ha
 110+ 7B5D              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 111+ 7B5D              // reverse of >FAR: encodes a FAR address compressing
 112+ 7B5D              // to bits 765 of H, lower bits of HL address offset from E000h
 113+ 7B5D              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 114+ 7B5D              //                pop     de                  // page number in e
 115+ 7B5D              //                pop     hl                  // address in hl
 116+ 7B5D              //                ld      a, e
 117+ 7B5D              //                sub     $40                 // reduced to 0-7
 118+ 7B5D              //                rrca
 119+ 7B5D              //                rrca
 120+ 7B5D              //                rrca
 121+ 7B5D              //                ld      d, a                // save to d bits 765
 122+ 7B5D              //                ld      a, h                // drops
 123+ 7B5D              //                and     $1F
 124+ 7B5D              //                or      d
 125+ 7B5D              //                ld      h, a
 126+ 7B5D              //
 127+ 7B5D              //                psh1
 128+ 7B5D
 129+ 7B5D              //  ______________________________________________________________________
 130+ 7B5D              //
 131+ 7B5D              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 132+ 7B5D              // NextZXOS call wrapper.
 133+ 7B5D              //  n1 = hl register parameter value
 134+ 7B5D              //  n2 = de register parameter value
 135+ 7B5D              //  n3 = bc register parameter value
 136+ 7B5D              //  n4 =  a register parameter value
 137+ 7B5D              //   a = routine address in ROM 3
 138+ 7B5D              // ----
 139+ 7B5D              //  n5 = hl returned value
 140+ 7B5D              //  n6 = de returned value
 141+ 7B5D              //  n7 = bc returned value
 142+ 7B5D              //  n8 =  a returned value
 143+ 7B5D              //   f
 144+ 7B5D                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 144+ 7B5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7B5D             >
 144+ 7B5D             >                // dummy db directives used to calculate length of namec
 144+ 7B5D 4D 5F 50 33 >                db      "M_P3DOS"
 144+ 7B61 44 4F 53    >
 144+ 7B64             >len_NFA         defl    $ - temp_NFA
 144+ 7B64             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7B5D             >
 144+ 7B5D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7B5E 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 144+ 7B62 44 4F 53    >
 144+ 7B65             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7B64 D3          >                db      {b $} | END_BIT     // msb as name end
 144+ 7B65             >
 144+ 7B65 4E 7B       >                dw      last_NFA            // Link to previous definition Name
 144+ 7B67             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7B67 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 144+ 7B67 ~           >
 144+ 7B67 ~           >
 144+ 7B67             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7B67             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7B67             >
 144+ 7B67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7B67 D1                           pop     de                  // dos call entry address in de
 146+ 7B68 E1                           pop     hl                  // a register
 147+ 7B69 7D                           ld      a, l
 148+ 7B6A D9                           exx
 149+ 7B6B C1                           pop     bc
 150+ 7B6C D1                           pop     de
 151+ 7B6D E1                           pop     hl
 152+ 7B6E D9                           exx
 153+ 7B6F
 154+ 7B6F C5                           push    bc
 155+ 7B70 DD E5                        push    ix
 156+ 7B72
 157+ 7B72              //              ld      (SP_Saved), sp
 158+ 7B72              //              ld      sp, Cold_origin - 5
 159+ 7B72 0E 07                        ld      c, 7                // use 7 RAM Bank
 160+ 7B74
 161+ 7B74 CF                           rst     08
 162+ 7B75 94                           db      $94
 163+ 7B76
 164+ 7B76              //              ld      sp, (SP_Saved)
 165+ 7B76              //              push    ix
 166+ 7B76              //              pop     hl
 167+ 7B76              //              ld      (IX_Echo), hl
 168+ 7B76 DD 22 90 63                  ld      (IX_Echo), ix
 169+ 7B7A              //              nop
 170+ 7B7A DD E1                        pop     ix
 171+ 7B7C E3                           ex      (sp), hl            // hl argument and retrieve bc
 172+ 7B7D D5                           push    de
 173+ 7B7E C5                           push    bc
 174+ 7B7F 4D                           ld      c, l
 175+ 7B80 44                           ld      b, h
 176+ 7B81
 177+ 7B81 26 00                        ld      h, 0
 178+ 7B83 6F                           ld      l, a
 179+ 7B84 E5                           push    hl
 180+ 7B85 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 181+ 7B87 23                           inc     hl                  //  0 for OK ; 1 for ko
 182+ 7B88
 183+ 7B88                              psh1
 183+ 7B88 E5          >                push    hl
 183+ 7B89 DD E9       >                jp      (ix)
 184+ 7B8B
 185+ 7B8B              //  ______________________________________________________________________
 186+ 7B8B              //
 187+ 7B8B              // blk-fh
 188+ 7B8B                              Variable_Def BLK_FH,   "BLK-FH",   1
 188+ 7B8B             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 188+ 7B8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 7B8B             >
 188+ 7B8B             >                // dummy db directives used to calculate length of namec
 188+ 7B8B 42 4C 4B 2D >                db      "BLK-FH"
 188+ 7B8F 46 48       >
 188+ 7B91             >len_NFA         defl    $ - temp_NFA
 188+ 7B91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 7B8B             >
 188+ 7B8B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 7B8C 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 188+ 7B90 46 48       >
 188+ 7B92             >                org     $-1                 // alter last byte of Name just above to set
 188+ 7B91 C8          >                db      {b $} | END_BIT     // msb as name end
 188+ 7B92             >
 188+ 7B92 5D 7B       >                dw      last_NFA            // Link to previous definition Name
 188+ 7B94             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 7B94 CD 34 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 188+ 7B97             >
 188+ 7B97             >
 188+ 7B97             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 7B97             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 7B97             >
 188+ 7B97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 7B97 01 00       >                dw      1
 189+ 7B99
 190+ 7B99                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 190+ 7B99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 7B99             >
 190+ 7B99             >                // dummy db directives used to calculate length of namec
 190+ 7B99 42 4C 4B 2D >                db      "BLK-FNAME"
 190+ 7B9D 46 4E 41 4D >
 190+ 7BA1 45          >
 190+ 7BA2             >len_NFA         defl    $ - temp_NFA
 190+ 7BA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 7B99             >
 190+ 7B99 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 7B9A 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 190+ 7B9E 46 4E 41 4D >
 190+ 7BA2 45          >
 190+ 7BA3             >                org     $-1                 // alter last byte of Name just above to set
 190+ 7BA2 C5          >                db      {b $} | END_BIT     // msb as name end
 190+ 7BA3             >
 190+ 7BA3 8B 7B       >                dw      last_NFA            // Link to previous definition Name
 190+ 7BA5             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 7BA5 CD 9C 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 190+ 7BA8             >
 190+ 7BA8             >
 190+ 7BA8             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 7BA8             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 7BA8             >
 190+ 7BA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 7BA8 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 191+ 7BAC 6F 63 6B 73
 191+ 7BB0 2D 36 34 2E
 191+ 7BB4 62 69 6E 00
 192+ 7BB8 00 00 00...                  ds      24
 193+ 7BD0
 194+ 7BD0              //  ______________________________________________________________________
 195+ 7BD0              //
 196+ 7BD0              // blk-seek     n --
 197+ 7BD0              // seek block n  within blocks!.bin  file
 198+ 7BD0                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 198+ 7BD0             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 198+ 7BD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 7BD0             >
 198+ 7BD0             >                // dummy db directives used to calculate length of namec
 198+ 7BD0 42 4C 4B 2D >                db      "BLK-SEEK"
 198+ 7BD4 53 45 45 4B >
 198+ 7BD8             >len_NFA         defl    $ - temp_NFA
 198+ 7BD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 7BD0             >
 198+ 7BD0 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 7BD1 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 198+ 7BD5 53 45 45 4B >
 198+ 7BD9             >                org     $-1                 // alter last byte of Name just above to set
 198+ 7BD8 CB          >                db      {b $} | END_BIT     // msb as name end
 198+ 7BD9             >
 198+ 7BD9 99 7B       >                dw      last_NFA            // Link to previous definition Name
 198+ 7BDB             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 7BDB CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 198+ 7BDE             >
 198+ 7BDE             >
 198+ 7BDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 7BDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 7BDE             >
 198+ 7BDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 7BDE 9C 6C 94 79                  dw  BBUF, MMUL
 200+ 7BE2 94 7B 07 6B                  dw  BLK_FH, FETCH
 201+ 7BE6 69 67                        dw  F_SEEK
 202+ 7BE8 A5 63 2D 00                  dw  LIT, $2D, QERROR
 202+ 7BEC 34 70
 203+ 7BEE 43 69                        dw  EXIT
 204+ 7BF0
 205+ 7BF0              //  ______________________________________________________________________
 206+ 7BF0              //
 207+ 7BF0              // blk-read     n --
 208+ 7BF0              // seek block n  within blocks!.bin  file
 209+ 7BF0                              Colon_Def BLK_READ, "BLK-READ", is_normal
 209+ 7BF0             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 209+ 7BF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 209+ 7BF0             >
 209+ 7BF0             >                // dummy db directives used to calculate length of namec
 209+ 7BF0 42 4C 4B 2D >                db      "BLK-READ"
 209+ 7BF4 52 45 41 44 >
 209+ 7BF8             >len_NFA         defl    $ - temp_NFA
 209+ 7BF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 209+ 7BF0             >
 209+ 7BF0 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 209+ 7BF1 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 209+ 7BF5 52 45 41 44 >
 209+ 7BF9             >                org     $-1                 // alter last byte of Name just above to set
 209+ 7BF8 C4          >                db      {b $} | END_BIT     // msb as name end
 209+ 7BF9             >
 209+ 7BF9 D0 7B       >                dw      last_NFA            // Link to previous definition Name
 209+ 7BFB             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 209+ 7BFB CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 209+ 7BFE             >
 209+ 7BFE             >
 209+ 7BFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 209+ 7BFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 209+ 7BFE             >
 209+ 7BFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 210+ 7BFE DB 7B                        dw  BLK_SEEK
 211+ 7C00 9C 6C                        dw  BBUF
 212+ 7C02 94 7B 07 6B                  dw  BLK_FH, FETCH
 213+ 7C06 CD 67                        dw  F_READ
 214+ 7C08 A5 63 2E 00                  dw  LIT, $2E, QERROR
 214+ 7C0C 34 70
 215+ 7C0E 59 6A                        dw  DROP
 216+ 7C10 43 69                        dw  EXIT
 217+ 7C12
 218+ 7C12              //  ______________________________________________________________________
 219+ 7C12              //
 220+ 7C12              // blk-write     n --
 221+ 7C12              // seek block n  within blocks!.bin  file
 222+ 7C12                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 222+ 7C12             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 222+ 7C12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 7C12             >
 222+ 7C12             >                // dummy db directives used to calculate length of namec
 222+ 7C12 42 4C 4B 2D >                db      "BLK-WRITE"
 222+ 7C16 57 52 49 54 >
 222+ 7C1A 45          >
 222+ 7C1B             >len_NFA         defl    $ - temp_NFA
 222+ 7C1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 7C12             >
 222+ 7C12 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 7C13 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 222+ 7C17 57 52 49 54 >
 222+ 7C1B 45          >
 222+ 7C1C             >                org     $-1                 // alter last byte of Name just above to set
 222+ 7C1B C5          >                db      {b $} | END_BIT     // msb as name end
 222+ 7C1C             >
 222+ 7C1C F0 7B       >                dw      last_NFA            // Link to previous definition Name
 222+ 7C1E             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 7C1E CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 7C21             >
 222+ 7C21             >
 222+ 7C21             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 7C21             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 7C21             >
 222+ 7C21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 7C21 DB 7B                        dw  BLK_SEEK
 224+ 7C23 9C 6C                        dw  BBUF
 225+ 7C25 94 7B 07 6B                  dw  BLK_FH, FETCH
 226+ 7C29 EA 67                        dw  F_WRITE
 227+ 7C2B A5 63 2F 00                  dw  LIT, $2F, QERROR
 227+ 7C2F 34 70
 228+ 7C31 59 6A                        dw  DROP
 229+ 7C33 43 69                        dw  EXIT
 230+ 7C35
 231+ 7C35              //  ______________________________________________________________________
 232+ 7C35              //
 233+ 7C35              // blk-init     n --
 234+ 7C35              // seek block n  within blocks!.bin  file
 235+ 7C35                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 235+ 7C35             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 235+ 7C35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 235+ 7C35             >
 235+ 7C35             >                // dummy db directives used to calculate length of namec
 235+ 7C35 42 4C 4B 2D >                db      "BLK-INIT"
 235+ 7C39 49 4E 49 54 >
 235+ 7C3D             >len_NFA         defl    $ - temp_NFA
 235+ 7C3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 235+ 7C35             >
 235+ 7C35 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 235+ 7C36 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 235+ 7C3A 49 4E 49 54 >
 235+ 7C3E             >                org     $-1                 // alter last byte of Name just above to set
 235+ 7C3D D4          >                db      {b $} | END_BIT     // msb as name end
 235+ 7C3E             >
 235+ 7C3E 12 7C       >                dw      last_NFA            // Link to previous definition Name
 235+ 7C40             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 235+ 7C40 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 235+ 7C43             >
 235+ 7C43             >
 235+ 7C43             >                endif           ; ok        // for other definitions it "points" the correct handler
 235+ 7C43             >                // Use of "; ok" to suppress "warning[fwdref]"
 235+ 7C43             >
 235+ 7C43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 7C43 94 7B 07 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 236+ 7C47 8A 67 59 6A
 237+ 7C4B A5 7B DB 69                  dw  BLK_FNAME, ONE_PLUS
 238+ 7C4F 5F 6E 70 6C                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 238+ 7C53 FF 67
 239+ 7C55 A5 63 2C 00                  dw  LIT, $2C, QERROR
 239+ 7C59 34 70
 240+ 7C5B 94 7B 12 6B                  dw  BLK_FH, STORE
 241+ 7C5F 43 69                        dw  EXIT
 242+ 7C61
 243+ 7C61              //  ______________________________________________________________________
 244+ 7C61              //
 245+ 7C61              // #sec
 246+ 7C61              // number of 512-Byte "sectors" available on thie sysstem.
 247+ 7C61              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 248+ 7C61
 249+ 7C61                              Constant_Def NSEC , "#SEC", 32767
 249+ 7C61             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 249+ 7C61             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 7C61             >
 249+ 7C61             >                // dummy db directives used to calculate length of namec
 249+ 7C61 23 53 45 43 >                db      "#SEC"
 249+ 7C65             >len_NFA         defl    $ - temp_NFA
 249+ 7C65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 7C61             >
 249+ 7C61 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 7C62 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 249+ 7C66             >                org     $-1                 // alter last byte of Name just above to set
 249+ 7C65 C3          >                db      {b $} | END_BIT     // msb as name end
 249+ 7C66             >
 249+ 7C66 35 7C       >                dw      last_NFA            // Link to previous definition Name
 249+ 7C68             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 7C68 CD 19 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 249+ 7C6B             >
 249+ 7C6B             >
 249+ 7C6B             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 7C6B             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 7C6B             >
 249+ 7C6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 7C6B FF 7F       >                dw      32767
 250+ 7C6D
 251+ 7C6D              //  ______________________________________________________________________
 252+ 7C6D
 253+ 7C6D
 254+ 7C6D
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
 114  7C6D                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
   1+ 7C6D              //  ______________________________________________________________________
   2+ 7C6D              //
   3+ 7C6D              //  L3.asm
   4+ 7C6D              //
   5+ 7C6D              //  Continuation of L2.asm
   6+ 7C6D              //  I/O Block definitions
   7+ 7C6D              //  ______________________________________________________________________
   8+ 7C6D
   9+ 7C6D
  10+ 7C6D              //  ______________________________________________________________________
  11+ 7C6D              //
  12+ 7C6D              // r/w          a n f --
  13+ 7C6D              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C6D                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C6D             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C6D             >
  14+ 7C6D             >                // dummy db directives used to calculate length of namec
  14+ 7C6D 52 2F 57    >                db      "R/W"
  14+ 7C70             >len_NFA         defl    $ - temp_NFA
  14+ 7C70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C6D             >
  14+ 7C6D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C6E 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C71             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C70 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C71             >
  14+ 7C71 61 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C73             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C73 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C76             >
  14+ 7C76             >
  14+ 7C76             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C76             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C76             >
  14+ 7C76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C76 54 69                        dw      TO_R                    // >r
  16+ 7C78 E5 69                        dw      ONE_SUBTRACT            // 1-
  17+ 7C7A 86 6A 9A 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7C7E 4B 6A 68 7C                  dw      OVER, NSEC              // over #sec
  19+ 7C82 E5 69 F5 6E                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7C86 F1 68                        dw      OR_OP                   // or
  21+ 7C88 A5 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7C8C 34 70
  22+ 7C8E 66 69                        dw      R_TO                    // r>
  23+ 7C90                                                              // if
  24+ 7C90 1C 64                        dw      ZBRANCH
  25+ 7C92 08 00                        dw      Read_Write_Else - $
  26+ 7C94 FB 7B                        dw          BLK_READ            //      blk-read
  27+ 7C96 07 64                        dw      BRANCH
  28+ 7C98 04 00                        dw      Read_Write_Endif - $
  29+ 7C9A              Read_Write_Else:                                // else
  30+ 7C9A 1E 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7C9C              Read_Write_Endif:                               // endif
  32+ 7C9C 43 69                        dw      EXIT                    // ;
  33+ 7C9E
  34+ 7C9E
  35+ 7C9E              //  ______________________________________________________________________
  36+ 7C9E              //
  37+ 7C9E              // +buf        a1 -- a2 f
  38+ 7C9E              // advences to next buffer, cyclically rotating along them
  39+ 7C9E                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7C9E             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7C9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7C9E             >
  39+ 7C9E             >                // dummy db directives used to calculate length of namec
  39+ 7C9E 2B 42 55 46 >                db      "+BUF"
  39+ 7CA2             >len_NFA         defl    $ - temp_NFA
  39+ 7CA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7C9E             >
  39+ 7C9E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7C9F 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CA3             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CA2 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CA3             >
  39+ 7CA3 6D 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CA5             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CA5 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CA8             >
  39+ 7CA8             >
  39+ 7CA8             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CA8             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CA8             >
  39+ 7CA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CA8 A5 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CAC BE 69
  41+ 7CAE 86 6A 49 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CB2 07 6B
  42+ 7CB4 C0 6E                        dw      EQUALS                  // =
  43+ 7CB6                                                              // if
  44+ 7CB6 1C 64                        dw      ZBRANCH
  45+ 7CB8 08 00                        dw      PBuf_Endif - $
  46+ 7CBA 59 6A                        dw          DROP                //      drop
  47+ 7CBC 3D 6D 07 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CC0              PBuf_Endif:                                     // endif
  49+ 7CC0 86 6A 0D 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CC4 07 6B
  50+ 7CC6 B4 6E                        dw      SUBTRACT                // -
  51+ 7CC8 43 69                        dw      EXIT                    // ;
  52+ 7CCA
  53+ 7CCA              //  ______________________________________________________________________
  54+ 7CCA              //
  55+ 7CCA              // update       --
  56+ 7CCA              // mark the last used block to be written to disk
  57+ 7CCA                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CCA             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CCA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CCA             >
  57+ 7CCA             >                // dummy db directives used to calculate length of namec
  57+ 7CCA 55 50 44 41 >                db      "UPDATE"
  57+ 7CCE 54 45       >
  57+ 7CD0             >len_NFA         defl    $ - temp_NFA
  57+ 7CD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CCA             >
  57+ 7CCA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CCB 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CCF 54 45       >
  57+ 7CD1             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CD0 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CD1             >
  57+ 7CD1 9E 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CD3             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CD3 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CD6             >
  57+ 7CD6             >
  57+ 7CD6             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CD6             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CD6             >
  57+ 7CD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CD6 0D 6E 07 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7CDA 07 6B
  59+ 7CDC A5 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7CE0 F1 68
  60+ 7CE2 0D 6E 07 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7CE6 12 6B
  61+ 7CE8 43 69                        dw      EXIT                    // ;
  62+ 7CEA
  63+ 7CEA
  64+ 7CEA              //  ______________________________________________________________________
  65+ 7CEA              //
  66+ 7CEA              // empty-buffers --
  67+ 7CEA                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7CEA             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7CEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7CEA             >
  67+ 7CEA             >                // dummy db directives used to calculate length of namec
  67+ 7CEA 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7CEE 59 2D 42 55 >
  67+ 7CF2 46 46 45 52 >
  67+ 7CF6 53          >
  67+ 7CF7             >len_NFA         defl    $ - temp_NFA
  67+ 7CF7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7CEA             >
  67+ 7CEA 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7CEB 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7CEF 59 2D 42 55 >
  67+ 7CF3 46 46 45 52 >
  67+ 7CF7 53          >
  67+ 7CF8             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7CF7 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7CF8             >
  67+ 7CF8 CA 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7CFA             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7CFA CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7CFD             >
  67+ 7CFD             >
  67+ 7CFD             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7CFD             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7CFD             >
  67+ 7CFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7CFD 3D 6D 07 6B                  dw      FIRST, FETCH            // first @
  69+ 7D01 49 6D 07 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D05 4B 6A B4 6E                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D09 86 73
  71+ 7D0B 43 69                        dw      EXIT                    // ;
  72+ 7D0D
  73+ 7D0D              //  ______________________________________________________________________
  74+ 7D0D              //
  75+ 7D0D              // buffer       n -- a
  76+ 7D0D              // read block n and gives the address to a buffer
  77+ 7D0D              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D0D              // disk before reading the block n.
  79+ 7D0D
  80+ 7D0D                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D0D             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D0D             >
  80+ 7D0D             >                // dummy db directives used to calculate length of namec
  80+ 7D0D 42 55 46 46 >                db      "BUFFER"
  80+ 7D11 45 52       >
  80+ 7D13             >len_NFA         defl    $ - temp_NFA
  80+ 7D13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D0D             >
  80+ 7D0D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D0E 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D12 45 52       >
  80+ 7D14             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D13 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D14             >
  80+ 7D14 EA 7C       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D16             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D16 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D19             >
  80+ 7D19             >
  80+ 7D19             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D19             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D19             >
  80+ 7D19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D19 02 6E 07 6B                  dw      USE, FETCH              // use @
  82+ 7D1D 86 6A 54 69                  dw      DUP, TO_R               // dup >r
  83+ 7D21                                                              // begin
  84+ 7D21              Buffer_Begin:
  85+ 7D21 A5 7C                        dw          PBUF                //      +buf
  86+ 7D23                                                              // until
  87+ 7D23 1C 64                        dw      ZBRANCH
  88+ 7D25 FC FF                        dw      Buffer_Begin - $
  89+ 7D27 02 6E 12 6B                  dw      USE, STORE              // use !
  90+ 7D2B 78 69 07 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D2F 9A 69
  91+ 7D31                                                              // if
  92+ 7D31 1C 64                        dw      ZBRANCH
  93+ 7D33 14 00                        dw      Buffer_Endif - $
  94+ 7D35 78 69 FD 69                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D39 78 69 07 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D3D A5 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D41 E1 68                        dw          AND_OP              //      and
  98+ 7D43 55 6C 73 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D47              Buffer_Endif:                                   // endif
 100+ 7D47 78 69 12 6B                  dw      R_OP, STORE             // r !
 101+ 7D4B 78 69 0D 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D4F 12 6B
 102+ 7D51 66 69 FD 69                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D55 43 69                        dw      EXIT                    // ;
 104+ 7D57
 105+ 7D57              //  ______________________________________________________________________
 106+ 7D57              //
 107+ 7D57              // block        n -- a
 108+ 7D57              // Leaves the buffer address that contains the block n.
 109+ 7D57              // If the block is not already present, it will be loaded from disk
 110+ 7D57              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D57              // disk before reading the block n.
 112+ 7D57              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D57
 114+ 7D57                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D57             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D57             >
 114+ 7D57             >                // dummy db directives used to calculate length of namec
 114+ 7D57 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D5B 4B          >
 114+ 7D5C             >len_NFA         defl    $ - temp_NFA
 114+ 7D5C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D57             >
 114+ 7D57 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D58 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D5C 4B          >
 114+ 7D5D             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D5C CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D5D             >
 114+ 7D5D 0D 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D5F             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D5F CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D62             >
 114+ 7D62             >
 114+ 7D62             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D62             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D62             >
 114+ 7D62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D62 94 6D 07 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D66 BE 69 54 69                  dw      PLUS, TO_R              // + >r
 117+ 7D6A 0D 6E 07 6B                  dw      PREV, FETCH             // prev @
 118+ 7D6E 86 6A 07 6B                  dw      DUP, FETCH              // dup @
 119+ 7D72 78 69 B4 6E                  dw      R_OP, SUBTRACT          // r -
 120+ 7D76 86 6A BE 69                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7D7A                                                              // if
 122+ 7D7A 1C 64                        dw        ZBRANCH
 123+ 7D7C 32 00                        dw        Block_Endif_1 - $
 124+ 7D7E              Block_Begin:                                    //      begin
 125+ 7D7E A5 7C 80 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7D82                                                              //          if
 127+ 7D82 1C 64                        dw          ZBRANCH
 128+ 7D84 12 00                        dw          Block_Endif_2 - $
 129+ 7D86 59 6A                        dw              DROP            //              drop
 130+ 7D88 78 69 16 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7D8C 86 6A                        dw              DUP             //              dup
 132+ 7D8E 78 69 5E 6C                  dw              R_OP, ONE       //              r 1
 133+ 7D92 73 7C                        dw              READ_WRITE      //              r/w
 134+ 7D94 13 6A                        dw              TWO_MINUS       //              2-
 135+ 7D96              Block_Endif_2:                                  //          endif
 136+ 7D96 86 6A 07 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7D9A 78 69
 137+ 7D9C B4 6E 86 6A                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DA0 BE 69 80 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DA4                                                              //      until
 140+ 7DA4 1C 64                        dw        ZBRANCH
 141+ 7DA6 D8 FF                        dw        Block_Begin - $
 142+ 7DA8 86 6A 0D 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DAC 12 6B
 143+ 7DAE              Block_Endif_1:                                  // endif
 144+ 7DAE 66 69 59 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DB2 FD 69
 145+ 7DB4 43 69                        dw      EXIT                    // ;
 146+ 7DB6
 147+ 7DB6              //  ______________________________________________________________________
 148+ 7DB6              //
 149+ 7DB6              // #buff        -- n
 150+ 7DB6              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DB6                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DB6             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DB6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DB6             >
 151+ 7DB6             >                // dummy db directives used to calculate length of namec
 151+ 7DB6 23 42 55 46 >                db      "#BUFF"
 151+ 7DBA 46          >
 151+ 7DBB             >len_NFA         defl    $ - temp_NFA
 151+ 7DBB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DB6             >
 151+ 7DB6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DB7 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DBB 46          >
 151+ 7DBC             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DBB C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DBC             >
 151+ 7DBC 57 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DBE             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DBE CD 19 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DC1             >
 151+ 7DC1             >
 151+ 7DC1             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DC1             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DC1             >
 151+ 7DC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DC1 07 00       >                dw      7
 152+ 7DC3
 153+ 7DC3              //  ______________________________________________________________________
 154+ 7DC3              //
 155+ 7DC3              // flush        --
 156+ 7DC3                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DC3             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DC3             >
 156+ 7DC3             >                // dummy db directives used to calculate length of namec
 156+ 7DC3 46 4C 55 53 >                db      "FLUSH"
 156+ 7DC7 48          >
 156+ 7DC8             >len_NFA         defl    $ - temp_NFA
 156+ 7DC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DC3             >
 156+ 7DC3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DC4 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DC8 48          >
 156+ 7DC9             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DC8 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DC9             >
 156+ 7DC9 B6 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DCB             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DCB CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DCE             >
 156+ 7DCE             >
 156+ 7DCE             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DCE             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DCE             >
 156+ 7DCE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DCE BE 7D DB 69                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DD2 55 6C
 158+ 7DD4              Flush_Do:                                       // do
 159+ 7DD4 70 64                        dw      C_DO
 160+ 7DD6 55 6C 16 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7DDA 59 6A
 161+ 7DDC                                                              // loop
 162+ 7DDC F8 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7DE0 94 7B 07 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7DE4 9C 67 59 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7DE8 43 69                        dw      EXIT                    // exit
 166+ 7DEA
 167+ 7DEA              //  ______________________________________________________________________
 168+ 7DEA              //
 169+ 7DEA              // f_getline    a m fh -- n
 170+ 7DEA              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7DEA              // Address a is left for subsequent processing
 172+ 7DEA              // and n as the actual number of byte read, that is the length of line
 173+ 7DEA                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7DEA             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7DEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7DEA             >
 173+ 7DEA             >                // dummy db directives used to calculate length of namec
 173+ 7DEA 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7DEE 54 4C 49 4E >
 173+ 7DF2 45          >
 173+ 7DF3             >len_NFA         defl    $ - temp_NFA
 173+ 7DF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7DEA             >
 173+ 7DEA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7DEB 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7DEF 54 4C 49 4E >
 173+ 7DF3 45          >
 173+ 7DF4             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7DF3 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7DF4             >
 173+ 7DF4 C3 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7DF6             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7DF6 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7DF9             >
 173+ 7DF9             >
 173+ 7DF9             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7DF9             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7DF9             >
 173+ 7DF9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7DF9 54 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7DFB 6D 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7DFD 78 69 B1 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E01 A5 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E05 34 70
 178+ 7E07
 179+ 7E07 CB 6A 4B 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E0B DB 69 7B 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E0F
 182+ 7E0F 78 69 CD 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E13 A5 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E17 34 70
 184+ 7E19                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E19 1C 64                        dw      ZBRANCH
 186+ 7E1B 3C 00                        dw      FGetline_Else - $
 187+ 7E1D A5 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E21 58 65
 188+ 7E23 59 6A 62 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E27 7B 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E29 A5 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E2D 58 65
 191+ 7E2F 59 6A 62 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E33 91 6A 04 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E37 86 6A 3D 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E3B 12 6B
 194+ 7E3D 86 6A 54 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E41 CB 6A 66 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E45 55 6C C9 69                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E49 66 69 69 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E4D A5 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E51 34 70
 199+ 7E53                                                              // else
 200+ 7E53 07 64                        dw      BRANCH
 201+ 7E55 0C 00                        dw      FGetline_Endif - $
 202+ 7E57              FGetline_Else:
 203+ 7E57 66 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E59 CB 6A BF 6A                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E5D 59 6A 55 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E61              FGetline_Endif:                                 // endif
 207+ 7E61 54 69 86 6A                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E65 86 6A
 208+ 7E67 DB 69 7B 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E6B 78 69 4C 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7E6F DB 6A BE 69                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7E73 55 6C 7B 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7E77 08 6A 12 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7E7B 78 69 BE 69                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7E7F E5 69
 214+ 7E81 7B 6A 78 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7E85 B4 6E
 215+ 7E87 98 73                        dw      BLANKS                  // blanks
 216+ 7E89 66 69                        dw      R_TO                    // r>                   ( n )
 217+ 7E8B 43 69                        dw      EXIT                    // ;
 218+ 7E8D
 219+ 7E8D              //  ______________________________________________________________________
 220+ 7E8D              //
 221+ 7E8D              // f_include    fh --
 222+ 7E8D              // Given a filehandle includes the source from file
 223+ 7E8D                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7E8D             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7E8D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7E8D             >
 223+ 7E8D             >                // dummy db directives used to calculate length of namec
 223+ 7E8D 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7E91 43 4C 55 44 >
 223+ 7E95 45          >
 223+ 7E96             >len_NFA         defl    $ - temp_NFA
 223+ 7E96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7E8D             >
 223+ 7E8D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7E8E 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7E92 43 4C 55 44 >
 223+ 7E96 45          >
 223+ 7E97             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7E96 C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7E97             >
 223+ 7E97 EA 7D       >                dw      last_NFA            // Link to previous definition Name
 223+ 7E99             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7E99 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7E9C             >
 223+ 7E9C             >
 223+ 7E9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7E9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7E9C             >
 223+ 7E9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7E9C 69 6D 07 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7EA0 54 69
 225+ 7EA2 73 6D 07 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7EA6 54 69
 226+ 7EA8 32 6E 07 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7EAC 54 69
 227+ 7EAE 78 69                        dw      R_OP                    // r
 228+ 7EB0                                                              // if
 229+ 7EB0 1C 64                        dw      ZBRANCH
 230+ 7EB2 20 00                        dw      FInclude_Else_1 - $
 231+ 7EB4 78 69 B1 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7EB8 A5 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7EBC 34 70
 233+ 7EBE 73 6D 07 6B                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7EC2 13 6A                        dw          TWO_MINUS
 235+ 7EC4 3D 6E 07 6B                  dw          SPAN, FETCH         //      span @ -
 236+ 7EC8 B4 6E                        dw          SUBTRACT
 237+ 7ECA A2 6E C9 69                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7ECE                                                              // else
 239+ 7ECE 07 64                        dw      BRANCH
 240+ 7ED0 06 00                        dw      FInclude_Endif_1 - $
 241+ 7ED2              FInclude_Else_1:
 242+ 7ED2 55 6C 55 6C                  dw          ZERO, ZERO          //      0 0
 243+ 7ED6                                                              // endif
 244+ 7ED6              FInclude_Endif_1:
 245+ 7ED6 54 69 54 69                  dw      TO_R, TO_R              // >r >r
 246+ 7EDA 32 6E 12 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7EDE              FInclude_Begin:                                 // begin
 248+ 7EDE 5E 6C 5F 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7EE2 9C 6C
 249+ 7EE4 DB 6A 98 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 250+ 7EE8 7B 6A DB 69                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7EEC 7B 6A 08 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7EF0 32 6E 07 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7EF4 F6 7D                        dw          F_GETLINE           //      f_getline
 254+ 7EF6                                                              // while
 255+ 7EF6 1C 64                        dw      ZBRANCH
 256+ 7EF8 14 00                        dw      FInclude_Repeat - $
 257+ 7EFA 5E 6C 69 6D                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7EFE 12 6B
 258+ 7F00 55 6C 73 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7F04 12 6B
 259+ 7F06 8D 77                        dw          INTERPRET           //      interpret
 260+ 7F08 07 64                        dw      BRANCH
 261+ 7F0A D4 FF                        dw      FInclude_Begin - $
 262+ 7F0C              FInclude_Repeat:                                // repeat
 263+ 7F0C 32 6E 07 6B                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F10 55 6C 32 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F14 12 6B
 265+ 7F16 8A 67                        dw      F_CLOSE                 // f_close
 266+ 7F18 A5 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F1C 34 70
 267+ 7F1E 66 69 66 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F22 66 69
 268+ 7F24 86 6A 32 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F28 12 6B
 269+ 7F2A                                                              // if
 270+ 7F2A 1C 64                        dw      ZBRANCH
 271+ 7F2C 12 00                        dw      FInclude_Else_2 - $
 272+ 7F2E 32 6E 07 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F32 69 67                        dw          F_SEEK              //      f_seek
 274+ 7F34 A5 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F38 34 70
 275+ 7F3A                                                              // else
 276+ 7F3A 07 64                        dw      BRANCH
 277+ 7F3C 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F3E              FInclude_Else_2:
 279+ 7F3E BF 6A                        dw          TWO_DROP            //      2drop
 280+ 7F40              FInclude_Endif_2:                               // endif
 281+ 7F40 66 69 73 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F44 12 6B
 282+ 7F46 66 69 69 6D                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F4A 12 6B
 283+ 7F4C 43 69                        dw      EXIT                    // ;
 284+ 7F4E
 285+ 7F4E              //  ______________________________________________________________________
 286+ 7F4E              //
 287+ 7F4E              // open<         -- fh
 288+ 7F4E              // Open the following filename and return it file-handle
 289+ 7F4E              // Used in the form OPEN CCCC
 290+ 7F4E                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F4E             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F4E             >
 290+ 7F4E             >                // dummy db directives used to calculate length of namec
 290+ 7F4E 4F 50 45 4E >                db      "OPEN<"
 290+ 7F52 3C          >
 290+ 7F53             >len_NFA         defl    $ - temp_NFA
 290+ 7F53             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F4E             >
 290+ 7F4E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F4F 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F53 3C          >
 290+ 7F54             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F53 BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F54             >
 290+ 7F54 8D 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F56             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F56 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F59             >
 290+ 7F59             >
 290+ 7F59             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F59             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F59             >
 290+ 7F59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F59 84 6C                        dw      BL
 292+ 7F5B D3 73 E9 71                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F5F 4B 6A
 293+ 7F61 BE 69 55 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F65 7B 6A 12 6B
 294+ 7F69 BF 73 5E 6C                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7F6D FF 67
 295+ 7F6F A5 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7F73 34 70                        dw      QERROR                  // ?error
 297+ 7F75 43 69                        dw      EXIT                    // ;
 298+ 7F77
 299+ 7F77              //  ______________________________________________________________________
 300+ 7F77              //
 301+ 7F77              // include      -- cccc
 302+ 7F77              // Include the following filename
 303+ 7F77                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7F77             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7F77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7F77             >
 303+ 7F77             >                // dummy db directives used to calculate length of namec
 303+ 7F77 49 4E 43 4C >                db      "INCLUDE"
 303+ 7F7B 55 44 45    >
 303+ 7F7E             >len_NFA         defl    $ - temp_NFA
 303+ 7F7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7F77             >
 303+ 7F77 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7F78 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7F7C 55 44 45    >
 303+ 7F7F             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7F7E C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7F7F             >
 303+ 7F7F 4E 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7F81             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7F81 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7F84             >
 303+ 7F84             >
 303+ 7F84             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7F84             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7F84             >
 303+ 7F84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7F84 56 7F                        dw      OPEN_FH                 // open
 305+ 7F86 86 6A 99 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7F8A 8A 67 59 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7F8E 43 69                        dw      EXIT                    // ;
 308+ 7F90
 309+ 7F90              //  ______________________________________________________________________
 310+ 7F90              //
 311+ 7F90              // needs
 312+ 7F90              // check for cccc exists in vocabulary
 313+ 7F90              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7F90
 315+ 7F90              // temp filename cccc.f as counted string zero-padded
 316+ 7F90                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7F90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7F90             >
 316+ 7F90             >                // dummy db directives used to calculate length of namec
 316+ 7F90 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7F94 53 2D 57    >
 316+ 7F97             >len_NFA         defl    $ - temp_NFA
 316+ 7F97             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7F90             >
 316+ 7F90 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7F91 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7F95 53 2D 57    >
 316+ 7F98             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7F97 D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7F98             >
 316+ 7F98 77 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7F9A             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7F9A CD 9C 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7F9D             >
 316+ 7F9D             >
 316+ 7F9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7F9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7F9D             >
 316+ 7F9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7F9D 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FC0              // temp complete path+filename
 319+ 7FC0                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FC0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FC0             >
 319+ 7FC0             >                // dummy db directives used to calculate length of namec
 319+ 7FC0 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FC4 53 2D 46 4E >
 319+ 7FC8             >len_NFA         defl    $ - temp_NFA
 319+ 7FC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FC0             >
 319+ 7FC0 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FC1 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FC5 53 2D 46 4E >
 319+ 7FC9             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FC8 CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FC9             >
 319+ 7FC9 90 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FCB             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FCB CD 9C 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7FCE             >
 319+ 7FCE             >
 319+ 7FCE             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7FCE             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7FCE             >
 319+ 7FCE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7FCE 00 00 00...                  ds      40
 321+ 7FF6              // constant path
 322+ 7FF6                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 7FF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 7FF6             >
 322+ 7FF6             >                // dummy db directives used to calculate length of namec
 322+ 7FF6 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 7FFA 53 2D 49 4E >
 322+ 7FFE 43          >
 322+ 7FFF             >len_NFA         defl    $ - temp_NFA
 322+ 7FFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 7FF6             >
 322+ 7FF6 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 7FF7 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 7FFB 53 2D 49 4E >
 322+ 7FFF 43          >
 322+ 8000             >                org     $-1                 // alter last byte of Name just above to set
 322+ 7FFF C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 8000             >
 322+ 8000 C0 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 8002             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 8002 CD 9C 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 8005             >
 322+ 8005             >
 322+ 8005             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 8005             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 8005             >
 322+ 8005             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 8005 04 69 6E 63                  db      4, "inc/", 0
 323+ 8009 2F 00
 324+ 800B                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 800B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 800B             >
 324+ 800B             >                // dummy db directives used to calculate length of namec
 324+ 800B 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 800F 53 2D 4C 49 >
 324+ 8013 42          >
 324+ 8014             >len_NFA         defl    $ - temp_NFA
 324+ 8014             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 800B             >
 324+ 800B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 800C 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 8010 53 2D 4C 49 >
 324+ 8014 42          >
 324+ 8015             >                org     $-1                 // alter last byte of Name just above to set
 324+ 8014 C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 8015             >
 324+ 8015 F6 7F       >                dw      last_NFA            // Link to previous definition Name
 324+ 8017             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 8017 CD 9C 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 801A             >
 324+ 801A             >
 324+ 801A             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 801A             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 801A             >
 324+ 801A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 801A 04 6C 69 62                  db      4, "lib/", 0
 325+ 801E 2F 00
 326+ 8020
 327+ 8020              // Concatenate path at a and filename and include it
 328+ 8020              // No error is issued if filename doesn't exist.
 329+ 8020                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 8020             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 8020             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 8020             >
 329+ 8020             >                // dummy db directives used to calculate length of namec
 329+ 8020 4E 45 45 44 >                db      "NEEDS/"
 329+ 8024 53 2F       >
 329+ 8026             >len_NFA         defl    $ - temp_NFA
 329+ 8026             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 8020             >
 329+ 8020 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 8021 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 8025 53 2F       >
 329+ 8027             >                org     $-1                 // alter last byte of Name just above to set
 329+ 8026 AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 8027             >
 329+ 8027 0B 80       >                dw      last_NFA            // Link to previous definition Name
 329+ 8029             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 8029 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 802C             >
 329+ 802C             >
 329+ 802C             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 802C             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 802C             >
 329+ 802C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 802C E9 71 6D 6A                  dw      COUNT, TUCK             // n a n
 331+ 8030 CB 7F 7B 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 8034 4C 68
 332+ 8036 CB 7F BE 69                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 803A 9A 7F DB 69                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 803E 7B 6A
 334+ 8040 A5 63 23 00                  dw      LIT, 35
 335+ 8044 4C 68                        dw      CMOVE
 336+ 8046 CB 7F                        dw      NEEDS_FN
 337+ 8048 BF 73 5E 6C                  dw      PAD, ONE, F_OPEN
 337+ 804C FF 67
 338+ 804E 80 69                        dw      ZEQUAL
 339+ 8050 1C 64                        dw      ZBRANCH
 340+ 8052 08 00                        dw      Needs_1 - $
 341+ 8054 99 7E                        dw          F_INCLUDE
 342+ 8056 07 64                        dw      BRANCH
 343+ 8058 04 00                        dw      Needs_2 - $
 344+ 805A              Needs_1:
 345+ 805A              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 805A              //              dw          LIT, 43, MESSAGE
 347+ 805A 59 6A                        dw          DROP
 348+ 805C              Needs_2:
 349+ 805C 43 69                        dw      EXIT                    // ;
 350+ 805E
 351+ 805E
 352+ 805E                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 352+ 805E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 805E             >
 352+ 805E             >                // dummy db directives used to calculate length of namec
 352+ 805E 4E 44 4F 4D >                db      "NDOM"
 352+ 8062             >len_NFA         defl    $ - temp_NFA
 352+ 8062             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 805E             >
 352+ 805E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 805F 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 352+ 8063             >                org     $-1                 // alter last byte of Name just above to set
 352+ 8062 CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 8063             >
 352+ 8063 20 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 8065             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 8065 CD 9C 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 8068             >
 352+ 8068             >
 352+ 8068             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 8068             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 8068             >
 352+ 8068             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 8068              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 354+ 8068 3A 3F 2F 2A                  db ':?/*|\<>"'
 354+ 806C 7C 5C 3C 3E
 354+ 8070 22
 355+ 8071
 356+ 8071                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 356+ 8071             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 356+ 8071             >
 356+ 8071             >                // dummy db directives used to calculate length of namec
 356+ 8071 4E 43 44 4D >                db      "NCDM"
 356+ 8075             >len_NFA         defl    $ - temp_NFA
 356+ 8075             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 356+ 8071             >
 356+ 8071 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 356+ 8072 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 356+ 8076             >                org     $-1                 // alter last byte of Name just above to set
 356+ 8075 CD          >                db      {b $} | END_BIT     // msb as name end
 356+ 8076             >
 356+ 8076 5E 80       >                dw      last_NFA            // Link to previous definition Name
 356+ 8078             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 356+ 8078 CD 9C 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 356+ 807B             >
 356+ 807B             >
 356+ 807B             >                endif           ; ok        // for other definitions it "points" the correct handler
 356+ 807B             >                // Use of "; ok" to suppress "warning[fwdref]"
 356+ 807B             >
 356+ 807B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 357+ 807B              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 358+ 807B 5F 5E 25 26                  db '_^%&$_{}~'
 358+ 807F 24 5F 7B 7D
 358+ 8083 7E
 359+ 8084
 360+ 8084
 361+ 8084              // Replace illegal character in filename using the map here above
 362+ 8084              // at the moment we need only  "
 363+ 8084                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 363+ 8084             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 363+ 8084             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 363+ 8084             >
 363+ 8084             >                // dummy db directives used to calculate length of namec
 363+ 8084 4E 45 45 44 >                db      "NEEDS-CH"
 363+ 8088 53 2D 43 48 >
 363+ 808C             >len_NFA         defl    $ - temp_NFA
 363+ 808C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 363+ 8084             >
 363+ 8084 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 363+ 8085 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 363+ 8089 53 2D 43 48 >
 363+ 808D             >                org     $-1                 // alter last byte of Name just above to set
 363+ 808C C8          >                db      {b $} | END_BIT     // msb as name end
 363+ 808D             >
 363+ 808D 71 80       >                dw      last_NFA            // Link to previous definition Name
 363+ 808F             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 363+ 808F CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 363+ 8092             >
 363+ 8092             >
 363+ 8092             >                endif           ; ok        // for other definitions it "points" the correct handler
 363+ 8092             >                // Use of "; ok" to suppress "warning[fwdref]"
 363+ 8092             >
 363+ 8092             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 364+ 8092 E9 71 FB 71                  dw      COUNT, BOUNDS
 365+ 8096 70 64                        dw      C_DO
 366+ 8098              Needs_3:
 367+ 8098 78 80 65 80                  dw          NCDM, NDOM, LIT, 9
 367+ 809C A5 63 09 00
 368+ 80A0 78 64 1E 6B                  dw          I, CFETCH
 369+ 80A4 90 65                        dw          C_MAP
 370+ 80A6 78 64 2A 6B                  dw          I, CSTORE
 371+ 80AA              Needs_4:
 372+ 80AA F8 63                        dw      C_LOOP
 373+ 80AC EC FF                        dw      Needs_3 - $
 374+ 80AE 43 69                        dw      EXIT
 375+ 80B0
 376+ 80B0
 377+ 80B0              // include  "path/cccc.f" if cccc is not defined
 378+ 80B0              // filename cccc.f is temporary stored at NEEDS-W
 379+ 80B0                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 379+ 80B0             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 379+ 80B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ 80B0             >
 379+ 80B0             >                // dummy db directives used to calculate length of namec
 379+ 80B0 4E 45 45 44 >                db      "NEEDS-F"
 379+ 80B4 53 2D 46    >
 379+ 80B7             >len_NFA         defl    $ - temp_NFA
 379+ 80B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ 80B0             >
 379+ 80B0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ 80B1 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 379+ 80B5 53 2D 46    >
 379+ 80B8             >                org     $-1                 // alter last byte of Name just above to set
 379+ 80B7 C6          >                db      {b $} | END_BIT     // msb as name end
 379+ 80B8             >
 379+ 80B8 84 80       >                dw      last_NFA            // Link to previous definition Name
 379+ 80BA             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 80BA CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 379+ 80BD             >
 379+ 80BD             >
 379+ 80BD             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 80BD             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 80BD             >
 379+ 80BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 80BD 8F 75                        dw      LFIND
 381+ 80BF 1C 64                        dw      ZBRANCH
 382+ 80C1 0A 00                        dw      Needs_5 - $
 383+ 80C3
 384+ 80C3 59 6A BF 6A                  dw          DROP, TWO_DROP
 385+ 80C7 07 64                        dw      BRANCH
 386+ 80C9 2C 00                        dw      Needs_6 - $
 387+ 80CB              Needs_5:
 388+ 80CB 9A 7F                        dw          NEEDS_W
 389+ 80CD A5 63 23 00                  dw          LIT, 35
 390+ 80D1 86 73                        dw          ERASE                   // a
 391+ 80D3 5F 6E 1E 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 391+ 80D7 DB 69
 392+ 80D9 5F 6E 4B 6A                  dw          HERE, OVER              // a n here n
 393+ 80DD 9A 7F 7B 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 393+ 80E1 4C 68
 394+ 80E3 9A 7F 8F 80                  dw          NEEDS_W, NEEDS_CHECK
 395+ 80E7 9A 7F BE 69                  dw          NEEDS_W, PLUS           // a a1+1
 396+ 80EB A5 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 397+ 80EF 7B 6A 12 6B                  dw          SWAP, STORE             // a
 398+ 80F3 29 80                        dw          NEEDS_SLASH
 399+ 80F5              Needs_6:
 400+ 80F5 43 69                        dw      EXIT
 401+ 80F7
 402+ 80F7
 403+ 80F7              // check for cccc exists in vocabulary
 404+ 80F7              // if it doesn't then  INCLUDE  inc/cccc.F
 405+ 80F7              // search in inc subdirectory
 406+ 80F7                              Colon_Def NEEDS, "NEEDS", is_normal
 406+ 80F7             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 406+ 80F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ 80F7             >
 406+ 80F7             >                // dummy db directives used to calculate length of namec
 406+ 80F7 4E 45 45 44 >                db      "NEEDS"
 406+ 80FB 53          >
 406+ 80FC             >len_NFA         defl    $ - temp_NFA
 406+ 80FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ 80F7             >
 406+ 80F7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ 80F8 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 406+ 80FC 53          >
 406+ 80FD             >                org     $-1                 // alter last byte of Name just above to set
 406+ 80FC D3          >                db      {b $} | END_BIT     // msb as name end
 406+ 80FD             >
 406+ 80FD B0 80       >                dw      last_NFA            // Link to previous definition Name
 406+ 80FF             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 80FF CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 406+ 8102             >
 406+ 8102             >
 406+ 8102             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 8102             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 8102             >
 406+ 8102             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 8102 73 6D 07 6B                  dw      TO_IN, FETCH
 408+ 8106 86 6A                        dw      DUP
 409+ 8108 02 80 BA 80                  dw      NEEDS_INC, NEEDS_PATH
 410+ 810C 73 6D 12 6B                  dw      TO_IN, STORE
 411+ 8110 17 80 BA 80                  dw      NEEDS_LIB, NEEDS_PATH
 412+ 8114 73 6D 12 6B                  dw      TO_IN, STORE
 413+ 8118 8F 75                        dw      LFIND
 414+ 811A 1C 64                        dw      ZBRANCH
 415+ 811C 08 00                        dw      Needs_10 - $
 416+ 811E BF 6A                        dw          TWO_DROP
 417+ 8120 07 64                        dw      BRANCH
 418+ 8122 10 00                        dw      Needs_11 - $
 419+ 8124              Needs_10:
 420+ 8124 9A 7F E9 71                  dw      NEEDS_W, COUNT, TYPE, SPACE
 420+ 8128 07 72 6A 6F
 421+ 812C A5 63 2B 00                  dw      LIT, 43, MESSAGE
 421+ 8130 D7 7A
 422+ 8132              Needs_11:
 423+ 8132 43 69                        dw      EXIT
 424+ 8134
 425+ 8134
 426+ 8134              //  ______________________________________________________________________
 427+ 8134              //
 428+ 8134              // load+        n --
 429+ 8134                              Colon_Def LOAD_P, "LOAD+", is_normal
 429+ 8134             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 429+ 8134             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 429+ 8134             >
 429+ 8134             >                // dummy db directives used to calculate length of namec
 429+ 8134 4C 4F 41 44 >                db      "LOAD+"
 429+ 8138 2B          >
 429+ 8139             >len_NFA         defl    $ - temp_NFA
 429+ 8139             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 429+ 8134             >
 429+ 8134 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 429+ 8135 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 429+ 8139 2B          >
 429+ 813A             >                org     $-1                 // alter last byte of Name just above to set
 429+ 8139 AB          >                db      {b $} | END_BIT     // msb as name end
 429+ 813A             >
 429+ 813A F7 80       >                dw      last_NFA            // Link to previous definition Name
 429+ 813C             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 429+ 813C CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 429+ 813F             >
 429+ 813F             >
 429+ 813F             >                endif           ; ok        // for other definitions it "points" the correct handler
 429+ 813F             >                // Use of "; ok" to suppress "warning[fwdref]"
 429+ 813F             >
 429+ 813F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 430+ 813F 69 6D 07 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 430+ 8143 54 69
 431+ 8145 73 6D 07 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 431+ 8149 54 69
 432+ 814B
 433+ 814B 55 6C 73 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 433+ 814F 12 6B
 434+ 8151 A9 6C 36 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 434+ 8155 69 6D 12 6B
 435+ 8159 8D 77                        dw      INTERPRET               // interpret
 436+ 815B
 437+ 815B 66 69 73 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 437+ 815F 12 6B
 438+ 8161 66 69 69 6D                  dw      R_TO, BLK, STORE        // r> blk !
 438+ 8165 12 6B
 439+ 8167 43 69                        dw      EXIT                    // ;
 440+ 8169
 441+ 8169              //  ______________________________________________________________________
 442+ 8169              //
 443+ 8169              // -->          --
 444+ 8169                              Colon_Def LOAD_NEXT, "-->", is_immediate
 444+ 8169             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 444+ 8169             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 444+ 8169             >
 444+ 8169             >                // dummy db directives used to calculate length of namec
 444+ 8169 2D 2D 3E    >                db      "-->"
 444+ 816C             >len_NFA         defl    $ - temp_NFA
 444+ 816C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 444+ 8169             >
 444+ 8169 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 444+ 816A 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 444+ 816D             >                org     $-1                 // alter last byte of Name just above to set
 444+ 816C BE          >                db      {b $} | END_BIT     // msb as name end
 444+ 816D             >
 444+ 816D 34 81       >                dw      last_NFA            // Link to previous definition Name
 444+ 816F             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 444+ 816F CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 444+ 8172             >
 444+ 8172             >
 444+ 8172             >                endif           ; ok        // for other definitions it "points" the correct handler
 444+ 8172             >                // Use of "; ok" to suppress "warning[fwdref]"
 444+ 8172             >
 444+ 8172             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 445+ 8172 B2 70                        dw      QLOADING                // ?loading
 446+ 8174 55 6C 73 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 446+ 8178 12 6B
 447+ 817A A9 6C                        dw      BSCR                    // b/scr
 448+ 817C 69 6D 07 6B                  dw      BLK, FETCH              // blk @
 449+ 8180 4B 6A                        dw      OVER                    // over
 450+ 8182 66 7A                        dw      MOD                     // mod
 451+ 8184 B4 6E                        dw      SUBTRACT                // -
 452+ 8186 69 6D E8 6A                  dw      BLK, PLUSSTORE          // +!
 453+ 818A 43 69                        dw      EXIT                    // ;
 454+ 818C
 455+ 818C              //  ______________________________________________________________________
 456+ 818C              //
 457+ 818C              // '            -- xt
 458+ 818C                              Colon_Def TICK, "'", is_normal
 458+ 818C             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 458+ 818C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 458+ 818C             >
 458+ 818C             >                // dummy db directives used to calculate length of namec
 458+ 818C 27          >                db      "'"
 458+ 818D             >len_NFA         defl    $ - temp_NFA
 458+ 818D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 458+ 818C             >
 458+ 818C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 458+ 818D 27          >                db      "'"               // name string in 7-bit ascii, but
 458+ 818E             >                org     $-1                 // alter last byte of Name just above to set
 458+ 818D A7          >                db      {b $} | END_BIT     // msb as name end
 458+ 818E             >
 458+ 818E 69 81       >                dw      last_NFA            // Link to previous definition Name
 458+ 8190             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 458+ 8190 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 458+ 8193             >
 458+ 8193             >
 458+ 8193             >                endif           ; ok        // for other definitions it "points" the correct handler
 458+ 8193             >                // Use of "; ok" to suppress "warning[fwdref]"
 458+ 8193             >
 458+ 8193             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 459+ 8193 8F 75                        dw      LFIND                   // -find
 460+ 8195 80 69                        dw      ZEQUAL                  // 0=
 461+ 8197 55 6C 34 70                  dw      ZERO, QERROR            // 0 ?error
 462+ 819B 59 6A                        dw      DROP                    // drop
 463+ 819D 43 69                        dw      EXIT                    // ;
 464+ 819F
 465+ 819F              //  ______________________________________________________________________
 466+ 819F              //
 467+ 819F              // forget       -- cccc
 468+ 819F                              Colon_Def FORGET, "FORGET", is_normal
 468+ 819F             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 468+ 819F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 468+ 819F             >
 468+ 819F             >                // dummy db directives used to calculate length of namec
 468+ 819F 46 4F 52 47 >                db      "FORGET"
 468+ 81A3 45 54       >
 468+ 81A5             >len_NFA         defl    $ - temp_NFA
 468+ 81A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 468+ 819F             >
 468+ 819F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 468+ 81A0 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 468+ 81A4 45 54       >
 468+ 81A6             >                org     $-1                 // alter last byte of Name just above to set
 468+ 81A5 D4          >                db      {b $} | END_BIT     // msb as name end
 468+ 81A6             >
 468+ 81A6 8C 81       >                dw      last_NFA            // Link to previous definition Name
 468+ 81A8             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 468+ 81A8 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 468+ 81AB             >
 468+ 81AB             >
 468+ 81AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 468+ 81AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 468+ 81AB             >
 468+ 81AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 469+ 81AB B0 6D 07 6B                  dw      CURRENT, FETCH          // current @
 470+ 81AF A2 6D 07 6B                  dw      CONTEXT, FETCH          // context @
 471+ 81B3 B4 6E A5 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 471+ 81B7 17 00 34 70
 472+ 81BB 90 81 FF 6F                  dw      TICK, TO_BODY           // ' >body
 473+ 81BF 86 6A 19 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 473+ 81C3 07 6B
 474+ 81C5 CE 6E A5 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 474+ 81C9 15 00 34 70
 475+ 81CD 86 6A D3 6F                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 475+ 81D1 22 6D 12 6B
 476+ 81D5 B3 6F 07 6B                  dw      LFA, FETCH              // lfa @
 477+ 81D9 A2 6D 07 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 477+ 81DD 12 6B
 478+ 81DF 43 69                        dw      EXIT                    // ;
 479+ 81E1
 480+ 81E1              //  ______________________________________________________________________
 481+ 81E1              //
 482+ 81E1              // marker       -- cccc
 483+ 81E1                              Colon_Def MARKER, "MARKER", is_immediate
 483+ 81E1             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 483+ 81E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 483+ 81E1             >
 483+ 81E1             >                // dummy db directives used to calculate length of namec
 483+ 81E1 4D 41 52 4B >                db      "MARKER"
 483+ 81E5 45 52       >
 483+ 81E7             >len_NFA         defl    $ - temp_NFA
 483+ 81E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 483+ 81E1             >
 483+ 81E1 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 483+ 81E2 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 483+ 81E6 45 52       >
 483+ 81E8             >                org     $-1                 // alter last byte of Name just above to set
 483+ 81E7 D2          >                db      {b $} | END_BIT     // msb as name end
 483+ 81E8             >
 483+ 81E8 9F 81       >                dw      last_NFA            // Link to previous definition Name
 483+ 81EA             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 483+ 81EA CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 483+ 81ED             >
 483+ 81ED             >
 483+ 81ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 483+ 81ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 483+ 81ED             >
 483+ 81ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 484+ 81ED B1 71                        dw      CBUILDS
 485+ 81EF 31 6D 07 6B                  dw      VOC_LINK, FETCH, COMMA
 485+ 81F3 7D 6E
 486+ 81F5 B0 6D 07 6B                  dw      CURRENT, FETCH, COMMA
 486+ 81F9 7D 6E
 487+ 81FB A2 6D 07 6B                  dw      CONTEXT, FETCH, COMMA
 487+ 81FF 7D 6E
 488+ 8201 A2 6F 7D 6E                  dw      LATEST, COMMA
 489+ 8205 A2 6F E8 6F                  dw      LATEST, PFA, LFA, FETCH, COMMA
 489+ 8209 B3 6F 07 6B
 489+ 820D 7D 6E
 490+ 820F C2 71                        dw      DOES_TO
 491+ 8211 86 6A 07 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 491+ 8215 31 6D 12 6B
 491+ 8219 FD 69
 492+ 821B 86 6A 07 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 492+ 821F B0 6D 12 6B
 492+ 8223 FD 69
 493+ 8225 86 6A 07 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 493+ 8229 A2 6D 12 6B
 493+ 822D FD 69
 494+ 822F 86 6A 07 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 494+ 8233 22 6D 12 6B
 494+ 8237 FD 69
 495+ 8239 07 6B B0 6D                  dw           FETCH, CURRENT, FETCH, STORE
 495+ 823D 07 6B 12 6B
 496+ 8241 43 69                        dw      EXIT
 497+ 8243
 498+ 8243              //  ______________________________________________________________________
 499+ 8243              //
 500+ 8243              // spaces       n --
 501+ 8243                              Colon_Def SPACES, "SPACES", is_normal
 501+ 8243             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 501+ 8243             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 501+ 8243             >
 501+ 8243             >                // dummy db directives used to calculate length of namec
 501+ 8243 53 50 41 43 >                db      "SPACES"
 501+ 8247 45 53       >
 501+ 8249             >len_NFA         defl    $ - temp_NFA
 501+ 8249             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 501+ 8243             >
 501+ 8243 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 501+ 8244 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 501+ 8248 45 53       >
 501+ 824A             >                org     $-1                 // alter last byte of Name just above to set
 501+ 8249 D3          >                db      {b $} | END_BIT     // msb as name end
 501+ 824A             >
 501+ 824A E1 81       >                dw      last_NFA            // Link to previous definition Name
 501+ 824C             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 501+ 824C CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 501+ 824F             >
 501+ 824F             >
 501+ 824F             >                endif           ; ok        // for other definitions it "points" the correct handler
 501+ 824F             >                // Use of "; ok" to suppress "warning[fwdref]"
 501+ 824F             >
 501+ 824F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 502+ 824F 55 6C 1B 6F                  dw      ZERO, MAX
 503+ 8253 55 6C 45 64                  dw      ZERO, C_Q_DO
 504+ 8257 08 00                        dw      Spaces_Leave - $
 505+ 8259              Spaces_Loop:
 506+ 8259 6A 6F                        dw          SPACE
 507+ 825B F8 63                        dw      C_LOOP
 508+ 825D FC FF                        dw      Spaces_Loop - $
 509+ 825F              Spaces_Leave:
 510+ 825F 43 69                        dw      EXIT                    // ;
 511+ 8261
 512+ 8261              //  ______________________________________________________________________
 513+ 8261              //
 514+ 8261              // <#           --
 515+ 8261                              Colon_Def BEGIN_DASH, "<#", is_normal
 515+ 8261             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 515+ 8261             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 8261             >
 515+ 8261             >                // dummy db directives used to calculate length of namec
 515+ 8261 3C 23       >                db      "<#"
 515+ 8263             >len_NFA         defl    $ - temp_NFA
 515+ 8263             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 8261             >
 515+ 8261 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 8262 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 515+ 8264             >                org     $-1                 // alter last byte of Name just above to set
 515+ 8263 A3          >                db      {b $} | END_BIT     // msb as name end
 515+ 8264             >
 515+ 8264 43 82       >                dw      last_NFA            // Link to previous definition Name
 515+ 8266             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 8266 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 515+ 8269             >
 515+ 8269             >
 515+ 8269             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 8269             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 8269             >
 515+ 8269             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 516+ 8269 BF 73 F8 6D                  dw      PAD, HLD, STORE
 516+ 826D 12 6B
 517+ 826F 43 69                        dw      EXIT
 518+ 8271
 519+ 8271              //  ______________________________________________________________________
 520+ 8271              //
 521+ 8271              // #>           --
 522+ 8271                              Colon_Def DASH_END, "#>", is_normal
 522+ 8271             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 522+ 8271             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 8271             >
 522+ 8271             >                // dummy db directives used to calculate length of namec
 522+ 8271 23 3E       >                db      "#>"
 522+ 8273             >len_NFA         defl    $ - temp_NFA
 522+ 8273             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 8271             >
 522+ 8271 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 8272 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 522+ 8274             >                org     $-1                 // alter last byte of Name just above to set
 522+ 8273 BE          >                db      {b $} | END_BIT     // msb as name end
 522+ 8274             >
 522+ 8274 61 82       >                dw      last_NFA            // Link to previous definition Name
 522+ 8276             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 8276 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 522+ 8279             >
 522+ 8279             >
 522+ 8279             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 8279             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 8279             >
 522+ 8279             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 8279 BF 6A                        dw      TWO_DROP
 524+ 827B F8 6D 07 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 524+ 827F BF 73 4B 6A
 524+ 8283 B4 6E
 525+ 8285 43 69                        dw      EXIT
 526+ 8287
 527+ 8287              //  ______________________________________________________________________
 528+ 8287              //
 529+ 8287              // sign         n d -- d
 530+ 8287                              Colon_Def SIGN, "SIGN", is_normal
 530+ 8287             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 530+ 8287             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 530+ 8287             >
 530+ 8287             >                // dummy db directives used to calculate length of namec
 530+ 8287 53 49 47 4E >                db      "SIGN"
 530+ 828B             >len_NFA         defl    $ - temp_NFA
 530+ 828B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 530+ 8287             >
 530+ 8287 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 530+ 8288 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 530+ 828C             >                org     $-1                 // alter last byte of Name just above to set
 530+ 828B CE          >                db      {b $} | END_BIT     // msb as name end
 530+ 828C             >
 530+ 828C 71 82       >                dw      last_NFA            // Link to previous definition Name
 530+ 828E             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 530+ 828E CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 530+ 8291             >
 530+ 8291             >
 530+ 8291             >                endif           ; ok        // for other definitions it "points" the correct handler
 530+ 8291             >                // Use of "; ok" to suppress "warning[fwdref]"
 530+ 8291             >
 530+ 8291             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 8291 91 6A 9A 69                  dw      ROT, ZLESS
 532+ 8295 1C 64                        dw      ZBRANCH
 533+ 8297 08 00                        dw      Sign_Endif - $
 534+ 8299 A5 63 2D 00                  dw          LIT, 45, HOLD
 534+ 829D A8 73
 535+ 829F              Sign_Endif:
 536+ 829F 43 69                        dw      EXIT
 537+ 82A1
 538+ 82A1              //  ______________________________________________________________________
 539+ 82A1              //
 540+ 82A1              // #           d1 -- d2
 541+ 82A1                              Colon_Def DASH, "#", is_normal
 541+ 82A1             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 541+ 82A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 541+ 82A1             >
 541+ 82A1             >                // dummy db directives used to calculate length of namec
 541+ 82A1 23          >                db      "#"
 541+ 82A2             >len_NFA         defl    $ - temp_NFA
 541+ 82A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 541+ 82A1             >
 541+ 82A1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 541+ 82A2 23          >                db      "#"               // name string in 7-bit ascii, but
 541+ 82A3             >                org     $-1                 // alter last byte of Name just above to set
 541+ 82A2 A3          >                db      {b $} | END_BIT     // msb as name end
 541+ 82A3             >
 541+ 82A3 87 82       >                dw      last_NFA            // Link to previous definition Name
 541+ 82A5             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 541+ 82A5 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 541+ 82A8             >
 541+ 82A8             >
 541+ 82A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 541+ 82A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 541+ 82A8             >
 541+ 82A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 542+ 82A8 C7 6D 07 6B                  dw      BASE, FETCH
 543+ 82AC
 544+ 82AC 54 69                        dw      TO_R                    // >r           ( ud1 )
 545+ 82AE 55 6C 78 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 545+ 82B2 AA 68
 546+ 82B4 66 69 7B 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 546+ 82B8 54 69
 547+ 82BA AA 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 548+ 82BC 66 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 549+ 82BE
 550+ 82BE 91 6A                        dw      ROT
 551+ 82C0 A5 63 09 00                  dw      LIT, 9, OVER, LESS
 551+ 82C4 4B 6A E0 6E
 552+ 82C8 1C 64                        dw      ZBRANCH
 553+ 82CA 08 00                        dw      Dash_Endif - $
 554+ 82CC A5 63 07 00                  dw          LIT, 7, PLUS
 554+ 82D0 BE 69
 555+ 82D2              Dash_Endif:
 556+ 82D2
 557+ 82D2 A5 63 30 00                  dw      LIT, 48, PLUS, HOLD
 557+ 82D6 BE 69 A8 73
 558+ 82DA 43 69                        dw      EXIT
 559+ 82DC
 560+ 82DC              //  ______________________________________________________________________
 561+ 82DC              //
 562+ 82DC              // #s           d1 -- d2
 563+ 82DC                              Colon_Def DASHES, "#S", is_normal
 563+ 82DC             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 563+ 82DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 563+ 82DC             >
 563+ 82DC             >                // dummy db directives used to calculate length of namec
 563+ 82DC 23 53       >                db      "#S"
 563+ 82DE             >len_NFA         defl    $ - temp_NFA
 563+ 82DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 563+ 82DC             >
 563+ 82DC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 563+ 82DD 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 563+ 82DF             >                org     $-1                 // alter last byte of Name just above to set
 563+ 82DE D3          >                db      {b $} | END_BIT     // msb as name end
 563+ 82DF             >
 563+ 82DF A1 82       >                dw      last_NFA            // Link to previous definition Name
 563+ 82E1             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 563+ 82E1 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 563+ 82E4             >
 563+ 82E4             >
 563+ 82E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 563+ 82E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 563+ 82E4             >
 563+ 82E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 564+ 82E4              Dashes_Begin:
 565+ 82E4 A5 82 DB 6A                  dw      DASH, TWO_DUP
 566+ 82E8 F1 68 80 69                  dw          OR_OP, ZEQUAL
 567+ 82EC 1C 64                        dw      ZBRANCH
 568+ 82EE F6 FF                        dw      Dashes_Begin - $
 569+ 82F0 43 69                        dw      EXIT
 570+ 82F2
 571+ 82F2              //  ______________________________________________________________________
 572+ 82F2              //
 573+ 82F2              // d.r          d n --
 574+ 82F2                              Colon_Def D_DOT_R, "D.R", is_normal
 574+ 82F2             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 574+ 82F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 574+ 82F2             >
 574+ 82F2             >                // dummy db directives used to calculate length of namec
 574+ 82F2 44 2E 52    >                db      "D.R"
 574+ 82F5             >len_NFA         defl    $ - temp_NFA
 574+ 82F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 574+ 82F2             >
 574+ 82F2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 574+ 82F3 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 574+ 82F6             >                org     $-1                 // alter last byte of Name just above to set
 574+ 82F5 D2          >                db      {b $} | END_BIT     // msb as name end
 574+ 82F6             >
 574+ 82F6 DC 82       >                dw      last_NFA            // Link to previous definition Name
 574+ 82F8             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 574+ 82F8 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 574+ 82FB             >
 574+ 82FB             >
 574+ 82FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 574+ 82FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 574+ 82FB             >
 574+ 82FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 575+ 82FB 54 69                        dw      TO_R
 576+ 82FD 6D 6A 86 79                  dw      TUCK, DABS
 577+ 8301 66 82 E1 82                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 577+ 8305 8E 82 76 82
 578+ 8309 66 69                        dw      R_TO
 579+ 830B 4B 6A B4 6E                  dw      OVER, SUBTRACT, SPACES, TYPE
 579+ 830F 4C 82 07 72
 580+ 8313 43 69                        dw      EXIT
 581+ 8315
 582+ 8315              //  ______________________________________________________________________
 583+ 8315              //
 584+ 8315              // .r           n1 n2 --
 585+ 8315                              Colon_Def DOT_R, ".R", is_normal
 585+ 8315             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 585+ 8315             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 585+ 8315             >
 585+ 8315             >                // dummy db directives used to calculate length of namec
 585+ 8315 2E 52       >                db      ".R"
 585+ 8317             >len_NFA         defl    $ - temp_NFA
 585+ 8317             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 585+ 8315             >
 585+ 8315 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 585+ 8316 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 585+ 8318             >                org     $-1                 // alter last byte of Name just above to set
 585+ 8317 D2          >                db      {b $} | END_BIT     // msb as name end
 585+ 8318             >
 585+ 8318 F2 82       >                dw      last_NFA            // Link to previous definition Name
 585+ 831A             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 585+ 831A CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 585+ 831D             >
 585+ 831D             >
 585+ 831D             >                endif           ; ok        // for other definitions it "points" the correct handler
 585+ 831D             >                // Use of "; ok" to suppress "warning[fwdref]"
 585+ 831D             >
 585+ 831D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 586+ 831D 54 69                        dw      TO_R
 587+ 831F A2 6E 66 69                  dw      S_TO_D, R_TO
 588+ 8323 F8 82                        dw      D_DOT_R
 589+ 8325 43 69                        dw      EXIT
 590+ 8327
 591+ 8327              //  ______________________________________________________________________
 592+ 8327              //
 593+ 8327              // d.           d --
 594+ 8327                              Colon_Def D_DOT, "D.", is_normal
 594+ 8327             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 594+ 8327             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ 8327             >
 594+ 8327             >                // dummy db directives used to calculate length of namec
 594+ 8327 44 2E       >                db      "D."
 594+ 8329             >len_NFA         defl    $ - temp_NFA
 594+ 8329             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ 8327             >
 594+ 8327 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ 8328 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 594+ 832A             >                org     $-1                 // alter last byte of Name just above to set
 594+ 8329 AE          >                db      {b $} | END_BIT     // msb as name end
 594+ 832A             >
 594+ 832A 15 83       >                dw      last_NFA            // Link to previous definition Name
 594+ 832C             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 832C CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 832F             >
 594+ 832F             >
 594+ 832F             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 832F             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 832F             >
 594+ 832F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 832F 55 6C F8 82                  dw      ZERO, D_DOT_R, SPACE
 595+ 8333 6A 6F
 596+ 8335 43 69                        dw      EXIT
 597+ 8337
 598+ 8337              //  ______________________________________________________________________
 599+ 8337              //
 600+ 8337              // .            n --
 601+ 8337                              Colon_Def DOT, ".", is_normal
 601+ 8337             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 601+ 8337             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ 8337             >
 601+ 8337             >                // dummy db directives used to calculate length of namec
 601+ 8337 2E          >                db      "."
 601+ 8338             >len_NFA         defl    $ - temp_NFA
 601+ 8338             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ 8337             >
 601+ 8337 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ 8338 2E          >                db      "."               // name string in 7-bit ascii, but
 601+ 8339             >                org     $-1                 // alter last byte of Name just above to set
 601+ 8338 AE          >                db      {b $} | END_BIT     // msb as name end
 601+ 8339             >
 601+ 8339 27 83       >                dw      last_NFA            // Link to previous definition Name
 601+ 833B             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 833B CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 601+ 833E             >
 601+ 833E             >
 601+ 833E             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 833E             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 833E             >
 601+ 833E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 833E A2 6E 2C 83                  dw      S_TO_D, D_DOT
 603+ 8342 43 69                        dw      EXIT
 604+ 8344
 605+ 8344              //  ______________________________________________________________________
 606+ 8344              //
 607+ 8344              // ?            n --
 608+ 8344                              Colon_Def QUESTION, "?", is_normal
 608+ 8344             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 608+ 8344             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 608+ 8344             >
 608+ 8344             >                // dummy db directives used to calculate length of namec
 608+ 8344 3F          >                db      "?"
 608+ 8345             >len_NFA         defl    $ - temp_NFA
 608+ 8345             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 608+ 8344             >
 608+ 8344 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 608+ 8345 3F          >                db      "?"               // name string in 7-bit ascii, but
 608+ 8346             >                org     $-1                 // alter last byte of Name just above to set
 608+ 8345 BF          >                db      {b $} | END_BIT     // msb as name end
 608+ 8346             >
 608+ 8346 37 83       >                dw      last_NFA            // Link to previous definition Name
 608+ 8348             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 608+ 8348 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 608+ 834B             >
 608+ 834B             >
 608+ 834B             >                endif           ; ok        // for other definitions it "points" the correct handler
 608+ 834B             >                // Use of "; ok" to suppress "warning[fwdref]"
 608+ 834B             >
 608+ 834B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 609+ 834B 07 6B 3B 83                  dw      FETCH, DOT
 610+ 834F 43 69                        dw      EXIT
 611+ 8351
 612+ 8351              //  ______________________________________________________________________
 613+ 8351              //
 614+ 8351              // u.           u --
 615+ 8351                              Colon_Def U_DOT, "U.", is_normal
 615+ 8351             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 615+ 8351             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 615+ 8351             >
 615+ 8351             >                // dummy db directives used to calculate length of namec
 615+ 8351 55 2E       >                db      "U."
 615+ 8353             >len_NFA         defl    $ - temp_NFA
 615+ 8353             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 615+ 8351             >
 615+ 8351 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 615+ 8352 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 615+ 8354             >                org     $-1                 // alter last byte of Name just above to set
 615+ 8353 AE          >                db      {b $} | END_BIT     // msb as name end
 615+ 8354             >
 615+ 8354 44 83       >                dw      last_NFA            // Link to previous definition Name
 615+ 8356             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 615+ 8356 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 615+ 8359             >
 615+ 8359             >
 615+ 8359             >                endif           ; ok        // for other definitions it "points" the correct handler
 615+ 8359             >                // Use of "; ok" to suppress "warning[fwdref]"
 615+ 8359             >
 615+ 8359             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 616+ 8359 55 6C 2C 83                  dw      ZERO, D_DOT
 617+ 835D 43 69                        dw      EXIT
 618+ 835F
 619+ 835F              //  ______________________________________________________________________
 620+ 835F              //
 621+ 835F              // words        --
 622+ 835F                              Colon_Def WORDS, "WORDS", is_normal
 622+ 835F             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 622+ 835F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 622+ 835F             >
 622+ 835F             >                // dummy db directives used to calculate length of namec
 622+ 835F 57 4F 52 44 >                db      "WORDS"
 622+ 8363 53          >
 622+ 8364             >len_NFA         defl    $ - temp_NFA
 622+ 8364             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 622+ 835F             >
 622+ 835F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 622+ 8360 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 622+ 8364 53          >
 622+ 8365             >                org     $-1                 // alter last byte of Name just above to set
 622+ 8364 D3          >                db      {b $} | END_BIT     // msb as name end
 622+ 8365             >
 622+ 8365 51 83       >                dw      last_NFA            // Link to previous definition Name
 622+ 8367             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 622+ 8367 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 622+ 836A             >
 622+ 836A             >
 622+ 836A             >                endif           ; ok        // for other definitions it "points" the correct handler
 622+ 836A             >                // Use of "; ok" to suppress "warning[fwdref]"
 622+ 836A             >
 622+ 836A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 623+ 836A A5 63 80 00                  dw      LIT, 128, OUT, STORE
 623+ 836E 7D 6D 12 6B
 624+ 8372 A2 6D 07 6B                  dw      CONTEXT, FETCH, FETCH
 624+ 8376 07 6B
 625+ 8378              Words_Begin:
 626+ 8378 86 6A 1E 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 626+ 837C A5 63 1F 00
 626+ 8380 E1 68
 627+ 8382 7D 6D 07 6B                  dw          OUT, FETCH, PLUS
 627+ 8386 BE 69
 628+ 8388 8F 6C E0 6E                  dw          CL, LESS, ZEQUAL
 628+ 838C 80 69
 629+ 838E 1C 64                        dw          ZBRANCH
 630+ 8390 0A 00                        dw          Words_Endif - $
 631+ 8392 FC 65 55 6C                  dw              CR, ZERO, OUT, STORE
 631+ 8396 7D 6D 12 6B
 632+ 839A              Words_Endif:
 633+ 839A 86 6A 03 76                  dw          DUP, ID_DOT
 634+ 839E E8 6F B3 6F                  dw          PFA, LFA, FETCH
 634+ 83A2 07 6B
 635+ 83A4 86 6A 80 69                  dw          DUP, ZEQUAL
 636+ 83A8 0B 67 F1 68                  dw          QTERMINAL, OR_OP
 637+ 83AC 1C 64                        dw      ZBRANCH
 638+ 83AE CA FF                        dw      Words_Begin - $
 639+ 83B0 59 6A                        dw      DROP
 640+ 83B2 43 69                        dw      EXIT
 641+ 83B4
 642+ 83B4              //  ______________________________________________________________________
 643+ 83B4              //
 644+ 83B4              // list         n --
 645+ 83B4                              Colon_Def LIST, "LIST", is_normal
 645+ 83B4             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 645+ 83B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 645+ 83B4             >
 645+ 83B4             >                // dummy db directives used to calculate length of namec
 645+ 83B4 4C 49 53 54 >                db      "LIST"
 645+ 83B8             >len_NFA         defl    $ - temp_NFA
 645+ 83B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 645+ 83B4             >
 645+ 83B4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 645+ 83B5 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 645+ 83B9             >                org     $-1                 // alter last byte of Name just above to set
 645+ 83B8 D4          >                db      {b $} | END_BIT     // msb as name end
 645+ 83B9             >
 645+ 83B9 5F 83       >                dw      last_NFA            // Link to previous definition Name
 645+ 83BB             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 645+ 83BB CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 645+ 83BE             >
 645+ 83BE             >
 645+ 83BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 645+ 83BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 645+ 83BE             >
 645+ 83BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 646+ 83BE 60 71 FC 65                  dw      DECIMAL, CR
 647+ 83C2 86 6A 87 6D                  dw      DUP, SCR, STORE
 647+ 83C6 12 6B
 648+ 83C8 23 74                        dw      C_DOT_QUOTE
 649+ 83CA 05 53 63 72                  db      5, "Scr# "
 649+ 83CE 23 20
 650+ 83D0 3B 83                        dw      DOT
 651+ 83D2 B6 6C 55 6C                  dw      LSCR, ZERO, C_DO
 651+ 83D6 70 64
 652+ 83D8              List_Loop:
 653+ 83D8 FC 65                        dw          CR
 654+ 83DA 78 64 70 6C                  dw          I, THREE
 655+ 83DE 1A 83 6A 6F                  dw          DOT_R, SPACE
 656+ 83E2 78 64 87 6D                  dw          I, SCR, FETCH, DOT_LINE
 656+ 83E6 07 6B C2 7A
 657+ 83EA 0B 67                        dw          QTERMINAL
 658+ 83EC 1C 64                        dw          ZBRANCH
 659+ 83EE 06 00                        dw          List_Endif - $
 660+ 83F0 2F 64                        dw              C_LEAVE
 661+ 83F2 06 00                        dw              List_Leave - $
 662+ 83F4              List_Endif:
 663+ 83F4 F8 63                        dw      C_LOOP
 664+ 83F6 E2 FF                        dw      List_Loop - $
 665+ 83F8              List_Leave:
 666+ 83F8 FC 65                        dw      CR
 667+ 83FA 43 69                        dw      EXIT
 668+ 83FC
 669+ 83FC              //  ______________________________________________________________________
 670+ 83FC              //
 671+ 83FC              // index        n1 n2 --
 672+ 83FC                              Colon_Def INDEX, "INDEX", is_normal
 672+ 83FC             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 672+ 83FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 672+ 83FC             >
 672+ 83FC             >                // dummy db directives used to calculate length of namec
 672+ 83FC 49 4E 44 45 >                db      "INDEX"
 672+ 8400 58          >
 672+ 8401             >len_NFA         defl    $ - temp_NFA
 672+ 8401             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 672+ 83FC             >
 672+ 83FC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 672+ 83FD 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 672+ 8401 58          >
 672+ 8402             >                org     $-1                 // alter last byte of Name just above to set
 672+ 8401 D8          >                db      {b $} | END_BIT     // msb as name end
 672+ 8402             >
 672+ 8402 B4 83       >                dw      last_NFA            // Link to previous definition Name
 672+ 8404             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 672+ 8404 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 672+ 8407             >
 672+ 8407             >
 672+ 8407             >                endif           ; ok        // for other definitions it "points" the correct handler
 672+ 8407             >                // Use of "; ok" to suppress "warning[fwdref]"
 672+ 8407             >
 672+ 8407             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 673+ 8407 DB 69 7B 6A                  dw      ONE_PLUS, SWAP, C_DO
 673+ 840B 70 64
 674+ 840D              Index_Loop:
 675+ 840D FC 65 78 64                  dw          CR, I, THREE
 675+ 8411 70 6C
 676+ 8413 1A 83 6A 6F                  dw          DOT_R, SPACE
 677+ 8417 55 6C 78 64                  dw          ZERO, I, DOT_LINE
 677+ 841B C2 7A
 678+ 841D 0B 67                        dw          QTERMINAL
 679+ 841F 1C 64                        dw          ZBRANCH
 680+ 8421 06 00                        dw          Index_Endif - $
 681+ 8423 2F 64                        dw              C_LEAVE
 682+ 8425 06 00                        dw              Index_Leave - $
 683+ 8427              Index_Endif:
 684+ 8427 F8 63                        dw      C_LOOP
 685+ 8429 E4 FF                        dw      Index_Loop - $
 686+ 842B              Index_Leave:
 687+ 842B FC 65                        dw      CR
 688+ 842D 43 69                        dw      EXIT
 689+ 842F
 690+ 842F              //  ______________________________________________________________________
 691+ 842F              //
 692+ 842F              // cls          --
 693+ 842F                              Colon_Def CLS, "CLS", is_normal
 693+ 842F             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 693+ 842F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 693+ 842F             >
 693+ 842F             >                // dummy db directives used to calculate length of namec
 693+ 842F 43 4C 53    >                db      "CLS"
 693+ 8432             >len_NFA         defl    $ - temp_NFA
 693+ 8432             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 693+ 842F             >
 693+ 842F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 693+ 8430 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 693+ 8433             >                org     $-1                 // alter last byte of Name just above to set
 693+ 8432 D3          >                db      {b $} | END_BIT     // msb as name end
 693+ 8433             >
 693+ 8433 FC 83       >                dw      last_NFA            // Link to previous definition Name
 693+ 8435             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 693+ 8435 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 693+ 8438             >
 693+ 8438             >
 693+ 8438             >                endif           ; ok        // for other definitions it "points" the correct handler
 693+ 8438             >                // Use of "; ok" to suppress "warning[fwdref]"
 693+ 8438             >
 693+ 8438             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 694+ 8438 A5 63 0E 00                  dw      LIT, $0E, EMITC
 694+ 843C E7 65
 695+ 843E 43 69                        dw      EXIT
 696+ 8440
 697+ 8440              //  ______________________________________________________________________
 698+ 8440              //
 699+ 8440              // splash       --
 700+ 8440                              Colon_Def SPLASH, "SPLASH", is_normal
 700+ 8440             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 700+ 8440             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 700+ 8440             >
 700+ 8440             >                // dummy db directives used to calculate length of namec
 700+ 8440 53 50 4C 41 >                db      "SPLASH"
 700+ 8444 53 48       >
 700+ 8446             >len_NFA         defl    $ - temp_NFA
 700+ 8446             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 700+ 8440             >
 700+ 8440 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 700+ 8441 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 700+ 8445 53 48       >
 700+ 8447             >                org     $-1                 // alter last byte of Name just above to set
 700+ 8446 C8          >                db      {b $} | END_BIT     // msb as name end
 700+ 8447             >
 700+ 8447 2F 84       >                dw      last_NFA            // Link to previous definition Name
 700+ 8449             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 700+ 8449 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 700+ 844C             >
 700+ 844C             >
 700+ 844C             >                endif           ; ok        // for other definitions it "points" the correct handler
 700+ 844C             >                // Use of "; ok" to suppress "warning[fwdref]"
 700+ 844C             >
 700+ 844C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 701+ 844C 35 84                        dw      CLS
 702+ 844E 23 74                        dw      C_DOT_QUOTE
 703+ 8450 58                           db      88
 704+ 8451 76 2D 46 6F                  db      "v-Forth 1.52 NextZXOS version", 13    // 29
 704+ 8455 72 74 68 20
 704+ 8459 31 2E 35 32
 704+ 845D 20 4E 65 78
 704+ 8461 74 5A 58 4F
 704+ 8465 53 20 76 65
 704+ 8469 72 73 69 6F
 704+ 846D 6E 0D
 705+ 846F 44 69 72 65                  db      "Direct Threaded - build 20220508", 13  // 31
 705+ 8473 63 74 20 54
 705+ 8477 68 72 65 61
 705+ 847B 64 65 64 20
 705+ 847F 2D 20 62 75
 705+ 8483 69 6C 64 20
 705+ 8487 32 30 32 32
 705+ 848B 30 35 30 38
 705+ 848F 0D
 706+ 8490 31 39 39 30                  db      "1990-2022 Matteo Vitturi", 13        // 25
 706+ 8494 2D 32 30 32
 706+ 8498 32 20 4D 61
 706+ 849C 74 74 65 6F
 706+ 84A0 20 56 69 74
 706+ 84A4 74 75 72 69
 706+ 84A8 0D
 707+ 84A9 43 69                        dw      EXIT
 708+ 84AB
 709+ 84AB              //  ______________________________________________________________________
 710+ 84AB              //
 711+ 84AB              // video        --
 712+ 84AB                              Colon_Def VIDEO, "VIDEO", is_normal
 712+ 84AB             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 712+ 84AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 712+ 84AB             >
 712+ 84AB             >                // dummy db directives used to calculate length of namec
 712+ 84AB 56 49 44 45 >                db      "VIDEO"
 712+ 84AF 4F          >
 712+ 84B0             >len_NFA         defl    $ - temp_NFA
 712+ 84B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 712+ 84AB             >
 712+ 84AB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 712+ 84AC 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 712+ 84B0 4F          >
 712+ 84B1             >                org     $-1                 // alter last byte of Name just above to set
 712+ 84B0 CF          >                db      {b $} | END_BIT     // msb as name end
 712+ 84B1             >
 712+ 84B1 40 84       >                dw      last_NFA            // Link to previous definition Name
 712+ 84B3             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 712+ 84B3 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 712+ 84B6             >
 712+ 84B6             >
 712+ 84B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 712+ 84B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 712+ 84B6             >
 712+ 84B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 713+ 84B6 67 6C 86 6A                  dw      TWO, DUP, DEVICE, STORE
 713+ 84BA 0C 7B 12 6B
 714+ 84BE 48 67                        dw      SELECT
 715+ 84C0 43 69                        dw      EXIT
 716+ 84C2
 717+ 84C2              //  ______________________________________________________________________
 718+ 84C2              //
 719+ 84C2              // accept-      a n1 -- n2
 720+ 84C2                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 720+ 84C2             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 720+ 84C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 720+ 84C2             >
 720+ 84C2             >                // dummy db directives used to calculate length of namec
 720+ 84C2 41 43 43 45 >                db      "ACCEPT-"
 720+ 84C6 50 54 2D    >
 720+ 84C9             >len_NFA         defl    $ - temp_NFA
 720+ 84C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 720+ 84C2             >
 720+ 84C2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 720+ 84C3 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 720+ 84C7 50 54 2D    >
 720+ 84CA             >                org     $-1                 // alter last byte of Name just above to set
 720+ 84C9 AD          >                db      {b $} | END_BIT     // msb as name end
 720+ 84CA             >
 720+ 84CA AB 84       >                dw      last_NFA            // Link to previous definition Name
 720+ 84CC             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 720+ 84CC CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 720+ 84CF             >
 720+ 84CF             >
 720+ 84CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 720+ 84CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 720+ 84CF             >
 720+ 84CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 721+ 84CF 54 69                        dw      TO_R
 722+ 84D1 55 6C                        dw      ZERO
 723+ 84D3 7B 6A                        dw      SWAP
 724+ 84D5 86 6A                        dw      DUP
 725+ 84D7 66 69                        dw      R_TO
 726+ 84D9 BE 69                        dw      PLUS
 727+ 84DB 7B 6A                        dw      SWAP
 728+ 84DD 70 64                        dw      C_DO
 729+ 84DF              AcceptN_Loop:
 730+ 84DF 43 7B                        dw          MMU7_FETCH
 731+ 84E1 25 67                        dw          INKEY
 732+ 84E3 7B 6A 56 7B                  dw          SWAP, MMU7_STORE
 733+ 84E7 86 6A 80 69                  dw          DUP, ZEQUAL
 734+ 84EB 1C 64                        dw          ZBRANCH
 735+ 84ED 06 00                        dw          AcceptN_Endif_1 - $
 736+ 84EF B3 84 52 78                  dw              VIDEO, QUIT
 737+ 84F3              AcceptN_Endif_1:
 738+ 84F3 86 6A A5 63                  dw          DUP, LIT, 13, EQUALS
 738+ 84F7 0D 00 C0 6E
 739+ 84FB 1C 64                        dw          ZBRANCH
 740+ 84FD 06 00                        dw          AcceptN_Endif_2 - $
 741+ 84FF 59 6A 55 6C                  dw              DROP, ZERO
 742+ 8503              AcceptN_Endif_2:
 743+ 8503 86 6A A5 63                  dw          DUP, LIT, 10, EQUALS
 743+ 8507 0A 00 C0 6E
 744+ 850B 1C 64                        dw          ZBRANCH
 745+ 850D 06 00                        dw          AcceptN_Endif_3 - $
 746+ 850F 59 6A 55 6C                  dw              DROP, ZERO
 747+ 8513              AcceptN_Endif_3:
 748+ 8513 78 64 2A 6B                  dw          I, CSTORE, ONE_PLUS
 748+ 8517 DB 69
 749+ 8519
 750+ 8519 78 64 1E 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 750+ 851D 80 69
 751+ 851F 1C 64                        dw          ZBRANCH
 752+ 8521 06 00                        dw              AcceptN_Endif_4 - $
 753+ 8523 2F 64                        dw                  C_LEAVE     //              leave
 754+ 8525 06 00                        dw                  AcceptN_Leave - $
 755+ 8527              AcceptN_Endif_4:                                 //      endif
 756+ 8527
 757+ 8527 F8 63                        dw      C_LOOP
 758+ 8529 B6 FF                        dw      AcceptN_Loop -$
 759+ 852B              AcceptN_Leave:
 760+ 852B 43 69                        dw      EXIT
 761+ 852D
 762+ 852D              //  ______________________________________________________________________
 763+ 852D              //
 764+ 852D              // load-        n --
 765+ 852D              // Provided that a stream n is OPEN# via the standart BASIC
 766+ 852D              // it accepts text from stream #n to the normal INTERPRET
 767+ 852D              // up to now, text-file must end with QUIT
 768+ 852D                              Colon_Def LOAD_N, "LOAD-", is_normal
 768+ 852D             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 768+ 852D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 768+ 852D             >
 768+ 852D             >                // dummy db directives used to calculate length of namec
 768+ 852D 4C 4F 41 44 >                db      "LOAD-"
 768+ 8531 2D          >
 768+ 8532             >len_NFA         defl    $ - temp_NFA
 768+ 8532             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 768+ 852D             >
 768+ 852D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 768+ 852E 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 768+ 8532 2D          >
 768+ 8533             >                org     $-1                 // alter last byte of Name just above to set
 768+ 8532 AD          >                db      {b $} | END_BIT     // msb as name end
 768+ 8533             >
 768+ 8533 C2 84       >                dw      last_NFA            // Link to previous definition Name
 768+ 8535             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 768+ 8535 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 768+ 8538             >
 768+ 8538             >
 768+ 8538             >                endif           ; ok        // for other definitions it "points" the correct handler
 768+ 8538             >                // Use of "; ok" to suppress "warning[fwdref]"
 768+ 8538             >
 768+ 8538             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 769+ 8538 32 6E 12 6B                  dw      SOURCE_ID, STORE
 770+ 853C              Load_N_Begin:
 771+ 853C F3 6C 07 6B                  dw          TIB, FETCH
 772+ 8540 86 6A A5 63                  dw          DUP, LIT, 80
 772+ 8544 50 00
 773+ 8546 DB 6A 98 73                  dw          TWO_DUP, BLANKS
 774+ 854A 32 6E 07 6B                  dw          SOURCE_ID, FETCH
 775+ 854E 76 79 86 6A                  dw          ABS_OP, DUP, DEVICE, STORE
 775+ 8552 0C 7B 12 6B
 776+ 8556 48 67                        dw          SELECT
 777+ 8558 CC 84                        dw          ACCEPT_N
 778+ 855A B3 84                        dw          VIDEO
 779+ 855C BF 6A                        dw          TWO_DROP
 780+ 855E 55 6C 69 6D                  dw          ZERO, BLK, STORE
 780+ 8562 12 6B
 781+ 8564 55 6C 73 6D                  dw          ZERO, TO_IN, STORE
 781+ 8568 12 6B
 782+ 856A 8D 77                        dw          INTERPRET
 783+ 856C 0B 67                        dw          QTERMINAL
 784+ 856E 1C 64                        dw      ZBRANCH
 785+ 8570 CC FF                        dw      Load_N_Begin - $
 786+ 8572 43 69                        dw      EXIT
 787+ 8574
 788+ 8574              //  ______________________________________________________________________
 789+ 8574              //
 790+ 8574              // load         n --
 791+ 8574              // if n is positive, it loads screen #n (as usual)
 792+ 8574              // if n is negative, it connects stream #n to the normal INTERPRET
 793+ 8574              // this second way is useful if you want to load any kind of file
 794+ 8574              // provied that it is OPEN# the usual BASIC way.
 795+ 8574                              Colon_Def LOAD, "LOAD", is_normal
 795+ 8574             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 795+ 8574             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 795+ 8574             >
 795+ 8574             >                // dummy db directives used to calculate length of namec
 795+ 8574 4C 4F 41 44 >                db      "LOAD"
 795+ 8578             >len_NFA         defl    $ - temp_NFA
 795+ 8578             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 795+ 8574             >
 795+ 8574 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 795+ 8575 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 795+ 8579             >                org     $-1                 // alter last byte of Name just above to set
 795+ 8578 C4          >                db      {b $} | END_BIT     // msb as name end
 795+ 8579             >
 795+ 8579 2D 85       >                dw      last_NFA            // Link to previous definition Name
 795+ 857B             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 795+ 857B CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 795+ 857E             >
 795+ 857E             >
 795+ 857E             >                endif           ; ok        // for other definitions it "points" the correct handler
 795+ 857E             >                // Use of "; ok" to suppress "warning[fwdref]"
 795+ 857E             >
 795+ 857E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 796+ 857E 86 6A 9A 69                  dw      DUP, ZLESS
 797+ 8582 1C 64                        dw      ZBRANCH
 798+ 8584 08 00                        dw      Load_Else - $
 799+ 8586 35 85                        dw          LOAD_N
 800+ 8588 07 64                        dw      BRANCH
 801+ 858A 04 00                        dw      Load_Endif - $
 802+ 858C              Load_Else:
 803+ 858C 3C 81                        dw          LOAD_P
 804+ 858E              Load_Endif:
 805+ 858E 43 69                        dw      EXIT
 806+ 8590
 807+ 8590
 808+ 8590              //  ______________________________________________________________________
 809+ 8590              //
 810+ 8590              // autoexec     --
 811+ 8590              // this word is called the first time the Forth system boot to
 812+ 8590              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 813+ 8590                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 813+ 8590             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 813+ 8590             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 813+ 8590             >
 813+ 8590             >                // dummy db directives used to calculate length of namec
 813+ 8590 41 55 54 4F >                db      "AUTOEXEC"
 813+ 8594 45 58 45 43 >
 813+ 8598             >len_NFA         defl    $ - temp_NFA
 813+ 8598             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 813+ 8590             >
 813+ 8590 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 813+ 8591 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 813+ 8595 45 58 45 43 >
 813+ 8599             >                org     $-1                 // alter last byte of Name just above to set
 813+ 8598 C3          >                db      {b $} | END_BIT     // msb as name end
 813+ 8599             >
 813+ 8599 74 85       >                dw      last_NFA            // Link to previous definition Name
 813+ 859B             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 813+ 859B CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 813+ 859E             >
 813+ 859E             >
 813+ 859E             >                endif           ; ok        // for other definitions it "points" the correct handler
 813+ 859E             >                // Use of "; ok" to suppress "warning[fwdref]"
 813+ 859E             >
 813+ 859E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 814+ 859E A5 63 0B 00                  dw      LIT, 11
 815+ 85A2 A5 63 03 6C                  dw      LIT, NOOP
 816+ 85A6 A5 63 A3 78                  dw      LIT, Autoexec_Ptr
 817+ 85AA 12 6B                        dw      STORE
 818+ 85AC 7B 85                        dw      LOAD
 819+ 85AE 52 78                        dw      QUIT
 820+ 85B0 43 69                        dw      EXIT
 821+ 85B2
 822+ 85B2
 823+ 85B2              //  ______________________________________________________________________
 824+ 85B2              //
 825+ 85B2              // bye     --
 826+ 85B2              //
 827+ 85B2                              Colon_Def BYE, "BYE", is_normal
 827+ 85B2             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 827+ 85B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 827+ 85B2             >
 827+ 85B2             >                // dummy db directives used to calculate length of namec
 827+ 85B2 42 59 45    >                db      "BYE"
 827+ 85B5             >len_NFA         defl    $ - temp_NFA
 827+ 85B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 827+ 85B2             >
 827+ 85B2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 827+ 85B3 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 827+ 85B6             >                org     $-1                 // alter last byte of Name just above to set
 827+ 85B5 C5          >                db      {b $} | END_BIT     // msb as name end
 827+ 85B6             >
 827+ 85B6 90 85       >                dw      last_NFA            // Link to previous definition Name
 827+ 85B8             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 827+ 85B8 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 827+ 85BB             >
 827+ 85BB             >
 827+ 85BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 827+ 85BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 827+ 85BB             >
 827+ 85BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 828+ 85BB CB 7D                        dw      FLUSH
 829+ 85BD FA 7C                        dw      EMPTY_BUFFERS
 830+ 85BF 94 7B 07 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 830+ 85C3 8A 67 59 6A
 831+ 85C7 55 6C C5 6C                  dw      ZERO, PLUS_ORIGIN
 832+ 85CB 3B 79                        dw      BASIC
 833+ 85CD
 834+ 85CD              //  ______________________________________________________________________
 835+ 85CD              //
 836+ 85CD              // invv     --
 837+ 85CD              //
 838+ 85CD              //              Colon_Def INVV, "INVV", is_normal
 839+ 85CD              //              dw      LIT, 20, EMITC, ONE, EMITC
 840+ 85CD              //              dw      EXIT
 841+ 85CD
 842+ 85CD              //  ______________________________________________________________________
 843+ 85CD              //
 844+ 85CD              // truv     --
 845+ 85CD              //
 846+ 85CD              //              Colon_Def TRUV, "TRUV", is_normal
 847+ 85CD              //              dw      LIT, 20, EMITC, ZERO, EMITC
 848+ 85CD              //              dw      EXIT
 849+ 85CD
 850+ 85CD              //  ______________________________________________________________________
 851+ 85CD              //
 852+ 85CD              // mark     --
 853+ 85CD              //
 854+ 85CD              //              Colon_Def MARK, "MARK", is_normal
 855+ 85CD              //              dw      INVV, TYPE, TRUV
 856+ 85CD              //              dw      EXIT
 857+ 85CD
 858+ 85CD              //  ______________________________________________________________________
 859+ 85CD              //
 860+ 85CD              // back     --
 861+ 85CD              //
 862+ 85CD                              Colon_Def BACK, "BACK", is_normal
 862+ 85CD             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 862+ 85CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 862+ 85CD             >
 862+ 85CD             >                // dummy db directives used to calculate length of namec
 862+ 85CD 42 41 43 4B >                db      "BACK"
 862+ 85D1             >len_NFA         defl    $ - temp_NFA
 862+ 85D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 862+ 85CD             >
 862+ 85CD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 862+ 85CE 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 862+ 85D2             >                org     $-1                 // alter last byte of Name just above to set
 862+ 85D1 CB          >                db      {b $} | END_BIT     // msb as name end
 862+ 85D2             >
 862+ 85D2 B2 85       >                dw      last_NFA            // Link to previous definition Name
 862+ 85D4             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 862+ 85D4 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 862+ 85D7             >
 862+ 85D7             >
 862+ 85D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 862+ 85D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 862+ 85D7             >
 862+ 85D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 863+ 85D7 5F 6E B4 6E                  dw      HERE, SUBTRACT, COMMA
 863+ 85DB 7D 6E
 864+ 85DD 43 69                        dw      EXIT
 865+ 85DF
 866+ 85DF              //  ______________________________________________________________________
 867+ 85DF              //
 868+ 85DF              // if          ( -- a 2 ) \ compile-time
 869+ 85DF              // IF ... THEN
 870+ 85DF              // IF ... ELSE ... ENDIF
 871+ 85DF                              Colon_Def IF, "IF", is_immediate
 871+ 85DF             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 871+ 85DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 871+ 85DF             >
 871+ 85DF             >                // dummy db directives used to calculate length of namec
 871+ 85DF 49 46       >                db      "IF"
 871+ 85E1             >len_NFA         defl    $ - temp_NFA
 871+ 85E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 871+ 85DF             >
 871+ 85DF C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 871+ 85E0 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 871+ 85E2             >                org     $-1                 // alter last byte of Name just above to set
 871+ 85E1 C6          >                db      {b $} | END_BIT     // msb as name end
 871+ 85E2             >
 871+ 85E2 CD 85       >                dw      last_NFA            // Link to previous definition Name
 871+ 85E4             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 871+ 85E4 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 871+ 85E7             >
 871+ 85E7             >
 871+ 85E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 871+ 85E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 871+ 85E7             >
 871+ 85E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 872+ 85E7 CD 70 1C 64                  dw      COMPILE, ZBRANCH
 873+ 85EB 5F 6E 55 6C                  dw      HERE, ZERO, COMMA
 873+ 85EF 7D 6E
 874+ 85F1 67 6C                        dw      TWO
 875+ 85F3 43 69                        dw      EXIT
 876+ 85F5
 877+ 85F5              //  ______________________________________________________________________
 878+ 85F5              //
 879+ 85F5              // then        ( a 2 -- ) \ compile-time
 880+ 85F5              //
 881+ 85F5                              Colon_Def THEN, "THEN", is_immediate
 881+ 85F5             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 881+ 85F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 881+ 85F5             >
 881+ 85F5             >                // dummy db directives used to calculate length of namec
 881+ 85F5 54 48 45 4E >                db      "THEN"
 881+ 85F9             >len_NFA         defl    $ - temp_NFA
 881+ 85F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 881+ 85F5             >
 881+ 85F5 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 881+ 85F6 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 881+ 85FA             >                org     $-1                 // alter last byte of Name just above to set
 881+ 85F9 CE          >                db      {b $} | END_BIT     // msb as name end
 881+ 85FA             >
 881+ 85FA DF 85       >                dw      last_NFA            // Link to previous definition Name
 881+ 85FC             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 881+ 85FC CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 881+ 85FF             >
 881+ 85FF             >
 881+ 85FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 881+ 85FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 881+ 85FF             >
 881+ 85FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 882+ 85FF 4F 70                        dw      QCOMP
 883+ 8601 67 6C 80 70                  dw      TWO, QPAIRS
 884+ 8605 5F 6E 4B 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 884+ 8609 B4 6E 7B 6A
 884+ 860D 12 6B
 885+ 860F 43 69                        dw      EXIT
 886+ 8611
 887+ 8611              //  ______________________________________________________________________
 888+ 8611              //
 889+ 8611              // endif       ( a 2 -- ) \ compile-time
 890+ 8611              //
 891+ 8611                              Colon_Def ENDIF, "ENDIF", is_immediate
 891+ 8611             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 891+ 8611             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 891+ 8611             >
 891+ 8611             >                // dummy db directives used to calculate length of namec
 891+ 8611 45 4E 44 49 >                db      "ENDIF"
 891+ 8615 46          >
 891+ 8616             >len_NFA         defl    $ - temp_NFA
 891+ 8616             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 891+ 8611             >
 891+ 8611 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 891+ 8612 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 891+ 8616 46          >
 891+ 8617             >                org     $-1                 // alter last byte of Name just above to set
 891+ 8616 C6          >                db      {b $} | END_BIT     // msb as name end
 891+ 8617             >
 891+ 8617 F5 85       >                dw      last_NFA            // Link to previous definition Name
 891+ 8619             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 891+ 8619 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 891+ 861C             >
 891+ 861C             >
 891+ 861C             >                endif           ; ok        // for other definitions it "points" the correct handler
 891+ 861C             >                // Use of "; ok" to suppress "warning[fwdref]"
 891+ 861C             >
 891+ 861C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 892+ 861C FC 85                        dw      THEN
 893+ 861E 43 69                        dw      EXIT
 894+ 8620
 895+ 8620              //  ______________________________________________________________________
 896+ 8620              //
 897+ 8620              // else        ( a1 2 -- a2 2 ) \ compile-time
 898+ 8620              //
 899+ 8620                              Colon_Def ELSE, "ELSE", is_immediate
 899+ 8620             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 899+ 8620             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 899+ 8620             >
 899+ 8620             >                // dummy db directives used to calculate length of namec
 899+ 8620 45 4C 53 45 >                db      "ELSE"
 899+ 8624             >len_NFA         defl    $ - temp_NFA
 899+ 8624             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 899+ 8620             >
 899+ 8620 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 899+ 8621 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 899+ 8625             >                org     $-1                 // alter last byte of Name just above to set
 899+ 8624 C5          >                db      {b $} | END_BIT     // msb as name end
 899+ 8625             >
 899+ 8625 11 86       >                dw      last_NFA            // Link to previous definition Name
 899+ 8627             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 899+ 8627 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 899+ 862A             >
 899+ 862A             >
 899+ 862A             >                endif           ; ok        // for other definitions it "points" the correct handler
 899+ 862A             >                // Use of "; ok" to suppress "warning[fwdref]"
 899+ 862A             >
 899+ 862A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 900+ 862A 4F 70                        dw      QCOMP
 901+ 862C 67 6C 80 70                  dw      TWO, QPAIRS
 902+ 8630 CD 70 07 64                  dw      COMPILE, BRANCH
 903+ 8634 5F 6E 55 6C                  dw      HERE, ZERO, COMMA
 903+ 8638 7D 6E
 904+ 863A 7B 6A 67 6C                  dw      SWAP, TWO, THEN
 904+ 863E FC 85
 905+ 8640 67 6C                        dw      TWO
 906+ 8642 43 69                        dw      EXIT
 907+ 8644
 908+ 8644              //  ______________________________________________________________________
 909+ 8644              //
 910+ 8644              // begin        ( -- a 1 ) \ compile-time
 911+ 8644              // BEGIN ... AGAIN
 912+ 8644              // BEGIN ... f UNTIL
 913+ 8644              // BEGIN ... f WHILE ... REPEAT
 914+ 8644                              Colon_Def BEGIN, "BEGIN", is_immediate
 914+ 8644             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 914+ 8644             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 914+ 8644             >
 914+ 8644             >                // dummy db directives used to calculate length of namec
 914+ 8644 42 45 47 49 >                db      "BEGIN"
 914+ 8648 4E          >
 914+ 8649             >len_NFA         defl    $ - temp_NFA
 914+ 8649             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 914+ 8644             >
 914+ 8644 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 914+ 8645 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 914+ 8649 4E          >
 914+ 864A             >                org     $-1                 // alter last byte of Name just above to set
 914+ 8649 CE          >                db      {b $} | END_BIT     // msb as name end
 914+ 864A             >
 914+ 864A 20 86       >                dw      last_NFA            // Link to previous definition Name
 914+ 864C             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 914+ 864C CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 914+ 864F             >
 914+ 864F             >
 914+ 864F             >                endif           ; ok        // for other definitions it "points" the correct handler
 914+ 864F             >                // Use of "; ok" to suppress "warning[fwdref]"
 914+ 864F             >
 914+ 864F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 915+ 864F 4F 70                        dw      QCOMP
 916+ 8651 5F 6E                        dw      HERE
 917+ 8653 67 6C                        dw      TWO
 918+ 8655 43 69                        dw      EXIT
 919+ 8657
 920+ 8657              //  ______________________________________________________________________
 921+ 8657              //
 922+ 8657              // again        ( a 1 -- ) \ compile-time
 923+ 8657                              Colon_Def AGAIN, "AGAIN", is_immediate
 923+ 8657             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 923+ 8657             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 923+ 8657             >
 923+ 8657             >                // dummy db directives used to calculate length of namec
 923+ 8657 41 47 41 49 >                db      "AGAIN"
 923+ 865B 4E          >
 923+ 865C             >len_NFA         defl    $ - temp_NFA
 923+ 865C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 923+ 8657             >
 923+ 8657 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 923+ 8658 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 923+ 865C 4E          >
 923+ 865D             >                org     $-1                 // alter last byte of Name just above to set
 923+ 865C CE          >                db      {b $} | END_BIT     // msb as name end
 923+ 865D             >
 923+ 865D 44 86       >                dw      last_NFA            // Link to previous definition Name
 923+ 865F             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 923+ 865F CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 923+ 8662             >
 923+ 8662             >
 923+ 8662             >                endif           ; ok        // for other definitions it "points" the correct handler
 923+ 8662             >                // Use of "; ok" to suppress "warning[fwdref]"
 923+ 8662             >
 923+ 8662             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 924+ 8662 4F 70                        dw      QCOMP
 925+ 8664 67 6C 80 70                  dw      TWO, QPAIRS
 926+ 8668 CD 70 07 64                  dw      COMPILE, BRANCH
 927+ 866C D4 85                        dw      BACK
 928+ 866E 43 69                        dw      EXIT
 929+ 8670
 930+ 8670              //  ______________________________________________________________________
 931+ 8670              //
 932+ 8670              // until        ( a 1 -- ) \ compile-time
 933+ 8670                              Colon_Def UNTIL, "UNTIL", is_immediate
 933+ 8670             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 933+ 8670             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 933+ 8670             >
 933+ 8670             >                // dummy db directives used to calculate length of namec
 933+ 8670 55 4E 54 49 >                db      "UNTIL"
 933+ 8674 4C          >
 933+ 8675             >len_NFA         defl    $ - temp_NFA
 933+ 8675             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 933+ 8670             >
 933+ 8670 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 933+ 8671 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 933+ 8675 4C          >
 933+ 8676             >                org     $-1                 // alter last byte of Name just above to set
 933+ 8675 CC          >                db      {b $} | END_BIT     // msb as name end
 933+ 8676             >
 933+ 8676 57 86       >                dw      last_NFA            // Link to previous definition Name
 933+ 8678             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 933+ 8678 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 933+ 867B             >
 933+ 867B             >
 933+ 867B             >                endif           ; ok        // for other definitions it "points" the correct handler
 933+ 867B             >                // Use of "; ok" to suppress "warning[fwdref]"
 933+ 867B             >
 933+ 867B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 934+ 867B 4F 70                        dw      QCOMP
 935+ 867D 67 6C 80 70                  dw      TWO, QPAIRS
 936+ 8681 CD 70 1C 64                  dw      COMPILE, ZBRANCH
 937+ 8685 D4 85                        dw      BACK
 938+ 8687 43 69                        dw      EXIT
 939+ 8689
 940+ 8689              //  ______________________________________________________________________
 941+ 8689              //
 942+ 8689              // end          ( a 1 -- ) \ compile-time
 943+ 8689                              Colon_Def END, "END", is_immediate
 943+ 8689             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 943+ 8689             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 943+ 8689             >
 943+ 8689             >                // dummy db directives used to calculate length of namec
 943+ 8689 45 4E 44    >                db      "END"
 943+ 868C             >len_NFA         defl    $ - temp_NFA
 943+ 868C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 943+ 8689             >
 943+ 8689 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 943+ 868A 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 943+ 868D             >                org     $-1                 // alter last byte of Name just above to set
 943+ 868C C4          >                db      {b $} | END_BIT     // msb as name end
 943+ 868D             >
 943+ 868D 70 86       >                dw      last_NFA            // Link to previous definition Name
 943+ 868F             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 943+ 868F CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 943+ 8692             >
 943+ 8692             >
 943+ 8692             >                endif           ; ok        // for other definitions it "points" the correct handler
 943+ 8692             >                // Use of "; ok" to suppress "warning[fwdref]"
 943+ 8692             >
 943+ 8692             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 944+ 8692 78 86                        dw      UNTIL
 945+ 8694 43 69                        dw      EXIT
 946+ 8696
 947+ 8696              //  ______________________________________________________________________
 948+ 8696              //
 949+ 8696              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 950+ 8696                              Colon_Def WHILE, "WHILE", is_immediate
 950+ 8696             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 950+ 8696             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 950+ 8696             >
 950+ 8696             >                // dummy db directives used to calculate length of namec
 950+ 8696 57 48 49 4C >                db      "WHILE"
 950+ 869A 45          >
 950+ 869B             >len_NFA         defl    $ - temp_NFA
 950+ 869B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 950+ 8696             >
 950+ 8696 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 950+ 8697 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 950+ 869B 45          >
 950+ 869C             >                org     $-1                 // alter last byte of Name just above to set
 950+ 869B C5          >                db      {b $} | END_BIT     // msb as name end
 950+ 869C             >
 950+ 869C 89 86       >                dw      last_NFA            // Link to previous definition Name
 950+ 869E             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 950+ 869E CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 950+ 86A1             >
 950+ 86A1             >
 950+ 86A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 950+ 86A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 950+ 86A1             >
 950+ 86A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 951+ 86A1 E4 85                        dw      IF
 952+ 86A3              //              dw      TWO_PLUS // ( that is 4 )
 953+ 86A3 CB 6A                        dw      TWO_SWAP
 954+ 86A5 43 69                        dw      EXIT
 955+ 86A7
 956+ 86A7              //  ______________________________________________________________________
 957+ 86A7              //
 958+ 86A7              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 959+ 86A7                              Colon_Def REPEAT, "REPEAT", is_immediate
 959+ 86A7             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 959+ 86A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 959+ 86A7             >
 959+ 86A7             >                // dummy db directives used to calculate length of namec
 959+ 86A7 52 45 50 45 >                db      "REPEAT"
 959+ 86AB 41 54       >
 959+ 86AD             >len_NFA         defl    $ - temp_NFA
 959+ 86AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 959+ 86A7             >
 959+ 86A7 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 959+ 86A8 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 959+ 86AC 41 54       >
 959+ 86AE             >                org     $-1                 // alter last byte of Name just above to set
 959+ 86AD D4          >                db      {b $} | END_BIT     // msb as name end
 959+ 86AE             >
 959+ 86AE 96 86       >                dw      last_NFA            // Link to previous definition Name
 959+ 86B0             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 959+ 86B0 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 959+ 86B3             >
 959+ 86B3             >
 959+ 86B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 959+ 86B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 959+ 86B3             >
 959+ 86B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 960+ 86B3 5F 86                        dw      AGAIN
 961+ 86B5              //              dw      TWO_MINUS
 962+ 86B5 FC 85                        dw      THEN
 963+ 86B7 43 69                        dw      EXIT
 964+ 86B9
 965+ 86B9              //  ______________________________________________________________________
 966+ 86B9              //
 967+ 86B9              // ?do-
 968+ 86B9              // special version of "BACK" used by ?DO and LOOP
 969+ 86B9                              Colon_Def C_DO_BACK, "?DO-", is_normal
 969+ 86B9             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 969+ 86B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 969+ 86B9             >
 969+ 86B9             >                // dummy db directives used to calculate length of namec
 969+ 86B9 3F 44 4F 2D >                db      "?DO-"
 969+ 86BD             >len_NFA         defl    $ - temp_NFA
 969+ 86BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 969+ 86B9             >
 969+ 86B9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 969+ 86BA 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 969+ 86BE             >                org     $-1                 // alter last byte of Name just above to set
 969+ 86BD AD          >                db      {b $} | END_BIT     // msb as name end
 969+ 86BE             >
 969+ 86BE A7 86       >                dw      last_NFA            // Link to previous definition Name
 969+ 86C0             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 969+ 86C0 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 969+ 86C3             >
 969+ 86C3             >
 969+ 86C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 969+ 86C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 969+ 86C3             >
 969+ 86C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 970+ 86C3 D4 85                        dw      BACK
 971+ 86C5              CDoBack_Begin:
 972+ 86C5 13 69 E5 6D                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 972+ 86C9 07 6B B4 6E
 973+ 86CD 1C 64                        dw      ZBRANCH
 974+ 86CF 0A 00                        dw      CDoBack_While - $
 975+ 86D1 EF 69 FC 85                  dw          TWO_PLUS, THEN
 976+ 86D5 07 64                        dw      BRANCH
 977+ 86D7 EE FF                        dw      CDoBack_Begin - $
 978+ 86D9              CDoBack_While:
 979+ 86D9 94 70 E5 6D                  dw      QCSP, CSP, STORE
 979+ 86DD 12 6B
 980+ 86DF 43 69                        dw      EXIT
 981+ 86E1
 982+ 86E1              //  ______________________________________________________________________
 983+ 86E1              //
 984+ 86E1              // do
 985+ 86E1              // DO  ... LOOP
 986+ 86E1              // DO  ... n +LOOP
 987+ 86E1              // ?DO ... LOOP
 988+ 86E1              // ?DO ... n +LOOP
 989+ 86E1                              Colon_Def DO, "DO", is_immediate
 989+ 86E1             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 989+ 86E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 989+ 86E1             >
 989+ 86E1             >                // dummy db directives used to calculate length of namec
 989+ 86E1 44 4F       >                db      "DO"
 989+ 86E3             >len_NFA         defl    $ - temp_NFA
 989+ 86E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 989+ 86E1             >
 989+ 86E1 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 989+ 86E2 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 989+ 86E4             >                org     $-1                 // alter last byte of Name just above to set
 989+ 86E3 CF          >                db      {b $} | END_BIT     // msb as name end
 989+ 86E4             >
 989+ 86E4 B9 86       >                dw      last_NFA            // Link to previous definition Name
 989+ 86E6             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 989+ 86E6 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 989+ 86E9             >
 989+ 86E9             >
 989+ 86E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 989+ 86E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 989+ 86E9             >
 989+ 86E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 990+ 86E9 CD 70 70 64                  dw      COMPILE, C_DO
 991+ 86ED E5 6D 07 6B                  dw      CSP, FETCH, STORE_CSP
 991+ 86F1 20 70
 992+ 86F3 5F 6E 70 6C                  dw      HERE, THREE
 993+ 86F7 43 69                        dw      EXIT
 994+ 86F9
 995+ 86F9              //  ______________________________________________________________________
 996+ 86F9              //
 997+ 86F9              // loop
 998+ 86F9                              Colon_Def LOOP, "LOOP", is_immediate
 998+ 86F9             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 998+ 86F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 998+ 86F9             >
 998+ 86F9             >                // dummy db directives used to calculate length of namec
 998+ 86F9 4C 4F 4F 50 >                db      "LOOP"
 998+ 86FD             >len_NFA         defl    $ - temp_NFA
 998+ 86FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 998+ 86F9             >
 998+ 86F9 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 998+ 86FA 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 998+ 86FE             >                org     $-1                 // alter last byte of Name just above to set
 998+ 86FD D0          >                db      {b $} | END_BIT     // msb as name end
 998+ 86FE             >
 998+ 86FE E1 86       >                dw      last_NFA            // Link to previous definition Name
 998+ 8700             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 998+ 8700 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 998+ 8703             >
 998+ 8703             >
 998+ 8703             >                endif           ; ok        // for other definitions it "points" the correct handler
 998+ 8703             >                // Use of "; ok" to suppress "warning[fwdref]"
 998+ 8703             >
 998+ 8703             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 999+ 8703 70 6C 80 70                  dw      THREE, QPAIRS
1000+ 8707 CD 70 F8 63                  dw      COMPILE, C_LOOP
1001+ 870B C0 86                        dw      C_DO_BACK
1002+ 870D 43 69                        dw      EXIT
1003+ 870F
1004+ 870F              //  ______________________________________________________________________
1005+ 870F              //
1006+ 870F              // +loop
1007+ 870F                              Colon_Def PLOOP, "+LOOP", is_immediate
1007+ 870F             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1007+ 870F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1007+ 870F             >
1007+ 870F             >                // dummy db directives used to calculate length of namec
1007+ 870F 2B 4C 4F 4F >                db      "+LOOP"
1007+ 8713 50          >
1007+ 8714             >len_NFA         defl    $ - temp_NFA
1007+ 8714             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1007+ 870F             >
1007+ 870F C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1007+ 8710 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1007+ 8714 50          >
1007+ 8715             >                org     $-1                 // alter last byte of Name just above to set
1007+ 8714 D0          >                db      {b $} | END_BIT     // msb as name end
1007+ 8715             >
1007+ 8715 F9 86       >                dw      last_NFA            // Link to previous definition Name
1007+ 8717             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1007+ 8717 CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1007+ 871A             >
1007+ 871A             >
1007+ 871A             >                endif           ; ok        // for other definitions it "points" the correct handler
1007+ 871A             >                // Use of "; ok" to suppress "warning[fwdref]"
1007+ 871A             >
1007+ 871A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1008+ 871A 70 6C 80 70                  dw      THREE, QPAIRS
1009+ 871E CD 70 C3 63                  dw      COMPILE, C_PLOOP
1010+ 8722 C0 86                        dw      C_DO_BACK
1011+ 8724 43 69                        dw      EXIT
1012+ 8726
1013+ 8726              //  ______________________________________________________________________
1014+ 8726              //
1015+ 8726              // ?do
1016+ 8726                              Colon_Def QDO, "?DO", is_immediate
1016+ 8726             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1016+ 8726             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1016+ 8726             >
1016+ 8726             >                // dummy db directives used to calculate length of namec
1016+ 8726 3F 44 4F    >                db      "?DO"
1016+ 8729             >len_NFA         defl    $ - temp_NFA
1016+ 8729             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1016+ 8726             >
1016+ 8726 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1016+ 8727 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1016+ 872A             >                org     $-1                 // alter last byte of Name just above to set
1016+ 8729 CF          >                db      {b $} | END_BIT     // msb as name end
1016+ 872A             >
1016+ 872A 0F 87       >                dw      last_NFA            // Link to previous definition Name
1016+ 872C             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1016+ 872C CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1016+ 872F             >
1016+ 872F             >
1016+ 872F             >                endif           ; ok        // for other definitions it "points" the correct handler
1016+ 872F             >                // Use of "; ok" to suppress "warning[fwdref]"
1016+ 872F             >
1016+ 872F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1017+ 872F CD 70 45 64                  dw      COMPILE, C_Q_DO
1018+ 8733 E5 6D 07 6B                  dw      CSP, FETCH, STORE_CSP
1018+ 8737 20 70
1019+ 8739 5F 6E 55 6C                  dw      HERE, ZERO, COMMA, ZERO
1019+ 873D 7D 6E 55 6C
1020+ 8741 5F 6E 70 6C                  dw      HERE, THREE
1021+ 8745 43 69                        dw      EXIT
1022+ 8747
1023+ 8747              Latest_Definition:
1024+ 8747              //  ______________________________________________________________________
1025+ 8747              //
1026+ 8747              // \
1027+ 8747                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1027+ 8747             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1027+ 8747             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1027+ 8747             >
1027+ 8747             >                // dummy db directives used to calculate length of namec
1027+ 8747 5C          >                db      "\\"
1027+ 8748             >len_NFA         defl    $ - temp_NFA
1027+ 8748             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1027+ 8747             >
1027+ 8747 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1027+ 8748 5C          >                db      "\\"               // name string in 7-bit ascii, but
1027+ 8749             >                org     $-1                 // alter last byte of Name just above to set
1027+ 8748 DC          >                db      {b $} | END_BIT     // msb as name end
1027+ 8749             >
1027+ 8749 26 87       >                dw      last_NFA            // Link to previous definition Name
1027+ 874B             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1027+ 874B CD DC 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1027+ 874E             >
1027+ 874E             >
1027+ 874E             >                endif           ; ok        // for other definitions it "points" the correct handler
1027+ 874E             >                // Use of "; ok" to suppress "warning[fwdref]"
1027+ 874E             >
1027+ 874E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1028+ 874E 69 6D 07 6B                  dw      BLK, FETCH
1029+ 8752 1C 64                        dw      ZBRANCH
1030+ 8754 30 00                        dw      Backslash_Else_1 - $
1031+ 8756 69 6D 07 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1031+ 875A 5E 6C F5 6E
1032+ 875E 1C 64                        dw          ZBRANCH
1033+ 8760 18 00                        dw          Backslash_Else_2 - $
1034+ 8762 73 6D 07 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1034+ 8766 8F 6C 66 7A
1034+ 876A 8F 6C
1035+ 876C 7B 6A B4 6E                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1035+ 8770 73 6D E8 6A
1036+ 8774 07 64                        dw          BRANCH
1037+ 8776 0A 00                        dw          Backslash_Endif_2 - $
1038+ 8778              Backslash_Else_2:
1039+ 8778 9C 6C 08 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1039+ 877C 73 6D 12 6B
1040+ 8780              Backslash_Endif_2:
1041+ 8780 07 64                        dw      BRANCH
1042+ 8782 0A 00                        dw      Backslash_Endif_1 - $
1043+ 8784              Backslash_Else_1:
1044+ 8784 A5 63 50 00                  dw          LIT, 80, TO_IN, STORE
1044+ 8788 73 6D 12 6B
1045+ 878C              Backslash_Endif_1:
1046+ 878C 43 69                        dw      EXIT
1047+ 878E
1048+ 878E              Fence_Word:
1049+ 878E              //  ______________________________________________________________________
1050+ 878E              //
1051+ 878E
1052+ 878E 00           Here_Dictionary db      0
1053+ 878F
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
 115  878F
 116  878F              // now we save the compiled file so we can either run it or debug it
 117  878F                              SAVENEX OPEN "output/main.nex", ORIGIN
 118  878F                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 119  878F                              SAVENEX CFG  0
 120  878F                              SAVENEX BANK 2, 0
 121  878F                              SAVENEX AUTO
 122  878F                              SAVENEX CLOSE
 123  878F
 124  878F              //              PAGE 7 ;set 7 page to current slot
 125  878F              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 126  878F              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 127  878F
 128  878F                              SAVETAP "output/F15f.tap", CODE, "forth15f", ORIGIN, 10000
 129  878F
 130  878F                              SAVEBIN "output/forth15f.bin", ORIGIN, 10000
 131  878F
 132  878F                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
