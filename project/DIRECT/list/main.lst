# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.6 NextZXOS version
   7  0000              //  build 20220219
   8  0000              //
   9  0000              //  Direct-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2022
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000              //ORIGIN          equ     $8CC1                   // for binary comparison
  69  0000                              endif
  70  0000              //  ______________________________________________________________________
  71  0000
  72  0000                              if (  0 == DEBUGGING )
  73  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  74  0000                              endif
  75  0000              //  ______________________________________________________________________
  76  0000
  77  0000                              if (  1 == DEBUGGING )
  78  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  79  0000                              endif
  80  0000              //  ______________________________________________________________________
  81  0000
  82  0000                              DEVICE  ZXSPECTRUMNEXT
  83  0000
  84  0000                              ORG     ORIGIN
  85  62E6
  86  62E6                              if ( -1 == DEBUGGING )
  87  62E6 00 00 00...                  ds 128                            // for binary comparison
  88  62EA                              endif
  89  6366
  90  6366              //  ______________________________________________________________________
  91  6366              //
  92  6366              //  Naming convention for Label vs Forth correspondance
  93  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  94  6366              //    - Leading "0" is converted into "Z_"
  95  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  96  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  97  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  98  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  99  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 100  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 101  6366              //    - Equal sign "=" is converted in EQUAL
 102  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 103  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 104  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 105  6366              //    - Exclamation mark "!" is converted in STORE
 106  6366              //    - At-Sign "@" is converted in FETCH
 107  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 108  6366
 109  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~
 125+ 6366 ~
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
 110  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 3E 79                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 3E 79                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 6E 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 B5 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 B5 87        DP_origin       dw      Fence_Word
  39+ 6386 46 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E
 100+ 639E
 101+ 639E
 102+ 639E
 103+ 639E E9                           jp      (hl)                // and jump to it
 104+ 639F                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 639F
 106+ 639F              //  ______________________________________________________________________
 107+ 639F              //
 108+ 639F              // lit          -- x
 109+ 639F              // puts on top of stack the value of the following word.
 110+ 639F              // it is compiled in colon definition before a literal number
 111+ 639F
 112+ 639F                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 639F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 639F             >
 112+ 639F             >                // dummy db directives used to calculate length of namec
 112+ 639F 4C 49 54    >                db      "LIT"
 112+ 63A2             >len_NFA         defl    $ - temp_NFA
 112+ 63A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 639F             >
 112+ 639F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A0 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A3             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A2 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A3             >
 112+ 63A3 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A5             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 112+ 63A5 ~           >
 112+ 63A5 ~           >
 112+ 63A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63A5             >
 112+ 63A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63A5
 114+ 63A5 0A                           ld      a, (bc)
 115+ 63A6 03                           inc     bc
 116+ 63A7 6F                           ld      l, a
 117+ 63A8 0A                           ld      a, (bc)
 118+ 63A9 03                           inc     bc
 119+ 63AA 67                           ld      h, a
 120+ 63AB                              psh1
 120+ 63AB E5          >                push    hl
 120+ 63AC DD E9       >                jp      (ix)
 121+ 63AE
 122+ 63AE              //  ______________________________________________________________________
 123+ 63AE              //
 124+ 63AE              // execute      i*x xt -- j*x
 125+ 63AE              // execution token. usually xt is given by CFA
 126+ 63AE
 127+ 63AE                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63AE             >
 127+ 63AE             >                // dummy db directives used to calculate length of namec
 127+ 63AE 45 58 45 43 >                db      "EXECUTE"
 127+ 63B2 55 54 45    >
 127+ 63B5             >len_NFA         defl    $ - temp_NFA
 127+ 63B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63AE             >
 127+ 63AE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63AF 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B3 55 54 45    >
 127+ 63B6             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63B5 C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63B6             >
 127+ 63B6 9F 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63B8             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 127+ 63B8 ~           >
 127+ 63B8 ~           >
 127+ 63B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63B8             >
 127+ 63B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63B8 E1                           pop     hl
 129+ 63B9 E9                           jp      (hl)
 130+ 63BA              //              jr      Exec_Ptr
 131+ 63BA
 132+ 63BA
 133+ 63BA              //  ______________________________________________________________________
 134+ 63BA              //
 135+ 63BA              // branch       --
 136+ 63BA              // unconditional branch in colon definition using the following cell as an offset from current IP value
 137+ 63BA              // compiled by ELSE, AGAIN and some other immediate words
 138+ 63BA
 139+ 63BA                              New_Def BRANCH, "BRANCH", is_code, is_normal
 139+ 63BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 63BA             >
 139+ 63BA             >                // dummy db directives used to calculate length of namec
 139+ 63BA 42 52 41 4E >                db      "BRANCH"
 139+ 63BE 43 48       >
 139+ 63C0             >len_NFA         defl    $ - temp_NFA
 139+ 63C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 63BA             >
 139+ 63BA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 63BB 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 139+ 63BF 43 48       >
 139+ 63C1             >                org     $-1                 // alter last byte of Name just above to set
 139+ 63C0 C8          >                db      {b $} | END_BIT     // msb as name end
 139+ 63C1             >
 139+ 63C1 AE 63       >                dw      last_NFA            // Link to previous definition Name
 139+ 63C3             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 63C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 139+ 63C3 ~           >
 139+ 63C3 ~           >
 139+ 63C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 63C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 63C3             >
 139+ 63C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 140+ 63C3              Branch_Ptr:
 141+ 63C3 60                           ld      h, b
 142+ 63C4 69                           ld      l, c
 143+ 63C5 5E                           ld      e, (hl)
 144+ 63C6 23                           inc     hl
 145+ 63C7 56                           ld      d, (hl)
 146+ 63C8 2B                           dec     hl                  // offset is calculated from current IP
 147+ 63C9 19                           add     hl, de
 148+ 63CA 4D                           ld      c, l
 149+ 63CB 44                           ld      b, h
 150+ 63CC                              next
 150+ 63CC DD E9       >                jp      (ix)
 151+ 63CE
 152+ 63CE
 153+ 63CE              //  ______________________________________________________________________
 154+ 63CE              //
 155+ 63CE              // 0branch      f --
 156+ 63CE              // conditional branch if the top-of-stack is ZERO or FALSE.
 157+ 63CE              // compiled by IF, UNTIL and some other immediate words
 158+ 63CE
 159+ 63CE                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 159+ 63CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 63CE             >
 159+ 63CE             >                // dummy db directives used to calculate length of namec
 159+ 63CE 30 42 52 41 >                db      "0BRANCH"
 159+ 63D2 4E 43 48    >
 159+ 63D5             >len_NFA         defl    $ - temp_NFA
 159+ 63D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 63CE             >
 159+ 63CE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 63CF 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 159+ 63D3 4E 43 48    >
 159+ 63D6             >                org     $-1                 // alter last byte of Name just above to set
 159+ 63D5 C8          >                db      {b $} | END_BIT     // msb as name end
 159+ 63D6             >
 159+ 63D6 BA 63       >                dw      last_NFA            // Link to previous definition Name
 159+ 63D8             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 63D8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 159+ 63D8 ~           >
 159+ 63D8 ~           >
 159+ 63D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 63D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 63D8             >
 159+ 63D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 63D8              ZBranch_Ptr:
 161+ 63D8 E1                           pop     hl
 162+ 63D9 7D                           ld      a, l
 163+ 63DA B4                           or      h
 164+ 63DB CA C3 63                     jp      z, Branch_Ptr
 165+ 63DE 03                           inc     bc                  // if not branch, skip offset cell.
 166+ 63DF 03                           inc     bc
 167+ 63E0                              next
 167+ 63E0 DD E9       >                jp      (ix)
 168+ 63E2
 169+ 63E2              //  ______________________________________________________________________
 170+ 63E2              //
 171+ 63E2              // (+loop)       --
 172+ 63E2              // compiled by +LOOP. it uses the top two values of return-stack to
 173+ 63E2              // keep track of index and limit, they are accessed via I and I'
 174+ 63E2                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 174+ 63E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 63E2             >
 174+ 63E2             >                // dummy db directives used to calculate length of namec
 174+ 63E2 28 2B 4C 4F >                db      "(+LOOP)"
 174+ 63E6 4F 50 29    >
 174+ 63E9             >len_NFA         defl    $ - temp_NFA
 174+ 63E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 63E2             >
 174+ 63E2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 63E3 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 174+ 63E7 4F 50 29    >
 174+ 63EA             >                org     $-1                 // alter last byte of Name just above to set
 174+ 63E9 A9          >                db      {b $} | END_BIT     // msb as name end
 174+ 63EA             >
 174+ 63EA CE 63       >                dw      last_NFA            // Link to previous definition Name
 174+ 63EC             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 63EC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 174+ 63EC ~           >
 174+ 63EC ~           >
 174+ 63EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 63EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 63EC             >
 174+ 63EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 63EC
 176+ 63EC              Loop_Ptr:
 177+ 63EC D9                           exx
 178+ 63ED                              ldhlrp                      // ld hl,rp macro 30h +Origin
 178+ 63ED 2A 96 63    >                ld      hl,(RP_Pointer)
 179+ 63F0
 180+ 63F0 C1                           pop     bc                  // bc is increment
 181+ 63F1
 182+ 63F1 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 183+ 63F2 7B                           ld      a, e                // de keeps index before increment.
 184+ 63F3 81                           add     c
 185+ 63F4 77                           ld      (hl), a
 186+ 63F5 23                           inc     hl
 187+ 63F6 56                           ld      d, (hl)
 188+ 63F7 7A                           ld      a, d
 189+ 63F8 88                           adc     b
 190+ 63F9 77                           ld      (hl),a
 191+ 63FA 23                           inc     hl
 192+ 63FB
 193+ 63FB 7B                           ld      a, e
 194+ 63FC 96                           sub     (hl)
 195+ 63FD 5F                           ld      e, a
 196+ 63FE 23                           inc     hl
 197+ 63FF 7A                           ld      a, d
 198+ 6400 9E                           sbc     (hl)
 199+ 6401 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 200+ 6402
 201+ 6402 EB                           ex      de, hl
 202+ 6403 09                           add     hl, bc
 203+ 6404
 204+ 6404 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 205+ 6406 28 01                        jr      z, Loop_NegativeIncrement
 206+ 6408 3F                               ccf
 207+ 6409              Loop_NegativeIncrement:
 208+ 6409 38 04                        jr      c, Loop_Endif
 209+ 640B D9                               exx
 210+ 640C C3 C3 63                         jp      Branch_Ptr      // perform branch consuming following cell
 211+ 640F              Loop_Endif:
 212+ 640F EB                           ex      de, hl
 213+ 6410 23                           inc     hl
 214+ 6411                              ldrphl                      // ld rp,hl macro 30h +Origin
 214+ 6411 22 96 63    >                ld      (RP_Pointer),hl
 215+ 6414 D9                           exx
 216+ 6415 03                           inc     bc                  // skip branch-style offset
 217+ 6416 03                           inc     bc
 218+ 6417                              next
 218+ 6417 DD E9       >                jp      (ix)
 219+ 6419
 220+ 6419              //  ______________________________________________________________________
 221+ 6419              //
 222+ 6419              // (loop)       n --
 223+ 6419              // same as (LOOP) but index is incremented by 1
 224+ 6419              // compiled by LOOP.
 225+ 6419                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 225+ 6419             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ 6419             >
 225+ 6419             >                // dummy db directives used to calculate length of namec
 225+ 6419 28 4C 4F 4F >                db      "(LOOP)"
 225+ 641D 50 29       >
 225+ 641F             >len_NFA         defl    $ - temp_NFA
 225+ 641F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ 6419             >
 225+ 6419 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ 641A 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 225+ 641E 50 29       >
 225+ 6420             >                org     $-1                 // alter last byte of Name just above to set
 225+ 641F A9          >                db      {b $} | END_BIT     // msb as name end
 225+ 6420             >
 225+ 6420 E2 63       >                dw      last_NFA            // Link to previous definition Name
 225+ 6422             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 6422 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 225+ 6422 ~           >
 225+ 6422 ~           >
 225+ 6422             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 6422             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 6422             >
 225+ 6422             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 6422 ED 8A 00 01                  push    1
 227+ 6426 C3 EC 63                     jp      Loop_Ptr
 228+ 6429
 229+ 6429              //  ______________________________________________________________________
 230+ 6429              //
 231+ 6429              // (?do)        lim ind --
 232+ 6429              // compiled by ?DO to make a loop checking for lim == ind first
 233+ 6429              // at run-time (?DO) must be followed by a BRANCH offset
 234+ 6429              // used to skip the loop if lim == ind
 235+ 6429                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 235+ 6429             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 235+ 6429             >
 235+ 6429             >                // dummy db directives used to calculate length of namec
 235+ 6429 28 3F 44 4F >                db      "(?DO)"
 235+ 642D 29          >
 235+ 642E             >len_NFA         defl    $ - temp_NFA
 235+ 642E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 235+ 6429             >
 235+ 6429 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 235+ 642A 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 235+ 642E 29          >
 235+ 642F             >                org     $-1                 // alter last byte of Name just above to set
 235+ 642E A9          >                db      {b $} | END_BIT     // msb as name end
 235+ 642F             >
 235+ 642F 19 64       >                dw      last_NFA            // Link to previous definition Name
 235+ 6431             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 235+ 6431 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 235+ 6431 ~           >
 235+ 6431 ~           >
 235+ 6431             >                endif           ; ok        // for other definitions it "points" the correct handler
 235+ 6431             >                // Use of "; ok" to suppress "warning[fwdref]"
 235+ 6431             >
 235+ 6431             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 6431 D1                           pop     de                  // de has the index
 237+ 6432 E1                           pop     hl                  // hl has the limit
 238+ 6433 E5                           push    hl
 239+ 6434 D5                           push    de
 240+ 6435 A7                           and     a                   // reset carry flag
 241+ 6436 ED 52                        sbc     hl, de              // compute limit - index
 242+ 6438 20 05                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 243+ 643A D1                               pop     de
 244+ 643B E1                               pop     hl
 245+ 643C
 246+ 643C C3 C3 63                         jp      Branch_Ptr          // perform branch consuming following cell
 247+ 643F              Do_Ptr:
 248+ 643F                              ldhlrp                      // prepare RP
 248+ 643F 2A 96 63    >                ld      hl,(RP_Pointer)
 249+ 6442 2B                           dec     hl
 250+ 6443 2B                           dec     hl
 251+ 6444 2B                           dec     hl
 252+ 6445 2B                           dec     hl
 253+ 6446                              ldrphl
 253+ 6446 22 96 63    >                ld      (RP_Pointer),hl
 254+ 6449
 255+ 6449                              // store index as top RP
 256+ 6449 D1                           pop     de
 257+ 644A 73                           ld      (hl), e
 258+ 644B 23                           inc     hl
 259+ 644C 72                           ld      (hl), d
 260+ 644D 23                           inc     hl
 261+ 644E                              // stores lim as second from top RP
 262+ 644E D1                           pop     de
 263+ 644F 73                           ld      (hl), e
 264+ 6450 23                           inc     hl
 265+ 6451 72                           ld      (hl), d
 266+ 6452
 267+ 6452                              // skip branch-style offseet
 268+ 6452 03                           inc     bc
 269+ 6453 03                           inc     bc
 270+ 6454                              next
 270+ 6454 DD E9       >                jp      (ix)
 271+ 6456
 272+ 6456              //  ______________________________________________________________________
 273+ 6456              //
 274+ 6456              // (do)        lim ind --
 275+ 6456              // compiled by DO to make a loop checking for lim == ind first
 276+ 6456              // this is a simpler version of (?DO)
 277+ 6456                              New_Def C_DO, "(DO)", is_code, is_normal
 277+ 6456             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 277+ 6456             >
 277+ 6456             >                // dummy db directives used to calculate length of namec
 277+ 6456 28 44 4F 29 >                db      "(DO)"
 277+ 645A             >len_NFA         defl    $ - temp_NFA
 277+ 645A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 277+ 6456             >
 277+ 6456 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 277+ 6457 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 277+ 645B             >                org     $-1                 // alter last byte of Name just above to set
 277+ 645A A9          >                db      {b $} | END_BIT     // msb as name end
 277+ 645B             >
 277+ 645B 29 64       >                dw      last_NFA            // Link to previous definition Name
 277+ 645D             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 277+ 645D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 277+ 645D ~           >
 277+ 645D ~           >
 277+ 645D             >                endif           ; ok        // for other definitions it "points" the correct handler
 277+ 645D             >                // Use of "; ok" to suppress "warning[fwdref]"
 277+ 645D             >
 277+ 645D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 278+ 645D 0B                           dec     bc                  // prepare IP beforehand
 279+ 645E 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 280+ 645F C3 3F 64                     jp      Do_Ptr
 281+ 6462
 282+ 6462              //  ______________________________________________________________________
 283+ 6462              //
 284+ 6462              // i            -- n
 285+ 6462              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 286+ 6462              // the current value of the index-loop
 287+ 6462                              New_Def I, "I", is_code, is_normal
 287+ 6462             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 287+ 6462             >
 287+ 6462             >                // dummy db directives used to calculate length of namec
 287+ 6462 49          >                db      "I"
 287+ 6463             >len_NFA         defl    $ - temp_NFA
 287+ 6463             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 287+ 6462             >
 287+ 6462 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 287+ 6463 49          >                db      "I"               // name string in 7-bit ascii, but
 287+ 6464             >                org     $-1                 // alter last byte of Name just above to set
 287+ 6463 C9          >                db      {b $} | END_BIT     // msb as name end
 287+ 6464             >
 287+ 6464 56 64       >                dw      last_NFA            // Link to previous definition Name
 287+ 6466             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 287+ 6466 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 287+ 6466 ~           >
 287+ 6466 ~           >
 287+ 6466             >                endif           ; ok        // for other definitions it "points" the correct handler
 287+ 6466             >                // Use of "; ok" to suppress "warning[fwdref]"
 287+ 6466             >
 287+ 6466             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 288+ 6466              I_Ptr:
 289+ 6466
 290+ 6466                              ldhlrp
 290+ 6466 2A 96 63    >                ld      hl,(RP_Pointer)
 291+ 6469              I_Ptr_prime
 292+ 6469 5E                           ld      e, (hl)
 293+ 646A 23                           inc     hl
 294+ 646B 56                           ld      d, (hl)
 295+ 646C D5                           push    de
 296+ 646D                              next
 296+ 646D DD E9       >                jp      (ix)
 297+ 646F
 298+ 646F
 299+ 646F              //  ______________________________________________________________________
 300+ 646F              //
 301+ 646F              // i'            -- n
 302+ 646F              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 303+ 646F              // the limit of the index-loop
 304+ 646F
 305+ 646F                              New_Def II, "I'", is_code, is_normal
 305+ 646F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 305+ 646F             >
 305+ 646F             >                // dummy db directives used to calculate length of namec
 305+ 646F 49 27       >                db      "I'"
 305+ 6471             >len_NFA         defl    $ - temp_NFA
 305+ 6471             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 305+ 646F             >
 305+ 646F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 305+ 6470 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 305+ 6472             >                org     $-1                 // alter last byte of Name just above to set
 305+ 6471 A7          >                db      {b $} | END_BIT     // msb as name end
 305+ 6472             >
 305+ 6472 62 64       >                dw      last_NFA            // Link to previous definition Name
 305+ 6474             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 305+ 6474 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 305+ 6474 ~           >
 305+ 6474 ~           >
 305+ 6474             >                endif           ; ok        // for other definitions it "points" the correct handler
 305+ 6474             >                // Use of "; ok" to suppress "warning[fwdref]"
 305+ 6474             >
 305+ 6474             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 306+ 6474                              ldhlrp
 306+ 6474 2A 96 63    >                ld      hl,(RP_Pointer)
 307+ 6477 23                           inc     hl
 308+ 6478 23                           inc     hl
 309+ 6479 18 EE                        jr      I_Ptr_prime
 310+ 647B
 311+ 647B
 312+ 647B              //  ______________________________________________________________________
 313+ 647B              //
 314+ 647B              // digit        c n -- u 1  |  0
 315+ 647B              // convert a character c using base n
 316+ 647B              // returns a unsigned number and a true flag
 317+ 647B              // or just a false flag if the conversion fails
 318+ 647B                              New_Def DIGIT, "DIGIT", is_code, is_normal
 318+ 647B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ 647B             >
 318+ 647B             >                // dummy db directives used to calculate length of namec
 318+ 647B 44 49 47 49 >                db      "DIGIT"
 318+ 647F 54          >
 318+ 6480             >len_NFA         defl    $ - temp_NFA
 318+ 6480             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ 647B             >
 318+ 647B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ 647C 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 318+ 6480 54          >
 318+ 6481             >                org     $-1                 // alter last byte of Name just above to set
 318+ 6480 D4          >                db      {b $} | END_BIT     // msb as name end
 318+ 6481             >
 318+ 6481 6F 64       >                dw      last_NFA            // Link to previous definition Name
 318+ 6483             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 6483 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 318+ 6483 ~           >
 318+ 6483 ~           >
 318+ 6483             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 6483             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 6483             >
 318+ 6483             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 6483 E1                           pop     hl                  // l has the base
 320+ 6484 D1                           pop     de                  // e has the digit
 321+ 6485 7B                           ld      a, e
 322+ 6486 FE 60                        cp      $60                 // check if lowercase
 323+ 6488 38 02                        jr      c, Digit_Uppercase
 324+ 648A D6 20                            sub     $20                 // quick'n'dirty uppercase
 325+ 648C              Digit_Uppercase:
 326+ 648C D6 30                        sub     $30
 327+ 648E 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 328+ 6490 FE 0A                            cp      $0A
 329+ 6492 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 330+ 6494 D6 07                                sub     7                   // try hex and subtract 7
 331+ 6496 FE 0A                                cp      $0A
 332+ 6498 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 333+ 649A
 334+ 649A              Digit_Decimal:
 335+ 649A                              // compare digit
 336+ 649A BD                           cp      l                   // compare with base
 337+ 649B
 338+ 649B 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 339+ 649D 5F                               ld      e, a                // digit is returned as second from TOS
 340+ 649E 21 01 00                         ld      hl, 1
 341+ 64A1
 342+ 64A1                                  psh2
 342+ 64A1 D5          >                push    de
 342+ 64A2 E5          >                push    hl
 342+ 64A3 DD E9       >                jp      (ix)
 343+ 64A5              Digit_Fail:
 344+ 64A5 21 00 00                     ld      hl, 0
 345+ 64A8                              psh1
 345+ 64A8 E5          >                push    hl
 345+ 64A9 DD E9       >                jp      (ix)
 346+ 64AB
 347+ 64AB              //  ______________________________________________________________________
 348+ 64AB              //
 349+ 64AB              //  parametric uppercase routine
 350+ 64AB              //  depending on the following op-code the routine can be by-passed
 351+ 64AB              //  changing the behaviour of some callers.
 352+ 64AB              //  If it is "ret" then the system is Case-Sensitive
 353+ 64AB              //  If it is "Nop" then the system is Case-Insensitive
 354+ 64AB              //  Only A register is touched.
 355+ 64AB 00           Case_Sensitive: nop                         // Default is case-insensitive.
 356+ 64AC              Case_Upper:
 357+ 64AC FE 61                        cp      LC_A_CHAR           // lower-case "a"
 358+ 64AE D8                           ret     c                   // no change if A < "a"
 359+ 64AF FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 360+ 64B1 D0                           ret     nc                  // no change if A > "z"
 361+ 64B2 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 362+ 64B4 C9                           ret
 363+ 64B5
 364+ 64B5              //  ______________________________________________________________________
 365+ 64B5              //
 366+ 64B5              //  caseon      --
 367+ 64B5              // set system case-sensitivity on
 368+ 64B5              // it patches a RET/NOP at the beginning of the uppercase-routine
 369+ 64B5                              New_Def CASEON, "CASEON", is_code, is_normal
 369+ 64B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ 64B5             >
 369+ 64B5             >                // dummy db directives used to calculate length of namec
 369+ 64B5 43 41 53 45 >                db      "CASEON"
 369+ 64B9 4F 4E       >
 369+ 64BB             >len_NFA         defl    $ - temp_NFA
 369+ 64BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ 64B5             >
 369+ 64B5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ 64B6 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 369+ 64BA 4F 4E       >
 369+ 64BC             >                org     $-1                 // alter last byte of Name just above to set
 369+ 64BB CE          >                db      {b $} | END_BIT     // msb as name end
 369+ 64BC             >
 369+ 64BC 7B 64       >                dw      last_NFA            // Link to previous definition Name
 369+ 64BE             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 64BE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 369+ 64BE ~           >
 369+ 64BE ~           >
 369+ 64BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 64BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 64BE             >
 369+ 64BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 64BE 3E C9                        ld      a, $C9              // "ret"
 371+ 64C0 32 AB 64                     ld      (Case_Sensitive), a
 372+ 64C3                              next
 372+ 64C3 DD E9       >                jp      (ix)
 373+ 64C5
 374+ 64C5              //  ______________________________________________________________________
 375+ 64C5              //
 376+ 64C5              //  caseoff     --
 377+ 64C5              // set system case-sensitivity on
 378+ 64C5              // it patches a RET/NOP at the beginning of the uppercase-routine
 379+ 64C5                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 379+ 64C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ 64C5             >
 379+ 64C5             >                // dummy db directives used to calculate length of namec
 379+ 64C5 43 41 53 45 >                db      "CASEOFF"
 379+ 64C9 4F 46 46    >
 379+ 64CC             >len_NFA         defl    $ - temp_NFA
 379+ 64CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ 64C5             >
 379+ 64C5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ 64C6 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 379+ 64CA 4F 46 46    >
 379+ 64CD             >                org     $-1                 // alter last byte of Name just above to set
 379+ 64CC C6          >                db      {b $} | END_BIT     // msb as name end
 379+ 64CD             >
 379+ 64CD B5 64       >                dw      last_NFA            // Link to previous definition Name
 379+ 64CF             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 64CF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 379+ 64CF ~           >
 379+ 64CF ~           >
 379+ 64CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 64CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 64CF             >
 379+ 64CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 64CF 3E 00                        ld      a, $00              // "nop"
 381+ 64D1 32 AB 64                     ld      (Case_Sensitive), a
 382+ 64D4                              next
 382+ 64D4 DD E9       >                jp      (ix)
 383+ 64D6
 384+ 64D6              //  ______________________________________________________________________
 385+ 64D6              //
 386+ 64D6              //  upper       c1 -- c1 | c2
 387+ 64D6              // character on top of stack is forced to Uppercase.
 388+ 64D6                              New_Def UPPER, "UPPER", is_code, is_normal
 388+ 64D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ 64D6             >
 388+ 64D6             >                // dummy db directives used to calculate length of namec
 388+ 64D6 55 50 50 45 >                db      "UPPER"
 388+ 64DA 52          >
 388+ 64DB             >len_NFA         defl    $ - temp_NFA
 388+ 64DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ 64D6             >
 388+ 64D6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ 64D7 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 388+ 64DB 52          >
 388+ 64DC             >                org     $-1                 // alter last byte of Name just above to set
 388+ 64DB D2          >                db      {b $} | END_BIT     // msb as name end
 388+ 64DC             >
 388+ 64DC C5 64       >                dw      last_NFA            // Link to previous definition Name
 388+ 64DE             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 64DE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 388+ 64DE ~           >
 388+ 64DE ~           >
 388+ 64DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 64DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 64DE             >
 388+ 64DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 64DE E1                           pop     hl
 390+ 64DF 7D                           ld      a, l
 391+ 64E0 CD AC 64                     call    Case_Upper
 392+ 64E3 6F                           ld      l, a
 393+ 64E4
 394+ 64E4                              psh1
 394+ 64E4 E5          >                push    hl
 394+ 64E5 DD E9       >                jp      (ix)
 395+ 64E7
 396+ 64E7              //  ______________________________________________________________________
 397+ 64E7              //
 398+ 64E7              // (find)       addr voc -- addr 0 | cfa b 1
 399+ 64E7              // vocabulary search,
 400+ 64E7              // - voc is starting word's NFA
 401+ 64E7              // - addr is the string to be searched for
 402+ 64E7              // On success, it returns the CFA of found word, the first NFA byte
 403+ 64E7              // (which contains length and some flags) and a true flag.
 404+ 64E7              // On fail, a false flag  (no more: leaves addr unchanged)
 405+ 64E7                              New_Def C_FIND, "(FIND)", is_code, is_normal
 405+ 64E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 405+ 64E7             >
 405+ 64E7             >                // dummy db directives used to calculate length of namec
 405+ 64E7 28 46 49 4E >                db      "(FIND)"
 405+ 64EB 44 29       >
 405+ 64ED             >len_NFA         defl    $ - temp_NFA
 405+ 64ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 405+ 64E7             >
 405+ 64E7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 405+ 64E8 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 405+ 64EC 44 29       >
 405+ 64EE             >                org     $-1                 // alter last byte of Name just above to set
 405+ 64ED A9          >                db      {b $} | END_BIT     // msb as name end
 405+ 64EE             >
 405+ 64EE D6 64       >                dw      last_NFA            // Link to previous definition Name
 405+ 64F0             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 405+ 64F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 405+ 64F0 ~           >
 405+ 64F0 ~           >
 405+ 64F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 405+ 64F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 405+ 64F0             >
 405+ 64F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 406+ 64F0                                                              // de has dictionary pointer
 407+ 64F0 D1                               pop     de
 408+ 64F1              Find_VocabularyLoop:
 409+ 64F1 E1                               pop     hl                  // string pointer to search for
 410+ 64F2 E5                               push    hl                  // keep it on stack too for the end.
 411+ 64F3 1A                               ld      a, (de)             // save NFA length byte
 412+ 64F4 08                               ex      af,af'              // for later use (!)
 413+ 64F5 1A                               ld      a, (de)             // reload NFA length byte
 414+ 64F6 AE                               xor     (hl)                // check if same length
 415+ 64F7 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 416+ 64F9                                  // word an text haven't the same length, skip to next vocabulary entry
 417+ 64F9 20 2C                            jr      nz, Find_DifferentLenght
 418+ 64FB
 419+ 64FB              Find_ThisWord:  // begin loop
 420+ 64FB 23                                   inc     hl
 421+ 64FC 13                                   inc     de
 422+ 64FD 1A                                   ld      a, (de)
 423+ 64FE                                      // case insensitive option - begin
 424+ 64FE C5                                   push    bc
 425+ 64FF E6 80                                and     $80                 // split A in msb and the rest
 426+ 6501 47                                   ld      b, a
 427+ 6502 1A                                   ld      a, (de)
 428+ 6503 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 429+ 6505 CD AB 64                             call    Case_Sensitive      // uppercase routine
 430+ 6508 4F                                   ld      c, a
 431+ 6509 7E                                   ld      a, (hl)
 432+ 650A CD AB 64                             call    Case_Sensitive      // uppercase routine
 433+ 650D A9                                   xor     c
 434+ 650E A8                                   xor     b
 435+ 650F C1                                   pop     bc
 436+ 6510                                      // case insensitive option - end
 437+ 6510 87                                   add     a                   // ignore msb during compare
 438+ 6511 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 439+ 6513
 440+ 6513                                  // loop back until last byte msb is found set
 441+ 6513                                  // that bit marks the ending char of this word
 442+ 6513 30 E6                            jr      nc, Find_ThisWord
 443+ 6515
 444+ 6515                                  // match found !
 445+ 6515 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 446+ 6518 19                                   add     hl, de
 447+ 6519 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 448+ 651A 08                                   ex      af, af'             // retrieve NFA byte (!)
 449+ 651B 5F                                   ld      e, a
 450+ 651C 16 00                                ld      d, 0
 451+ 651E
 452+ 651E
 453+ 651E 21 01 00                             ld      hl, 1
 454+ 6521                                      psh2
 454+ 6521 D5          >                push    de
 454+ 6522 E5          >                push    hl
 454+ 6523 DD E9       >                jp      (ix)
 455+ 6525
 456+ 6525              Find_DidntMatch: // didn't match (*)
 457+ 6525 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 458+ 6527
 459+ 6527              Find_DifferentLenght:
 460+ 6527                              // consume chars until the end of the word
 461+ 6527                              // that is last byte msb is found set
 462+ 6527 13                               inc     de
 463+ 6528 1A                               ld      a, (de)
 464+ 6529 87                               add     a, a
 465+ 652A 30 FB                        jr      nc, Find_DifferentLenght
 466+ 652C
 467+ 652C              Find_WordEnd:   // word-end  found (**)
 468+ 652C                              // take LFA and use it
 469+ 652C 13                           inc     de
 470+ 652D EB                           ex      de, hl
 471+ 652E 5E                           ld      e, (hl)
 472+ 652F 23                           inc     hl
 473+ 6530 56                           ld      d, (hl)
 474+ 6531 7A                           ld      a, d
 475+ 6532 B3                           or      e
 476+ 6533
 477+ 6533                          // loop until end of vocabulary
 478+ 6533 20 BC                    jr      nz, Find_VocabularyLoop
 479+ 6535
 480+ 6535 E1                       pop     hl              // with this, it leaves addr unchanged
 481+ 6536 21 00 00                 ld      hl, FALSE_FLAG
 482+ 6539
 483+ 6539                          psh1
 483+ 6539 E5          >                push    hl
 483+ 653A DD E9       >                jp      (ix)
 484+ 653C
 485+ 653C              //  ______________________________________________________________________
 486+ 653C              //
 487+ 653C              // enclose      a c -- a  n1 n2 n3
 488+ 653C              // starting from a, using delimiter c, determines the offsets:
 489+ 653C              //   n1   the first character non-delimiter
 490+ 653C              //   n2   the first delimiter after the text
 491+ 653C              //   n3   the first character non enclosed.
 492+ 653C              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 493+ 653C              // an uncoditional delimiter.
 494+ 653C              // Examples:
 495+ 653C              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 496+ 653C              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 497+ 653C              // iii:	c  c  'nul'          -- 2  3  2
 498+ 653C                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 498+ 653C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 498+ 653C             >
 498+ 653C             >                // dummy db directives used to calculate length of namec
 498+ 653C 45 4E 43 4C >                db      "ENCLOSE"
 498+ 6540 4F 53 45    >
 498+ 6543             >len_NFA         defl    $ - temp_NFA
 498+ 6543             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 498+ 653C             >
 498+ 653C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 498+ 653D 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 498+ 6541 4F 53 45    >
 498+ 6544             >                org     $-1                 // alter last byte of Name just above to set
 498+ 6543 C5          >                db      {b $} | END_BIT     // msb as name end
 498+ 6544             >
 498+ 6544 E7 64       >                dw      last_NFA            // Link to previous definition Name
 498+ 6546             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 498+ 6546 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 498+ 6546 ~           >
 498+ 6546 ~           >
 498+ 6546             >                endif           ; ok        // for other definitions it "points" the correct handler
 498+ 6546             >                // Use of "; ok" to suppress "warning[fwdref]"
 498+ 6546             >
 498+ 6546             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 499+ 6546 D1                           pop     de                  //  e has the character
 500+ 6547 E1                           pop     hl                  // hl has the string address
 501+ 6548 E5                           push    hl
 502+ 6549 7B                           ld      a, e
 503+ 654A 11 FF FF                     ld      de, -1              // let's start from -1
 504+ 654D 2B                           dec     hl
 505+ 654E              Enclose_NonDelimiter:
 506+ 654E                              // find first non delimiter
 507+ 654E 23                               inc     hl
 508+ 654F 13                               inc     de
 509+ 6550 BE                               cp      (hl)
 510+ 6551 28 FB                        jr      z, Enclose_NonDelimiter
 511+ 6553 D5                           push    de
 512+ 6554
 513+ 6554 C5                           push    bc                  // save Instruction Pointer
 514+ 6555
 515+ 6555 4F                           ld      c, a                // save char
 516+ 6556 7E                           ld      a, (hl)
 517+ 6557 A7                           and     a                   // stop if 0x00
 518+ 6558 20 07                        jr      nz, Enclose_NextChar
 519+ 655A
 520+ 655A                              /// case iii. no more character in string
 521+ 655A C1                               pop     bc                  // restore Instruction Pointer
 522+ 655B 13                               inc     de
 523+ 655C D5                               push    de
 524+ 655D 1B                               dec     de
 525+ 655E D5                               push    de
 526+ 655F                                  next
 526+ 655F DD E9       >                jp      (ix)
 527+ 6561              Enclose_NextChar:
 528+ 6561 79                               ld      a, c
 529+ 6562 23                               inc     hl
 530+ 6563 13                               inc     de
 531+ 6564 BE                               cp      (hl)
 532+ 6565 20 06                            jr      nz, Enclose_NonSeparator
 533+ 6567
 534+ 6567                                      // case i. first non enclosed
 535+ 6567 C1                                   pop     bc                  // restore Instruction Pointer
 536+ 6568 D5                                   push    de
 537+ 6569 13                                   inc     de
 538+ 656A D5                                   push    de
 539+ 656B                                      next
 539+ 656B DD E9       >                jp      (ix)
 540+ 656D              Enclose_NonSeparator:
 541+ 656D 7E                               ld      a, (hl)
 542+ 656E A7                               and     a
 543+ 656F 20 F0                        jr      nz, Enclose_NextChar
 544+ 6571
 545+ 6571                              // case ii. separator & terminator
 546+ 6571 C1                           pop     bc                  // restore Instruction Pointer
 547+ 6572 D5                           push    de
 548+ 6573 D5                           push    de
 549+ 6574                              next
 549+ 6574 DD E9       >                jp      (ix)
 550+ 6576
 551+ 6576              //  ______________________________________________________________________
 552+ 6576              //
 553+ 6576              // (map)        a2 a1 n c1 -- c2
 554+ 6576              // translate character c1 using mapping string a2 and a2
 555+ 6576              // if c1 is not present within string a1 then
 556+ 6576              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 557+ 6576                              New_Def C_MAP, "(MAP)", is_code, is_normal
 557+ 6576             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 557+ 6576             >
 557+ 6576             >                // dummy db directives used to calculate length of namec
 557+ 6576 28 4D 41 50 >                db      "(MAP)"
 557+ 657A 29          >
 557+ 657B             >len_NFA         defl    $ - temp_NFA
 557+ 657B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 557+ 6576             >
 557+ 6576 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 557+ 6577 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 557+ 657B 29          >
 557+ 657C             >                org     $-1                 // alter last byte of Name just above to set
 557+ 657B A9          >                db      {b $} | END_BIT     // msb as name end
 557+ 657C             >
 557+ 657C 3C 65       >                dw      last_NFA            // Link to previous definition Name
 557+ 657E             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 557+ 657E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 557+ 657E ~           >
 557+ 657E ~           >
 557+ 657E             >                endif           ; ok        // for other definitions it "points" the correct handler
 557+ 657E             >                // Use of "; ok" to suppress "warning[fwdref]"
 557+ 657E             >
 557+ 657E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 558+ 657E D9                           exx
 559+ 657F E1                           pop     hl
 560+ 6580 7D                           ld      a, l
 561+ 6581 C1                           pop     bc
 562+ 6582 E1                           pop     hl
 563+ 6583 50                           ld      d, b
 564+ 6584 59                           ld      e, c
 565+ 6585 ED B1                        cpir
 566+ 6587 E1                           pop     hl
 567+ 6588 20 05                        jr      nz, C_Map_Then
 567+ 658A
 568+ 658A 19                               add     hl, de
 569+ 658B 2B                               dec     hl
 570+ 658C ED 42                            sbc     hl, bc
 571+ 658E 7E                               ld      a, (hl)
 572+ 658F              C_Map_Then:
 573+ 658F 6F                           ld      l, a
 574+ 6590 26 00                        ld      h, 0
 575+ 6592 E5                           push    hl
 576+ 6593 D9                           exx
 577+ 6594                              next
 577+ 6594 DD E9       >                jp      (ix)
 578+ 6596
 579+ 6596              //  ______________________________________________________________________
 580+ 6596              //
 581+ 6596              // (compare)    a1 a2 n -- b
 582+ 6596              // this word performs a lexicographic compare of n bytes of text at address a1
 583+ 6596              // with n bytes of text at address a2. It returns numeric a value:
 584+ 6596              //  0 : if strings are equal
 585+ 6596              // +1 : if string at a1 greater than string at a2
 586+ 6596              // -1 : if string at a1 less than string at a2
 587+ 6596              // strings can be 256 bytes in length at most.
 588+ 6596                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 588+ 6596             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 588+ 6596             >
 588+ 6596             >                // dummy db directives used to calculate length of namec
 588+ 6596 28 43 4F 4D >                db      "(COMPARE)"
 588+ 659A 50 41 52 45 >
 588+ 659E 29          >
 588+ 659F             >len_NFA         defl    $ - temp_NFA
 588+ 659F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 588+ 6596             >
 588+ 6596 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 588+ 6597 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 588+ 659B 50 41 52 45 >
 588+ 659F 29          >
 588+ 65A0             >                org     $-1                 // alter last byte of Name just above to set
 588+ 659F A9          >                db      {b $} | END_BIT     // msb as name end
 588+ 65A0             >
 588+ 65A0 76 65       >                dw      last_NFA            // Link to previous definition Name
 588+ 65A2             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 588+ 65A2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 588+ 65A2 ~           >
 588+ 65A2 ~           >
 588+ 65A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 588+ 65A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 588+ 65A2             >
 588+ 65A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 589+ 65A2 D9                           exx
 590+ 65A3 E1                           pop     hl                  // Number of bytes
 591+ 65A4 7D                           ld      a, l
 592+ 65A5 E1                           pop     hl                  // hl points string a2
 593+ 65A6 D1                           pop     de                  // hl points string a1
 594+ 65A7              //              push    bc                  // Instruction pointer on stack
 595+ 65A7 47                           ld      b, a
 596+ 65A8              C_Compare_Loop:
 597+ 65A8 7E                               ld      a, (hl)
 598+ 65A9 CD AB 64                         call    Case_Sensitive
 599+ 65AC 4F                               ld      c, a
 600+ 65AD 1A                               ld      a, (de)
 601+ 65AE CD AB 64                         call    Case_Sensitive
 602+ 65B1 B9                               cp      c
 603+ 65B2 13                               inc     de
 604+ 65B3 23                               inc     hl
 605+ 65B4 28 0E                            jr      z, C_Compare_Equal
 606+ 65B6 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 607+ 65B8 21 01 00                                 ld      hl, 1               // a1 gt a2
 608+ 65BB 18 03                                jr      C_Compare_Then      // Else
 609+ 65BD              C_Compare_NotLessThan:
 610+ 65BD 21 FF FF                                 ld      hl, -1              // a1 lt a2
 611+ 65C0              C_Compare_Then:                                 // Endif
 612+ 65C0              //                      pop     bc              // restore Instruction Pointer
 613+ 65C0 E5                                   push    hl
 614+ 65C1 D9                                   exx
 615+ 65C2
 616+ 65C2                                      next
 616+ 65C2 DD E9       >                jp      (ix)
 617+ 65C4
 618+ 65C4              C_Compare_Equal:
 619+ 65C4 10 E2                        djnz    C_Compare_Loop
 620+ 65C6 21 00 00                     ld      hl, 0               // a1 eq a2
 621+ 65C9              //              pop     bc                  // restore Instruction Pointer
 622+ 65C9 E5                           push    hl
 623+ 65CA D9                           exx
 624+ 65CB
 625+ 65CB                              next
 625+ 65CB DD E9       >                jp      (ix)
 626+ 65CD
 627+ 65CD              //  ______________________________________________________________________
 628+ 65CD              //
 629+ 65CD              // emitc        c --
 630+ 65CD              // low level emit, calls ROM routine at #10 to send a character to
 631+ 65CD              // the the current channel (see SELECT to change stream-channel)
 632+ 65CD                              New_Def EMITC, "EMITC", is_code, is_normal
 632+ 65CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 632+ 65CD             >
 632+ 65CD             >                // dummy db directives used to calculate length of namec
 632+ 65CD 45 4D 49 54 >                db      "EMITC"
 632+ 65D1 43          >
 632+ 65D2             >len_NFA         defl    $ - temp_NFA
 632+ 65D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 632+ 65CD             >
 632+ 65CD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 632+ 65CE 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 632+ 65D2 43          >
 632+ 65D3             >                org     $-1                 // alter last byte of Name just above to set
 632+ 65D2 C3          >                db      {b $} | END_BIT     // msb as name end
 632+ 65D3             >
 632+ 65D3 96 65       >                dw      last_NFA            // Link to previous definition Name
 632+ 65D5             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 632+ 65D5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 632+ 65D5 ~           >
 632+ 65D5 ~           >
 632+ 65D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 632+ 65D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 632+ 65D5             >
 632+ 65D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 633+ 65D5 E1                           pop     hl
 634+ 65D6 7D                           ld      a, l
 635+ 65D7              Emitc_Ptr:
 636+ 65D7 C5                           push    bc
 637+ 65D8 DD E5                        push    ix
 638+ 65DA D7                           rst     $10
 639+ 65DB DD E1                        pop     ix
 640+ 65DD C1                           pop     bc
 641+ 65DE 3E FF                        ld      a, 255            // max possible
 642+ 65E0 32 8C 5C                     ld      (SCR_CT), a
 643+ 65E3
 644+ 65E3                              next
 644+ 65E3 DD E9       >                jp      (ix)
 645+ 65E5
 646+ 65E5              Emitc_Vec:
 647+ 65E5 28 66                        dw      C_Emit_Printable  // comma
 648+ 65E7 2E 66                        dw      C_Emit_Bel        // bel
 649+ 65E9 28 66                        dw      C_Emit_Printable  // bs
 650+ 65EB 43 66                        dw      C_Emit_Tab        // tab
 651+ 65ED 28 66                        dw      C_Emit_Printable  // cr
 652+ 65EF 49 66                        dw      C_Emit_NL         // lf (unix newline)
 653+ 65F1 28 66                        dw      C_Emit_Printable  // blank
 654+ 65F3 28 66                        dw      C_Emit_Printable  // blank
 655+ 65F5
 656+ 65F5              Emit_Selector_Start:
 657+ 65F5 06                           db      $06                 // comma
 658+ 65F6 07                           db      $07                 // bel
 659+ 65F7 08                           db      $08                 // bs
 660+ 65F8 09                           db      $09                 // tab
 661+ 65F9 0D                           db      $0D                 // cr
 662+ 65FA 0A                           db      $0A                 // lf (unix newline)
 663+ 65FB 20                           db      $20
 664+ 65FC              Emit_Selector_End:
 665+ 65FC 20                           db      $20
 666+ 65FD
 667+ 65FD              //  ______________________________________________________________________
 668+ 65FD              //
 669+ 65FD              // (?emit)      c1 -- c2 | c1
 670+ 65FD              // decode a character to be sent via EMIT
 671+ 65FD              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 672+ 65FD              // the routine should resolve anything and convert the character anyway.
 673+ 65FD                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 673+ 65FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 673+ 65FD             >
 673+ 65FD             >                // dummy db directives used to calculate length of namec
 673+ 65FD 28 3F 45 4D >                db      "(?EMIT)"
 673+ 6601 49 54 29    >
 673+ 6604             >len_NFA         defl    $ - temp_NFA
 673+ 6604             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 673+ 65FD             >
 673+ 65FD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 673+ 65FE 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 673+ 6602 49 54 29    >
 673+ 6605             >                org     $-1                 // alter last byte of Name just above to set
 673+ 6604 A9          >                db      {b $} | END_BIT     // msb as name end
 673+ 6605             >
 673+ 6605 CD 65       >                dw      last_NFA            // Link to previous definition Name
 673+ 6607             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 673+ 6607 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 673+ 6607 ~           >
 673+ 6607 ~           >
 673+ 6607             >                endif           ; ok        // for other definitions it "points" the correct handler
 673+ 6607             >                // Use of "; ok" to suppress "warning[fwdref]"
 673+ 6607             >
 673+ 6607             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 674+ 6607 D1                           pop     de
 675+ 6608 7B                           ld      a, e                //  de has c1
 676+ 6609 E6 7F                        and     $7F                 // 7-bit ascii only
 677+ 660B C5                           push    bc                  // save Instruction Pointer
 678+ 660C 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 679+ 660F 21 FC 65                     ld      hl, Emit_Selector_End
 680+ 6612 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 681+ 6614 20 0B                        jr      nz, C_Emit_Not_Found
 682+ 6616                                  // Found then decode it
 683+ 6616 21 E5 65                         ld      hl, Emitc_Vec
 684+ 6619 09                               add     hl, bc
 685+ 661A 09                               add     hl, bc
 686+ 661B 5E                               ld      e, (hl)
 687+ 661C 23                               inc     hl
 688+ 661D 56                               ld      d, (hl)
 689+ 661E EB                               ex      de, hl
 690+ 661F C1                               pop     bc                  // restore Instruction Pointer
 691+ 6620 E9                               jp      (hl)                // one of the following labels
 692+ 6621              C_Emit_Not_Found:
 693+ 6621 C1                           pop     bc                  // restore Instruction Pointer
 694+ 6622 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 695+ 6624 30 02                        jr      nc, C_Emit_Printable
 696+ 6626 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 697+ 6628              C_Emit_Printable:
 698+ 6628 6F                           ld      l, a
 699+ 6629 26 00                        ld      h, 0
 700+ 662B
 701+ 662B                              psh1
 701+ 662B E5          >                push    hl
 701+ 662C DD E9       >                jp      (ix)
 702+ 662E
 703+ 662E              C_Emit_Bel:
 704+ 662E C5                           push    bc                  // save Instruction Pointer
 705+ 662F 11 00 01                     ld      de, $0100
 706+ 6632 21 00 02                     ld      hl, $0200
 707+ 6635 DD E5                        push    ix                  // save Next Pointer
 708+ 6637 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 709+ 663A DD E1                        pop     ix                  // restore Next Pointer
 710+ 663C C1                           pop     bc                  // restore Instruction Pointer
 711+ 663D 21 00 00                     ld      hl, NUL_CHAR
 712+ 6640
 713+ 6640                              psh1
 713+ 6640 E5          >                push    hl
 713+ 6641 DD E9       >                jp      (ix)
 714+ 6643
 715+ 6643 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 716+ 6646
 717+ 6646                              psh1
 717+ 6646 E5          >                push    hl
 717+ 6647 DD E9       >                jp      (ix)
 718+ 6649
 719+ 6649 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 720+ 664C
 721+ 664C                              psh1
 721+ 664C E5          >                push    hl
 721+ 664D DD E9       >                jp      (ix)
 722+ 664F
 723+ 664F              //  ______________________________________________________________________
 724+ 664F
 725+ 664F              Key_Table:
 726+ 664F E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 727+ 6650 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 728+ 6651 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 729+ 6652 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 730+ 6653 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 731+ 6654 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 732+ 6655 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 733+ 6656 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 734+ 6657 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 735+ 6658 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 736+ 6659 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 737+ 665A              Key_MapTo:
 738+ 665A 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 739+ 665B 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 740+ 665C 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 741+ 665D 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 742+ 665E 5D                           db      $5D                 //  6: SYMBOL+U : ]
 743+ 665F 5B                           db      $5B                 //  5: SYMBOL+Y : [
 744+ 6660 7D                           db      $7D                 //  4: SYMBOL+G : }
 745+ 6661 7B                           db      $7B                 //  3: SYMBOL+F : {
 746+ 6662 5C                           db      $5C                 //  2: SYMBOl+D : //
 747+ 6663 7C                           db      $7C                 //  1: SYMBOL+S : |
 748+ 6664 7E                           db      $7E                 //  0: SYMBOL+A : ~
 749+ 6665
 750+ 6665              //  ______________________________________________________________________
 751+ 6665              //
 752+ 6665              // key          -- c
 753+ 6665              // wait for a keypress
 754+ 6665              // This definition need Standard ROM Interrupt to be served
 755+ 6665
 756+ 6665                              New_Def KEY, "KEY", is_code, is_normal
 756+ 6665             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 756+ 6665             >
 756+ 6665             >                // dummy db directives used to calculate length of namec
 756+ 6665 4B 45 59    >                db      "KEY"
 756+ 6668             >len_NFA         defl    $ - temp_NFA
 756+ 6668             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 756+ 6665             >
 756+ 6665 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 756+ 6666 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 756+ 6669             >                org     $-1                 // alter last byte of Name just above to set
 756+ 6668 D9          >                db      {b $} | END_BIT     // msb as name end
 756+ 6669             >
 756+ 6669 FD 65       >                dw      last_NFA            // Link to previous definition Name
 756+ 666B             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 756+ 666B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 756+ 666B ~           >
 756+ 666B ~           >
 756+ 666B             >                endif           ; ok        // for other definitions it "points" the correct handler
 756+ 666B             >                // Use of "; ok" to suppress "warning[fwdref]"
 756+ 666B             >
 756+ 666B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 757+ 666B
 758+ 666B C5                           push    bc                  // save Instruction Pointer
 759+ 666C DD E5                        push    ix
 760+ 666E
 761+ 666E ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 762+ 6672 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 763+ 6675 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 764+ 6679
 765+ 6679              Key_Wait:
 766+ 6679 76                               halt
 767+ 667A 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 768+ 667C CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 769+ 667F
 770+ 667F                                  // software-flash: flips face every 320 ms
 771+ 667F 3E 10                            ld      a, $10              // Timing based
 772+ 6681 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 773+ 6684
 774+ 6684 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 775+ 6687 20 0C                            jr      nz, Key_Cursor
 776+ 6689 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 777+ 668C FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 778+ 6690 28 03                                jr      z, Key_Cursor
 779+ 6692 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 780+ 6695              Key_Cursor:
 781+ 6695 D7                               rst     $10
 782+ 6696 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 783+ 6698 D7                               rst     $10
 784+ 6699
 785+ 6699 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 786+ 669D 28 DA                        jr      z, Key_Wait
 787+ 669F
 788+ 669F 76                           halt    // this is to sync flashing cursor.
 789+ 66A0
 790+ 66A0 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 791+ 66A2 D7                           rst     $10
 792+ 66A3 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 793+ 66A5 D7                           rst     $10
 794+ 66A6 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 795+ 66A9
 796+ 66A9                              // decode character from above table
 797+ 66A9 21 4F 66                     ld      hl, Key_Table
 798+ 66AC 01 0B 00                     ld      bc, $000B
 799+ 66AF ED B1                        cpir
 800+ 66B1 20 05                        jr      nz, Key_DontMap
 801+ 66B3 21 5A 66                         ld      hl, Key_MapTo
 802+ 66B6 09                               add     hl, bc
 803+ 66B7 7E                               ld      a, (hl)
 804+ 66B8 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 805+ 66BA 20 09                        jr      nz, Key_NoCapsLock
 806+ 66BC 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 807+ 66BF 7E                               ld      a, (hl)
 808+ 66C0 EE 08                            xor     $08
 809+ 66C2 77                               ld      (hl), a
 810+ 66C3 3E 00                            ld      a, NUL_CHAR
 811+ 66C5 6F           Key_NoCapsLock: ld      l, a
 812+ 66C6 26 00                        ld      h, 0                // Prepare TOS
 813+ 66C8
 814+ 66C8 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 815+ 66CB 1F                           rra
 816+ 66CC 1F                           rra
 817+ 66CD 1F                           rra
 818+ 66CE F6 18                        or      $18                 // quick'n'dirty click
 819+ 66D0 D3 FE                        out     ($fe), a
 820+ 66D2 06 00                        ld      b, 0
 821+ 66D4 10 FE                        djnz    $                   // wait loop
 822+ 66D6 EE 18                        xor     $18
 823+ 66D8 D3 FE                        out     ($fe), a
 824+ 66DA
 825+ 66DA ED 7B 92 63                  ld      sp, (SP_Saved)
 826+ 66DE
 827+ 66DE DD E1                        pop     ix
 828+ 66E0 C1                           pop     bc                  // Restore Instruction Pointer
 829+ 66E1
 830+ 66E1                              psh1
 830+ 66E1 E5          >                push    hl
 830+ 66E2 DD E9       >                jp      (ix)
 831+ 66E4
 832+ 66E4              //  ______________________________________________________________________
 833+ 66E4              //
 834+ 66E4              // ?terminal    -- FALSE | TRUE
 835+ 66E4              // test for BREAK keypress
 836+ 66E4                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 836+ 66E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 836+ 66E4             >
 836+ 66E4             >                // dummy db directives used to calculate length of namec
 836+ 66E4 3F 54 45 52 >                db      "?TERMINAL"
 836+ 66E8 4D 49 4E 41 >
 836+ 66EC 4C          >
 836+ 66ED             >len_NFA         defl    $ - temp_NFA
 836+ 66ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 836+ 66E4             >
 836+ 66E4 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 836+ 66E5 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 836+ 66E9 4D 49 4E 41 >
 836+ 66ED 4C          >
 836+ 66EE             >                org     $-1                 // alter last byte of Name just above to set
 836+ 66ED CC          >                db      {b $} | END_BIT     // msb as name end
 836+ 66EE             >
 836+ 66EE 65 66       >                dw      last_NFA            // Link to previous definition Name
 836+ 66F0             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 836+ 66F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 836+ 66F0 ~           >
 836+ 66F0 ~           >
 836+ 66F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 836+ 66F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 836+ 66F0             >
 836+ 66F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 837+ 66F0 21 00 00                     ld      hl, 0
 838+ 66F3 ED 73 92 63                  ld      (SP_Saved), sp
 839+ 66F7 31 61 63                     ld      sp, Cold_origin - 5
 840+ 66FA CD 54 1F                     call    $1F54
 841+ 66FD ED 7B 92 63                  ld      sp, (SP_Saved)
 842+ 6701
 843+ 6701 38 01                        jr      c, QTerminal_NoBreak
 844+ 6703 2B                               dec     hl                  // quick TRUE_FLAG
 845+ 6704              QTerminal_NoBreak:
 846+ 6704
 847+ 6704                              psh1
 847+ 6704 E5          >                push    hl
 847+ 6705 DD E9       >                jp      (ix)
 848+ 6707
 849+ 6707
 850+ 6707              //  ______________________________________________________________________
 851+ 6707              //
 852+ 6707              // inkey        -- c | 0
 853+ 6707              // call ROM inkey$ routine, returns c or "zero".
 854+ 6707
 855+ 6707                              New_Def INKEY, "INKEY", is_code, is_normal
 855+ 6707             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 855+ 6707             >
 855+ 6707             >                // dummy db directives used to calculate length of namec
 855+ 6707 49 4E 4B 45 >                db      "INKEY"
 855+ 670B 59          >
 855+ 670C             >len_NFA         defl    $ - temp_NFA
 855+ 670C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 855+ 6707             >
 855+ 6707 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 855+ 6708 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 855+ 670C 59          >
 855+ 670D             >                org     $-1                 // alter last byte of Name just above to set
 855+ 670C D9          >                db      {b $} | END_BIT     // msb as name end
 855+ 670D             >
 855+ 670D E4 66       >                dw      last_NFA            // Link to previous definition Name
 855+ 670F             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 855+ 670F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 855+ 670F ~           >
 855+ 670F ~           >
 855+ 670F             >                endif           ; ok        // for other definitions it "points" the correct handler
 855+ 670F             >                // Use of "; ok" to suppress "warning[fwdref]"
 855+ 670F             >
 855+ 670F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 856+ 670F
 857+ 670F C5                           push    bc
 858+ 6710 ED 73 92 63                  ld      (SP_Saved), sp
 859+ 6714 31 61 63                     ld      sp, Cold_origin - 5
 860+ 6717 DD E5                        push    ix
 861+ 6719 CD E6 15                     call    $15E6                   // instead of 15E9
 862+ 671C DD E1                        pop     ix
 863+ 671E ED 7B 92 63                  ld      sp, (SP_Saved)
 864+ 6722 6F                           ld      l, a
 865+ 6723 26 00                        ld      h, 0
 866+ 6725 C1                           pop     bc
 867+ 6726                              psh1
 867+ 6726 E5          >                push    hl
 867+ 6727 DD E9       >                jp      (ix)
 868+ 6729
 869+ 6729              //  ______________________________________________________________________
 870+ 6729              //
 871+ 6729              // select      n --
 872+ 6729              // selects the given channel number
 873+ 6729
 874+ 6729                              New_Def SELECT, "SELECT", is_code, is_normal
 874+ 6729             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 874+ 6729             >
 874+ 6729             >                // dummy db directives used to calculate length of namec
 874+ 6729 53 45 4C 45 >                db      "SELECT"
 874+ 672D 43 54       >
 874+ 672F             >len_NFA         defl    $ - temp_NFA
 874+ 672F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 874+ 6729             >
 874+ 6729 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 874+ 672A 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 874+ 672E 43 54       >
 874+ 6730             >                org     $-1                 // alter last byte of Name just above to set
 874+ 672F D4          >                db      {b $} | END_BIT     // msb as name end
 874+ 6730             >
 874+ 6730 07 67       >                dw      last_NFA            // Link to previous definition Name
 874+ 6732             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 874+ 6732 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 874+ 6732 ~           >
 874+ 6732 ~           >
 874+ 6732             >                endif           ; ok        // for other definitions it "points" the correct handler
 874+ 6732             >                // Use of "; ok" to suppress "warning[fwdref]"
 874+ 6732             >
 874+ 6732             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 875+ 6732 E1                           pop     hl
 876+ 6733 C5                           push    bc
 877+ 6734 7D                           ld      a, l
 878+ 6735 ED 73 92 63                  ld      (SP_Saved), sp
 879+ 6739 31 61 63                     ld      sp, Cold_origin - 5
 880+ 673C DD E5                        push    ix
 881+ 673E CD 01 16                     call    $1601
 882+ 6741 DD E1                        pop     ix
 883+ 6743 ED 7B 92 63                  ld      sp, (SP_Saved)
 884+ 6747 C1                           pop     bc
 885+ 6748
 886+ 6748                              next
 886+ 6748 DD E9       >                jp      (ix)
 887+ 674A
 888+ 674A              //  ______________________________________________________________________
 889+ 674A              //
 890+ 674A              // ZX Spectrum Next - Low Level disk primitives.
 891+ 674A              // this include is "here" for backward compatibility
 892+ 674A
 893+ 674A                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
   1++674A              //  ______________________________________________________________________
   2++674A              //
   3++674A              //  next-opt.asm
   4++674A              //
   5++674A              //  ZX Spectrum Next - peculiar definitions
   6++674A              //  ______________________________________________________________________
   7++674A
   8++674A              //  ______________________________________________________________________
   9++674A              //
  10++674A              // f_seek       d u -- f
  11++674A              // Seek to position d in file-handle u.
  12++674A              // Return a false-flag 0 on success, True flag on error
  13++674A                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++674A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++674A             >
  13++674A             >                // dummy db directives used to calculate length of namec
  13++674A 46 5F 53 45 >                db      "F_SEEK"
  13++674E 45 4B       >
  13++6750             >len_NFA         defl    $ - temp_NFA
  13++6750             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++674A             >
  13++674A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++674B 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++674F 45 4B       >
  13++6751             >                org     $-1                 // alter last byte of Name just above to set
  13++6750 CB          >                db      {b $} | END_BIT     // msb as name end
  13++6751             >
  13++6751 29 67       >                dw      last_NFA            // Link to previous definition Name
  13++6753             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++6753 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++6753 ~           >
  13++6753 ~           >
  13++6753             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++6753             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++6753             >
  13++6753             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++6753 E1                           pop     hl                  // file-handle
  15++6754 7D                           ld      a, l                // file-handle
  16++6755 60                           ld      h, b                // save Intruction Pointer
  17++6756 69                           ld      l, c
  18++6757 C1                           pop     bc                  // bc has high-word of d
  19++6758 D1                           pop     de
  20++6759 DD E5                        push    ix
  21++675B E5                           push    hl                  // save Instruction Pointer
  22++675C DD 21 00 00                  ld      ix, 0
  23++6760 CF                           rst     $08
  24++6761 9F                           db      $9F
  25++6762              F_Seek_Exit:
  26++6762 C1                           pop     bc                  // restore Instruction Pointer
  27++6763 DD E1                        pop     ix
  28++6765 ED 62                        sbc     hl, hl              // to get 0 or -1
  29++6767
  30++6767                              psh1
  30++6767 E5          >                push    hl
  30++6768 DD E9       >                jp      (ix)
  31++676A
  32++676A              //  ______________________________________________________________________
  33++676A              //
  34++676A              // f_close      u -- f
  35++676A              // Close file-handle u.
  36++676A              // Return 0 on success, True flag on error
  37++676A
  38++676A                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++676A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++676A             >
  38++676A             >                // dummy db directives used to calculate length of namec
  38++676A 46 5F 43 4C >                db      "F_CLOSE"
  38++676E 4F 53 45    >
  38++6771             >len_NFA         defl    $ - temp_NFA
  38++6771             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++676A             >
  38++676A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++676B 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++676F 4F 53 45    >
  38++6772             >                org     $-1                 // alter last byte of Name just above to set
  38++6771 C5          >                db      {b $} | END_BIT     // msb as name end
  38++6772             >
  38++6772 4A 67       >                dw      last_NFA            // Link to previous definition Name
  38++6774             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++6774 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  38++6774 ~           >
  38++6774 ~           >
  38++6774             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++6774             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++6774             >
  38++6774             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++6774
  40++6774 E1                           pop     hl
  41++6775 7D                           ld      a, l                // file-handle
  42++6776 DD E5                        push    ix
  43++6778 C5                           push    bc                  // Save Instruction pointer
  44++6779 CF                           rst     $08
  45++677A 9B                           db      $9B
  46++677B 18 E5                        jr      F_Seek_Exit
  47++677D              //              pop     bc
  48++677D              //              pop     ix
  49++677D              //              sbc     hl, hl
  50++677D              //              psh1
  51++677D
  52++677D              //  ______________________________________________________________________
  53++677D              //
  54++677D              // f_sync      u -- f
  55++677D              // Close file-handle u.
  56++677D              // Return 0 on success, True flag on error
  57++677D
  58++677D                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++677D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++677D             >
  58++677D             >                // dummy db directives used to calculate length of namec
  58++677D 46 5F 53 59 >                db      "F_SYNC"
  58++6781 4E 43       >
  58++6783             >len_NFA         defl    $ - temp_NFA
  58++6783             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++677D             >
  58++677D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++677E 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++6782 4E 43       >
  58++6784             >                org     $-1                 // alter last byte of Name just above to set
  58++6783 C3          >                db      {b $} | END_BIT     // msb as name end
  58++6784             >
  58++6784 6A 67       >                dw      last_NFA            // Link to previous definition Name
  58++6786             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++6786 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  58++6786 ~           >
  58++6786 ~           >
  58++6786             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++6786             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++6786             >
  58++6786             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++6786 E1                           pop     hl
  60++6787 7D                           ld      a, l                // file-handle
  61++6788 DD E5                        push    ix
  62++678A C5                           push    bc
  63++678B CF                           rst     $08
  64++678C 9C                           db      $9C
  65++678D 18 D3                        jr      F_Seek_Exit
  66++678F              //              pop     bc
  67++678F              //              pop     ix
  68++678F              //              sbc     hl, hl
  69++678F              //              psh1
  70++678F
  71++678F              //  ______________________________________________________________________
  72++678F              //
  73++678F              // f_fgetpos    u -- d f
  74++678F              // Seek to position d in file-handle u.
  75++678F              // Return a false-flag 0 on success, True flag on error
  76++678F                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++678F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++678F             >
  76++678F             >                // dummy db directives used to calculate length of namec
  76++678F 46 5F 46 47 >                db      "F_FGETPOS"
  76++6793 45 54 50 4F >
  76++6797 53          >
  76++6798             >len_NFA         defl    $ - temp_NFA
  76++6798             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++678F             >
  76++678F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++6790 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++6794 45 54 50 4F >
  76++6798 53          >
  76++6799             >                org     $-1                 // alter last byte of Name just above to set
  76++6798 D3          >                db      {b $} | END_BIT     // msb as name end
  76++6799             >
  76++6799 7D 67       >                dw      last_NFA            // Link to previous definition Name
  76++679B             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++679B ~           >                call    runcode ; ok        // for primitive definitions  actual code
  76++679B ~           >
  76++679B ~           >
  76++679B             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++679B             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++679B             >
  76++679B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++679B E1                           pop     hl
  78++679C 7D                           ld      a, l                // file-handle
  79++679D DD E5                        push    ix
  80++679F C5                           push    bc
  81++67A0 CF                           rst     $08
  82++67A1 A0                           db      $A0
  83++67A2 E1                           pop     hl                  // restore Instruction Pointer
  84++67A3 DD E1                        pop     ix
  85++67A5 D5                           push    de
  86++67A6 C5                           push    bc
  87++67A7 44                           ld      b, h                // restore Instruction Pointer
  88++67A8 4D                           ld      c, l
  89++67A9 ED 62                        sbc     hl, hl
  90++67AB
  91++67AB                              psh1
  91++67AB E5          >                push    hl
  91++67AC DD E9       >                jp      (ix)
  92++67AE
  93++67AE              //  ______________________________________________________________________
  94++67AE              //
  95++67AE              // f_read       a b u -- n f
  96++67AE              // Read b bytes from file-handle u to address a
  97++67AE              // Return the actual number n of bytes read
  98++67AE              // Return 0 on success, True flag on error
  99++67AE                              New_Def F_READ, "F_READ", is_code, is_normal
  99++67AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++67AE             >
  99++67AE             >                // dummy db directives used to calculate length of namec
  99++67AE 46 5F 52 45 >                db      "F_READ"
  99++67B2 41 44       >
  99++67B4             >len_NFA         defl    $ - temp_NFA
  99++67B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++67AE             >
  99++67AE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++67AF 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++67B3 41 44       >
  99++67B5             >                org     $-1                 // alter last byte of Name just above to set
  99++67B4 C4          >                db      {b $} | END_BIT     // msb as name end
  99++67B5             >
  99++67B5 8F 67       >                dw      last_NFA            // Link to previous definition Name
  99++67B7             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++67B7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  99++67B7 ~           >
  99++67B7 ~           >
  99++67B7             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++67B7             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++67B7             >
  99++67B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++67B7
 101++67B7 50                           ld      d, b
 102++67B8 59                           ld      e, c
 103++67B9 E1                           pop     hl
 104++67BA 7D                           ld      a, l                // file-handle
 105++67BB C1                           pop     bc                  // bc has bytes to read
 106++67BC DD E3                        ex      (sp), ix            // ix has address
 107++67BE D5                           push    de                  // Save Instruction pointer
 108++67BF CF                           rst     $08
 109++67C0 9D                           db      $9D
 110++67C1              F_Read_Exit:
 111++67C1 C1                           pop     bc                  // Restore Instruction pointer
 112++67C2 DD E1                        pop     ix                  // Restore ix
 113++67C4 D5                           push    de                  // bytes written
 114++67C5 ED 62                        sbc     hl, hl
 115++67C7
 116++67C7                              psh1
 116++67C7 E5          >                push    hl
 116++67C8 DD E9       >                jp      (ix)
 117++67CA
 118++67CA              //  ______________________________________________________________________
 119++67CA              //
 120++67CA              // f_write      a b u -- n f
 121++67CA              // Write bytes currently stored at address a to file-handle u.
 122++67CA              // Return the actual n bytes written and 0 on success, True flag on error.
 123++67CA                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++67CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++67CA             >
 123++67CA             >                // dummy db directives used to calculate length of namec
 123++67CA 46 5F 57 52 >                db      "F_WRITE"
 123++67CE 49 54 45    >
 123++67D1             >len_NFA         defl    $ - temp_NFA
 123++67D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++67CA             >
 123++67CA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++67CB 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++67CF 49 54 45    >
 123++67D2             >                org     $-1                 // alter last byte of Name just above to set
 123++67D1 C5          >                db      {b $} | END_BIT     // msb as name end
 123++67D2             >
 123++67D2 AE 67       >                dw      last_NFA            // Link to previous definition Name
 123++67D4             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++67D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 123++67D4 ~           >
 123++67D4 ~           >
 123++67D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++67D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++67D4             >
 123++67D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++67D4
 125++67D4 50                           ld      d, b
 126++67D5 59                           ld      e, c
 127++67D6 E1                           pop     hl
 128++67D7 7D                           ld      a, l                // file-handle
 129++67D8 C1                           pop     bc                  // bc has bytes to read
 130++67D9 DD E3                        ex      (sp), ix            // ix has address
 131++67DB D5                           push    de                  // Save Instruction pointer
 132++67DC CF                           rst     $08
 133++67DD 9E                           db      $9E
 134++67DE 18 E1                        jr F_Read_Exit
 135++67E0              //              pop     bc                  // Restore Instruction pointer
 136++67E0              //              pop     ix                  // Restore ix
 137++67E0              //              push    de                  // bytes written
 138++67E0              //              sbc     hl, hl
 139++67E0              //
 140++67E0              //              psh1
 141++67E0
 142++67E0              //  ______________________________________________________________________
 143++67E0              //
 144++67E0              // f_open       a1 a2 b -- u f
 145++67E0              // open a file
 146++67E0              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++67E0              // a2 is address to an 8-byte header data used in some cases.
 148++67E0              // b is access mode-byte, that is a combination of:
 149++67E0              // any/all of:
 150++67E0              //   esx_mode_read          $01 request read access
 151++67E0              //   esx_mode_write         $02 request write access
 152++67E0              //   esx_mode_use_header    $40 read/write +3DOS header
 153++67E0              // plus one of:
 154++67E0              //   esx_mode_open_exist    $00 only open existing file
 155++67E0              //   esx_mode_open_creat    $08 open existing or create file
 156++67E0              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++67E0              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++67E0              // Return file-handle u and 0 on success, True flag on error
 159++67E0                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++67E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++67E0             >
 159++67E0             >                // dummy db directives used to calculate length of namec
 159++67E0 46 5F 4F 50 >                db      "F_OPEN"
 159++67E4 45 4E       >
 159++67E6             >len_NFA         defl    $ - temp_NFA
 159++67E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++67E0             >
 159++67E0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++67E1 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++67E5 45 4E       >
 159++67E7             >                org     $-1                 // alter last byte of Name just above to set
 159++67E6 CE          >                db      {b $} | END_BIT     // msb as name end
 159++67E7             >
 159++67E7 CA 67       >                dw      last_NFA            // Link to previous definition Name
 159++67E9             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++67E9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 159++67E9 ~           >
 159++67E9 ~           >
 159++67E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++67E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++67E9             >
 159++67E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++67E9 60                           ld      h, b                // Save Instruction pointer
 161++67EA 69                           ld      l, c
 162++67EB C1                           pop     bc                  // file-mode
 163++67EC 41                           ld      b, c                // file-mode
 164++67ED D1                           pop     de                  // 8-bytes buffer if any
 165++67EE DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++67F0 E5                           push    hl                  // Save Instruction pointer
 167++67F1 3E 2A                        ld      a, "*"
 168++67F3 CF                           rst     $08
 169++67F4 9A                           db      $9A
 170++67F5              F_Open_Exit:
 171++67F5 C1                           pop     bc
 172++67F6 DD E1                        pop     ix
 173++67F8 ED 62                        sbc     hl, hl
 174++67FA 5F                           ld      e, a
 175++67FB 16 00                        ld      d, 0
 176++67FD
 177++67FD
 178++67FD                              psh2
 178++67FD D5          >                push    de
 178++67FE E5          >                push    hl
 178++67FF DD E9       >                jp      (ix)
 179++6801
 180++6801              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 181++6801              //   \ FILENAME 1+ PAD 1 F_OPEN
 182++6801              //   \ DROP
 183++6801              //   \ F_CLOSE
 184++6801
 185++6801
 186++6801              //  ______________________________________________________________________
 187++6801              //
 188++6801              // f_opendir    a1 a2 b -- u f
 189++6801              // open a file
 190++6801                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 190++6801             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190++6801             >
 190++6801             >                // dummy db directives used to calculate length of namec
 190++6801 46 5F 4F 50 >                db      "F_OPENDIR"
 190++6805 45 4E 44 49 >
 190++6809 52          >
 190++680A             >len_NFA         defl    $ - temp_NFA
 190++680A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190++6801             >
 190++6801 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190++6802 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 190++6806 45 4E 44 49 >
 190++680A 52          >
 190++680B             >                org     $-1                 // alter last byte of Name just above to set
 190++680A D2          >                db      {b $} | END_BIT     // msb as name end
 190++680B             >
 190++680B E0 67       >                dw      last_NFA            // Link to previous definition Name
 190++680D             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190++680D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190++680D ~           >
 190++680D ~           >
 190++680D             >                endif           ; ok        // for other definitions it "points" the correct handler
 190++680D             >                // Use of "; ok" to suppress "warning[fwdref]"
 190++680D             >
 190++680D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191++680D DD E3                        ex      (sp), ix            // filespec nul-terminated
 192++680F C5                           push    bc                  // Save Instruction pointer
 193++6810 06 10                        ld      b, $10              // file-mode
 194++6812 3E 43                        ld      a, "C"
 195++6814 CF                           rst     $08
 196++6815 A3                           db      $A3
 197++6816 18 DD                        jr      F_Open_Exit
 198++6818
 199++6818
 200++6818              //  ______________________________________________________________________
 201++6818              //
 202++6818              // f_readdir    a1 a2 b -- u f
 203++6818              // open a file
 204++6818                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 204++6818             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204++6818             >
 204++6818             >                // dummy db directives used to calculate length of namec
 204++6818 46 5F 52 45 >                db      "F_READDIR"
 204++681C 41 44 44 49 >
 204++6820 52          >
 204++6821             >len_NFA         defl    $ - temp_NFA
 204++6821             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204++6818             >
 204++6818 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204++6819 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 204++681D 41 44 44 49 >
 204++6821 52          >
 204++6822             >                org     $-1                 // alter last byte of Name just above to set
 204++6821 D2          >                db      {b $} | END_BIT     // msb as name end
 204++6822             >
 204++6822 01 68       >                dw      last_NFA            // Link to previous definition Name
 204++6824             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 204++6824 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 204++6824 ~           >
 204++6824 ~           >
 204++6824             >                endif           ; ok        // for other definitions it "points" the correct handler
 204++6824             >                // Use of "; ok" to suppress "warning[fwdref]"
 204++6824             >
 204++6824             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205++6824 E1                           pop     hl
 206++6825 7D                           ld      a, l
 207++6826 D1                           pop     de
 208++6827 DD E3                        ex      (sp), ix            // filespec nul-terminated
 209++6829 C5                           push    bc                  // Save Instruction pointer
 210++682A CF                           rst     $08
 211++682B A4                           db      $A4
 212++682C 18 C7                        jr      F_Open_Exit
 213++682E
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
 894+ 682E
 895+ 682E
 896+ 682E              //  ______________________________________________________________________
 897+ 682E              //
 898+ 682E              // cr           --
 899+ 682E              // send a CR via EMITC
 900+ 682E                              New_Def CR, "CR", is_code, is_normal
 900+ 682E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 900+ 682E             >
 900+ 682E             >                // dummy db directives used to calculate length of namec
 900+ 682E 43 52       >                db      "CR"
 900+ 6830             >len_NFA         defl    $ - temp_NFA
 900+ 6830             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 900+ 682E             >
 900+ 682E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 900+ 682F 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 900+ 6831             >                org     $-1                 // alter last byte of Name just above to set
 900+ 6830 D2          >                db      {b $} | END_BIT     // msb as name end
 900+ 6831             >
 900+ 6831 18 68       >                dw      last_NFA            // Link to previous definition Name
 900+ 6833             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 900+ 6833 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 900+ 6833 ~           >
 900+ 6833 ~           >
 900+ 6833             >                endif           ; ok        // for other definitions it "points" the correct handler
 900+ 6833             >                // Use of "; ok" to suppress "warning[fwdref]"
 900+ 6833             >
 900+ 6833             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 901+ 6833
 902+ 6833 3E 0D                        ld      a, CR_CHAR
 903+ 6835 C3 D7 65                     jp      Emitc_Ptr
 904+ 6838
 905+ 6838              //  ______________________________________________________________________
 906+ 6838              //
 907+ 6838              // cmove    a1 a2 u --
 908+ 6838              // If u > 0, moves memory content starting at address a1 for n bytes long
 909+ 6838              // storing then starting at address addr2.
 910+ 6838              // The content of a1 is moved first. See CMOVE> also.
 911+ 6838                              New_Def CMOVE, "CMOVE", is_code, is_normal
 911+ 6838             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 911+ 6838             >
 911+ 6838             >                // dummy db directives used to calculate length of namec
 911+ 6838 43 4D 4F 56 >                db      "CMOVE"
 911+ 683C 45          >
 911+ 683D             >len_NFA         defl    $ - temp_NFA
 911+ 683D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 911+ 6838             >
 911+ 6838 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 911+ 6839 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 911+ 683D 45          >
 911+ 683E             >                org     $-1                 // alter last byte of Name just above to set
 911+ 683D C5          >                db      {b $} | END_BIT     // msb as name end
 911+ 683E             >
 911+ 683E 2E 68       >                dw      last_NFA            // Link to previous definition Name
 911+ 6840             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 911+ 6840 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 911+ 6840 ~           >
 911+ 6840 ~           >
 911+ 6840             >                endif           ; ok        // for other definitions it "points" the correct handler
 911+ 6840             >                // Use of "; ok" to suppress "warning[fwdref]"
 911+ 6840             >
 911+ 6840             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 912+ 6840 D9                           exx
 913+ 6841
 914+ 6841 C1                           pop     bc                  // bc has counter
 915+ 6842 D1                           pop     de                  // de now has dest
 916+ 6843 E1                           pop     hl                 // hl has source, save Instruction Pointer
 917+ 6844 78                           ld      a, b
 918+ 6845 B1                           or      c
 919+ 6846 28 02                        jr      z, Cmove_NoMove
 920+ 6848 ED B0                            ldir
 921+ 684A              Cmove_NoMove:
 922+ 684A D9                           exx
 923+ 684B
 924+ 684B                              next
 924+ 684B DD E9       >                jp      (ix)
 925+ 684D
 926+ 684D              //  ______________________________________________________________________
 927+ 684D              //
 928+ 684D              // cmove>    a1 a2 u --
 929+ 684D              // If u > 0, moves memory content starting at address a1 for n bytes long
 930+ 684D              // storing then starting at address addr2.
 931+ 684D              // The content of a1 is moved last. See cmove.
 932+ 684D                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 932+ 684D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 932+ 684D             >
 932+ 684D             >                // dummy db directives used to calculate length of namec
 932+ 684D 43 4D 4F 56 >                db      "CMOVE>"
 932+ 6851 45 3E       >
 932+ 6853             >len_NFA         defl    $ - temp_NFA
 932+ 6853             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 932+ 684D             >
 932+ 684D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 932+ 684E 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 932+ 6852 45 3E       >
 932+ 6854             >                org     $-1                 // alter last byte of Name just above to set
 932+ 6853 BE          >                db      {b $} | END_BIT     // msb as name end
 932+ 6854             >
 932+ 6854 38 68       >                dw      last_NFA            // Link to previous definition Name
 932+ 6856             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 932+ 6856 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 932+ 6856 ~           >
 932+ 6856 ~           >
 932+ 6856             >                endif           ; ok        // for other definitions it "points" the correct handler
 932+ 6856             >                // Use of "; ok" to suppress "warning[fwdref]"
 932+ 6856             >
 932+ 6856             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 933+ 6856 D9                           exx
 934+ 6857
 935+ 6857 C1                           pop     bc                  // bc has counter
 936+ 6858 D1                           pop     de                  // de has dest
 937+ 6859 E1                           pop     hl                  // hl has source, save Instruction Pointer
 938+ 685A 78                           ld      a, b
 939+ 685B B1                           or      c
 940+ 685C 28 08                        jr      z, CmoveV_NoMove
 941+ 685E EB                               ex      de, hl              // compute address to
 942+ 685F 09                               add     hl, bc              // operate backward
 943+ 6860 2B                               dec     hl
 944+ 6861 EB                               ex      de, hl
 945+ 6862 09                               add     hl, bc
 946+ 6863 2B                               dec     hl
 947+ 6864 ED B8                            lddr                        // backward
 948+ 6866              CmoveV_NoMove:
 949+ 6866 D9                           exx
 950+ 6867
 951+ 6867                              next
 951+ 6867 DD E9       >                jp      (ix)
 952+ 6869
 953+ 6869              //  ______________________________________________________________________
 954+ 6869              //
 955+ 6869              // um*      u1 u2 -- ud
 956+ 6869              // Unsigned multiplication
 957+ 6869              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 958+ 6869              // On the stack a double number is treated as two single numbers
 959+ 6869              // where DE is on the top of the stack and HL is the second from top,
 960+ 6869              // Instead, in 2VARIABLE a double number is stored as EDLH.
 961+ 6869              // this definition could use "MUL" Z80N new op-code.
 962+ 6869                              New_Def UM_MUL, "UM*", is_code, is_normal
 962+ 6869             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 962+ 6869             >
 962+ 6869             >                // dummy db directives used to calculate length of namec
 962+ 6869 55 4D 2A    >                db      "UM*"
 962+ 686C             >len_NFA         defl    $ - temp_NFA
 962+ 686C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 962+ 6869             >
 962+ 6869 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 962+ 686A 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 962+ 686D             >                org     $-1                 // alter last byte of Name just above to set
 962+ 686C AA          >                db      {b $} | END_BIT     // msb as name end
 962+ 686D             >
 962+ 686D 4D 68       >                dw      last_NFA            // Link to previous definition Name
 962+ 686F             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 962+ 686F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 962+ 686F ~           >
 962+ 686F ~           >
 962+ 686F             >                endif           ; ok        // for other definitions it "points" the correct handler
 962+ 686F             >                // Use of "; ok" to suppress "warning[fwdref]"
 962+ 686F             >
 962+ 686F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 963+ 686F D9                           exx
 964+ 6870 D1                           pop     de                    // de has u2 operand
 965+ 6871 E1                           pop     hl                    // hl has u1 operand
 966+ 6872 45                           ld      b, l
 967+ 6873 4B                           ld      c, e
 968+ 6874 5D                           ld      e, l
 969+ 6875 6A                           ld      l, d
 970+ 6876 E5                           push    hl
 971+ 6877 69                           ld      l, c
 972+ 6878 ED 30                        mul
 973+ 687A EB                           ex      de, hl
 974+ 687B ED 30                        mul
 975+ 687D AF                           xor     a
 976+ 687E 19                           add     hl, de
 977+ 687F 8F                           adc     a
 978+ 6880 59                           ld      e, c
 979+ 6881 50                           ld      d, b
 980+ 6882 ED 30                        mul
 981+ 6884 47                           ld      b, a
 982+ 6885 4C                           ld      c, h
 983+ 6886 7A                           ld      a, d
 984+ 6887 85                           add     l
 985+ 6888 67                           ld      h, a
 986+ 6889 6B                           ld      l, e
 987+ 688A D1                           pop     de
 988+ 688B ED 30                        mul
 989+ 688D EB                           ex      de, hl
 990+ 688E ED 4A                        adc     hl, bc
 991+ 6890 D5                           push    de
 992+ 6891 E5                           push    hl
 993+ 6892 D9                           exx
 994+ 6893                              next
 994+ 6893 DD E9       >                jp      (ix)
 995+ 6895
 996+ 6895              //  ______________________________________________________________________
 997+ 6895              //
 998+ 6895              // um/mod      ud u1 -- q r
 999+ 6895              // divides ud into u1 giving quotient q and remainder r
1000+ 6895              // algorithm takes 16 bit at a time starting from msb
1001+ 6895              // DE grows from lsb upward with quotient result
1002+ 6895              // HL keeps the remainder at each stage of division
1003+ 6895              // each loop 'lowers' the next binary digit to form the current dividend
1004+ 6895                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1004+ 6895             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1004+ 6895             >
1004+ 6895             >                // dummy db directives used to calculate length of namec
1004+ 6895 55 4D 2F 4D >                db      "UM/MOD"
1004+ 6899 4F 44       >
1004+ 689B             >len_NFA         defl    $ - temp_NFA
1004+ 689B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1004+ 6895             >
1004+ 6895 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1004+ 6896 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1004+ 689A 4F 44       >
1004+ 689C             >                org     $-1                 // alter last byte of Name just above to set
1004+ 689B C4          >                db      {b $} | END_BIT     // msb as name end
1004+ 689C             >
1004+ 689C 69 68       >                dw      last_NFA            // Link to previous definition Name
1004+ 689E             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1004+ 689E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1004+ 689E ~           >
1004+ 689E ~           >
1004+ 689E             >                endif           ; ok        // for other definitions it "points" the correct handler
1004+ 689E             >                // Use of "; ok" to suppress "warning[fwdref]"
1004+ 689E             >
1004+ 689E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1005+ 689E D9                           exx
1006+ 689F C1                           pop     bc                      // divisor
1007+ 68A0
1008+ 68A0 E1                           pop     hl                      // < high part
1009+ 68A1 D1                           pop     de                      // < low part and
1010+ 68A2
1011+ 68A2 7D                           ld      a, l                    // check without changing arguments
1012+ 68A3 91                           sub     c                       // if divisor is greater than high part
1013+ 68A4 7C                           ld      a, h                    // so quotient will be in range
1014+ 68A5 98                           sbc     a, b
1015+ 68A6 30 23                        jr      nc, Um_DivMod_OutOfRange
1016+ 68A8 3E 10                            ld      a, 16
1017+ 68AA              Um_DivMod_Loop:
1018+ 68AA A7                                   and     a
1019+ 68AB CB 13                                rl      e
1020+ 68AD CB 12                                rl      d
1021+ 68AF CB 15                                rl      l
1022+ 68B1 CB 14                                rl      h
1023+ 68B3 30 05                                jr      nc, Um_DivMod_Carry
1024+ 68B5 A7                                       and     a
1025+ 68B6 ED 42                                    sbc     hl, bc
1026+ 68B8 18 07                                jr      Um_DivMod_Endif    // else
1027+ 68BA              Um_DivMod_Carry:
1028+ 68BA A7                                       and     a
1029+ 68BB ED 42                                    sbc     hl, bc
1030+ 68BD 30 02                                    jr      nc, Um_DivMod_Endif
1031+ 68BF 09                                           add     hl, bc
1032+ 68C0 1B                                           dec     de
1033+ 68C1              Um_DivMod_Endif:                                   // endif
1034+ 68C1 13                                   inc     de
1035+ 68C2 3D                                   dec     a
1036+ 68C3 20 E5                            jr      nz, Um_DivMod_Loop
1037+ 68C5 EB                               ex      de, hl
1038+ 68C6              Um_DivMod_Bailout:
1039+ 68C6 D5                               push    de                  // de := remanider
1040+ 68C7 E5                               push    hl                  // hl := quotient
1041+ 68C8 D9                               exx
1042+ 68C9                                  next
1042+ 68C9 DD E9       >                jp      (ix)
1043+ 68CB
1044+ 68CB              Um_DivMod_OutOfRange:
1045+ 68CB 21 FF FF                     ld      hl, -1
1046+ 68CE 54                           ld      d, h
1047+ 68CF 5D                           ld      e, l
1048+ 68D0 18 F4                        jr      Um_DivMod_Bailout
1049+ 68D2
1050+ 68D2              //  ______________________________________________________________________
1051+ 68D2              //
1052+ 68D2              // and          n1 n2 -- n3
1053+ 68D2              // bit logical AND. Returns n3 as n1 & n2
1054+ 68D2                              New_Def AND_OP, "AND", is_code, is_normal
1054+ 68D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1054+ 68D2             >
1054+ 68D2             >                // dummy db directives used to calculate length of namec
1054+ 68D2 41 4E 44    >                db      "AND"
1054+ 68D5             >len_NFA         defl    $ - temp_NFA
1054+ 68D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1054+ 68D2             >
1054+ 68D2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1054+ 68D3 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1054+ 68D6             >                org     $-1                 // alter last byte of Name just above to set
1054+ 68D5 C4          >                db      {b $} | END_BIT     // msb as name end
1054+ 68D6             >
1054+ 68D6 95 68       >                dw      last_NFA            // Link to previous definition Name
1054+ 68D8             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1054+ 68D8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1054+ 68D8 ~           >
1054+ 68D8 ~           >
1054+ 68D8             >                endif           ; ok        // for other definitions it "points" the correct handler
1054+ 68D8             >                // Use of "; ok" to suppress "warning[fwdref]"
1054+ 68D8             >
1054+ 68D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1055+ 68D8 D1                           pop     de
1056+ 68D9 E1                           pop     hl
1057+ 68DA 7B                           ld      a, e
1058+ 68DB A5                           and     l
1059+ 68DC 6F                           ld      l, a
1060+ 68DD 7A                           ld      a, d
1061+ 68DE A4                           and     h
1062+ 68DF 67                           ld      h, a
1063+ 68E0
1064+ 68E0                              psh1
1064+ 68E0 E5          >                push    hl
1064+ 68E1 DD E9       >                jp      (ix)
1065+ 68E3
1066+ 68E3              //  ______________________________________________________________________
1067+ 68E3              //
1068+ 68E3              // or           n1 n2 -- n3
1069+ 68E3              // bit logical OR. Returns n3 as n1 | n2
1070+ 68E3                              New_Def OR_OP, "OR", is_code, is_normal
1070+ 68E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1070+ 68E3             >
1070+ 68E3             >                // dummy db directives used to calculate length of namec
1070+ 68E3 4F 52       >                db      "OR"
1070+ 68E5             >len_NFA         defl    $ - temp_NFA
1070+ 68E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1070+ 68E3             >
1070+ 68E3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1070+ 68E4 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1070+ 68E6             >                org     $-1                 // alter last byte of Name just above to set
1070+ 68E5 D2          >                db      {b $} | END_BIT     // msb as name end
1070+ 68E6             >
1070+ 68E6 D2 68       >                dw      last_NFA            // Link to previous definition Name
1070+ 68E8             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1070+ 68E8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1070+ 68E8 ~           >
1070+ 68E8 ~           >
1070+ 68E8             >                endif           ; ok        // for other definitions it "points" the correct handler
1070+ 68E8             >                // Use of "; ok" to suppress "warning[fwdref]"
1070+ 68E8             >
1070+ 68E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1071+ 68E8 D1                           pop     de
1072+ 68E9 E1                           pop     hl
1073+ 68EA 7B                           ld      a, e
1074+ 68EB B5                           or      l
1075+ 68EC 6F                           ld      l, a
1076+ 68ED 7A                           ld      a, d
1077+ 68EE B4                           or      h
1078+ 68EF 67                           ld      h, a
1079+ 68F0
1080+ 68F0                              psh1
1080+ 68F0 E5          >                push    hl
1080+ 68F1 DD E9       >                jp      (ix)
1081+ 68F3
1082+ 68F3              //  ______________________________________________________________________
1083+ 68F3              //
1084+ 68F3              // xor          n1 n2 -- n3
1085+ 68F3              // bit logical OR. Returns n3 as n1 ^ n2
1086+ 68F3                              New_Def XOR_OP, "XOR", is_code, is_normal
1086+ 68F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1086+ 68F3             >
1086+ 68F3             >                // dummy db directives used to calculate length of namec
1086+ 68F3 58 4F 52    >                db      "XOR"
1086+ 68F6             >len_NFA         defl    $ - temp_NFA
1086+ 68F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1086+ 68F3             >
1086+ 68F3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1086+ 68F4 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1086+ 68F7             >                org     $-1                 // alter last byte of Name just above to set
1086+ 68F6 D2          >                db      {b $} | END_BIT     // msb as name end
1086+ 68F7             >
1086+ 68F7 E3 68       >                dw      last_NFA            // Link to previous definition Name
1086+ 68F9             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1086+ 68F9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1086+ 68F9 ~           >
1086+ 68F9 ~           >
1086+ 68F9             >                endif           ; ok        // for other definitions it "points" the correct handler
1086+ 68F9             >                // Use of "; ok" to suppress "warning[fwdref]"
1086+ 68F9             >
1086+ 68F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1087+ 68F9 D1                           pop     de
1088+ 68FA E1                           pop     hl
1089+ 68FB 7B                           ld      a, e
1090+ 68FC AD                           xor     l
1091+ 68FD 6F                           ld      l, a
1092+ 68FE 7A                           ld      a, d
1093+ 68FF AC                           xor     h
1094+ 6900 67                           ld      h, a
1095+ 6901
1096+ 6901                              psh1
1096+ 6901 E5          >                push    hl
1096+ 6902 DD E9       >                jp      (ix)
1097+ 6904
1098+ 6904              //  ______________________________________________________________________
1099+ 6904              //
1100+ 6904              // sp@      -- a
1101+ 6904              // returns on top of stack the value of SP before execution
1102+ 6904                              New_Def SPFETCH, "SP@", is_code, is_normal
1102+ 6904             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1102+ 6904             >
1102+ 6904             >                // dummy db directives used to calculate length of namec
1102+ 6904 53 50 40    >                db      "SP@"
1102+ 6907             >len_NFA         defl    $ - temp_NFA
1102+ 6907             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1102+ 6904             >
1102+ 6904 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1102+ 6905 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1102+ 6908             >                org     $-1                 // alter last byte of Name just above to set
1102+ 6907 C0          >                db      {b $} | END_BIT     // msb as name end
1102+ 6908             >
1102+ 6908 F3 68       >                dw      last_NFA            // Link to previous definition Name
1102+ 690A             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1102+ 690A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1102+ 690A ~           >
1102+ 690A ~           >
1102+ 690A             >                endif           ; ok        // for other definitions it "points" the correct handler
1102+ 690A             >                // Use of "; ok" to suppress "warning[fwdref]"
1102+ 690A             >
1102+ 690A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1103+ 690A
1104+ 690A 21 00 00                     ld      hl, 0
1105+ 690D 39                           add     hl, sp
1106+ 690E
1107+ 690E                              psh1
1107+ 690E E5          >                push    hl
1107+ 690F DD E9       >                jp      (ix)
1108+ 6911
1109+ 6911              //  ______________________________________________________________________
1110+ 6911              //
1111+ 6911              // sp!      a --
1112+ 6911              // restore SP to the initial value passed
1113+ 6911              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1114+ 6911                              New_Def SPSTORE, "SP!", is_code, is_normal
1114+ 6911             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1114+ 6911             >
1114+ 6911             >                // dummy db directives used to calculate length of namec
1114+ 6911 53 50 21    >                db      "SP!"
1114+ 6914             >len_NFA         defl    $ - temp_NFA
1114+ 6914             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1114+ 6911             >
1114+ 6911 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1114+ 6912 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1114+ 6915             >                org     $-1                 // alter last byte of Name just above to set
1114+ 6914 A1          >                db      {b $} | END_BIT     // msb as name end
1114+ 6915             >
1114+ 6915 04 69       >                dw      last_NFA            // Link to previous definition Name
1114+ 6917             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1114+ 6917 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1114+ 6917 ~           >
1114+ 6917 ~           >
1114+ 6917             >                endif           ; ok        // for other definitions it "points" the correct handler
1114+ 6917             >                // Use of "; ok" to suppress "warning[fwdref]"
1114+ 6917             >
1114+ 6917             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1115+ 6917 E1                           pop     hl
1116+ 6918 F9                           ld      sp, hl
1117+ 6919
1118+ 6919                              next
1118+ 6919 DD E9       >                jp      (ix)
1119+ 691B
1120+ 691B              //  ______________________________________________________________________
1121+ 691B              //
1122+ 691B              // rp@      -- a
1123+ 691B              // returns on top of stack the value of Return-Pointer
1124+ 691B                              New_Def RPFETCH, "RP@", is_code, is_normal
1124+ 691B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1124+ 691B             >
1124+ 691B             >                // dummy db directives used to calculate length of namec
1124+ 691B 52 50 40    >                db      "RP@"
1124+ 691E             >len_NFA         defl    $ - temp_NFA
1124+ 691E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1124+ 691B             >
1124+ 691B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1124+ 691C 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1124+ 691F             >                org     $-1                 // alter last byte of Name just above to set
1124+ 691E C0          >                db      {b $} | END_BIT     // msb as name end
1124+ 691F             >
1124+ 691F 11 69       >                dw      last_NFA            // Link to previous definition Name
1124+ 6921             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1124+ 6921 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1124+ 6921 ~           >
1124+ 6921 ~           >
1124+ 6921             >                endif           ; ok        // for other definitions it "points" the correct handler
1124+ 6921             >                // Use of "; ok" to suppress "warning[fwdref]"
1124+ 6921             >
1124+ 6921             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1125+ 6921
1126+ 6921                              ldhlrp
1126+ 6921 2A 96 63    >                ld      hl,(RP_Pointer)
1127+ 6924
1128+ 6924                              psh1
1128+ 6924 E5          >                push    hl
1128+ 6925 DD E9       >                jp      (ix)
1129+ 6927
1130+ 6927              //  ______________________________________________________________________
1131+ 6927              //
1132+ 6927              // rp!      a --
1133+ 6927              // restore RP to the initial value passed
1134+ 6927              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1135+ 6927                              New_Def RPSTORE, "RP!", is_code, is_normal
1135+ 6927             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1135+ 6927             >
1135+ 6927             >                // dummy db directives used to calculate length of namec
1135+ 6927 52 50 21    >                db      "RP!"
1135+ 692A             >len_NFA         defl    $ - temp_NFA
1135+ 692A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1135+ 6927             >
1135+ 6927 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1135+ 6928 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1135+ 692B             >                org     $-1                 // alter last byte of Name just above to set
1135+ 692A A1          >                db      {b $} | END_BIT     // msb as name end
1135+ 692B             >
1135+ 692B 1B 69       >                dw      last_NFA            // Link to previous definition Name
1135+ 692D             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1135+ 692D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1135+ 692D ~           >
1135+ 692D ~           >
1135+ 692D             >                endif           ; ok        // for other definitions it "points" the correct handler
1135+ 692D             >                // Use of "; ok" to suppress "warning[fwdref]"
1135+ 692D             >
1135+ 692D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1136+ 692D E1                           pop     hl
1137+ 692E                              ldrphl
1137+ 692E 22 96 63    >                ld      (RP_Pointer),hl
1138+ 6931
1139+ 6931                              next
1139+ 6931 DD E9       >                jp      (ix)
1140+ 6933
1141+ 6933              //  ______________________________________________________________________
1142+ 6933              //
1143+ 6933              // exit       --
1144+ 6933              // exits back to the caller word
1145+ 6933                              New_Def EXIT, "EXIT", is_code, is_normal
1145+ 6933             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1145+ 6933             >
1145+ 6933             >                // dummy db directives used to calculate length of namec
1145+ 6933 45 58 49 54 >                db      "EXIT"
1145+ 6937             >len_NFA         defl    $ - temp_NFA
1145+ 6937             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1145+ 6933             >
1145+ 6933 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1145+ 6934 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1145+ 6938             >                org     $-1                 // alter last byte of Name just above to set
1145+ 6937 D4          >                db      {b $} | END_BIT     // msb as name end
1145+ 6938             >
1145+ 6938 27 69       >                dw      last_NFA            // Link to previous definition Name
1145+ 693A             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1145+ 693A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1145+ 693A ~           >
1145+ 693A ~           >
1145+ 693A             >                endif           ; ok        // for other definitions it "points" the correct handler
1145+ 693A             >                // Use of "; ok" to suppress "warning[fwdref]"
1145+ 693A             >
1145+ 693A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1146+ 693A                              ldhlrp                      // Get Return Stack Pointer
1146+ 693A 2A 96 63    >                ld      hl,(RP_Pointer)
1147+ 693D 4E                           ld      c, (hl)             // pop Instruction Pointer
1148+ 693E 23                           inc     hl                  // from Return Stack
1149+ 693F 46                           ld      b, (hl)
1150+ 6940 23                           inc     hl
1151+ 6941                              ldrphl                      // Set Return Stack Pointer
1151+ 6941 22 96 63    >                ld      (RP_Pointer),hl
1152+ 6944                              next
1152+ 6944 DD E9       >                jp      (ix)
1153+ 6946
1154+ 6946              //  ______________________________________________________________________
1155+ 6946              //
1156+ 6946              // lastl      --
1157+ 6946              // exits back to the caller word
1158+ 6946              //              New_Def EXIT, "LASTL", is_code, is_normal
1159+ 6946              //              ldhlrp                      // Get Return Stack Pointer
1160+ 6946              //              ld      e, (hl)             // pop Instruction Pointer
1161+ 6946              //              inc     hl                  // from Return Stack
1162+ 6946              //              ld      d, (hl)
1163+ 6946              //              inc     hl
1164+ 6946              //              ld      (hl), e
1165+ 6946              //              inc     hl
1166+ 6946              //              ld      (hl), d
1167+ 6946              //              next
1168+ 6946
1169+ 6946              //  ______________________________________________________________________
1170+ 6946              //
1171+ 6946              // (leave)        --
1172+ 6946              // compiled by LEAVE
1173+ 6946              // this forces to exit from loop and jump past
1174+ 6946                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
1174+ 6946             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1174+ 6946             >
1174+ 6946             >                // dummy db directives used to calculate length of namec
1174+ 6946 28 4C 45 41 >                db      "(LEAVE)"
1174+ 694A 56 45 29    >
1174+ 694D             >len_NFA         defl    $ - temp_NFA
1174+ 694D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1174+ 6946             >
1174+ 6946 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1174+ 6947 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
1174+ 694B 56 45 29    >
1174+ 694E             >                org     $-1                 // alter last byte of Name just above to set
1174+ 694D A9          >                db      {b $} | END_BIT     // msb as name end
1174+ 694E             >
1174+ 694E 33 69       >                dw      last_NFA            // Link to previous definition Name
1174+ 6950             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1174+ 6950 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1174+ 6950 ~           >
1174+ 6950 ~           >
1174+ 6950             >                endif           ; ok        // for other definitions it "points" the correct handler
1174+ 6950             >                // Use of "; ok" to suppress "warning[fwdref]"
1174+ 6950             >
1174+ 6950             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1175+ 6950
1176+ 6950                              ldhlrp
1176+ 6950 2A 96 63    >                ld      hl,(RP_Pointer)
1177+ 6953 11 04 00                     ld      de, 4
1178+ 6956 19                           add     hl, de
1179+ 6957                              ldrphl
1179+ 6957 22 96 63    >                ld      (RP_Pointer),hl
1180+ 695A
1181+ 695A C3 C3 63                     jp      Branch_Ptr       // perform branch consuming following cell
1182+ 695D                              next
1182+ 695D DD E9       >                jp      (ix)
1183+ 695F
1184+ 695F              //  ______________________________________________________________________
1185+ 695F              //
1186+ 695F              // >r      n --
1187+ 695F              // pop from calculator-stack and push into return-stack
1188+ 695F                              New_Def TO_R, ">R", is_code, is_normal
1188+ 695F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1188+ 695F             >
1188+ 695F             >                // dummy db directives used to calculate length of namec
1188+ 695F 3E 52       >                db      ">R"
1188+ 6961             >len_NFA         defl    $ - temp_NFA
1188+ 6961             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1188+ 695F             >
1188+ 695F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1188+ 6960 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1188+ 6962             >                org     $-1                 // alter last byte of Name just above to set
1188+ 6961 D2          >                db      {b $} | END_BIT     // msb as name end
1188+ 6962             >
1188+ 6962 46 69       >                dw      last_NFA            // Link to previous definition Name
1188+ 6964             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1188+ 6964 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1188+ 6964 ~           >
1188+ 6964 ~           >
1188+ 6964             >                endif           ; ok        // for other definitions it "points" the correct handler
1188+ 6964             >                // Use of "; ok" to suppress "warning[fwdref]"
1188+ 6964             >
1188+ 6964             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1189+ 6964 D1                           pop     de
1190+ 6965                              ldhlrp
1190+ 6965 2A 96 63    >                ld      hl,(RP_Pointer)
1191+ 6968 2B                           dec     hl
1192+ 6969 72                           ld      (hl), d             // store current TOS
1193+ 696A 2B                           dec     hl                  // to Return Stack
1194+ 696B 73                           ld      (hl), e
1195+ 696C                              ldrphl
1195+ 696C 22 96 63    >                ld      (RP_Pointer),hl
1196+ 696F
1197+ 696F                              next
1197+ 696F DD E9       >                jp      (ix)
1198+ 6971
1199+ 6971              //  ______________________________________________________________________
1200+ 6971              //
1201+ 6971              // r>      -- n
1202+ 6971              // pop from return-stack and push into calculator-stack
1203+ 6971                              New_Def R_TO, "R>", is_code, is_normal
1203+ 6971             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1203+ 6971             >
1203+ 6971             >                // dummy db directives used to calculate length of namec
1203+ 6971 52 3E       >                db      "R>"
1203+ 6973             >len_NFA         defl    $ - temp_NFA
1203+ 6973             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1203+ 6971             >
1203+ 6971 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1203+ 6972 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1203+ 6974             >                org     $-1                 // alter last byte of Name just above to set
1203+ 6973 BE          >                db      {b $} | END_BIT     // msb as name end
1203+ 6974             >
1203+ 6974 5F 69       >                dw      last_NFA            // Link to previous definition Name
1203+ 6976             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1203+ 6976 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1203+ 6976 ~           >
1203+ 6976 ~           >
1203+ 6976             >                endif           ; ok        // for other definitions it "points" the correct handler
1203+ 6976             >                // Use of "; ok" to suppress "warning[fwdref]"
1203+ 6976             >
1203+ 6976             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1204+ 6976
1205+ 6976                              ldhlrp
1205+ 6976 2A 96 63    >                ld      hl,(RP_Pointer)
1206+ 6979 5E                           ld      e, (hl)             // retrieve from Return Stack
1207+ 697A 23                           inc     hl
1208+ 697B 56                           ld      d, (hl)
1209+ 697C 23                           inc     hl
1210+ 697D                              ldrphl
1210+ 697D 22 96 63    >                ld      (RP_Pointer),hl
1211+ 6980 D5                           push    de
1212+ 6981                              next
1212+ 6981 DD E9       >                jp      (ix)
1213+ 6983
1214+ 6983              //  ______________________________________________________________________
1215+ 6983              //
1216+ 6983              // r            -- n
1217+ 6983              // return on top of stack the value of top of return-stack
1218+ 6983              // Since this is the same as I, we alter R's CFA to jump there
1219+ 6983                              New_Def R_OP, "R@", is_code, is_normal
1219+ 6983             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1219+ 6983             >
1219+ 6983             >                // dummy db directives used to calculate length of namec
1219+ 6983 52 40       >                db      "R@"
1219+ 6985             >len_NFA         defl    $ - temp_NFA
1219+ 6985             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1219+ 6983             >
1219+ 6983 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1219+ 6984 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1219+ 6986             >                org     $-1                 // alter last byte of Name just above to set
1219+ 6985 C0          >                db      {b $} | END_BIT     // msb as name end
1219+ 6986             >
1219+ 6986 71 69       >                dw      last_NFA            // Link to previous definition Name
1219+ 6988             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1219+ 6988 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1219+ 6988 ~           >
1219+ 6988 ~           >
1219+ 6988             >                endif           ; ok        // for other definitions it "points" the correct handler
1219+ 6988             >                // Use of "; ok" to suppress "warning[fwdref]"
1219+ 6988             >
1219+ 6988             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1220+ 6988 C3 66 64                     jp      I_Ptr
1221+ 698B
1222+ 698B              //  ______________________________________________________________________
1223+ 698B              //
1224+ 698B              // r            -- n
1225+ 698B              // return on top of stack the value of top of return-stack
1226+ 698B              // Since this is the same as I, we alter R's CFA to jump there
1227+ 698B                              New_Def R_OLD, "R", is_code, is_normal
1227+ 698B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1227+ 698B             >
1227+ 698B             >                // dummy db directives used to calculate length of namec
1227+ 698B 52          >                db      "R"
1227+ 698C             >len_NFA         defl    $ - temp_NFA
1227+ 698C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1227+ 698B             >
1227+ 698B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1227+ 698C 52          >                db      "R"               // name string in 7-bit ascii, but
1227+ 698D             >                org     $-1                 // alter last byte of Name just above to set
1227+ 698C D2          >                db      {b $} | END_BIT     // msb as name end
1227+ 698D             >
1227+ 698D 83 69       >                dw      last_NFA            // Link to previous definition Name
1227+ 698F             >R_OLD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1227+ 698F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1227+ 698F ~           >
1227+ 698F ~           >
1227+ 698F             >                endif           ; ok        // for other definitions it "points" the correct handler
1227+ 698F             >                // Use of "; ok" to suppress "warning[fwdref]"
1227+ 698F             >
1227+ 698F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1228+ 698F C3 66 64                     jp      I_Ptr
1229+ 6992
1230+ 6992              //  ______________________________________________________________________
1231+ 6992              //
1232+ 6992              // 0=           n -- f
1233+ 6992              // true (non zero) if n is zero, false (0) elsewere
1234+ 6992                              New_Def ZEQUAL, "0=", is_code, is_normal
1234+ 6992             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1234+ 6992             >
1234+ 6992             >                // dummy db directives used to calculate length of namec
1234+ 6992 30 3D       >                db      "0="
1234+ 6994             >len_NFA         defl    $ - temp_NFA
1234+ 6994             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1234+ 6992             >
1234+ 6992 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1234+ 6993 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1234+ 6995             >                org     $-1                 // alter last byte of Name just above to set
1234+ 6994 BD          >                db      {b $} | END_BIT     // msb as name end
1234+ 6995             >
1234+ 6995 8B 69       >                dw      last_NFA            // Link to previous definition Name
1234+ 6997             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1234+ 6997 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1234+ 6997 ~           >
1234+ 6997 ~           >
1234+ 6997             >                endif           ; ok        // for other definitions it "points" the correct handler
1234+ 6997             >                // Use of "; ok" to suppress "warning[fwdref]"
1234+ 6997             >
1234+ 6997             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1235+ 6997              Zero_Equal:
1236+ 6997 E1                           pop     hl
1237+ 6998 7D                           ld      a, l
1238+ 6999 B4                           or      h
1239+ 699A 21 00 00                     ld      hl, FALSE_FLAG
1240+ 699D 20 01                        jr      nz, ZEqual_Skip
1241+ 699F 2B                               dec     hl
1242+ 69A0              ZEqual_Skip:
1243+ 69A0                              psh1
1243+ 69A0 E5          >                push    hl
1243+ 69A1 DD E9       >                jp      (ix)
1244+ 69A3
1245+ 69A3              //  ______________________________________________________________________
1246+ 69A3              //
1247+ 69A3              // not         a1 -- a2
1248+ 69A3              // increment by 2 top of stack
1249+ 69A3                              New_Def NOT_OP, "NOT", is_code, is_normal
1249+ 69A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1249+ 69A3             >
1249+ 69A3             >                // dummy db directives used to calculate length of namec
1249+ 69A3 4E 4F 54    >                db      "NOT"
1249+ 69A6             >len_NFA         defl    $ - temp_NFA
1249+ 69A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1249+ 69A3             >
1249+ 69A3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1249+ 69A4 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1249+ 69A7             >                org     $-1                 // alter last byte of Name just above to set
1249+ 69A6 D4          >                db      {b $} | END_BIT     // msb as name end
1249+ 69A7             >
1249+ 69A7 92 69       >                dw      last_NFA            // Link to previous definition Name
1249+ 69A9             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1249+ 69A9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1249+ 69A9 ~           >
1249+ 69A9 ~           >
1249+ 69A9             >                endif           ; ok        // for other definitions it "points" the correct handler
1249+ 69A9             >                // Use of "; ok" to suppress "warning[fwdref]"
1249+ 69A9             >
1249+ 69A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1250+ 69A9 C3 97 69                     jp      Zero_Equal
1251+ 69AC
1252+ 69AC              //  ______________________________________________________________________
1253+ 69AC              //
1254+ 69AC              // 0<           n -- f
1255+ 69AC              // true (non zero) if n is less than zero, false (0) elsewere
1256+ 69AC                              New_Def ZLESS, "0<", is_code, is_normal
1256+ 69AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1256+ 69AC             >
1256+ 69AC             >                // dummy db directives used to calculate length of namec
1256+ 69AC 30 3C       >                db      "0<"
1256+ 69AE             >len_NFA         defl    $ - temp_NFA
1256+ 69AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1256+ 69AC             >
1256+ 69AC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1256+ 69AD 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1256+ 69AF             >                org     $-1                 // alter last byte of Name just above to set
1256+ 69AE BC          >                db      {b $} | END_BIT     // msb as name end
1256+ 69AF             >
1256+ 69AF A3 69       >                dw      last_NFA            // Link to previous definition Name
1256+ 69B1             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1256+ 69B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1256+ 69B1 ~           >
1256+ 69B1 ~           >
1256+ 69B1             >                endif           ; ok        // for other definitions it "points" the correct handler
1256+ 69B1             >                // Use of "; ok" to suppress "warning[fwdref]"
1256+ 69B1             >
1256+ 69B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1257+ 69B1 E1                           pop     hl
1258+ 69B2 29                           add     hl, hl
1259+ 69B3 21 00 00                     ld      hl, 0
1260+ 69B6 30 01                        jr      nc, ZLess_Skip
1261+ 69B8 2B                               dec     hl
1262+ 69B9              ZLess_Skip:
1263+ 69B9                              psh1
1263+ 69B9 E5          >                push    hl
1263+ 69BA DD E9       >                jp      (ix)
1264+ 69BC
1265+ 69BC              //  ______________________________________________________________________
1266+ 69BC              //
1267+ 69BC              // 0>           n -- f
1268+ 69BC              // true (non zero) if n is less than zero, false (0) elsewere
1269+ 69BC                              New_Def ZGREATER, "0>", is_code, is_normal
1269+ 69BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1269+ 69BC             >
1269+ 69BC             >                // dummy db directives used to calculate length of namec
1269+ 69BC 30 3E       >                db      "0>"
1269+ 69BE             >len_NFA         defl    $ - temp_NFA
1269+ 69BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1269+ 69BC             >
1269+ 69BC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1269+ 69BD 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1269+ 69BF             >                org     $-1                 // alter last byte of Name just above to set
1269+ 69BE BE          >                db      {b $} | END_BIT     // msb as name end
1269+ 69BF             >
1269+ 69BF AC 69       >                dw      last_NFA            // Link to previous definition Name
1269+ 69C1             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1269+ 69C1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1269+ 69C1 ~           >
1269+ 69C1 ~           >
1269+ 69C1             >                endif           ; ok        // for other definitions it "points" the correct handler
1269+ 69C1             >                // Use of "; ok" to suppress "warning[fwdref]"
1269+ 69C1             >
1269+ 69C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1270+ 69C1 E1                           pop     hl
1271+ 69C2 7D                           ld      a, l
1272+ 69C3 B4                           or      h
1273+ 69C4 29                           add     hl, hl
1274+ 69C5 21 00 00                     ld      hl, FALSE_FLAG
1275+ 69C8 38 04                        jr      c, ZGreater_Skip
1276+ 69CA A7                               and     a
1277+ 69CB 28 01                            jr      z, ZGreater_Skip
1278+ 69CD 2B                                   dec     hl
1279+ 69CE              ZGreater_Skip:
1280+ 69CE                              psh1
1280+ 69CE E5          >                push    hl
1280+ 69CF DD E9       >                jp      (ix)
1281+ 69D1
1282+ 69D1              //  ______________________________________________________________________
1283+ 69D1              //
1284+ 69D1              // +            n1 n2 -- n3
1285+ 69D1              // returns the unsigned sum of two top values
1286+ 69D1                              New_Def PLUS, "+", is_code, is_normal
1286+ 69D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1286+ 69D1             >
1286+ 69D1             >                // dummy db directives used to calculate length of namec
1286+ 69D1 2B          >                db      "+"
1286+ 69D2             >len_NFA         defl    $ - temp_NFA
1286+ 69D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1286+ 69D1             >
1286+ 69D1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1286+ 69D2 2B          >                db      "+"               // name string in 7-bit ascii, but
1286+ 69D3             >                org     $-1                 // alter last byte of Name just above to set
1286+ 69D2 AB          >                db      {b $} | END_BIT     // msb as name end
1286+ 69D3             >
1286+ 69D3 BC 69       >                dw      last_NFA            // Link to previous definition Name
1286+ 69D5             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1286+ 69D5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1286+ 69D5 ~           >
1286+ 69D5 ~           >
1286+ 69D5             >                endif           ; ok        // for other definitions it "points" the correct handler
1286+ 69D5             >                // Use of "; ok" to suppress "warning[fwdref]"
1286+ 69D5             >
1286+ 69D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1287+ 69D5 E1                           pop     hl
1288+ 69D6 D1                           pop     de
1289+ 69D7 19                           add     hl, de
1290+ 69D8
1291+ 69D8                              psh1
1291+ 69D8 E5          >                push    hl
1291+ 69D9 DD E9       >                jp      (ix)
1292+ 69DB
1293+ 69DB
1294+ 69DB              //  ______________________________________________________________________
1295+ 69DB              //
1296+ 69DB              // d+           d1 d2 -- d3
1297+ 69DB              // returns the unsigned sum of two top double-numbers
1298+ 69DB              //      d2  d1
1299+ 69DB              //      h l h l
1300+ 69DB              // SP   LHEDLHED
1301+ 69DB              // SP  +01234567
1302+ 69DB                              New_Def DPLUS, "D+", is_code, is_normal
1302+ 69DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1302+ 69DB             >
1302+ 69DB             >                // dummy db directives used to calculate length of namec
1302+ 69DB 44 2B       >                db      "D+"
1302+ 69DD             >len_NFA         defl    $ - temp_NFA
1302+ 69DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1302+ 69DB             >
1302+ 69DB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1302+ 69DC 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1302+ 69DE             >                org     $-1                 // alter last byte of Name just above to set
1302+ 69DD AB          >                db      {b $} | END_BIT     // msb as name end
1302+ 69DE             >
1302+ 69DE D1 69       >                dw      last_NFA            // Link to previous definition Name
1302+ 69E0             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1302+ 69E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1302+ 69E0 ~           >
1302+ 69E0 ~           >
1302+ 69E0             >                endif           ; ok        // for other definitions it "points" the correct handler
1302+ 69E0             >                // Use of "; ok" to suppress "warning[fwdref]"
1302+ 69E0             >
1302+ 69E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1303+ 69E0
1304+ 69E0 D9                           exx
1305+ 69E1 C1                           pop     bc                  // bc := d2.H
1306+ 69E2 D1                           pop     de                  // hl := d2.L
1307+ 69E3 E1                           pop     hl                  // d1.H
1308+ 69E4 E3                           ex      (sp), hl            // d1.L
1309+ 69E5 19                           add     hl, de              // hl := d2.L + d1.L
1310+ 69E6 E3                           ex      (sp), hl            // d1.H
1311+ 69E7 ED 4A                        adc     hl, bc              // d1.H + d2.H
1312+ 69E9 E5                           push    hl
1313+ 69EA D9                           exx
1314+ 69EB                              next
1314+ 69EB DD E9       >                jp      (ix)
1315+ 69ED
1316+ 69ED              //  ______________________________________________________________________
1317+ 69ED              //
1318+ 69ED              // 1+           n1 -- n2
1319+ 69ED              // increment by 1 top of stack
1320+ 69ED                              New_Def ONE_PLUS, "1+", is_code, is_normal
1320+ 69ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1320+ 69ED             >
1320+ 69ED             >                // dummy db directives used to calculate length of namec
1320+ 69ED 31 2B       >                db      "1+"
1320+ 69EF             >len_NFA         defl    $ - temp_NFA
1320+ 69EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1320+ 69ED             >
1320+ 69ED 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1320+ 69EE 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1320+ 69F0             >                org     $-1                 // alter last byte of Name just above to set
1320+ 69EF AB          >                db      {b $} | END_BIT     // msb as name end
1320+ 69F0             >
1320+ 69F0 DB 69       >                dw      last_NFA            // Link to previous definition Name
1320+ 69F2             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1320+ 69F2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1320+ 69F2 ~           >
1320+ 69F2 ~           >
1320+ 69F2             >                endif           ; ok        // for other definitions it "points" the correct handler
1320+ 69F2             >                // Use of "; ok" to suppress "warning[fwdref]"
1320+ 69F2             >
1320+ 69F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1321+ 69F2 E1                           pop     hl
1322+ 69F3 23                           inc     hl
1323+ 69F4
1324+ 69F4                              psh1
1324+ 69F4 E5          >                push    hl
1324+ 69F5 DD E9       >                jp      (ix)
1325+ 69F7
1326+ 69F7              //  ______________________________________________________________________
1327+ 69F7              //
1328+ 69F7              // 1-           n1 -- n2
1329+ 69F7              // decrement by 1 top of stack
1330+ 69F7                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1330+ 69F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1330+ 69F7             >
1330+ 69F7             >                // dummy db directives used to calculate length of namec
1330+ 69F7 31 2D       >                db      "1-"
1330+ 69F9             >len_NFA         defl    $ - temp_NFA
1330+ 69F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1330+ 69F7             >
1330+ 69F7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1330+ 69F8 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1330+ 69FA             >                org     $-1                 // alter last byte of Name just above to set
1330+ 69F9 AD          >                db      {b $} | END_BIT     // msb as name end
1330+ 69FA             >
1330+ 69FA ED 69       >                dw      last_NFA            // Link to previous definition Name
1330+ 69FC             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1330+ 69FC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1330+ 69FC ~           >
1330+ 69FC ~           >
1330+ 69FC             >                endif           ; ok        // for other definitions it "points" the correct handler
1330+ 69FC             >                // Use of "; ok" to suppress "warning[fwdref]"
1330+ 69FC             >
1330+ 69FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1331+ 69FC E1                           pop     hl
1332+ 69FD 2B                           dec     hl
1333+ 69FE
1334+ 69FE                              psh1
1334+ 69FE E5          >                push    hl
1334+ 69FF DD E9       >                jp      (ix)
1335+ 6A01
1336+ 6A01              //  ______________________________________________________________________
1337+ 6A01              //
1338+ 6A01              // 2+           n1 -- n2
1339+ 6A01              // increment by 2 top of stack
1340+ 6A01                              New_Def TWO_PLUS, "2+", is_code, is_normal
1340+ 6A01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1340+ 6A01             >
1340+ 6A01             >                // dummy db directives used to calculate length of namec
1340+ 6A01 32 2B       >                db      "2+"
1340+ 6A03             >len_NFA         defl    $ - temp_NFA
1340+ 6A03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1340+ 6A01             >
1340+ 6A01 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1340+ 6A02 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1340+ 6A04             >                org     $-1                 // alter last byte of Name just above to set
1340+ 6A03 AB          >                db      {b $} | END_BIT     // msb as name end
1340+ 6A04             >
1340+ 6A04 F7 69       >                dw      last_NFA            // Link to previous definition Name
1340+ 6A06             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1340+ 6A06 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1340+ 6A06 ~           >
1340+ 6A06 ~           >
1340+ 6A06             >                endif           ; ok        // for other definitions it "points" the correct handler
1340+ 6A06             >                // Use of "; ok" to suppress "warning[fwdref]"
1340+ 6A06             >
1340+ 6A06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1341+ 6A06              Two_Plus:
1342+ 6A06 E1                           pop     hl
1343+ 6A07 23                           inc     hl
1344+ 6A08 23                           inc     hl
1345+ 6A09
1346+ 6A09                              psh1
1346+ 6A09 E5          >                push    hl
1346+ 6A0A DD E9       >                jp      (ix)
1347+ 6A0C
1348+ 6A0C              //  ______________________________________________________________________
1349+ 6A0C              //
1350+ 6A0C              // cell+        a1 -- a2
1351+ 6A0C              // increment by 2 top of stack
1352+ 6A0C                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1352+ 6A0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1352+ 6A0C             >
1352+ 6A0C             >                // dummy db directives used to calculate length of namec
1352+ 6A0C 43 45 4C 4C >                db      "CELL+"
1352+ 6A10 2B          >
1352+ 6A11             >len_NFA         defl    $ - temp_NFA
1352+ 6A11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1352+ 6A0C             >
1352+ 6A0C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1352+ 6A0D 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1352+ 6A11 2B          >
1352+ 6A12             >                org     $-1                 // alter last byte of Name just above to set
1352+ 6A11 AB          >                db      {b $} | END_BIT     // msb as name end
1352+ 6A12             >
1352+ 6A12 01 6A       >                dw      last_NFA            // Link to previous definition Name
1352+ 6A14             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1352+ 6A14 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1352+ 6A14 ~           >
1352+ 6A14 ~           >
1352+ 6A14             >                endif           ; ok        // for other definitions it "points" the correct handler
1352+ 6A14             >                // Use of "; ok" to suppress "warning[fwdref]"
1352+ 6A14             >
1352+ 6A14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1353+ 6A14 C3 06 6A                     jp      Two_Plus
1354+ 6A17
1355+ 6A17              //  ______________________________________________________________________
1356+ 6A17              //
1357+ 6A17              // align        a1 -- a2
1358+ 6A17              // align memory : not used
1359+ 6A17              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1360+ 6A17              //            next
1361+ 6A17
1362+ 6A17              //  ______________________________________________________________________
1363+ 6A17              //
1364+ 6A17              // cell-        a1 -- a2
1365+ 6A17              // decrement by 2 top of stack
1366+ 6A17                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1366+ 6A17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1366+ 6A17             >
1366+ 6A17             >                // dummy db directives used to calculate length of namec
1366+ 6A17 43 45 4C 4C >                db      "CELL-"
1366+ 6A1B 2D          >
1366+ 6A1C             >len_NFA         defl    $ - temp_NFA
1366+ 6A1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1366+ 6A17             >
1366+ 6A17 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1366+ 6A18 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1366+ 6A1C 2D          >
1366+ 6A1D             >                org     $-1                 // alter last byte of Name just above to set
1366+ 6A1C AD          >                db      {b $} | END_BIT     // msb as name end
1366+ 6A1D             >
1366+ 6A1D 0C 6A       >                dw      last_NFA            // Link to previous definition Name
1366+ 6A1F             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1366+ 6A1F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1366+ 6A1F ~           >
1366+ 6A1F ~           >
1366+ 6A1F             >                endif           ; ok        // for other definitions it "points" the correct handler
1366+ 6A1F             >                // Use of "; ok" to suppress "warning[fwdref]"
1366+ 6A1F             >
1366+ 6A1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1367+ 6A1F              CellMinus:
1368+ 6A1F E1                           pop     hl
1369+ 6A20 2B                           dec     hl
1370+ 6A21 2B                           dec     hl
1371+ 6A22
1372+ 6A22                              psh1
1372+ 6A22 E5          >                push    hl
1372+ 6A23 DD E9       >                jp      (ix)
1373+ 6A25
1374+ 6A25              //  ______________________________________________________________________
1375+ 6A25              //
1376+ 6A25              // 2-           a1 -- a2
1377+ 6A25              // decrement by 2 top of stack
1378+ 6A25                              New_Def TWO_MINUS, "2-", is_code, is_normal
1378+ 6A25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1378+ 6A25             >
1378+ 6A25             >                // dummy db directives used to calculate length of namec
1378+ 6A25 32 2D       >                db      "2-"
1378+ 6A27             >len_NFA         defl    $ - temp_NFA
1378+ 6A27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1378+ 6A25             >
1378+ 6A25 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1378+ 6A26 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1378+ 6A28             >                org     $-1                 // alter last byte of Name just above to set
1378+ 6A27 AD          >                db      {b $} | END_BIT     // msb as name end
1378+ 6A28             >
1378+ 6A28 17 6A       >                dw      last_NFA            // Link to previous definition Name
1378+ 6A2A             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1378+ 6A2A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1378+ 6A2A ~           >
1378+ 6A2A ~           >
1378+ 6A2A             >                endif           ; ok        // for other definitions it "points" the correct handler
1378+ 6A2A             >                // Use of "; ok" to suppress "warning[fwdref]"
1378+ 6A2A             >
1378+ 6A2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1379+ 6A2A C3 1F 6A                     jp      CellMinus
1380+ 6A2D
1381+ 6A2D              //  ______________________________________________________________________
1382+ 6A2D              //
1383+ 6A2D              // negate       n1 -- n2
1384+ 6A2D              // change the sign of number
1385+ 6A2D                              New_Def MINUS, "NEGATE", is_code, is_normal
1385+ 6A2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1385+ 6A2D             >
1385+ 6A2D             >                // dummy db directives used to calculate length of namec
1385+ 6A2D 4E 45 47 41 >                db      "NEGATE"
1385+ 6A31 54 45       >
1385+ 6A33             >len_NFA         defl    $ - temp_NFA
1385+ 6A33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1385+ 6A2D             >
1385+ 6A2D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1385+ 6A2E 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1385+ 6A32 54 45       >
1385+ 6A34             >                org     $-1                 // alter last byte of Name just above to set
1385+ 6A33 C5          >                db      {b $} | END_BIT     // msb as name end
1385+ 6A34             >
1385+ 6A34 25 6A       >                dw      last_NFA            // Link to previous definition Name
1385+ 6A36             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1385+ 6A36 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1385+ 6A36 ~           >
1385+ 6A36 ~           >
1385+ 6A36             >                endif           ; ok        // for other definitions it "points" the correct handler
1385+ 6A36             >                // Use of "; ok" to suppress "warning[fwdref]"
1385+ 6A36             >
1385+ 6A36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1386+ 6A36 21 00 00                     ld      hl, 0               // subtract from 0
1387+ 6A39 D1                           pop     de
1388+ 6A3A B7                           or      a
1389+ 6A3B ED 52                        sbc     hl, de
1390+ 6A3D
1391+ 6A3D                              psh1
1391+ 6A3D E5          >                push    hl
1391+ 6A3E DD E9       >                jp      (ix)
1392+ 6A40
1393+ 6A40              //  ______________________________________________________________________
1394+ 6A40              //
1395+ 6A40              // dnegate      d1 -- d2
1396+ 6A40              // change the sign of a double number
1397+ 6A40                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1397+ 6A40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1397+ 6A40             >
1397+ 6A40             >                // dummy db directives used to calculate length of namec
1397+ 6A40 44 4E 45 47 >                db      "DNEGATE"
1397+ 6A44 41 54 45    >
1397+ 6A47             >len_NFA         defl    $ - temp_NFA
1397+ 6A47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1397+ 6A40             >
1397+ 6A40 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1397+ 6A41 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1397+ 6A45 41 54 45    >
1397+ 6A48             >                org     $-1                 // alter last byte of Name just above to set
1397+ 6A47 C5          >                db      {b $} | END_BIT     // msb as name end
1397+ 6A48             >
1397+ 6A48 2D 6A       >                dw      last_NFA            // Link to previous definition Name
1397+ 6A4A             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1397+ 6A4A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1397+ 6A4A ~           >
1397+ 6A4A ~           >
1397+ 6A4A             >                endif           ; ok        // for other definitions it "points" the correct handler
1397+ 6A4A             >                // Use of "; ok" to suppress "warning[fwdref]"
1397+ 6A4A             >
1397+ 6A4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1398+ 6A4A D9                           exx
1399+ 6A4B C1                           pop     bc                  // d1.H
1400+ 6A4C D1                           pop     de                  // d1.L
1401+ 6A4D AF                           xor     a
1402+ 6A4E 67                           ld      h, a
1403+ 6A4F 6F                           ld      l, a
1404+ 6A50 ED 52                        sbc     hl, de              // subtact from zero
1405+ 6A52 E5                           push    hl                  // > d2-L
1406+ 6A53 67                           ld      h, a
1407+ 6A54 6F                           ld      l, a
1408+ 6A55 ED 42                        sbc     hl, bc              // subtract from zero with carry
1409+ 6A57                                                          // > d2-H
1410+ 6A57 E5                           push    hl
1411+ 6A58 D9                           exx
1412+ 6A59                              next
1412+ 6A59 DD E9       >                jp      (ix)
1413+ 6A5B
1414+ 6A5B              //  ______________________________________________________________________
1415+ 6A5B              //
1416+ 6A5B              // over         n1 n2 -- n1 n2 n1
1417+ 6A5B              // copy the second value of stack and put it on top.
1418+ 6A5B                              New_Def OVER, "OVER", is_code, is_normal
1418+ 6A5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1418+ 6A5B             >
1418+ 6A5B             >                // dummy db directives used to calculate length of namec
1418+ 6A5B 4F 56 45 52 >                db      "OVER"
1418+ 6A5F             >len_NFA         defl    $ - temp_NFA
1418+ 6A5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1418+ 6A5B             >
1418+ 6A5B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1418+ 6A5C 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1418+ 6A60             >                org     $-1                 // alter last byte of Name just above to set
1418+ 6A5F D2          >                db      {b $} | END_BIT     // msb as name end
1418+ 6A60             >
1418+ 6A60 40 6A       >                dw      last_NFA            // Link to previous definition Name
1418+ 6A62             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1418+ 6A62 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1418+ 6A62 ~           >
1418+ 6A62 ~           >
1418+ 6A62             >                endif           ; ok        // for other definitions it "points" the correct handler
1418+ 6A62             >                // Use of "; ok" to suppress "warning[fwdref]"
1418+ 6A62             >
1418+ 6A62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1419+ 6A62 D1                           pop     de                  //   n2
1420+ 6A63 E1                           pop     hl                  // < n1
1421+ 6A64 E5                           push    hl                  // > n1
1422+ 6A65 D5                           push    de                  // > n2
1423+ 6A66 E5                           push    hl                  // > n1
1424+ 6A67                              next
1424+ 6A67 DD E9       >                jp      (ix)
1425+ 6A69
1426+ 6A69              //  ______________________________________________________________________
1427+ 6A69              //
1428+ 6A69              // drop         n1 --
1429+ 6A69              // drops the top of stack
1430+ 6A69                              New_Def DROP, "DROP", is_code, is_normal
1430+ 6A69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1430+ 6A69             >
1430+ 6A69             >                // dummy db directives used to calculate length of namec
1430+ 6A69 44 52 4F 50 >                db      "DROP"
1430+ 6A6D             >len_NFA         defl    $ - temp_NFA
1430+ 6A6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1430+ 6A69             >
1430+ 6A69 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1430+ 6A6A 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1430+ 6A6E             >                org     $-1                 // alter last byte of Name just above to set
1430+ 6A6D D0          >                db      {b $} | END_BIT     // msb as name end
1430+ 6A6E             >
1430+ 6A6E 5B 6A       >                dw      last_NFA            // Link to previous definition Name
1430+ 6A70             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1430+ 6A70 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1430+ 6A70 ~           >
1430+ 6A70 ~           >
1430+ 6A70             >                endif           ; ok        // for other definitions it "points" the correct handler
1430+ 6A70             >                // Use of "; ok" to suppress "warning[fwdref]"
1430+ 6A70             >
1430+ 6A70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1431+ 6A70 E1                           pop     hl                  // < n1 and discard previous TOS
1432+ 6A71                              next
1432+ 6A71 DD E9       >                jp      (ix)
1433+ 6A73
1434+ 6A73              //  ______________________________________________________________________
1435+ 6A73              //
1436+ 6A73              // nip          n1 n2 -- n2
1437+ 6A73              // drops the second elemento on the stack
1438+ 6A73                              New_Def NIP, "NIP", is_code, is_normal
1438+ 6A73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1438+ 6A73             >
1438+ 6A73             >                // dummy db directives used to calculate length of namec
1438+ 6A73 4E 49 50    >                db      "NIP"
1438+ 6A76             >len_NFA         defl    $ - temp_NFA
1438+ 6A76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1438+ 6A73             >
1438+ 6A73 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1438+ 6A74 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1438+ 6A77             >                org     $-1                 // alter last byte of Name just above to set
1438+ 6A76 D0          >                db      {b $} | END_BIT     // msb as name end
1438+ 6A77             >
1438+ 6A77 69 6A       >                dw      last_NFA            // Link to previous definition Name
1438+ 6A79             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1438+ 6A79 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1438+ 6A79 ~           >
1438+ 6A79 ~           >
1438+ 6A79             >                endif           ; ok        // for other definitions it "points" the correct handler
1438+ 6A79             >                // Use of "; ok" to suppress "warning[fwdref]"
1438+ 6A79             >
1438+ 6A79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1439+ 6A79
1440+ 6A79 E1                           pop     hl                  // < n1 discarded
1441+ 6A7A E3                           ex      (sp), hl
1442+ 6A7B                              next
1442+ 6A7B DD E9       >                jp      (ix)
1443+ 6A7D
1444+ 6A7D              //  ______________________________________________________________________
1445+ 6A7D              //
1446+ 6A7D              // tuck         n1 n2 -- n2 n1 n2
1447+ 6A7D              // copy the top element after the second.
1448+ 6A7D                              New_Def TUCK, "TUCK", is_code, is_normal
1448+ 6A7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1448+ 6A7D             >
1448+ 6A7D             >                // dummy db directives used to calculate length of namec
1448+ 6A7D 54 55 43 4B >                db      "TUCK"
1448+ 6A81             >len_NFA         defl    $ - temp_NFA
1448+ 6A81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1448+ 6A7D             >
1448+ 6A7D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1448+ 6A7E 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1448+ 6A82             >                org     $-1                 // alter last byte of Name just above to set
1448+ 6A81 CB          >                db      {b $} | END_BIT     // msb as name end
1448+ 6A82             >
1448+ 6A82 73 6A       >                dw      last_NFA            // Link to previous definition Name
1448+ 6A84             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1448+ 6A84 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1448+ 6A84 ~           >
1448+ 6A84 ~           >
1448+ 6A84             >                endif           ; ok        // for other definitions it "points" the correct handler
1448+ 6A84             >                // Use of "; ok" to suppress "warning[fwdref]"
1448+ 6A84             >
1448+ 6A84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1449+ 6A84 E1                           pop     hl
1450+ 6A85 D1                           pop     de                  // < n1
1451+ 6A86 E5                           push    hl                  // > n2  and TOS
1452+ 6A87 D5                           push    de                  // > n1
1453+ 6A88 E5                           push    hl
1454+ 6A89                              next
1454+ 6A89 DD E9       >                jp      (ix)
1455+ 6A8B
1456+ 6A8B              //  ______________________________________________________________________
1457+ 6A8B              //
1458+ 6A8B              // swap         n1 n2 -- n2 n1
1459+ 6A8B              // swaps the two values on top of stack
1460+ 6A8B                              New_Def SWAP, "SWAP", is_code, is_normal
1460+ 6A8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1460+ 6A8B             >
1460+ 6A8B             >                // dummy db directives used to calculate length of namec
1460+ 6A8B 53 57 41 50 >                db      "SWAP"
1460+ 6A8F             >len_NFA         defl    $ - temp_NFA
1460+ 6A8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1460+ 6A8B             >
1460+ 6A8B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1460+ 6A8C 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1460+ 6A90             >                org     $-1                 // alter last byte of Name just above to set
1460+ 6A8F D0          >                db      {b $} | END_BIT     // msb as name end
1460+ 6A90             >
1460+ 6A90 7D 6A       >                dw      last_NFA            // Link to previous definition Name
1460+ 6A92             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1460+ 6A92 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1460+ 6A92 ~           >
1460+ 6A92 ~           >
1460+ 6A92             >                endif           ; ok        // for other definitions it "points" the correct handler
1460+ 6A92             >                // Use of "; ok" to suppress "warning[fwdref]"
1460+ 6A92             >
1460+ 6A92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1461+ 6A92 E1                           pop     hl                  // < n1
1462+ 6A93 E3                           ex      (sp),hl             // > n2
1463+ 6A94 E5                           push    hl                  // copy n1 to TOS
1464+ 6A95                              next
1464+ 6A95 DD E9       >                jp      (ix)
1465+ 6A97
1466+ 6A97              //  ______________________________________________________________________
1467+ 6A97              //
1468+ 6A97              // dup         n -- n n
1469+ 6A97              // duplicates the top value of stack
1470+ 6A97                              New_Def DUP, "DUP", is_code, is_normal
1470+ 6A97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1470+ 6A97             >
1470+ 6A97             >                // dummy db directives used to calculate length of namec
1470+ 6A97 44 55 50    >                db      "DUP"
1470+ 6A9A             >len_NFA         defl    $ - temp_NFA
1470+ 6A9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1470+ 6A97             >
1470+ 6A97 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1470+ 6A98 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1470+ 6A9B             >                org     $-1                 // alter last byte of Name just above to set
1470+ 6A9A D0          >                db      {b $} | END_BIT     // msb as name end
1470+ 6A9B             >
1470+ 6A9B 8B 6A       >                dw      last_NFA            // Link to previous definition Name
1470+ 6A9D             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1470+ 6A9D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1470+ 6A9D ~           >
1470+ 6A9D ~           >
1470+ 6A9D             >                endif           ; ok        // for other definitions it "points" the correct handler
1470+ 6A9D             >                // Use of "; ok" to suppress "warning[fwdref]"
1470+ 6A9D             >
1470+ 6A9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1471+ 6A9D E1                           pop     hl
1472+ 6A9E E5                           push    hl                  // > n duplicate TOS
1473+ 6A9F E5                           push    hl
1474+ 6AA0                              next
1474+ 6AA0 DD E9       >                jp      (ix)
1475+ 6AA2
1476+ 6AA2              //  ______________________________________________________________________
1477+ 6AA2              //
1478+ 6AA2              // rot         n1 n2 n3 -- n2 n3 n1
1479+ 6AA2              // Rotates the 3 top values of stack by picking the 3rd in access-order
1480+ 6AA2              // and putting it on top. The other two are shifted down one place.
1481+ 6AA2                              New_Def ROT, "ROT", is_code, is_normal
1481+ 6AA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1481+ 6AA2             >
1481+ 6AA2             >                // dummy db directives used to calculate length of namec
1481+ 6AA2 52 4F 54    >                db      "ROT"
1481+ 6AA5             >len_NFA         defl    $ - temp_NFA
1481+ 6AA5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1481+ 6AA2             >
1481+ 6AA2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1481+ 6AA3 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1481+ 6AA6             >                org     $-1                 // alter last byte of Name just above to set
1481+ 6AA5 D4          >                db      {b $} | END_BIT     // msb as name end
1481+ 6AA6             >
1481+ 6AA6 97 6A       >                dw      last_NFA            // Link to previous definition Name
1481+ 6AA8             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1481+ 6AA8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1481+ 6AA8 ~           >
1481+ 6AA8 ~           >
1481+ 6AA8             >                endif           ; ok        // for other definitions it "points" the correct handler
1481+ 6AA8             >                // Use of "; ok" to suppress "warning[fwdref]"
1481+ 6AA8             >
1481+ 6AA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1482+ 6AA8 D1                           pop     de                  // < n3
1483+ 6AA9 E1                           pop     hl                  // < n2
1484+ 6AAA E3                           ex      (sp),hl             // > n2 < n1
1485+ 6AAB D5                           push    de                  // > n3
1486+ 6AAC E5                           push    hl                  // copy n1 to TOS
1487+ 6AAD                              next
1487+ 6AAD DD E9       >                jp      (ix)
1488+ 6AAF
1489+ 6AAF              //  ______________________________________________________________________
1490+ 6AAF              //
1491+ 6AAF              // -rot         n1 n2 n3 -- n3 n1 n2
1492+ 6AAF              // Rotates the 3 top values of stack by picking the 1st in access-order
1493+ 6AAF              // and putting back to 3rd place. The other two are shifted down one place.
1494+ 6AAF                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1494+ 6AAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1494+ 6AAF             >
1494+ 6AAF             >                // dummy db directives used to calculate length of namec
1494+ 6AAF 2D 52 4F 54 >                db      "-ROT"
1494+ 6AB3             >len_NFA         defl    $ - temp_NFA
1494+ 6AB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1494+ 6AAF             >
1494+ 6AAF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1494+ 6AB0 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1494+ 6AB4             >                org     $-1                 // alter last byte of Name just above to set
1494+ 6AB3 D4          >                db      {b $} | END_BIT     // msb as name end
1494+ 6AB4             >
1494+ 6AB4 A2 6A       >                dw      last_NFA            // Link to previous definition Name
1494+ 6AB6             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1494+ 6AB6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1494+ 6AB6 ~           >
1494+ 6AB6 ~           >
1494+ 6AB6             >                endif           ; ok        // for other definitions it "points" the correct handler
1494+ 6AB6             >                // Use of "; ok" to suppress "warning[fwdref]"
1494+ 6AB6             >
1494+ 6AB6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1495+ 6AB6 E1                           pop     hl                  // < n3
1496+ 6AB7 D1                           pop     de                  // < n2
1497+ 6AB8 E3                           ex      (sp),hl             // > n3 < n1
1498+ 6AB9 E5                           push    hl                  // > n1
1499+ 6ABA D5                           push    de                  // copy n3 to TOS
1500+ 6ABB                              next
1500+ 6ABB DD E9       >                jp      (ix)
1501+ 6ABD
1502+ 6ABD              //  ______________________________________________________________________
1503+ 6ABD              //
1504+ 6ABD              // pick        n1 -- nx
1505+ 6ABD              // picks the nth element from TOS
1506+ 6ABD                              New_Def PICK, "PICK", is_code, is_normal
1506+ 6ABD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1506+ 6ABD             >
1506+ 6ABD             >                // dummy db directives used to calculate length of namec
1506+ 6ABD 50 49 43 4B >                db      "PICK"
1506+ 6AC1             >len_NFA         defl    $ - temp_NFA
1506+ 6AC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1506+ 6ABD             >
1506+ 6ABD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1506+ 6ABE 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1506+ 6AC2             >                org     $-1                 // alter last byte of Name just above to set
1506+ 6AC1 CB          >                db      {b $} | END_BIT     // msb as name end
1506+ 6AC2             >
1506+ 6AC2 AF 6A       >                dw      last_NFA            // Link to previous definition Name
1506+ 6AC4             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1506+ 6AC4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1506+ 6AC4 ~           >
1506+ 6AC4 ~           >
1506+ 6AC4             >                endif           ; ok        // for other definitions it "points" the correct handler
1506+ 6AC4             >                // Use of "; ok" to suppress "warning[fwdref]"
1506+ 6AC4             >
1506+ 6AC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1507+ 6AC4 E1                           pop     hl                  // take TOS as index
1508+ 6AC5 29                           add     hl, hl              // as cells
1509+ 6AC6 39                           add     hl, sp              // from Stack Pointer
1510+ 6AC7 7E                           ld      a, (hl)             // replace TOS
1511+ 6AC8 23                           inc     hl
1512+ 6AC9 66                           ld      h, (hl)
1513+ 6ACA 6F                           ld      l, a
1514+ 6ACB
1515+ 6ACB                              psh1
1515+ 6ACB E5          >                push    hl
1515+ 6ACC DD E9       >                jp      (ix)
1516+ 6ACE
1517+ 6ACE
1518+ 6ACE              //  ______________________________________________________________________
1519+ 6ACE              //
1520+ 6ACE              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1521+ 6ACE              // picks the nth element from TOS
1522+ 6ACE              //              New_Def ROLL, "ROLL", is_code, is_normal
1523+ 6ACE              //              exx                     // we need all registers free
1524+ 6ACE              //              pop     hl              // number of cells to roll
1525+ 6ACE              //              ld      a, h
1526+ 6ACE              //              or       l
1527+ 6ACE              //              jr      z, Roll_Zero
1528+ 6ACE              //                  add     hl, hl              // number of bytes to move
1529+ 6ACE              //                  ld      b, h
1530+ 6ACE              //                  ld      c, l
1531+ 6ACE              //                  add     hl, sp          // address of n1
1532+ 6ACE              //                  ld      a, (hl)         // take n1 into a and a,
1533+ 6ACE              //                  inc     hl
1534+ 6ACE              //                  ex      af, af'
1535+ 6ACE              //                  ld      a, (hl)         // take n1 into a and a,
1536+ 6ACE              //                  ld      d, h
1537+ 6ACE              //                  ld      e, l
1538+ 6ACE              //                  dec     hl
1539+ 6ACE              //                  dec     hl
1540+ 6ACE              //                  lddr
1541+ 6ACE              //                  ex      de, hl
1542+ 6ACE              //                  ld      (hl), a
1543+ 6ACE              //                  dec     hl
1544+ 6ACE              //                  ex      af, af'
1545+ 6ACE              //                  ld      (hl), a
1546+ 6ACE              //Roll_Zero:
1547+ 6ACE              //              exx
1548+ 6ACE              //              next
1549+ 6ACE
1550+ 6ACE
1551+ 6ACE              //  ______________________________________________________________________
1552+ 6ACE              //
1553+ 6ACE              // 2over        d1 d2 -- d1 d2 d1
1554+ 6ACE              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1555+ 6ACE              // copy the second double of stack and put on top.
1556+ 6ACE              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1557+ 6ACE              //
1558+ 6ACE              //              ld      hl, 7
1559+ 6ACE              //              add     hl, sp
1560+ 6ACE              //              ld      d, (hl)
1561+ 6ACE              //              dec     hl
1562+ 6ACE              //              ld      e, (hl)             // d1-L
1563+ 6ACE              //              push    de
1564+ 6ACE              //              dec     hl
1565+ 6ACE              //              ld      d, (hl)
1566+ 6ACE              //              dec     hl
1567+ 6ACE              //              ld      e, (hl)             // d1-H
1568+ 6ACE              //              push    de
1569+ 6ACE              //              next
1570+ 6ACE
1571+ 6ACE              //  ______________________________________________________________________
1572+ 6ACE              //
1573+ 6ACE              // 2drop        d --
1574+ 6ACE              //              n1 n2 --
1575+ 6ACE              // drops the top double from stack
1576+ 6ACE                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1576+ 6ACE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1576+ 6ACE             >
1576+ 6ACE             >                // dummy db directives used to calculate length of namec
1576+ 6ACE 32 44 52 4F >                db      "2DROP"
1576+ 6AD2 50          >
1576+ 6AD3             >len_NFA         defl    $ - temp_NFA
1576+ 6AD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1576+ 6ACE             >
1576+ 6ACE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1576+ 6ACF 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1576+ 6AD3 50          >
1576+ 6AD4             >                org     $-1                 // alter last byte of Name just above to set
1576+ 6AD3 D0          >                db      {b $} | END_BIT     // msb as name end
1576+ 6AD4             >
1576+ 6AD4 BD 6A       >                dw      last_NFA            // Link to previous definition Name
1576+ 6AD6             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1576+ 6AD6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1576+ 6AD6 ~           >
1576+ 6AD6 ~           >
1576+ 6AD6             >                endif           ; ok        // for other definitions it "points" the correct handler
1576+ 6AD6             >                // Use of "; ok" to suppress "warning[fwdref]"
1576+ 6AD6             >
1576+ 6AD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1577+ 6AD6 E1                           pop     hl
1578+ 6AD7 E1                           pop     hl
1579+ 6AD8                              next
1579+ 6AD8 DD E9       >                jp      (ix)
1580+ 6ADA
1581+ 6ADA              //  ______________________________________________________________________
1582+ 6ADA              //
1583+ 6ADA              // 2nip         d1 d2 -- d2
1584+ 6ADA              //              n1 n2 n3 n4 -- n3 n4
1585+ 6ADA              // drops the second double on the stack
1586+ 6ADA              //              New_Def TWO_NIP, 4, "2nip"
1587+ 6ADA              //              ...
1588+ 6ADA
1589+ 6ADA              //  ______________________________________________________________________
1590+ 6ADA              //
1591+ 6ADA              // 2tuck         d1 d2 -- d2 d1 d2
1592+ 6ADA              // copy the top element after the second.
1593+ 6ADA              //              New_Def TWO_TUCK, 5, "2tuck"
1594+ 6ADA              //              ...
1595+ 6ADA
1596+ 6ADA              //  ______________________________________________________________________
1597+ 6ADA              //
1598+ 6ADA              // 2swap         d1 d2 -- d2 d1
1599+ 6ADA              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1600+ 6ADA              // swaps the two doubles on top of stack
1601+ 6ADA                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1601+ 6ADA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1601+ 6ADA             >
1601+ 6ADA             >                // dummy db directives used to calculate length of namec
1601+ 6ADA 32 53 57 41 >                db      "2SWAP"
1601+ 6ADE 50          >
1601+ 6ADF             >len_NFA         defl    $ - temp_NFA
1601+ 6ADF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1601+ 6ADA             >
1601+ 6ADA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1601+ 6ADB 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1601+ 6ADF 50          >
1601+ 6AE0             >                org     $-1                 // alter last byte of Name just above to set
1601+ 6ADF D0          >                db      {b $} | END_BIT     // msb as name end
1601+ 6AE0             >
1601+ 6AE0 CE 6A       >                dw      last_NFA            // Link to previous definition Name
1601+ 6AE2             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1601+ 6AE2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1601+ 6AE2 ~           >
1601+ 6AE2 ~           >
1601+ 6AE2             >                endif           ; ok        // for other definitions it "points" the correct handler
1601+ 6AE2             >                // Use of "; ok" to suppress "warning[fwdref]"
1601+ 6AE2             >
1601+ 6AE2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1602+ 6AE2 F1                           pop     af                  //   d2-H
1603+ 6AE3 E1                           pop     hl                  // < d2-L
1604+ 6AE4 D1                           pop     de                  // < d1-H
1605+ 6AE5 E3                           ex      (sp), hl            // < d1-L > d2-L
1606+ 6AE6 F5                           push    af                  // > d2-H
1607+ 6AE7 E5                           push    hl                  // > d1-L
1608+ 6AE8 D5                           push    de
1609+ 6AE9
1610+ 6AE9                              next
1610+ 6AE9 DD E9       >                jp      (ix)
1611+ 6AEB
1612+ 6AEB              //  ______________________________________________________________________
1613+ 6AEB              //
1614+ 6AEB              // 2dup         d -- d d
1615+ 6AEB              //              n1 n2 -- n1 n2 n1 n2
1616+ 6AEB              // duplicates the top double of stack
1617+ 6AEB                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1617+ 6AEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1617+ 6AEB             >
1617+ 6AEB             >                // dummy db directives used to calculate length of namec
1617+ 6AEB 32 44 55 50 >                db      "2DUP"
1617+ 6AEF             >len_NFA         defl    $ - temp_NFA
1617+ 6AEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1617+ 6AEB             >
1617+ 6AEB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1617+ 6AEC 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1617+ 6AF0             >                org     $-1                 // alter last byte of Name just above to set
1617+ 6AEF D0          >                db      {b $} | END_BIT     // msb as name end
1617+ 6AF0             >
1617+ 6AF0 DA 6A       >                dw      last_NFA            // Link to previous definition Name
1617+ 6AF2             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1617+ 6AF2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1617+ 6AF2 ~           >
1617+ 6AF2 ~           >
1617+ 6AF2             >                endif           ; ok        // for other definitions it "points" the correct handler
1617+ 6AF2             >                // Use of "; ok" to suppress "warning[fwdref]"
1617+ 6AF2             >
1617+ 6AF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1618+ 6AF2 E1                           pop     hl                  // < d-H
1619+ 6AF3 D1                           pop     de                  // < d-L
1620+ 6AF4 D5                           push    de                  // < d-L
1621+ 6AF5 E5                           push    hl                  // > d-H
1622+ 6AF6 D5                           push    de                  // > d-L
1623+ 6AF7 E5                           push    hl                  // > d-H
1624+ 6AF8                              next
1624+ 6AF8 DD E9       >                jp      (ix)
1625+ 6AFA
1626+ 6AFA              //  ______________________________________________________________________
1627+ 6AFA              //
1628+ 6AFA              // 2rot         d1 d2 d3 -- d2 d3 d1
1629+ 6AFA              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1630+ 6AFA              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1631+ 6AFA              // and putting it on top. The other two are shifted down one place.
1632+ 6AFA              //              New_Def TWO?ROT, 4, "2rot"
1633+ 6AFA              //              ...
1634+ 6AFA              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1635+ 6AFA              //
1636+ 6AFA              //      d3  |d2  |d1  |
1637+ 6AFA              //      h l |h l |h l |
1638+ 6AFA              // SP   LHED|LHED|LHED|
1639+ 6AFA              // SP  +0123|4567|89ab|
1640+ 6AFA              //              ld      hl, $000B
1641+ 6AFA              //              add     hl, sp
1642+ 6AFA              //              ld      d, (hl)
1643+ 6AFA              //              dec     hl
1644+ 6AFA              //              ld      e, (hl)
1645+ 6AFA              //              dec     hl
1646+ 6AFA              //              push    de
1647+ 6AFA              //              ld      d, (hl)
1648+ 6AFA              //              dec     hl
1649+ 6AFA              //              ld      e, (hl)
1650+ 6AFA              //              dec     hl
1651+ 6AFA              //              push    de
1652+ 6AFA
1653+ 6AFA              //      d1  |d3  |d2  |d1  |
1654+ 6AFA              //      h l |h l |h l |h l |
1655+ 6AFA              // SP   LHED|LHED|LHED|LHED|
1656+ 6AFA              // SP       +0123|4567|89ab|
1657+ 6AFA
1658+ 6AFA              //              ld      d, h
1659+ 6AFA              //              ld      e, l
1660+ 6AFA              //              inc     de
1661+ 6AFA              //              inc     de
1662+ 6AFA              //              inc     de
1663+ 6AFA              //              inc     de
1664+ 6AFA              //              push    bc
1665+ 6AFA              //              ld      bc, $000C
1666+ 6AFA              //              lddr
1667+ 6AFA              //              pop     bc
1668+ 6AFA              //              pop     de
1669+ 6AFA              //              pop     de
1670+ 6AFA              //
1671+ 6AFA              //              next
1672+ 6AFA
1673+ 6AFA
1674+ 6AFA              //  ______________________________________________________________________
1675+ 6AFA              //
1676+ 6AFA              // +!           n a --
1677+ 6AFA              // Sums to the content of address a the number n.
1678+ 6AFA              // It is the same of  a @ n + a !
1679+ 6AFA                              New_Def PLUSSTORE, "+!", is_code, is_normal
1679+ 6AFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1679+ 6AFA             >
1679+ 6AFA             >                // dummy db directives used to calculate length of namec
1679+ 6AFA 2B 21       >                db      "+!"
1679+ 6AFC             >len_NFA         defl    $ - temp_NFA
1679+ 6AFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1679+ 6AFA             >
1679+ 6AFA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1679+ 6AFB 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1679+ 6AFD             >                org     $-1                 // alter last byte of Name just above to set
1679+ 6AFC A1          >                db      {b $} | END_BIT     // msb as name end
1679+ 6AFD             >
1679+ 6AFD EB 6A       >                dw      last_NFA            // Link to previous definition Name
1679+ 6AFF             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1679+ 6AFF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1679+ 6AFF ~           >
1679+ 6AFF ~           >
1679+ 6AFF             >                endif           ; ok        // for other definitions it "points" the correct handler
1679+ 6AFF             >                // Use of "; ok" to suppress "warning[fwdref]"
1679+ 6AFF             >
1679+ 6AFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1680+ 6AFF E1                           pop     hl                  // hl is the address
1681+ 6B00 D1                           pop     de                  // de is the number
1682+ 6B01 7E                           ld      a, (hl)
1683+ 6B02 83                           add     e
1684+ 6B03 77                           ld      (hl), a
1685+ 6B04 23                           inc     hl
1686+ 6B05 7E                           ld      a, (hl)
1687+ 6B06 8A                           adc     d
1688+ 6B07 77                           ld      (hl), a
1689+ 6B08
1690+ 6B08                              next
1690+ 6B08 DD E9       >                jp      (ix)
1691+ 6B0A
1692+ 6B0A              //  ______________________________________________________________________
1693+ 6B0A              //
1694+ 6B0A              // toggle       a n --
1695+ 6B0A              // Complements (xor) the byte at addrress  a  with the model n.
1696+ 6B0A                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1696+ 6B0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1696+ 6B0A             >
1696+ 6B0A             >                // dummy db directives used to calculate length of namec
1696+ 6B0A 54 4F 47 47 >                db      "TOGGLE"
1696+ 6B0E 4C 45       >
1696+ 6B10             >len_NFA         defl    $ - temp_NFA
1696+ 6B10             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1696+ 6B0A             >
1696+ 6B0A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1696+ 6B0B 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1696+ 6B0F 4C 45       >
1696+ 6B11             >                org     $-1                 // alter last byte of Name just above to set
1696+ 6B10 C5          >                db      {b $} | END_BIT     // msb as name end
1696+ 6B11             >
1696+ 6B11 FA 6A       >                dw      last_NFA            // Link to previous definition Name
1696+ 6B13             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1696+ 6B13 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1696+ 6B13 ~           >
1696+ 6B13 ~           >
1696+ 6B13             >                endif           ; ok        // for other definitions it "points" the correct handler
1696+ 6B13             >                // Use of "; ok" to suppress "warning[fwdref]"
1696+ 6B13             >
1696+ 6B13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1697+ 6B13 D1                           pop     de
1698+ 6B14 E1                           pop     hl
1699+ 6B15 7E                           ld      a, (hl)
1700+ 6B16 AB                           xor     e
1701+ 6B17 77                           ld      (hl), a
1702+ 6B18
1703+ 6B18                              next
1703+ 6B18 DD E9       >                jp      (ix)
1704+ 6B1A
1705+ 6B1A              //  ______________________________________________________________________
1706+ 6B1A              //
1707+ 6B1A              // @            a -- n
1708+ 6B1A              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1709+ 6B1A                              New_Def FETCH, "@", is_code, is_normal
1709+ 6B1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1709+ 6B1A             >
1709+ 6B1A             >                // dummy db directives used to calculate length of namec
1709+ 6B1A 40          >                db      "@"
1709+ 6B1B             >len_NFA         defl    $ - temp_NFA
1709+ 6B1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1709+ 6B1A             >
1709+ 6B1A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1709+ 6B1B 40          >                db      "@"               // name string in 7-bit ascii, but
1709+ 6B1C             >                org     $-1                 // alter last byte of Name just above to set
1709+ 6B1B C0          >                db      {b $} | END_BIT     // msb as name end
1709+ 6B1C             >
1709+ 6B1C 0A 6B       >                dw      last_NFA            // Link to previous definition Name
1709+ 6B1E             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1709+ 6B1E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1709+ 6B1E ~           >
1709+ 6B1E ~           >
1709+ 6B1E             >                endif           ; ok        // for other definitions it "points" the correct handler
1709+ 6B1E             >                // Use of "; ok" to suppress "warning[fwdref]"
1709+ 6B1E             >
1709+ 6B1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1710+ 6B1E E1                           pop     hl
1711+ 6B1F 5E                           ld      e, (hl)             // low-byte
1712+ 6B20 23                           inc     hl
1713+ 6B21 56                           ld      d, (hl)             // high-byte
1714+ 6B22 D5                           push    de
1715+ 6B23                              next
1715+ 6B23 DD E9       >                jp      (ix)
1716+ 6B25
1717+ 6B25              //  ______________________________________________________________________
1718+ 6B25              //
1719+ 6B25              // !            n a --
1720+ 6B25              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1721+ 6B25                              New_Def STORE, "!", is_code, is_normal
1721+ 6B25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1721+ 6B25             >
1721+ 6B25             >                // dummy db directives used to calculate length of namec
1721+ 6B25 21          >                db      "!"
1721+ 6B26             >len_NFA         defl    $ - temp_NFA
1721+ 6B26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1721+ 6B25             >
1721+ 6B25 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1721+ 6B26 21          >                db      "!"               // name string in 7-bit ascii, but
1721+ 6B27             >                org     $-1                 // alter last byte of Name just above to set
1721+ 6B26 A1          >                db      {b $} | END_BIT     // msb as name end
1721+ 6B27             >
1721+ 6B27 1A 6B       >                dw      last_NFA            // Link to previous definition Name
1721+ 6B29             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1721+ 6B29 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1721+ 6B29 ~           >
1721+ 6B29 ~           >
1721+ 6B29             >                endif           ; ok        // for other definitions it "points" the correct handler
1721+ 6B29             >                // Use of "; ok" to suppress "warning[fwdref]"
1721+ 6B29             >
1721+ 6B29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1722+ 6B29 E1                           pop     hl                  // address
1723+ 6B2A D1                           pop     de                  // < n
1724+ 6B2B 73                           ld      (hl), e             // low-byte
1725+ 6B2C 23                           inc     hl
1726+ 6B2D 72                           ld      (hl), d             // high-byte
1727+ 6B2E
1728+ 6B2E                              next
1728+ 6B2E DD E9       >                jp      (ix)
1729+ 6B30
1730+ 6B30              //  ______________________________________________________________________
1731+ 6B30              //
1732+ 6B30              // c@           a -- c
1733+ 6B30              // fetch a character n from address a
1734+ 6B30                              New_Def CFETCH, "C@", is_code, is_normal
1734+ 6B30             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1734+ 6B30             >
1734+ 6B30             >                // dummy db directives used to calculate length of namec
1734+ 6B30 43 40       >                db      "C@"
1734+ 6B32             >len_NFA         defl    $ - temp_NFA
1734+ 6B32             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1734+ 6B30             >
1734+ 6B30 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1734+ 6B31 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1734+ 6B33             >                org     $-1                 // alter last byte of Name just above to set
1734+ 6B32 C0          >                db      {b $} | END_BIT     // msb as name end
1734+ 6B33             >
1734+ 6B33 25 6B       >                dw      last_NFA            // Link to previous definition Name
1734+ 6B35             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1734+ 6B35 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1734+ 6B35 ~           >
1734+ 6B35 ~           >
1734+ 6B35             >                endif           ; ok        // for other definitions it "points" the correct handler
1734+ 6B35             >                // Use of "; ok" to suppress "warning[fwdref]"
1734+ 6B35             >
1734+ 6B35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1735+ 6B35 E1                           pop     hl
1736+ 6B36 6E                           ld      l, (hl)             // low-byte
1737+ 6B37 26 00                        ld      h, 0
1738+ 6B39
1739+ 6B39                              psh1
1739+ 6B39 E5          >                push    hl
1739+ 6B3A DD E9       >                jp      (ix)
1740+ 6B3C
1741+ 6B3C              //  ______________________________________________________________________
1742+ 6B3C              //
1743+ 6B3C              // c!           c a --
1744+ 6B3C              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1745+ 6B3C                              New_Def CSTORE, "C!", is_code, is_normal
1745+ 6B3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1745+ 6B3C             >
1745+ 6B3C             >                // dummy db directives used to calculate length of namec
1745+ 6B3C 43 21       >                db      "C!"
1745+ 6B3E             >len_NFA         defl    $ - temp_NFA
1745+ 6B3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1745+ 6B3C             >
1745+ 6B3C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1745+ 6B3D 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1745+ 6B3F             >                org     $-1                 // alter last byte of Name just above to set
1745+ 6B3E A1          >                db      {b $} | END_BIT     // msb as name end
1745+ 6B3F             >
1745+ 6B3F 30 6B       >                dw      last_NFA            // Link to previous definition Name
1745+ 6B41             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1745+ 6B41 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1745+ 6B41 ~           >
1745+ 6B41 ~           >
1745+ 6B41             >                endif           ; ok        // for other definitions it "points" the correct handler
1745+ 6B41             >                // Use of "; ok" to suppress "warning[fwdref]"
1745+ 6B41             >
1745+ 6B41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1746+ 6B41 E1                           pop     hl                  // < address
1747+ 6B42 D1                           pop     de
1748+ 6B43 73                           ld      (hl), e             // low-byte
1749+ 6B44
1750+ 6B44                              next
1750+ 6B44 DD E9       >                jp      (ix)
1751+ 6B46
1752+ 6B46              //  ______________________________________________________________________
1753+ 6B46              //
1754+ 6B46              // 2@           a -- d
1755+ 6B46              // fetch a 32 bits number d from address a and leaves it on top of the
1756+ 6B46              // stack as two single numbers, high part as top of the stack.
1757+ 6B46              // A double number is normally kept in CPU registers as HLDE.
1758+ 6B46              // On stack a double number is treated as two single numbers
1759+ 6B46              // where BC is on the top of the stack and HL is the second from top,
1760+ 6B46              // so the sign of the number can be checked on top of stack
1761+ 6B46              // and in the stack memory it appears as LHED.
1762+ 6B46                              New_Def TWO_FETCH, "2@", is_code, is_normal
1762+ 6B46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1762+ 6B46             >
1762+ 6B46             >                // dummy db directives used to calculate length of namec
1762+ 6B46 32 40       >                db      "2@"
1762+ 6B48             >len_NFA         defl    $ - temp_NFA
1762+ 6B48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1762+ 6B46             >
1762+ 6B46 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1762+ 6B47 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1762+ 6B49             >                org     $-1                 // alter last byte of Name just above to set
1762+ 6B48 C0          >                db      {b $} | END_BIT     // msb as name end
1762+ 6B49             >
1762+ 6B49 3C 6B       >                dw      last_NFA            // Link to previous definition Name
1762+ 6B4B             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1762+ 6B4B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1762+ 6B4B ~           >
1762+ 6B4B ~           >
1762+ 6B4B             >                endif           ; ok        // for other definitions it "points" the correct handler
1762+ 6B4B             >                // Use of "; ok" to suppress "warning[fwdref]"
1762+ 6B4B             >
1762+ 6B4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1763+ 6B4B E1                           pop     hl                  // address
1764+ 6B4C 5E                           ld      e, (hl)             // low-byte
1765+ 6B4D 23                           inc     hl
1766+ 6B4E 56                           ld      d, (hl)             // high-byte
1767+ 6B4F 23                           inc     hl
1768+ 6B50 7E                           ld      a, (hl)             // low-byte
1769+ 6B51 23                           inc     hl
1770+ 6B52 66                           ld      h, (hl)             // high-byte
1771+ 6B53 6F                           ld      l, a
1772+ 6B54 E5                           push    hl
1773+ 6B55 D5                           push    de
1774+ 6B56                              next
1774+ 6B56 DD E9       >                jp      (ix)
1775+ 6B58
1776+ 6B58              //  ______________________________________________________________________
1777+ 6B58              //
1778+ 6B58              // 2!           d a --
1779+ 6B58              // stores a 32 bits number d from address a and leaves it on top of the
1780+ 6B58              // stack as two single numbers, high part as top of the stack.
1781+ 6B58              // A double number is normally kept in CPU registers as HLDE.
1782+ 6B58              // On stack a double number is treated as two single numbers
1783+ 6B58              // where BC is on the top of the stack and HL is the second from top,
1784+ 6B58              // so the sign of the number can be checked on top of stack
1785+ 6B58              // and in the stack memory it appears as LHED.
1786+ 6B58                              New_Def TWO_STORE, "2!", is_code, is_normal
1786+ 6B58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1786+ 6B58             >
1786+ 6B58             >                // dummy db directives used to calculate length of namec
1786+ 6B58 32 21       >                db      "2!"
1786+ 6B5A             >len_NFA         defl    $ - temp_NFA
1786+ 6B5A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1786+ 6B58             >
1786+ 6B58 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1786+ 6B59 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1786+ 6B5B             >                org     $-1                 // alter last byte of Name just above to set
1786+ 6B5A A1          >                db      {b $} | END_BIT     // msb as name end
1786+ 6B5B             >
1786+ 6B5B 46 6B       >                dw      last_NFA            // Link to previous definition Name
1786+ 6B5D             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1786+ 6B5D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1786+ 6B5D ~           >
1786+ 6B5D ~           >
1786+ 6B5D             >                endif           ; ok        // for other definitions it "points" the correct handler
1786+ 6B5D             >                // Use of "; ok" to suppress "warning[fwdref]"
1786+ 6B5D             >
1786+ 6B5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1787+ 6B5D D9                           exx
1788+ 6B5E E1                           pop     hl                  // address
1789+ 6B5F C1                           pop     bc                  // < high-part
1790+ 6B60 D1                           pop     de                  // < low-part > Instruction Pointer
1791+ 6B61 71                           ld      (hl), c
1792+ 6B62 23                           inc     hl
1793+ 6B63 70                           ld      (hl), b
1794+ 6B64 23                           inc     hl
1795+ 6B65 73                           ld      (hl), e
1796+ 6B66 23                           inc     hl
1797+ 6B67 72                           ld      (hl), d
1798+ 6B68 D9                           exx
1799+ 6B69                              next
1799+ 6B69 DD E9       >                jp      (ix)
1800+ 6B6B
1801+ 6B6B              //  ______________________________________________________________________
1802+ 6B6B              //
1803+ 6B6B              // p@           a -- c
1804+ 6B6B              // Read one byte from port a and leave the result on top of stack
1805+ 6B6B                              New_Def PFETCH, "P@", is_code, is_normal
1805+ 6B6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1805+ 6B6B             >
1805+ 6B6B             >                // dummy db directives used to calculate length of namec
1805+ 6B6B 50 40       >                db      "P@"
1805+ 6B6D             >len_NFA         defl    $ - temp_NFA
1805+ 6B6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1805+ 6B6B             >
1805+ 6B6B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1805+ 6B6C 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1805+ 6B6E             >                org     $-1                 // alter last byte of Name just above to set
1805+ 6B6D C0          >                db      {b $} | END_BIT     // msb as name end
1805+ 6B6E             >
1805+ 6B6E 58 6B       >                dw      last_NFA            // Link to previous definition Name
1805+ 6B70             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1805+ 6B70 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1805+ 6B70 ~           >
1805+ 6B70 ~           >
1805+ 6B70             >                endif           ; ok        // for other definitions it "points" the correct handler
1805+ 6B70             >                // Use of "; ok" to suppress "warning[fwdref]"
1805+ 6B70             >
1805+ 6B70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1806+ 6B70 D9                           exx
1807+ 6B71 C1                           pop     bc
1808+ 6B72 26 00                        ld      h, 0
1809+ 6B74 ED 68                        in      l, (c)
1810+ 6B76 E5                           push    hl
1811+ 6B77 D9                           exx
1812+ 6B78                              next
1812+ 6B78 DD E9       >                jp      (ix)
1813+ 6B7A
1814+ 6B7A              //  ______________________________________________________________________
1815+ 6B7A              //
1816+ 6B7A              // p!           c a --
1817+ 6B7A              // Send one byte (top of stack) to port a
1818+ 6B7A                              New_Def PSTORE, "P!", is_code, is_normal
1818+ 6B7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1818+ 6B7A             >
1818+ 6B7A             >                // dummy db directives used to calculate length of namec
1818+ 6B7A 50 21       >                db      "P!"
1818+ 6B7C             >len_NFA         defl    $ - temp_NFA
1818+ 6B7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1818+ 6B7A             >
1818+ 6B7A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1818+ 6B7B 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1818+ 6B7D             >                org     $-1                 // alter last byte of Name just above to set
1818+ 6B7C A1          >                db      {b $} | END_BIT     // msb as name end
1818+ 6B7D             >
1818+ 6B7D 6B 6B       >                dw      last_NFA            // Link to previous definition Name
1818+ 6B7F             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1818+ 6B7F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1818+ 6B7F ~           >
1818+ 6B7F ~           >
1818+ 6B7F             >                endif           ; ok        // for other definitions it "points" the correct handler
1818+ 6B7F             >                // Use of "; ok" to suppress "warning[fwdref]"
1818+ 6B7F             >
1818+ 6B7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1819+ 6B7F D9                           exx
1820+ 6B80 C1                           pop     bc
1821+ 6B81 E1                           pop     hl                  // < c
1822+ 6B82 ED 69                        out     (c), l              // low-byte
1823+ 6B84 D9                           exx
1824+ 6B85                              next
1824+ 6B85 DD E9       >                jp      (ix)
1825+ 6B87
1826+ 6B87
1827+ 6B87              //  ______________________________________________________________________
1828+ 6B87              //
1829+ 6B87              // 2*           n1 -- n2
1830+ 6B87              // doubles the number at top of stack
1831+ 6B87                              New_Def TWO_MUL, "2*", is_code, is_normal
1831+ 6B87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1831+ 6B87             >
1831+ 6B87             >                // dummy db directives used to calculate length of namec
1831+ 6B87 32 2A       >                db      "2*"
1831+ 6B89             >len_NFA         defl    $ - temp_NFA
1831+ 6B89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1831+ 6B87             >
1831+ 6B87 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1831+ 6B88 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1831+ 6B8A             >                org     $-1                 // alter last byte of Name just above to set
1831+ 6B89 AA          >                db      {b $} | END_BIT     // msb as name end
1831+ 6B8A             >
1831+ 6B8A 7A 6B       >                dw      last_NFA            // Link to previous definition Name
1831+ 6B8C             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1831+ 6B8C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1831+ 6B8C ~           >
1831+ 6B8C ~           >
1831+ 6B8C             >                endif           ; ok        // for other definitions it "points" the correct handler
1831+ 6B8C             >                // Use of "; ok" to suppress "warning[fwdref]"
1831+ 6B8C             >
1831+ 6B8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1832+ 6B8C              Two_Mul_Ptr:
1833+ 6B8C E1                           pop     hl
1834+ 6B8D 29                           add     hl, hl
1835+ 6B8E
1836+ 6B8E                              psh1
1836+ 6B8E E5          >                push    hl
1836+ 6B8F DD E9       >                jp      (ix)
1837+ 6B91
1838+ 6B91              //  ______________________________________________________________________
1839+ 6B91              //
1840+ 6B91              // 2/           n1 -- n2
1841+ 6B91              // halves the top of stack, sign is unchanged
1842+ 6B91                              New_Def TWO_DIV, "2/", is_code, is_normal
1842+ 6B91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1842+ 6B91             >
1842+ 6B91             >                // dummy db directives used to calculate length of namec
1842+ 6B91 32 2F       >                db      "2/"
1842+ 6B93             >len_NFA         defl    $ - temp_NFA
1842+ 6B93             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1842+ 6B91             >
1842+ 6B91 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1842+ 6B92 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1842+ 6B94             >                org     $-1                 // alter last byte of Name just above to set
1842+ 6B93 AF          >                db      {b $} | END_BIT     // msb as name end
1842+ 6B94             >
1842+ 6B94 87 6B       >                dw      last_NFA            // Link to previous definition Name
1842+ 6B96             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1842+ 6B96 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1842+ 6B96 ~           >
1842+ 6B96 ~           >
1842+ 6B96             >                endif           ; ok        // for other definitions it "points" the correct handler
1842+ 6B96             >                // Use of "; ok" to suppress "warning[fwdref]"
1842+ 6B96             >
1842+ 6B96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1843+ 6B96 E1                           pop     hl
1844+ 6B97 CB 2C                        sra     h
1845+ 6B99 CB 1D                        rr      l
1846+ 6B9B
1847+ 6B9B                              psh1
1847+ 6B9B E5          >                push    hl
1847+ 6B9C DD E9       >                jp      (ix)
1848+ 6B9E
1849+ 6B9E              //  ______________________________________________________________________
1850+ 6B9E              //
1851+ 6B9E              // lshift       n1 u -- n2
1852+ 6B9E              // bit left shift of u bits
1853+ 6B9E                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1853+ 6B9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1853+ 6B9E             >
1853+ 6B9E             >                // dummy db directives used to calculate length of namec
1853+ 6B9E 4C 53 48 49 >                db      "LSHIFT"
1853+ 6BA2 46 54       >
1853+ 6BA4             >len_NFA         defl    $ - temp_NFA
1853+ 6BA4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1853+ 6B9E             >
1853+ 6B9E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1853+ 6B9F 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1853+ 6BA3 46 54       >
1853+ 6BA5             >                org     $-1                 // alter last byte of Name just above to set
1853+ 6BA4 D4          >                db      {b $} | END_BIT     // msb as name end
1853+ 6BA5             >
1853+ 6BA5 91 6B       >                dw      last_NFA            // Link to previous definition Name
1853+ 6BA7             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1853+ 6BA7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1853+ 6BA7 ~           >
1853+ 6BA7 ~           >
1853+ 6BA7             >                endif           ; ok        // for other definitions it "points" the correct handler
1853+ 6BA7             >                // Use of "; ok" to suppress "warning[fwdref]"
1853+ 6BA7             >
1853+ 6BA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1854+ 6BA7 D1                           pop     de
1855+ 6BA8
1856+ 6BA8 E1                           pop     hl
1857+ 6BA9 7B                           ld      a, e
1858+ 6BAA B7                           or      a
1859+ 6BAB 28 04                        jr      z, Lshift_Zero
1860+ 6BAD              Lshift_Loop:
1861+ 6BAD 29                                   add     hl, hl
1862+ 6BAE 3D                                   dec     a
1863+ 6BAF 20 FC                            jr      nz, Lshift_Loop
1864+ 6BB1              Lshift_Zero:
1865+ 6BB1
1866+ 6BB1
1867+ 6BB1                              psh1
1867+ 6BB1 E5          >                push    hl
1867+ 6BB2 DD E9       >                jp      (ix)
1868+ 6BB4
1869+ 6BB4              //  ______________________________________________________________________
1870+ 6BB4              //
1871+ 6BB4              // rshift       n1 u -- n2
1872+ 6BB4              // bit right shift of u bits
1873+ 6BB4                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1873+ 6BB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1873+ 6BB4             >
1873+ 6BB4             >                // dummy db directives used to calculate length of namec
1873+ 6BB4 52 53 48 49 >                db      "RSHIFT"
1873+ 6BB8 46 54       >
1873+ 6BBA             >len_NFA         defl    $ - temp_NFA
1873+ 6BBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1873+ 6BB4             >
1873+ 6BB4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1873+ 6BB5 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1873+ 6BB9 46 54       >
1873+ 6BBB             >                org     $-1                 // alter last byte of Name just above to set
1873+ 6BBA D4          >                db      {b $} | END_BIT     // msb as name end
1873+ 6BBB             >
1873+ 6BBB 9E 6B       >                dw      last_NFA            // Link to previous definition Name
1873+ 6BBD             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1873+ 6BBD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1873+ 6BBD ~           >
1873+ 6BBD ~           >
1873+ 6BBD             >                endif           ; ok        // for other definitions it "points" the correct handler
1873+ 6BBD             >                // Use of "; ok" to suppress "warning[fwdref]"
1873+ 6BBD             >
1873+ 6BBD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1874+ 6BBD D1                           pop     de
1875+ 6BBE
1876+ 6BBE E1                           pop     hl
1877+ 6BBF 7B                           ld      a, e
1878+ 6BC0 B7                           or      a
1879+ 6BC1 28 07                        jr      z, Rshift_Zero
1880+ 6BC3              Rshift_Loop:
1881+ 6BC3 CB 3C                                srl     h
1882+ 6BC5 CB 1D                                rr      l
1883+ 6BC7 3D                                   dec     a
1884+ 6BC8 20 F9                            jr      nz, Rshift_Loop
1885+ 6BCA              Rshift_Zero:
1886+ 6BCA
1887+ 6BCA
1888+ 6BCA                              psh1
1888+ 6BCA E5          >                push    hl
1888+ 6BCB DD E9       >                jp      (ix)
1889+ 6BCD
1890+ 6BCD              //  ______________________________________________________________________
1891+ 6BCD              //
1892+ 6BCD              // cells        n1 -- n2
1893+ 6BCD              // decrement by 2 top of stack
1894+ 6BCD                              New_Def CELLS, "CELLS", is_code, is_normal
1894+ 6BCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1894+ 6BCD             >
1894+ 6BCD             >                // dummy db directives used to calculate length of namec
1894+ 6BCD 43 45 4C 4C >                db      "CELLS"
1894+ 6BD1 53          >
1894+ 6BD2             >len_NFA         defl    $ - temp_NFA
1894+ 6BD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1894+ 6BCD             >
1894+ 6BCD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1894+ 6BCE 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1894+ 6BD2 53          >
1894+ 6BD3             >                org     $-1                 // alter last byte of Name just above to set
1894+ 6BD2 D3          >                db      {b $} | END_BIT     // msb as name end
1894+ 6BD3             >
1894+ 6BD3 B4 6B       >                dw      last_NFA            // Link to previous definition Name
1894+ 6BD5             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1894+ 6BD5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1894+ 6BD5 ~           >
1894+ 6BD5 ~           >
1894+ 6BD5             >                endif           ; ok        // for other definitions it "points" the correct handler
1894+ 6BD5             >                // Use of "; ok" to suppress "warning[fwdref]"
1894+ 6BD5             >
1894+ 6BD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1895+ 6BD5 C3 8C 6B                     jp      Two_Mul_Ptr
1896+ 6BD8
1897+ 6BD8
1898+ 6BD8              //  ______________________________________________________________________
1899+ 6BD8
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
 111  6BD8                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
   1+ 6BD8              //  ______________________________________________________________________
   2+ 6BD8              //
   3+ 6BD8              //  L1.asm
   4+ 6BD8              //
   5+ 6BD8              //  Level-1 definitions and derivate
   6+ 6BD8              //  ______________________________________________________________________
   7+ 6BD8
   8+ 6BD8              //  ______________________________________________________________________
   9+ 6BD8              //
  10+ 6BD8              // :            -- cccc     ( compile time )
  11+ 6BD8              //              i*x -- j*x  ( run time )
  12+ 6BD8              // Colon Definition
  13+ 6BD8                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6BD8             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6BD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6BD8             >
  13+ 6BD8             >                // dummy db directives used to calculate length of namec
  13+ 6BD8 3A          >                db      ":"
  13+ 6BD9             >len_NFA         defl    $ - temp_NFA
  13+ 6BD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6BD8             >
  13+ 6BD8 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6BD9 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6BDA             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6BD9 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6BDA             >
  13+ 6BDA CD 6B       >                dw      last_NFA            // Link to previous definition Name
  13+ 6BDC             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6BDC CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6BDF             >
  13+ 6BDF             >
  13+ 6BDF             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6BDF             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6BDF             >
  13+ 6BDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6BDF
  15+ 6BDF 87 70                        dw      QEXEC                   // ?exec
  16+ 6BE1 3F 70                        dw      STORE_CSP               // !csp
  17+ 6BE3 CA 6D 1E 6B                  dw      CURRENT, FETCH          // current @
  18+ 6BE7 BC 6D 29 6B                  dw      CONTEXT, STORE          // context !
  19+ 6BEB B0 76                        dw      CREATE                  // create  ( forward )
  20+ 6BED 3C 71                        dw      SMUDGE                  // dmudge
  21+ 6BEF 26 71                        dw      SQUARED_CLOSE           // ]
  22+ 6BF1 96 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6BF3                                                              // ... immediate
  24+ 6BF3              Enter_Ptr:
  25+ 6BF3                              // via call coded in CFA
  26+ 6BF3                              ldhlrp
  26+ 6BF3 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6BF6 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6BF7 70                           ld      (hl), b
  29+ 6BF8 2B                           dec     hl
  30+ 6BF9 71                           ld      (hl), c
  31+ 6BFA                              ldrphl
  31+ 6BFA 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6BFD
  33+ 6BFD
  34+ 6BFD C1                           pop     bc                  // points to PFA of "this" word
  35+ 6BFE                              next
  35+ 6BFE DD E9       >                jp      (ix)
  36+ 6C00
  37+ 6C00              //  ______________________________________________________________________
  38+ 6C00              //
  39+ 6C00              // ;            --
  40+ 6C00              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6C00                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6C00             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6C00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6C00             >
  41+ 6C00             >                // dummy db directives used to calculate length of namec
  41+ 6C00 3B          >                db      ";"
  41+ 6C01             >len_NFA         defl    $ - temp_NFA
  41+ 6C01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6C00             >
  41+ 6C00 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6C01 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6C02             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6C01 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6C02             >
  41+ 6C02 D8 6B       >                dw      last_NFA            // Link to previous definition Name
  41+ 6C04             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6C04 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6C07             >
  41+ 6C07             >
  41+ 6C07             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6C07             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6C07             >
  41+ 6C07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6C07
  43+ 6C07 B3 70                        dw      QCSP                    // ?csp
  44+ 6C09 EC 70 3A 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6C0D 3C 71                        dw      SMUDGE                  // smudge
  46+ 6C0F 17 71                        dw      SQUARED_OPEN            // [
  47+ 6C11 3A 69                        dw      EXIT                    // ; immediate
  48+ 6C13
  49+ 6C13              //  ______________________________________________________________________
  50+ 6C13              //
  51+ 6C13              // noop         --
  52+ 6C13
  53+ 6C13                              Colon_Def NOOP, "NOOP", is_normal
  53+ 6C13             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 6C13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6C13             >
  53+ 6C13             >                // dummy db directives used to calculate length of namec
  53+ 6C13 4E 4F 4F 50 >                db      "NOOP"
  53+ 6C17             >len_NFA         defl    $ - temp_NFA
  53+ 6C17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6C13             >
  53+ 6C13 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6C14 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6C18             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6C17 D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6C18             >
  53+ 6C18 00 6C       >                dw      last_NFA            // Link to previous definition Name
  53+ 6C1A             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6C1A CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 6C1D             >
  53+ 6C1D             >
  53+ 6C1D             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6C1D             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6C1D             >
  53+ 6C1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6C1D 3A 69                        dw      EXIT
  55+ 6C1F
  56+ 6C1F              //  ______________________________________________________________________
  57+ 6C1F              //
  58+ 6C1F              // constant     n -- cccc     ( compile time )
  59+ 6C1F              //              -- n          ( run time )
  60+ 6C1F              // Constant definition.
  61+ 6C1F                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6C1F             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6C1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6C1F             >
  61+ 6C1F             >                // dummy db directives used to calculate length of namec
  61+ 6C1F 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6C23 54 41 4E 54 >
  61+ 6C27             >len_NFA         defl    $ - temp_NFA
  61+ 6C27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6C1F             >
  61+ 6C1F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6C20 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6C24 54 41 4E 54 >
  61+ 6C28             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6C27 D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6C28             >
  61+ 6C28 13 6C       >                dw      last_NFA            // Link to previous definition Name
  61+ 6C2A             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6C2A CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6C2D             >
  61+ 6C2D             >
  61+ 6C2D             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6C2D             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6C2D             >
  61+ 6C2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6C2D
  63+ 6C2D B0 76                        dw      CREATE                  // create
  64+ 6C2F 97 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6C31 96 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6C33              Constant_Ptr:
  67+ 6C33
  68+ 6C33
  69+ 6C33 E1                           pop     hl
  70+ 6C34
  71+ 6C34 5E                           ld      e, (hl)
  72+ 6C35 23                           inc     hl
  73+ 6C36 56                           ld      d, (hl)
  74+ 6C37 D5                           push    de
  75+ 6C38                              next
  75+ 6C38 DD E9       >                jp      (ix)
  76+ 6C3A
  77+ 6C3A              //  ______________________________________________________________________
  78+ 6C3A              //
  79+ 6C3A              // variable     n -- cccc     ( compile time )
  80+ 6C3A              //              -- a          ( run time )
  81+ 6C3A              // Variable definition, n is the initial value.
  82+ 6C3A                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6C3A             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6C3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6C3A             >
  82+ 6C3A             >                // dummy db directives used to calculate length of namec
  82+ 6C3A 56 41 52 49 >                db      "VARIABLE"
  82+ 6C3E 41 42 4C 45 >
  82+ 6C42             >len_NFA         defl    $ - temp_NFA
  82+ 6C42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6C3A             >
  82+ 6C3A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6C3B 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6C3F 41 42 4C 45 >
  82+ 6C43             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6C42 C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6C43             >
  82+ 6C43 1F 6C       >                dw      last_NFA            // Link to previous definition Name
  82+ 6C45             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6C45 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6C48             >
  82+ 6C48             >
  82+ 6C48             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6C48             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6C48             >
  82+ 6C48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6C48
  84+ 6C48 6F 6C                        dw      ZERO
  85+ 6C4A 2A 6C                        dw      CONSTANT                // constant
  86+ 6C4C 96 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  87+ 6C4E              Variable_Ptr:
  88+ 6C4E
  89+ 6C4E
  90+ 6C4E
  91+ 6C4E
  92+ 6C4E                              next
  92+ 6C4E DD E9       >                jp      (ix)
  93+ 6C50
  94+ 6C50              //  ______________________________________________________________________
  95+ 6C50              //
  96+ 6C50              // user         b -- cccc     ( compile time )
  97+ 6C50              //              -- a          ( run time )
  98+ 6C50              // User variable definition
  99+ 6C50                              Colon_Def USER, "USER", is_normal
  99+ 6C50             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  99+ 6C50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99+ 6C50             >
  99+ 6C50             >                // dummy db directives used to calculate length of namec
  99+ 6C50 55 53 45 52 >                db      "USER"
  99+ 6C54             >len_NFA         defl    $ - temp_NFA
  99+ 6C54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99+ 6C50             >
  99+ 6C50 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99+ 6C51 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  99+ 6C55             >                org     $-1                 // alter last byte of Name just above to set
  99+ 6C54 D2          >                db      {b $} | END_BIT     // msb as name end
  99+ 6C55             >
  99+ 6C55 3A 6C       >                dw      last_NFA            // Link to previous definition Name
  99+ 6C57             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  99+ 6C57 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  99+ 6C5A             >
  99+ 6C5A             >
  99+ 6C5A             >                endif           ; ok        // for other definitions it "points" the correct handler
  99+ 6C5A             >                // Use of "; ok" to suppress "warning[fwdref]"
  99+ 6C5A             >
  99+ 6C5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100+ 6C5A
 101+ 6C5A B0 76                        dw      CREATE                  // create
 102+ 6C5C A9 6E                        dw      CCOMMA                  // c,
 103+ 6C5E 96 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 104+ 6C60
 105+ 6C60
 106+ 6C60              User_Ptr:
 107+ 6C60                              // via call coded in CFA
 108+ 6C60 E1                           pop     hl
 109+ 6C61
 110+ 6C61 5E                           ld      e, (hl)
 111+ 6C62 16 00                        ld      d, 0
 112+ 6C64 2A 94 63                     ld      hl, (USER_Pointer)
 113+ 6C67 19                           add     hl, de
 114+ 6C68
 115+ 6C68                              psh1
 115+ 6C68 E5          >                push    hl
 115+ 6C69 DD E9       >                jp      (ix)
 116+ 6C6B
 117+ 6C6B              //  ______________________________________________________________________
 118+ 6C6B              //
 119+ 6C6B                              Constant_Def ZERO       ,   "0"     ,   0
 119+ 6C6B             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 119+ 6C6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6C6B             >
 119+ 6C6B             >                // dummy db directives used to calculate length of namec
 119+ 6C6B 30          >                db      "0"
 119+ 6C6C             >len_NFA         defl    $ - temp_NFA
 119+ 6C6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6C6B             >
 119+ 6C6B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6C6C 30          >                db      "0"               // name string in 7-bit ascii, but
 119+ 6C6D             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6C6C B0          >                db      {b $} | END_BIT     // msb as name end
 119+ 6C6D             >
 119+ 6C6D 50 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6C6F             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6C6F CD 33 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6C72             >
 119+ 6C72             >
 119+ 6C72             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6C72             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6C72             >
 119+ 6C72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6C72 00 00       >                dw      0
 120+ 6C74                              Constant_Def ONE        ,   "1"     ,   1
 120+ 6C74             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 120+ 6C74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6C74             >
 120+ 6C74             >                // dummy db directives used to calculate length of namec
 120+ 6C74 31          >                db      "1"
 120+ 6C75             >len_NFA         defl    $ - temp_NFA
 120+ 6C75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6C74             >
 120+ 6C74 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6C75 31          >                db      "1"               // name string in 7-bit ascii, but
 120+ 6C76             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6C75 B1          >                db      {b $} | END_BIT     // msb as name end
 120+ 6C76             >
 120+ 6C76 6B 6C       >                dw      last_NFA            // Link to previous definition Name
 120+ 6C78             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6C78 CD 33 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6C7B             >
 120+ 6C7B             >
 120+ 6C7B             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6C7B             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6C7B             >
 120+ 6C7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6C7B 01 00       >                dw      1
 121+ 6C7D                              Constant_Def TWO        ,   "2"     ,   2
 121+ 6C7D             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 121+ 6C7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6C7D             >
 121+ 6C7D             >                // dummy db directives used to calculate length of namec
 121+ 6C7D 32          >                db      "2"
 121+ 6C7E             >len_NFA         defl    $ - temp_NFA
 121+ 6C7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6C7D             >
 121+ 6C7D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6C7E 32          >                db      "2"               // name string in 7-bit ascii, but
 121+ 6C7F             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6C7E B2          >                db      {b $} | END_BIT     // msb as name end
 121+ 6C7F             >
 121+ 6C7F 74 6C       >                dw      last_NFA            // Link to previous definition Name
 121+ 6C81             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6C81 CD 33 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6C84             >
 121+ 6C84             >
 121+ 6C84             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6C84             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6C84             >
 121+ 6C84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6C84 02 00       >                dw      2
 122+ 6C86                              Constant_Def THREE      ,   "3"     ,   3
 122+ 6C86             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 122+ 6C86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6C86             >
 122+ 6C86             >                // dummy db directives used to calculate length of namec
 122+ 6C86 33          >                db      "3"
 122+ 6C87             >len_NFA         defl    $ - temp_NFA
 122+ 6C87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6C86             >
 122+ 6C86 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6C87 33          >                db      "3"               // name string in 7-bit ascii, but
 122+ 6C88             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6C87 B3          >                db      {b $} | END_BIT     // msb as name end
 122+ 6C88             >
 122+ 6C88 7D 6C       >                dw      last_NFA            // Link to previous definition Name
 122+ 6C8A             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6C8A CD 33 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6C8D             >
 122+ 6C8D             >
 122+ 6C8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6C8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6C8D             >
 122+ 6C8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6C8D 03 00       >                dw      3
 123+ 6C8F                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 123+ 6C8F             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 123+ 6C8F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6C8F             >
 123+ 6C8F             >                // dummy db directives used to calculate length of namec
 123+ 6C8F 2D 31       >                db      "-1"
 123+ 6C91             >len_NFA         defl    $ - temp_NFA
 123+ 6C91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6C8F             >
 123+ 6C8F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6C90 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 123+ 6C92             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6C91 B1          >                db      {b $} | END_BIT     // msb as name end
 123+ 6C92             >
 123+ 6C92 86 6C       >                dw      last_NFA            // Link to previous definition Name
 123+ 6C94             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6C94 CD 33 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6C97             >
 123+ 6C97             >
 123+ 6C97             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6C97             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6C97             >
 123+ 6C97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6C97 FF FF       >                dw      -1
 124+ 6C99                              Constant_Def BL         ,   "BL"    , $20
 124+ 6C99             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 124+ 6C99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6C99             >
 124+ 6C99             >                // dummy db directives used to calculate length of namec
 124+ 6C99 42 4C       >                db      "BL"
 124+ 6C9B             >len_NFA         defl    $ - temp_NFA
 124+ 6C9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6C99             >
 124+ 6C99 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6C9A 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 124+ 6C9C             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6C9B CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6C9C             >
 124+ 6C9C 8F 6C       >                dw      last_NFA            // Link to previous definition Name
 124+ 6C9E             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6C9E CD 33 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6CA1             >
 124+ 6CA1             >
 124+ 6CA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6CA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6CA1             >
 124+ 6CA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6CA1 20 00       >                dw      $20
 125+ 6CA3                              Constant_Def CL         ,   "C/L"   ,  64
 125+ 6CA3             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 125+ 6CA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6CA3             >
 125+ 6CA3             >                // dummy db directives used to calculate length of namec
 125+ 6CA3 43 2F 4C    >                db      "C/L"
 125+ 6CA6             >len_NFA         defl    $ - temp_NFA
 125+ 6CA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6CA3             >
 125+ 6CA3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6CA4 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 125+ 6CA7             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6CA6 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ 6CA7             >
 125+ 6CA7 99 6C       >                dw      last_NFA            // Link to previous definition Name
 125+ 6CA9             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6CA9 CD 33 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6CAC             >
 125+ 6CAC             >
 125+ 6CAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6CAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6CAC             >
 125+ 6CAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6CAC 40 00       >                dw      64
 126+ 6CAE                              Constant_Def BBUF       ,   "B/BUF" , 512
 126+ 6CAE             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 126+ 6CAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6CAE             >
 126+ 6CAE             >                // dummy db directives used to calculate length of namec
 126+ 6CAE 42 2F 42 55 >                db      "B/BUF"
 126+ 6CB2 46          >
 126+ 6CB3             >len_NFA         defl    $ - temp_NFA
 126+ 6CB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6CAE             >
 126+ 6CAE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6CAF 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 126+ 6CB3 46          >
 126+ 6CB4             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6CB3 C6          >                db      {b $} | END_BIT     // msb as name end
 126+ 6CB4             >
 126+ 6CB4 A3 6C       >                dw      last_NFA            // Link to previous definition Name
 126+ 6CB6             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6CB6 CD 33 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6CB9             >
 126+ 6CB9             >
 126+ 6CB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6CB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6CB9             >
 126+ 6CB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6CB9 00 02       >                dw      512
 127+ 6CBB                              Constant_Def BSCR       ,   "B/SCR" ,   2
 127+ 6CBB             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 127+ 6CBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6CBB             >
 127+ 6CBB             >                // dummy db directives used to calculate length of namec
 127+ 6CBB 42 2F 53 43 >                db      "B/SCR"
 127+ 6CBF 52          >
 127+ 6CC0             >len_NFA         defl    $ - temp_NFA
 127+ 6CC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6CBB             >
 127+ 6CBB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6CBC 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 127+ 6CC0 52          >
 127+ 6CC1             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6CC0 D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6CC1             >
 127+ 6CC1 AE 6C       >                dw      last_NFA            // Link to previous definition Name
 127+ 6CC3             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6CC3 CD 33 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6CC6             >
 127+ 6CC6             >
 127+ 6CC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6CC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6CC6             >
 127+ 6CC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6CC6 02 00       >                dw      2
 128+ 6CC8                              Constant_Def LSCR       ,   "L/SCR" ,  16
 128+ 6CC8             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 128+ 6CC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ 6CC8             >
 128+ 6CC8             >                // dummy db directives used to calculate length of namec
 128+ 6CC8 4C 2F 53 43 >                db      "L/SCR"
 128+ 6CCC 52          >
 128+ 6CCD             >len_NFA         defl    $ - temp_NFA
 128+ 6CCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ 6CC8             >
 128+ 6CC8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ 6CC9 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 128+ 6CCD 52          >
 128+ 6CCE             >                org     $-1                 // alter last byte of Name just above to set
 128+ 6CCD D2          >                db      {b $} | END_BIT     // msb as name end
 128+ 6CCE             >
 128+ 6CCE BB 6C       >                dw      last_NFA            // Link to previous definition Name
 128+ 6CD0             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6CD0 CD 33 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6CD3             >
 128+ 6CD3             >
 128+ 6CD3             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6CD3             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6CD3             >
 128+ 6CD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6CD3 10 00       >                dw      16
 129+ 6CD5
 130+ 6CD5              //  ______________________________________________________________________
 131+ 6CD5              //
 132+ 6CD5              // +origin         --
 133+ 6CD5              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 134+ 6CD5              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 135+ 6CD5              //              dw      PLUS                    // +
 136+ 6CD5              //              dw      EXIT                    // ;
 137+ 6CD5                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 137+ 6CD5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ 6CD5             >
 137+ 6CD5             >                // dummy db directives used to calculate length of namec
 137+ 6CD5 2B 4F 52 49 >                db      "+ORIGIN"
 137+ 6CD9 47 49 4E    >
 137+ 6CDC             >len_NFA         defl    $ - temp_NFA
 137+ 6CDC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ 6CD5             >
 137+ 6CD5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ 6CD6 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 137+ 6CDA 47 49 4E    >
 137+ 6CDD             >                org     $-1                 // alter last byte of Name just above to set
 137+ 6CDC CE          >                db      {b $} | END_BIT     // msb as name end
 137+ 6CDD             >
 137+ 6CDD C8 6C       >                dw      last_NFA            // Link to previous definition Name
 137+ 6CDF             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 6CDF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 137+ 6CDF ~           >
 137+ 6CDF ~           >
 137+ 6CDF             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 6CDF             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 6CDF             >
 137+ 6CDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 6CDF E1                           pop     hl
 139+ 6CE0 11 66 63                     ld      de, Cold_origin
 140+ 6CE3 19                           add     hl, de
 141+ 6CE4 E5                           push    hl
 142+ 6CE5                              next
 142+ 6CE5 DD E9       >                jp      (ix)
 143+ 6CE7
 144+ 6CE7
 145+ 6CE7              //  ______________________________________________________________________
 146+ 6CE7              //
 147+ 6CE7                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 147+ 6CE7             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 147+ 6CE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147+ 6CE7             >
 147+ 6CE7             >                // dummy db directives used to calculate length of namec
 147+ 6CE7 28 4E 45 58 >                db      "(NEXT)"
 147+ 6CEB 54 29       >
 147+ 6CED             >len_NFA         defl    $ - temp_NFA
 147+ 6CED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147+ 6CE7             >
 147+ 6CE7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147+ 6CE8 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 147+ 6CEC 54 29       >
 147+ 6CEE             >                org     $-1                 // alter last byte of Name just above to set
 147+ 6CED A9          >                db      {b $} | END_BIT     // msb as name end
 147+ 6CEE             >
 147+ 6CEE D5 6C       >                dw      last_NFA            // Link to previous definition Name
 147+ 6CF0             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 147+ 6CF0 CD 33 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 147+ 6CF3             >
 147+ 6CF3             >
 147+ 6CF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 147+ 6CF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 147+ 6CF3             >
 147+ 6CF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 147+ 6CF3 98 63       >                dw      Next_Ptr
 148+ 6CF5
 149+ 6CF5              //  ______________________________________________________________________
 150+ 6CF5              //
 151+ 6CF5
 152+ 6CF5                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 152+ 6CF5             >                New_Def  S0, "S0", User_Ptr, is_normal
 152+ 6CF5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6CF5             >
 152+ 6CF5             >                // dummy db directives used to calculate length of namec
 152+ 6CF5 53 30       >                db      "S0"
 152+ 6CF7             >len_NFA         defl    $ - temp_NFA
 152+ 6CF7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6CF5             >
 152+ 6CF5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6CF6 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 152+ 6CF8             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6CF7 B0          >                db      {b $} | END_BIT     // msb as name end
 152+ 6CF8             >
 152+ 6CF8 E7 6C       >                dw      last_NFA            // Link to previous definition Name
 152+ 6CFA             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6CFA CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6CFD             >
 152+ 6CFD             >
 152+ 6CFD             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6CFD             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6CFD             >
 152+ 6CFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6CFD 06          >                db      06
 153+ 6CFE                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 153+ 6CFE             >                New_Def  R0, "R0", User_Ptr, is_normal
 153+ 6CFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6CFE             >
 153+ 6CFE             >                // dummy db directives used to calculate length of namec
 153+ 6CFE 52 30       >                db      "R0"
 153+ 6D00             >len_NFA         defl    $ - temp_NFA
 153+ 6D00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6CFE             >
 153+ 6CFE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6CFF 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 153+ 6D01             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6D00 B0          >                db      {b $} | END_BIT     // msb as name end
 153+ 6D01             >
 153+ 6D01 F5 6C       >                dw      last_NFA            // Link to previous definition Name
 153+ 6D03             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6D03 CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6D06             >
 153+ 6D06             >
 153+ 6D06             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6D06             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6D06             >
 153+ 6D06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6D06 08          >                db      08
 154+ 6D07                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 154+ 6D07             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 154+ 6D07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6D07             >
 154+ 6D07             >                // dummy db directives used to calculate length of namec
 154+ 6D07 54 49 42    >                db      "TIB"
 154+ 6D0A             >len_NFA         defl    $ - temp_NFA
 154+ 6D0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6D07             >
 154+ 6D07 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6D08 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 154+ 6D0B             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6D0A C2          >                db      {b $} | END_BIT     // msb as name end
 154+ 6D0B             >
 154+ 6D0B FE 6C       >                dw      last_NFA            // Link to previous definition Name
 154+ 6D0D             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6D0D CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6D10             >
 154+ 6D10             >
 154+ 6D10             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6D10             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6D10             >
 154+ 6D10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6D10 0A          >                db      10
 155+ 6D11                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 155+ 6D11             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 155+ 6D11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6D11             >
 155+ 6D11             >                // dummy db directives used to calculate length of namec
 155+ 6D11 57 49 44 54 >                db      "WIDTH"
 155+ 6D15 48          >
 155+ 6D16             >len_NFA         defl    $ - temp_NFA
 155+ 6D16             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6D11             >
 155+ 6D11 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6D12 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 155+ 6D16 48          >
 155+ 6D17             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6D16 C8          >                db      {b $} | END_BIT     // msb as name end
 155+ 6D17             >
 155+ 6D17 07 6D       >                dw      last_NFA            // Link to previous definition Name
 155+ 6D19             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6D19 CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6D1C             >
 155+ 6D1C             >
 155+ 6D1C             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6D1C             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6D1C             >
 155+ 6D1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6D1C 0C          >                db      12
 156+ 6D1D                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 156+ 6D1D             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 156+ 6D1D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6D1D             >
 156+ 6D1D             >                // dummy db directives used to calculate length of namec
 156+ 6D1D 57 41 52 4E >                db      "WARNING"
 156+ 6D21 49 4E 47    >
 156+ 6D24             >len_NFA         defl    $ - temp_NFA
 156+ 6D24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6D1D             >
 156+ 6D1D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6D1E 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 156+ 6D22 49 4E 47    >
 156+ 6D25             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6D24 C7          >                db      {b $} | END_BIT     // msb as name end
 156+ 6D25             >
 156+ 6D25 11 6D       >                dw      last_NFA            // Link to previous definition Name
 156+ 6D27             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6D27 CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6D2A             >
 156+ 6D2A             >
 156+ 6D2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6D2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6D2A             >
 156+ 6D2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6D2A 0E          >                db      14
 157+ 6D2B                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 157+ 6D2B             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 157+ 6D2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6D2B             >
 157+ 6D2B             >                // dummy db directives used to calculate length of namec
 157+ 6D2B 46 45 4E 43 >                db      "FENCE"
 157+ 6D2F 45          >
 157+ 6D30             >len_NFA         defl    $ - temp_NFA
 157+ 6D30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6D2B             >
 157+ 6D2B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6D2C 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 157+ 6D30 45          >
 157+ 6D31             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6D30 C5          >                db      {b $} | END_BIT     // msb as name end
 157+ 6D31             >
 157+ 6D31 1D 6D       >                dw      last_NFA            // Link to previous definition Name
 157+ 6D33             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6D33 CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6D36             >
 157+ 6D36             >
 157+ 6D36             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6D36             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6D36             >
 157+ 6D36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6D36 10          >                db      16
 158+ 6D37                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 158+ 6D37             >                New_Def  DP, "DP", User_Ptr, is_normal
 158+ 6D37             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6D37             >
 158+ 6D37             >                // dummy db directives used to calculate length of namec
 158+ 6D37 44 50       >                db      "DP"
 158+ 6D39             >len_NFA         defl    $ - temp_NFA
 158+ 6D39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6D37             >
 158+ 6D37 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6D38 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 158+ 6D3A             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6D39 D0          >                db      {b $} | END_BIT     // msb as name end
 158+ 6D3A             >
 158+ 6D3A 2B 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6D3C             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6D3C CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6D3F             >
 158+ 6D3F             >
 158+ 6D3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6D3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6D3F             >
 158+ 6D3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6D3F 12          >                db      18
 159+ 6D40                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 159+ 6D40             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 159+ 6D40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6D40             >
 159+ 6D40             >                // dummy db directives used to calculate length of namec
 159+ 6D40 56 4F 43 2D >                db      "VOC-LINK"
 159+ 6D44 4C 49 4E 4B >
 159+ 6D48             >len_NFA         defl    $ - temp_NFA
 159+ 6D48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6D40             >
 159+ 6D40 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6D41 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 159+ 6D45 4C 49 4E 4B >
 159+ 6D49             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6D48 CB          >                db      {b $} | END_BIT     // msb as name end
 159+ 6D49             >
 159+ 6D49 37 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6D4B             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6D4B CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6D4E             >
 159+ 6D4E             >
 159+ 6D4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6D4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6D4E             >
 159+ 6D4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6D4E 14          >                db      20
 160+ 6D4F                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 160+ 6D4F             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 160+ 6D4F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6D4F             >
 160+ 6D4F             >                // dummy db directives used to calculate length of namec
 160+ 6D4F 46 49 52 53 >                db      "FIRST"
 160+ 6D53 54          >
 160+ 6D54             >len_NFA         defl    $ - temp_NFA
 160+ 6D54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6D4F             >
 160+ 6D4F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6D50 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 160+ 6D54 54          >
 160+ 6D55             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6D54 D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6D55             >
 160+ 6D55 40 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6D57             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6D57 CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6D5A             >
 160+ 6D5A             >
 160+ 6D5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6D5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6D5A             >
 160+ 6D5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6D5A 16          >                db      22
 161+ 6D5B                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 161+ 6D5B             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 161+ 6D5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6D5B             >
 161+ 6D5B             >                // dummy db directives used to calculate length of namec
 161+ 6D5B 4C 49 4D 49 >                db      "LIMIT"
 161+ 6D5F 54          >
 161+ 6D60             >len_NFA         defl    $ - temp_NFA
 161+ 6D60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6D5B             >
 161+ 6D5B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6D5C 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 161+ 6D60 54          >
 161+ 6D61             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6D60 D4          >                db      {b $} | END_BIT     // msb as name end
 161+ 6D61             >
 161+ 6D61 4F 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6D63             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6D63 CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6D66             >
 161+ 6D66             >
 161+ 6D66             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6D66             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6D66             >
 161+ 6D66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6D66 18          >                db      24
 162+ 6D67                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 162+ 6D67             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 162+ 6D67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6D67             >
 162+ 6D67             >                // dummy db directives used to calculate length of namec
 162+ 6D67 45 58 50    >                db      "EXP"
 162+ 6D6A             >len_NFA         defl    $ - temp_NFA
 162+ 6D6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6D67             >
 162+ 6D67 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6D68 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 162+ 6D6B             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6D6A D0          >                db      {b $} | END_BIT     // msb as name end
 162+ 6D6B             >
 162+ 6D6B 5B 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6D6D             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6D6D CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6D70             >
 162+ 6D70             >
 162+ 6D70             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6D70             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6D70             >
 162+ 6D70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6D70 1A          >                db      26
 163+ 6D71                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 163+ 6D71             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 163+ 6D71             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6D71             >
 163+ 6D71             >                // dummy db directives used to calculate length of namec
 163+ 6D71 4E 4D 4F 44 >                db      "NMODE"
 163+ 6D75 45          >
 163+ 6D76             >len_NFA         defl    $ - temp_NFA
 163+ 6D76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6D71             >
 163+ 6D71 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6D72 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 163+ 6D76 45          >
 163+ 6D77             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6D76 C5          >                db      {b $} | END_BIT     // msb as name end
 163+ 6D77             >
 163+ 6D77 67 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6D79             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6D79 CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6D7C             >
 163+ 6D7C             >
 163+ 6D7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6D7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6D7C             >
 163+ 6D7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6D7C 1C          >                db      28
 164+ 6D7D                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 164+ 6D7D             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 164+ 6D7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6D7D             >
 164+ 6D7D             >                // dummy db directives used to calculate length of namec
 164+ 6D7D 42 4C 4B    >                db      "BLK"
 164+ 6D80             >len_NFA         defl    $ - temp_NFA
 164+ 6D80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6D7D             >
 164+ 6D7D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6D7E 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 164+ 6D81             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6D80 CB          >                db      {b $} | END_BIT     // msb as name end
 164+ 6D81             >
 164+ 6D81 71 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6D83             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6D83 CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6D86             >
 164+ 6D86             >
 164+ 6D86             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6D86             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6D86             >
 164+ 6D86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6D86 1E          >                db      30
 165+ 6D87                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 165+ 6D87             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 165+ 6D87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6D87             >
 165+ 6D87             >                // dummy db directives used to calculate length of namec
 165+ 6D87 3E 49 4E    >                db      ">IN"
 165+ 6D8A             >len_NFA         defl    $ - temp_NFA
 165+ 6D8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6D87             >
 165+ 6D87 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6D88 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 165+ 6D8B             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6D8A CE          >                db      {b $} | END_BIT     // msb as name end
 165+ 6D8B             >
 165+ 6D8B 7D 6D       >                dw      last_NFA            // Link to previous definition Name
 165+ 6D8D             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6D8D CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6D90             >
 165+ 6D90             >
 165+ 6D90             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6D90             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6D90             >
 165+ 6D90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6D90 20          >                db      32
 166+ 6D91                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 166+ 6D91             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 166+ 6D91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6D91             >
 166+ 6D91             >                // dummy db directives used to calculate length of namec
 166+ 6D91 4F 55 54    >                db      "OUT"
 166+ 6D94             >len_NFA         defl    $ - temp_NFA
 166+ 6D94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6D91             >
 166+ 6D91 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6D92 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 166+ 6D95             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6D94 D4          >                db      {b $} | END_BIT     // msb as name end
 166+ 6D95             >
 166+ 6D95 87 6D       >                dw      last_NFA            // Link to previous definition Name
 166+ 6D97             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6D97 CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6D9A             >
 166+ 6D9A             >
 166+ 6D9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6D9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6D9A             >
 166+ 6D9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6D9A 22          >                db      34
 167+ 6D9B                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 167+ 6D9B             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 167+ 6D9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6D9B             >
 167+ 6D9B             >                // dummy db directives used to calculate length of namec
 167+ 6D9B 53 43 52    >                db      "SCR"
 167+ 6D9E             >len_NFA         defl    $ - temp_NFA
 167+ 6D9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6D9B             >
 167+ 6D9B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6D9C 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 167+ 6D9F             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6D9E D2          >                db      {b $} | END_BIT     // msb as name end
 167+ 6D9F             >
 167+ 6D9F 91 6D       >                dw      last_NFA            // Link to previous definition Name
 167+ 6DA1             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6DA1 CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6DA4             >
 167+ 6DA4             >
 167+ 6DA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6DA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6DA4             >
 167+ 6DA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6DA4 24          >                db      36
 168+ 6DA5                              User_Def OFFSET     , "OFFSET"    , 38 //
 168+ 6DA5             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 168+ 6DA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6DA5             >
 168+ 6DA5             >                // dummy db directives used to calculate length of namec
 168+ 6DA5 4F 46 46 53 >                db      "OFFSET"
 168+ 6DA9 45 54       >
 168+ 6DAB             >len_NFA         defl    $ - temp_NFA
 168+ 6DAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6DA5             >
 168+ 6DA5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6DA6 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 168+ 6DAA 45 54       >
 168+ 6DAC             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6DAB D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6DAC             >
 168+ 6DAC 9B 6D       >                dw      last_NFA            // Link to previous definition Name
 168+ 6DAE             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6DAE CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6DB1             >
 168+ 6DB1             >
 168+ 6DB1             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6DB1             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6DB1             >
 168+ 6DB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6DB1 26          >                db      38
 169+ 6DB2                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 169+ 6DB2             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 169+ 6DB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6DB2             >
 169+ 6DB2             >                // dummy db directives used to calculate length of namec
 169+ 6DB2 43 4F 4E 54 >                db      "CONTEXT"
 169+ 6DB6 45 58 54    >
 169+ 6DB9             >len_NFA         defl    $ - temp_NFA
 169+ 6DB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6DB2             >
 169+ 6DB2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6DB3 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 169+ 6DB7 45 58 54    >
 169+ 6DBA             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6DB9 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6DBA             >
 169+ 6DBA A5 6D       >                dw      last_NFA            // Link to previous definition Name
 169+ 6DBC             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6DBC CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6DBF             >
 169+ 6DBF             >
 169+ 6DBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6DBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6DBF             >
 169+ 6DBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6DBF 28          >                db      40
 170+ 6DC0                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 170+ 6DC0             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 170+ 6DC0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6DC0             >
 170+ 6DC0             >                // dummy db directives used to calculate length of namec
 170+ 6DC0 43 55 52 52 >                db      "CURRENT"
 170+ 6DC4 45 4E 54    >
 170+ 6DC7             >len_NFA         defl    $ - temp_NFA
 170+ 6DC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6DC0             >
 170+ 6DC0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6DC1 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 170+ 6DC5 45 4E 54    >
 170+ 6DC8             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6DC7 D4          >                db      {b $} | END_BIT     // msb as name end
 170+ 6DC8             >
 170+ 6DC8 B2 6D       >                dw      last_NFA            // Link to previous definition Name
 170+ 6DCA             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6DCA CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6DCD             >
 170+ 6DCD             >
 170+ 6DCD             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6DCD             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6DCD             >
 170+ 6DCD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6DCD 2A          >                db      42
 171+ 6DCE                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 171+ 6DCE             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 171+ 6DCE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6DCE             >
 171+ 6DCE             >                // dummy db directives used to calculate length of namec
 171+ 6DCE 53 54 41 54 >                db      "STATE"
 171+ 6DD2 45          >
 171+ 6DD3             >len_NFA         defl    $ - temp_NFA
 171+ 6DD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6DCE             >
 171+ 6DCE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6DCF 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 171+ 6DD3 45          >
 171+ 6DD4             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6DD3 C5          >                db      {b $} | END_BIT     // msb as name end
 171+ 6DD4             >
 171+ 6DD4 C0 6D       >                dw      last_NFA            // Link to previous definition Name
 171+ 6DD6             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6DD6 CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6DD9             >
 171+ 6DD9             >
 171+ 6DD9             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6DD9             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6DD9             >
 171+ 6DD9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6DD9 2C          >                db      44
 172+ 6DDA                              User_Def BASE       , "BASE"      , 46 //
 172+ 6DDA             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 172+ 6DDA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6DDA             >
 172+ 6DDA             >                // dummy db directives used to calculate length of namec
 172+ 6DDA 42 41 53 45 >                db      "BASE"
 172+ 6DDE             >len_NFA         defl    $ - temp_NFA
 172+ 6DDE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6DDA             >
 172+ 6DDA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6DDB 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 172+ 6DDF             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6DDE C5          >                db      {b $} | END_BIT     // msb as name end
 172+ 6DDF             >
 172+ 6DDF CE 6D       >                dw      last_NFA            // Link to previous definition Name
 172+ 6DE1             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6DE1 CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6DE4             >
 172+ 6DE4             >
 172+ 6DE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6DE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6DE4             >
 172+ 6DE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6DE4 2E          >                db      46
 173+ 6DE5                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 173+ 6DE5             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 173+ 6DE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6DE5             >
 173+ 6DE5             >                // dummy db directives used to calculate length of namec
 173+ 6DE5 44 50 4C    >                db      "DPL"
 173+ 6DE8             >len_NFA         defl    $ - temp_NFA
 173+ 6DE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6DE5             >
 173+ 6DE5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6DE6 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 173+ 6DE9             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6DE8 CC          >                db      {b $} | END_BIT     // msb as name end
 173+ 6DE9             >
 173+ 6DE9 DA 6D       >                dw      last_NFA            // Link to previous definition Name
 173+ 6DEB             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6DEB CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6DEE             >
 173+ 6DEE             >
 173+ 6DEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6DEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6DEE             >
 173+ 6DEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6DEE 30          >                db      48
 174+ 6DEF                              User_Def FLD        , "FLD"       , 50 // output field width
 174+ 6DEF             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 174+ 6DEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6DEF             >
 174+ 6DEF             >                // dummy db directives used to calculate length of namec
 174+ 6DEF 46 4C 44    >                db      "FLD"
 174+ 6DF2             >len_NFA         defl    $ - temp_NFA
 174+ 6DF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6DEF             >
 174+ 6DEF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6DF0 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 174+ 6DF3             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6DF2 C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6DF3             >
 174+ 6DF3 E5 6D       >                dw      last_NFA            // Link to previous definition Name
 174+ 6DF5             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6DF5 CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6DF8             >
 174+ 6DF8             >
 174+ 6DF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6DF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6DF8             >
 174+ 6DF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6DF8 32          >                db      50
 175+ 6DF9                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 175+ 6DF9             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 175+ 6DF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6DF9             >
 175+ 6DF9             >                // dummy db directives used to calculate length of namec
 175+ 6DF9 43 53 50    >                db      "CSP"
 175+ 6DFC             >len_NFA         defl    $ - temp_NFA
 175+ 6DFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6DF9             >
 175+ 6DF9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6DFA 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 175+ 6DFD             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6DFC D0          >                db      {b $} | END_BIT     // msb as name end
 175+ 6DFD             >
 175+ 6DFD EF 6D       >                dw      last_NFA            // Link to previous definition Name
 175+ 6DFF             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6DFF CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6E02             >
 175+ 6E02             >
 175+ 6E02             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6E02             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6E02             >
 175+ 6E02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6E02 34          >                db      52
 176+ 6E03                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 176+ 6E03             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 176+ 6E03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6E03             >
 176+ 6E03             >                // dummy db directives used to calculate length of namec
 176+ 6E03 52 23       >                db      "R#"
 176+ 6E05             >len_NFA         defl    $ - temp_NFA
 176+ 6E05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6E03             >
 176+ 6E03 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6E04 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 176+ 6E06             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6E05 A3          >                db      {b $} | END_BIT     // msb as name end
 176+ 6E06             >
 176+ 6E06 F9 6D       >                dw      last_NFA            // Link to previous definition Name
 176+ 6E08             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6E08 CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6E0B             >
 176+ 6E0B             >
 176+ 6E0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6E0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6E0B             >
 176+ 6E0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6E0B 36          >                db      54
 177+ 6E0C                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 177+ 6E0C             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 177+ 6E0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6E0C             >
 177+ 6E0C             >                // dummy db directives used to calculate length of namec
 177+ 6E0C 48 4C 44    >                db      "HLD"
 177+ 6E0F             >len_NFA         defl    $ - temp_NFA
 177+ 6E0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6E0C             >
 177+ 6E0C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6E0D 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 177+ 6E10             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6E0F C4          >                db      {b $} | END_BIT     // msb as name end
 177+ 6E10             >
 177+ 6E10 03 6E       >                dw      last_NFA            // Link to previous definition Name
 177+ 6E12             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6E12 CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6E15             >
 177+ 6E15             >
 177+ 6E15             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6E15             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6E15             >
 177+ 6E15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6E15 38          >                db      56
 178+ 6E16                              User_Def USE        , "USE"       , 58 // address of last used block
 178+ 6E16             >                New_Def  USE, "USE", User_Ptr, is_normal
 178+ 6E16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6E16             >
 178+ 6E16             >                // dummy db directives used to calculate length of namec
 178+ 6E16 55 53 45    >                db      "USE"
 178+ 6E19             >len_NFA         defl    $ - temp_NFA
 178+ 6E19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6E16             >
 178+ 6E16 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6E17 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 178+ 6E1A             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6E19 C5          >                db      {b $} | END_BIT     // msb as name end
 178+ 6E1A             >
 178+ 6E1A 0C 6E       >                dw      last_NFA            // Link to previous definition Name
 178+ 6E1C             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6E1C CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6E1F             >
 178+ 6E1F             >
 178+ 6E1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6E1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6E1F             >
 178+ 6E1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6E1F 3A          >                db      58
 179+ 6E20                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 179+ 6E20             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 179+ 6E20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6E20             >
 179+ 6E20             >                // dummy db directives used to calculate length of namec
 179+ 6E20 50 52 45 56 >                db      "PREV"
 179+ 6E24             >len_NFA         defl    $ - temp_NFA
 179+ 6E24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6E20             >
 179+ 6E20 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6E21 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 179+ 6E25             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6E24 D6          >                db      {b $} | END_BIT     // msb as name end
 179+ 6E25             >
 179+ 6E25 16 6E       >                dw      last_NFA            // Link to previous definition Name
 179+ 6E27             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6E27 CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6E2A             >
 179+ 6E2A             >
 179+ 6E2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6E2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6E2A             >
 179+ 6E2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6E2A 3C          >                db      60
 180+ 6E2B                              User_Def LP         , "LP"        , 62 // line printer (not used)
 180+ 6E2B             >                New_Def  LP, "LP", User_Ptr, is_normal
 180+ 6E2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6E2B             >
 180+ 6E2B             >                // dummy db directives used to calculate length of namec
 180+ 6E2B 4C 50       >                db      "LP"
 180+ 6E2D             >len_NFA         defl    $ - temp_NFA
 180+ 6E2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6E2B             >
 180+ 6E2B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6E2C 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 180+ 6E2E             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6E2D D0          >                db      {b $} | END_BIT     // msb as name end
 180+ 6E2E             >
 180+ 6E2E 20 6E       >                dw      last_NFA            // Link to previous definition Name
 180+ 6E30             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6E30 CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6E33             >
 180+ 6E33             >
 180+ 6E33             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6E33             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6E33             >
 180+ 6E33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6E33 3E          >                db      62
 181+ 6E34                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 181+ 6E34             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 181+ 6E34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6E34             >
 181+ 6E34             >                // dummy db directives used to calculate length of namec
 181+ 6E34 50 4C 41 43 >                db      "PLACE"
 181+ 6E38 45          >
 181+ 6E39             >len_NFA         defl    $ - temp_NFA
 181+ 6E39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6E34             >
 181+ 6E34 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6E35 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 181+ 6E39 45          >
 181+ 6E3A             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6E39 C5          >                db      {b $} | END_BIT     // msb as name end
 181+ 6E3A             >
 181+ 6E3A 2B 6E       >                dw      last_NFA            // Link to previous definition Name
 181+ 6E3C             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6E3C CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6E3F             >
 181+ 6E3F             >
 181+ 6E3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6E3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6E3F             >
 181+ 6E3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6E3F 40          >                db      64
 182+ 6E40                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 182+ 6E40             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 182+ 6E40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6E40             >
 182+ 6E40             >                // dummy db directives used to calculate length of namec
 182+ 6E40 53 4F 55 52 >                db      "SOURCE-ID"
 182+ 6E44 43 45 2D 49 >
 182+ 6E48 44          >
 182+ 6E49             >len_NFA         defl    $ - temp_NFA
 182+ 6E49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6E40             >
 182+ 6E40 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6E41 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 182+ 6E45 43 45 2D 49 >
 182+ 6E49 44          >
 182+ 6E4A             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6E49 C4          >                db      {b $} | END_BIT     // msb as name end
 182+ 6E4A             >
 182+ 6E4A 34 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6E4C             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6E4C CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6E4F             >
 182+ 6E4F             >
 182+ 6E4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6E4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6E4F             >
 182+ 6E4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6E4F 42          >                db      66
 183+ 6E50                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 183+ 6E50             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 183+ 6E50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6E50             >
 183+ 6E50             >                // dummy db directives used to calculate length of namec
 183+ 6E50 53 50 41 4E >                db      "SPAN"
 183+ 6E54             >len_NFA         defl    $ - temp_NFA
 183+ 6E54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6E50             >
 183+ 6E50 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6E51 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 183+ 6E55             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6E54 CE          >                db      {b $} | END_BIT     // msb as name end
 183+ 6E55             >
 183+ 6E55 40 6E       >                dw      last_NFA            // Link to previous definition Name
 183+ 6E57             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6E57 CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6E5A             >
 183+ 6E5A             >
 183+ 6E5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6E5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6E5A             >
 183+ 6E5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6E5A 44          >                db      68
 184+ 6E5B                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 184+ 6E5B             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 184+ 6E5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6E5B             >
 184+ 6E5B             >                // dummy db directives used to calculate length of namec
 184+ 6E5B 48 41 4E 44 >                db      "HANDLER"
 184+ 6E5F 4C 45 52    >
 184+ 6E62             >len_NFA         defl    $ - temp_NFA
 184+ 6E62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6E5B             >
 184+ 6E5B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6E5C 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 184+ 6E60 4C 45 52    >
 184+ 6E63             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6E62 D2          >                db      {b $} | END_BIT     // msb as name end
 184+ 6E63             >
 184+ 6E63 50 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6E65             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6E65 CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6E68             >
 184+ 6E68             >
 184+ 6E68             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6E68             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6E68             >
 184+ 6E68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6E68 46          >                db      70
 185+ 6E69                              User_Def HP         , "HP"        , 72 // heap-pointer address
 185+ 6E69             >                New_Def  HP, "HP", User_Ptr, is_normal
 185+ 6E69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ 6E69             >
 185+ 6E69             >                // dummy db directives used to calculate length of namec
 185+ 6E69 48 50       >                db      "HP"
 185+ 6E6B             >len_NFA         defl    $ - temp_NFA
 185+ 6E6B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ 6E69             >
 185+ 6E69 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ 6E6A 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 185+ 6E6C             >                org     $-1                 // alter last byte of Name just above to set
 185+ 6E6B D0          >                db      {b $} | END_BIT     // msb as name end
 185+ 6E6C             >
 185+ 6E6C 5B 6E       >                dw      last_NFA            // Link to previous definition Name
 185+ 6E6E             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6E6E CD 60 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6E71             >
 185+ 6E71             >
 185+ 6E71             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6E71             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6E71             >
 185+ 6E71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6E71 48          >                db      72
 186+ 6E72
 187+ 6E72              //  ______________________________________________________________________
 188+ 6E72              //
 189+ 6E72              // here         -- a
 190+ 6E72                              Colon_Def HERE, "HERE", is_normal
 190+ 6E72             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 190+ 6E72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 6E72             >
 190+ 6E72             >                // dummy db directives used to calculate length of namec
 190+ 6E72 48 45 52 45 >                db      "HERE"
 190+ 6E76             >len_NFA         defl    $ - temp_NFA
 190+ 6E76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 6E72             >
 190+ 6E72 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 6E73 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 190+ 6E77             >                org     $-1                 // alter last byte of Name just above to set
 190+ 6E76 C5          >                db      {b $} | END_BIT     // msb as name end
 190+ 6E77             >
 190+ 6E77 69 6E       >                dw      last_NFA            // Link to previous definition Name
 190+ 6E79             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 6E79 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 190+ 6E7C             >
 190+ 6E7C             >
 190+ 6E7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 6E7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 6E7C             >
 190+ 6E7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 6E7C 3C 6D 1E 6B                  dw      DP, FETCH               // dp @
 192+ 6E80 3A 69                        dw      EXIT                    // ;
 193+ 6E82
 194+ 6E82              //  ______________________________________________________________________
 195+ 6E82              //
 196+ 6E82              // allot        n --
 197+ 6E82                              Colon_Def ALLOT, "ALLOT", is_normal
 197+ 6E82             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 197+ 6E82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 6E82             >
 197+ 6E82             >                // dummy db directives used to calculate length of namec
 197+ 6E82 41 4C 4C 4F >                db      "ALLOT"
 197+ 6E86 54          >
 197+ 6E87             >len_NFA         defl    $ - temp_NFA
 197+ 6E87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 6E82             >
 197+ 6E82 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 6E83 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 197+ 6E87 54          >
 197+ 6E88             >                org     $-1                 // alter last byte of Name just above to set
 197+ 6E87 D4          >                db      {b $} | END_BIT     // msb as name end
 197+ 6E88             >
 197+ 6E88 72 6E       >                dw      last_NFA            // Link to previous definition Name
 197+ 6E8A             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 6E8A CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 6E8D             >
 197+ 6E8D             >
 197+ 6E8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 6E8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 6E8D             >
 197+ 6E8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 6E8D 3C 6D FF 6A                  dw      DP,  PLUSSTORE          // dp +!
 199+ 6E91 3A 69                        dw      EXIT                    // ;
 200+ 6E93
 201+ 6E93              //  ______________________________________________________________________
 202+ 6E93              //
 203+ 6E93              // comma        n --
 204+ 6E93                              Colon_Def COMMA, ",", is_normal
 204+ 6E93             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 204+ 6E93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204+ 6E93             >
 204+ 6E93             >                // dummy db directives used to calculate length of namec
 204+ 6E93 2C          >                db      ","
 204+ 6E94             >len_NFA         defl    $ - temp_NFA
 204+ 6E94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204+ 6E93             >
 204+ 6E93 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204+ 6E94 2C          >                db      ","               // name string in 7-bit ascii, but
 204+ 6E95             >                org     $-1                 // alter last byte of Name just above to set
 204+ 6E94 AC          >                db      {b $} | END_BIT     // msb as name end
 204+ 6E95             >
 204+ 6E95 82 6E       >                dw      last_NFA            // Link to previous definition Name
 204+ 6E97             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 204+ 6E97 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 204+ 6E9A             >
 204+ 6E9A             >
 204+ 6E9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 204+ 6E9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 204+ 6E9A             >
 204+ 6E9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205+ 6E9A 79 6E 29 6B                  dw      HERE, STORE             // here !
 206+ 6E9E 81 6C 8A 6E                  dw      TWO, ALLOT              // 2 allot
 207+ 6EA2 3A 69                        dw      EXIT                    // ;
 208+ 6EA4
 209+ 6EA4              //  ______________________________________________________________________
 210+ 6EA4              //
 211+ 6EA4              // ccomma       c --
 212+ 6EA4                              Colon_Def CCOMMA, "C,", is_normal
 212+ 6EA4             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 212+ 6EA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 6EA4             >
 212+ 6EA4             >                // dummy db directives used to calculate length of namec
 212+ 6EA4 43 2C       >                db      "C,"
 212+ 6EA6             >len_NFA         defl    $ - temp_NFA
 212+ 6EA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 6EA4             >
 212+ 6EA4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 6EA5 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 212+ 6EA7             >                org     $-1                 // alter last byte of Name just above to set
 212+ 6EA6 AC          >                db      {b $} | END_BIT     // msb as name end
 212+ 6EA7             >
 212+ 6EA7 93 6E       >                dw      last_NFA            // Link to previous definition Name
 212+ 6EA9             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 6EA9 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 212+ 6EAC             >
 212+ 6EAC             >
 212+ 6EAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 6EAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 6EAC             >
 212+ 6EAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 6EAC 79 6E 41 6B                  dw      HERE, CSTORE            // here c!
 214+ 6EB0 78 6C 8A 6E                  dw      ONE, ALLOT              // 1 allot
 215+ 6EB4 3A 69                        dw      EXIT                    // ;
 216+ 6EB6
 217+ 6EB6              //  ______________________________________________________________________
 218+ 6EB6              //
 219+ 6EB6              // s>d          n -- d
 220+ 6EB6              // converts a single precision integer in a double precision
 221+ 6EB6                              New_Def S_TO_D, "S>D", is_code, is_normal
 221+ 6EB6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 221+ 6EB6             >
 221+ 6EB6             >                // dummy db directives used to calculate length of namec
 221+ 6EB6 53 3E 44    >                db      "S>D"
 221+ 6EB9             >len_NFA         defl    $ - temp_NFA
 221+ 6EB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 221+ 6EB6             >
 221+ 6EB6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 221+ 6EB7 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 221+ 6EBA             >                org     $-1                 // alter last byte of Name just above to set
 221+ 6EB9 C4          >                db      {b $} | END_BIT     // msb as name end
 221+ 6EBA             >
 221+ 6EBA A4 6E       >                dw      last_NFA            // Link to previous definition Name
 221+ 6EBC             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 221+ 6EBC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 221+ 6EBC ~           >
 221+ 6EBC ~           >
 221+ 6EBC             >                endif           ; ok        // for other definitions it "points" the correct handler
 221+ 6EBC             >                // Use of "; ok" to suppress "warning[fwdref]"
 221+ 6EBC             >
 221+ 6EBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 222+ 6EBC D1                           pop     de
 223+ 6EBD 21 00 00                     ld      hl, 0
 224+ 6EC0 7A                           ld      a, d
 225+ 6EC1 E6 80                        and     $80
 226+ 6EC3 28 01                        jr      z, S_to_D_Skip
 227+ 6EC5 2B                           dec     hl                  // $FFFF
 228+ 6EC6              S_to_D_Skip:
 229+ 6EC6 D5                           push    de
 230+ 6EC7 E5                           push    hl
 231+ 6EC8                              next
 231+ 6EC8 DD E9       >                jp      (ix)
 232+ 6ECA
 233+ 6ECA              //  ______________________________________________________________________
 234+ 6ECA              //
 235+ 6ECA              // -            n1 n2 -- n3
 236+ 6ECA              // subtraction
 237+ 6ECA                              New_Def SUBTRACT, "-", is_code, is_normal
 237+ 6ECA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 237+ 6ECA             >
 237+ 6ECA             >                // dummy db directives used to calculate length of namec
 237+ 6ECA 2D          >                db      "-"
 237+ 6ECB             >len_NFA         defl    $ - temp_NFA
 237+ 6ECB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 237+ 6ECA             >
 237+ 6ECA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 237+ 6ECB 2D          >                db      "-"               // name string in 7-bit ascii, but
 237+ 6ECC             >                org     $-1                 // alter last byte of Name just above to set
 237+ 6ECB AD          >                db      {b $} | END_BIT     // msb as name end
 237+ 6ECC             >
 237+ 6ECC B6 6E       >                dw      last_NFA            // Link to previous definition Name
 237+ 6ECE             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 237+ 6ECE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 237+ 6ECE ~           >
 237+ 6ECE ~           >
 237+ 6ECE             >                endif           ; ok        // for other definitions it "points" the correct handler
 237+ 6ECE             >                // Use of "; ok" to suppress "warning[fwdref]"
 237+ 6ECE             >
 237+ 6ECE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 238+ 6ECE D1                           pop     de
 239+ 6ECF E1                           pop     hl
 240+ 6ED0 A7                           and     a
 241+ 6ED1 ED 52                        sbc     hl, de
 242+ 6ED3
 243+ 6ED3                              psh1
 243+ 6ED3 E5          >                push    hl
 243+ 6ED4 DD E9       >                jp      (ix)
 244+ 6ED6
 245+ 6ED6              //  ______________________________________________________________________
 246+ 6ED6              //
 247+ 6ED6              // =            n1 n2 -- n3
 248+ 6ED6              // equals
 249+ 6ED6                              Colon_Def EQUALS, "=", is_normal
 249+ 6ED6             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 249+ 6ED6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 6ED6             >
 249+ 6ED6             >                // dummy db directives used to calculate length of namec
 249+ 6ED6 3D          >                db      "="
 249+ 6ED7             >len_NFA         defl    $ - temp_NFA
 249+ 6ED7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 6ED6             >
 249+ 6ED6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 6ED7 3D          >                db      "="               // name string in 7-bit ascii, but
 249+ 6ED8             >                org     $-1                 // alter last byte of Name just above to set
 249+ 6ED7 BD          >                db      {b $} | END_BIT     // msb as name end
 249+ 6ED8             >
 249+ 6ED8 CA 6E       >                dw      last_NFA            // Link to previous definition Name
 249+ 6EDA             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 6EDA CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 249+ 6EDD             >
 249+ 6EDD             >
 249+ 6EDD             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 6EDD             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 6EDD             >
 249+ 6EDD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 250+ 6EDD CE 6E 97 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 251+ 6EE1 3A 69                        dw      EXIT                    // ;
 252+ 6EE3
 253+ 6EE3              //  ______________________________________________________________________
 254+ 6EE3              //
 255+ 6EE3              // u<           u1 u2 -- u3
 256+ 6EE3              // unsigned less-than
 257+ 6EE3                              New_Def ULESS, "U<", is_code, is_normal
 257+ 6EE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 257+ 6EE3             >
 257+ 6EE3             >                // dummy db directives used to calculate length of namec
 257+ 6EE3 55 3C       >                db      "U<"
 257+ 6EE5             >len_NFA         defl    $ - temp_NFA
 257+ 6EE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 257+ 6EE3             >
 257+ 6EE3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 257+ 6EE4 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 257+ 6EE6             >                org     $-1                 // alter last byte of Name just above to set
 257+ 6EE5 BC          >                db      {b $} | END_BIT     // msb as name end
 257+ 6EE6             >
 257+ 6EE6 D6 6E       >                dw      last_NFA            // Link to previous definition Name
 257+ 6EE8             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 257+ 6EE8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 257+ 6EE8 ~           >
 257+ 6EE8 ~           >
 257+ 6EE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 257+ 6EE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 257+ 6EE8             >
 257+ 6EE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 258+ 6EE8 D1                           pop     de
 259+ 6EE9 E1                           pop     hl
 260+ 6EEA A7                           and     a
 261+ 6EEB ED 52                        sbc     hl, de
 262+ 6EED 21 FF FF                     ld      hl, -1
 263+ 6EF0 38 01                        jr      c, ULess_Skip
 264+ 6EF2 23                               inc     hl
 265+ 6EF3              ULess_Skip:
 266+ 6EF3
 267+ 6EF3                              psh1
 267+ 6EF3 E5          >                push    hl
 267+ 6EF4 DD E9       >                jp      (ix)
 268+ 6EF6
 269+ 6EF6              //  ______________________________________________________________________
 270+ 6EF6              //
 271+ 6EF6              // <           n1 n2 -- n3
 272+ 6EF6              // less-than
 273+ 6EF6                              New_Def LESS, "<", is_code, is_normal
 273+ 6EF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 273+ 6EF6             >
 273+ 6EF6             >                // dummy db directives used to calculate length of namec
 273+ 6EF6 3C          >                db      "<"
 273+ 6EF7             >len_NFA         defl    $ - temp_NFA
 273+ 6EF7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 273+ 6EF6             >
 273+ 6EF6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 273+ 6EF7 3C          >                db      "<"               // name string in 7-bit ascii, but
 273+ 6EF8             >                org     $-1                 // alter last byte of Name just above to set
 273+ 6EF7 BC          >                db      {b $} | END_BIT     // msb as name end
 273+ 6EF8             >
 273+ 6EF8 E3 6E       >                dw      last_NFA            // Link to previous definition Name
 273+ 6EFA             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 273+ 6EFA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 273+ 6EFA ~           >
 273+ 6EFA ~           >
 273+ 6EFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 273+ 6EFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 273+ 6EFA             >
 273+ 6EFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 274+ 6EFA D1                           pop     de
 275+ 6EFB E1                           pop     hl
 276+ 6EFC 7C                           ld      a, h
 277+ 6EFD EE 80                        xor     $80
 278+ 6EFF 67                           ld      h, a
 279+ 6F00 7A                           ld      a, d
 280+ 6F01 EE 80                        xor     $80
 281+ 6F03 57                           ld      d, a
 282+ 6F04 A7                           and     a
 283+ 6F05 ED 52                        sbc     hl, de
 284+ 6F07 21 FF FF                     ld      hl, -1
 285+ 6F0A 38 01                        jr      c, Less_Skip
 286+ 6F0C 23                               inc     hl
 287+ 6F0D              Less_Skip:
 288+ 6F0D
 289+ 6F0D                              psh1
 289+ 6F0D E5          >                push    hl
 289+ 6F0E DD E9       >                jp      (ix)
 290+ 6F10
 291+ 6F10              //  ______________________________________________________________________
 292+ 6F10              //
 293+ 6F10              // >            n1 n2 -- n3
 294+ 6F10              // greater than
 295+ 6F10                              Colon_Def GREATER, ">", is_normal
 295+ 6F10             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 295+ 6F10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 295+ 6F10             >
 295+ 6F10             >                // dummy db directives used to calculate length of namec
 295+ 6F10 3E          >                db      ">"
 295+ 6F11             >len_NFA         defl    $ - temp_NFA
 295+ 6F11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 295+ 6F10             >
 295+ 6F10 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 295+ 6F11 3E          >                db      ">"               // name string in 7-bit ascii, but
 295+ 6F12             >                org     $-1                 // alter last byte of Name just above to set
 295+ 6F11 BE          >                db      {b $} | END_BIT     // msb as name end
 295+ 6F12             >
 295+ 6F12 F6 6E       >                dw      last_NFA            // Link to previous definition Name
 295+ 6F14             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 295+ 6F14 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 295+ 6F17             >
 295+ 6F17             >
 295+ 6F17             >                endif           ; ok        // for other definitions it "points" the correct handler
 295+ 6F17             >                // Use of "; ok" to suppress "warning[fwdref]"
 295+ 6F17             >
 295+ 6F17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 296+ 6F17 92 6A FA 6E                  dw      SWAP, LESS              // swap <
 297+ 6F1B 3A 69                        dw      EXIT                    // ;
 298+ 6F1D              //  ______________________________________________________________________
 299+ 6F1D              //
 300+ 6F1D              // min          n1 n2 -- n3
 301+ 6F1D              // minimum between n1 and n2
 302+ 6F1D                              Colon_Def MIN, "MIN" , is_normal
 302+ 6F1D             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 302+ 6F1D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 302+ 6F1D             >
 302+ 6F1D             >                // dummy db directives used to calculate length of namec
 302+ 6F1D 4D 49 4E    >                db      "MIN"
 302+ 6F20             >len_NFA         defl    $ - temp_NFA
 302+ 6F20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 302+ 6F1D             >
 302+ 6F1D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 302+ 6F1E 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 302+ 6F21             >                org     $-1                 // alter last byte of Name just above to set
 302+ 6F20 CE          >                db      {b $} | END_BIT     // msb as name end
 302+ 6F21             >
 302+ 6F21 10 6F       >                dw      last_NFA            // Link to previous definition Name
 302+ 6F23             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 302+ 6F23 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 302+ 6F26             >
 302+ 6F26             >
 302+ 6F26             >                endif           ; ok        // for other definitions it "points" the correct handler
 302+ 6F26             >                // Use of "; ok" to suppress "warning[fwdref]"
 302+ 6F26             >
 302+ 6F26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 303+ 6F26 F2 6A                        dw      TWO_DUP                 // 2dup
 304+ 6F28 14 6F                        dw      GREATER                 // >
 305+ 6F2A D8 63                        dw      ZBRANCH
 306+ 6F2C 04 00                        dw      Min_Skip - $   // if
 307+ 6F2E 92 6A                        dw          SWAP                //      swap
 308+ 6F30              Min_Skip:                                       // endif
 309+ 6F30 70 6A                        dw      DROP                    // drop
 310+ 6F32 3A 69                        dw      EXIT                    // ;
 311+ 6F34
 312+ 6F34              //  ______________________________________________________________________
 313+ 6F34              //
 314+ 6F34              // max          n1 n2 -- n3
 315+ 6F34              // maximum between n1 and n2
 316+ 6F34                              Colon_Def MAX, "MAX", is_normal
 316+ 6F34             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 316+ 6F34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 6F34             >
 316+ 6F34             >                // dummy db directives used to calculate length of namec
 316+ 6F34 4D 41 58    >                db      "MAX"
 316+ 6F37             >len_NFA         defl    $ - temp_NFA
 316+ 6F37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 6F34             >
 316+ 6F34 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 6F35 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 316+ 6F38             >                org     $-1                 // alter last byte of Name just above to set
 316+ 6F37 D8          >                db      {b $} | END_BIT     // msb as name end
 316+ 6F38             >
 316+ 6F38 1D 6F       >                dw      last_NFA            // Link to previous definition Name
 316+ 6F3A             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 6F3A CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 316+ 6F3D             >
 316+ 6F3D             >
 316+ 6F3D             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 6F3D             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 6F3D             >
 316+ 6F3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 6F3D F2 6A                        dw      TWO_DUP                 // 2dup
 318+ 6F3F FA 6E                        dw      LESS                    // <
 319+ 6F41 D8 63                        dw      ZBRANCH
 320+ 6F43 04 00                        dw      Max_Skip - $   // if
 321+ 6F45 92 6A                        dw          SWAP                //      swap
 322+ 6F47              Max_Skip:                                       // endif
 323+ 6F47 70 6A                        dw      DROP                    // drop
 324+ 6F49 3A 69                        dw      EXIT                    // ;
 325+ 6F4B
 326+ 6F4B              //  ______________________________________________________________________
 327+ 6F4B              //
 328+ 6F4B              // ?dup         n -- 0 | n n
 329+ 6F4B              // duplicate if not zero
 330+ 6F4B                              New_Def QDUP, "?DUP", is_code, is_normal
 330+ 6F4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 330+ 6F4B             >
 330+ 6F4B             >                // dummy db directives used to calculate length of namec
 330+ 6F4B 3F 44 55 50 >                db      "?DUP"
 330+ 6F4F             >len_NFA         defl    $ - temp_NFA
 330+ 6F4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 330+ 6F4B             >
 330+ 6F4B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 330+ 6F4C 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 330+ 6F50             >                org     $-1                 // alter last byte of Name just above to set
 330+ 6F4F D0          >                db      {b $} | END_BIT     // msb as name end
 330+ 6F50             >
 330+ 6F50 34 6F       >                dw      last_NFA            // Link to previous definition Name
 330+ 6F52             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 330+ 6F52 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 330+ 6F52 ~           >
 330+ 6F52 ~           >
 330+ 6F52             >                endif           ; ok        // for other definitions it "points" the correct handler
 330+ 6F52             >                // Use of "; ok" to suppress "warning[fwdref]"
 330+ 6F52             >
 330+ 6F52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 331+ 6F52              QDup_Ptr:
 332+ 6F52 E1                           pop     hl
 333+ 6F53 7C                           ld      a, h
 334+ 6F54 B5                           or      l
 335+ 6F55 28 01                        jr      z, QDup_Skip
 336+ 6F57 E5                               push    hl
 337+ 6F58              QDup_Skip:
 338+ 6F58                              psh1
 338+ 6F58 E5          >                push    hl
 338+ 6F59 DD E9       >                jp      (ix)
 339+ 6F5B
 340+ 6F5B              //  ______________________________________________________________________
 341+ 6F5B              //
 342+ 6F5B              // -dup         n -- 0 | n n
 343+ 6F5B              // duplicate if not zero
 344+ 6F5B                              New_Def LDUP, "-DUP", is_code, is_normal
 344+ 6F5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ 6F5B             >
 344+ 6F5B             >                // dummy db directives used to calculate length of namec
 344+ 6F5B 2D 44 55 50 >                db      "-DUP"
 344+ 6F5F             >len_NFA         defl    $ - temp_NFA
 344+ 6F5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ 6F5B             >
 344+ 6F5B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ 6F5C 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 344+ 6F60             >                org     $-1                 // alter last byte of Name just above to set
 344+ 6F5F D0          >                db      {b $} | END_BIT     // msb as name end
 344+ 6F60             >
 344+ 6F60 4B 6F       >                dw      last_NFA            // Link to previous definition Name
 344+ 6F62             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 6F62 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 344+ 6F62 ~           >
 344+ 6F62 ~           >
 344+ 6F62             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 6F62             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 6F62             >
 344+ 6F62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 6F62 C3 52 6F                     jp      QDup_Ptr
 346+ 6F65
 347+ 6F65              //  ______________________________________________________________________
 348+ 6F65              //
 349+ 6F65              // emit         c --
 350+ 6F65                              Colon_Def EMIT, "EMIT", is_normal
 350+ 6F65             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 350+ 6F65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 350+ 6F65             >
 350+ 6F65             >                // dummy db directives used to calculate length of namec
 350+ 6F65 45 4D 49 54 >                db      "EMIT"
 350+ 6F69             >len_NFA         defl    $ - temp_NFA
 350+ 6F69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 350+ 6F65             >
 350+ 6F65 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 350+ 6F66 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 350+ 6F6A             >                org     $-1                 // alter last byte of Name just above to set
 350+ 6F69 D4          >                db      {b $} | END_BIT     // msb as name end
 350+ 6F6A             >
 350+ 6F6A 5B 6F       >                dw      last_NFA            // Link to previous definition Name
 350+ 6F6C             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 350+ 6F6C CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 350+ 6F6F             >
 350+ 6F6F             >
 350+ 6F6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 350+ 6F6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 350+ 6F6F             >
 350+ 6F6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 351+ 6F6F 07 66                        dw      C_EMIT                      // (?emit)
 352+ 6F71 52 6F                        dw      QDUP                        // ?dup
 353+ 6F73                                                                  // if
 354+ 6F73 D8 63                        dw      ZBRANCH
 355+ 6F75 0A 00                        dw      Emit_Skip - $
 356+ 6F77 D5 65                        dw          EMITC                   //      emitc
 357+ 6F79 78 6C                        dw          ONE                     //      1
 358+ 6F7B 97 6D FF 6A                  dw          OUT, PLUSSTORE        //      out +!
 359+ 6F7F              Emit_Skip:                                          // endif
 360+ 6F7F 3A 69                        dw      EXIT                        // ;
 361+ 6F81
 362+ 6F81              //  ______________________________________________________________________
 363+ 6F81              //
 364+ 6F81              // space        --
 365+ 6F81                              Colon_Def SPACE, "SPACE", is_normal
 365+ 6F81             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 365+ 6F81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 365+ 6F81             >
 365+ 6F81             >                // dummy db directives used to calculate length of namec
 365+ 6F81 53 50 41 43 >                db      "SPACE"
 365+ 6F85 45          >
 365+ 6F86             >len_NFA         defl    $ - temp_NFA
 365+ 6F86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 365+ 6F81             >
 365+ 6F81 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 365+ 6F82 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 365+ 6F86 45          >
 365+ 6F87             >                org     $-1                 // alter last byte of Name just above to set
 365+ 6F86 C5          >                db      {b $} | END_BIT     // msb as name end
 365+ 6F87             >
 365+ 6F87 65 6F       >                dw      last_NFA            // Link to previous definition Name
 365+ 6F89             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 365+ 6F89 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 365+ 6F8C             >
 365+ 6F8C             >
 365+ 6F8C             >                endif           ; ok        // for other definitions it "points" the correct handler
 365+ 6F8C             >                // Use of "; ok" to suppress "warning[fwdref]"
 365+ 6F8C             >
 365+ 6F8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 366+ 6F8C 9E 6C 6C 6F                  dw      BL, EMIT                // bl emit
 367+ 6F90 3A 69                        dw      EXIT                    // ;
 368+ 6F92
 369+ 6F92              //  ______________________________________________________________________
 370+ 6F92              //
 371+ 6F92              // traverse     a n -- a
 372+ 6F92              // A dictionary entry is structured as follows
 373+ 6F92              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 374+ 6F92              //      +1   word name, last character is toggled with $80
 375+ 6F92              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 376+ 6F92              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 377+ 6F92              // PFA: +6+n "is_code", definitions have no PFA. // +5
 378+ 6F92              //
 379+ 6F92                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 379+ 6F92             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 379+ 6F92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ 6F92             >
 379+ 6F92             >                // dummy db directives used to calculate length of namec
 379+ 6F92 54 52 41 56 >                db      "TRAVERSE"
 379+ 6F96 45 52 53 45 >
 379+ 6F9A             >len_NFA         defl    $ - temp_NFA
 379+ 6F9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ 6F92             >
 379+ 6F92 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ 6F93 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 379+ 6F97 45 52 53 45 >
 379+ 6F9B             >                org     $-1                 // alter last byte of Name just above to set
 379+ 6F9A C5          >                db      {b $} | END_BIT     // msb as name end
 379+ 6F9B             >
 379+ 6F9B 81 6F       >                dw      last_NFA            // Link to previous definition Name
 379+ 6F9D             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 6F9D CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 379+ 6FA0             >
 379+ 6FA0             >
 379+ 6FA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 6FA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 6FA0             >
 379+ 6FA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 6FA0 92 6A                        dw      SWAP                    // swap
 381+ 6FA2              Traverse_Begin:                                 // begin
 382+ 6FA2 62 6A D5 69                  dw          OVER, PLUS          //      over +
 383+ 6FA6 A5 63 7F 00                  dw          LIT, 127            //      127
 384+ 6FAA 62 6A 35 6B                  dw          OVER, CFETCH        //      over @
 385+ 6FAE FA 6E                        dw          LESS                //      <
 386+ 6FB0                                                              // until
 387+ 6FB0 D8 63                        dw      ZBRANCH
 388+ 6FB2 F0 FF                        dw      Traverse_Begin - $
 389+ 6FB4 79 6A                        dw      NIP                     //  nip
 390+ 6FB6 3A 69                        dw      EXIT                    //  ;
 391+ 6FB8
 392+ 6FB8              //  ______________________________________________________________________
 393+ 6FB8              //
 394+ 6FB8              // latest       -- nfa
 395+ 6FB8                              Colon_Def LATEST, "LATEST", is_normal
 395+ 6FB8             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 395+ 6FB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 395+ 6FB8             >
 395+ 6FB8             >                // dummy db directives used to calculate length of namec
 395+ 6FB8 4C 41 54 45 >                db      "LATEST"
 395+ 6FBC 53 54       >
 395+ 6FBE             >len_NFA         defl    $ - temp_NFA
 395+ 6FBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 395+ 6FB8             >
 395+ 6FB8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 395+ 6FB9 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 395+ 6FBD 53 54       >
 395+ 6FBF             >                org     $-1                 // alter last byte of Name just above to set
 395+ 6FBE D4          >                db      {b $} | END_BIT     // msb as name end
 395+ 6FBF             >
 395+ 6FBF 92 6F       >                dw      last_NFA            // Link to previous definition Name
 395+ 6FC1             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 395+ 6FC1 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 395+ 6FC4             >
 395+ 6FC4             >
 395+ 6FC4             >                endif           ; ok        // for other definitions it "points" the correct handler
 395+ 6FC4             >                // Use of "; ok" to suppress "warning[fwdref]"
 395+ 6FC4             >
 395+ 6FC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 396+ 6FC4 CA 6D                        dw      CURRENT                 // current
 397+ 6FC6 1E 6B 1E 6B                  dw      FETCH, FETCH            // @ @
 398+ 6FCA 3A 69                        dw      EXIT                    // ;
 399+ 6FCC
 400+ 6FCC              //  ______________________________________________________________________
 401+ 6FCC              //
 402+ 6FCC              // lfa          pfa -- lfa
 403+ 6FCC                              Colon_Def LFA, "LFA", is_normal
 403+ 6FCC             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 403+ 6FCC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 403+ 6FCC             >
 403+ 6FCC             >                // dummy db directives used to calculate length of namec
 403+ 6FCC 4C 46 41    >                db      "LFA"
 403+ 6FCF             >len_NFA         defl    $ - temp_NFA
 403+ 6FCF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 403+ 6FCC             >
 403+ 6FCC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 403+ 6FCD 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 403+ 6FD0             >                org     $-1                 // alter last byte of Name just above to set
 403+ 6FCF C1          >                db      {b $} | END_BIT     // msb as name end
 403+ 6FD0             >
 403+ 6FD0 B8 6F       >                dw      last_NFA            // Link to previous definition Name
 403+ 6FD2             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 403+ 6FD2 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 403+ 6FD5             >
 403+ 6FD5             >
 403+ 6FD5             >                endif           ; ok        // for other definitions it "points" the correct handler
 403+ 6FD5             >                // Use of "; ok" to suppress "warning[fwdref]"
 403+ 6FD5             >
 403+ 6FD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 404+ 6FD5 A5 63 05 00                  dw      LIT, 5                  // cell- --> 5
 405+ 6FD9 CE 6E                        dw      SUBTRACT                // cell- --> -
 406+ 6FDB 3A 69                        dw      EXIT                    // ;
 407+ 6FDD
 408+ 6FDD              //  ______________________________________________________________________
 409+ 6FDD              //
 410+ 6FDD              // cfa          pfa -- cfa
 411+ 6FDD                              Colon_Def CFA, "CFA", is_normal
 411+ 6FDD             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 411+ 6FDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 6FDD             >
 411+ 6FDD             >                // dummy db directives used to calculate length of namec
 411+ 6FDD 43 46 41    >                db      "CFA"
 411+ 6FE0             >len_NFA         defl    $ - temp_NFA
 411+ 6FE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 6FDD             >
 411+ 6FDD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 6FDE 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 411+ 6FE1             >                org     $-1                 // alter last byte of Name just above to set
 411+ 6FE0 C1          >                db      {b $} | END_BIT     // msb as name end
 411+ 6FE1             >
 411+ 6FE1 CC 6F       >                dw      last_NFA            // Link to previous definition Name
 411+ 6FE3             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 6FE3 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 6FE6             >
 411+ 6FE6             >
 411+ 6FE6             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 6FE6             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 6FE6             >
 411+ 6FE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 6FE6              //              dw      CELL_MINUS              // cell-
 413+ 6FE6 8A 6C CE 6E                  dw      THREE, SUBTRACT         // 3 -
 414+ 6FEA 3A 69                        dw      EXIT                    // ;
 415+ 6FEC
 416+ 6FEC              //  ______________________________________________________________________
 417+ 6FEC              //
 418+ 6FEC              // nfa          pfa -- nfa
 419+ 6FEC                              Colon_Def NFA, "NFA", is_normal
 419+ 6FEC             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 419+ 6FEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 419+ 6FEC             >
 419+ 6FEC             >                // dummy db directives used to calculate length of namec
 419+ 6FEC 4E 46 41    >                db      "NFA"
 419+ 6FEF             >len_NFA         defl    $ - temp_NFA
 419+ 6FEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 419+ 6FEC             >
 419+ 6FEC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 419+ 6FED 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 419+ 6FF0             >                org     $-1                 // alter last byte of Name just above to set
 419+ 6FEF C1          >                db      {b $} | END_BIT     // msb as name end
 419+ 6FF0             >
 419+ 6FF0 DD 6F       >                dw      last_NFA            // Link to previous definition Name
 419+ 6FF2             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 419+ 6FF2 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 419+ 6FF5             >
 419+ 6FF5             >
 419+ 6FF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 419+ 6FF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 419+ 6FF5             >
 419+ 6FF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 420+ 6FF5 A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 421+ 6FF9 CE 6E                        dw      SUBTRACT                // -
 422+ 6FFB 94 6C                        dw      NEG_ONE                 // -1
 423+ 6FFD 9D 6F                        dw      TRAVERSE                // traverse
 424+ 6FFF 3A 69                        dw      EXIT                    // ;
 425+ 7001
 426+ 7001              //  ______________________________________________________________________
 427+ 7001              //
 428+ 7001              // pfa          nfa -- pfa
 429+ 7001                              Colon_Def PFA, "PFA", is_normal
 429+ 7001             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 429+ 7001             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 429+ 7001             >
 429+ 7001             >                // dummy db directives used to calculate length of namec
 429+ 7001 50 46 41    >                db      "PFA"
 429+ 7004             >len_NFA         defl    $ - temp_NFA
 429+ 7004             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 429+ 7001             >
 429+ 7001 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 429+ 7002 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 429+ 7005             >                org     $-1                 // alter last byte of Name just above to set
 429+ 7004 C1          >                db      {b $} | END_BIT     // msb as name end
 429+ 7005             >
 429+ 7005 EC 6F       >                dw      last_NFA            // Link to previous definition Name
 429+ 7007             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 429+ 7007 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 429+ 700A             >
 429+ 700A             >
 429+ 700A             >                endif           ; ok        // for other definitions it "points" the correct handler
 429+ 700A             >                // Use of "; ok" to suppress "warning[fwdref]"
 429+ 700A             >
 429+ 700A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 430+ 700A 78 6C                        dw      ONE                     // 1
 431+ 700C 9D 6F                        dw      TRAVERSE                // traverse
 432+ 700E A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 433+ 7012 D5 69                        dw      PLUS                    // +
 434+ 7014 3A 69                        dw      EXIT                    // ;
 435+ 7016
 436+ 7016              //  ______________________________________________________________________
 437+ 7016              //
 438+ 7016              // >body        cfa -- pfa
 439+ 7016                              Colon_Def TO_BODY, ">BODY", is_normal
 439+ 7016             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 439+ 7016             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 439+ 7016             >
 439+ 7016             >                // dummy db directives used to calculate length of namec
 439+ 7016 3E 42 4F 44 >                db      ">BODY"
 439+ 701A 59          >
 439+ 701B             >len_NFA         defl    $ - temp_NFA
 439+ 701B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 439+ 7016             >
 439+ 7016 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 439+ 7017 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 439+ 701B 59          >
 439+ 701C             >                org     $-1                 // alter last byte of Name just above to set
 439+ 701B D9          >                db      {b $} | END_BIT     // msb as name end
 439+ 701C             >
 439+ 701C 01 70       >                dw      last_NFA            // Link to previous definition Name
 439+ 701E             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 439+ 701E CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 439+ 7021             >
 439+ 7021             >
 439+ 7021             >                endif           ; ok        // for other definitions it "points" the correct handler
 439+ 7021             >                // Use of "; ok" to suppress "warning[fwdref]"
 439+ 7021             >
 439+ 7021             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 440+ 7021 8A 6C D5 69                  dw      THREE, PLUS             // cell+ --> 3 +
 441+ 7025 3A 69                        dw      EXIT                    // ;
 442+ 7027
 443+ 7027              //  ______________________________________________________________________
 444+ 7027              //
 445+ 7027              // <name        cfa -- nfa
 446+ 7027                              Colon_Def TO_NAME, "<NAME", is_normal
 446+ 7027             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 446+ 7027             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 446+ 7027             >
 446+ 7027             >                // dummy db directives used to calculate length of namec
 446+ 7027 3C 4E 41 4D >                db      "<NAME"
 446+ 702B 45          >
 446+ 702C             >len_NFA         defl    $ - temp_NFA
 446+ 702C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 446+ 7027             >
 446+ 7027 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 446+ 7028 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 446+ 702C 45          >
 446+ 702D             >                org     $-1                 // alter last byte of Name just above to set
 446+ 702C C5          >                db      {b $} | END_BIT     // msb as name end
 446+ 702D             >
 446+ 702D 16 70       >                dw      last_NFA            // Link to previous definition Name
 446+ 702F             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 446+ 702F CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 446+ 7032             >
 446+ 7032             >
 446+ 7032             >                endif           ; ok        // for other definitions it "points" the correct handler
 446+ 7032             >                // Use of "; ok" to suppress "warning[fwdref]"
 446+ 7032             >
 446+ 7032             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 447+ 7032 1E 70                        dw      TO_BODY                 // >body
 448+ 7034 F2 6F                        dw      NFA                     // nfa
 449+ 7036 3A 69                        dw      EXIT                    // ;
 450+ 7038
 451+ 7038              //  ______________________________________________________________________
 452+ 7038              //
 453+ 7038              // !csp         --
 454+ 7038              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 455+ 7038                              Colon_Def STORE_CSP, "!CSP", is_normal
 455+ 7038             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 455+ 7038             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 455+ 7038             >
 455+ 7038             >                // dummy db directives used to calculate length of namec
 455+ 7038 21 43 53 50 >                db      "!CSP"
 455+ 703C             >len_NFA         defl    $ - temp_NFA
 455+ 703C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 455+ 7038             >
 455+ 7038 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 455+ 7039 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 455+ 703D             >                org     $-1                 // alter last byte of Name just above to set
 455+ 703C D0          >                db      {b $} | END_BIT     // msb as name end
 455+ 703D             >
 455+ 703D 27 70       >                dw      last_NFA            // Link to previous definition Name
 455+ 703F             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 455+ 703F CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 455+ 7042             >
 455+ 7042             >
 455+ 7042             >                endif           ; ok        // for other definitions it "points" the correct handler
 455+ 7042             >                // Use of "; ok" to suppress "warning[fwdref]"
 455+ 7042             >
 455+ 7042             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 456+ 7042 0A 69                        dw      SPFETCH                 // sp@
 457+ 7044 FF 6D 29 6B                  dw      CSP, STORE              // csp !
 458+ 7048 3A 69                        dw      EXIT                    // ;
 459+ 704A
 460+ 704A              //  ______________________________________________________________________
 461+ 704A              //
 462+ 704A              // ?error       f n --
 463+ 704A              // rase error n if flag f it true
 464+ 704A                              Colon_Def QERROR, "?ERROR", is_normal
 464+ 704A             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 464+ 704A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 464+ 704A             >
 464+ 704A             >                // dummy db directives used to calculate length of namec
 464+ 704A 3F 45 52 52 >                db      "?ERROR"
 464+ 704E 4F 52       >
 464+ 7050             >len_NFA         defl    $ - temp_NFA
 464+ 7050             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 464+ 704A             >
 464+ 704A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 464+ 704B 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 464+ 704F 4F 52       >
 464+ 7051             >                org     $-1                 // alter last byte of Name just above to set
 464+ 7050 D2          >                db      {b $} | END_BIT     // msb as name end
 464+ 7051             >
 464+ 7051 38 70       >                dw      last_NFA            // Link to previous definition Name
 464+ 7053             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 464+ 7053 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 464+ 7056             >
 464+ 7056             >
 464+ 7056             >                endif           ; ok        // for other definitions it "points" the correct handler
 464+ 7056             >                // Use of "; ok" to suppress "warning[fwdref]"
 464+ 7056             >
 464+ 7056             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 465+ 7056 92 6A                        dw      SWAP                    // swap
 466+ 7058                                                              // if
 467+ 7058 D8 63                        dw      ZBRANCH
 468+ 705A 08 00                        dw      QError_Else - $
 469+ 705C F0 75                        dw          ERROR               //      error  ( is a forward-ref )
 470+ 705E                                                              // else
 471+ 705E C3 63                        dw      BRANCH
 472+ 7060 04 00                        dw      QError_Endif - $
 473+ 7062              QError_Else:
 474+ 7062 70 6A                        dw          DROP                //      drop
 475+ 7064              QError_Endif:                                   // endif
 476+ 7064 3A 69                        dw      EXIT                    // ;
 477+ 7066
 478+ 7066              //  ______________________________________________________________________
 479+ 7066              //
 480+ 7066              // ?comp       --
 481+ 7066              // raise msg #17 if not compiling
 482+ 7066                              Colon_Def QCOMP, "?COMP", is_normal
 482+ 7066             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 482+ 7066             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 482+ 7066             >
 482+ 7066             >                // dummy db directives used to calculate length of namec
 482+ 7066 3F 43 4F 4D >                db      "?COMP"
 482+ 706A 50          >
 482+ 706B             >len_NFA         defl    $ - temp_NFA
 482+ 706B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 482+ 7066             >
 482+ 7066 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 482+ 7067 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 482+ 706B 50          >
 482+ 706C             >                org     $-1                 // alter last byte of Name just above to set
 482+ 706B D0          >                db      {b $} | END_BIT     // msb as name end
 482+ 706C             >
 482+ 706C 4A 70       >                dw      last_NFA            // Link to previous definition Name
 482+ 706E             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 482+ 706E CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 482+ 7071             >
 482+ 7071             >
 482+ 7071             >                endif           ; ok        // for other definitions it "points" the correct handler
 482+ 7071             >                // Use of "; ok" to suppress "warning[fwdref]"
 482+ 7071             >
 482+ 7071             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 483+ 7071 D6 6D 1E 6B                  dw      STATE, FETCH            // state @
 484+ 7075 97 69                        dw      ZEQUAL                  // 0=
 485+ 7077 A5 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 486+ 707B 53 70                        dw      QERROR                  // ?error
 487+ 707D 3A 69                        dw      EXIT                    // ;
 488+ 707F
 489+ 707F              //  ______________________________________________________________________
 490+ 707F              //
 491+ 707F              // ?exec       --
 492+ 707F              // raise msg #18 if compiling
 493+ 707F                              Colon_Def QEXEC, "?EXEC", is_normal
 493+ 707F             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 493+ 707F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 493+ 707F             >
 493+ 707F             >                // dummy db directives used to calculate length of namec
 493+ 707F 3F 45 58 45 >                db      "?EXEC"
 493+ 7083 43          >
 493+ 7084             >len_NFA         defl    $ - temp_NFA
 493+ 7084             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 493+ 707F             >
 493+ 707F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 493+ 7080 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 493+ 7084 43          >
 493+ 7085             >                org     $-1                 // alter last byte of Name just above to set
 493+ 7084 C3          >                db      {b $} | END_BIT     // msb as name end
 493+ 7085             >
 493+ 7085 66 70       >                dw      last_NFA            // Link to previous definition Name
 493+ 7087             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 493+ 7087 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 493+ 708A             >
 493+ 708A             >
 493+ 708A             >                endif           ; ok        // for other definitions it "points" the correct handler
 493+ 708A             >                // Use of "; ok" to suppress "warning[fwdref]"
 493+ 708A             >
 493+ 708A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 494+ 708A D6 6D 1E 6B                  dw      STATE, FETCH            // state @
 495+ 708E A5 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 496+ 7092 53 70                        dw      QERROR                  // ?error
 497+ 7094 3A 69                        dw      EXIT                    // ;
 498+ 7096
 499+ 7096              //  ______________________________________________________________________
 500+ 7096              //
 501+ 7096              // ?pairs       n1 n2 --
 502+ 7096              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 503+ 7096                              Colon_Def QPAIRS, "?PAIRS", is_normal
 503+ 7096             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 503+ 7096             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ 7096             >
 503+ 7096             >                // dummy db directives used to calculate length of namec
 503+ 7096 3F 50 41 49 >                db      "?PAIRS"
 503+ 709A 52 53       >
 503+ 709C             >len_NFA         defl    $ - temp_NFA
 503+ 709C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ 7096             >
 503+ 7096 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ 7097 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 503+ 709B 52 53       >
 503+ 709D             >                org     $-1                 // alter last byte of Name just above to set
 503+ 709C D3          >                db      {b $} | END_BIT     // msb as name end
 503+ 709D             >
 503+ 709D 7F 70       >                dw      last_NFA            // Link to previous definition Name
 503+ 709F             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 709F CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 70A2             >
 503+ 70A2             >
 503+ 70A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 70A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 70A2             >
 503+ 70A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 70A2 CE 6E                        dw      SUBTRACT                // -
 505+ 70A4 A5 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 506+ 70A8 53 70                        dw      QERROR                  // ?error
 507+ 70AA 3A 69                        dw      EXIT                    // ;
 508+ 70AC
 509+ 70AC              //  ______________________________________________________________________
 510+ 70AC              //
 511+ 70AC              // ?csp       --
 512+ 70AC              // raise msg #20 if surrent SP in not what previously saved in CSP.
 513+ 70AC              // Compiler relies on that for  syntax checking of structures
 514+ 70AC                              Colon_Def QCSP, "?CSP", is_normal
 514+ 70AC             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 514+ 70AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 514+ 70AC             >
 514+ 70AC             >                // dummy db directives used to calculate length of namec
 514+ 70AC 3F 43 53 50 >                db      "?CSP"
 514+ 70B0             >len_NFA         defl    $ - temp_NFA
 514+ 70B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 514+ 70AC             >
 514+ 70AC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 514+ 70AD 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 514+ 70B1             >                org     $-1                 // alter last byte of Name just above to set
 514+ 70B0 D0          >                db      {b $} | END_BIT     // msb as name end
 514+ 70B1             >
 514+ 70B1 96 70       >                dw      last_NFA            // Link to previous definition Name
 514+ 70B3             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 514+ 70B3 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 514+ 70B6             >
 514+ 70B6             >
 514+ 70B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 514+ 70B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 514+ 70B6             >
 514+ 70B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 70B6 0A 69                        dw      SPFETCH                 // sp@
 516+ 70B8 FF 6D 1E 6B                  dw      CSP, FETCH              // csp @
 517+ 70BC CE 6E                        dw      SUBTRACT                // -
 518+ 70BE A5 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 519+ 70C2 53 70                        dw      QERROR                  // ?error
 520+ 70C4 3A 69                        dw      EXIT                    // ;
 521+ 70C6
 522+ 70C6              //  ______________________________________________________________________
 523+ 70C6              //
 524+ 70C6              // ?loading      --
 525+ 70C6              // raise msg #22 if not loading
 526+ 70C6                              Colon_Def QLOADING, "?LOADING", is_normal
 526+ 70C6             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 526+ 70C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 526+ 70C6             >
 526+ 70C6             >                // dummy db directives used to calculate length of namec
 526+ 70C6 3F 4C 4F 41 >                db      "?LOADING"
 526+ 70CA 44 49 4E 47 >
 526+ 70CE             >len_NFA         defl    $ - temp_NFA
 526+ 70CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 526+ 70C6             >
 526+ 70C6 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 526+ 70C7 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 526+ 70CB 44 49 4E 47 >
 526+ 70CF             >                org     $-1                 // alter last byte of Name just above to set
 526+ 70CE C7          >                db      {b $} | END_BIT     // msb as name end
 526+ 70CF             >
 526+ 70CF AC 70       >                dw      last_NFA            // Link to previous definition Name
 526+ 70D1             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 526+ 70D1 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 526+ 70D4             >
 526+ 70D4             >
 526+ 70D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 526+ 70D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 526+ 70D4             >
 526+ 70D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 527+ 70D4 83 6D 1E 6B                  dw      BLK, FETCH              // blk @
 528+ 70D8 97 69                        dw      ZEQUAL                  // 0=
 529+ 70DA A5 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 530+ 70DE 53 70                        dw      QERROR                  // ?error
 531+ 70E0 3A 69                        dw      EXIT                    // ;
 532+ 70E2
 533+ 70E2              //  ______________________________________________________________________
 534+ 70E2              //
 535+ 70E2              // compile      --
 536+ 70E2              // compiles the following word
 537+ 70E2                              Colon_Def COMPILE, "COMPILE", is_normal
 537+ 70E2             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 537+ 70E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 537+ 70E2             >
 537+ 70E2             >                // dummy db directives used to calculate length of namec
 537+ 70E2 43 4F 4D 50 >                db      "COMPILE"
 537+ 70E6 49 4C 45    >
 537+ 70E9             >len_NFA         defl    $ - temp_NFA
 537+ 70E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 537+ 70E2             >
 537+ 70E2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 537+ 70E3 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 537+ 70E7 49 4C 45    >
 537+ 70EA             >                org     $-1                 // alter last byte of Name just above to set
 537+ 70E9 C5          >                db      {b $} | END_BIT     // msb as name end
 537+ 70EA             >
 537+ 70EA C6 70       >                dw      last_NFA            // Link to previous definition Name
 537+ 70EC             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 537+ 70EC CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 537+ 70EF             >
 537+ 70EF             >
 537+ 70EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 537+ 70EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 537+ 70EF             >
 537+ 70EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 538+ 70EF 6E 70                        dw      QCOMP                   // ?comp
 539+ 70F1 76 69                        dw      R_TO                    // r>
 540+ 70F3 9D 6A 14 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 541+ 70F7 64 69                        dw      TO_R                    // >r
 542+ 70F9 1E 6B 97 6E                  dw      FETCH, COMMA            // @ ,
 543+ 70FD 3A 69                        dw      EXIT                    // ;
 544+ 70FF
 545+ 70FF              //  ______________________________________________________________________
 546+ 70FF              //
 547+ 70FF              // compile,     --
 548+ 70FF              // compiles the following word
 549+ 70FF                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 549+ 70FF             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 549+ 70FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 549+ 70FF             >
 549+ 70FF             >                // dummy db directives used to calculate length of namec
 549+ 70FF 43 4F 4D 50 >                db      "COMPILE,"
 549+ 7103 49 4C 45 2C >
 549+ 7107             >len_NFA         defl    $ - temp_NFA
 549+ 7107             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 549+ 70FF             >
 549+ 70FF 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 549+ 7100 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 549+ 7104 49 4C 45 2C >
 549+ 7108             >                org     $-1                 // alter last byte of Name just above to set
 549+ 7107 AC          >                db      {b $} | END_BIT     // msb as name end
 549+ 7108             >
 549+ 7108 E2 70       >                dw      last_NFA            // Link to previous definition Name
 549+ 710A             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 549+ 710A CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 549+ 710D             >
 549+ 710D             >
 549+ 710D             >                endif           ; ok        // for other definitions it "points" the correct handler
 549+ 710D             >                // Use of "; ok" to suppress "warning[fwdref]"
 549+ 710D             >
 549+ 710D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 550+ 710D 6E 70                        dw      QCOMP                   // ?comp
 551+ 710F 97 6E                        dw      COMMA                   // ,
 552+ 7111 3A 69                        dw      EXIT                    // ;
 553+ 7113
 554+ 7113              //  ______________________________________________________________________
 555+ 7113              //
 556+ 7113              // [            --
 557+ 7113              // stop compilation
 558+ 7113                              Colon_Def SQUARED_OPEN, "[", is_immediate
 558+ 7113             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 558+ 7113             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 558+ 7113             >
 558+ 7113             >                // dummy db directives used to calculate length of namec
 558+ 7113 5B          >                db      "["
 558+ 7114             >len_NFA         defl    $ - temp_NFA
 558+ 7114             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 558+ 7113             >
 558+ 7113 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 558+ 7114 5B          >                db      "["               // name string in 7-bit ascii, but
 558+ 7115             >                org     $-1                 // alter last byte of Name just above to set
 558+ 7114 DB          >                db      {b $} | END_BIT     // msb as name end
 558+ 7115             >
 558+ 7115 FF 70       >                dw      last_NFA            // Link to previous definition Name
 558+ 7117             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 558+ 7117 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 558+ 711A             >
 558+ 711A             >
 558+ 711A             >                endif           ; ok        // for other definitions it "points" the correct handler
 558+ 711A             >                // Use of "; ok" to suppress "warning[fwdref]"
 558+ 711A             >
 558+ 711A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 559+ 711A 6F 6C                        dw      ZERO                    // 0
 560+ 711C D6 6D 29 6B                  dw      STATE, STORE            // state !
 561+ 7120 3A 69                        dw      EXIT                    // ; immediate
 562+ 7122
 563+ 7122              //  ______________________________________________________________________
 564+ 7122              //
 565+ 7122              // ]            --
 566+ 7122              // start compilation
 567+ 7122                              Colon_Def SQUARED_CLOSE, "]", is_normal
 567+ 7122             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 567+ 7122             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 567+ 7122             >
 567+ 7122             >                // dummy db directives used to calculate length of namec
 567+ 7122 5D          >                db      "]"
 567+ 7123             >len_NFA         defl    $ - temp_NFA
 567+ 7123             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 567+ 7122             >
 567+ 7122 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 567+ 7123 5D          >                db      "]"               // name string in 7-bit ascii, but
 567+ 7124             >                org     $-1                 // alter last byte of Name just above to set
 567+ 7123 DD          >                db      {b $} | END_BIT     // msb as name end
 567+ 7124             >
 567+ 7124 13 71       >                dw      last_NFA            // Link to previous definition Name
 567+ 7126             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 567+ 7126 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 567+ 7129             >
 567+ 7129             >
 567+ 7129             >                endif           ; ok        // for other definitions it "points" the correct handler
 567+ 7129             >                // Use of "; ok" to suppress "warning[fwdref]"
 567+ 7129             >
 567+ 7129             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 568+ 7129 A5 63 C0 00                  dw      LIT, $C0                // 192
 569+ 712D D6 6D 29 6B                  dw      STATE, STORE            // state !
 570+ 7131 3A 69                        dw      EXIT                    // ;
 571+ 7133
 572+ 7133              //  ______________________________________________________________________
 573+ 7133              //
 574+ 7133              // smudge       --
 575+ 7133              // toggle smudge bit of latest definition
 576+ 7133                              Colon_Def SMUDGE, "SMUDGE", is_normal
 576+ 7133             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 576+ 7133             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ 7133             >
 576+ 7133             >                // dummy db directives used to calculate length of namec
 576+ 7133 53 4D 55 44 >                db      "SMUDGE"
 576+ 7137 47 45       >
 576+ 7139             >len_NFA         defl    $ - temp_NFA
 576+ 7139             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ 7133             >
 576+ 7133 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ 7134 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 576+ 7138 47 45       >
 576+ 713A             >                org     $-1                 // alter last byte of Name just above to set
 576+ 7139 C5          >                db      {b $} | END_BIT     // msb as name end
 576+ 713A             >
 576+ 713A 22 71       >                dw      last_NFA            // Link to previous definition Name
 576+ 713C             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 713C CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 713F             >
 576+ 713F             >
 576+ 713F             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 713F             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 713F             >
 576+ 713F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 713F C1 6F                        dw      LATEST                  // latest
 578+ 7141 A5 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 579+ 7145 13 6B                        dw      TOGGLE                  // toggle
 580+ 7147 3A 69                        dw      EXIT                    // ;
 581+ 7149
 582+ 7149              //  ______________________________________________________________________
 583+ 7149              //
 584+ 7149              // immediate    --
 585+ 7149              // make immediate the latest definition
 586+ 7149                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 586+ 7149             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 586+ 7149             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ 7149             >
 586+ 7149             >                // dummy db directives used to calculate length of namec
 586+ 7149 49 4D 4D 45 >                db      "IMMEDIATE"
 586+ 714D 44 49 41 54 >
 586+ 7151 45          >
 586+ 7152             >len_NFA         defl    $ - temp_NFA
 586+ 7152             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ 7149             >
 586+ 7149 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ 714A 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 586+ 714E 44 49 41 54 >
 586+ 7152 45          >
 586+ 7153             >                org     $-1                 // alter last byte of Name just above to set
 586+ 7152 C5          >                db      {b $} | END_BIT     // msb as name end
 586+ 7153             >
 586+ 7153 33 71       >                dw      last_NFA            // Link to previous definition Name
 586+ 7155             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 7155 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 586+ 7158             >
 586+ 7158             >
 586+ 7158             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 7158             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 7158             >
 586+ 7158             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 7158 C1 6F                        dw      LATEST                  // latest
 588+ 715A A5 63 40 00                  dw      LIT, $40                // 64
 589+ 715E 13 6B                        dw      TOGGLE                  // toggle
 590+ 7160 3A 69                        dw      EXIT                    // ;
 591+ 7162
 592+ 7162              //  ______________________________________________________________________
 593+ 7162              //
 594+ 7162              // hex          --
 595+ 7162              // change numeration base
 596+ 7162                              Colon_Def HEX, "HEX", is_normal
 596+ 7162             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 596+ 7162             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 596+ 7162             >
 596+ 7162             >                // dummy db directives used to calculate length of namec
 596+ 7162 48 45 58    >                db      "HEX"
 596+ 7165             >len_NFA         defl    $ - temp_NFA
 596+ 7165             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 596+ 7162             >
 596+ 7162 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 596+ 7163 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 596+ 7166             >                org     $-1                 // alter last byte of Name just above to set
 596+ 7165 D8          >                db      {b $} | END_BIT     // msb as name end
 596+ 7166             >
 596+ 7166 49 71       >                dw      last_NFA            // Link to previous definition Name
 596+ 7168             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 596+ 7168 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 596+ 716B             >
 596+ 716B             >
 596+ 716B             >                endif           ; ok        // for other definitions it "points" the correct handler
 596+ 716B             >                // Use of "; ok" to suppress "warning[fwdref]"
 596+ 716B             >
 596+ 716B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 597+ 716B A5 63 10 00                  dw      LIT, 16                 // 16
 598+ 716F E1 6D 29 6B                  dw      BASE, STORE             // base !
 599+ 7173 3A 69                        dw      EXIT                    // ;
 600+ 7175
 601+ 7175              //  ______________________________________________________________________
 602+ 7175              //
 603+ 7175              // decimal      --
 604+ 7175              // change numeration base
 605+ 7175                              Colon_Def DECIMAL, "DECIMAL", is_normal
 605+ 7175             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 605+ 7175             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 605+ 7175             >
 605+ 7175             >                // dummy db directives used to calculate length of namec
 605+ 7175 44 45 43 49 >                db      "DECIMAL"
 605+ 7179 4D 41 4C    >
 605+ 717C             >len_NFA         defl    $ - temp_NFA
 605+ 717C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 605+ 7175             >
 605+ 7175 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 605+ 7176 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 605+ 717A 4D 41 4C    >
 605+ 717D             >                org     $-1                 // alter last byte of Name just above to set
 605+ 717C CC          >                db      {b $} | END_BIT     // msb as name end
 605+ 717D             >
 605+ 717D 62 71       >                dw      last_NFA            // Link to previous definition Name
 605+ 717F             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 605+ 717F CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 605+ 7182             >
 605+ 7182             >
 605+ 7182             >                endif           ; ok        // for other definitions it "points" the correct handler
 605+ 7182             >                // Use of "; ok" to suppress "warning[fwdref]"
 605+ 7182             >
 605+ 7182             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 606+ 7182 A5 63 0A 00                  dw      LIT, 10                 // 10
 607+ 7186 E1 6D 29 6B                  dw      BASE, STORE             // base !
 608+ 718A 3A 69                        dw      EXIT                    // ;
 609+ 718C
 610+ 718C              //  ______________________________________________________________________
 611+ 718C              //
 612+ 718C              // (;code)       --
 613+ 718C              // patch to CFA to call/jump to the "following code"
 614+ 718C                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 614+ 718C             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 614+ 718C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ 718C             >
 614+ 718C             >                // dummy db directives used to calculate length of namec
 614+ 718C 28 3B 43 4F >                db      "(;CODE)"
 614+ 7190 44 45 29    >
 614+ 7193             >len_NFA         defl    $ - temp_NFA
 614+ 7193             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ 718C             >
 614+ 718C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ 718D 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 614+ 7191 44 45 29    >
 614+ 7194             >                org     $-1                 // alter last byte of Name just above to set
 614+ 7193 A9          >                db      {b $} | END_BIT     // msb as name end
 614+ 7194             >
 614+ 7194 75 71       >                dw      last_NFA            // Link to previous definition Name
 614+ 7196             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 7196 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 614+ 7199             >
 614+ 7199             >
 614+ 7199             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 7199             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 7199             >
 614+ 7199             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 7199 76 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 616+ 719B C1 6F                        dw      LATEST                  // latest   ( Word being defined in this moment )
 617+ 719D 07 70 E3 6F                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 618+ 71A1
 619+ 71A1 A5 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 620+ 71A5 62 6A 41 6B                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 621+ 71A9 F2 69                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 622+ 71AB
 623+ 71AB 29 6B                        dw      STORE                   // !
 624+ 71AD 3A 69                        dw      EXIT                    // ;
 625+ 71AF
 626+ 71AF              //  ______________________________________________________________________
 627+ 71AF              //
 628+ 71AF              // ;code        --
 629+ 71AF                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 629+ 71AF             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 629+ 71AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 629+ 71AF             >
 629+ 71AF             >                // dummy db directives used to calculate length of namec
 629+ 71AF 3B 43 4F 44 >                db      ";CODE"
 629+ 71B3 45          >
 629+ 71B4             >len_NFA         defl    $ - temp_NFA
 629+ 71B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 629+ 71AF             >
 629+ 71AF C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 629+ 71B0 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 629+ 71B4 45          >
 629+ 71B5             >                org     $-1                 // alter last byte of Name just above to set
 629+ 71B4 C5          >                db      {b $} | END_BIT     // msb as name end
 629+ 71B5             >
 629+ 71B5 8C 71       >                dw      last_NFA            // Link to previous definition Name
 629+ 71B7             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 629+ 71B7 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 629+ 71BA             >
 629+ 71BA             >
 629+ 71BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 629+ 71BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 629+ 71BA             >
 629+ 71BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 630+ 71BA B3 70                        dw      QCSP                    // ?csp
 631+ 71BC EC 70                        dw      COMPILE                 // compile
 632+ 71BE 96 71                        dw      C_SEMICOLON_CODE        // (;code)
 633+ 71C0 17 71                        dw      SQUARED_OPEN            // [
 634+ 71C2 1A 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 635+ 71C4 3A 69                        dw      EXIT                    // ; immediate
 636+ 71C6
 637+ 71C6              //  ______________________________________________________________________
 638+ 71C6              //
 639+ 71C6              // <builds      --
 640+ 71C6                              Colon_Def CBUILDS, "<BUILDS", is_normal
 640+ 71C6             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 640+ 71C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 640+ 71C6             >
 640+ 71C6             >                // dummy db directives used to calculate length of namec
 640+ 71C6 3C 42 55 49 >                db      "<BUILDS"
 640+ 71CA 4C 44 53    >
 640+ 71CD             >len_NFA         defl    $ - temp_NFA
 640+ 71CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 640+ 71C6             >
 640+ 71C6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 640+ 71C7 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 640+ 71CB 4C 44 53    >
 640+ 71CE             >                org     $-1                 // alter last byte of Name just above to set
 640+ 71CD D3          >                db      {b $} | END_BIT     // msb as name end
 640+ 71CE             >
 640+ 71CE AF 71       >                dw      last_NFA            // Link to previous definition Name
 640+ 71D0             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 640+ 71D0 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 640+ 71D3             >
 640+ 71D3             >
 640+ 71D3             >                endif           ; ok        // for other definitions it "points" the correct handler
 640+ 71D3             >                // Use of "; ok" to suppress "warning[fwdref]"
 640+ 71D3             >
 640+ 71D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 641+ 71D3 6F 6C                        dw      ZERO                    // 0
 642+ 71D5 2A 6C                        dw      CONSTANT                // constant
 643+ 71D7 3A 69                        dw      EXIT                    // ;
 644+ 71D9
 645+ 71D9              //  ______________________________________________________________________
 646+ 71D9              //
 647+ 71D9              // recurse      --
 648+ 71D9              //              Colon_Def RECURSE, "RECURSE", is_immediate
 649+ 71D9              //              dw      QCOMP                   // ?comp
 650+ 71D9              //              dw      LATEST                  // latest
 651+ 71D9              //              dw      PFA, CFA                // pfa cfa
 652+ 71D9              //              dw      COMMA                   // ,
 653+ 71D9              //              dw      EXIT                    // ; immediate
 654+ 71D9
 655+ 71D9              //  ______________________________________________________________________
 656+ 71D9              //
 657+ 71D9              // does>     --
 658+ 71D9                              Colon_Def DOES_TO, "DOES>", is_normal
 658+ 71D9             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 658+ 71D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 658+ 71D9             >
 658+ 71D9             >                // dummy db directives used to calculate length of namec
 658+ 71D9 44 4F 45 53 >                db      "DOES>"
 658+ 71DD 3E          >
 658+ 71DE             >len_NFA         defl    $ - temp_NFA
 658+ 71DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 658+ 71D9             >
 658+ 71D9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 658+ 71DA 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 658+ 71DE 3E          >
 658+ 71DF             >                org     $-1                 // alter last byte of Name just above to set
 658+ 71DE BE          >                db      {b $} | END_BIT     // msb as name end
 658+ 71DF             >
 658+ 71DF C6 71       >                dw      last_NFA            // Link to previous definition Name
 658+ 71E1             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 658+ 71E1 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 658+ 71E4             >
 658+ 71E4             >
 658+ 71E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 658+ 71E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 658+ 71E4             >
 658+ 71E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 659+ 71E4 76 69                        dw      R_TO                    // r>
 660+ 71E6 C1 6F                        dw      LATEST                  // latest
 661+ 71E8 07 70                        dw      PFA                     // pfa
 662+ 71EA 29 6B                        dw      STORE                   // !
 663+ 71EC 96 71                        dw      C_SEMICOLON_CODE        // ;code
 664+ 71EE              Does_Ptr:
 665+ 71EE                              // via call coded in CFA
 666+ 71EE                              ldhlrp
 666+ 71EE 2A 96 63    >                ld      hl,(RP_Pointer)
 667+ 71F1 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 668+ 71F2 70                           ld      (hl), b
 669+ 71F3 2B                           dec     hl
 670+ 71F4 71                           ld      (hl), c
 671+ 71F5                              ldrphl
 671+ 71F5 22 96 63    >                ld      (RP_Pointer),hl
 672+ 71F8 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 673+ 71F9
 674+ 71F9 4E                           ld      c, (hl)
 675+ 71FA 23                           inc     hl
 676+ 71FB 46                           ld      b, (hl)
 677+ 71FC 23                           inc     hl
 678+ 71FD
 679+ 71FD                              psh1
 679+ 71FD E5          >                push    hl
 679+ 71FE DD E9       >                jp      (ix)
 680+ 7200                              // SMUDGE !
 681+ 7200
 682+ 7200              //  ______________________________________________________________________
 683+ 7200              //
 684+ 7200              // count        a -- a2 n
 685+ 7200              // expects a counted string at address a, returns string address and counter
 686+ 7200                              Colon_Def COUNT, "COUNT", is_normal
 686+ 7200             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 686+ 7200             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 686+ 7200             >
 686+ 7200             >                // dummy db directives used to calculate length of namec
 686+ 7200 43 4F 55 4E >                db      "COUNT"
 686+ 7204 54          >
 686+ 7205             >len_NFA         defl    $ - temp_NFA
 686+ 7205             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 686+ 7200             >
 686+ 7200 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 686+ 7201 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 686+ 7205 54          >
 686+ 7206             >                org     $-1                 // alter last byte of Name just above to set
 686+ 7205 D4          >                db      {b $} | END_BIT     // msb as name end
 686+ 7206             >
 686+ 7206 D9 71       >                dw      last_NFA            // Link to previous definition Name
 686+ 7208             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 686+ 7208 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 686+ 720B             >
 686+ 720B             >
 686+ 720B             >                endif           ; ok        // for other definitions it "points" the correct handler
 686+ 720B             >                // Use of "; ok" to suppress "warning[fwdref]"
 686+ 720B             >
 686+ 720B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 687+ 720B 9D 6A                        dw      DUP                     // dup
 688+ 720D F2 69                        dw      ONE_PLUS                // 1+
 689+ 720F 92 6A 35 6B                  dw      SWAP, CFETCH             // swap @
 690+ 7213 3A 69                        dw      EXIT                    // ;
 691+ 7215
 692+ 7215              //  ______________________________________________________________________
 693+ 7215              //
 694+ 7215              // bounds       a n -- a+n n
 695+ 7215              // given an address and a length ( a n ) calculate the bound addresses
 696+ 7215              // suitable for DO-LOOP
 697+ 7215                              Colon_Def BOUNDS, "BOUNDS", is_normal
 697+ 7215             >                New_Def  BOUNDS, "BOUNDS", Enter_Ptr, is_normal ; ok
 697+ 7215             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 697+ 7215             >
 697+ 7215             >                // dummy db directives used to calculate length of namec
 697+ 7215 42 4F 55 4E >                db      "BOUNDS"
 697+ 7219 44 53       >
 697+ 721B             >len_NFA         defl    $ - temp_NFA
 697+ 721B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 697+ 7215             >
 697+ 7215 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 697+ 7216 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 697+ 721A 44 53       >
 697+ 721C             >                org     $-1                 // alter last byte of Name just above to set
 697+ 721B D3          >                db      {b $} | END_BIT     // msb as name end
 697+ 721C             >
 697+ 721C 00 72       >                dw      last_NFA            // Link to previous definition Name
 697+ 721E             >BOUNDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 697+ 721E CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 697+ 7221             >
 697+ 7221             >
 697+ 7221             >                endif           ; ok        // for other definitions it "points" the correct handler
 697+ 7221             >                // Use of "; ok" to suppress "warning[fwdref]"
 697+ 7221             >
 697+ 7221             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 698+ 7221 62 6A D5 69                  dw      OVER, PLUS, SWAP        // over + swap
 698+ 7225 92 6A
 699+ 7227 3A 69                        dw      EXIT                    // ;
 700+ 7229
 701+ 7229              //  ______________________________________________________________________
 702+ 7229              //
 703+ 7229              // type         a n --
 704+ 7229              // Sends to current output channel n characters starting at address a.
 705+ 7229                              Colon_Def TYPE, "TYPE", is_normal
 705+ 7229             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 705+ 7229             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 705+ 7229             >
 705+ 7229             >                // dummy db directives used to calculate length of namec
 705+ 7229 54 59 50 45 >                db      "TYPE"
 705+ 722D             >len_NFA         defl    $ - temp_NFA
 705+ 722D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 705+ 7229             >
 705+ 7229 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 705+ 722A 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 705+ 722E             >                org     $-1                 // alter last byte of Name just above to set
 705+ 722D C5          >                db      {b $} | END_BIT     // msb as name end
 705+ 722E             >
 705+ 722E 15 72       >                dw      last_NFA            // Link to previous definition Name
 705+ 7230             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 705+ 7230 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 705+ 7233             >
 705+ 7233             >
 705+ 7233             >                endif           ; ok        // for other definitions it "points" the correct handler
 705+ 7233             >                // Use of "; ok" to suppress "warning[fwdref]"
 705+ 7233             >
 705+ 7233             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 706+ 7233 1E 72                        dw      BOUNDS                  // bounds
 707+ 7235 31 64                        dw      C_Q_DO                  // ?do
 708+ 7237 0C 00                        dw      Type_Skip - $
 709+ 7239              Type_Loop:
 710+ 7239 66 64 35 6B                  dw          I, CFETCH           //      i c@
 711+ 723D 6C 6F                        dw          EMIT                //      emit
 712+ 723F 22 64                        dw      C_LOOP                  // loop
 713+ 7241 F8 FF                        dw      Type_Loop - $
 714+ 7243              Type_Skip:
 715+ 7243 3A 69                        dw      EXIT                    // ;
 716+ 7245
 717+ 7245              //  ______________________________________________________________________
 718+ 7245              //
 719+ 7245              // leave        --
 720+ 7245              // Compile (leave) to leave current LOOP and jump just after it
 721+ 7245                              Colon_Def LEAVE, "LEAVE", is_immediate
 721+ 7245             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 721+ 7245             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 721+ 7245             >
 721+ 7245             >                // dummy db directives used to calculate length of namec
 721+ 7245 4C 45 41 56 >                db      "LEAVE"
 721+ 7249 45          >
 721+ 724A             >len_NFA         defl    $ - temp_NFA
 721+ 724A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 721+ 7245             >
 721+ 7245 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 721+ 7246 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 721+ 724A 45          >
 721+ 724B             >                org     $-1                 // alter last byte of Name just above to set
 721+ 724A C5          >                db      {b $} | END_BIT     // msb as name end
 721+ 724B             >
 721+ 724B 29 72       >                dw      last_NFA            // Link to previous definition Name
 721+ 724D             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 721+ 724D CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 721+ 7250             >
 721+ 7250             >
 721+ 7250             >                endif           ; ok        // for other definitions it "points" the correct handler
 721+ 7250             >                // Use of "; ok" to suppress "warning[fwdref]"
 721+ 7250             >
 721+ 7250             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 722+ 7250 EC 70 50 69                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 723+ 7254 79 6E 64 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 723+ 7258 6F 6C 97 6E
 724+ 725C 6F 6C 6F 6C                  dw      ZERO, ZERO
 725+ 7260 0A 69 9D 6A                  dw      SPFETCH, DUP
 726+ 7264 14 6A 14 6A                  dw      CELL_PLUS, CELL_PLUS
 727+ 7268 84 6A                        dw      TUCK
 728+ 726A FF 6D 1E 6B                  dw      CSP, FETCH
 729+ 726E 92 6A CE 6E                  dw      SWAP, SUBTRACT
 730+ 7272 40 68                        dw      CMOVE
 731+ 7274 FF 6D 1E 6B                  dw      CSP, FETCH, CELL_MINUS
 731+ 7278 1F 6A
 732+ 727A 76 69 62 6A                  dw      R_TO, OVER, STORE
 732+ 727E 29 6B
 733+ 7280 1F 6A 6F 6C                  dw      CELL_MINUS, ZERO
 734+ 7284 92 6A 29 6B                  dw      SWAP, STORE
 735+ 7288 3A 69                        dw      EXIT                    // ;
 736+ 728A
 737+ 728A              //  ______________________________________________________________________
 738+ 728A              //
 739+ 728A              // -trailing    a n1 -- a n2
 740+ 728A              // Assumes that an n1 bytes-long string is stored at address a
 741+ 728A              // and the string contains a space delimited word,
 742+ 728A              // Finds n2 as the position of the first character after the word.
 743+ 728A                              Colon_Def LTRAILING, "-TRAILING", is_normal
 743+ 728A             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 743+ 728A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 743+ 728A             >
 743+ 728A             >                // dummy db directives used to calculate length of namec
 743+ 728A 2D 54 52 41 >                db      "-TRAILING"
 743+ 728E 49 4C 49 4E >
 743+ 7292 47          >
 743+ 7293             >len_NFA         defl    $ - temp_NFA
 743+ 7293             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 743+ 728A             >
 743+ 728A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 743+ 728B 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 743+ 728F 49 4C 49 4E >
 743+ 7293 47          >
 743+ 7294             >                org     $-1                 // alter last byte of Name just above to set
 743+ 7293 C7          >                db      {b $} | END_BIT     // msb as name end
 743+ 7294             >
 743+ 7294 45 72       >                dw      last_NFA            // Link to previous definition Name
 743+ 7296             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 743+ 7296 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 743+ 7299             >
 743+ 7299             >
 743+ 7299             >                endif           ; ok        // for other definitions it "points" the correct handler
 743+ 7299             >                // Use of "; ok" to suppress "warning[fwdref]"
 743+ 7299             >
 743+ 7299             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 744+ 7299 9D 6A 6F 6C                  dw      DUP, ZERO               // dup 0
 745+ 729D                                                              // do
 746+ 729D 31 64                        dw      C_Q_DO
 747+ 729F 20 00                        dw      LTrailing_Leave - $
 748+ 72A1              LTrailing_Loop:
 749+ 72A1 F2 6A D5 69                  dw          TWO_DUP, PLUS       //      2dup +
 750+ 72A5 FC 69                        dw          ONE_SUBTRACT        //      1-
 751+ 72A7 35 6B                        dw          CFETCH              //      c@
 752+ 72A9 9E 6C CE 6E                  dw          BL, SUBTRACT        //      bl -
 753+ 72AD                                                              //      if
 754+ 72AD D8 63                        dw          ZBRANCH
 755+ 72AF 0A 00                        dw          LTrailing_Else - $
 756+ 72B1 50 69                        dw              C_LEAVE         //          leave
 757+ 72B3 0C 00                        dw              LTrailing_Leave - $
 758+ 72B5 C3 63                        dw          BRANCH              //      else
 759+ 72B7 04 00                        dw          LTrailing_Endif - $
 760+ 72B9              LTrailing_Else:
 761+ 72B9 FC 69                        dw              ONE_SUBTRACT    //          1-
 762+ 72BB              LTrailing_Endif:                                //      endif
 763+ 72BB                                                              // loop
 764+ 72BB 22 64                        dw      C_LOOP
 765+ 72BD E4 FF                        dw      LTrailing_Loop - $
 766+ 72BF              LTrailing_Leave:
 767+ 72BF 3A 69                        dw      EXIT                    // ;
 768+ 72C1
 769+ 72C1              //  ______________________________________________________________________
 770+ 72C1              //
 771+ 72C1              // accept       a n1 -- n2
 772+ 72C1              // Accepts at most n1 characters from terminal and stores them at address a
 773+ 72C1              // CR stops input. A 'nul' is added as trailer.
 774+ 72C1              // n2 is the string length. n2 is kept in span user variable also.
 775+ 72C1                              Colon_Def ACCEPT, "ACCEPT", is_normal
 775+ 72C1             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 775+ 72C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ 72C1             >
 775+ 72C1             >                // dummy db directives used to calculate length of namec
 775+ 72C1 41 43 43 45 >                db      "ACCEPT"
 775+ 72C5 50 54       >
 775+ 72C7             >len_NFA         defl    $ - temp_NFA
 775+ 72C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ 72C1             >
 775+ 72C1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ 72C2 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 775+ 72C6 50 54       >
 775+ 72C8             >                org     $-1                 // alter last byte of Name just above to set
 775+ 72C7 D4          >                db      {b $} | END_BIT     // msb as name end
 775+ 72C8             >
 775+ 72C8 8A 72       >                dw      last_NFA            // Link to previous definition Name
 775+ 72CA             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 72CA CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 72CD             >
 775+ 72CD             >
 775+ 72CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 72CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 72CD             >
 775+ 72CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 72CD 62 6A D5 69                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 776+ 72D1 62 6A
 777+ 72D3 6F 6C B6 6A                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 778+ 72D7                                                              // do
 779+ 72D7 31 64                        dw      C_Q_DO
 780+ 72D9 8A 00                        dw      Accept_Leave - $
 781+ 72DB              Accept_Loop:
 782+ 72DB 70 6A 6B 66                  dw          DROP, KEY           //      drop key        ( a  c )
 783+ 72DF 9D 6A                        dw          DUP                 //      dup             ( a  c  c )
 784+ 72E1 A5 63 0E 00                  dw          LIT, $0E            //      0E
 785+ 72E5 DF 6C                        dw          PLUS_ORIGIN         //      +origin
 786+ 72E7 1E 6B                        dw          FETCH               //      @               ( a  c  c  del )
 787+ 72E9 DA 6E                        dw          EQUALS              //      =               ( a  c  c==del )
 788+ 72EB                                                              //      if
 789+ 72EB D8 63                        dw          ZBRANCH
 790+ 72ED 2C 00                        dw          Accept_Else_0 - $
 791+ 72EF 70 6A                        dw              DROP            //          drop        ( a  )
 792+ 72F1 9D 6A 66 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 792+ 72F5 DA 6E
 793+ 72F7 78 6C D8 68                  dw              ONE, AND_OP     //          1 and
 794+ 72FB 9D 6A                        dw              DUP             //          dup         ( a  a==i  a==i )
 795+ 72FD 76 69                        dw              R_TO            //          r> 2 - + r>
 796+ 72FF 2A 6A D5 69                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 797+ 7303 64 69                        dw              TO_R            //
 798+ 7305                                                              //          if
 799+ 7305 D8 63                        dw              ZBRANCH
 800+ 7307 0A 00                        dw              Accept_Else_1 - $
 801+ 7309 A5 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 802+ 730D                                                              //          else
 803+ 730D C3 63                        dw              BRANCH
 804+ 730F 06 00                        dw              Accept_Endif_1 - $
 805+ 7311              Accept_Else_1:
 806+ 7311 A5 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 807+ 7315              Accept_Endif_1:                                 //          endif
 808+ 7315 C3 63                        dw          BRANCH
 809+ 7317 2E 00                        dw          Accept_Endif_0 - $
 810+ 7319              Accept_Else_0:                                  //      else
 811+ 7319 9D 6A                        dw              DUP             //          dup         ( a  c  c )
 812+ 731B A5 63 0D 00                  dw              LIT, 13         //          13
 813+ 731F DA 6E                        dw              EQUALS          //          =           ( a  c  c==CR )
 814+ 7321                                                              //          if
 815+ 7321 D8 63                        dw              ZBRANCH
 816+ 7323 0C 00                        dw              Accept_Else_2 - $
 817+ 7325 70 6A 9E 6C                  dw                  DROP, BL    //              drop bl ( a  bl )
 818+ 7329 6F 6C                        dw                  ZERO        //              0       ( a  c  0 )
 819+ 732B                                                              //          else
 820+ 732B C3 63                        dw              BRANCH
 821+ 732D 04 00                        dw              Accept_Endif_2 - $
 822+ 732F              Accept_Else_2:
 823+ 732F 9D 6A                        dw                  DUP         //              dup     ( a  c  c )
 824+ 7331                                                              //          endif
 825+ 7331              Accept_Endif_2:
 826+ 7331 66 64 41 6B                  dw              I, CSTORE       //          i           ( a  c )
 827+ 7335 9D 6A 9E 6C                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 827+ 7339 FA 6E
 828+ 733B                                                              //          if
 829+ 733B D8 63                        dw              ZBRANCH
 830+ 733D 08 00                        dw              Accept_Endif_3 - $
 831+ 733F 76 69                        dw                  R_TO        //              r>
 832+ 7341 FC 69                        dw                  ONE_SUBTRACT//              1-
 833+ 7343 64 69                        dw                  TO_R        //              >r
 834+ 7345                                                              //          endif
 835+ 7345              Accept_Endif_3:
 836+ 7345              Accept_Endif_0:                                 //      endif
 837+ 7345 6C 6F                        dw          EMIT                //      emit
 838+ 7347 6F 6C 66 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 838+ 734B F2 69
 839+ 734D 29 6B                        dw          STORE               //          ( zero pad )
 840+ 734F 66 64                        dw          I                   //      i
 841+ 7351 66 64 35 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 841+ 7355 97 69
 842+ 7357 D8 63                        dw          ZBRANCH             //
 843+ 7359 06 00                        dw              Accept_Endif_4 - $
 844+ 735B 50 69                        dw                  C_LEAVE     //              leave
 845+ 735D 06 00                        dw                  Accept_Leave - $
 846+ 735F              Accept_Endif_4:                                 //      endif
 847+ 735F                                                              // loop
 848+ 735F 22 64                        dw      C_LOOP
 849+ 7361 7A FF                        dw      Accept_Loop - $
 850+ 7363              Accept_Leave:
 851+ 7363 92 6A CE 6E                  dw      SWAP, SUBTRACT          // swap -
 852+ 7367 F2 69                        dw      ONE_PLUS                // 1+
 853+ 7369 9D 6A 57 6E                  dw      DUP, SPAN, STORE        // dup span !
 853+ 736D 29 6B
 854+ 736F 3A 69                        dw      EXIT                    // ;
 855+ 7371
 856+ 7371              //  ______________________________________________________________________
 857+ 7371              //
 858+ 7371              // expect      a n --
 859+ 7371              // Accepts at most n1 characters from terminal and stores them at address a
 860+ 7371              // CR stops input. A 'nul' is added as trailer.
 861+ 7371              // n2 is the string length. n2 is kept in span user variable also.
 862+ 7371              //              Colon_Def EXPECT, "EXPECT", is_normal
 863+ 7371              //              dw      ACCEPT, DROP            // accept drop
 864+ 7371              //              dw      EXIT                    // ;
 865+ 7371
 866+ 7371              //  ______________________________________________________________________
 867+ 7371              //
 868+ 7371              // query        --
 869+ 7371              // Accept at most 80 character from console. CR stops.
 870+ 7371              // Text is stored in TIB. Variable IN is zeroed.
 871+ 7371                              Colon_Def QUERY, "QUERY", is_normal
 871+ 7371             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 871+ 7371             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 871+ 7371             >
 871+ 7371             >                // dummy db directives used to calculate length of namec
 871+ 7371 51 55 45 52 >                db      "QUERY"
 871+ 7375 59          >
 871+ 7376             >len_NFA         defl    $ - temp_NFA
 871+ 7376             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 871+ 7371             >
 871+ 7371 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 871+ 7372 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 871+ 7376 59          >
 871+ 7377             >                org     $-1                 // alter last byte of Name just above to set
 871+ 7376 D9          >                db      {b $} | END_BIT     // msb as name end
 871+ 7377             >
 871+ 7377 C1 72       >                dw      last_NFA            // Link to previous definition Name
 871+ 7379             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 871+ 7379 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 871+ 737C             >
 871+ 737C             >
 871+ 737C             >                endif           ; ok        // for other definitions it "points" the correct handler
 871+ 737C             >                // Use of "; ok" to suppress "warning[fwdref]"
 871+ 737C             >
 871+ 737C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 872+ 737C 0D 6D 1E 6B                  dw      TIB, FETCH              // tib @
 873+ 7380 A5 63 50 00                  dw      LIT, 80                 // 80
 874+ 7384 CA 72 70 6A                  dw      ACCEPT, DROP            // accept drop
 875+ 7388 6F 6C 8D 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 875+ 738C 29 6B
 876+ 738E 3A 69                        dw      EXIT                    // ;
 877+ 7390
 878+ 7390              //  ______________________________________________________________________
 879+ 7390              //
 880+ 7390              // fill        a n c --
 881+ 7390              // If n > 0, fills n locations starting from address a with the value c.
 882+ 7390                              New_Def FILL, "FILL", is_code, is_normal
 882+ 7390             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 882+ 7390             >
 882+ 7390             >                // dummy db directives used to calculate length of namec
 882+ 7390 46 49 4C 4C >                db      "FILL"
 882+ 7394             >len_NFA         defl    $ - temp_NFA
 882+ 7394             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 882+ 7390             >
 882+ 7390 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 882+ 7391 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 882+ 7395             >                org     $-1                 // alter last byte of Name just above to set
 882+ 7394 CC          >                db      {b $} | END_BIT     // msb as name end
 882+ 7395             >
 882+ 7395 71 73       >                dw      last_NFA            // Link to previous definition Name
 882+ 7397             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 882+ 7397 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 882+ 7397 ~           >
 882+ 7397 ~           >
 882+ 7397             >                endif           ; ok        // for other definitions it "points" the correct handler
 882+ 7397             >                // Use of "; ok" to suppress "warning[fwdref]"
 882+ 7397             >
 882+ 7397             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 883+ 7397 D9                           exx
 884+ 7398 D1                           pop     de                  // de has character
 885+ 7399 C1                           pop     bc                  // bc has counter
 886+ 739A E1                           pop     hl                  // hl has address, save Instruction Pointer
 887+ 739B              Fill_Loop:
 888+ 739B 78                               ld      a, b
 889+ 739C B1                               or      c
 890+ 739D 28 05                        jr      z, Fill_While_End
 891+ 739F 73                               ld      (hl), e
 892+ 73A0 0B                               dec     bc
 893+ 73A1 23                               inc     hl
 894+ 73A2 18 F7                        jr      Fill_Loop
 895+ 73A4              Fill_While_End:
 896+ 73A4 D9                           exx
 897+ 73A5                              next
 897+ 73A5 DD E9       >                jp      (ix)
 898+ 73A7
 899+ 73A7              //  ______________________________________________________________________
 900+ 73A7              //
 901+ 73A7              // erase        a n --
 902+ 73A7              // If n > 0, fills n locations starting from address a with 'nul' characters.
 903+ 73A7                              Colon_Def ERASE, "ERASE", is_normal
 903+ 73A7             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 903+ 73A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ 73A7             >
 903+ 73A7             >                // dummy db directives used to calculate length of namec
 903+ 73A7 45 52 41 53 >                db      "ERASE"
 903+ 73AB 45          >
 903+ 73AC             >len_NFA         defl    $ - temp_NFA
 903+ 73AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ 73A7             >
 903+ 73A7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ 73A8 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 903+ 73AC 45          >
 903+ 73AD             >                org     $-1                 // alter last byte of Name just above to set
 903+ 73AC C5          >                db      {b $} | END_BIT     // msb as name end
 903+ 73AD             >
 903+ 73AD 90 73       >                dw      last_NFA            // Link to previous definition Name
 903+ 73AF             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 73AF CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 903+ 73B2             >
 903+ 73B2             >
 903+ 73B2             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 73B2             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 73B2             >
 903+ 73B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 73B2 6F 6C 97 73                  dw      ZERO, FILL              // 0 fill
 905+ 73B6 3A 69                        dw      EXIT                    // ;
 906+ 73B8
 907+ 73B8              //  ______________________________________________________________________
 908+ 73B8              //
 909+ 73B8              // blanks       a n --
 910+ 73B8              // If n > 0, fills n locations starting from address a with 'nul' characters.
 911+ 73B8                              Colon_Def BLANKS, "BLANKS", is_normal
 911+ 73B8             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 911+ 73B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 911+ 73B8             >
 911+ 73B8             >                // dummy db directives used to calculate length of namec
 911+ 73B8 42 4C 41 4E >                db      "BLANKS"
 911+ 73BC 4B 53       >
 911+ 73BE             >len_NFA         defl    $ - temp_NFA
 911+ 73BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 911+ 73B8             >
 911+ 73B8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 911+ 73B9 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 911+ 73BD 4B 53       >
 911+ 73BF             >                org     $-1                 // alter last byte of Name just above to set
 911+ 73BE D3          >                db      {b $} | END_BIT     // msb as name end
 911+ 73BF             >
 911+ 73BF A7 73       >                dw      last_NFA            // Link to previous definition Name
 911+ 73C1             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 911+ 73C1 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 911+ 73C4             >
 911+ 73C4             >
 911+ 73C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 911+ 73C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 911+ 73C4             >
 911+ 73C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 912+ 73C4 9E 6C 97 73                  dw      BL, FILL                // bl fill
 913+ 73C8 3A 69                        dw      EXIT                    // ;
 914+ 73CA
 915+ 73CA              //  ______________________________________________________________________
 916+ 73CA              //
 917+ 73CA              // hold         c --
 918+ 73CA              // Used between <# and #> to insert a character c in numeric formatting.
 919+ 73CA                              Colon_Def HOLD, "HOLD", is_normal
 919+ 73CA             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 919+ 73CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 919+ 73CA             >
 919+ 73CA             >                // dummy db directives used to calculate length of namec
 919+ 73CA 48 4F 4C 44 >                db      "HOLD"
 919+ 73CE             >len_NFA         defl    $ - temp_NFA
 919+ 73CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 919+ 73CA             >
 919+ 73CA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 919+ 73CB 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 919+ 73CF             >                org     $-1                 // alter last byte of Name just above to set
 919+ 73CE C4          >                db      {b $} | END_BIT     // msb as name end
 919+ 73CF             >
 919+ 73CF B8 73       >                dw      last_NFA            // Link to previous definition Name
 919+ 73D1             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 919+ 73D1 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 919+ 73D4             >
 919+ 73D4             >
 919+ 73D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 919+ 73D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 919+ 73D4             >
 919+ 73D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 920+ 73D4 94 6C                        dw      NEG_ONE                 // -1
 921+ 73D6 12 6E FF 6A                  dw      HLD, PLUSSTORE          // hld +!
 922+ 73DA 12 6E 1E 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 922+ 73DE 41 6B
 923+ 73E0 3A 69                        dw      EXIT                    // ;
 924+ 73E2
 925+ 73E2              //  ______________________________________________________________________
 926+ 73E2              //
 927+ 73E2              // pad         -- a
 928+ 73E2              // leaves the buffer text address. This is at a fixed distance over HERE.
 929+ 73E2                              Colon_Def PAD, "PAD", is_normal
 929+ 73E2             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 929+ 73E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 929+ 73E2             >
 929+ 73E2             >                // dummy db directives used to calculate length of namec
 929+ 73E2 50 41 44    >                db      "PAD"
 929+ 73E5             >len_NFA         defl    $ - temp_NFA
 929+ 73E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 929+ 73E2             >
 929+ 73E2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 929+ 73E3 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 929+ 73E6             >                org     $-1                 // alter last byte of Name just above to set
 929+ 73E5 C4          >                db      {b $} | END_BIT     // msb as name end
 929+ 73E6             >
 929+ 73E6 CA 73       >                dw      last_NFA            // Link to previous definition Name
 929+ 73E8             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 929+ 73E8 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 929+ 73EB             >
 929+ 73EB             >
 929+ 73EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 929+ 73EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 929+ 73EB             >
 929+ 73EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 930+ 73EB 79 6E                        dw      HERE                    // here
 931+ 73ED A5 63 44 00                  dw      LIT, 68                 // 68
 932+ 73F1 D5 69                        dw      PLUS                    // +
 933+ 73F3 3A 69                        dw      EXIT                    // ;
 934+ 73F5
 935+ 73F5              //  ______________________________________________________________________
 936+ 73F5              //
 937+ 73F5              // word         c -- a
 938+ 73F5              // reads characters from input streams until it encouners a c delimiter.
 939+ 73F5              // Stores that packet so it starts from HERE
 940+ 73F5              // WORD leaves a counter as first byte and ends the packet with two spaces.
 941+ 73F5              // Other occurrences of c are ignored.
 942+ 73F5              // If BLK is zero, text is taken from terminal buffer TIB.
 943+ 73F5              // Otherwise text is taken from the disk-block given by BLK.
 944+ 73F5              // "in" variable is incremented of the number of character read.
 945+ 73F5              // The number of characters read is given by ENCLOSE.
 946+ 73F5                              Colon_Def WORD, "WORD", is_normal
 946+ 73F5             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 946+ 73F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 946+ 73F5             >
 946+ 73F5             >                // dummy db directives used to calculate length of namec
 946+ 73F5 57 4F 52 44 >                db      "WORD"
 946+ 73F9             >len_NFA         defl    $ - temp_NFA
 946+ 73F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 946+ 73F5             >
 946+ 73F5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 946+ 73F6 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 946+ 73FA             >                org     $-1                 // alter last byte of Name just above to set
 946+ 73F9 C4          >                db      {b $} | END_BIT     // msb as name end
 946+ 73FA             >
 946+ 73FA E2 73       >                dw      last_NFA            // Link to previous definition Name
 946+ 73FC             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 946+ 73FC CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 946+ 73FF             >
 946+ 73FF             >
 946+ 73FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 946+ 73FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 946+ 73FF             >
 946+ 73FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 947+ 73FF 83 6D 1E 6B                  dw      BLK, FETCH              // blk @
 948+ 7403                                                              // if
 949+ 7403 D8 63                        dw      ZBRANCH
 950+ 7405 0C 00                        dw      Word_Else - $
 951+ 7407 83 6D 1E 6B                  dw          BLK, FETCH          //      blk @
 952+ 740B 88 7D                        dw          BLOCK               //      block ( forward )
 953+ 740D                                                              // else
 954+ 740D C3 63                        dw      BRANCH
 955+ 740F 06 00                        dw      Word_Endif - $
 956+ 7411              Word_Else:
 957+ 7411 0D 6D 1E 6B                  dw         TIB, FETCH           //      tib @
 958+ 7415              Word_Endif:                                     // endif
 959+ 7415 8D 6D 1E 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 959+ 7419 D5 69
 960+ 741B 92 6A 46 65                  dw      SWAP, ENCLOSE           // swap enclose
 961+ 741F 79 6E A5 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 961+ 7423 22 00 C1 73
 962+ 7427 8D 6D FF 6A                  dw      TO_IN, PLUSSTORE        // >in @ +
 963+ 742B 62 6A CE 6E                  dw      OVER, SUBTRACT, TO_R    // over - >r
 963+ 742F 64 69
 964+ 7431 88 69 79 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 964+ 7435 41 6B
 965+ 7437 D5 69                        dw      PLUS                    // +
 966+ 7439 79 6E F2 69                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 966+ 743D 76 69
 967+ 743F 40 68                        dw      CMOVE                   // cmove
 968+ 7441 79 6E                        dw      HERE                    // here
 969+ 7443 3A 69                        dw      EXIT                    // ;
 970+ 7445
 971+ 7445              //  ______________________________________________________________________
 972+ 7445              //
 973+ 7445              // (.")         --
 974+ 7445              // Direct procedure compiled by ." and  .(  It executes TYPE.
 975+ 7445                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 975+ 7445             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 975+ 7445             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 975+ 7445             >
 975+ 7445             >                // dummy db directives used to calculate length of namec
 975+ 7445 28 2E 22 29 >                db      '(.")'
 975+ 7449             >len_NFA         defl    $ - temp_NFA
 975+ 7449             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 975+ 7445             >
 975+ 7445 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 975+ 7446 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 975+ 744A             >                org     $-1                 // alter last byte of Name just above to set
 975+ 7449 A9          >                db      {b $} | END_BIT     // msb as name end
 975+ 744A             >
 975+ 744A F5 73       >                dw      last_NFA            // Link to previous definition Name
 975+ 744C             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 975+ 744C CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 975+ 744F             >
 975+ 744F             >
 975+ 744F             >                endif           ; ok        // for other definitions it "points" the correct handler
 975+ 744F             >                // Use of "; ok" to suppress "warning[fwdref]"
 975+ 744F             >
 975+ 744F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 976+ 744F 88 69 08 72                  dw      R_OP, COUNT             // r count
 977+ 7453 9D 6A F2 69                  dw      DUP, ONE_PLUS           // dup 1+
 978+ 7457 76 69 D5 69                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 978+ 745B 64 69
 979+ 745D 30 72                        dw      TYPE                    // type
 980+ 745F 3A 69                        dw      EXIT                    // ;
 981+ 7461
 982+ 7461              //  ______________________________________________________________________
 983+ 7461              //
 984+ 7461              // char         -- c
 985+ 7461              // get first character from next input word
 986+ 7461                              Colon_Def CHAR,  "CHAR", is_normal
 986+ 7461             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 986+ 7461             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 986+ 7461             >
 986+ 7461             >                // dummy db directives used to calculate length of namec
 986+ 7461 43 48 41 52 >                db      "CHAR"
 986+ 7465             >len_NFA         defl    $ - temp_NFA
 986+ 7465             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 986+ 7461             >
 986+ 7461 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 986+ 7462 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 986+ 7466             >                org     $-1                 // alter last byte of Name just above to set
 986+ 7465 D2          >                db      {b $} | END_BIT     // msb as name end
 986+ 7466             >
 986+ 7466 45 74       >                dw      last_NFA            // Link to previous definition Name
 986+ 7468             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 986+ 7468 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 986+ 746B             >
 986+ 746B             >
 986+ 746B             >                endif           ; ok        // for other definitions it "points" the correct handler
 986+ 746B             >                // Use of "; ok" to suppress "warning[fwdref]"
 986+ 746B             >
 986+ 746B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 987+ 746B 9E 6C FC 73                  dw      BL, WORD                // bl word
 988+ 746F F2 69 35 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 989+ 7473 3A 69                        dw      EXIT                    // ;
 990+ 7475
 991+ 7475              //  ______________________________________________________________________
 992+ 7475              //
 993+ 7475              // ,"           --
 994+ 7475              // compiles a string terminated by " as a counted string from next input stream
 995+ 7475                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 995+ 7475             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 995+ 7475             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 995+ 7475             >
 995+ 7475             >                // dummy db directives used to calculate length of namec
 995+ 7475 2C 22       >                db      ',"'
 995+ 7477             >len_NFA         defl    $ - temp_NFA
 995+ 7477             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 995+ 7475             >
 995+ 7475 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 995+ 7476 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 995+ 7478             >                org     $-1                 // alter last byte of Name just above to set
 995+ 7477 A2          >                db      {b $} | END_BIT     // msb as name end
 995+ 7478             >
 995+ 7478 61 74       >                dw      last_NFA            // Link to previous definition Name
 995+ 747A             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 995+ 747A CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 995+ 747D             >
 995+ 747D             >
 995+ 747D             >                endif           ; ok        // for other definitions it "points" the correct handler
 995+ 747D             >                // Use of "; ok" to suppress "warning[fwdref]"
 995+ 747D             >
 995+ 747D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 996+ 747D A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 997+ 7481 FC 73                        dw      WORD                    // word
 998+ 7483 35 6B F2 69                  dw      CFETCH, ONE_PLUS        // c@ 1+
 999+ 7487 8A 6E                        dw      ALLOT                   // allot
1000+ 7489 6F 6C A9 6E                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1001+ 748D 3A 69                        dw      EXIT
1002+ 748F
1003+ 748F              //  ______________________________________________________________________
1004+ 748F              //
1005+ 748F              // .c           c --
1006+ 748F              // intermediate general purpose string builder, used by ." and .(
1007+ 748F                              Colon_Def DOT_C,  ".C", is_immediate
1007+ 748F             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1007+ 748F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1007+ 748F             >
1007+ 748F             >                // dummy db directives used to calculate length of namec
1007+ 748F 2E 43       >                db      ".C"
1007+ 7491             >len_NFA         defl    $ - temp_NFA
1007+ 7491             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1007+ 748F             >
1007+ 748F C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1007+ 7490 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1007+ 7492             >                org     $-1                 // alter last byte of Name just above to set
1007+ 7491 C3          >                db      {b $} | END_BIT     // msb as name end
1007+ 7492             >
1007+ 7492 75 74       >                dw      last_NFA            // Link to previous definition Name
1007+ 7494             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1007+ 7494 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1007+ 7497             >
1007+ 7497             >
1007+ 7497             >                endif           ; ok        // for other definitions it "points" the correct handler
1007+ 7497             >                // Use of "; ok" to suppress "warning[fwdref]"
1007+ 7497             >
1007+ 7497             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1008+ 7497 D6 6D 1E 6B                  dw      STATE, FETCH            // state @
1009+ 749B                                                              // if
1010+ 749B D8 63                        dw      ZBRANCH
1011+ 749D 12 00                        dw      Dot_C_Else - $
1012+ 749F EC 70 4C 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1013+ 74A3 FC 73 35 6B                  dw          WORD, CFETCH        //      word c@
1014+ 74A7 F2 69 8A 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1015+ 74AB                                                              // else
1016+ 74AB C3 63                        dw      BRANCH
1017+ 74AD 08 00                        dw      Dot_C_Endif - $
1018+ 74AF              Dot_C_Else:
1019+ 74AF FC 73 08 72                  dw          WORD, COUNT, TYPE   //      word count type
1019+ 74B3 30 72
1020+ 74B5              Dot_C_Endif:                                    // endif
1021+ 74B5 3A 69                        dw      EXIT                    ;
1022+ 74B7
1023+ 74B7              //  ______________________________________________________________________
1024+ 74B7              //
1025+ 74B7              // ."           c --
1026+ 74B7                              Colon_Def DOT_QUOTE,  '."', is_immediate
1026+ 74B7             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1026+ 74B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1026+ 74B7             >
1026+ 74B7             >                // dummy db directives used to calculate length of namec
1026+ 74B7 2E 22       >                db      '."'
1026+ 74B9             >len_NFA         defl    $ - temp_NFA
1026+ 74B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1026+ 74B7             >
1026+ 74B7 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1026+ 74B8 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1026+ 74BA             >                org     $-1                 // alter last byte of Name just above to set
1026+ 74B9 A2          >                db      {b $} | END_BIT     // msb as name end
1026+ 74BA             >
1026+ 74BA 8F 74       >                dw      last_NFA            // Link to previous definition Name
1026+ 74BC             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1026+ 74BC CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1026+ 74BF             >
1026+ 74BF             >
1026+ 74BF             >                endif           ; ok        // for other definitions it "points" the correct handler
1026+ 74BF             >                // Use of "; ok" to suppress "warning[fwdref]"
1026+ 74BF             >
1026+ 74BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1027+ 74BF A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1028+ 74C3 94 74                        dw      DOT_C                   // [compile] .c
1029+ 74C5 3A 69                        dw      EXIT                    // ; immediate
1030+ 74C7
1031+ 74C7              //  ______________________________________________________________________
1032+ 74C7              //
1033+ 74C7              // .(           c --
1034+ 74C7                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1034+ 74C7             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1034+ 74C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1034+ 74C7             >
1034+ 74C7             >                // dummy db directives used to calculate length of namec
1034+ 74C7 2E 28       >                db      ".("
1034+ 74C9             >len_NFA         defl    $ - temp_NFA
1034+ 74C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1034+ 74C7             >
1034+ 74C7 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1034+ 74C8 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1034+ 74CA             >                org     $-1                 // alter last byte of Name just above to set
1034+ 74C9 A8          >                db      {b $} | END_BIT     // msb as name end
1034+ 74CA             >
1034+ 74CA B7 74       >                dw      last_NFA            // Link to previous definition Name
1034+ 74CC             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1034+ 74CC CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1034+ 74CF             >
1034+ 74CF             >
1034+ 74CF             >                endif           ; ok        // for other definitions it "points" the correct handler
1034+ 74CF             >                // Use of "; ok" to suppress "warning[fwdref]"
1034+ 74CF             >
1034+ 74CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1035+ 74CF A5 63 29 00                  dw      LIT, ")"                // [char] )
1036+ 74D3 94 74                        dw      DOT_C                   // [compile] .c
1037+ 74D5 3A 69                        dw      EXIT                    // ; immediate
1038+ 74D7
1039+ 74D7              //  ______________________________________________________________________
1040+ 74D7              //
1041+ 74D7              // (sgn)        a -- a f
1042+ 74D7              // determines if char in addr a is a sign (+ or -), and in that case increments
1043+ 74D7              // a flag. Returns f as the sign, true for negative, false for positive.
1044+ 74D7              // called by NUMBER and (EXP)
1045+ 74D7                              Colon_Def CSGN,  "(SGN)", is_normal
1045+ 74D7             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1045+ 74D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1045+ 74D7             >
1045+ 74D7             >                // dummy db directives used to calculate length of namec
1045+ 74D7 28 53 47 4E >                db      "(SGN)"
1045+ 74DB 29          >
1045+ 74DC             >len_NFA         defl    $ - temp_NFA
1045+ 74DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1045+ 74D7             >
1045+ 74D7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1045+ 74D8 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1045+ 74DC 29          >
1045+ 74DD             >                org     $-1                 // alter last byte of Name just above to set
1045+ 74DC A9          >                db      {b $} | END_BIT     // msb as name end
1045+ 74DD             >
1045+ 74DD C7 74       >                dw      last_NFA            // Link to previous definition Name
1045+ 74DF             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1045+ 74DF CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1045+ 74E2             >
1045+ 74E2             >
1045+ 74E2             >                endif           ; ok        // for other definitions it "points" the correct handler
1045+ 74E2             >                // Use of "; ok" to suppress "warning[fwdref]"
1045+ 74E2             >
1045+ 74E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1046+ 74E2 9D 6A F2 69                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1046+ 74E6 35 6B
1047+ 74E8 9D 6A A5 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1047+ 74EC 2D 00 DA 6E
1048+ 74F0                                                              // if
1049+ 74F0 D8 63                        dw      ZBRANCH
1050+ 74F2 12 00                        dw      CSgn_Else_0 - $
1051+ 74F4 70 6A                        dw          DROP                //      drop
1052+ 74F6 F2 69                        dw          ONE_PLUS            //      1+
1053+ 74F8 78 6C EB 6D                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1053+ 74FC FF 6A
1054+ 74FE 78 6C                        dw          ONE                 //      1
1055+ 7500                                                              // else
1056+ 7500 C3 63                        dw      BRANCH
1057+ 7502 16 00                        dw      CSgn_Endif_0 - $
1058+ 7504              CSgn_Else_0:
1059+ 7504 A5 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1059+ 7508 DA 6E
1060+ 750A                                                              //      if
1061+ 750A D8 63                        dw          ZBRANCH
1062+ 750C 0A 00                        dw          CSgn_Endif_1 - $
1063+ 750E F2 69                        dw              ONE_PLUS        //          1+
1064+ 7510 78 6C EB 6D                  dw              ONE, DPL        //          1 dpl
1065+ 7514 FF 6A                        dw              PLUSSTORE       //          +!
1066+ 7516              CSgn_Endif_1                                    //      endif
1067+ 7516 6F 6C                        dw          ZERO                //      0
1068+ 7518              CSgn_Endif_0:                                   // endif
1069+ 7518 3A 69                        dw      EXIT
1070+ 751A
1071+ 751A              //  ______________________________________________________________________
1072+ 751A              //
1073+ 751A              // (number)     d a -- d1 a1
1074+ 751A              // using the current BASE parse characters stored in address a
1075+ 751A              // accumulating a double precision integer d
1076+ 751A              // the process stops at the first not-convertible character
1077+ 751A              // A double-number is kept in CPU registers as HLDE.
1078+ 751A              // On the stack a double number is treated as two single numbers
1079+ 751A              // where HL is on the top of the stack and DE is the second from top,
1080+ 751A              // so in the stack memory it appears as LHED.
1081+ 751A              // Instead, in 2VARIABLE a double number is stored as EDLH.
1082+ 751A                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1082+ 751A             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1082+ 751A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1082+ 751A             >
1082+ 751A             >                // dummy db directives used to calculate length of namec
1082+ 751A 28 4E 55 4D >                db      "(NUMBER)"
1082+ 751E 42 45 52 29 >
1082+ 7522             >len_NFA         defl    $ - temp_NFA
1082+ 7522             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1082+ 751A             >
1082+ 751A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1082+ 751B 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1082+ 751F 42 45 52 29 >
1082+ 7523             >                org     $-1                 // alter last byte of Name just above to set
1082+ 7522 A9          >                db      {b $} | END_BIT     // msb as name end
1082+ 7523             >
1082+ 7523 D7 74       >                dw      last_NFA            // Link to previous definition Name
1082+ 7525             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1082+ 7525 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1082+ 7528             >
1082+ 7528             >
1082+ 7528             >                endif           ; ok        // for other definitions it "points" the correct handler
1082+ 7528             >                // Use of "; ok" to suppress "warning[fwdref]"
1082+ 7528             >
1082+ 7528             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1083+ 7528                                                              // begin
1084+ 7528              CNumber_Begin:
1085+ 7528 F2 69                        dw          ONE_PLUS            //      1+
1086+ 752A 9D 6A 64 69                  dw          DUP, TO_R           //      dup >r
1087+ 752E 35 6B                        dw          CFETCH              //      @
1088+ 7530 E1 6D 1E 6B                  dw          BASE, FETCH         //      base @
1089+ 7534 83 64                        dw          DIGIT               //      digit
1090+ 7536                                                              // while
1091+ 7536 D8 63                        dw      ZBRANCH
1092+ 7538 2C 00                        dw      CNumber_While_end - $
1093+ 753A 92 6A                        dw          SWAP                //      swap
1094+ 753C E1 6D 1E 6B                  dw          BASE, FETCH         //      base @
1095+ 7540 6F 68                        dw          UM_MUL              //      um*
1096+ 7542 70 6A A8 6A                  dw          DROP, ROT           //      drop rot
1097+ 7546 E1 6D 1E 6B                  dw          BASE, FETCH         //      base @
1098+ 754A 6F 68                        dw          UM_MUL              //      um*
1099+ 754C E0 69                        dw          DPLUS               //      d+
1100+ 754E EB 6D 1E 6B                  dw          DPL, FETCH          //      dpl @
1101+ 7552 F2 69                        dw          ONE_PLUS            //      1+
1102+ 7554                                                              //      if
1103+ 7554 D8 63                        dw          ZBRANCH
1104+ 7556 08 00                        dw          CNumber_Endif - $
1105+ 7558 78 6C EB 6D                  dw              ONE, DPL        //          1 dpl
1106+ 755C FF 6A                        dw              PLUSSTORE       //          +!
1107+ 755E              CNumber_Endif:                                  //      endif
1108+ 755E 76 69                        dw             R_TO             //      r>  ( balance rp )
1109+ 7560 C3 63                        dw      BRANCH
1110+ 7562 C6 FF                        dw      CNumber_Begin - $
1111+ 7564              CNumber_While_end:                              // repeat
1112+ 7564 76 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1113+ 7566 3A 69                        dw      EXIT                    // ;
1114+ 7568
1115+ 7568              //  ______________________________________________________________________
1116+ 7568              //
1117+ 7568              // number       a -- d
1118+ 7568                              Colon_Def NUMBER,  "NUMBER", is_normal
1118+ 7568             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1118+ 7568             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1118+ 7568             >
1118+ 7568             >                // dummy db directives used to calculate length of namec
1118+ 7568 4E 55 4D 42 >                db      "NUMBER"
1118+ 756C 45 52       >
1118+ 756E             >len_NFA         defl    $ - temp_NFA
1118+ 756E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1118+ 7568             >
1118+ 7568 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1118+ 7569 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1118+ 756D 45 52       >
1118+ 756F             >                org     $-1                 // alter last byte of Name just above to set
1118+ 756E D2          >                db      {b $} | END_BIT     // msb as name end
1118+ 756F             >
1118+ 756F 1A 75       >                dw      last_NFA            // Link to previous definition Name
1118+ 7571             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1118+ 7571 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1118+ 7574             >
1118+ 7574             >
1118+ 7574             >                endif           ; ok        // for other definitions it "points" the correct handler
1118+ 7574             >                // Use of "; ok" to suppress "warning[fwdref]"
1118+ 7574             >
1118+ 7574             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1119+ 7574 6F 6C 6F 6C                  dw      ZERO, ZERO              // 0 0
1120+ 7578 A8 6A                        dw      ROT                     // rot
1121+ 757A DF 74 64 69                  dw      CSGN, TO_R              // (sgn) >r
1122+ 757E 94 6C EB 6D                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1122+ 7582 29 6B
1123+ 7584 25 75                        dw      CNUMBER                 // (number)
1124+ 7586 9D 6A 35 6B                  dw      DUP, CFETCH             // dup c@
1125+ 758A A5 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1125+ 758E DA 6E
1126+ 7590                                                              // if
1127+ 7590 D8 63                        dw      ZBRANCH
1128+ 7592 0A 00                        dw      Number_Endif_1 - $
1129+ 7594 6F 6C EB 6D                  dw          ZERO, DPL, STORE    //      0 dpl !
1129+ 7598 29 6B
1130+ 759A 25 75                        dw          CNUMBER             //      (number)
1131+ 759C              Number_Endif_1:                                 // endif
1132+ 759C 35 6B 9E 6C                  dw      CFETCH, BL              // c@ bl
1133+ 75A0 CE 6E 6F 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1133+ 75A4 53 70
1134+ 75A6 76 69                        dw      R_TO                    // r>
1135+ 75A8                                                              // if
1136+ 75A8 D8 63                        dw      ZBRANCH
1137+ 75AA 04 00                        dw      Number_Endif_2 - $
1138+ 75AC 4A 6A                        dw          DMINUS              //      dminus
1139+ 75AE              Number_Endif_2:                                 // endif
1140+ 75AE 3A 69                        dw      EXIT                    // ;
1141+ 75B0
1142+ 75B0              //  ______________________________________________________________________
1143+ 75B0              //
1144+ 75B0              // -find        a -- d
1145+ 75B0                              Colon_Def LFIND,  "-FIND", is_normal
1145+ 75B0             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1145+ 75B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1145+ 75B0             >
1145+ 75B0             >                // dummy db directives used to calculate length of namec
1145+ 75B0 2D 46 49 4E >                db      "-FIND"
1145+ 75B4 44          >
1145+ 75B5             >len_NFA         defl    $ - temp_NFA
1145+ 75B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1145+ 75B0             >
1145+ 75B0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1145+ 75B1 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1145+ 75B5 44          >
1145+ 75B6             >                org     $-1                 // alter last byte of Name just above to set
1145+ 75B5 C4          >                db      {b $} | END_BIT     // msb as name end
1145+ 75B6             >
1145+ 75B6 68 75       >                dw      last_NFA            // Link to previous definition Name
1145+ 75B8             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1145+ 75B8 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1145+ 75BB             >
1145+ 75BB             >
1145+ 75BB             >                endif           ; ok        // for other definitions it "points" the correct handler
1145+ 75BB             >                // Use of "; ok" to suppress "warning[fwdref]"
1145+ 75BB             >
1145+ 75BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1146+ 75BB 9E 6C FC 73                  dw      BL, WORD                // bl word
1147+ 75BF BC 6D 1E 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1147+ 75C3 1E 6B
1148+ 75C5 F0 64                        dw      C_FIND                  // (find)
1149+ 75C7 52 6F                        dw      QDUP                    // ?dup
1150+ 75C9 97 69                        dw      ZEQUAL                  // 0=
1151+ 75CB                                                              // if
1152+ 75CB D8 63                        dw      ZBRANCH
1153+ 75CD 08 00                        dw      LFind_Endif - $
1154+ 75CF 79 6E                        dw          HERE                //      here
1155+ 75D1 C1 6F                        dw          LATEST              //      latest
1156+ 75D3 F0 64                        dw          C_FIND              //      (find)
1157+ 75D5              LFind_Endif:                                    // endif
1158+ 75D5 3A 69                        dw      EXIT                    // ;
1159+ 75D7
1160+ 75D7              //  ______________________________________________________________________
1161+ 75D7              //
1162+ 75D7              // (abort)      --
1163+ 75D7                              Colon_Def CABORT,  "(ABORT)", is_normal
1163+ 75D7             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1163+ 75D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1163+ 75D7             >
1163+ 75D7             >                // dummy db directives used to calculate length of namec
1163+ 75D7 28 41 42 4F >                db      "(ABORT)"
1163+ 75DB 52 54 29    >
1163+ 75DE             >len_NFA         defl    $ - temp_NFA
1163+ 75DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1163+ 75D7             >
1163+ 75D7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1163+ 75D8 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1163+ 75DC 52 54 29    >
1163+ 75DF             >                org     $-1                 // alter last byte of Name just above to set
1163+ 75DE A9          >                db      {b $} | END_BIT     // msb as name end
1163+ 75DF             >
1163+ 75DF B0 75       >                dw      last_NFA            // Link to previous definition Name
1163+ 75E1             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1163+ 75E1 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1163+ 75E4             >
1163+ 75E4             >
1163+ 75E4             >                endif           ; ok        // for other definitions it "points" the correct handler
1163+ 75E4             >                // Use of "; ok" to suppress "warning[fwdref]"
1163+ 75E4             >
1163+ 75E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1164+ 75E4 BD 78                        dw      ABORT                   // abort
1165+ 75E6 3A 69                        dw      EXIT                    // ;
1166+ 75E8
1167+ 75E8              //  ______________________________________________________________________
1168+ 75E8              //
1169+ 75E8              // error        n --
1170+ 75E8              // raise an error
1171+ 75E8              // if WARNING is 0, prints "MSG#n".
1172+ 75E8              // if WARNING is 1, prints line n of screen 4.
1173+ 75E8              // if WARNING is -1 does (ABORT) that normally does ABORT
1174+ 75E8              // value can be negative or beyond block 4.
1175+ 75E8                              Colon_Def ERROR,  "ERROR", is_normal
1175+ 75E8             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1175+ 75E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1175+ 75E8             >
1175+ 75E8             >                // dummy db directives used to calculate length of namec
1175+ 75E8 45 52 52 4F >                db      "ERROR"
1175+ 75EC 52          >
1175+ 75ED             >len_NFA         defl    $ - temp_NFA
1175+ 75ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1175+ 75E8             >
1175+ 75E8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1175+ 75E9 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1175+ 75ED 52          >
1175+ 75EE             >                org     $-1                 // alter last byte of Name just above to set
1175+ 75ED D2          >                db      {b $} | END_BIT     // msb as name end
1175+ 75EE             >
1175+ 75EE D7 75       >                dw      last_NFA            // Link to previous definition Name
1175+ 75F0             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1175+ 75F0 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1175+ 75F3             >
1175+ 75F3             >
1175+ 75F3             >                endif           ; ok        // for other definitions it "points" the correct handler
1175+ 75F3             >                // Use of "; ok" to suppress "warning[fwdref]"
1175+ 75F3             >
1175+ 75F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1176+ 75F3 27 6D 1E 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1176+ 75F7 B1 69
1177+ 75F9                                                              // if
1178+ 75F9 D8 63                        dw      ZBRANCH
1179+ 75FB 04 00                        dw      Error_Endif_1 - $
1180+ 75FD E1 75                        dw          CABORT              //      (abort)
1181+ 75FF              Error_Endif_1:                                  // endif
1182+ 75FF 79 6E 08 72                  dw      HERE, COUNT, TYPE       // here count type
1182+ 7603 30 72
1183+ 7605 4C 74                        dw      C_DOT_QUOTE             // .( ? )
1184+ 7607 02 3F 20                     db      2, "? "
1185+ 760A 00 7B                        dw      MESSAGE                 // message  ( forward )
1186+ 760C FA 6C 1E 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1186+ 7610 17 69
1187+ 7612 83 6D 1E 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1187+ 7616 52 6F
1188+ 7618                                                              // if
1189+ 7618 D8 63                        dw      ZBRANCH
1190+ 761A 08 00                        dw      Error_Endif_2 - $
1191+ 761C 8D 6D 1E 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1191+ 7620 92 6A
1192+ 7622              Error_Endif_2:                                  // endif
1193+ 7622 7B 78                        dw      QUIT                    // quit ( forward )
1194+ 7624 3A 69                        dw      EXIT                    // ;
1195+ 7626              //  ______________________________________________________________________
1196+ 7626              //
1197+ 7626              // id.          nfa --
1198+ 7626                              Colon_Def ID_DOT,  "ID.", is_normal
1198+ 7626             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1198+ 7626             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1198+ 7626             >
1198+ 7626             >                // dummy db directives used to calculate length of namec
1198+ 7626 49 44 2E    >                db      "ID."
1198+ 7629             >len_NFA         defl    $ - temp_NFA
1198+ 7629             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1198+ 7626             >
1198+ 7626 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1198+ 7627 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1198+ 762A             >                org     $-1                 // alter last byte of Name just above to set
1198+ 7629 AE          >                db      {b $} | END_BIT     // msb as name end
1198+ 762A             >
1198+ 762A E8 75       >                dw      last_NFA            // Link to previous definition Name
1198+ 762C             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1198+ 762C CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1198+ 762F             >
1198+ 762F             >
1198+ 762F             >                endif           ; ok        // for other definitions it "points" the correct handler
1198+ 762F             >                // Use of "; ok" to suppress "warning[fwdref]"
1198+ 762F             >
1198+ 762F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1199+ 762F E8 73 A5 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1199+ 7633 20 00 A5 63
1199+ 7637 60 00
1200+ 7639 97 73                        dw      FILL                    // fill
1201+ 763B 9D 6A 07 70                  dw      DUP, PFA, LFA           // dup pfa lfa
1201+ 763F D2 6F
1202+ 7641 62 6A CE 6E                  dw      OVER, SUBTRACT          // over -
1203+ 7645 E8 73 92 6A                  dw      PAD, SWAP               // pad swap
1204+ 7649 40 68                        dw      CMOVE                   // cmove
1205+ 764B E8 73 08 72                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1205+ 764F A5 63 1F 00
1206+ 7653 D8 68                        dw      AND_OP                  // and  ( use only lower bits )
1207+ 7655 30 72 89 6F                  dw      TYPE, SPACE             // type
1208+ 7659 3A 69                        dw      EXIT                    // ;
1209+ 765B
1210+ 765B              //  ______________________________________________________________________
1211+ 765B              //
1212+ 765B              // code         -- cccc
1213+ 765B                              Colon_Def CODE,  "CODE", is_normal
1213+ 765B             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1213+ 765B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1213+ 765B             >
1213+ 765B             >                // dummy db directives used to calculate length of namec
1213+ 765B 43 4F 44 45 >                db      "CODE"
1213+ 765F             >len_NFA         defl    $ - temp_NFA
1213+ 765F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1213+ 765B             >
1213+ 765B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1213+ 765C 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1213+ 7660             >                org     $-1                 // alter last byte of Name just above to set
1213+ 765F C5          >                db      {b $} | END_BIT     // msb as name end
1213+ 7660             >
1213+ 7660 26 76       >                dw      last_NFA            // Link to previous definition Name
1213+ 7662             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1213+ 7662 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1213+ 7665             >
1213+ 7665             >
1213+ 7665             >                endif           ; ok        // for other definitions it "points" the correct handler
1213+ 7665             >                // Use of "; ok" to suppress "warning[fwdref]"
1213+ 7665             >
1213+ 7665             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1214+ 7665 B8 75                        dw      LFIND                   // -find
1215+ 7667                                                              // if
1216+ 7667 D8 63                        dw      ZBRANCH
1217+ 7669 10 00                        dw      Code_Endif - $
1218+ 766B 70 6A                        dw          DROP                //      drop
1219+ 766D 2F 70 2C 76                  dw          TO_NAME, ID_DOT     //      >name id.
1220+ 7671 A5 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1220+ 7675 00 7B
1221+ 7677 89 6F                        dw          SPACE               //      space
1222+ 7679              Code_Endif:                                     // endif
1223+ 7679 79 6E                        dw      HERE                    // here
1224+ 767B                                                              // ( ---- here begins NFA ---- )
1225+ 767B 9D 6A 35 6B                  dw      DUP, CFETCH             // dup c@
1226+ 767F 19 6D 1E 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1226+ 7683 23 6F
1227+ 7685 F2 69 8A 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1228+ 7689 9D 6A                        dw      DUP                     // dup
1229+ 768B A5 63                        dw      LIT
1230+ 768D A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1231+ 768F 13 6B                        dw      TOGGLE                  // toggle
1232+ 7691 79 6E FC 69                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1233+ 7695 A5 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1233+ 7699 13 6B
1234+ 769B                                                              // ( ---- here is LFA ---- )
1235+ 769B C1 6F 97 6E                  dw      LATEST, COMMA           // latest ,
1236+ 769F CA 6D 1E 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1236+ 76A3 29 6B
1237+ 76A5                                                              // ( ---- here is LFA ---- )
1238+ 76A5              //              dw      HERE, CELL_PLUS, COMMA  // ( CFA is empty and PFA yet to exist )
1239+ 76A5 3A 69                        dw      EXIT                    // ;
1240+ 76A7
1241+ 76A7              //  ______________________________________________________________________
1242+ 76A7              //
1243+ 76A7              // create       -- cccc     ( compile time )
1244+ 76A7              //              -- a        ( run time )
1245+ 76A7                              Colon_Def CREATE,  "CREATE", is_normal
1245+ 76A7             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1245+ 76A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1245+ 76A7             >
1245+ 76A7             >                // dummy db directives used to calculate length of namec
1245+ 76A7 43 52 45 41 >                db      "CREATE"
1245+ 76AB 54 45       >
1245+ 76AD             >len_NFA         defl    $ - temp_NFA
1245+ 76AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1245+ 76A7             >
1245+ 76A7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1245+ 76A8 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1245+ 76AC 54 45       >
1245+ 76AE             >                org     $-1                 // alter last byte of Name just above to set
1245+ 76AD C5          >                db      {b $} | END_BIT     // msb as name end
1245+ 76AE             >
1245+ 76AE 5B 76       >                dw      last_NFA            // Link to previous definition Name
1245+ 76B0             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1245+ 76B0 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1245+ 76B3             >
1245+ 76B3             >
1245+ 76B3             >                endif           ; ok        // for other definitions it "points" the correct handler
1245+ 76B3             >                // Use of "; ok" to suppress "warning[fwdref]"
1245+ 76B3             >
1245+ 76B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1246+ 76B3 62 76 3C 71                  dw      CODE, SMUDGE            // code smudge
1247+ 76B7 A5 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1247+ 76BB A9 6E
1248+ 76BD A5 63 4E 6C                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1248+ 76C1 97 6E
1249+ 76C3 96 71                        dw      C_SEMICOLON_CODE
1250+ 76C5                              // this routine is called from the call coded in CFA
1251+ 76C5              Create_Ptr:
1252+ 76C5
1253+ 76C5
1254+ 76C5
1255+ 76C5                              next
1255+ 76C5 DD E9       >                jp      (ix)
1256+ 76C7
1257+ 76C7              //  ______________________________________________________________________
1258+ 76C7              //
1259+ 76C7              // [compile]    -- cccc     ( compile time )
1260+ 76C7                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1260+ 76C7             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1260+ 76C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1260+ 76C7             >
1260+ 76C7             >                // dummy db directives used to calculate length of namec
1260+ 76C7 5B 43 4F 4D >                db      "[COMPILE]"
1260+ 76CB 50 49 4C 45 >
1260+ 76CF 5D          >
1260+ 76D0             >len_NFA         defl    $ - temp_NFA
1260+ 76D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1260+ 76C7             >
1260+ 76C7 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1260+ 76C8 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1260+ 76CC 50 49 4C 45 >
1260+ 76D0 5D          >
1260+ 76D1             >                org     $-1                 // alter last byte of Name just above to set
1260+ 76D0 DD          >                db      {b $} | END_BIT     // msb as name end
1260+ 76D1             >
1260+ 76D1 A7 76       >                dw      last_NFA            // Link to previous definition Name
1260+ 76D3             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1260+ 76D3 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1260+ 76D6             >
1260+ 76D6             >
1260+ 76D6             >                endif           ; ok        // for other definitions it "points" the correct handler
1260+ 76D6             >                // Use of "; ok" to suppress "warning[fwdref]"
1260+ 76D6             >
1260+ 76D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1261+ 76D6 B8 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1262+ 76D8 97 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1263+ 76DA 6F 6C 53 70                  dw      ZERO, QERROR            // 0 ?error
1264+ 76DE 70 6A                        dw      DROP                    // drop       (  cfa  )
1265+ 76E0 97 6E                        dw      COMMA                   // ,
1266+ 76E2 3A 69                        dw      EXIT                    // ; immediate
1267+ 76E4
1268+ 76E4              //  ______________________________________________________________________
1269+ 76E4              //
1270+ 76E4              // literal      n --      ( compile time )
1271+ 76E4                              Colon_Def LITERAL,  "LITERAL", is_immediate
1271+ 76E4             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1271+ 76E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1271+ 76E4             >
1271+ 76E4             >                // dummy db directives used to calculate length of namec
1271+ 76E4 4C 49 54 45 >                db      "LITERAL"
1271+ 76E8 52 41 4C    >
1271+ 76EB             >len_NFA         defl    $ - temp_NFA
1271+ 76EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1271+ 76E4             >
1271+ 76E4 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1271+ 76E5 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1271+ 76E9 52 41 4C    >
1271+ 76EC             >                org     $-1                 // alter last byte of Name just above to set
1271+ 76EB CC          >                db      {b $} | END_BIT     // msb as name end
1271+ 76EC             >
1271+ 76EC C7 76       >                dw      last_NFA            // Link to previous definition Name
1271+ 76EE             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1271+ 76EE CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1271+ 76F1             >
1271+ 76F1             >
1271+ 76F1             >                endif           ; ok        // for other definitions it "points" the correct handler
1271+ 76F1             >                // Use of "; ok" to suppress "warning[fwdref]"
1271+ 76F1             >
1271+ 76F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1272+ 76F1 D6 6D 1E 6B                  dw      STATE, FETCH            // state @
1273+ 76F5                                                              // if
1274+ 76F5 D8 63                        dw      ZBRANCH
1275+ 76F7 08 00                        dw      Literal_Endif - $
1276+ 76F9 EC 70 A5 63                  dw          COMPILE, LIT        //      compile lit
1277+ 76FD 97 6E                        dw          COMMA               //      ,
1278+ 76FF              Literal_Endif:                                  // endif
1279+ 76FF 3A 69                        dw      EXIT                    // ; immediate
1280+ 7701
1281+ 7701              //  ______________________________________________________________________
1282+ 7701              //
1283+ 7701              // dliteral     n --      ( compile time )
1284+ 7701                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1284+ 7701             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1284+ 7701             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1284+ 7701             >
1284+ 7701             >                // dummy db directives used to calculate length of namec
1284+ 7701 44 4C 49 54 >                db      "DLITERAL"
1284+ 7705 45 52 41 4C >
1284+ 7709             >len_NFA         defl    $ - temp_NFA
1284+ 7709             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1284+ 7701             >
1284+ 7701 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1284+ 7702 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1284+ 7706 45 52 41 4C >
1284+ 770A             >                org     $-1                 // alter last byte of Name just above to set
1284+ 7709 CC          >                db      {b $} | END_BIT     // msb as name end
1284+ 770A             >
1284+ 770A E4 76       >                dw      last_NFA            // Link to previous definition Name
1284+ 770C             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1284+ 770C CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1284+ 770F             >
1284+ 770F             >
1284+ 770F             >                endif           ; ok        // for other definitions it "points" the correct handler
1284+ 770F             >                // Use of "; ok" to suppress "warning[fwdref]"
1284+ 770F             >
1284+ 770F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1285+ 770F D6 6D 1E 6B                  dw      STATE, FETCH            // state @
1286+ 7713                                                              // if
1287+ 7713 D8 63                        dw      ZBRANCH
1288+ 7715 08 00                        dw      DLiteral_Endif - $
1289+ 7717 92 6A                        dw          SWAP                //      swap
1290+ 7719 EE 76 EE 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1291+ 771D              DLiteral_Endif:                                 // endif
1292+ 771D 3A 69                        dw      EXIT                    // ; immediate
1293+ 771F
1294+ 771F              //  ______________________________________________________________________
1295+ 771F              //
1296+ 771F              // [char]       n --      ( compile time )
1297+ 771F              // inside colon definition, gets first character from next input word
1298+ 771F              // and compiles it as literal.
1299+ 771F                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1299+ 771F             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1299+ 771F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1299+ 771F             >
1299+ 771F             >                // dummy db directives used to calculate length of namec
1299+ 771F 5B 43 48 41 >                db      "[CHAR]"
1299+ 7723 52 5D       >
1299+ 7725             >len_NFA         defl    $ - temp_NFA
1299+ 7725             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1299+ 771F             >
1299+ 771F C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1299+ 7720 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1299+ 7724 52 5D       >
1299+ 7726             >                org     $-1                 // alter last byte of Name just above to set
1299+ 7725 DD          >                db      {b $} | END_BIT     // msb as name end
1299+ 7726             >
1299+ 7726 01 77       >                dw      last_NFA            // Link to previous definition Name
1299+ 7728             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1299+ 7728 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1299+ 772B             >
1299+ 772B             >
1299+ 772B             >                endif           ; ok        // for other definitions it "points" the correct handler
1299+ 772B             >                // Use of "; ok" to suppress "warning[fwdref]"
1299+ 772B             >
1299+ 772B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1300+ 772B 68 74 EE 76                  dw      CHAR, LITERAL           // char [compile] literal
1301+ 772F 3A 69                        dw      EXIT                    // ; immediate
1302+ 7731
1303+ 7731              //  ______________________________________________________________________
1304+ 7731              //
1305+ 7731              // 0x00         n --      ( compile time )
1306+ 7731                              Colon_Def NUL_WORD,  $00, is_immediate
1306+ 7731             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1306+ 7731             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1306+ 7731             >
1306+ 7731             >                // dummy db directives used to calculate length of namec
1306+ 7731 00          >                db      $00
1306+ 7732             >len_NFA         defl    $ - temp_NFA
1306+ 7732             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1306+ 7731             >
1306+ 7731 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1306+ 7732 00          >                db      $00               // name string in 7-bit ascii, but
1306+ 7733             >                org     $-1                 // alter last byte of Name just above to set
1306+ 7732 80          >                db      {b $} | END_BIT     // msb as name end
1306+ 7733             >
1306+ 7733 1F 77       >                dw      last_NFA            // Link to previous definition Name
1306+ 7735             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1306+ 7735 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1306+ 7738             >
1306+ 7738             >
1306+ 7738             >                endif           ; ok        // for other definitions it "points" the correct handler
1306+ 7738             >                // Use of "; ok" to suppress "warning[fwdref]"
1306+ 7738             >
1306+ 7738             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1307+ 7738 83 6D 1E 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1307+ 773C 78 6C
1308+ 773E 14 6F                        dw      GREATER                 // > if
1309+ 7740                                                              // if
1310+ 7740 D8 63                        dw      ZBRANCH
1311+ 7742 28 00                        dw      Nul_Else_1 - $
1312+ 7744 78 6C 83 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1312+ 7748 FF 6A
1313+ 774A 6F 6C 8D 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
1313+ 774E 29 6B
1314+ 7750 83 6D 1E 6B                  dw          BLK, FETCH          //      blk @
1315+ 7754 C3 6C                        dw          BSCR                //      b/scr
1316+ 7756 FC 69                        dw          ONE_SUBTRACT        //      1 -
1317+ 7758 D8 68                        dw          AND_OP              //      and  ( this is tricky )
1318+ 775A 97 69                        dw          ZEQUAL              //      0=
1319+ 775C                                                              //      if
1320+ 775C D8 63                        dw          ZBRANCH
1321+ 775E 08 00                        dw          Nul_Endif_2 - $
1322+ 7760 87 70                        dw              QEXEC           //          ?exec
1323+ 7762 76 69 70 6A                  dw              R_TO, DROP      //          r> drop
1324+ 7766              Nul_Endif_2:                                    //      endif
1325+ 7766 C3 63                        dw      BRANCH
1326+ 7768 06 00                        dw      Nul_Endif_1 - $
1327+ 776A              Nul_Else_1:                                     // else
1328+ 776A 76 69 70 6A                  dw          R_TO, DROP          //      r> drop
1329+ 776E              Nul_Endif_1:                                    // endif
1330+ 776E 3A 69                        dw      EXIT                    // ;
1331+ 7770
1332+ 7770              //  ______________________________________________________________________
1333+ 7770              //
1334+ 7770              // ?stack       --
1335+ 7770              // Raise error #1 if stack is empty and you pop it
1336+ 7770              // Raise error #7 if stack is full.
1337+ 7770              // This means SP must always stay between HERE and FFFF
1338+ 7770              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1339+ 7770              // for Next 8K MMU paging this is $DOE8
1340+ 7770                              Colon_Def QSTACK, "?STACK", is_normal
1340+ 7770             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1340+ 7770             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1340+ 7770             >
1340+ 7770             >                // dummy db directives used to calculate length of namec
1340+ 7770 3F 53 54 41 >                db      "?STACK"
1340+ 7774 43 4B       >
1340+ 7776             >len_NFA         defl    $ - temp_NFA
1340+ 7776             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1340+ 7770             >
1340+ 7770 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1340+ 7771 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1340+ 7775 43 4B       >
1340+ 7777             >                org     $-1                 // alter last byte of Name just above to set
1340+ 7776 CB          >                db      {b $} | END_BIT     // msb as name end
1340+ 7777             >
1340+ 7777 31 77       >                dw      last_NFA            // Link to previous definition Name
1340+ 7779             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1340+ 7779 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1340+ 777C             >
1340+ 777C             >
1340+ 777C             >                endif           ; ok        // for other definitions it "points" the correct handler
1340+ 777C             >                // Use of "; ok" to suppress "warning[fwdref]"
1340+ 777C             >
1340+ 777C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1341+ 777C 0A 69                        dw      SPFETCH                 // sp@
1342+ 777E FA 6C 1E 6B                  dw      S0, FETCH               // s0 @
1343+ 7782 92 6A E8 6E                  dw      SWAP, ULESS             // swap u<
1344+ 7786 78 6C 53 70                  dw      ONE, QERROR             // 1 ?error
1345+ 778A 79 6E                        dw      HERE                    // here
1346+ 778C FA 6C 1E 6B                  dw      S0, FETCH, LESS         // s0 @ <
1346+ 7790 FA 6E
1347+ 7792                                                              // if
1348+ 7792 D8 63                        dw      ZBRANCH
1349+ 7794 14 00                        dw      QStack_Endif - $
1350+ 7796 0A 69                        dw          SPFETCH             //      sp@
1351+ 7798 79 6E A5 63                  dw          HERE, LIT, 128      //      here 128
1351+ 779C 80 00
1352+ 779E D5 69 E8 6E                  dw          PLUS, ULESS         //      plus u<
1353+ 77A2 A5 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1353+ 77A6 53 70
1354+ 77A8              QStack_Endif:                                   // endif
1355+ 77A8 3A 69                        dw      EXIT                    // ;
1356+ 77AA
1357+ 77AA
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
 112  77AA                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
   1+ 77AA              //  ______________________________________________________________________
   2+ 77AA              //
   3+ 77AA              //  L2.asm
   4+ 77AA              //
   5+ 77AA              //  Level-2
   6+ 77AA              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 77AA              //  ______________________________________________________________________
   8+ 77AA
   9+ 77AA
  10+ 77AA              //  ______________________________________________________________________
  11+ 77AA              //
  12+ 77AA              // interpret    --
  13+ 77AA              // This is the text interpreter.
  14+ 77AA              // It executes or compiles, depending on STATE, the text coming from
  15+ 77AA              // current input stream.
  16+ 77AA              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 77AA              // the word is interpreted as numeric and converted, using current BASE,
  18+ 77AA              // leaving on top of stack a single or double precision number, depending
  19+ 77AA              // on the presence of a decimal point.
  20+ 77AA              // If the number conversion fails, the terminal is notified with ? followed
  21+ 77AA              // by the offending word.
  22+ 77AA                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 77AA             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 77AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 77AA             >
  22+ 77AA             >                // dummy db directives used to calculate length of namec
  22+ 77AA 49 4E 54 45 >                db      "INTERPRET"
  22+ 77AE 52 50 52 45 >
  22+ 77B2 54          >
  22+ 77B3             >len_NFA         defl    $ - temp_NFA
  22+ 77B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 77AA             >
  22+ 77AA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 77AB 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 77AF 52 50 52 45 >
  22+ 77B3 54          >
  22+ 77B4             >                org     $-1                 // alter last byte of Name just above to set
  22+ 77B3 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 77B4             >
  22+ 77B4 70 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 77B6             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 77B6 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 77B9             >
  22+ 77B9             >
  22+ 77B9             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 77B9             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 77B9             >
  22+ 77B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 77B9
  24+ 77B9              Interpret_Begin:                                        // begin
  25+ 77B9 B8 75                        dw          LFIND                       //      -find
  26+ 77BB                                                                      //      if
  27+ 77BB D8 63                        dw          ZBRANCH
  28+ 77BD 1A 00                        dw          Interpret_Else_1 - $
  29+ 77BF D6 6D 1E 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 77C3 FA 6E
  30+ 77C5                                                                      //          if
  31+ 77C5 D8 63                        dw              ZBRANCH
  32+ 77C7 08 00                        dw              Interpret_Else_2 - $
  33+ 77C9 0A 71                        dw                  COMPILE_XT          //              compile,
  34+ 77CB                                                                      //          else
  35+ 77CB C3 63                        dw              BRANCH
  36+ 77CD 06 00                        dw              Interpret_Endif_2 - $
  37+ 77CF              Interpret_Else_2:
  38+ 77CF B8 63 1A 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77D3              Interpret_Endif_2:                                      //          endif
  40+ 77D3                                                                      //      else
  41+ 77D3 C3 63                        dw          BRANCH
  42+ 77D5 1A 00                        dw          Interpret_Endif_1 - $
  43+ 77D7              Interpret_Else_1:
  44+ 77D7 79 6E 71 75                  dw              HERE, NUMBER            //          here number
  45+ 77DB EB 6D 1E 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77DF F2 69
  46+ 77E1                                                                      //          if
  47+ 77E1 D8 63                        dw              ZBRANCH
  48+ 77E3 08 00                        dw              Interpret_Else_3 - $
  49+ 77E5              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77E5              //                                                      //              if
  51+ 77E5              //              dw                  ZBRANCH
  52+ 77E5              //              dw                  Interpret_Endif_4 - $
  53+ 77E5              //              dw                      ONE, ZERO       //                  1 0
  54+ 77E5              //              dw                      TWO_DROP        //                  2drop
  55+ 77E5              //Interpret_Endif_4:                                      //              endif
  56+ 77E5 0C 77                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77E7                                                                      //          else
  58+ 77E7 C3 63                        dw              BRANCH
  59+ 77E9 06 00                        dw              Interpret_Endif_3 - $
  60+ 77EB              Interpret_Else_3:
  61+ 77EB 70 6A                        dw                  DROP                //              drop
  62+ 77ED EE 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77EF              Interpret_Endif_3:                                      //          endif
  64+ 77EF              Interpret_Endif_1:                                      //      endif
  65+ 77EF 79 77                        dw          QSTACK                      //      ?stack
  66+ 77F1 F0 66                        dw          QTERMINAL                   //      ?terminal
  67+ 77F3                                                                      //      if
  68+ 77F3 D8 63                        dw          ZBRANCH
  69+ 77F5 04 00                        dw          Interpret_Endif_5 - $
  70+ 77F7 E1 75                        dw              CABORT                  //          (abort)
  71+ 77F9              Interpret_Endif_5:                                      //      endif
  72+ 77F9 C3 63                        dw      BRANCH
  73+ 77FB BE FF                        dw      Interpret_Begin - $
  74+ 77FD 3A 69                        dw      EXIT                            // ;
  75+ 77FF
  76+ 77FF              //  ______________________________________________________________________
  77+ 77FF              //
  78+ 77FF              // vocabulary   -- cccc     ( compile time )
  79+ 77FF              // Defining word used in the form   VOCABULARY cccc
  80+ 77FF              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 77FF              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 77FF              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 77FF              // so new definitions can be inserted in that vocabulary.
  84+ 77FF                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 77FF             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 77FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 77FF             >
  84+ 77FF             >                // dummy db directives used to calculate length of namec
  84+ 77FF 56 4F 43 41 >                db      "VOCABULARY"
  84+ 7803 42 55 4C 41 >
  84+ 7807 52 59       >
  84+ 7809             >len_NFA         defl    $ - temp_NFA
  84+ 7809             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 77FF             >
  84+ 77FF 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 7800 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 7804 42 55 4C 41 >
  84+ 7808 52 59       >
  84+ 780A             >                org     $-1                 // alter last byte of Name just above to set
  84+ 7809 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 780A             >
  84+ 780A AA 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 780C             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 780C CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 780F             >
  84+ 780F             >
  84+ 780F             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 780F             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 780F             >
  84+ 780F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 780F
  86+ 780F D0 71                        dw      CBUILDS
  87+ 7811
  88+ 7811 A5 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 7815 97 6E
  89+ 7817 CA 6D 1E 6B                  dw      CURRENT, FETCH          // current @
  90+ 781B 1F 6A 97 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 781F 79 6E                        dw      HERE                    // here
  92+ 7821 4B 6D 1E 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 7825 97 6E
  93+ 7827 4B 6D 29 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 782B
  95+ 782B E1 71                        dw      DOES_TO                 // does>
  96+ 782D              Vocabulary_Does:
  97+ 782D 14 6A                        dw      CELL_PLUS               // cell+
  98+ 782F BC 6D 29 6B                  dw      CONTEXT, STORE          // context !
  99+ 7833 3A 69                        dw      EXIT                    // ;
 100+ 7835
 101+ 7835              //  ______________________________________________________________________
 102+ 7835              //
 103+ 7835              // forth        --
 104+ 7835              // Name of the first vocabulary.
 105+ 7835              // It makes FORTH the CONTEXT vocabulary.
 106+ 7835              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7835              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7835              // of a colon definition to be able to select the vocabulary.
 109+ 7835
 110+ 7835                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7835             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7835             >
 110+ 7835             >                // dummy db directives used to calculate length of namec
 110+ 7835 46 4F 52 54 >                db      "FORTH"
 110+ 7839 48          >
 110+ 783A             >len_NFA         defl    $ - temp_NFA
 110+ 783A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7835             >
 110+ 7835 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 7836 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 783A 48          >
 110+ 783B             >                org     $-1                 // alter last byte of Name just above to set
 110+ 783A C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 783B             >
 110+ 783B FF 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 783D             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 783D CD EE 71    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 7840             >
 110+ 7840             >
 110+ 7840             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 7840             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 7840             >
 110+ 7840             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 7840 2D 78                        dw      Vocabulary_Does
 112+ 7842 81 A0                        db      $81, $A0
 113+ 7844              Forth_Latest_Ptr:
 114+ 7844 B5 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 7846              Voclink_Ptr:
 116+ 7846 00 00                        dw      0
 117+ 7848              // Any new vocabulary is structured as follow:
 118+ 7848              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7848              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7848              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7848              //       at creations it points to the null-word of its parent vocabulary
 122+ 7848              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7848              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7848              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7848              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7848              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7848              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7848
 129+ 7848              //  ______________________________________________________________________
 130+ 7848              //
 131+ 7848              // definitions  --
 132+ 7848              // Used in the form  cccc DEFINITIONS
 133+ 7848              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7848              // vocabulary cccc.
 135+ 7848                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7848             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7848             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7848             >
 135+ 7848             >                // dummy db directives used to calculate length of namec
 135+ 7848 44 45 46 49 >                db      "DEFINITIONS"
 135+ 784C 4E 49 54 49 >
 135+ 7850 4F 4E 53    >
 135+ 7853             >len_NFA         defl    $ - temp_NFA
 135+ 7853             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7848             >
 135+ 7848 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7849 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 784D 4E 49 54 49 >
 135+ 7851 4F 4E 53    >
 135+ 7854             >                org     $-1                 // alter last byte of Name just above to set
 135+ 7853 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7854             >
 135+ 7854 35 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 7856             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7856 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7859             >
 135+ 7859             >
 135+ 7859             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7859             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7859             >
 135+ 7859             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7859 BC 6D 1E 6B                  dw      CONTEXT, FETCH          // context @
 137+ 785D CA 6D 29 6B                  dw      CURRENT, STORE          // current !
 138+ 7861 3A 69                        dw      EXIT                    // ;
 139+ 7863
 140+ 7863              //  ______________________________________________________________________
 141+ 7863              //
 142+ 7863              // (            -- cccc )
 143+ 7863              // the following text is interpreted as a comment until a closing )
 144+ 7863                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7863             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7863             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7863             >
 144+ 7863             >                // dummy db directives used to calculate length of namec
 144+ 7863 28          >                db      "("
 144+ 7864             >len_NFA         defl    $ - temp_NFA
 144+ 7864             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7863             >
 144+ 7863 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7864 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 7865             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7864 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 7865             >
 144+ 7865 48 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7867             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7867 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 786A             >
 144+ 786A             >
 144+ 786A             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 786A             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 786A             >
 144+ 786A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 786A A5 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 786E FC 73 70 6A                  dw      WORD, DROP              // word drop
 147+ 7872 3A 69                        dw      EXIT                    // ;
 148+ 7874
 149+ 7874              //  ______________________________________________________________________
 150+ 7874              //
 151+ 7874              // quit         --
 152+ 7874              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7874                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7874             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7874             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7874             >
 153+ 7874             >                // dummy db directives used to calculate length of namec
 153+ 7874 51 55 49 54 >                db      "QUIT"
 153+ 7878             >len_NFA         defl    $ - temp_NFA
 153+ 7878             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7874             >
 153+ 7874 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7875 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7879             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7878 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7879             >
 153+ 7879 63 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 787B             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 787B CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 787E             >
 153+ 787E             >
 153+ 787E             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 787E             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 787E             >
 153+ 787E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 787E
 155+ 787E 4C 6E 1E 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7882 74 67 70 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 7886 6F 6C 4C 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 788A 29 6B
 158+ 788C 6F 6C 83 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 7890 29 6B
 159+ 7892 17 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 7894                                                              // begin
 161+ 7894              Quit_Begin:
 162+ 7894 03 6D 1E 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 7898 2D 69
 163+ 789A 33 68                        dw      CR                      //      cr
 164+ 789C 79 73                        dw      QUERY                   //      query
 165+ 789E              Next_Breakpoint_1:
 166+ 789E B6 77                        dw      INTERPRET               //      interpret
 167+ 78A0 D6 6D 1E 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 78A4 97 69
 168+ 78A6                                                              //      if
 169+ 78A6 D8 63                        dw      ZBRANCH
 170+ 78A8 07 00                        dw      Quit_Endif - $
 171+ 78AA 4C 74                        dw          C_DOT_QUOTE
 172+ 78AC 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 78AF              Quit_Endif:                                     //      else
 174+ 78AF                                                              // again
 175+ 78AF C3 63                        dw      BRANCH
 176+ 78B1 E3 FF                        dw      Quit_Begin - $
 177+ 78B3 3A 69                        dw      EXIT                    // ;
 178+ 78B5
 179+ 78B5              //  ______________________________________________________________________
 180+ 78B5              //
 181+ 78B5              // abort        --
 182+ 78B5                              Colon_Def ABORT, "ABORT", is_normal
 182+ 78B5             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 78B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 78B5             >
 182+ 78B5             >                // dummy db directives used to calculate length of namec
 182+ 78B5 41 42 4F 52 >                db      "ABORT"
 182+ 78B9 54          >
 182+ 78BA             >len_NFA         defl    $ - temp_NFA
 182+ 78BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 78B5             >
 182+ 78B5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 78B6 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 78BA 54          >
 182+ 78BB             >                org     $-1                 // alter last byte of Name just above to set
 182+ 78BA D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 78BB             >
 182+ 78BB 74 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 78BD             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 78BD CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 78C0             >
 182+ 78C0             >
 182+ 78C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 78C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 78C0             >
 182+ 78C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78C0 FA 6C 1E 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 78C4 17 69
 184+ 78C6 7F 71                        dw      DECIMAL                 // decimal
 185+ 78C8 3D 78                        dw      FORTH                   // [compile] forth
 186+ 78CA 56 78                        dw      DEFINITIONS             // definitions
 187+ 78CC              Autoexec_Ptr:
 188+ 78CC C2 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78CE 7B 78                        dw      QUIT                    // quit
 190+ 78D0 3A 69                        dw      EXIT                    // ;
 191+ 78D2
 192+ 78D2              //  ______________________________________________________________________
 193+ 78D2              //
 194+ 78D2              // warm         --
 195+ 78D2                              Colon_Def WARM, "WARM", is_normal
 195+ 78D2             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78D2             >
 195+ 78D2             >                // dummy db directives used to calculate length of namec
 195+ 78D2 57 41 52 4D >                db      "WARM"
 195+ 78D6             >len_NFA         defl    $ - temp_NFA
 195+ 78D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78D2             >
 195+ 78D2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78D3 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78D7             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78D6 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78D7             >
 195+ 78D7 B5 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78D9             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78D9 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78DC             >
 195+ 78DC             >
 195+ 78DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78DC             >
 195+ 78DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78DC 69 7C                        dw      BLK_INIT                // blk-init
 197+ 78DE 72 84                        dw      SPLASH                  // splash
 198+ 78E0 A5 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78E4 6C 6F
 199+ 78E6 BD 78                        dw      ABORT                   // abort
 200+ 78E8 3A 69                        dw      EXIT                    // exit
 201+ 78EA
 202+ 78EA              //  ______________________________________________________________________
 203+ 78EA              //
 204+ 78EA              // cold         --
 205+ 78EA                              Colon_Def COLD, "COLD", is_normal
 205+ 78EA             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78EA             >
 205+ 78EA             >                // dummy db directives used to calculate length of namec
 205+ 78EA 43 4F 4C 44 >                db      "COLD"
 205+ 78EE             >len_NFA         defl    $ - temp_NFA
 205+ 78EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78EA             >
 205+ 78EA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78EB 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78EF             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78EE C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78EF             >
 205+ 78EF D2 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78F1             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78F1 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78F4             >
 205+ 78F4             >
 205+ 78F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78F4             >
 205+ 78F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78F4 A5 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78F8 A5 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78FC 1E 6B                        dw      FETCH                   // @
 209+ 78FE A5 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 7902 D5 69
 210+ 7904 A5 63 14 00                  dw      LIT, 20                 // 20
 211+ 7908 40 68                        dw      CMOVE
 212+ 790A A5 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 790E 1E 6B                        dw      FETCH                   // @
 214+ 7910 A5 63 44 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 7914 29 6B                        dw      STORE                   // !
 216+ 7916 6F 6C 79 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 791A 29 6B
 217+ 791C 57 6D 1E 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 7920 9D 6A
 218+ 7922 1C 6E 29 6B                  dw      USE, STORE              // use !
 219+ 7926 27 6E 29 6B                  dw      PREV, STORE             // prev !
 220+ 792A A5 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 792E 3C 6E 29 6B
 221+ 7932              //              dw      LIT, 8
 222+ 7932              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 7932 81 6C 6E 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 7936 29 6B
 224+ 7938 D9 78        Warm_Start:     dw      WARM
 225+ 793A F1 78        Cold_Start:     dw      COLD
 226+ 793C 3A 69                        dw      EXIT
 227+ 793E
 228+ 793E              //  ______________________________________________________________________
 229+ 793E              WarmRoutine:
 230+ 793E              ColdRoutine:
 231+ 793E DD 21 98 63                  ld      ix, Next_Ptr
 232+ 7942 D9                           exx
 233+ 7943 E5                           push    hl
 234+ 7944 D9                           exx
 235+ 7945
 236+ 7945 ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 7949 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 794D              //              nop
 239+ 794D 2A 7A 63                     ld      hl, (R0_origin)
 240+ 7950              //              nop
 241+ 7950                              ldrphl
 241+ 7950 22 96 63    >                ld      (RP_Pointer),hl
 242+ 7953 01 38 79                     ld      bc, Warm_Start
 243+ 7956 38 02                        jr      c, Warm_Skip
 244+ 7958 03                           inc     bc
 245+ 7959 03                           inc     bc
 246+ 795A              Warm_Skip:
 247+ 795A                              next
 247+ 795A DD E9       >                jp      (ix)
 248+ 795C
 249+ 795C              //  ______________________________________________________________________
 250+ 795C              //
 251+ 795C              // basic        --
 252+ 795C                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 795C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 795C             >
 252+ 795C             >                // dummy db directives used to calculate length of namec
 252+ 795C 42 41 53 49 >                db      "BASIC"
 252+ 7960 43          >
 252+ 7961             >len_NFA         defl    $ - temp_NFA
 252+ 7961             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 795C             >
 252+ 795C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 795D 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 7961 43          >
 252+ 7962             >                org     $-1                 // alter last byte of Name just above to set
 252+ 7961 C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 7962             >
 252+ 7962 EA 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 7964             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 7964 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 252+ 7964 ~           >
 252+ 7964 ~           >
 252+ 7964             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 7964             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 7964             >
 252+ 7964             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 7964 C1                           pop     bc
 254+ 7965 21 00 00                     ld      hl, 0
 255+ 7968 39                           add     hl, sp
 256+ 7969 ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 796D              //              nop
 258+ 796D 22 6E 63                     ld      (SP_Basic),hl
 259+ 7970 D9                           exx
 260+ 7971 E1                           pop     hl
 261+ 7972 D9                           exx
 262+ 7973 C9                           ret     // to Basic
 263+ 7974
 264+ 7974              //  ______________________________________________________________________
 265+ 7974              //
 266+ 7974              // +-           n1 n2 -- n3
 267+ 7974              // leaves n1 with the sign of n2 as n3.
 268+ 7974                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 7974             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 7974             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 7974             >
 268+ 7974             >                // dummy db directives used to calculate length of namec
 268+ 7974 2B 2D       >                db      "+-"
 268+ 7976             >len_NFA         defl    $ - temp_NFA
 268+ 7976             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 7974             >
 268+ 7974 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 7975 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 7977             >                org     $-1                 // alter last byte of Name just above to set
 268+ 7976 AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 7977             >
 268+ 7977 5C 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 7979             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 7979 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 797C             >
 268+ 797C             >
 268+ 797C             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 797C             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 797C             >
 268+ 797C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 797C B1 69                        dw      ZLESS                   // 0<
 270+ 797E                                                              // if
 271+ 797E D8 63                        dw      ZBRANCH
 272+ 7980 04 00                        dw      Plus_Minus_Endif - $
 273+ 7982 36 6A                        dw          MINUS               //      minus
 274+ 7984              Plus_Minus_Endif:                               // endif
 275+ 7984 3A 69                        dw      EXIT                    // ;
 276+ 7986
 277+ 7986              //  ______________________________________________________________________
 278+ 7986              //
 279+ 7986              // d+-          d1 n -- d2
 280+ 7986              // leaves d1 with the sign of n as d2.
 281+ 7986                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 7986             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 7986             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 7986             >
 281+ 7986             >                // dummy db directives used to calculate length of namec
 281+ 7986 44 2B 2D    >                db      "D+-"
 281+ 7989             >len_NFA         defl    $ - temp_NFA
 281+ 7989             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 7986             >
 281+ 7986 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 7987 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 798A             >                org     $-1                 // alter last byte of Name just above to set
 281+ 7989 AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 798A             >
 281+ 798A 74 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 798C             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 798C CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 798F             >
 281+ 798F             >
 281+ 798F             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 798F             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 798F             >
 281+ 798F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 798F B1 69                        dw      ZLESS                   // 0<
 283+ 7991                                                              // if
 284+ 7991 D8 63                        dw      ZBRANCH
 285+ 7993 04 00                        dw      DPlus_Minus_Endif - $
 286+ 7995 4A 6A                        dw          DMINUS              //      dminus
 287+ 7997              DPlus_Minus_Endif:                              // endif
 288+ 7997 3A 69                        dw      EXIT                    // ;
 289+ 7999
 290+ 7999              //  ______________________________________________________________________
 291+ 7999              //
 292+ 7999              // abs          n1 -- n2
 293+ 7999                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 7999             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 7999             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 7999             >
 293+ 7999             >                // dummy db directives used to calculate length of namec
 293+ 7999 41 42 53    >                db      "ABS"
 293+ 799C             >len_NFA         defl    $ - temp_NFA
 293+ 799C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 7999             >
 293+ 7999 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 799A 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 799D             >                org     $-1                 // alter last byte of Name just above to set
 293+ 799C D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 799D             >
 293+ 799D 86 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 799F             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 799F CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 79A2             >
 293+ 79A2             >
 293+ 79A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 79A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 79A2             >
 293+ 79A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 79A2 9D 6A                        dw      DUP                     // dup
 295+ 79A4 79 79                        dw      PLUS_MINUS              // +-
 296+ 79A6 3A 69                        dw      EXIT                    // ;
 297+ 79A8
 298+ 79A8              //  ______________________________________________________________________
 299+ 79A8              //
 300+ 79A8              // dabs         d1 -- d2
 301+ 79A8                              Colon_Def DABS, "DABS", is_normal
 301+ 79A8             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 79A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 79A8             >
 301+ 79A8             >                // dummy db directives used to calculate length of namec
 301+ 79A8 44 41 42 53 >                db      "DABS"
 301+ 79AC             >len_NFA         defl    $ - temp_NFA
 301+ 79AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 79A8             >
 301+ 79A8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 79A9 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 79AD             >                org     $-1                 // alter last byte of Name just above to set
 301+ 79AC D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 79AD             >
 301+ 79AD 99 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 79AF             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 79AF CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 79B2             >
 301+ 79B2             >
 301+ 79B2             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 79B2             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 79B2             >
 301+ 79B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 79B2 9D 6A                        dw      DUP                     // dup
 303+ 79B4 8C 79                        dw      DPLUS_MINUS             // d+-
 304+ 79B6 3A 69                        dw      EXIT                    // ;
 305+ 79B8
 306+ 79B8              //  ______________________________________________________________________
 307+ 79B8              //
 308+ 79B8              // m*           n1 n2 -- d
 309+ 79B8              // multiply two integer giving a double
 310+ 79B8                              Colon_Def MMUL, "M*", is_normal
 310+ 79B8             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 79B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 79B8             >
 310+ 79B8             >                // dummy db directives used to calculate length of namec
 310+ 79B8 4D 2A       >                db      "M*"
 310+ 79BA             >len_NFA         defl    $ - temp_NFA
 310+ 79BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 79B8             >
 310+ 79B8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 79B9 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 79BB             >                org     $-1                 // alter last byte of Name just above to set
 310+ 79BA AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 79BB             >
 310+ 79BB A8 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 79BD             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 79BD CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 79C0             >
 310+ 79C0             >
 310+ 79C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 79C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 79C0             >
 310+ 79C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 79C0 F2 6A F9 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 79C4 64 69
 312+ 79C6 9F 79 92 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 79CA 9F 79 6F 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79CE 76 69 8C 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79D2 3A 69                        dw      EXIT                    // ;
 316+ 79D4
 317+ 79D4              //  ______________________________________________________________________
 318+ 79D4              //
 319+ 79D4              // sm/rem       d n -- q r
 320+ 79D4              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 79D4              // the remainder has the sign of d.
 322+ 79D4                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 79D4             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 79D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 79D4             >
 322+ 79D4             >                // dummy db directives used to calculate length of namec
 322+ 79D4 53 4D 2F 52 >                db      "SM/REM"
 322+ 79D8 45 4D       >
 322+ 79DA             >len_NFA         defl    $ - temp_NFA
 322+ 79DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 79D4             >
 322+ 79D4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 79D5 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 79D9 45 4D       >
 322+ 79DB             >                org     $-1                 // alter last byte of Name just above to set
 322+ 79DA CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 79DB             >
 322+ 79DB B8 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 79DD             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 79DD CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 79E0             >
 322+ 79E0             >
 322+ 79E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 79E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 79E0             >
 322+ 79E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 79E0 62 6A 64 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 79E4 64 69
 324+ 79E6 AF 79 88 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 79EA 9F 79
 325+ 79EC 9E 68                        dw      UMDIVMOD                // um/mod
 326+ 79EE 76 69                        dw      R_TO                    // r>
 327+ 79F0 88 69 F9 68                  dw      R_OP, XOR_OP            // r xor
 328+ 79F4 79 79 92 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 79F8 76 69                        dw      R_TO                    // r>
 330+ 79FA 79 79 92 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 79FE 3A 69                        dw      EXIT                    // ;
 332+ 7A00
 333+ 7A00              //  ______________________________________________________________________
 334+ 7A00              //
 335+ 7A00              // fm/mod       d n -- q r
 336+ 7A00              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 7A00              // the remainder has the sign of d.
 338+ 7A00                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 7A00             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 7A00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 7A00             >
 338+ 7A00             >                // dummy db directives used to calculate length of namec
 338+ 7A00 46 4D 2F 4D >                db      "FM/MOD"
 338+ 7A04 4F 44       >
 338+ 7A06             >len_NFA         defl    $ - temp_NFA
 338+ 7A06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 7A00             >
 338+ 7A00 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 7A01 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 7A05 4F 44       >
 338+ 7A07             >                org     $-1                 // alter last byte of Name just above to set
 338+ 7A06 C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 7A07             >
 338+ 7A07 D4 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 7A09             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 7A09 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 7A0C             >
 338+ 7A0C             >
 338+ 7A0C             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 7A0C             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 7A0C             >
 338+ 7A0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 7A0C 9D 6A 64 69                  dw      DUP, TO_R               // dup >r
 340+ 7A10 DD 79                        dw      SMDIVM
 341+ 7A12 62 6A 9D 6A                  dw      OVER, DUP
 342+ 7A16 97 69 97 69                  dw      ZEQUAL, ZEQUAL
 343+ 7A1A 92 6A B1 69                  dw      SWAP, ZLESS
 344+ 7A1E 88 69 B1 69                  dw      R_OP, ZLESS
 345+ 7A22 F9 68 D8 68                  dw      XOR_OP, AND_OP
 346+ 7A26 D8 63                        dw      ZBRANCH
 347+ 7A28 10 00                        dw      Fm_Mod_Else - $
 348+ 7A2A FC 69                        dw          ONE_SUBTRACT
 349+ 7A2C 92 6A 76 69                  dw          SWAP, R_TO
 350+ 7A30 D5 69 92 6A                  dw          PLUS, SWAP
 351+ 7A34 C3 63                        dw      BRANCH
 352+ 7A36 06 00                        dw      Fm_Mod_Endif - $
 353+ 7A38              Fm_Mod_Else:
 354+ 7A38 76 69 70 6A                  dw          R_TO, DROP
 355+ 7A3C              Fm_Mod_Endif:
 356+ 7A3C 3A 69                        dw      EXIT
 357+ 7A3E              //              dw      TWO_DUP                 // 2dup
 358+ 7A3E              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 7A3E              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 7A3E              //              dw      UMDIVMOD                // um/mod
 361+ 7A3E              //              dw      SWAP                    // swap
 362+ 7A3E              //              dw      II, ZLESS               // i'
 363+ 7A3E              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 7A3E              //              dw      R_TO                    // r>
 365+ 7A3E              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 7A3E              //              dw      R_OP                    // r@
 367+ 7A3E              //              dw      ZLESS                   // i'
 368+ 7A3E              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 7A3E              //              dw      R_TO                    // r>
 370+ 7A3E              //              dw      PLUS_MINUS              // +- swap
 371+ 7A3E              //              dw      EXIT                    // ;
 372+ 7A3E
 373+ 7A3E              //  ______________________________________________________________________
 374+ 7A3E              //
 375+ 7A3E              // m/mod        d n -- q r
 376+ 7A3E              // multiply two integer giving a double
 377+ 7A3E                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 7A3E             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 7A3E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 7A3E             >
 377+ 7A3E             >                // dummy db directives used to calculate length of namec
 377+ 7A3E 4D 2F 4D 4F >                db      "M/MOD"
 377+ 7A42 44          >
 377+ 7A43             >len_NFA         defl    $ - temp_NFA
 377+ 7A43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 7A3E             >
 377+ 7A3E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 7A3F 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 7A43 44          >
 377+ 7A44             >                org     $-1                 // alter last byte of Name just above to set
 377+ 7A43 C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 7A44             >
 377+ 7A44 00 7A       >                dw      last_NFA            // Link to previous definition Name
 377+ 7A46             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 7A46 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A49             >
 377+ 7A49             >
 377+ 7A49             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A49             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A49             >
 377+ 7A49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A49 DD 79                        dw      SMDIVM
 379+ 7A4B 3A 69                        dw      EXIT                    // ;
 380+ 7A4D
 381+ 7A4D              //  ______________________________________________________________________
 382+ 7A4D              //
 383+ 7A4D              // m/           d n -- q
 384+ 7A4D              // multiply two integer giving a double
 385+ 7A4D                              Colon_Def MDIV, "M/", is_normal
 385+ 7A4D             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A4D             >
 385+ 7A4D             >                // dummy db directives used to calculate length of namec
 385+ 7A4D 4D 2F       >                db      "M/"
 385+ 7A4F             >len_NFA         defl    $ - temp_NFA
 385+ 7A4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A4D             >
 385+ 7A4D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A4E 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A50             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A4F AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A50             >
 385+ 7A50 3E 7A       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A52             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A52 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A55             >
 385+ 7A55             >
 385+ 7A55             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A55             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A55             >
 385+ 7A55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A55 46 7A 79 6A                  dw      MDIVM, NIP
 387+ 7A59 3A 69                        dw      EXIT                    // ;
 388+ 7A5B
 389+ 7A5B              //  ______________________________________________________________________
 390+ 7A5B              //
 391+ 7A5B              // *            n1 n2 -- n3
 392+ 7A5B              // multiply two integer
 393+ 7A5B                              Colon_Def MUL, "*", is_normal
 393+ 7A5B             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A5B             >
 393+ 7A5B             >                // dummy db directives used to calculate length of namec
 393+ 7A5B 2A          >                db      "*"
 393+ 7A5C             >len_NFA         defl    $ - temp_NFA
 393+ 7A5C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A5B             >
 393+ 7A5B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A5C 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A5D             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A5C AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A5D             >
 393+ 7A5D 4D 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A5F             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A5F CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A62             >
 393+ 7A62             >
 393+ 7A62             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A62             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A62             >
 393+ 7A62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A62 BD 79 70 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A66 3A 69                        dw      EXIT                    // ;
 396+ 7A68
 397+ 7A68              //  ______________________________________________________________________
 398+ 7A68              //
 399+ 7A68              // /mod         n1 n2 -- n3 n4
 400+ 7A68              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A68              // The remainder has the sign of n1
 402+ 7A68                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A68             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A68             >
 402+ 7A68             >                // dummy db directives used to calculate length of namec
 402+ 7A68 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A6C             >len_NFA         defl    $ - temp_NFA
 402+ 7A6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A68             >
 402+ 7A68 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A69 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A6D             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A6C C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A6D             >
 402+ 7A6D 5B 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A6F             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A6F CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A72             >
 402+ 7A72             >
 402+ 7A72             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A72             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A72             >
 402+ 7A72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A72 64 69 BC 6E                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A76 76 69
 404+ 7A78 46 7A                        dw      MDIVM                   // m/mod
 405+ 7A7A 3A 69                        dw      EXIT                    // ;
 406+ 7A7C
 407+ 7A7C              //  ______________________________________________________________________
 408+ 7A7C              //
 409+ 7A7C              // /            n1 n2 -- n3
 410+ 7A7C              // division
 411+ 7A7C                              Colon_Def DIV, "/", is_normal
 411+ 7A7C             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A7C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A7C             >
 411+ 7A7C             >                // dummy db directives used to calculate length of namec
 411+ 7A7C 2F          >                db      "/"
 411+ 7A7D             >len_NFA         defl    $ - temp_NFA
 411+ 7A7D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A7C             >
 411+ 7A7C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A7D 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A7E             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A7D AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A7E             >
 411+ 7A7E 68 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A80             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A80 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A83             >
 411+ 7A83             >
 411+ 7A83             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A83             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A83             >
 411+ 7A83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A83 6F 7A 79 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A87 3A 69                        dw      EXIT                    // ;
 414+ 7A89
 415+ 7A89              //  ______________________________________________________________________
 416+ 7A89              //
 417+ 7A89              // mod          n1 n2 -- n3
 418+ 7A89                              Colon_Def MOD, "MOD", is_normal
 418+ 7A89             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A89             >
 418+ 7A89             >                // dummy db directives used to calculate length of namec
 418+ 7A89 4D 4F 44    >                db      "MOD"
 418+ 7A8C             >len_NFA         defl    $ - temp_NFA
 418+ 7A8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A89             >
 418+ 7A89 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A8A 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A8D             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A8C C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A8D             >
 418+ 7A8D 7C 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A8F             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A8F CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A92             >
 418+ 7A92             >
 418+ 7A92             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A92             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A92             >
 418+ 7A92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A92 6F 7A 70 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7A96 3A 69                        dw      EXIT                    // ;
 421+ 7A98
 422+ 7A98              //  ______________________________________________________________________
 423+ 7A98              //
 424+ 7A98              // */mod        n1 n2 n3 -- n4 n5
 425+ 7A98              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7A98              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7A98              // avoids loss of precision
 428+ 7A98                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7A98             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7A98             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7A98             >
 428+ 7A98             >                // dummy db directives used to calculate length of namec
 428+ 7A98 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7A9C 44          >
 428+ 7A9D             >len_NFA         defl    $ - temp_NFA
 428+ 7A9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7A98             >
 428+ 7A98 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7A99 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7A9D 44          >
 428+ 7A9E             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7A9D C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7A9E             >
 428+ 7A9E 89 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7AA0             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7AA0 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7AA3             >
 428+ 7AA3             >
 428+ 7AA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7AA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7AA3             >
 428+ 7AA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7AA3 64 69 BD 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7AA7 76 69 46 7A                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7AAB 3A 69                        dw      EXIT                    // ;
 432+ 7AAD
 433+ 7AAD              //  ______________________________________________________________________
 434+ 7AAD              //
 435+ 7AAD              // */          n1 n2 n3 -- n4
 436+ 7AAD              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7AAD                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7AAD             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7AAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7AAD             >
 437+ 7AAD             >                // dummy db directives used to calculate length of namec
 437+ 7AAD 2A 2F       >                db      "*/"
 437+ 7AAF             >len_NFA         defl    $ - temp_NFA
 437+ 7AAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7AAD             >
 437+ 7AAD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7AAE 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7AB0             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7AAF AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7AB0             >
 437+ 7AB0 98 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7AB2             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7AB2 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7AB5             >
 437+ 7AB5             >
 437+ 7AB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7AB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7AB5             >
 437+ 7AB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7AB5 A0 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7AB7 79 6A                        dw     NIP                      // nip
 440+ 7AB9 3A 69                        dw     EXIT                     // ;
 441+ 7ABB
 442+ 7ABB
 443+ 7ABB              //  ______________________________________________________________________
 444+ 7ABB              //
 445+ 7ABB              // m/mod        ud1 u2 -- u3 ud4
 446+ 7ABB              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7ABB              // All terms are unsigned.
 448+ 7ABB              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7ABB              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7ABB              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7ABB              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7ABB              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7ABB              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7ABB              //              dw      EXIT                    // ;
 455+ 7ABB
 456+ 7ABB              //  ______________________________________________________________________
 457+ 7ABB              //
 458+ 7ABB              // (line)       n1 n2 -- a b
 459+ 7ABB              // sends the line n1 of block n2 to the disk buffer.
 460+ 7ABB              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7ABB                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7ABB             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7ABB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7ABB             >
 461+ 7ABB             >                // dummy db directives used to calculate length of namec
 461+ 7ABB 28 4C 49 4E >                db      "(LINE)"
 461+ 7ABF 45 29       >
 461+ 7AC1             >len_NFA         defl    $ - temp_NFA
 461+ 7AC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7ABB             >
 461+ 7ABB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7ABC 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7AC0 45 29       >
 461+ 7AC2             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7AC1 A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7AC2             >
 461+ 7AC2 AD 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7AC4             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7AC4 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7AC7             >
 461+ 7AC7             >
 461+ 7AC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7AC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7AC7             >
 461+ 7AC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7AC7 64 69                        dw      TO_R                    // >r
 463+ 7AC9 1A 6C                        dw      NOOP                    // noop
 464+ 7ACB A9 6C                        dw      CL                      // c/l
 465+ 7ACD B6 6C A0 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7AD1 76 69                        dw      R_TO                    // r>
 467+ 7AD3 C3 6C 5F 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7AD7 D5 69
 468+ 7AD9 88 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7ADB D5 69                        dw      PLUS                    // +
 470+ 7ADD 1A 6C                        dw      NOOP                    // noop
 471+ 7ADF A9 6C                        dw      CL                      // c/l
 472+ 7AE1 3A 69                        dw      EXIT                    // ;
 473+ 7AE3
 474+ 7AE3              //  ______________________________________________________________________
 475+ 7AE3              //
 476+ 7AE3              // .line        n1 n2 --
 477+ 7AE3              // Sends to output line  n1  of screen n2.
 478+ 7AE3                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7AE3             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7AE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7AE3             >
 478+ 7AE3             >                // dummy db directives used to calculate length of namec
 478+ 7AE3 2E 4C 49 4E >                db      ".LINE"
 478+ 7AE7 45          >
 478+ 7AE8             >len_NFA         defl    $ - temp_NFA
 478+ 7AE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7AE3             >
 478+ 7AE3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7AE4 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7AE8 45          >
 478+ 7AE9             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7AE8 C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7AE9             >
 478+ 7AE9 BB 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7AEB             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7AEB CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7AEE             >
 478+ 7AEE             >
 478+ 7AEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7AEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7AEE             >
 478+ 7AEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7AEE C4 7A 96 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7AF2 30 72
 480+ 7AF4 3A 69                        dw      EXIT                    // ;
 481+ 7AF6
 482+ 7AF6              //  ______________________________________________________________________
 483+ 7AF6              //
 484+ 7AF6              // message       n1 n2 --
 485+ 7AF6              // prints error message to current channel.
 486+ 7AF6              // if WARNING is 0, prints "MSG#n".
 487+ 7AF6              // if WARNING is 1, prints line n of screen 4.
 488+ 7AF6              // if WARNING is -1, see ERROR
 489+ 7AF6              // value can be negative or beyond block 4.
 490+ 7AF6                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7AF6             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7AF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7AF6             >
 490+ 7AF6             >                // dummy db directives used to calculate length of namec
 490+ 7AF6 4D 45 53 53 >                db      "MESSAGE"
 490+ 7AFA 41 47 45    >
 490+ 7AFD             >len_NFA         defl    $ - temp_NFA
 490+ 7AFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7AF6             >
 490+ 7AF6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7AF7 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7AFB 41 47 45    >
 490+ 7AFE             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7AFD C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7AFE             >
 490+ 7AFE E3 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7B00             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7B00 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7B03             >
 490+ 7B03             >
 490+ 7B03             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7B03             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7B03             >
 490+ 7B03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7B03 27 6D 1E 6B                  dw      WARNING, FETCH          // warning @
 492+ 7B07                                                              // if
 493+ 7B07 D8 63                        dw      ZBRANCH
 494+ 7B09 18 00                        dw      Message_Else - $
 495+ 7B0B A5 63 04 00                  dw          LIT, 4              //      4
 496+ 7B0F AE 6D 1E 6B                  dw          OFFSET, FETCH       //      offset @
 497+ 7B13 C3 6C 80 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7B17 CE 6E
 498+ 7B19 EB 7A                        dw          DOT_LINE            //      .line
 499+ 7B1B 89 6F                        dw          SPACE               //      space
 500+ 7B1D                                                              // else
 501+ 7B1D
 502+ 7B1D C3 63                        dw      BRANCH
 503+ 7B1F 0B 00                        dw      Message_ENdif - $
 504+ 7B21              Message_Else:
 505+ 7B21 4C 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7B23 04 6D 73 67                  db          4, "msg#"
 506+ 7B27 23
 507+ 7B28 64 83                        dw          DOT                 //      .  ( forward )
 508+ 7B2A              Message_ENdif:                                  // endif
 509+ 7B2A 3A 69                        dw      EXIT                    // ;
 510+ 7B2C
 511+ 7B2C
 512+ 7B2C              //  ______________________________________________________________________
 513+ 7B2C              //
 514+ 7B2C              // device
 515+ 7B2C                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7B2C             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7B2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7B2C             >
 515+ 7B2C             >                // dummy db directives used to calculate length of namec
 515+ 7B2C 44 45 56 49 >                db      "DEVICE"
 515+ 7B30 43 45       >
 515+ 7B32             >len_NFA         defl    $ - temp_NFA
 515+ 7B32             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7B2C             >
 515+ 7B2C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7B2D 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7B31 43 45       >
 515+ 7B33             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7B32 C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7B33             >
 515+ 7B33 F6 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7B35             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7B35 CD 4E 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7B38             >
 515+ 7B38             >
 515+ 7B38             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7B38             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7B38             >
 515+ 7B38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7B38 02 00       >                dw      2
 516+ 7B3A
 517+ 7B3A              //  ______________________________________________________________________
 518+ 7B3A
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
 113  7B3A                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
   1+ 7B3A              //  ______________________________________________________________________
   2+ 7B3A              //
   3+ 7B3A              //  next-opt.asm
   4+ 7B3A              //
   5+ 7B3A              //  ZX Spectrum Next - peculiar definitions
   6+ 7B3A              //  ______________________________________________________________________
   7+ 7B3A
   8+ 7B3A              //  ______________________________________________________________________
   9+ 7B3A              //
  10+ 7B3A              // reg@         n -- b
  11+ 7B3A              // read Next REGister n giving byte b
  12+ 7B3A              //
  13+ 7B3A              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 7B3A              //              dw      LIT, $243B
  15+ 7B3A              //              dw      PSTORE
  16+ 7B3A              //              dw      LIT, $253B
  17+ 7B3A              //              dw      PFETCH
  18+ 7B3A              //              dw      EXIT
  19+ 7B3A                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 7B3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ 7B3A             >
  19+ 7B3A             >                // dummy db directives used to calculate length of namec
  19+ 7B3A 52 45 47 40 >                db      "REG@"
  19+ 7B3E             >len_NFA         defl    $ - temp_NFA
  19+ 7B3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ 7B3A             >
  19+ 7B3A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ 7B3B 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ 7B3F             >                org     $-1                 // alter last byte of Name just above to set
  19+ 7B3E C0          >                db      {b $} | END_BIT     // msb as name end
  19+ 7B3F             >
  19+ 7B3F 2C 7B       >                dw      last_NFA            // Link to previous definition Name
  19+ 7B41             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 7B41 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 7B41 ~           >
  19+ 7B41 ~           >
  19+ 7B41             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 7B41             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 7B41             >
  19+ 7B41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 7B41 D9                           exx
  21+ 7B42 01 3B 24                     ld      bc, $243B
  22+ 7B45 E1                           pop     hl
  23+ 7B46 ED 69                        out     (c), l
  24+ 7B48 04                           inc     b
  25+ 7B49 ED 68                        in      l, (c)
  26+ 7B4B E5                           push    hl
  27+ 7B4C D9                           exx
  28+ 7B4D                              next
  28+ 7B4D DD E9       >                jp      (ix)
  29+ 7B4F
  30+ 7B4F
  31+ 7B4F              //  ______________________________________________________________________
  32+ 7B4F              //
  33+ 7B4F              // reg!         b n --
  34+ 7B4F              // write value b to Next REGister n
  35+ 7B4F              //
  36+ 7B4F              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 7B4F              //              dw      LIT, $243B
  38+ 7B4F              //              dw      PSTORE
  39+ 7B4F              //              dw      LIT, $253B
  40+ 7B4F              //              dw      PSTORE
  41+ 7B4F              //              dw      EXIT
  42+ 7B4F                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 7B4F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ 7B4F             >
  42+ 7B4F             >                // dummy db directives used to calculate length of namec
  42+ 7B4F 52 45 47 21 >                db      "REG!"
  42+ 7B53             >len_NFA         defl    $ - temp_NFA
  42+ 7B53             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ 7B4F             >
  42+ 7B4F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ 7B50 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ 7B54             >                org     $-1                 // alter last byte of Name just above to set
  42+ 7B53 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ 7B54             >
  42+ 7B54 3A 7B       >                dw      last_NFA            // Link to previous definition Name
  42+ 7B56             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 7B56 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 7B56 ~           >
  42+ 7B56 ~           >
  42+ 7B56             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 7B56             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 7B56             >
  42+ 7B56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 7B56 D9                           exx
  44+ 7B57 01 3B 24                     ld      bc, $243B
  45+ 7B5A E1                           pop     hl
  46+ 7B5B ED 69                        out     (c), l
  47+ 7B5D 04                           inc     b
  48+ 7B5E E1                           pop     hl
  49+ 7B5F ED 69                        out     (c), l
  50+ 7B61 D9                           exx
  51+ 7B62                              next
  51+ 7B62 DD E9       >                jp      (ix)
  52+ 7B64
  53+ 7B64
  54+ 7B64              //  ______________________________________________________________________
  55+ 7B64              //
  56+ 7B64              // mmu7@        -- n
  57+ 7B64              // query current page in MMU7 8K-RAM : 0 and 223
  58+ 7B64
  59+ 7B64                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  59+ 7B64             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  59+ 7B64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59+ 7B64             >
  59+ 7B64             >                // dummy db directives used to calculate length of namec
  59+ 7B64 4D 4D 55 37 >                db      "MMU7@"
  59+ 7B68 40          >
  59+ 7B69             >len_NFA         defl    $ - temp_NFA
  59+ 7B69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59+ 7B64             >
  59+ 7B64 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59+ 7B65 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  59+ 7B69 40          >
  59+ 7B6A             >                org     $-1                 // alter last byte of Name just above to set
  59+ 7B69 C0          >                db      {b $} | END_BIT     // msb as name end
  59+ 7B6A             >
  59+ 7B6A 4F 7B       >                dw      last_NFA            // Link to previous definition Name
  59+ 7B6C             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  59+ 7B6C CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  59+ 7B6F             >
  59+ 7B6F             >
  59+ 7B6F             >                endif           ; ok        // for other definitions it "points" the correct handler
  59+ 7B6F             >                // Use of "; ok" to suppress "warning[fwdref]"
  59+ 7B6F             >
  59+ 7B6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60+ 7B6F A5 63 57 00                  dw      LIT, 87, REG_FETCH
  60+ 7B73 41 7B
  61+ 7B75 3A 69                        dw      EXIT
  62+ 7B77
  63+ 7B77              //  ______________________________________________________________________
  64+ 7B77              //
  65+ 7B77              // mmu7!        n --
  66+ 7B77              // set MMU7 8K-RAM page to n given between 0 and 223
  67+ 7B77              // optimized version that uses NEXTREG n,A Z80n op-code.
  68+ 7B77
  69+ 7B77                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  69+ 7B77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ 7B77             >
  69+ 7B77             >                // dummy db directives used to calculate length of namec
  69+ 7B77 4D 4D 55 37 >                db      "MMU7!"
  69+ 7B7B 21          >
  69+ 7B7C             >len_NFA         defl    $ - temp_NFA
  69+ 7B7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ 7B77             >
  69+ 7B77 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ 7B78 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  69+ 7B7C 21          >
  69+ 7B7D             >                org     $-1                 // alter last byte of Name just above to set
  69+ 7B7C A1          >                db      {b $} | END_BIT     // msb as name end
  69+ 7B7D             >
  69+ 7B7D 64 7B       >                dw      last_NFA            // Link to previous definition Name
  69+ 7B7F             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 7B7F ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 7B7F ~           >
  69+ 7B7F ~           >
  69+ 7B7F             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 7B7F             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 7B7F             >
  69+ 7B7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 7B7F E1                           pop     hl
  71+ 7B80 7D                           ld      a, l
  72+ 7B81 ED 92 57                     nextreg 87, a
  73+ 7B84
  74+ 7B84                              next
  74+ 7B84 DD E9       >                jp      (ix)
  75+ 7B86
  76+ 7B86              //  ______________________________________________________________________
  77+ 7B86              //
  78+ 7B86              // >far         ha -- a n
  79+ 7B86              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  80+ 7B86              // take lower bits of H and L as an offset from E000h
  81+ 7B86              // then return address  a  between E000h-FFFFh
  82+ 7B86              // and page number n  between 64-71 (40h-47h)
  83+ 7B86              // For example, in hex:
  84+ 7B86              //   0000 >FAR  gives  40.E000
  85+ 7B86              //   1FFF >FAR  gives  40.FFFF
  86+ 7B86              //   2000 >FAR  gives  41.E000
  87+ 7B86              //   3FFF >FAR  gives  41.FFFF
  88+ 7B86              //   EFFF >FAR  gives  47.EFFF
  89+ 7B86              //   FFFF >FAR  gives  47.FFFF
  90+ 7B86              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  91+ 7B86              //                pop     de
  92+ 7B86              //                ld      a, d
  93+ 7B86              //                and     $E0
  94+ 7B86              //                rlca
  95+ 7B86              //                rlca
  96+ 7B86              //                rlca
  97+ 7B86              //                add     $40
  98+ 7B86              //                ld      l, a
  99+ 7B86              //                ld      h, 0
 100+ 7B86              //                ld      a, d
 101+ 7B86              //                or      $E0
 102+ 7B86              //                ld      d, a
 103+ 7B86              //                push    hl
 104+ 7B86              //                push    de
 105+ 7B86              //                next
 106+ 7B86
 107+ 7B86              //  ______________________________________________________________________
 108+ 7B86              //
 109+ 7B86              // <far         a n  -- ha
 110+ 7B86              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 111+ 7B86              // reverse of >FAR: encodes a FAR address compressing
 112+ 7B86              // to bits 765 of H, lower bits of HL address offset from E000h
 113+ 7B86              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 114+ 7B86              //                pop     de                  // page number in e
 115+ 7B86              //                pop     hl                  // address in hl
 116+ 7B86              //                ld      a, e
 117+ 7B86              //                sub     $40                 // reduced to 0-7
 118+ 7B86              //                rrca
 119+ 7B86              //                rrca
 120+ 7B86              //                rrca
 121+ 7B86              //                ld      d, a                // save to d bits 765
 122+ 7B86              //                ld      a, h                // drops
 123+ 7B86              //                and     $1F
 124+ 7B86              //                or      d
 125+ 7B86              //                ld      h, a
 126+ 7B86              //
 127+ 7B86              //                psh1
 128+ 7B86
 129+ 7B86              //  ______________________________________________________________________
 130+ 7B86              //
 131+ 7B86              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 132+ 7B86              // NextZXOS call wrapper.
 133+ 7B86              //  n1 = hl register parameter value
 134+ 7B86              //  n2 = de register parameter value
 135+ 7B86              //  n3 = bc register parameter value
 136+ 7B86              //  n4 =  a register parameter value
 137+ 7B86              //   a = routine address in ROM 3
 138+ 7B86              // ----
 139+ 7B86              //  n5 = hl returned value
 140+ 7B86              //  n6 = de returned value
 141+ 7B86              //  n7 = bc returned value
 142+ 7B86              //  n8 =  a returned value
 143+ 7B86              //   f
 144+ 7B86                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 144+ 7B86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7B86             >
 144+ 7B86             >                // dummy db directives used to calculate length of namec
 144+ 7B86 4D 5F 50 33 >                db      "M_P3DOS"
 144+ 7B8A 44 4F 53    >
 144+ 7B8D             >len_NFA         defl    $ - temp_NFA
 144+ 7B8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7B86             >
 144+ 7B86 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7B87 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 144+ 7B8B 44 4F 53    >
 144+ 7B8E             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7B8D D3          >                db      {b $} | END_BIT     // msb as name end
 144+ 7B8E             >
 144+ 7B8E 77 7B       >                dw      last_NFA            // Link to previous definition Name
 144+ 7B90             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7B90 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 144+ 7B90 ~           >
 144+ 7B90 ~           >
 144+ 7B90             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7B90             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7B90             >
 144+ 7B90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7B90 D1                           pop     de                  // dos call entry address in de
 146+ 7B91 E1                           pop     hl                  // a register
 147+ 7B92 7D                           ld      a, l
 148+ 7B93 D9                           exx
 149+ 7B94 C1                           pop     bc
 150+ 7B95 D1                           pop     de
 151+ 7B96 E1                           pop     hl
 152+ 7B97 D9                           exx
 153+ 7B98
 154+ 7B98 C5                           push    bc
 155+ 7B99 DD E5                        push    ix
 156+ 7B9B
 157+ 7B9B              //              ld      (SP_Saved), sp
 158+ 7B9B              //              ld      sp, Cold_origin - 5
 159+ 7B9B 0E 07                        ld      c, 7                // use 7 RAM Bank
 160+ 7B9D
 161+ 7B9D CF                           rst     08
 162+ 7B9E 94                           db      $94
 163+ 7B9F
 164+ 7B9F              //              ld      sp, (SP_Saved)
 165+ 7B9F              //              push    ix
 166+ 7B9F              //              pop     hl
 167+ 7B9F              //              ld      (IX_Echo), hl
 168+ 7B9F DD 22 90 63                  ld      (IX_Echo), ix
 169+ 7BA3              //              nop
 170+ 7BA3 DD E1                        pop     ix
 171+ 7BA5 E3                           ex      (sp), hl            // hl argument and retrieve bc
 172+ 7BA6 D5                           push    de
 173+ 7BA7 C5                           push    bc
 174+ 7BA8 4D                           ld      c, l
 175+ 7BA9 44                           ld      b, h
 176+ 7BAA
 177+ 7BAA 26 00                        ld      h, 0
 178+ 7BAC 6F                           ld      l, a
 179+ 7BAD E5                           push    hl
 180+ 7BAE ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 181+ 7BB0 23                           inc     hl                  //  0 for OK ; 1 for ko
 182+ 7BB1
 183+ 7BB1                              psh1
 183+ 7BB1 E5          >                push    hl
 183+ 7BB2 DD E9       >                jp      (ix)
 184+ 7BB4
 185+ 7BB4              //  ______________________________________________________________________
 186+ 7BB4              //
 187+ 7BB4              // blk-fh
 188+ 7BB4                              Variable_Def BLK_FH,   "BLK-FH",   1
 188+ 7BB4             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 188+ 7BB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 7BB4             >
 188+ 7BB4             >                // dummy db directives used to calculate length of namec
 188+ 7BB4 42 4C 4B 2D >                db      "BLK-FH"
 188+ 7BB8 46 48       >
 188+ 7BBA             >len_NFA         defl    $ - temp_NFA
 188+ 7BBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 7BB4             >
 188+ 7BB4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 7BB5 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 188+ 7BB9 46 48       >
 188+ 7BBB             >                org     $-1                 // alter last byte of Name just above to set
 188+ 7BBA C8          >                db      {b $} | END_BIT     // msb as name end
 188+ 7BBB             >
 188+ 7BBB 86 7B       >                dw      last_NFA            // Link to previous definition Name
 188+ 7BBD             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 7BBD CD 4E 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 188+ 7BC0             >
 188+ 7BC0             >
 188+ 7BC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 7BC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 7BC0             >
 188+ 7BC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 7BC0 01 00       >                dw      1
 189+ 7BC2
 190+ 7BC2                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 190+ 7BC2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 7BC2             >
 190+ 7BC2             >                // dummy db directives used to calculate length of namec
 190+ 7BC2 42 4C 4B 2D >                db      "BLK-FNAME"
 190+ 7BC6 46 4E 41 4D >
 190+ 7BCA 45          >
 190+ 7BCB             >len_NFA         defl    $ - temp_NFA
 190+ 7BCB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 7BC2             >
 190+ 7BC2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 7BC3 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 190+ 7BC7 46 4E 41 4D >
 190+ 7BCB 45          >
 190+ 7BCC             >                org     $-1                 // alter last byte of Name just above to set
 190+ 7BCB C5          >                db      {b $} | END_BIT     // msb as name end
 190+ 7BCC             >
 190+ 7BCC B4 7B       >                dw      last_NFA            // Link to previous definition Name
 190+ 7BCE             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 7BCE CD C5 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 190+ 7BD1             >
 190+ 7BD1             >
 190+ 7BD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 7BD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 7BD1             >
 190+ 7BD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 7BD1 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 191+ 7BD5 6F 63 6B 73
 191+ 7BD9 2D 36 34 2E
 191+ 7BDD 62 69 6E 00
 192+ 7BE1 00 00 00...                  ds      24
 193+ 7BF9
 194+ 7BF9              //  ______________________________________________________________________
 195+ 7BF9              //
 196+ 7BF9              // blk-seek     n --
 197+ 7BF9              // seek block n  within blocks!.bin  file
 198+ 7BF9                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 198+ 7BF9             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 198+ 7BF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 7BF9             >
 198+ 7BF9             >                // dummy db directives used to calculate length of namec
 198+ 7BF9 42 4C 4B 2D >                db      "BLK-SEEK"
 198+ 7BFD 53 45 45 4B >
 198+ 7C01             >len_NFA         defl    $ - temp_NFA
 198+ 7C01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 7BF9             >
 198+ 7BF9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 7BFA 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 198+ 7BFE 53 45 45 4B >
 198+ 7C02             >                org     $-1                 // alter last byte of Name just above to set
 198+ 7C01 CB          >                db      {b $} | END_BIT     // msb as name end
 198+ 7C02             >
 198+ 7C02 C2 7B       >                dw      last_NFA            // Link to previous definition Name
 198+ 7C04             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 7C04 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 198+ 7C07             >
 198+ 7C07             >
 198+ 7C07             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 7C07             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 7C07             >
 198+ 7C07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 7C07 B6 6C BD 79                  dw  BBUF, MMUL
 200+ 7C0B BD 7B 1E 6B                  dw  BLK_FH, FETCH
 201+ 7C0F 53 67                        dw  F_SEEK
 202+ 7C11 A5 63 2D 00                  dw  LIT, $2D, QERROR
 202+ 7C15 53 70
 203+ 7C17 3A 69                        dw  EXIT
 204+ 7C19
 205+ 7C19              //  ______________________________________________________________________
 206+ 7C19              //
 207+ 7C19              // blk-read     n --
 208+ 7C19              // seek block n  within blocks!.bin  file
 209+ 7C19                              Colon_Def BLK_READ, "BLK-READ", is_normal
 209+ 7C19             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 209+ 7C19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 209+ 7C19             >
 209+ 7C19             >                // dummy db directives used to calculate length of namec
 209+ 7C19 42 4C 4B 2D >                db      "BLK-READ"
 209+ 7C1D 52 45 41 44 >
 209+ 7C21             >len_NFA         defl    $ - temp_NFA
 209+ 7C21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 209+ 7C19             >
 209+ 7C19 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 209+ 7C1A 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 209+ 7C1E 52 45 41 44 >
 209+ 7C22             >                org     $-1                 // alter last byte of Name just above to set
 209+ 7C21 C4          >                db      {b $} | END_BIT     // msb as name end
 209+ 7C22             >
 209+ 7C22 F9 7B       >                dw      last_NFA            // Link to previous definition Name
 209+ 7C24             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 209+ 7C24 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 209+ 7C27             >
 209+ 7C27             >
 209+ 7C27             >                endif           ; ok        // for other definitions it "points" the correct handler
 209+ 7C27             >                // Use of "; ok" to suppress "warning[fwdref]"
 209+ 7C27             >
 209+ 7C27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 210+ 7C27 04 7C                        dw  BLK_SEEK
 211+ 7C29 B6 6C                        dw  BBUF
 212+ 7C2B BD 7B 1E 6B                  dw  BLK_FH, FETCH
 213+ 7C2F B7 67                        dw  F_READ
 214+ 7C31 A5 63 2E 00                  dw  LIT, $2E, QERROR
 214+ 7C35 53 70
 215+ 7C37 70 6A                        dw  DROP
 216+ 7C39 3A 69                        dw  EXIT
 217+ 7C3B
 218+ 7C3B              //  ______________________________________________________________________
 219+ 7C3B              //
 220+ 7C3B              // blk-write     n --
 221+ 7C3B              // seek block n  within blocks!.bin  file
 222+ 7C3B                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 222+ 7C3B             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 222+ 7C3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 7C3B             >
 222+ 7C3B             >                // dummy db directives used to calculate length of namec
 222+ 7C3B 42 4C 4B 2D >                db      "BLK-WRITE"
 222+ 7C3F 57 52 49 54 >
 222+ 7C43 45          >
 222+ 7C44             >len_NFA         defl    $ - temp_NFA
 222+ 7C44             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 7C3B             >
 222+ 7C3B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 7C3C 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 222+ 7C40 57 52 49 54 >
 222+ 7C44 45          >
 222+ 7C45             >                org     $-1                 // alter last byte of Name just above to set
 222+ 7C44 C5          >                db      {b $} | END_BIT     // msb as name end
 222+ 7C45             >
 222+ 7C45 19 7C       >                dw      last_NFA            // Link to previous definition Name
 222+ 7C47             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 7C47 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 7C4A             >
 222+ 7C4A             >
 222+ 7C4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 7C4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 7C4A             >
 222+ 7C4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 7C4A 04 7C                        dw  BLK_SEEK
 224+ 7C4C B6 6C                        dw  BBUF
 225+ 7C4E BD 7B 1E 6B                  dw  BLK_FH, FETCH
 226+ 7C52 D4 67                        dw  F_WRITE
 227+ 7C54 A5 63 2F 00                  dw  LIT, $2F, QERROR
 227+ 7C58 53 70
 228+ 7C5A 70 6A                        dw  DROP
 229+ 7C5C 3A 69                        dw  EXIT
 230+ 7C5E
 231+ 7C5E              //  ______________________________________________________________________
 232+ 7C5E              //
 233+ 7C5E              // blk-init     n --
 234+ 7C5E              // seek block n  within blocks!.bin  file
 235+ 7C5E                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 235+ 7C5E             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 235+ 7C5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 235+ 7C5E             >
 235+ 7C5E             >                // dummy db directives used to calculate length of namec
 235+ 7C5E 42 4C 4B 2D >                db      "BLK-INIT"
 235+ 7C62 49 4E 49 54 >
 235+ 7C66             >len_NFA         defl    $ - temp_NFA
 235+ 7C66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 235+ 7C5E             >
 235+ 7C5E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 235+ 7C5F 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 235+ 7C63 49 4E 49 54 >
 235+ 7C67             >                org     $-1                 // alter last byte of Name just above to set
 235+ 7C66 D4          >                db      {b $} | END_BIT     // msb as name end
 235+ 7C67             >
 235+ 7C67 3B 7C       >                dw      last_NFA            // Link to previous definition Name
 235+ 7C69             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 235+ 7C69 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 235+ 7C6C             >
 235+ 7C6C             >
 235+ 7C6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 235+ 7C6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 235+ 7C6C             >
 235+ 7C6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 7C6C BD 7B 1E 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 236+ 7C70 74 67 70 6A
 237+ 7C74 CE 7B F2 69                  dw  BLK_FNAME, ONE_PLUS
 238+ 7C78 79 6E 8A 6C                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 238+ 7C7C E9 67
 239+ 7C7E A5 63 2C 00                  dw  LIT, $2C, QERROR
 239+ 7C82 53 70
 240+ 7C84 BD 7B 29 6B                  dw  BLK_FH, STORE
 241+ 7C88 3A 69                        dw  EXIT
 242+ 7C8A
 243+ 7C8A              //  ______________________________________________________________________
 244+ 7C8A              //
 245+ 7C8A              // #sec
 246+ 7C8A              // number of 512-Byte "sectors" available on thie sysstem.
 247+ 7C8A              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 248+ 7C8A
 249+ 7C8A                              Constant_Def NSEC , "#SEC", 32767
 249+ 7C8A             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 249+ 7C8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 7C8A             >
 249+ 7C8A             >                // dummy db directives used to calculate length of namec
 249+ 7C8A 23 53 45 43 >                db      "#SEC"
 249+ 7C8E             >len_NFA         defl    $ - temp_NFA
 249+ 7C8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 7C8A             >
 249+ 7C8A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 7C8B 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 249+ 7C8F             >                org     $-1                 // alter last byte of Name just above to set
 249+ 7C8E C3          >                db      {b $} | END_BIT     // msb as name end
 249+ 7C8F             >
 249+ 7C8F 5E 7C       >                dw      last_NFA            // Link to previous definition Name
 249+ 7C91             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 7C91 CD 33 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 249+ 7C94             >
 249+ 7C94             >
 249+ 7C94             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 7C94             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 7C94             >
 249+ 7C94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 7C94 FF 7F       >                dw      32767
 250+ 7C96
 251+ 7C96              //  ______________________________________________________________________
 252+ 7C96
 253+ 7C96
 254+ 7C96
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
 114  7C96                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
   1+ 7C96              //  ______________________________________________________________________
   2+ 7C96              //
   3+ 7C96              //  L3.asm
   4+ 7C96              //
   5+ 7C96              //  Continuation of L2.asm
   6+ 7C96              //  I/O Block definitions
   7+ 7C96              //  ______________________________________________________________________
   8+ 7C96
   9+ 7C96
  10+ 7C96              //  ______________________________________________________________________
  11+ 7C96              //
  12+ 7C96              // r/w          a n f --
  13+ 7C96              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C96                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C96             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C96             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C96             >
  14+ 7C96             >                // dummy db directives used to calculate length of namec
  14+ 7C96 52 2F 57    >                db      "R/W"
  14+ 7C99             >len_NFA         defl    $ - temp_NFA
  14+ 7C99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C96             >
  14+ 7C96 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C97 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C9A             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C99 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C9A             >
  14+ 7C9A 8A 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C9C             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C9C CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C9F             >
  14+ 7C9F             >
  14+ 7C9F             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C9F             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C9F             >
  14+ 7C9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C9F 64 69                        dw      TO_R                    // >r
  16+ 7CA1 FC 69                        dw      ONE_SUBTRACT            // 1-
  17+ 7CA3 9D 6A B1 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7CA7 62 6A 91 7C                  dw      OVER, NSEC              // over #sec
  19+ 7CAB FC 69 14 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7CAF E8 68                        dw      OR_OP                   // or
  21+ 7CB1 A5 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7CB5 53 70
  22+ 7CB7 76 69                        dw      R_TO                    // r>
  23+ 7CB9                                                              // if
  24+ 7CB9 D8 63                        dw      ZBRANCH
  25+ 7CBB 08 00                        dw      Read_Write_Else - $
  26+ 7CBD 24 7C                        dw          BLK_READ            //      blk-read
  27+ 7CBF C3 63                        dw      BRANCH
  28+ 7CC1 04 00                        dw      Read_Write_Endif - $
  29+ 7CC3              Read_Write_Else:                                // else
  30+ 7CC3 47 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CC5              Read_Write_Endif:                               // endif
  32+ 7CC5 3A 69                        dw      EXIT                    // ;
  33+ 7CC7
  34+ 7CC7
  35+ 7CC7              //  ______________________________________________________________________
  36+ 7CC7              //
  37+ 7CC7              // +buf        a1 -- a2 f
  38+ 7CC7              // advences to next buffer, cyclically rotating along them
  39+ 7CC7                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CC7             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CC7             >
  39+ 7CC7             >                // dummy db directives used to calculate length of namec
  39+ 7CC7 2B 42 55 46 >                db      "+BUF"
  39+ 7CCB             >len_NFA         defl    $ - temp_NFA
  39+ 7CCB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CC7             >
  39+ 7CC7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CC8 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CCC             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CCB C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CCC             >
  39+ 7CCC 96 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CCE             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CCE CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CD1             >
  39+ 7CD1             >
  39+ 7CD1             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CD1             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CD1             >
  39+ 7CD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CD1 A5 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CD5 D5 69
  41+ 7CD7 9D 6A 63 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CDB 1E 6B
  42+ 7CDD DA 6E                        dw      EQUALS                  // =
  43+ 7CDF                                                              // if
  44+ 7CDF D8 63                        dw      ZBRANCH
  45+ 7CE1 08 00                        dw      PBuf_Endif - $
  46+ 7CE3 70 6A                        dw          DROP                //      drop
  47+ 7CE5 57 6D 1E 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CE9              PBuf_Endif:                                     // endif
  49+ 7CE9 9D 6A 27 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CED 1E 6B
  50+ 7CEF CE 6E                        dw      SUBTRACT                // -
  51+ 7CF1 3A 69                        dw      EXIT                    // ;
  52+ 7CF3
  53+ 7CF3              //  ______________________________________________________________________
  54+ 7CF3              //
  55+ 7CF3              // update       --
  56+ 7CF3              // mark the last used block to be written to disk
  57+ 7CF3                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CF3             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CF3             >
  57+ 7CF3             >                // dummy db directives used to calculate length of namec
  57+ 7CF3 55 50 44 41 >                db      "UPDATE"
  57+ 7CF7 54 45       >
  57+ 7CF9             >len_NFA         defl    $ - temp_NFA
  57+ 7CF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CF3             >
  57+ 7CF3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CF4 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CF8 54 45       >
  57+ 7CFA             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CF9 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CFA             >
  57+ 7CFA C7 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CFC             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CFC CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CFF             >
  57+ 7CFF             >
  57+ 7CFF             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CFF             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CFF             >
  57+ 7CFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CFF 27 6E 1E 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7D03 1E 6B
  59+ 7D05 A5 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7D09 E8 68
  60+ 7D0B 27 6E 1E 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7D0F 29 6B
  61+ 7D11 3A 69                        dw      EXIT                    // ;
  62+ 7D13
  63+ 7D13
  64+ 7D13              //  ______________________________________________________________________
  65+ 7D13              //
  66+ 7D13              // empty-buffers --
  67+ 7D13                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7D13             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7D13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7D13             >
  67+ 7D13             >                // dummy db directives used to calculate length of namec
  67+ 7D13 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7D17 59 2D 42 55 >
  67+ 7D1B 46 46 45 52 >
  67+ 7D1F 53          >
  67+ 7D20             >len_NFA         defl    $ - temp_NFA
  67+ 7D20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7D13             >
  67+ 7D13 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7D14 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7D18 59 2D 42 55 >
  67+ 7D1C 46 46 45 52 >
  67+ 7D20 53          >
  67+ 7D21             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D20 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D21             >
  67+ 7D21 F3 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D23             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D23 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D26             >
  67+ 7D26             >
  67+ 7D26             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D26             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D26             >
  67+ 7D26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D26 57 6D 1E 6B                  dw      FIRST, FETCH            // first @
  69+ 7D2A 63 6D 1E 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D2E 62 6A CE 6E                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D32 AF 73
  71+ 7D34 3A 69                        dw      EXIT                    // ;
  72+ 7D36
  73+ 7D36              //  ______________________________________________________________________
  74+ 7D36              //
  75+ 7D36              // buffer       n -- a
  76+ 7D36              // read block n and gives the address to a buffer
  77+ 7D36              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D36              // disk before reading the block n.
  79+ 7D36
  80+ 7D36                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D36             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D36             >
  80+ 7D36             >                // dummy db directives used to calculate length of namec
  80+ 7D36 42 55 46 46 >                db      "BUFFER"
  80+ 7D3A 45 52       >
  80+ 7D3C             >len_NFA         defl    $ - temp_NFA
  80+ 7D3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D36             >
  80+ 7D36 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D37 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D3B 45 52       >
  80+ 7D3D             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D3C D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D3D             >
  80+ 7D3D 13 7D       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D3F             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D3F CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D42             >
  80+ 7D42             >
  80+ 7D42             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D42             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D42             >
  80+ 7D42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D42 1C 6E 1E 6B                  dw      USE, FETCH              // use @
  82+ 7D46 9D 6A 64 69                  dw      DUP, TO_R               // dup >r
  83+ 7D4A                                                              // begin
  84+ 7D4A              Buffer_Begin:
  85+ 7D4A CE 7C                        dw          PBUF                //      +buf
  86+ 7D4C                                                              // until
  87+ 7D4C D8 63                        dw      ZBRANCH
  88+ 7D4E FC FF                        dw      Buffer_Begin - $
  89+ 7D50 1C 6E 29 6B                  dw      USE, STORE              // use !
  90+ 7D54 88 69 1E 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D58 B1 69
  91+ 7D5A                                                              // if
  92+ 7D5A D8 63                        dw      ZBRANCH
  93+ 7D5C 14 00                        dw      Buffer_Endif - $
  94+ 7D5E 88 69 14 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D62 88 69 1E 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D66 A5 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D6A D8 68                        dw          AND_OP              //      and
  98+ 7D6C 6F 6C 9C 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D70              Buffer_Endif:                                   // endif
 100+ 7D70 88 69 29 6B                  dw      R_OP, STORE             // r !
 101+ 7D74 88 69 27 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D78 29 6B
 102+ 7D7A 76 69 14 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D7E 3A 69                        dw      EXIT                    // ;
 104+ 7D80
 105+ 7D80              //  ______________________________________________________________________
 106+ 7D80              //
 107+ 7D80              // block        n -- a
 108+ 7D80              // Leaves the buffer address that contains the block n.
 109+ 7D80              // If the block is not already present, it will be loaded from disk
 110+ 7D80              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D80              // disk before reading the block n.
 112+ 7D80              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D80
 114+ 7D80                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D80             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D80             >
 114+ 7D80             >                // dummy db directives used to calculate length of namec
 114+ 7D80 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D84 4B          >
 114+ 7D85             >len_NFA         defl    $ - temp_NFA
 114+ 7D85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D80             >
 114+ 7D80 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D81 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D85 4B          >
 114+ 7D86             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D85 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D86             >
 114+ 7D86 36 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D88             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D88 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D8B             >
 114+ 7D8B             >
 114+ 7D8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D8B             >
 114+ 7D8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D8B AE 6D 1E 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D8F D5 69 64 69                  dw      PLUS, TO_R              // + >r
 117+ 7D93 27 6E 1E 6B                  dw      PREV, FETCH             // prev @
 118+ 7D97 9D 6A 1E 6B                  dw      DUP, FETCH              // dup @
 119+ 7D9B 88 69 CE 6E                  dw      R_OP, SUBTRACT          // r -
 120+ 7D9F 9D 6A D5 69                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7DA3                                                              // if
 122+ 7DA3 D8 63                        dw        ZBRANCH
 123+ 7DA5 32 00                        dw        Block_Endif_1 - $
 124+ 7DA7              Block_Begin:                                    //      begin
 125+ 7DA7 CE 7C 97 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7DAB                                                              //          if
 127+ 7DAB D8 63                        dw          ZBRANCH
 128+ 7DAD 12 00                        dw          Block_Endif_2 - $
 129+ 7DAF 70 6A                        dw              DROP            //              drop
 130+ 7DB1 88 69 3F 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7DB5 9D 6A                        dw              DUP             //              dup
 132+ 7DB7 88 69 78 6C                  dw              R_OP, ONE       //              r 1
 133+ 7DBB 9C 7C                        dw              READ_WRITE      //              r/w
 134+ 7DBD 2A 6A                        dw              TWO_MINUS       //              2-
 135+ 7DBF              Block_Endif_2:                                  //          endif
 136+ 7DBF 9D 6A 1E 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DC3 88 69
 137+ 7DC5 CE 6E 9D 6A                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DC9 D5 69 97 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DCD                                                              //      until
 140+ 7DCD D8 63                        dw        ZBRANCH
 141+ 7DCF D8 FF                        dw        Block_Begin - $
 142+ 7DD1 9D 6A 27 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DD5 29 6B
 143+ 7DD7              Block_Endif_1:                                  // endif
 144+ 7DD7 76 69 70 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DDB 14 6A
 145+ 7DDD 3A 69                        dw      EXIT                    // ;
 146+ 7DDF
 147+ 7DDF              //  ______________________________________________________________________
 148+ 7DDF              //
 149+ 7DDF              // #buff        -- n
 150+ 7DDF              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DDF                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DDF             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DDF             >
 151+ 7DDF             >                // dummy db directives used to calculate length of namec
 151+ 7DDF 23 42 55 46 >                db      "#BUFF"
 151+ 7DE3 46          >
 151+ 7DE4             >len_NFA         defl    $ - temp_NFA
 151+ 7DE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DDF             >
 151+ 7DDF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DE0 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DE4 46          >
 151+ 7DE5             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DE4 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DE5             >
 151+ 7DE5 80 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DE7             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DE7 CD 33 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DEA             >
 151+ 7DEA             >
 151+ 7DEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DEA             >
 151+ 7DEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DEA 07 00       >                dw      7
 152+ 7DEC
 153+ 7DEC              //  ______________________________________________________________________
 154+ 7DEC              //
 155+ 7DEC              // flush        --
 156+ 7DEC                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DEC             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DEC             >
 156+ 7DEC             >                // dummy db directives used to calculate length of namec
 156+ 7DEC 46 4C 55 53 >                db      "FLUSH"
 156+ 7DF0 48          >
 156+ 7DF1             >len_NFA         defl    $ - temp_NFA
 156+ 7DF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DEC             >
 156+ 7DEC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DED 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DF1 48          >
 156+ 7DF2             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DF1 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DF2             >
 156+ 7DF2 DF 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DF4             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DF4 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DF7             >
 156+ 7DF7             >
 156+ 7DF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DF7             >
 156+ 7DF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DF7 E7 7D F2 69                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DFB 6F 6C
 158+ 7DFD              Flush_Do:                                       // do
 159+ 7DFD 5D 64                        dw      C_DO
 160+ 7DFF 6F 6C 3F 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7E03 70 6A
 161+ 7E05                                                              // loop
 162+ 7E05 22 64 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7E09 BD 7B 1E 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7E0D 86 67 70 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7E11 3A 69                        dw      EXIT                    // exit
 166+ 7E13
 167+ 7E13              //  ______________________________________________________________________
 168+ 7E13              //
 169+ 7E13              // f_getline    a m fh -- n
 170+ 7E13              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7E13              // Address a is left for subsequent processing
 172+ 7E13              // and n as the actual number of byte read, that is the length of line
 173+ 7E13                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7E13             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7E13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7E13             >
 173+ 7E13             >                // dummy db directives used to calculate length of namec
 173+ 7E13 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7E17 54 4C 49 4E >
 173+ 7E1B 45          >
 173+ 7E1C             >len_NFA         defl    $ - temp_NFA
 173+ 7E1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7E13             >
 173+ 7E13 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7E14 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7E18 54 4C 49 4E >
 173+ 7E1C 45          >
 173+ 7E1D             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7E1C C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7E1D             >
 173+ 7E1D EC 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E1F             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E1F CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E22             >
 173+ 7E22             >
 173+ 7E22             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E22             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E22             >
 173+ 7E22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E22 64 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E24 84 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E26 88 69 9B 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E2A A5 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E2E 53 70
 178+ 7E30
 179+ 7E30 E2 6A 62 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E34 F2 69 92 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E38
 182+ 7E38 88 69 B7 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E3C A5 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E40 53 70
 184+ 7E42                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E42 D8 63                        dw      ZBRANCH
 186+ 7E44 3C 00                        dw      FGetline_Else - $
 187+ 7E46 A5 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E4A 46 65
 188+ 7E4C 70 6A 79 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E50 92 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E52 A5 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E56 46 65
 191+ 7E58 70 6A 79 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E5C A8 6A 23 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E60 9D 6A 57 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E64 29 6B
 194+ 7E66 9D 6A 64 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E6A E2 6A 76 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E6E 6F 6C E0 69                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E72 76 69 53 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E76 A5 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E7A 53 70
 199+ 7E7C                                                              // else
 200+ 7E7C C3 63                        dw      BRANCH
 201+ 7E7E 0C 00                        dw      FGetline_Endif - $
 202+ 7E80              FGetline_Else:
 203+ 7E80 76 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E82 E2 6A D6 6A                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E86 70 6A 6F 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E8A              FGetline_Endif:                                 // endif
 207+ 7E8A 64 69 9D 6A                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E8E 9D 6A
 208+ 7E90 F2 69 92 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E94 88 69 40 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7E98 F2 6A D5 69                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7E9C 6F 6C 92 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7EA0 1F 6A 29 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7EA4 88 69 D5 69                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7EA8 FC 69
 214+ 7EAA 92 6A 88 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7EAE CE 6E
 215+ 7EB0 C1 73                        dw      BLANKS                  // blanks
 216+ 7EB2 76 69                        dw      R_TO                    // r>                   ( n )
 217+ 7EB4 3A 69                        dw      EXIT                    // ;
 218+ 7EB6
 219+ 7EB6              //  ______________________________________________________________________
 220+ 7EB6              //
 221+ 7EB6              // f_include    fh --
 222+ 7EB6              // Given a filehandle includes the source from file
 223+ 7EB6                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7EB6             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7EB6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7EB6             >
 223+ 7EB6             >                // dummy db directives used to calculate length of namec
 223+ 7EB6 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7EBA 43 4C 55 44 >
 223+ 7EBE 45          >
 223+ 7EBF             >len_NFA         defl    $ - temp_NFA
 223+ 7EBF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7EB6             >
 223+ 7EB6 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7EB7 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7EBB 43 4C 55 44 >
 223+ 7EBF 45          >
 223+ 7EC0             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7EBF C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7EC0             >
 223+ 7EC0 13 7E       >                dw      last_NFA            // Link to previous definition Name
 223+ 7EC2             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7EC2 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7EC5             >
 223+ 7EC5             >
 223+ 7EC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7EC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7EC5             >
 223+ 7EC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7EC5 83 6D 1E 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7EC9 64 69
 225+ 7ECB 8D 6D 1E 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7ECF 64 69
 226+ 7ED1 4C 6E 1E 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7ED5 64 69
 227+ 7ED7 88 69                        dw      R_OP                    // r
 228+ 7ED9                                                              // if
 229+ 7ED9 D8 63                        dw      ZBRANCH
 230+ 7EDB 20 00                        dw      FInclude_Else_1 - $
 231+ 7EDD 88 69 9B 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7EE1 A5 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7EE5 53 70
 233+ 7EE7 8D 6D 1E 6B                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7EEB 2A 6A                        dw          TWO_MINUS
 235+ 7EED 57 6E 1E 6B                  dw          SPAN, FETCH         //      span @ -
 236+ 7EF1 CE 6E                        dw          SUBTRACT
 237+ 7EF3 BC 6E E0 69                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7EF7                                                              // else
 239+ 7EF7 C3 63                        dw      BRANCH
 240+ 7EF9 06 00                        dw      FInclude_Endif_1 - $
 241+ 7EFB              FInclude_Else_1:
 242+ 7EFB 6F 6C 6F 6C                  dw          ZERO, ZERO          //      0 0
 243+ 7EFF                                                              // endif
 244+ 7EFF              FInclude_Endif_1:
 245+ 7EFF 64 69 64 69                  dw      TO_R, TO_R              // >r >r
 246+ 7F03 4C 6E 29 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7F07              FInclude_Begin:                                 // begin
 248+ 7F07 78 6C 88 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7F0B B6 6C
 249+ 7F0D F2 6A C1 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 250+ 7F11 92 6A F2 69                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7F15 92 6A 1F 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7F19 4C 6E 1E 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7F1D 1F 7E                        dw          F_GETLINE           //      f_getline
 254+ 7F1F                                                              // while
 255+ 7F1F D8 63                        dw      ZBRANCH
 256+ 7F21 14 00                        dw      FInclude_Repeat - $
 257+ 7F23 78 6C 83 6D                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7F27 29 6B
 258+ 7F29 6F 6C 8D 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7F2D 29 6B
 259+ 7F2F B6 77                        dw          INTERPRET           //      interpret
 260+ 7F31 C3 63                        dw      BRANCH
 261+ 7F33 D4 FF                        dw      FInclude_Begin - $
 262+ 7F35              FInclude_Repeat:                                // repeat
 263+ 7F35 4C 6E 1E 6B                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F39 6F 6C 4C 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F3D 29 6B
 265+ 7F3F 74 67                        dw      F_CLOSE                 // f_close
 266+ 7F41 A5 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F45 53 70
 267+ 7F47 76 69 76 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F4B 76 69
 268+ 7F4D 9D 6A 4C 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F51 29 6B
 269+ 7F53                                                              // if
 270+ 7F53 D8 63                        dw      ZBRANCH
 271+ 7F55 12 00                        dw      FInclude_Else_2 - $
 272+ 7F57 4C 6E 1E 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F5B 53 67                        dw          F_SEEK              //      f_seek
 274+ 7F5D A5 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F61 53 70
 275+ 7F63                                                              // else
 276+ 7F63 C3 63                        dw      BRANCH
 277+ 7F65 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F67              FInclude_Else_2:
 279+ 7F67 D6 6A                        dw          TWO_DROP            //      2drop
 280+ 7F69              FInclude_Endif_2:                               // endif
 281+ 7F69 76 69 8D 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F6D 29 6B
 282+ 7F6F 76 69 83 6D                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F73 29 6B
 283+ 7F75 3A 69                        dw      EXIT                    // ;
 284+ 7F77
 285+ 7F77              //  ______________________________________________________________________
 286+ 7F77              //
 287+ 7F77              // open<         -- fh
 288+ 7F77              // Open the following filename and return it file-handle
 289+ 7F77              // Used in the form OPEN CCCC
 290+ 7F77                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F77             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F77             >
 290+ 7F77             >                // dummy db directives used to calculate length of namec
 290+ 7F77 4F 50 45 4E >                db      "OPEN<"
 290+ 7F7B 3C          >
 290+ 7F7C             >len_NFA         defl    $ - temp_NFA
 290+ 7F7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F77             >
 290+ 7F77 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F78 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F7C 3C          >
 290+ 7F7D             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F7C BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F7D             >
 290+ 7F7D B6 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F7F             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F7F CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F82             >
 290+ 7F82             >
 290+ 7F82             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F82             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F82             >
 290+ 7F82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F82 9E 6C                        dw      BL
 292+ 7F84 FC 73 08 72                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F88 62 6A
 293+ 7F8A D5 69 6F 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F8E 92 6A 29 6B
 294+ 7F92 E8 73 78 6C                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7F96 E9 67
 295+ 7F98 A5 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7F9C 53 70                        dw      QERROR                  // ?error
 297+ 7F9E 3A 69                        dw      EXIT                    // ;
 298+ 7FA0
 299+ 7FA0              //  ______________________________________________________________________
 300+ 7FA0              //
 301+ 7FA0              // include      -- cccc
 302+ 7FA0              // Include the following filename
 303+ 7FA0                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7FA0             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7FA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7FA0             >
 303+ 7FA0             >                // dummy db directives used to calculate length of namec
 303+ 7FA0 49 4E 43 4C >                db      "INCLUDE"
 303+ 7FA4 55 44 45    >
 303+ 7FA7             >len_NFA         defl    $ - temp_NFA
 303+ 7FA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7FA0             >
 303+ 7FA0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7FA1 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7FA5 55 44 45    >
 303+ 7FA8             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7FA7 C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7FA8             >
 303+ 7FA8 77 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7FAA             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7FAA CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7FAD             >
 303+ 7FAD             >
 303+ 7FAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7FAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7FAD             >
 303+ 7FAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7FAD 7F 7F                        dw      OPEN_FH                 // open
 305+ 7FAF 9D 6A C2 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7FB3 74 67 70 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7FB7 3A 69                        dw      EXIT                    // ;
 308+ 7FB9
 309+ 7FB9              //  ______________________________________________________________________
 310+ 7FB9              //
 311+ 7FB9              // needs
 312+ 7FB9              // check for cccc exists in vocabulary
 313+ 7FB9              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7FB9
 315+ 7FB9              // temp filename cccc.f as counted string zero-padded
 316+ 7FB9                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7FB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7FB9             >
 316+ 7FB9             >                // dummy db directives used to calculate length of namec
 316+ 7FB9 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7FBD 53 2D 57    >
 316+ 7FC0             >len_NFA         defl    $ - temp_NFA
 316+ 7FC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7FB9             >
 316+ 7FB9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7FBA 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7FBE 53 2D 57    >
 316+ 7FC1             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7FC0 D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7FC1             >
 316+ 7FC1 A0 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7FC3             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7FC3 CD C5 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7FC6             >
 316+ 7FC6             >
 316+ 7FC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7FC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7FC6             >
 316+ 7FC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7FC6 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FE9              // temp complete path+filename
 319+ 7FE9                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FE9             >
 319+ 7FE9             >                // dummy db directives used to calculate length of namec
 319+ 7FE9 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FED 53 2D 46 4E >
 319+ 7FF1             >len_NFA         defl    $ - temp_NFA
 319+ 7FF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FE9             >
 319+ 7FE9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FEA 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FEE 53 2D 46 4E >
 319+ 7FF2             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FF1 CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FF2             >
 319+ 7FF2 B9 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FF4             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FF4 CD C5 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7FF7             >
 319+ 7FF7             >
 319+ 7FF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7FF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7FF7             >
 319+ 7FF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7FF7 00 00 00...                  ds      40
 321+ 801F              // constant path
 322+ 801F                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 801F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 801F             >
 322+ 801F             >                // dummy db directives used to calculate length of namec
 322+ 801F 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 8023 53 2D 49 4E >
 322+ 8027 43          >
 322+ 8028             >len_NFA         defl    $ - temp_NFA
 322+ 8028             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 801F             >
 322+ 801F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 8020 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 8024 53 2D 49 4E >
 322+ 8028 43          >
 322+ 8029             >                org     $-1                 // alter last byte of Name just above to set
 322+ 8028 C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 8029             >
 322+ 8029 E9 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 802B             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 802B CD C5 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 802E             >
 322+ 802E             >
 322+ 802E             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 802E             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 802E             >
 322+ 802E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 802E 04 69 6E 63                  db      4, "inc/", 0
 323+ 8032 2F 00
 324+ 8034                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 8034             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 8034             >
 324+ 8034             >                // dummy db directives used to calculate length of namec
 324+ 8034 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 8038 53 2D 4C 49 >
 324+ 803C 42          >
 324+ 803D             >len_NFA         defl    $ - temp_NFA
 324+ 803D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 8034             >
 324+ 8034 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 8035 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 8039 53 2D 4C 49 >
 324+ 803D 42          >
 324+ 803E             >                org     $-1                 // alter last byte of Name just above to set
 324+ 803D C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 803E             >
 324+ 803E 1F 80       >                dw      last_NFA            // Link to previous definition Name
 324+ 8040             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 8040 CD C5 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 8043             >
 324+ 8043             >
 324+ 8043             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 8043             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 8043             >
 324+ 8043             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 8043 04 6C 69 62                  db      4, "lib/", 0
 325+ 8047 2F 00
 326+ 8049
 327+ 8049              // Concatenate path at a and filename and include it
 328+ 8049              // No error is issued if filename doesn't exist.
 329+ 8049                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 8049             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 8049             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 8049             >
 329+ 8049             >                // dummy db directives used to calculate length of namec
 329+ 8049 4E 45 45 44 >                db      "NEEDS/"
 329+ 804D 53 2F       >
 329+ 804F             >len_NFA         defl    $ - temp_NFA
 329+ 804F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 8049             >
 329+ 8049 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 804A 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 804E 53 2F       >
 329+ 8050             >                org     $-1                 // alter last byte of Name just above to set
 329+ 804F AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 8050             >
 329+ 8050 34 80       >                dw      last_NFA            // Link to previous definition Name
 329+ 8052             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 8052 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 8055             >
 329+ 8055             >
 329+ 8055             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 8055             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 8055             >
 329+ 8055             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 8055 08 72 84 6A                  dw      COUNT, TUCK             // n a n
 331+ 8059 F4 7F 92 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 805D 40 68
 332+ 805F F4 7F D5 69                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 8063 C3 7F F2 69                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 8067 92 6A
 334+ 8069 A5 63 23 00                  dw      LIT, 35
 335+ 806D 40 68                        dw      CMOVE
 336+ 806F F4 7F                        dw      NEEDS_FN
 337+ 8071 E8 73 78 6C                  dw      PAD, ONE, F_OPEN
 337+ 8075 E9 67
 338+ 8077 97 69                        dw      ZEQUAL
 339+ 8079 D8 63                        dw      ZBRANCH
 340+ 807B 08 00                        dw      Needs_1 - $
 341+ 807D C2 7E                        dw          F_INCLUDE
 342+ 807F C3 63                        dw      BRANCH
 343+ 8081 04 00                        dw      Needs_2 - $
 344+ 8083              Needs_1:
 345+ 8083              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 8083              //              dw          LIT, 43, MESSAGE
 347+ 8083 70 6A                        dw          DROP
 348+ 8085              Needs_2:
 349+ 8085 3A 69                        dw      EXIT                    // ;
 350+ 8087
 351+ 8087
 352+ 8087                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 352+ 8087             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 8087             >
 352+ 8087             >                // dummy db directives used to calculate length of namec
 352+ 8087 4E 43 44 4D >                db      "NCDM"
 352+ 808B             >len_NFA         defl    $ - temp_NFA
 352+ 808B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 8087             >
 352+ 8087 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 8088 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 352+ 808C             >                org     $-1                 // alter last byte of Name just above to set
 352+ 808B CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 808C             >
 352+ 808C 49 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 808E             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 808E CD C5 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 8091             >
 352+ 8091             >
 352+ 8091             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 8091             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 8091             >
 352+ 8091             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 8091 25 5E 25 26                  db $25, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 353+ 8095 24 5F 7B 7D
 353+ 8099 7E
 354+ 809A
 355+ 809A                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 355+ 809A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 809A             >
 355+ 809A             >                // dummy db directives used to calculate length of namec
 355+ 809A 4E 44 4F 4D >                db      "NDOM"
 355+ 809E             >len_NFA         defl    $ - temp_NFA
 355+ 809E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 809A             >
 355+ 809A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 809B 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 355+ 809F             >                org     $-1                 // alter last byte of Name just above to set
 355+ 809E CD          >                db      {b $} | END_BIT     // msb as name end
 355+ 809F             >
 355+ 809F 87 80       >                dw      last_NFA            // Link to previous definition Name
 355+ 80A1             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 80A1 CD C5 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 355+ 80A4             >
 355+ 80A4             >
 355+ 80A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 80A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 80A4             >
 355+ 80A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 80A4 3A 3F 2F 2A                  db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 356+ 80A8 7C 5C 3C 3E
 356+ 80AC 22
 357+ 80AD
 358+ 80AD
 359+ 80AD              // Replace illegal character in filename using the map here above
 360+ 80AD              // at the moment we need only  "
 361+ 80AD                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 361+ 80AD             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 361+ 80AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 361+ 80AD             >
 361+ 80AD             >                // dummy db directives used to calculate length of namec
 361+ 80AD 4E 45 45 44 >                db      "NEEDS-CH"
 361+ 80B1 53 2D 43 48 >
 361+ 80B5             >len_NFA         defl    $ - temp_NFA
 361+ 80B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 361+ 80AD             >
 361+ 80AD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 361+ 80AE 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 361+ 80B2 53 2D 43 48 >
 361+ 80B6             >                org     $-1                 // alter last byte of Name just above to set
 361+ 80B5 C8          >                db      {b $} | END_BIT     // msb as name end
 361+ 80B6             >
 361+ 80B6 9A 80       >                dw      last_NFA            // Link to previous definition Name
 361+ 80B8             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 361+ 80B8 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 361+ 80BB             >
 361+ 80BB             >
 361+ 80BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 361+ 80BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 361+ 80BB             >
 361+ 80BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 362+ 80BB 08 72 1E 72                  dw      COUNT, BOUNDS
 363+ 80BF 5D 64                        dw      C_DO
 364+ 80C1              Needs_3:
 365+ 80C1 8E 80 A1 80                  dw          NCDM, NDOM, LIT, 9
 365+ 80C5 A5 63 09 00
 366+ 80C9 66 64 35 6B                  dw          I, CFETCH
 367+ 80CD 7E 65                        dw          C_MAP
 368+ 80CF 66 64 41 6B                  dw          I, CSTORE
 369+ 80D3              Needs_4:
 370+ 80D3 22 64                        dw      C_LOOP
 371+ 80D5 EC FF                        dw      Needs_3 - $
 372+ 80D7 3A 69                        dw      EXIT
 373+ 80D9
 374+ 80D9
 375+ 80D9              // include  "path/cccc.f" if cccc is not defined
 376+ 80D9              // filename cccc.f is temporary stored at NEEDS-W
 377+ 80D9                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 377+ 80D9             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 377+ 80D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 80D9             >
 377+ 80D9             >                // dummy db directives used to calculate length of namec
 377+ 80D9 4E 45 45 44 >                db      "NEEDS-F"
 377+ 80DD 53 2D 46    >
 377+ 80E0             >len_NFA         defl    $ - temp_NFA
 377+ 80E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 80D9             >
 377+ 80D9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 80DA 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 377+ 80DE 53 2D 46    >
 377+ 80E1             >                org     $-1                 // alter last byte of Name just above to set
 377+ 80E0 C6          >                db      {b $} | END_BIT     // msb as name end
 377+ 80E1             >
 377+ 80E1 AD 80       >                dw      last_NFA            // Link to previous definition Name
 377+ 80E3             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 80E3 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 80E6             >
 377+ 80E6             >
 377+ 80E6             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 80E6             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 80E6             >
 377+ 80E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 80E6 B8 75                        dw      LFIND
 379+ 80E8 D8 63                        dw      ZBRANCH
 380+ 80EA 0A 00                        dw      Needs_5 - $
 381+ 80EC
 382+ 80EC 70 6A D6 6A                  dw          DROP, TWO_DROP
 383+ 80F0 C3 63                        dw      BRANCH
 384+ 80F2 2C 00                        dw      Needs_6 - $
 385+ 80F4              Needs_5:
 386+ 80F4 C3 7F                        dw          NEEDS_W
 387+ 80F6 A5 63 23 00                  dw          LIT, 35
 388+ 80FA AF 73                        dw          ERASE                   // a
 389+ 80FC 79 6E 35 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 389+ 8100 F2 69
 390+ 8102 79 6E 62 6A                  dw          HERE, OVER              // a n here n
 391+ 8106 C3 7F 92 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 391+ 810A 40 68
 392+ 810C C3 7F B8 80                  dw          NEEDS_W, NEEDS_CHECK
 393+ 8110 C3 7F D5 69                  dw          NEEDS_W, PLUS           // a a1+1
 394+ 8114 A5 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 395+ 8118 92 6A 29 6B                  dw          SWAP, STORE             // a
 396+ 811C 52 80                        dw          NEEDS_SLASH
 397+ 811E              Needs_6:
 398+ 811E 3A 69                        dw      EXIT
 399+ 8120
 400+ 8120
 401+ 8120              // check for cccc exists in vocabulary
 402+ 8120              // if it doesn't then  INCLUDE  inc/cccc.F
 403+ 8120              // search in inc subdirectory
 404+ 8120                              Colon_Def NEEDS, "NEEDS", is_normal
 404+ 8120             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 404+ 8120             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 8120             >
 404+ 8120             >                // dummy db directives used to calculate length of namec
 404+ 8120 4E 45 45 44 >                db      "NEEDS"
 404+ 8124 53          >
 404+ 8125             >len_NFA         defl    $ - temp_NFA
 404+ 8125             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 8120             >
 404+ 8120 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 8121 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 404+ 8125 53          >
 404+ 8126             >                org     $-1                 // alter last byte of Name just above to set
 404+ 8125 D3          >                db      {b $} | END_BIT     // msb as name end
 404+ 8126             >
 404+ 8126 D9 80       >                dw      last_NFA            // Link to previous definition Name
 404+ 8128             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 8128 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 404+ 812B             >
 404+ 812B             >
 404+ 812B             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 812B             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 812B             >
 404+ 812B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 812B 8D 6D 1E 6B                  dw      TO_IN, FETCH
 406+ 812F 9D 6A                        dw      DUP
 407+ 8131 2B 80 E3 80                  dw      NEEDS_INC, NEEDS_PATH
 408+ 8135 8D 6D 29 6B                  dw      TO_IN, STORE
 409+ 8139 40 80 E3 80                  dw      NEEDS_LIB, NEEDS_PATH
 410+ 813D 8D 6D 29 6B                  dw      TO_IN, STORE
 411+ 8141 B8 75                        dw      LFIND
 412+ 8143 D8 63                        dw      ZBRANCH
 413+ 8145 08 00                        dw      Needs_10 - $
 414+ 8147 D6 6A                        dw          TWO_DROP
 415+ 8149 C3 63                        dw      BRANCH
 416+ 814B 10 00                        dw      Needs_11 - $
 417+ 814D              Needs_10:
 418+ 814D C3 7F 08 72                  dw      NEEDS_W, COUNT, TYPE, SPACE
 418+ 8151 30 72 89 6F
 419+ 8155 A5 63 2B 00                  dw      LIT, 43, MESSAGE
 419+ 8159 00 7B
 420+ 815B              Needs_11:
 421+ 815B 3A 69                        dw      EXIT
 422+ 815D
 423+ 815D
 424+ 815D              //  ______________________________________________________________________
 425+ 815D              //
 426+ 815D              // load+        n --
 427+ 815D                              Colon_Def LOAD_P, "LOAD+", is_normal
 427+ 815D             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 427+ 815D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ 815D             >
 427+ 815D             >                // dummy db directives used to calculate length of namec
 427+ 815D 4C 4F 41 44 >                db      "LOAD+"
 427+ 8161 2B          >
 427+ 8162             >len_NFA         defl    $ - temp_NFA
 427+ 8162             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ 815D             >
 427+ 815D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ 815E 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 427+ 8162 2B          >
 427+ 8163             >                org     $-1                 // alter last byte of Name just above to set
 427+ 8162 AB          >                db      {b $} | END_BIT     // msb as name end
 427+ 8163             >
 427+ 8163 20 81       >                dw      last_NFA            // Link to previous definition Name
 427+ 8165             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 8165 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 427+ 8168             >
 427+ 8168             >
 427+ 8168             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 8168             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 8168             >
 427+ 8168             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 8168 83 6D 1E 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 428+ 816C 64 69
 429+ 816E 8D 6D 1E 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 429+ 8172 64 69
 430+ 8174
 431+ 8174 6F 6C 8D 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 431+ 8178 29 6B
 432+ 817A C3 6C 5F 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 432+ 817E 83 6D 29 6B
 433+ 8182 B6 77                        dw      INTERPRET               // interpret
 434+ 8184
 435+ 8184 76 69 8D 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 435+ 8188 29 6B
 436+ 818A 76 69 83 6D                  dw      R_TO, BLK, STORE        // r> blk !
 436+ 818E 29 6B
 437+ 8190 3A 69                        dw      EXIT                    // ;
 438+ 8192
 439+ 8192              //  ______________________________________________________________________
 440+ 8192              //
 441+ 8192              // -->          --
 442+ 8192                              Colon_Def LOAD_NEXT, "-->", is_immediate
 442+ 8192             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 442+ 8192             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ 8192             >
 442+ 8192             >                // dummy db directives used to calculate length of namec
 442+ 8192 2D 2D 3E    >                db      "-->"
 442+ 8195             >len_NFA         defl    $ - temp_NFA
 442+ 8195             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ 8192             >
 442+ 8192 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ 8193 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 442+ 8196             >                org     $-1                 // alter last byte of Name just above to set
 442+ 8195 BE          >                db      {b $} | END_BIT     // msb as name end
 442+ 8196             >
 442+ 8196 5D 81       >                dw      last_NFA            // Link to previous definition Name
 442+ 8198             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 8198 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 442+ 819B             >
 442+ 819B             >
 442+ 819B             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 819B             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 819B             >
 442+ 819B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 819B D1 70                        dw      QLOADING                // ?loading
 444+ 819D 6F 6C 8D 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 444+ 81A1 29 6B
 445+ 81A3 C3 6C                        dw      BSCR                    // b/scr
 446+ 81A5 83 6D 1E 6B                  dw      BLK, FETCH              // blk @
 447+ 81A9 62 6A                        dw      OVER                    // over
 448+ 81AB 8F 7A                        dw      MOD                     // mod
 449+ 81AD CE 6E                        dw      SUBTRACT                // -
 450+ 81AF 83 6D FF 6A                  dw      BLK, PLUSSTORE          // +!
 451+ 81B3 3A 69                        dw      EXIT                    // ;
 452+ 81B5
 453+ 81B5              //  ______________________________________________________________________
 454+ 81B5              //
 455+ 81B5              // '            -- xt
 456+ 81B5                              Colon_Def TICK, "'", is_normal
 456+ 81B5             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 456+ 81B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 456+ 81B5             >
 456+ 81B5             >                // dummy db directives used to calculate length of namec
 456+ 81B5 27          >                db      "'"
 456+ 81B6             >len_NFA         defl    $ - temp_NFA
 456+ 81B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 456+ 81B5             >
 456+ 81B5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 456+ 81B6 27          >                db      "'"               // name string in 7-bit ascii, but
 456+ 81B7             >                org     $-1                 // alter last byte of Name just above to set
 456+ 81B6 A7          >                db      {b $} | END_BIT     // msb as name end
 456+ 81B7             >
 456+ 81B7 92 81       >                dw      last_NFA            // Link to previous definition Name
 456+ 81B9             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 456+ 81B9 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 456+ 81BC             >
 456+ 81BC             >
 456+ 81BC             >                endif           ; ok        // for other definitions it "points" the correct handler
 456+ 81BC             >                // Use of "; ok" to suppress "warning[fwdref]"
 456+ 81BC             >
 456+ 81BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 457+ 81BC B8 75                        dw      LFIND                   // -find
 458+ 81BE 97 69                        dw      ZEQUAL                  // 0=
 459+ 81C0 6F 6C 53 70                  dw      ZERO, QERROR            // 0 ?error
 460+ 81C4 70 6A                        dw      DROP                    // drop
 461+ 81C6 3A 69                        dw      EXIT                    // ;
 462+ 81C8
 463+ 81C8              //  ______________________________________________________________________
 464+ 81C8              //
 465+ 81C8              // forget       -- cccc
 466+ 81C8                              Colon_Def FORGET, "FORGET", is_normal
 466+ 81C8             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 466+ 81C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 466+ 81C8             >
 466+ 81C8             >                // dummy db directives used to calculate length of namec
 466+ 81C8 46 4F 52 47 >                db      "FORGET"
 466+ 81CC 45 54       >
 466+ 81CE             >len_NFA         defl    $ - temp_NFA
 466+ 81CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 466+ 81C8             >
 466+ 81C8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 466+ 81C9 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 466+ 81CD 45 54       >
 466+ 81CF             >                org     $-1                 // alter last byte of Name just above to set
 466+ 81CE D4          >                db      {b $} | END_BIT     // msb as name end
 466+ 81CF             >
 466+ 81CF B5 81       >                dw      last_NFA            // Link to previous definition Name
 466+ 81D1             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 466+ 81D1 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 466+ 81D4             >
 466+ 81D4             >
 466+ 81D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 466+ 81D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 466+ 81D4             >
 466+ 81D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 467+ 81D4 CA 6D 1E 6B                  dw      CURRENT, FETCH          // current @
 468+ 81D8 BC 6D 1E 6B                  dw      CONTEXT, FETCH          // context @
 469+ 81DC CE 6E A5 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 469+ 81E0 17 00 53 70
 470+ 81E4 B9 81 1E 70                  dw      TICK, TO_BODY           // ' >body
 471+ 81E8 9D 6A 33 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 471+ 81EC 1E 6B
 472+ 81EE E8 6E A5 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 472+ 81F2 15 00 53 70
 473+ 81F6 9D 6A F2 6F                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 473+ 81FA 3C 6D 29 6B
 474+ 81FE D2 6F 1E 6B                  dw      LFA, FETCH              // lfa @
 475+ 8202 BC 6D 1E 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 475+ 8206 29 6B
 476+ 8208 3A 69                        dw      EXIT                    // ;
 477+ 820A
 478+ 820A              //  ______________________________________________________________________
 479+ 820A              //
 480+ 820A              // marker       -- cccc
 481+ 820A                              Colon_Def MARKER, "MARKER", is_immediate
 481+ 820A             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 481+ 820A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ 820A             >
 481+ 820A             >                // dummy db directives used to calculate length of namec
 481+ 820A 4D 41 52 4B >                db      "MARKER"
 481+ 820E 45 52       >
 481+ 8210             >len_NFA         defl    $ - temp_NFA
 481+ 8210             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ 820A             >
 481+ 820A C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ 820B 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 481+ 820F 45 52       >
 481+ 8211             >                org     $-1                 // alter last byte of Name just above to set
 481+ 8210 D2          >                db      {b $} | END_BIT     // msb as name end
 481+ 8211             >
 481+ 8211 C8 81       >                dw      last_NFA            // Link to previous definition Name
 481+ 8213             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 8213 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 8216             >
 481+ 8216             >
 481+ 8216             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 8216             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 8216             >
 481+ 8216             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 8216 D0 71                        dw      CBUILDS
 483+ 8218 4B 6D 1E 6B                  dw      VOC_LINK, FETCH, COMMA
 483+ 821C 97 6E
 484+ 821E CA 6D 1E 6B                  dw      CURRENT, FETCH, COMMA
 484+ 8222 97 6E
 485+ 8224 BC 6D 1E 6B                  dw      CONTEXT, FETCH, COMMA
 485+ 8228 97 6E
 486+ 822A C1 6F 97 6E                  dw      LATEST, COMMA
 487+ 822E C1 6F 07 70                  dw      LATEST, PFA, LFA, FETCH, COMMA
 487+ 8232 D2 6F 1E 6B
 487+ 8236 97 6E
 488+ 8238 E1 71                        dw      DOES_TO
 489+ 823A 9D 6A 1E 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 489+ 823E 4B 6D 29 6B
 489+ 8242 14 6A
 490+ 8244 9D 6A 1E 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 490+ 8248 CA 6D 29 6B
 490+ 824C 14 6A
 491+ 824E 9D 6A 1E 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 491+ 8252 BC 6D 29 6B
 491+ 8256 14 6A
 492+ 8258 9D 6A 1E 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 492+ 825C 3C 6D 29 6B
 492+ 8260 14 6A
 493+ 8262 1E 6B CA 6D                  dw           FETCH, CURRENT, FETCH, STORE
 493+ 8266 1E 6B 29 6B
 494+ 826A 3A 69                        dw      EXIT
 495+ 826C
 496+ 826C              //  ______________________________________________________________________
 497+ 826C              //
 498+ 826C              // spaces       n --
 499+ 826C                              Colon_Def SPACES, "SPACES", is_normal
 499+ 826C             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 499+ 826C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 499+ 826C             >
 499+ 826C             >                // dummy db directives used to calculate length of namec
 499+ 826C 53 50 41 43 >                db      "SPACES"
 499+ 8270 45 53       >
 499+ 8272             >len_NFA         defl    $ - temp_NFA
 499+ 8272             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 499+ 826C             >
 499+ 826C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 499+ 826D 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 499+ 8271 45 53       >
 499+ 8273             >                org     $-1                 // alter last byte of Name just above to set
 499+ 8272 D3          >                db      {b $} | END_BIT     // msb as name end
 499+ 8273             >
 499+ 8273 0A 82       >                dw      last_NFA            // Link to previous definition Name
 499+ 8275             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 499+ 8275 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 499+ 8278             >
 499+ 8278             >
 499+ 8278             >                endif           ; ok        // for other definitions it "points" the correct handler
 499+ 8278             >                // Use of "; ok" to suppress "warning[fwdref]"
 499+ 8278             >
 499+ 8278             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 500+ 8278 6F 6C 3A 6F                  dw      ZERO, MAX
 501+ 827C 6F 6C 31 64                  dw      ZERO, C_Q_DO
 502+ 8280 08 00                        dw      Spaces_Leave - $
 503+ 8282              Spaces_Loop:
 504+ 8282 89 6F                        dw          SPACE
 505+ 8284 22 64                        dw      C_LOOP
 506+ 8286 FC FF                        dw      Spaces_Loop - $
 507+ 8288              Spaces_Leave:
 508+ 8288 3A 69                        dw      EXIT                    // ;
 509+ 828A
 510+ 828A              //  ______________________________________________________________________
 511+ 828A              //
 512+ 828A              // <#           --
 513+ 828A                              Colon_Def BEGIN_DASH, "<#", is_normal
 513+ 828A             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 513+ 828A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 513+ 828A             >
 513+ 828A             >                // dummy db directives used to calculate length of namec
 513+ 828A 3C 23       >                db      "<#"
 513+ 828C             >len_NFA         defl    $ - temp_NFA
 513+ 828C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 513+ 828A             >
 513+ 828A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 513+ 828B 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 513+ 828D             >                org     $-1                 // alter last byte of Name just above to set
 513+ 828C A3          >                db      {b $} | END_BIT     // msb as name end
 513+ 828D             >
 513+ 828D 6C 82       >                dw      last_NFA            // Link to previous definition Name
 513+ 828F             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 513+ 828F CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 513+ 8292             >
 513+ 8292             >
 513+ 8292             >                endif           ; ok        // for other definitions it "points" the correct handler
 513+ 8292             >                // Use of "; ok" to suppress "warning[fwdref]"
 513+ 8292             >
 513+ 8292             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 514+ 8292 E8 73 12 6E                  dw      PAD, HLD, STORE
 514+ 8296 29 6B
 515+ 8298 3A 69                        dw      EXIT
 516+ 829A
 517+ 829A              //  ______________________________________________________________________
 518+ 829A              //
 519+ 829A              // #>           --
 520+ 829A                              Colon_Def DASH_END, "#>", is_normal
 520+ 829A             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 520+ 829A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 520+ 829A             >
 520+ 829A             >                // dummy db directives used to calculate length of namec
 520+ 829A 23 3E       >                db      "#>"
 520+ 829C             >len_NFA         defl    $ - temp_NFA
 520+ 829C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 520+ 829A             >
 520+ 829A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 520+ 829B 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 520+ 829D             >                org     $-1                 // alter last byte of Name just above to set
 520+ 829C BE          >                db      {b $} | END_BIT     // msb as name end
 520+ 829D             >
 520+ 829D 8A 82       >                dw      last_NFA            // Link to previous definition Name
 520+ 829F             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 520+ 829F CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 520+ 82A2             >
 520+ 82A2             >
 520+ 82A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 520+ 82A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 520+ 82A2             >
 520+ 82A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 521+ 82A2 D6 6A                        dw      TWO_DROP
 522+ 82A4 12 6E 1E 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 522+ 82A8 E8 73 62 6A
 522+ 82AC CE 6E
 523+ 82AE 3A 69                        dw      EXIT
 524+ 82B0
 525+ 82B0              //  ______________________________________________________________________
 526+ 82B0              //
 527+ 82B0              // sign         n d -- d
 528+ 82B0                              Colon_Def SIGN, "SIGN", is_normal
 528+ 82B0             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 528+ 82B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 528+ 82B0             >
 528+ 82B0             >                // dummy db directives used to calculate length of namec
 528+ 82B0 53 49 47 4E >                db      "SIGN"
 528+ 82B4             >len_NFA         defl    $ - temp_NFA
 528+ 82B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 528+ 82B0             >
 528+ 82B0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 528+ 82B1 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 528+ 82B5             >                org     $-1                 // alter last byte of Name just above to set
 528+ 82B4 CE          >                db      {b $} | END_BIT     // msb as name end
 528+ 82B5             >
 528+ 82B5 9A 82       >                dw      last_NFA            // Link to previous definition Name
 528+ 82B7             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 528+ 82B7 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 528+ 82BA             >
 528+ 82BA             >
 528+ 82BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 528+ 82BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 528+ 82BA             >
 528+ 82BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 529+ 82BA A8 6A B1 69                  dw      ROT, ZLESS
 530+ 82BE D8 63                        dw      ZBRANCH
 531+ 82C0 08 00                        dw      Sign_Endif - $
 532+ 82C2 A5 63 2D 00                  dw          LIT, 45, HOLD
 532+ 82C6 D1 73
 533+ 82C8              Sign_Endif:
 534+ 82C8 3A 69                        dw      EXIT
 535+ 82CA
 536+ 82CA              //  ______________________________________________________________________
 537+ 82CA              //
 538+ 82CA              // #           d1 -- d2
 539+ 82CA                              Colon_Def DASH, "#", is_normal
 539+ 82CA             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 539+ 82CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 539+ 82CA             >
 539+ 82CA             >                // dummy db directives used to calculate length of namec
 539+ 82CA 23          >                db      "#"
 539+ 82CB             >len_NFA         defl    $ - temp_NFA
 539+ 82CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 539+ 82CA             >
 539+ 82CA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 539+ 82CB 23          >                db      "#"               // name string in 7-bit ascii, but
 539+ 82CC             >                org     $-1                 // alter last byte of Name just above to set
 539+ 82CB A3          >                db      {b $} | END_BIT     // msb as name end
 539+ 82CC             >
 539+ 82CC B0 82       >                dw      last_NFA            // Link to previous definition Name
 539+ 82CE             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 539+ 82CE CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 539+ 82D1             >
 539+ 82D1             >
 539+ 82D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 539+ 82D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 539+ 82D1             >
 539+ 82D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 540+ 82D1 E1 6D 1E 6B                  dw      BASE, FETCH
 541+ 82D5
 542+ 82D5 64 69                        dw      TO_R                    // >r           ( ud1 )
 543+ 82D7 6F 6C 88 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 543+ 82DB 9E 68
 544+ 82DD 76 69 92 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 544+ 82E1 64 69
 545+ 82E3 9E 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 546+ 82E5 76 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 547+ 82E7
 548+ 82E7 A8 6A                        dw      ROT
 549+ 82E9 A5 63 09 00                  dw      LIT, 9, OVER, LESS
 549+ 82ED 62 6A FA 6E
 550+ 82F1 D8 63                        dw      ZBRANCH
 551+ 82F3 08 00                        dw      Dash_Endif - $
 552+ 82F5 A5 63 07 00                  dw          LIT, 7, PLUS
 552+ 82F9 D5 69
 553+ 82FB              Dash_Endif:
 554+ 82FB
 555+ 82FB A5 63 30 00                  dw      LIT, 48, PLUS, HOLD
 555+ 82FF D5 69 D1 73
 556+ 8303 3A 69                        dw      EXIT
 557+ 8305
 558+ 8305              //  ______________________________________________________________________
 559+ 8305              //
 560+ 8305              // #s           d1 -- d2
 561+ 8305                              Colon_Def DASHES, "#S", is_normal
 561+ 8305             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 561+ 8305             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 561+ 8305             >
 561+ 8305             >                // dummy db directives used to calculate length of namec
 561+ 8305 23 53       >                db      "#S"
 561+ 8307             >len_NFA         defl    $ - temp_NFA
 561+ 8307             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 561+ 8305             >
 561+ 8305 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 561+ 8306 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 561+ 8308             >                org     $-1                 // alter last byte of Name just above to set
 561+ 8307 D3          >                db      {b $} | END_BIT     // msb as name end
 561+ 8308             >
 561+ 8308 CA 82       >                dw      last_NFA            // Link to previous definition Name
 561+ 830A             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 561+ 830A CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 561+ 830D             >
 561+ 830D             >
 561+ 830D             >                endif           ; ok        // for other definitions it "points" the correct handler
 561+ 830D             >                // Use of "; ok" to suppress "warning[fwdref]"
 561+ 830D             >
 561+ 830D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 562+ 830D              Dashes_Begin:
 563+ 830D CE 82 F2 6A                  dw      DASH, TWO_DUP
 564+ 8311 E8 68 97 69                  dw          OR_OP, ZEQUAL
 565+ 8315 D8 63                        dw      ZBRANCH
 566+ 8317 F6 FF                        dw      Dashes_Begin - $
 567+ 8319 3A 69                        dw      EXIT
 568+ 831B
 569+ 831B              //  ______________________________________________________________________
 570+ 831B              //
 571+ 831B              // d.r          d n --
 572+ 831B                              Colon_Def D_DOT_R, "D.R", is_normal
 572+ 831B             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 572+ 831B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 572+ 831B             >
 572+ 831B             >                // dummy db directives used to calculate length of namec
 572+ 831B 44 2E 52    >                db      "D.R"
 572+ 831E             >len_NFA         defl    $ - temp_NFA
 572+ 831E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 572+ 831B             >
 572+ 831B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 572+ 831C 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 572+ 831F             >                org     $-1                 // alter last byte of Name just above to set
 572+ 831E D2          >                db      {b $} | END_BIT     // msb as name end
 572+ 831F             >
 572+ 831F 05 83       >                dw      last_NFA            // Link to previous definition Name
 572+ 8321             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 572+ 8321 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 572+ 8324             >
 572+ 8324             >
 572+ 8324             >                endif           ; ok        // for other definitions it "points" the correct handler
 572+ 8324             >                // Use of "; ok" to suppress "warning[fwdref]"
 572+ 8324             >
 572+ 8324             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 573+ 8324 64 69                        dw      TO_R
 574+ 8326 84 6A AF 79                  dw      TUCK, DABS
 575+ 832A 8F 82 0A 83                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 575+ 832E B7 82 9F 82
 576+ 8332 76 69                        dw      R_TO
 577+ 8334 62 6A CE 6E                  dw      OVER, SUBTRACT, SPACES, TYPE
 577+ 8338 75 82 30 72
 578+ 833C 3A 69                        dw      EXIT
 579+ 833E
 580+ 833E              //  ______________________________________________________________________
 581+ 833E              //
 582+ 833E              // .r           n1 n2 --
 583+ 833E                              Colon_Def DOT_R, ".R", is_normal
 583+ 833E             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 583+ 833E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 583+ 833E             >
 583+ 833E             >                // dummy db directives used to calculate length of namec
 583+ 833E 2E 52       >                db      ".R"
 583+ 8340             >len_NFA         defl    $ - temp_NFA
 583+ 8340             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 583+ 833E             >
 583+ 833E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 583+ 833F 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 583+ 8341             >                org     $-1                 // alter last byte of Name just above to set
 583+ 8340 D2          >                db      {b $} | END_BIT     // msb as name end
 583+ 8341             >
 583+ 8341 1B 83       >                dw      last_NFA            // Link to previous definition Name
 583+ 8343             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 583+ 8343 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 583+ 8346             >
 583+ 8346             >
 583+ 8346             >                endif           ; ok        // for other definitions it "points" the correct handler
 583+ 8346             >                // Use of "; ok" to suppress "warning[fwdref]"
 583+ 8346             >
 583+ 8346             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 584+ 8346 64 69                        dw      TO_R
 585+ 8348 BC 6E 76 69                  dw      S_TO_D, R_TO
 586+ 834C 21 83                        dw      D_DOT_R
 587+ 834E 3A 69                        dw      EXIT
 588+ 8350
 589+ 8350              //  ______________________________________________________________________
 590+ 8350              //
 591+ 8350              // d.           d --
 592+ 8350                              Colon_Def D_DOT, "D.", is_normal
 592+ 8350             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 592+ 8350             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 592+ 8350             >
 592+ 8350             >                // dummy db directives used to calculate length of namec
 592+ 8350 44 2E       >                db      "D."
 592+ 8352             >len_NFA         defl    $ - temp_NFA
 592+ 8352             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 592+ 8350             >
 592+ 8350 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 592+ 8351 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 592+ 8353             >                org     $-1                 // alter last byte of Name just above to set
 592+ 8352 AE          >                db      {b $} | END_BIT     // msb as name end
 592+ 8353             >
 592+ 8353 3E 83       >                dw      last_NFA            // Link to previous definition Name
 592+ 8355             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 592+ 8355 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 592+ 8358             >
 592+ 8358             >
 592+ 8358             >                endif           ; ok        // for other definitions it "points" the correct handler
 592+ 8358             >                // Use of "; ok" to suppress "warning[fwdref]"
 592+ 8358             >
 592+ 8358             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 593+ 8358 6F 6C 21 83                  dw      ZERO, D_DOT_R, SPACE
 593+ 835C 89 6F
 594+ 835E 3A 69                        dw      EXIT
 595+ 8360
 596+ 8360              //  ______________________________________________________________________
 597+ 8360              //
 598+ 8360              // .            n --
 599+ 8360                              Colon_Def DOT, ".", is_normal
 599+ 8360             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 599+ 8360             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 599+ 8360             >
 599+ 8360             >                // dummy db directives used to calculate length of namec
 599+ 8360 2E          >                db      "."
 599+ 8361             >len_NFA         defl    $ - temp_NFA
 599+ 8361             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 599+ 8360             >
 599+ 8360 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 599+ 8361 2E          >                db      "."               // name string in 7-bit ascii, but
 599+ 8362             >                org     $-1                 // alter last byte of Name just above to set
 599+ 8361 AE          >                db      {b $} | END_BIT     // msb as name end
 599+ 8362             >
 599+ 8362 50 83       >                dw      last_NFA            // Link to previous definition Name
 599+ 8364             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 599+ 8364 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 599+ 8367             >
 599+ 8367             >
 599+ 8367             >                endif           ; ok        // for other definitions it "points" the correct handler
 599+ 8367             >                // Use of "; ok" to suppress "warning[fwdref]"
 599+ 8367             >
 599+ 8367             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 600+ 8367 BC 6E 55 83                  dw      S_TO_D, D_DOT
 601+ 836B 3A 69                        dw      EXIT
 602+ 836D
 603+ 836D              //  ______________________________________________________________________
 604+ 836D              //
 605+ 836D              // ?            n --
 606+ 836D                              Colon_Def QUESTION, "?", is_normal
 606+ 836D             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 606+ 836D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 606+ 836D             >
 606+ 836D             >                // dummy db directives used to calculate length of namec
 606+ 836D 3F          >                db      "?"
 606+ 836E             >len_NFA         defl    $ - temp_NFA
 606+ 836E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 606+ 836D             >
 606+ 836D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 606+ 836E 3F          >                db      "?"               // name string in 7-bit ascii, but
 606+ 836F             >                org     $-1                 // alter last byte of Name just above to set
 606+ 836E BF          >                db      {b $} | END_BIT     // msb as name end
 606+ 836F             >
 606+ 836F 60 83       >                dw      last_NFA            // Link to previous definition Name
 606+ 8371             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 606+ 8371 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 606+ 8374             >
 606+ 8374             >
 606+ 8374             >                endif           ; ok        // for other definitions it "points" the correct handler
 606+ 8374             >                // Use of "; ok" to suppress "warning[fwdref]"
 606+ 8374             >
 606+ 8374             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 607+ 8374 1E 6B 64 83                  dw      FETCH, DOT
 608+ 8378 3A 69                        dw      EXIT
 609+ 837A
 610+ 837A              //  ______________________________________________________________________
 611+ 837A              //
 612+ 837A              // u.           u --
 613+ 837A                              Colon_Def U_DOT, "U.", is_normal
 613+ 837A             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 613+ 837A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 613+ 837A             >
 613+ 837A             >                // dummy db directives used to calculate length of namec
 613+ 837A 55 2E       >                db      "U."
 613+ 837C             >len_NFA         defl    $ - temp_NFA
 613+ 837C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 613+ 837A             >
 613+ 837A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 613+ 837B 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 613+ 837D             >                org     $-1                 // alter last byte of Name just above to set
 613+ 837C AE          >                db      {b $} | END_BIT     // msb as name end
 613+ 837D             >
 613+ 837D 6D 83       >                dw      last_NFA            // Link to previous definition Name
 613+ 837F             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 613+ 837F CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 613+ 8382             >
 613+ 8382             >
 613+ 8382             >                endif           ; ok        // for other definitions it "points" the correct handler
 613+ 8382             >                // Use of "; ok" to suppress "warning[fwdref]"
 613+ 8382             >
 613+ 8382             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 614+ 8382 6F 6C 55 83                  dw      ZERO, D_DOT
 615+ 8386 3A 69                        dw      EXIT
 616+ 8388
 617+ 8388              //  ______________________________________________________________________
 618+ 8388              //
 619+ 8388              // words        --
 620+ 8388                              Colon_Def WORDS, "WORDS", is_normal
 620+ 8388             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 620+ 8388             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 620+ 8388             >
 620+ 8388             >                // dummy db directives used to calculate length of namec
 620+ 8388 57 4F 52 44 >                db      "WORDS"
 620+ 838C 53          >
 620+ 838D             >len_NFA         defl    $ - temp_NFA
 620+ 838D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 620+ 8388             >
 620+ 8388 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 620+ 8389 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 620+ 838D 53          >
 620+ 838E             >                org     $-1                 // alter last byte of Name just above to set
 620+ 838D D3          >                db      {b $} | END_BIT     // msb as name end
 620+ 838E             >
 620+ 838E 7A 83       >                dw      last_NFA            // Link to previous definition Name
 620+ 8390             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 620+ 8390 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 620+ 8393             >
 620+ 8393             >
 620+ 8393             >                endif           ; ok        // for other definitions it "points" the correct handler
 620+ 8393             >                // Use of "; ok" to suppress "warning[fwdref]"
 620+ 8393             >
 620+ 8393             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 621+ 8393 A5 63 80 00                  dw      LIT, 128, OUT, STORE
 621+ 8397 97 6D 29 6B
 622+ 839B BC 6D 1E 6B                  dw      CONTEXT, FETCH, FETCH
 622+ 839F 1E 6B
 623+ 83A1              Words_Begin:
 624+ 83A1 9D 6A 35 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 624+ 83A5 A5 63 1F 00
 624+ 83A9 D8 68
 625+ 83AB 97 6D 1E 6B                  dw          OUT, FETCH, PLUS
 625+ 83AF D5 69
 626+ 83B1 A9 6C FA 6E                  dw          CL, LESS, ZEQUAL
 626+ 83B5 97 69
 627+ 83B7 D8 63                        dw          ZBRANCH
 628+ 83B9 0A 00                        dw          Words_Endif - $
 629+ 83BB 33 68 6F 6C                  dw              CR, ZERO, OUT, STORE
 629+ 83BF 97 6D 29 6B
 630+ 83C3              Words_Endif:
 631+ 83C3 9D 6A 2C 76                  dw          DUP, ID_DOT
 632+ 83C7 07 70 D2 6F                  dw          PFA, LFA, FETCH
 632+ 83CB 1E 6B
 633+ 83CD 9D 6A 97 69                  dw          DUP, ZEQUAL
 634+ 83D1 F0 66 E8 68                  dw          QTERMINAL, OR_OP
 635+ 83D5 D8 63                        dw      ZBRANCH
 636+ 83D7 CA FF                        dw      Words_Begin - $
 637+ 83D9 70 6A                        dw      DROP
 638+ 83DB 3A 69                        dw      EXIT
 639+ 83DD
 640+ 83DD              //  ______________________________________________________________________
 641+ 83DD              //
 642+ 83DD              // list         n --
 643+ 83DD                              Colon_Def LIST, "LIST", is_normal
 643+ 83DD             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 643+ 83DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ 83DD             >
 643+ 83DD             >                // dummy db directives used to calculate length of namec
 643+ 83DD 4C 49 53 54 >                db      "LIST"
 643+ 83E1             >len_NFA         defl    $ - temp_NFA
 643+ 83E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ 83DD             >
 643+ 83DD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ 83DE 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 643+ 83E2             >                org     $-1                 // alter last byte of Name just above to set
 643+ 83E1 D4          >                db      {b $} | END_BIT     // msb as name end
 643+ 83E2             >
 643+ 83E2 88 83       >                dw      last_NFA            // Link to previous definition Name
 643+ 83E4             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 83E4 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 83E7             >
 643+ 83E7             >
 643+ 83E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 83E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 83E7             >
 643+ 83E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 83E7 7F 71 33 68                  dw      DECIMAL, CR
 645+ 83EB 9D 6A A1 6D                  dw      DUP, SCR, STORE
 645+ 83EF 29 6B
 646+ 83F1 4C 74                        dw      C_DOT_QUOTE
 647+ 83F3 05 53 63 72                  db      5, "Scr# "
 647+ 83F7 23 20
 648+ 83F9 64 83                        dw      DOT
 649+ 83FB D0 6C 6F 6C                  dw      LSCR, ZERO, C_DO
 649+ 83FF 5D 64
 650+ 8401              List_Loop:
 651+ 8401 33 68                        dw          CR
 652+ 8403 66 64 8A 6C                  dw          I, THREE
 653+ 8407 43 83 89 6F                  dw          DOT_R, SPACE
 654+ 840B 66 64 A1 6D                  dw          I, SCR, FETCH, DOT_LINE
 654+ 840F 1E 6B EB 7A
 655+ 8413 F0 66                        dw          QTERMINAL
 656+ 8415 D8 63                        dw          ZBRANCH
 657+ 8417 06 00                        dw          List_Endif - $
 658+ 8419 50 69                        dw              C_LEAVE
 659+ 841B 06 00                        dw              List_Leave - $
 660+ 841D              List_Endif:
 661+ 841D 22 64                        dw      C_LOOP
 662+ 841F E2 FF                        dw      List_Loop - $
 663+ 8421              List_Leave:
 664+ 8421 33 68                        dw      CR
 665+ 8423 3A 69                        dw      EXIT
 666+ 8425
 667+ 8425              //  ______________________________________________________________________
 668+ 8425              //
 669+ 8425              // index        n1 n2 --
 670+ 8425                              Colon_Def INDEX, "INDEX", is_normal
 670+ 8425             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 670+ 8425             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 670+ 8425             >
 670+ 8425             >                // dummy db directives used to calculate length of namec
 670+ 8425 49 4E 44 45 >                db      "INDEX"
 670+ 8429 58          >
 670+ 842A             >len_NFA         defl    $ - temp_NFA
 670+ 842A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 670+ 8425             >
 670+ 8425 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 670+ 8426 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 670+ 842A 58          >
 670+ 842B             >                org     $-1                 // alter last byte of Name just above to set
 670+ 842A D8          >                db      {b $} | END_BIT     // msb as name end
 670+ 842B             >
 670+ 842B DD 83       >                dw      last_NFA            // Link to previous definition Name
 670+ 842D             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 670+ 842D CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 670+ 8430             >
 670+ 8430             >
 670+ 8430             >                endif           ; ok        // for other definitions it "points" the correct handler
 670+ 8430             >                // Use of "; ok" to suppress "warning[fwdref]"
 670+ 8430             >
 670+ 8430             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 671+ 8430 F2 69 92 6A                  dw      ONE_PLUS, SWAP, C_DO
 671+ 8434 5D 64
 672+ 8436              Index_Loop:
 673+ 8436 33 68 66 64                  dw          CR, I, THREE
 673+ 843A 8A 6C
 674+ 843C 43 83 89 6F                  dw          DOT_R, SPACE
 675+ 8440 6F 6C 66 64                  dw          ZERO, I, DOT_LINE
 675+ 8444 EB 7A
 676+ 8446 F0 66                        dw          QTERMINAL
 677+ 8448 D8 63                        dw          ZBRANCH
 678+ 844A 06 00                        dw          Index_Endif - $
 679+ 844C 50 69                        dw              C_LEAVE
 680+ 844E 06 00                        dw              Index_Leave - $
 681+ 8450              Index_Endif:
 682+ 8450 22 64                        dw      C_LOOP
 683+ 8452 E4 FF                        dw      Index_Loop - $
 684+ 8454              Index_Leave:
 685+ 8454 33 68                        dw      CR
 686+ 8456 3A 69                        dw      EXIT
 687+ 8458
 688+ 8458              //  ______________________________________________________________________
 689+ 8458              //
 690+ 8458              // cls          --
 691+ 8458                              Colon_Def CLS, "CLS", is_normal
 691+ 8458             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 691+ 8458             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 691+ 8458             >
 691+ 8458             >                // dummy db directives used to calculate length of namec
 691+ 8458 43 4C 53    >                db      "CLS"
 691+ 845B             >len_NFA         defl    $ - temp_NFA
 691+ 845B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 691+ 8458             >
 691+ 8458 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 691+ 8459 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 691+ 845C             >                org     $-1                 // alter last byte of Name just above to set
 691+ 845B D3          >                db      {b $} | END_BIT     // msb as name end
 691+ 845C             >
 691+ 845C 25 84       >                dw      last_NFA            // Link to previous definition Name
 691+ 845E             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 691+ 845E CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 691+ 8461             >
 691+ 8461             >
 691+ 8461             >                endif           ; ok        // for other definitions it "points" the correct handler
 691+ 8461             >                // Use of "; ok" to suppress "warning[fwdref]"
 691+ 8461             >
 691+ 8461             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 692+ 8461 A5 63 0E 00                  dw      LIT, $0E, EMITC
 692+ 8465 D5 65
 693+ 8467 3A 69                        dw      EXIT
 694+ 8469
 695+ 8469              //  ______________________________________________________________________
 696+ 8469              //
 697+ 8469              // splash       --
 698+ 8469                              Colon_Def SPLASH, "SPLASH", is_normal
 698+ 8469             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 698+ 8469             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 698+ 8469             >
 698+ 8469             >                // dummy db directives used to calculate length of namec
 698+ 8469 53 50 4C 41 >                db      "SPLASH"
 698+ 846D 53 48       >
 698+ 846F             >len_NFA         defl    $ - temp_NFA
 698+ 846F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 698+ 8469             >
 698+ 8469 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 698+ 846A 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 698+ 846E 53 48       >
 698+ 8470             >                org     $-1                 // alter last byte of Name just above to set
 698+ 846F C8          >                db      {b $} | END_BIT     // msb as name end
 698+ 8470             >
 698+ 8470 58 84       >                dw      last_NFA            // Link to previous definition Name
 698+ 8472             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 698+ 8472 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 698+ 8475             >
 698+ 8475             >
 698+ 8475             >                endif           ; ok        // for other definitions it "points" the correct handler
 698+ 8475             >                // Use of "; ok" to suppress "warning[fwdref]"
 698+ 8475             >
 698+ 8475             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 699+ 8475 5E 84                        dw      CLS
 700+ 8477 4C 74                        dw      C_DOT_QUOTE
 701+ 8479 56                           db      86
 702+ 847A 76 2D 46 6F                  db      "v-Forth 1.52 NextZXOS version", 13    // 29
 702+ 847E 72 74 68 20
 702+ 8482 31 2E 35 32
 702+ 8486 20 4E 65 78
 702+ 848A 74 5A 58 4F
 702+ 848E 53 20 76 65
 702+ 8492 72 73 69 6F
 702+ 8496 6E 0D
 703+ 8498 44 69 72 65                  db      "Direct Thread - build 20220219", 13  // 31
 703+ 849C 63 74 20 54
 703+ 84A0 68 72 65 61
 703+ 84A4 64 20 2D 20
 703+ 84A8 62 75 69 6C
 703+ 84AC 64 20 32 30
 703+ 84B0 32 32 30 32
 703+ 84B4 31 39 0D
 704+ 84B7 31 39 39 30                  db      "1990-2022 Matteo Vitturi", 13        // 25
 704+ 84BB 2D 32 30 32
 704+ 84BF 32 20 4D 61
 704+ 84C3 74 74 65 6F
 704+ 84C7 20 56 69 74
 704+ 84CB 74 75 72 69
 704+ 84CF 0D
 705+ 84D0 3A 69                        dw      EXIT
 706+ 84D2
 707+ 84D2              //  ______________________________________________________________________
 708+ 84D2              //
 709+ 84D2              // video        --
 710+ 84D2                              Colon_Def VIDEO, "VIDEO", is_normal
 710+ 84D2             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 710+ 84D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 710+ 84D2             >
 710+ 84D2             >                // dummy db directives used to calculate length of namec
 710+ 84D2 56 49 44 45 >                db      "VIDEO"
 710+ 84D6 4F          >
 710+ 84D7             >len_NFA         defl    $ - temp_NFA
 710+ 84D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 710+ 84D2             >
 710+ 84D2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 710+ 84D3 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 710+ 84D7 4F          >
 710+ 84D8             >                org     $-1                 // alter last byte of Name just above to set
 710+ 84D7 CF          >                db      {b $} | END_BIT     // msb as name end
 710+ 84D8             >
 710+ 84D8 69 84       >                dw      last_NFA            // Link to previous definition Name
 710+ 84DA             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 710+ 84DA CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 710+ 84DD             >
 710+ 84DD             >
 710+ 84DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 710+ 84DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 710+ 84DD             >
 710+ 84DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 711+ 84DD 81 6C 9D 6A                  dw      TWO, DUP, DEVICE, STORE
 711+ 84E1 35 7B 29 6B
 712+ 84E5 32 67                        dw      SELECT
 713+ 84E7 3A 69                        dw      EXIT
 714+ 84E9
 715+ 84E9              //  ______________________________________________________________________
 716+ 84E9              //
 717+ 84E9              // accept-      a n1 -- n2
 718+ 84E9                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 718+ 84E9             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 718+ 84E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 718+ 84E9             >
 718+ 84E9             >                // dummy db directives used to calculate length of namec
 718+ 84E9 41 43 43 45 >                db      "ACCEPT-"
 718+ 84ED 50 54 2D    >
 718+ 84F0             >len_NFA         defl    $ - temp_NFA
 718+ 84F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 718+ 84E9             >
 718+ 84E9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 718+ 84EA 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 718+ 84EE 50 54 2D    >
 718+ 84F1             >                org     $-1                 // alter last byte of Name just above to set
 718+ 84F0 AD          >                db      {b $} | END_BIT     // msb as name end
 718+ 84F1             >
 718+ 84F1 D2 84       >                dw      last_NFA            // Link to previous definition Name
 718+ 84F3             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 718+ 84F3 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 718+ 84F6             >
 718+ 84F6             >
 718+ 84F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 718+ 84F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 718+ 84F6             >
 718+ 84F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 719+ 84F6 64 69                        dw      TO_R
 720+ 84F8 6F 6C                        dw      ZERO
 721+ 84FA 92 6A                        dw      SWAP
 722+ 84FC 9D 6A                        dw      DUP
 723+ 84FE 76 69                        dw      R_TO
 724+ 8500 D5 69                        dw      PLUS
 725+ 8502 92 6A                        dw      SWAP
 726+ 8504 5D 64                        dw      C_DO
 727+ 8506              AcceptN_Loop:
 728+ 8506 6C 7B                        dw          MMU7_FETCH
 729+ 8508 0F 67                        dw          INKEY
 730+ 850A 92 6A 7F 7B                  dw          SWAP, MMU7_STORE
 731+ 850E 9D 6A 97 69                  dw          DUP, ZEQUAL
 732+ 8512 D8 63                        dw          ZBRANCH
 733+ 8514 06 00                        dw          AcceptN_Endif_1 - $
 734+ 8516 DA 84 7B 78                  dw              VIDEO, QUIT
 735+ 851A              AcceptN_Endif_1:
 736+ 851A 9D 6A A5 63                  dw          DUP, LIT, 13, EQUALS
 736+ 851E 0D 00 DA 6E
 737+ 8522 D8 63                        dw          ZBRANCH
 738+ 8524 06 00                        dw          AcceptN_Endif_2 - $
 739+ 8526 70 6A 6F 6C                  dw              DROP, ZERO
 740+ 852A              AcceptN_Endif_2:
 741+ 852A 9D 6A A5 63                  dw          DUP, LIT, 10, EQUALS
 741+ 852E 0A 00 DA 6E
 742+ 8532 D8 63                        dw          ZBRANCH
 743+ 8534 06 00                        dw          AcceptN_Endif_3 - $
 744+ 8536 70 6A 6F 6C                  dw              DROP, ZERO
 745+ 853A              AcceptN_Endif_3:
 746+ 853A 66 64 41 6B                  dw          I, CSTORE, ONE_PLUS
 746+ 853E F2 69
 747+ 8540
 748+ 8540 66 64 35 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 748+ 8544 97 69
 749+ 8546 D8 63                        dw          ZBRANCH
 750+ 8548 06 00                        dw              AcceptN_Endif_4 - $
 751+ 854A 50 69                        dw                  C_LEAVE     //              leave
 752+ 854C 06 00                        dw                  AcceptN_Leave - $
 753+ 854E              AcceptN_Endif_4:                                 //      endif
 754+ 854E
 755+ 854E 22 64                        dw      C_LOOP
 756+ 8550 B6 FF                        dw      AcceptN_Loop -$
 757+ 8552              AcceptN_Leave:
 758+ 8552 3A 69                        dw      EXIT
 759+ 8554
 760+ 8554              //  ______________________________________________________________________
 761+ 8554              //
 762+ 8554              // load-        n --
 763+ 8554              // Provided that a stream n is OPEN# via the standart BASIC
 764+ 8554              // it accepts text from stream #n to the normal INTERPRET
 765+ 8554              // up to now, text-file must end with QUIT
 766+ 8554                              Colon_Def LOAD_N, "LOAD-", is_normal
 766+ 8554             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 766+ 8554             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 766+ 8554             >
 766+ 8554             >                // dummy db directives used to calculate length of namec
 766+ 8554 4C 4F 41 44 >                db      "LOAD-"
 766+ 8558 2D          >
 766+ 8559             >len_NFA         defl    $ - temp_NFA
 766+ 8559             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 766+ 8554             >
 766+ 8554 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 766+ 8555 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 766+ 8559 2D          >
 766+ 855A             >                org     $-1                 // alter last byte of Name just above to set
 766+ 8559 AD          >                db      {b $} | END_BIT     // msb as name end
 766+ 855A             >
 766+ 855A E9 84       >                dw      last_NFA            // Link to previous definition Name
 766+ 855C             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 766+ 855C CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 766+ 855F             >
 766+ 855F             >
 766+ 855F             >                endif           ; ok        // for other definitions it "points" the correct handler
 766+ 855F             >                // Use of "; ok" to suppress "warning[fwdref]"
 766+ 855F             >
 766+ 855F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 767+ 855F 4C 6E 29 6B                  dw      SOURCE_ID, STORE
 768+ 8563              Load_N_Begin:
 769+ 8563 0D 6D 1E 6B                  dw          TIB, FETCH
 770+ 8567 9D 6A A5 63                  dw          DUP, LIT, 80
 770+ 856B 50 00
 771+ 856D F2 6A C1 73                  dw          TWO_DUP, BLANKS
 772+ 8571 4C 6E 1E 6B                  dw          SOURCE_ID, FETCH
 773+ 8575 9F 79 9D 6A                  dw          ABS_OP, DUP, DEVICE, STORE
 773+ 8579 35 7B 29 6B
 774+ 857D 32 67                        dw          SELECT
 775+ 857F F3 84                        dw          ACCEPT_N
 776+ 8581 DA 84                        dw          VIDEO
 777+ 8583 D6 6A                        dw          TWO_DROP
 778+ 8585 6F 6C 83 6D                  dw          ZERO, BLK, STORE
 778+ 8589 29 6B
 779+ 858B 6F 6C 8D 6D                  dw          ZERO, TO_IN, STORE
 779+ 858F 29 6B
 780+ 8591 B6 77                        dw          INTERPRET
 781+ 8593 F0 66                        dw          QTERMINAL
 782+ 8595 D8 63                        dw      ZBRANCH
 783+ 8597 CC FF                        dw      Load_N_Begin - $
 784+ 8599 3A 69                        dw      EXIT
 785+ 859B
 786+ 859B              //  ______________________________________________________________________
 787+ 859B              //
 788+ 859B              // load         n --
 789+ 859B              // if n is positive, it loads screen #n (as usual)
 790+ 859B              // if n is negative, it connects stream #n to the normal INTERPRET
 791+ 859B              // this second way is useful if you want to load any kind of file
 792+ 859B              // provied that it is OPEN# the usual BASIC way.
 793+ 859B                              Colon_Def LOAD, "LOAD", is_normal
 793+ 859B             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 793+ 859B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 793+ 859B             >
 793+ 859B             >                // dummy db directives used to calculate length of namec
 793+ 859B 4C 4F 41 44 >                db      "LOAD"
 793+ 859F             >len_NFA         defl    $ - temp_NFA
 793+ 859F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 793+ 859B             >
 793+ 859B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 793+ 859C 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 793+ 85A0             >                org     $-1                 // alter last byte of Name just above to set
 793+ 859F C4          >                db      {b $} | END_BIT     // msb as name end
 793+ 85A0             >
 793+ 85A0 54 85       >                dw      last_NFA            // Link to previous definition Name
 793+ 85A2             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 793+ 85A2 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 793+ 85A5             >
 793+ 85A5             >
 793+ 85A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 793+ 85A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 793+ 85A5             >
 793+ 85A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 794+ 85A5 9D 6A B1 69                  dw      DUP, ZLESS
 795+ 85A9 D8 63                        dw      ZBRANCH
 796+ 85AB 08 00                        dw      Load_Else - $
 797+ 85AD 5C 85                        dw          LOAD_N
 798+ 85AF C3 63                        dw      BRANCH
 799+ 85B1 04 00                        dw      Load_Endif - $
 800+ 85B3              Load_Else:
 801+ 85B3 65 81                        dw          LOAD_P
 802+ 85B5              Load_Endif:
 803+ 85B5 3A 69                        dw      EXIT
 804+ 85B7
 805+ 85B7
 806+ 85B7              //  ______________________________________________________________________
 807+ 85B7              //
 808+ 85B7              // autoexec     --
 809+ 85B7              // this word is called the first time the Forth system boot to
 810+ 85B7              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 811+ 85B7                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 811+ 85B7             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 811+ 85B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 811+ 85B7             >
 811+ 85B7             >                // dummy db directives used to calculate length of namec
 811+ 85B7 41 55 54 4F >                db      "AUTOEXEC"
 811+ 85BB 45 58 45 43 >
 811+ 85BF             >len_NFA         defl    $ - temp_NFA
 811+ 85BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 811+ 85B7             >
 811+ 85B7 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 811+ 85B8 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 811+ 85BC 45 58 45 43 >
 811+ 85C0             >                org     $-1                 // alter last byte of Name just above to set
 811+ 85BF C3          >                db      {b $} | END_BIT     // msb as name end
 811+ 85C0             >
 811+ 85C0 9B 85       >                dw      last_NFA            // Link to previous definition Name
 811+ 85C2             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 811+ 85C2 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 811+ 85C5             >
 811+ 85C5             >
 811+ 85C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 811+ 85C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 811+ 85C5             >
 811+ 85C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 812+ 85C5 A5 63 0B 00                  dw      LIT, 11
 813+ 85C9 A5 63 1A 6C                  dw      LIT, NOOP
 814+ 85CD A5 63 CC 78                  dw      LIT, Autoexec_Ptr
 815+ 85D1 29 6B                        dw      STORE
 816+ 85D3 A2 85                        dw      LOAD
 817+ 85D5 7B 78                        dw      QUIT
 818+ 85D7 3A 69                        dw      EXIT
 819+ 85D9
 820+ 85D9
 821+ 85D9              //  ______________________________________________________________________
 822+ 85D9              //
 823+ 85D9              // bye     --
 824+ 85D9              //
 825+ 85D9                              Colon_Def BYE, "BYE", is_normal
 825+ 85D9             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 825+ 85D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 825+ 85D9             >
 825+ 85D9             >                // dummy db directives used to calculate length of namec
 825+ 85D9 42 59 45    >                db      "BYE"
 825+ 85DC             >len_NFA         defl    $ - temp_NFA
 825+ 85DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 825+ 85D9             >
 825+ 85D9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 825+ 85DA 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 825+ 85DD             >                org     $-1                 // alter last byte of Name just above to set
 825+ 85DC C5          >                db      {b $} | END_BIT     // msb as name end
 825+ 85DD             >
 825+ 85DD B7 85       >                dw      last_NFA            // Link to previous definition Name
 825+ 85DF             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 825+ 85DF CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 825+ 85E2             >
 825+ 85E2             >
 825+ 85E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 825+ 85E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 825+ 85E2             >
 825+ 85E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 826+ 85E2 F4 7D                        dw      FLUSH
 827+ 85E4 23 7D                        dw      EMPTY_BUFFERS
 828+ 85E6 BD 7B 1E 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 828+ 85EA 74 67 70 6A
 829+ 85EE 6F 6C DF 6C                  dw      ZERO, PLUS_ORIGIN
 830+ 85F2 64 79                        dw      BASIC
 831+ 85F4
 832+ 85F4              //  ______________________________________________________________________
 833+ 85F4              //
 834+ 85F4              // invv     --
 835+ 85F4              //
 836+ 85F4              //              Colon_Def INVV, "INVV", is_normal
 837+ 85F4              //              dw      LIT, 20, EMITC, ONE, EMITC
 838+ 85F4              //              dw      EXIT
 839+ 85F4
 840+ 85F4              //  ______________________________________________________________________
 841+ 85F4              //
 842+ 85F4              // truv     --
 843+ 85F4              //
 844+ 85F4              //              Colon_Def TRUV, "TRUV", is_normal
 845+ 85F4              //              dw      LIT, 20, EMITC, ZERO, EMITC
 846+ 85F4              //              dw      EXIT
 847+ 85F4
 848+ 85F4              //  ______________________________________________________________________
 849+ 85F4              //
 850+ 85F4              // mark     --
 851+ 85F4              //
 852+ 85F4              //              Colon_Def MARK, "MARK", is_normal
 853+ 85F4              //              dw      INVV, TYPE, TRUV
 854+ 85F4              //              dw      EXIT
 855+ 85F4
 856+ 85F4              //  ______________________________________________________________________
 857+ 85F4              //
 858+ 85F4              // back     --
 859+ 85F4              //
 860+ 85F4                              Colon_Def BACK, "BACK", is_normal
 860+ 85F4             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 860+ 85F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 860+ 85F4             >
 860+ 85F4             >                // dummy db directives used to calculate length of namec
 860+ 85F4 42 41 43 4B >                db      "BACK"
 860+ 85F8             >len_NFA         defl    $ - temp_NFA
 860+ 85F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 860+ 85F4             >
 860+ 85F4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 860+ 85F5 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 860+ 85F9             >                org     $-1                 // alter last byte of Name just above to set
 860+ 85F8 CB          >                db      {b $} | END_BIT     // msb as name end
 860+ 85F9             >
 860+ 85F9 D9 85       >                dw      last_NFA            // Link to previous definition Name
 860+ 85FB             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 860+ 85FB CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 860+ 85FE             >
 860+ 85FE             >
 860+ 85FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 860+ 85FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 860+ 85FE             >
 860+ 85FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 861+ 85FE 79 6E CE 6E                  dw      HERE, SUBTRACT, COMMA
 861+ 8602 97 6E
 862+ 8604 3A 69                        dw      EXIT
 863+ 8606
 864+ 8606              //  ______________________________________________________________________
 865+ 8606              //
 866+ 8606              // if          ( -- a 2 ) \ compile-time
 867+ 8606              // IF ... THEN
 868+ 8606              // IF ... ELSE ... ENDIF
 869+ 8606                              Colon_Def IF, "IF", is_immediate
 869+ 8606             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 869+ 8606             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 869+ 8606             >
 869+ 8606             >                // dummy db directives used to calculate length of namec
 869+ 8606 49 46       >                db      "IF"
 869+ 8608             >len_NFA         defl    $ - temp_NFA
 869+ 8608             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 869+ 8606             >
 869+ 8606 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 869+ 8607 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 869+ 8609             >                org     $-1                 // alter last byte of Name just above to set
 869+ 8608 C6          >                db      {b $} | END_BIT     // msb as name end
 869+ 8609             >
 869+ 8609 F4 85       >                dw      last_NFA            // Link to previous definition Name
 869+ 860B             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 869+ 860B CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 869+ 860E             >
 869+ 860E             >
 869+ 860E             >                endif           ; ok        // for other definitions it "points" the correct handler
 869+ 860E             >                // Use of "; ok" to suppress "warning[fwdref]"
 869+ 860E             >
 869+ 860E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 870+ 860E EC 70 D8 63                  dw      COMPILE, ZBRANCH
 871+ 8612 79 6E 6F 6C                  dw      HERE, ZERO, COMMA
 871+ 8616 97 6E
 872+ 8618 81 6C                        dw      TWO
 873+ 861A 3A 69                        dw      EXIT
 874+ 861C
 875+ 861C              //  ______________________________________________________________________
 876+ 861C              //
 877+ 861C              // then        ( a 2 -- ) \ compile-time
 878+ 861C              //
 879+ 861C                              Colon_Def THEN, "THEN", is_immediate
 879+ 861C             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 879+ 861C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 879+ 861C             >
 879+ 861C             >                // dummy db directives used to calculate length of namec
 879+ 861C 54 48 45 4E >                db      "THEN"
 879+ 8620             >len_NFA         defl    $ - temp_NFA
 879+ 8620             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 879+ 861C             >
 879+ 861C C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 879+ 861D 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 879+ 8621             >                org     $-1                 // alter last byte of Name just above to set
 879+ 8620 CE          >                db      {b $} | END_BIT     // msb as name end
 879+ 8621             >
 879+ 8621 06 86       >                dw      last_NFA            // Link to previous definition Name
 879+ 8623             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 879+ 8623 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 879+ 8626             >
 879+ 8626             >
 879+ 8626             >                endif           ; ok        // for other definitions it "points" the correct handler
 879+ 8626             >                // Use of "; ok" to suppress "warning[fwdref]"
 879+ 8626             >
 879+ 8626             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 880+ 8626 6E 70                        dw      QCOMP
 881+ 8628 81 6C 9F 70                  dw      TWO, QPAIRS
 882+ 862C 79 6E 62 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 882+ 8630 CE 6E 92 6A
 882+ 8634 29 6B
 883+ 8636 3A 69                        dw      EXIT
 884+ 8638
 885+ 8638              //  ______________________________________________________________________
 886+ 8638              //
 887+ 8638              // endif       ( a 2 -- ) \ compile-time
 888+ 8638              //
 889+ 8638                              Colon_Def ENDIF, "ENDIF", is_immediate
 889+ 8638             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 889+ 8638             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 889+ 8638             >
 889+ 8638             >                // dummy db directives used to calculate length of namec
 889+ 8638 45 4E 44 49 >                db      "ENDIF"
 889+ 863C 46          >
 889+ 863D             >len_NFA         defl    $ - temp_NFA
 889+ 863D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 889+ 8638             >
 889+ 8638 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 889+ 8639 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 889+ 863D 46          >
 889+ 863E             >                org     $-1                 // alter last byte of Name just above to set
 889+ 863D C6          >                db      {b $} | END_BIT     // msb as name end
 889+ 863E             >
 889+ 863E 1C 86       >                dw      last_NFA            // Link to previous definition Name
 889+ 8640             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 889+ 8640 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 889+ 8643             >
 889+ 8643             >
 889+ 8643             >                endif           ; ok        // for other definitions it "points" the correct handler
 889+ 8643             >                // Use of "; ok" to suppress "warning[fwdref]"
 889+ 8643             >
 889+ 8643             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 890+ 8643 23 86                        dw      THEN
 891+ 8645 3A 69                        dw      EXIT
 892+ 8647
 893+ 8647              //  ______________________________________________________________________
 894+ 8647              //
 895+ 8647              // else        ( a1 2 -- a2 2 ) \ compile-time
 896+ 8647              //
 897+ 8647                              Colon_Def ELSE, "ELSE", is_immediate
 897+ 8647             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 897+ 8647             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ 8647             >
 897+ 8647             >                // dummy db directives used to calculate length of namec
 897+ 8647 45 4C 53 45 >                db      "ELSE"
 897+ 864B             >len_NFA         defl    $ - temp_NFA
 897+ 864B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ 8647             >
 897+ 8647 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ 8648 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 897+ 864C             >                org     $-1                 // alter last byte of Name just above to set
 897+ 864B C5          >                db      {b $} | END_BIT     // msb as name end
 897+ 864C             >
 897+ 864C 38 86       >                dw      last_NFA            // Link to previous definition Name
 897+ 864E             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 864E CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 897+ 8651             >
 897+ 8651             >
 897+ 8651             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 8651             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 8651             >
 897+ 8651             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 8651 6E 70                        dw      QCOMP
 899+ 8653 81 6C 9F 70                  dw      TWO, QPAIRS
 900+ 8657 EC 70 C3 63                  dw      COMPILE, BRANCH
 901+ 865B 79 6E 6F 6C                  dw      HERE, ZERO, COMMA
 901+ 865F 97 6E
 902+ 8661 92 6A 81 6C                  dw      SWAP, TWO, ENDIF
 902+ 8665 40 86
 903+ 8667 81 6C                        dw      TWO
 904+ 8669 3A 69                        dw      EXIT
 905+ 866B
 906+ 866B              //  ______________________________________________________________________
 907+ 866B              //
 908+ 866B              // begin        ( -- a 1 ) \ compile-time
 909+ 866B              // BEGIN ... AGAIN
 910+ 866B              // BEGIN ... f UNTIL
 911+ 866B              // BEGIN ... f WHILE ... REPEAT
 912+ 866B                              Colon_Def BEGIN, "BEGIN", is_immediate
 912+ 866B             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 912+ 866B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 912+ 866B             >
 912+ 866B             >                // dummy db directives used to calculate length of namec
 912+ 866B 42 45 47 49 >                db      "BEGIN"
 912+ 866F 4E          >
 912+ 8670             >len_NFA         defl    $ - temp_NFA
 912+ 8670             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 912+ 866B             >
 912+ 866B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 912+ 866C 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 912+ 8670 4E          >
 912+ 8671             >                org     $-1                 // alter last byte of Name just above to set
 912+ 8670 CE          >                db      {b $} | END_BIT     // msb as name end
 912+ 8671             >
 912+ 8671 47 86       >                dw      last_NFA            // Link to previous definition Name
 912+ 8673             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 912+ 8673 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 912+ 8676             >
 912+ 8676             >
 912+ 8676             >                endif           ; ok        // for other definitions it "points" the correct handler
 912+ 8676             >                // Use of "; ok" to suppress "warning[fwdref]"
 912+ 8676             >
 912+ 8676             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 913+ 8676 6E 70                        dw      QCOMP
 914+ 8678 79 6E                        dw      HERE
 915+ 867A 81 6C                        dw      TWO
 916+ 867C 3A 69                        dw      EXIT
 917+ 867E
 918+ 867E              //  ______________________________________________________________________
 919+ 867E              //
 920+ 867E              // again        ( a 1 -- ) \ compile-time
 921+ 867E                              Colon_Def AGAIN, "AGAIN", is_immediate
 921+ 867E             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 921+ 867E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 921+ 867E             >
 921+ 867E             >                // dummy db directives used to calculate length of namec
 921+ 867E 41 47 41 49 >                db      "AGAIN"
 921+ 8682 4E          >
 921+ 8683             >len_NFA         defl    $ - temp_NFA
 921+ 8683             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 921+ 867E             >
 921+ 867E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 921+ 867F 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 921+ 8683 4E          >
 921+ 8684             >                org     $-1                 // alter last byte of Name just above to set
 921+ 8683 CE          >                db      {b $} | END_BIT     // msb as name end
 921+ 8684             >
 921+ 8684 6B 86       >                dw      last_NFA            // Link to previous definition Name
 921+ 8686             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 921+ 8686 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 921+ 8689             >
 921+ 8689             >
 921+ 8689             >                endif           ; ok        // for other definitions it "points" the correct handler
 921+ 8689             >                // Use of "; ok" to suppress "warning[fwdref]"
 921+ 8689             >
 921+ 8689             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 922+ 8689 6E 70                        dw      QCOMP
 923+ 868B 81 6C 9F 70                  dw      TWO, QPAIRS
 924+ 868F EC 70 C3 63                  dw      COMPILE, BRANCH
 925+ 8693 FB 85                        dw      BACK
 926+ 8695 3A 69                        dw      EXIT
 927+ 8697
 928+ 8697              //  ______________________________________________________________________
 929+ 8697              //
 930+ 8697              // until        ( a 1 -- ) \ compile-time
 931+ 8697                              Colon_Def UNTIL, "UNTIL", is_immediate
 931+ 8697             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 931+ 8697             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 931+ 8697             >
 931+ 8697             >                // dummy db directives used to calculate length of namec
 931+ 8697 55 4E 54 49 >                db      "UNTIL"
 931+ 869B 4C          >
 931+ 869C             >len_NFA         defl    $ - temp_NFA
 931+ 869C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 931+ 8697             >
 931+ 8697 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 931+ 8698 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 931+ 869C 4C          >
 931+ 869D             >                org     $-1                 // alter last byte of Name just above to set
 931+ 869C CC          >                db      {b $} | END_BIT     // msb as name end
 931+ 869D             >
 931+ 869D 7E 86       >                dw      last_NFA            // Link to previous definition Name
 931+ 869F             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 931+ 869F CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 931+ 86A2             >
 931+ 86A2             >
 931+ 86A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 931+ 86A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 931+ 86A2             >
 931+ 86A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 932+ 86A2 6E 70                        dw      QCOMP
 933+ 86A4 81 6C 9F 70                  dw      TWO, QPAIRS
 934+ 86A8 EC 70 D8 63                  dw      COMPILE, ZBRANCH
 935+ 86AC FB 85                        dw      BACK
 936+ 86AE 3A 69                        dw      EXIT
 937+ 86B0
 938+ 86B0              //  ______________________________________________________________________
 939+ 86B0              //
 940+ 86B0              // end          ( a 1 -- ) \ compile-time
 941+ 86B0                              Colon_Def END, "END", is_immediate
 941+ 86B0             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 941+ 86B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 941+ 86B0             >
 941+ 86B0             >                // dummy db directives used to calculate length of namec
 941+ 86B0 45 4E 44    >                db      "END"
 941+ 86B3             >len_NFA         defl    $ - temp_NFA
 941+ 86B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 941+ 86B0             >
 941+ 86B0 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 941+ 86B1 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 941+ 86B4             >                org     $-1                 // alter last byte of Name just above to set
 941+ 86B3 C4          >                db      {b $} | END_BIT     // msb as name end
 941+ 86B4             >
 941+ 86B4 97 86       >                dw      last_NFA            // Link to previous definition Name
 941+ 86B6             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 941+ 86B6 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 941+ 86B9             >
 941+ 86B9             >
 941+ 86B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 941+ 86B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 941+ 86B9             >
 941+ 86B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 942+ 86B9 9F 86                        dw      UNTIL
 943+ 86BB 3A 69                        dw      EXIT
 944+ 86BD
 945+ 86BD              //  ______________________________________________________________________
 946+ 86BD              //
 947+ 86BD              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 948+ 86BD                              Colon_Def WHILE, "WHILE", is_immediate
 948+ 86BD             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 948+ 86BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ 86BD             >
 948+ 86BD             >                // dummy db directives used to calculate length of namec
 948+ 86BD 57 48 49 4C >                db      "WHILE"
 948+ 86C1 45          >
 948+ 86C2             >len_NFA         defl    $ - temp_NFA
 948+ 86C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ 86BD             >
 948+ 86BD C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ 86BE 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 948+ 86C2 45          >
 948+ 86C3             >                org     $-1                 // alter last byte of Name just above to set
 948+ 86C2 C5          >                db      {b $} | END_BIT     // msb as name end
 948+ 86C3             >
 948+ 86C3 B0 86       >                dw      last_NFA            // Link to previous definition Name
 948+ 86C5             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 86C5 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 948+ 86C8             >
 948+ 86C8             >
 948+ 86C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 86C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 86C8             >
 948+ 86C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 86C8 0B 86                        dw      IF
 950+ 86CA              //              dw      TWO_PLUS // ( that is 4 )
 951+ 86CA E2 6A                        dw      TWO_SWAP
 952+ 86CC 3A 69                        dw      EXIT
 953+ 86CE
 954+ 86CE              //  ______________________________________________________________________
 955+ 86CE              //
 956+ 86CE              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 957+ 86CE                              Colon_Def REPEAT, "REPEAT", is_immediate
 957+ 86CE             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 957+ 86CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 957+ 86CE             >
 957+ 86CE             >                // dummy db directives used to calculate length of namec
 957+ 86CE 52 45 50 45 >                db      "REPEAT"
 957+ 86D2 41 54       >
 957+ 86D4             >len_NFA         defl    $ - temp_NFA
 957+ 86D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 957+ 86CE             >
 957+ 86CE C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 957+ 86CF 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 957+ 86D3 41 54       >
 957+ 86D5             >                org     $-1                 // alter last byte of Name just above to set
 957+ 86D4 D4          >                db      {b $} | END_BIT     // msb as name end
 957+ 86D5             >
 957+ 86D5 BD 86       >                dw      last_NFA            // Link to previous definition Name
 957+ 86D7             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 957+ 86D7 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 957+ 86DA             >
 957+ 86DA             >
 957+ 86DA             >                endif           ; ok        // for other definitions it "points" the correct handler
 957+ 86DA             >                // Use of "; ok" to suppress "warning[fwdref]"
 957+ 86DA             >
 957+ 86DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 958+ 86DA 86 86                        dw      AGAIN
 959+ 86DC              //              dw      TWO_MINUS
 960+ 86DC 40 86                        dw      ENDIF
 961+ 86DE 3A 69                        dw      EXIT
 962+ 86E0
 963+ 86E0              //  ______________________________________________________________________
 964+ 86E0              //
 965+ 86E0              // ?do-
 966+ 86E0              // special version of "BACK" used by ?DO and LOOP
 967+ 86E0                              Colon_Def C_DO_BACK, "?DO-", is_normal
 967+ 86E0             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 967+ 86E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 967+ 86E0             >
 967+ 86E0             >                // dummy db directives used to calculate length of namec
 967+ 86E0 3F 44 4F 2D >                db      "?DO-"
 967+ 86E4             >len_NFA         defl    $ - temp_NFA
 967+ 86E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 967+ 86E0             >
 967+ 86E0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 967+ 86E1 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 967+ 86E5             >                org     $-1                 // alter last byte of Name just above to set
 967+ 86E4 AD          >                db      {b $} | END_BIT     // msb as name end
 967+ 86E5             >
 967+ 86E5 CE 86       >                dw      last_NFA            // Link to previous definition Name
 967+ 86E7             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 967+ 86E7 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 967+ 86EA             >
 967+ 86EA             >
 967+ 86EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 967+ 86EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 967+ 86EA             >
 967+ 86EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 968+ 86EA FB 85                        dw      BACK
 969+ 86EC              CDoBack_Begin:
 970+ 86EC 0A 69 FF 6D                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 970+ 86F0 1E 6B CE 6E
 971+ 86F4 D8 63                        dw      ZBRANCH
 972+ 86F6 0A 00                        dw      CDoBack_While - $
 973+ 86F8 06 6A 40 86                  dw          TWO_PLUS, ENDIF
 974+ 86FC C3 63                        dw      BRANCH
 975+ 86FE EE FF                        dw      CDoBack_Begin - $
 976+ 8700              CDoBack_While:
 977+ 8700 B3 70 FF 6D                  dw      QCSP, CSP, STORE
 977+ 8704 29 6B
 978+ 8706 3A 69                        dw      EXIT
 979+ 8708
 980+ 8708              //  ______________________________________________________________________
 981+ 8708              //
 982+ 8708              // do
 983+ 8708              // DO  ... LOOP
 984+ 8708              // DO  ... n +LOOP
 985+ 8708              // ?DO ... LOOP
 986+ 8708              // ?DO ... n +LOOP
 987+ 8708                              Colon_Def DO, "DO", is_immediate
 987+ 8708             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 987+ 8708             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 987+ 8708             >
 987+ 8708             >                // dummy db directives used to calculate length of namec
 987+ 8708 44 4F       >                db      "DO"
 987+ 870A             >len_NFA         defl    $ - temp_NFA
 987+ 870A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 987+ 8708             >
 987+ 8708 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 987+ 8709 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 987+ 870B             >                org     $-1                 // alter last byte of Name just above to set
 987+ 870A CF          >                db      {b $} | END_BIT     // msb as name end
 987+ 870B             >
 987+ 870B E0 86       >                dw      last_NFA            // Link to previous definition Name
 987+ 870D             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 987+ 870D CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 987+ 8710             >
 987+ 8710             >
 987+ 8710             >                endif           ; ok        // for other definitions it "points" the correct handler
 987+ 8710             >                // Use of "; ok" to suppress "warning[fwdref]"
 987+ 8710             >
 987+ 8710             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 988+ 8710 EC 70 5D 64                  dw      COMPILE, C_DO
 989+ 8714 FF 6D 1E 6B                  dw      CSP, FETCH, STORE_CSP
 989+ 8718 3F 70
 990+ 871A 79 6E 8A 6C                  dw      HERE, THREE
 991+ 871E 3A 69                        dw      EXIT
 992+ 8720
 993+ 8720              //  ______________________________________________________________________
 994+ 8720              //
 995+ 8720              // loop
 996+ 8720                              Colon_Def LOOP, "LOOP", is_immediate
 996+ 8720             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 996+ 8720             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 996+ 8720             >
 996+ 8720             >                // dummy db directives used to calculate length of namec
 996+ 8720 4C 4F 4F 50 >                db      "LOOP"
 996+ 8724             >len_NFA         defl    $ - temp_NFA
 996+ 8724             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 996+ 8720             >
 996+ 8720 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 996+ 8721 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 996+ 8725             >                org     $-1                 // alter last byte of Name just above to set
 996+ 8724 D0          >                db      {b $} | END_BIT     // msb as name end
 996+ 8725             >
 996+ 8725 08 87       >                dw      last_NFA            // Link to previous definition Name
 996+ 8727             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 996+ 8727 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 996+ 872A             >
 996+ 872A             >
 996+ 872A             >                endif           ; ok        // for other definitions it "points" the correct handler
 996+ 872A             >                // Use of "; ok" to suppress "warning[fwdref]"
 996+ 872A             >
 996+ 872A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 997+ 872A 8A 6C 9F 70                  dw      THREE, QPAIRS
 998+ 872E EC 70 22 64                  dw      COMPILE, C_LOOP
 999+ 8732 E7 86                        dw      C_DO_BACK
1000+ 8734 3A 69                        dw      EXIT
1001+ 8736
1002+ 8736              //  ______________________________________________________________________
1003+ 8736              //
1004+ 8736              // +loop
1005+ 8736                              Colon_Def PLOOP, "+LOOP", is_immediate
1005+ 8736             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1005+ 8736             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1005+ 8736             >
1005+ 8736             >                // dummy db directives used to calculate length of namec
1005+ 8736 2B 4C 4F 4F >                db      "+LOOP"
1005+ 873A 50          >
1005+ 873B             >len_NFA         defl    $ - temp_NFA
1005+ 873B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1005+ 8736             >
1005+ 8736 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1005+ 8737 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1005+ 873B 50          >
1005+ 873C             >                org     $-1                 // alter last byte of Name just above to set
1005+ 873B D0          >                db      {b $} | END_BIT     // msb as name end
1005+ 873C             >
1005+ 873C 20 87       >                dw      last_NFA            // Link to previous definition Name
1005+ 873E             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1005+ 873E CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1005+ 8741             >
1005+ 8741             >
1005+ 8741             >                endif           ; ok        // for other definitions it "points" the correct handler
1005+ 8741             >                // Use of "; ok" to suppress "warning[fwdref]"
1005+ 8741             >
1005+ 8741             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1006+ 8741 8A 6C 9F 70                  dw      THREE, QPAIRS
1007+ 8745 EC 70 EC 63                  dw      COMPILE, C_PLOOP
1008+ 8749 E7 86                        dw      C_DO_BACK
1009+ 874B 3A 69                        dw      EXIT
1010+ 874D
1011+ 874D              //  ______________________________________________________________________
1012+ 874D              //
1013+ 874D              // ?do
1014+ 874D                              Colon_Def QDO, "?DO", is_immediate
1014+ 874D             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1014+ 874D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1014+ 874D             >
1014+ 874D             >                // dummy db directives used to calculate length of namec
1014+ 874D 3F 44 4F    >                db      "?DO"
1014+ 8750             >len_NFA         defl    $ - temp_NFA
1014+ 8750             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1014+ 874D             >
1014+ 874D C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1014+ 874E 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1014+ 8751             >                org     $-1                 // alter last byte of Name just above to set
1014+ 8750 CF          >                db      {b $} | END_BIT     // msb as name end
1014+ 8751             >
1014+ 8751 36 87       >                dw      last_NFA            // Link to previous definition Name
1014+ 8753             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1014+ 8753 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1014+ 8756             >
1014+ 8756             >
1014+ 8756             >                endif           ; ok        // for other definitions it "points" the correct handler
1014+ 8756             >                // Use of "; ok" to suppress "warning[fwdref]"
1014+ 8756             >
1014+ 8756             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1015+ 8756 EC 70 31 64                  dw      COMPILE, C_Q_DO
1016+ 875A FF 6D 1E 6B                  dw      CSP, FETCH, STORE_CSP
1016+ 875E 3F 70
1017+ 8760 79 6E 6F 6C                  dw      HERE, ZERO, COMMA, ZERO
1017+ 8764 97 6E 6F 6C
1018+ 8768 79 6E 8A 6C                  dw      HERE, THREE
1019+ 876C 3A 69                        dw      EXIT
1020+ 876E
1021+ 876E              Latest_Definition:
1022+ 876E              //  ______________________________________________________________________
1023+ 876E              //
1024+ 876E              // \
1025+ 876E                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1025+ 876E             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1025+ 876E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1025+ 876E             >
1025+ 876E             >                // dummy db directives used to calculate length of namec
1025+ 876E 5C          >                db      "\\"
1025+ 876F             >len_NFA         defl    $ - temp_NFA
1025+ 876F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1025+ 876E             >
1025+ 876E C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1025+ 876F 5C          >                db      "\\"               // name string in 7-bit ascii, but
1025+ 8770             >                org     $-1                 // alter last byte of Name just above to set
1025+ 876F DC          >                db      {b $} | END_BIT     // msb as name end
1025+ 8770             >
1025+ 8770 4D 87       >                dw      last_NFA            // Link to previous definition Name
1025+ 8772             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1025+ 8772 CD F3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1025+ 8775             >
1025+ 8775             >
1025+ 8775             >                endif           ; ok        // for other definitions it "points" the correct handler
1025+ 8775             >                // Use of "; ok" to suppress "warning[fwdref]"
1025+ 8775             >
1025+ 8775             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1026+ 8775 83 6D 1E 6B                  dw      BLK, FETCH
1027+ 8779 D8 63                        dw      ZBRANCH
1028+ 877B 30 00                        dw      Backslash_Else_1 - $
1029+ 877D 83 6D 1E 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1029+ 8781 78 6C 14 6F
1030+ 8785 D8 63                        dw          ZBRANCH
1031+ 8787 18 00                        dw          Backslash_Else_2 - $
1032+ 8789 8D 6D 1E 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1032+ 878D A9 6C 8F 7A
1032+ 8791 A9 6C
1033+ 8793 92 6A CE 6E                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1033+ 8797 8D 6D FF 6A
1034+ 879B C3 63                        dw          BRANCH
1035+ 879D 0A 00                        dw          Backslash_Endif_2 - $
1036+ 879F              Backslash_Else_2:
1037+ 879F B6 6C 1F 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1037+ 87A3 8D 6D 29 6B
1038+ 87A7              Backslash_Endif_2:
1039+ 87A7 C3 63                        dw      BRANCH
1040+ 87A9 0A 00                        dw      Backslash_Endif_1 - $
1041+ 87AB              Backslash_Else_1:
1042+ 87AB A5 63 50 00                  dw          LIT, 80, TO_IN, STORE
1042+ 87AF 8D 6D 29 6B
1043+ 87B3              Backslash_Endif_1:
1044+ 87B3 3A 69                        dw      EXIT
1045+ 87B5
1046+ 87B5              Fence_Word:
1047+ 87B5              //  ______________________________________________________________________
1048+ 87B5              //
1049+ 87B5
1050+ 87B5 00           Here_Dictionary db      0
1051+ 87B6
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
 115  87B6
 116  87B6              // now we save the compiled file so we can either run it or debug it
 117  87B6                              SAVENEX OPEN "output/main.nex", ORIGIN
 118  87B6                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 119  87B6                              SAVENEX CFG  0
 120  87B6                              SAVENEX BANK 2, 0
 121  87B6                              SAVENEX AUTO
 122  87B6                              SAVENEX CLOSE
 123  87B6
 124  87B6              //              PAGE 7 ;set 7 page to current slot
 125  87B6              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 126  87B6              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 127  87B6
 128  87B6                              SAVETAP "output/F15f.tap", CODE, "forth15f", ORIGIN, 10000
 129  87B6
 130  87B6                              SAVEBIN "output/forth15f.bin", ORIGIN, 10000
 131  87B6
 132  87B6                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
