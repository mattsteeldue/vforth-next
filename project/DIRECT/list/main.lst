# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.6 NextZXOS version
   7  0000              //  build 20220227
   8  0000              //
   9  0000              //  Direct-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2022
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000              //ORIGIN          equ     $8CC1                   // for binary comparison
  69  0000                              endif
  70  0000              //  ______________________________________________________________________
  71  0000
  72  0000                              if (  0 == DEBUGGING )
  73  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  74  0000                              endif
  75  0000              //  ______________________________________________________________________
  76  0000
  77  0000                              if (  1 == DEBUGGING )
  78  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  79  0000                              endif
  80  0000              //  ______________________________________________________________________
  81  0000
  82  0000                              DEVICE  ZXSPECTRUMNEXT
  83  0000
  84  0000                              ORG     ORIGIN
  85  62E6
  86  62E6                              if ( -1 == DEBUGGING )
  87  62E6 00 00 00...                  ds 128                            // for binary comparison
  88  62EA                              endif
  89  6366
  90  6366              //  ______________________________________________________________________
  91  6366              //
  92  6366              //  Naming convention for Label vs Forth correspondance
  93  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  94  6366              //    - Leading "0" is converted into "Z_"
  95  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  96  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  97  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  98  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  99  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 100  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 101  6366              //    - Equal sign "=" is converted in EQUAL
 102  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 103  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 104  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 105  6366              //    - Exclamation mark "!" is converted in STORE
 106  6366              //    - At-Sign "@" is converted in FETCH
 107  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 108  6366
 109  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~
 125+ 6366 ~
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
 110  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 0E 79                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 0E 79                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 40 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 87 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 87 87        DP_origin       dw      Fence_Word
  39+ 6386 16 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E
 100+ 639E
 101+ 639E
 102+ 639E
 103+ 639E E9                           jp      (hl)                // and jump to it
 104+ 639F                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 639F
 106+ 639F              //  ______________________________________________________________________
 107+ 639F              //
 108+ 639F              // lit          -- x
 109+ 639F              // puts on top of stack the value of the following word.
 110+ 639F              // it is compiled in colon definition before a literal number
 111+ 639F
 112+ 639F                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 639F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 639F             >
 112+ 639F             >                // dummy db directives used to calculate length of namec
 112+ 639F 4C 49 54    >                db      "LIT"
 112+ 63A2             >len_NFA         defl    $ - temp_NFA
 112+ 63A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 639F             >
 112+ 639F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A0 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A3             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A2 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A3             >
 112+ 63A3 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A5             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 112+ 63A5 ~           >
 112+ 63A5 ~           >
 112+ 63A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63A5             >
 112+ 63A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63A5
 114+ 63A5 0A                           ld      a, (bc)
 115+ 63A6 03                           inc     bc
 116+ 63A7 6F                           ld      l, a
 117+ 63A8 0A                           ld      a, (bc)
 118+ 63A9 03                           inc     bc
 119+ 63AA 67                           ld      h, a
 120+ 63AB                              psh1
 120+ 63AB E5          >                push    hl
 120+ 63AC DD E9       >                jp      (ix)
 121+ 63AE
 122+ 63AE              //  ______________________________________________________________________
 123+ 63AE              //
 124+ 63AE              // execute      i*x xt -- j*x
 125+ 63AE              // execution token. usually xt is given by CFA
 126+ 63AE
 127+ 63AE                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63AE             >
 127+ 63AE             >                // dummy db directives used to calculate length of namec
 127+ 63AE 45 58 45 43 >                db      "EXECUTE"
 127+ 63B2 55 54 45    >
 127+ 63B5             >len_NFA         defl    $ - temp_NFA
 127+ 63B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63AE             >
 127+ 63AE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63AF 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B3 55 54 45    >
 127+ 63B6             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63B5 C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63B6             >
 127+ 63B6 9F 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63B8             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 127+ 63B8 ~           >
 127+ 63B8 ~           >
 127+ 63B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63B8             >
 127+ 63B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63B8 C9                           ret
 129+ 63B9              //              pop     hl
 130+ 63B9              //              jp      (hl)
 131+ 63B9              //              jr      Exec_Ptr
 132+ 63B9
 133+ 63B9
 134+ 63B9              //  ______________________________________________________________________
 135+ 63B9              //
 136+ 63B9              // (+loop)       --
 137+ 63B9              // compiled by +LOOP. it uses the top two values of return-stack to
 138+ 63B9              // keep track of index and limit, they are accessed via I and I'
 139+ 63B9                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 139+ 63B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 63B9             >
 139+ 63B9             >                // dummy db directives used to calculate length of namec
 139+ 63B9 28 2B 4C 4F >                db      "(+LOOP)"
 139+ 63BD 4F 50 29    >
 139+ 63C0             >len_NFA         defl    $ - temp_NFA
 139+ 63C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 63B9             >
 139+ 63B9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 63BA 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 139+ 63BE 4F 50 29    >
 139+ 63C1             >                org     $-1                 // alter last byte of Name just above to set
 139+ 63C0 A9          >                db      {b $} | END_BIT     // msb as name end
 139+ 63C1             >
 139+ 63C1 AE 63       >                dw      last_NFA            // Link to previous definition Name
 139+ 63C3             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 63C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 139+ 63C3 ~           >
 139+ 63C3 ~           >
 139+ 63C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 63C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 63C3             >
 139+ 63C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 140+ 63C3
 141+ 63C3              Loop_Ptr:
 142+ 63C3 D9                           exx
 143+ 63C4                              ldhlrp                      // ld hl,rp macro 30h +Origin
 143+ 63C4 2A 96 63    >                ld      hl,(RP_Pointer)
 144+ 63C7
 145+ 63C7 C1                           pop     bc                  // bc is increment
 146+ 63C8
 147+ 63C8 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 148+ 63C9 7B                           ld      a, e                // de keeps index before increment.
 149+ 63CA 81                           add     c
 150+ 63CB 77                           ld      (hl), a
 151+ 63CC 23                           inc     hl
 152+ 63CD 56                           ld      d, (hl)
 153+ 63CE 7A                           ld      a, d
 154+ 63CF 88                           adc     b
 155+ 63D0 77                           ld      (hl),a
 156+ 63D1 23                           inc     hl
 157+ 63D2
 158+ 63D2 7B                           ld      a, e
 159+ 63D3 96                           sub     (hl)
 160+ 63D4 5F                           ld      e, a
 161+ 63D5 23                           inc     hl
 162+ 63D6 7A                           ld      a, d
 163+ 63D7 9E                           sbc     (hl)
 164+ 63D8 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 165+ 63D9
 166+ 63D9 EB                           ex      de, hl
 167+ 63DA 09                           add     hl, bc
 168+ 63DB
 169+ 63DB CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 170+ 63DD 28 01                        jr      z, Loop_NegativeIncrement
 171+ 63DF 3F                               ccf
 172+ 63E0              Loop_NegativeIncrement:
 173+ 63E0 38 03                        jr      c, Loop_Endif
 174+ 63E2 D9                               exx
 175+ 63E3 18 22                            jr      Branch_Ptr      // perform branch consuming following cell
 176+ 63E5              Loop_Endif:
 177+ 63E5 EB                           ex      de, hl
 178+ 63E6 23                           inc     hl
 179+ 63E7                              ldrphl                      // ld rp,hl macro 30h +Origin
 179+ 63E7 22 96 63    >                ld      (RP_Pointer),hl
 180+ 63EA D9                           exx
 181+ 63EB 03                           inc     bc                  // skip branch-style offset
 182+ 63EC 03                           inc     bc
 183+ 63ED                              next
 183+ 63ED DD E9       >                jp      (ix)
 184+ 63EF
 185+ 63EF              //  ______________________________________________________________________
 186+ 63EF              //
 187+ 63EF              // (loop)       n --
 188+ 63EF              // same as (LOOP) but index is incremented by 1
 189+ 63EF              // compiled by LOOP.
 190+ 63EF                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 190+ 63EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 63EF             >
 190+ 63EF             >                // dummy db directives used to calculate length of namec
 190+ 63EF 28 4C 4F 4F >                db      "(LOOP)"
 190+ 63F3 50 29       >
 190+ 63F5             >len_NFA         defl    $ - temp_NFA
 190+ 63F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 63EF             >
 190+ 63EF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 63F0 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 190+ 63F4 50 29       >
 190+ 63F6             >                org     $-1                 // alter last byte of Name just above to set
 190+ 63F5 A9          >                db      {b $} | END_BIT     // msb as name end
 190+ 63F6             >
 190+ 63F6 B9 63       >                dw      last_NFA            // Link to previous definition Name
 190+ 63F8             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 63F8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190+ 63F8 ~           >
 190+ 63F8 ~           >
 190+ 63F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 63F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 63F8             >
 190+ 63F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 63F8 ED 8A 00 01                  push    1
 192+ 63FC 18 C5                        jr      Loop_Ptr
 193+ 63FE
 194+ 63FE              //  ______________________________________________________________________
 195+ 63FE              //
 196+ 63FE              // branch       --
 197+ 63FE              // unconditional branch in colon definition using the following cell as an offset from current IP value
 198+ 63FE              // compiled by ELSE, AGAIN and some other immediate words
 199+ 63FE
 200+ 63FE                              New_Def BRANCH, "BRANCH", is_code, is_normal
 200+ 63FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ 63FE             >
 200+ 63FE             >                // dummy db directives used to calculate length of namec
 200+ 63FE 42 52 41 4E >                db      "BRANCH"
 200+ 6402 43 48       >
 200+ 6404             >len_NFA         defl    $ - temp_NFA
 200+ 6404             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ 63FE             >
 200+ 63FE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ 63FF 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 200+ 6403 43 48       >
 200+ 6405             >                org     $-1                 // alter last byte of Name just above to set
 200+ 6404 C8          >                db      {b $} | END_BIT     // msb as name end
 200+ 6405             >
 200+ 6405 EF 63       >                dw      last_NFA            // Link to previous definition Name
 200+ 6407             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 6407 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 200+ 6407 ~           >
 200+ 6407 ~           >
 200+ 6407             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 6407             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 6407             >
 200+ 6407             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 6407              Branch_Ptr:
 202+ 6407 60                           ld      h, b
 203+ 6408 69                           ld      l, c
 204+ 6409 5E                           ld      e, (hl)
 205+ 640A 23                           inc     hl
 206+ 640B 56                           ld      d, (hl)
 207+ 640C 2B                           dec     hl                  // offset is calculated from current IP
 208+ 640D 19                           add     hl, de
 209+ 640E 4D                           ld      c, l
 210+ 640F 44                           ld      b, h
 211+ 6410                              next
 211+ 6410 DD E9       >                jp      (ix)
 212+ 6412
 213+ 6412
 214+ 6412              //  ______________________________________________________________________
 215+ 6412              //
 216+ 6412              // 0branch      f --
 217+ 6412              // conditional branch if the top-of-stack is ZERO or FALSE.
 218+ 6412              // compiled by IF, UNTIL and some other immediate words
 219+ 6412
 220+ 6412                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 220+ 6412             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 6412             >
 220+ 6412             >                // dummy db directives used to calculate length of namec
 220+ 6412 30 42 52 41 >                db      "0BRANCH"
 220+ 6416 4E 43 48    >
 220+ 6419             >len_NFA         defl    $ - temp_NFA
 220+ 6419             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 6412             >
 220+ 6412 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 6413 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 220+ 6417 4E 43 48    >
 220+ 641A             >                org     $-1                 // alter last byte of Name just above to set
 220+ 6419 C8          >                db      {b $} | END_BIT     // msb as name end
 220+ 641A             >
 220+ 641A FE 63       >                dw      last_NFA            // Link to previous definition Name
 220+ 641C             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 641C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 220+ 641C ~           >
 220+ 641C ~           >
 220+ 641C             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 641C             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 641C             >
 220+ 641C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 641C              ZBranch_Ptr:
 222+ 641C E1                           pop     hl
 223+ 641D 7D                           ld      a, l
 224+ 641E B4                           or      h
 225+ 641F 28 E6                        jr      z, Branch_Ptr
 226+ 6421 03                           inc     bc                  // if not branch, skip offset cell.
 227+ 6422 03                           inc     bc
 228+ 6423                              next
 228+ 6423 DD E9       >                jp      (ix)
 229+ 6425
 230+ 6425              //  ______________________________________________________________________
 231+ 6425              //
 232+ 6425              // (leave)        --
 233+ 6425              // compiled by LEAVE
 234+ 6425              // this forces to exit from loop and jump past
 235+ 6425                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 235+ 6425             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 235+ 6425             >
 235+ 6425             >                // dummy db directives used to calculate length of namec
 235+ 6425 28 4C 45 41 >                db      "(LEAVE)"
 235+ 6429 56 45 29    >
 235+ 642C             >len_NFA         defl    $ - temp_NFA
 235+ 642C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 235+ 6425             >
 235+ 6425 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 235+ 6426 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 235+ 642A 56 45 29    >
 235+ 642D             >                org     $-1                 // alter last byte of Name just above to set
 235+ 642C A9          >                db      {b $} | END_BIT     // msb as name end
 235+ 642D             >
 235+ 642D 12 64       >                dw      last_NFA            // Link to previous definition Name
 235+ 642F             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 235+ 642F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 235+ 642F ~           >
 235+ 642F ~           >
 235+ 642F             >                endif           ; ok        // for other definitions it "points" the correct handler
 235+ 642F             >                // Use of "; ok" to suppress "warning[fwdref]"
 235+ 642F             >
 235+ 642F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 642F
 237+ 642F                              ldhlrp
 237+ 642F 2A 96 63    >                ld      hl,(RP_Pointer)
 238+ 6432 11 04 00                     ld      de, 4
 239+ 6435 19                           add     hl, de
 240+ 6436                              ldrphl
 240+ 6436 22 96 63    >                ld      (RP_Pointer),hl
 241+ 6439
 242+ 6439 18 CC                        jr      Branch_Ptr       // perform branch consuming following cell
 243+ 643B                              next
 243+ 643B DD E9       >                jp      (ix)
 244+ 643D
 245+ 643D              //  ______________________________________________________________________
 246+ 643D              //
 247+ 643D              // (?do)        lim ind --
 248+ 643D              // compiled by ?DO to make a loop checking for lim == ind first
 249+ 643D              // at run-time (?DO) must be followed by a BRANCH offset
 250+ 643D              // used to skip the loop if lim == ind
 251+ 643D                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 251+ 643D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 251+ 643D             >
 251+ 643D             >                // dummy db directives used to calculate length of namec
 251+ 643D 28 3F 44 4F >                db      "(?DO)"
 251+ 6441 29          >
 251+ 6442             >len_NFA         defl    $ - temp_NFA
 251+ 6442             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 251+ 643D             >
 251+ 643D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 251+ 643E 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 251+ 6442 29          >
 251+ 6443             >                org     $-1                 // alter last byte of Name just above to set
 251+ 6442 A9          >                db      {b $} | END_BIT     // msb as name end
 251+ 6443             >
 251+ 6443 25 64       >                dw      last_NFA            // Link to previous definition Name
 251+ 6445             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 251+ 6445 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 251+ 6445 ~           >
 251+ 6445 ~           >
 251+ 6445             >                endif           ; ok        // for other definitions it "points" the correct handler
 251+ 6445             >                // Use of "; ok" to suppress "warning[fwdref]"
 251+ 6445             >
 251+ 6445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 252+ 6445 D1                           pop     de                  // de has the index
 253+ 6446 E1                           pop     hl                  // hl has the limit
 254+ 6447 E5                           push    hl
 255+ 6448 D5                           push    de
 256+ 6449 A7                           and     a                   // reset carry flag
 257+ 644A ED 52                        sbc     hl, de              // compute limit - index
 258+ 644C 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 259+ 644E D1                               pop     de
 260+ 644F E1                               pop     hl
 261+ 6450
 262+ 6450 18 B5                            jr      Branch_Ptr          // perform branch consuming following cell
 263+ 6452              Do_Ptr:
 264+ 6452                              ldhlrp                      // prepare RP
 264+ 6452 2A 96 63    >                ld      hl,(RP_Pointer)
 265+ 6455 2B                           dec     hl
 266+ 6456 2B                           dec     hl
 267+ 6457 2B                           dec     hl
 268+ 6458 2B                           dec     hl
 269+ 6459                              ldrphl
 269+ 6459 22 96 63    >                ld      (RP_Pointer),hl
 270+ 645C
 271+ 645C                              // store index as top RP
 272+ 645C D1                           pop     de
 273+ 645D 73                           ld      (hl), e
 274+ 645E 23                           inc     hl
 275+ 645F 72                           ld      (hl), d
 276+ 6460 23                           inc     hl
 277+ 6461                              // stores lim as second from top RP
 278+ 6461 D1                           pop     de
 279+ 6462 73                           ld      (hl), e
 280+ 6463 23                           inc     hl
 281+ 6464 72                           ld      (hl), d
 282+ 6465
 283+ 6465                              // skip branch-style offseet
 284+ 6465 03                           inc     bc
 285+ 6466 03                           inc     bc
 286+ 6467                              next
 286+ 6467 DD E9       >                jp      (ix)
 287+ 6469
 288+ 6469              //  ______________________________________________________________________
 289+ 6469              //
 290+ 6469              // (do)        lim ind --
 291+ 6469              // compiled by DO to make a loop checking for lim == ind first
 292+ 6469              // this is a simpler version of (?DO)
 293+ 6469                              New_Def C_DO, "(DO)", is_code, is_normal
 293+ 6469             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 6469             >
 293+ 6469             >                // dummy db directives used to calculate length of namec
 293+ 6469 28 44 4F 29 >                db      "(DO)"
 293+ 646D             >len_NFA         defl    $ - temp_NFA
 293+ 646D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 6469             >
 293+ 6469 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 646A 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 293+ 646E             >                org     $-1                 // alter last byte of Name just above to set
 293+ 646D A9          >                db      {b $} | END_BIT     // msb as name end
 293+ 646E             >
 293+ 646E 3D 64       >                dw      last_NFA            // Link to previous definition Name
 293+ 6470             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 6470 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 293+ 6470 ~           >
 293+ 6470 ~           >
 293+ 6470             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 6470             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 6470             >
 293+ 6470             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 6470 0B                           dec     bc                  // prepare IP beforehand
 295+ 6471 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 296+ 6472 18 DE                        jr      Do_Ptr
 297+ 6474
 298+ 6474              //  ______________________________________________________________________
 299+ 6474              //
 300+ 6474              // i            -- n
 301+ 6474              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 302+ 6474              // the current value of the index-loop
 303+ 6474                              New_Def I, "I", is_code, is_normal
 303+ 6474             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 6474             >
 303+ 6474             >                // dummy db directives used to calculate length of namec
 303+ 6474 49          >                db      "I"
 303+ 6475             >len_NFA         defl    $ - temp_NFA
 303+ 6475             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 6474             >
 303+ 6474 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 6475 49          >                db      "I"               // name string in 7-bit ascii, but
 303+ 6476             >                org     $-1                 // alter last byte of Name just above to set
 303+ 6475 C9          >                db      {b $} | END_BIT     // msb as name end
 303+ 6476             >
 303+ 6476 69 64       >                dw      last_NFA            // Link to previous definition Name
 303+ 6478             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 6478 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 303+ 6478 ~           >
 303+ 6478 ~           >
 303+ 6478             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 6478             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 6478             >
 303+ 6478             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 6478              I_Ptr:
 305+ 6478
 306+ 6478                              ldhlrp
 306+ 6478 2A 96 63    >                ld      hl,(RP_Pointer)
 307+ 647B              I_Ptr_prime
 308+ 647B 5E                           ld      e, (hl)
 309+ 647C 23                           inc     hl
 310+ 647D 56                           ld      d, (hl)
 311+ 647E D5                           push    de
 312+ 647F                              next
 312+ 647F DD E9       >                jp      (ix)
 313+ 6481
 314+ 6481
 315+ 6481              //  ______________________________________________________________________
 316+ 6481              //
 317+ 6481              // i'            -- n
 318+ 6481              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 319+ 6481              // the limit of the index-loop
 320+ 6481
 321+ 6481                              New_Def II, "I'", is_code, is_normal
 321+ 6481             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 6481             >
 321+ 6481             >                // dummy db directives used to calculate length of namec
 321+ 6481 49 27       >                db      "I'"
 321+ 6483             >len_NFA         defl    $ - temp_NFA
 321+ 6483             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 6481             >
 321+ 6481 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 6482 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 321+ 6484             >                org     $-1                 // alter last byte of Name just above to set
 321+ 6483 A7          >                db      {b $} | END_BIT     // msb as name end
 321+ 6484             >
 321+ 6484 74 64       >                dw      last_NFA            // Link to previous definition Name
 321+ 6486             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 6486 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 321+ 6486 ~           >
 321+ 6486 ~           >
 321+ 6486             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 6486             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 6486             >
 321+ 6486             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 6486                              ldhlrp
 322+ 6486 2A 96 63    >                ld      hl,(RP_Pointer)
 323+ 6489 23                           inc     hl
 324+ 648A 23                           inc     hl
 325+ 648B 18 EE                        jr      I_Ptr_prime
 326+ 648D
 327+ 648D
 328+ 648D              //  ______________________________________________________________________
 329+ 648D              //
 330+ 648D              // digit        c n -- u 1  |  0
 331+ 648D              // convert a character c using base n
 332+ 648D              // returns a unsigned number and a true flag
 333+ 648D              // or just a false flag if the conversion fails
 334+ 648D                              New_Def DIGIT, "DIGIT", is_code, is_normal
 334+ 648D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 334+ 648D             >
 334+ 648D             >                // dummy db directives used to calculate length of namec
 334+ 648D 44 49 47 49 >                db      "DIGIT"
 334+ 6491 54          >
 334+ 6492             >len_NFA         defl    $ - temp_NFA
 334+ 6492             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 334+ 648D             >
 334+ 648D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 334+ 648E 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 334+ 6492 54          >
 334+ 6493             >                org     $-1                 // alter last byte of Name just above to set
 334+ 6492 D4          >                db      {b $} | END_BIT     // msb as name end
 334+ 6493             >
 334+ 6493 81 64       >                dw      last_NFA            // Link to previous definition Name
 334+ 6495             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 334+ 6495 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 334+ 6495 ~           >
 334+ 6495 ~           >
 334+ 6495             >                endif           ; ok        // for other definitions it "points" the correct handler
 334+ 6495             >                // Use of "; ok" to suppress "warning[fwdref]"
 334+ 6495             >
 334+ 6495             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 335+ 6495 E1                           pop     hl                  // l has the base
 336+ 6496 D1                           pop     de                  // e has the digit
 337+ 6497 7B                           ld      a, e
 338+ 6498 FE 60                        cp      $60                 // check if lowercase
 339+ 649A 38 02                        jr      c, Digit_Uppercase
 340+ 649C D6 20                            sub     $20                 // quick'n'dirty uppercase
 341+ 649E              Digit_Uppercase:
 342+ 649E D6 30                        sub     $30
 343+ 64A0 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 344+ 64A2 FE 0A                            cp      $0A
 345+ 64A4 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 346+ 64A6 D6 07                                sub     7                   // try hex and subtract 7
 347+ 64A8 FE 0A                                cp      $0A
 348+ 64AA 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 349+ 64AC
 350+ 64AC              Digit_Decimal:
 351+ 64AC                              // compare digit
 352+ 64AC BD                           cp      l                   // compare with base
 353+ 64AD
 354+ 64AD 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 355+ 64AF 5F                               ld      e, a                // digit is returned as second from TOS
 356+ 64B0 21 01 00                         ld      hl, 1
 357+ 64B3
 358+ 64B3                                  psh2
 358+ 64B3 D5          >                push    de
 358+ 64B4 E5          >                push    hl
 358+ 64B5 DD E9       >                jp      (ix)
 359+ 64B7              Digit_Fail:
 360+ 64B7 21 00 00                     ld      hl, 0
 361+ 64BA                              psh1
 361+ 64BA E5          >                push    hl
 361+ 64BB DD E9       >                jp      (ix)
 362+ 64BD
 363+ 64BD              //  ______________________________________________________________________
 364+ 64BD              //
 365+ 64BD              //  parametric uppercase routine
 366+ 64BD              //  depending on the following op-code the routine can be by-passed
 367+ 64BD              //  changing the behaviour of some callers.
 368+ 64BD              //  If it is "ret" then the system is Case-Sensitive
 369+ 64BD              //  If it is "Nop" then the system is Case-Insensitive
 370+ 64BD              //  Only A register is touched.
 371+ 64BD 00           Case_Sensitive: nop                         // Default is case-insensitive.
 372+ 64BE              Case_Upper:
 373+ 64BE FE 61                        cp      LC_A_CHAR           // lower-case "a"
 374+ 64C0 D8                           ret     c                   // no change if A < "a"
 375+ 64C1 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 376+ 64C3 D0                           ret     nc                  // no change if A > "z"
 377+ 64C4 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 378+ 64C6 C9                           ret
 379+ 64C7
 380+ 64C7              //  ______________________________________________________________________
 381+ 64C7              //
 382+ 64C7              //  caseon      --
 383+ 64C7              // set system case-sensitivity on
 384+ 64C7              // it patches a RET/NOP at the beginning of the uppercase-routine
 385+ 64C7                              New_Def CASEON, "CASEON", is_code, is_normal
 385+ 64C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 64C7             >
 385+ 64C7             >                // dummy db directives used to calculate length of namec
 385+ 64C7 43 41 53 45 >                db      "CASEON"
 385+ 64CB 4F 4E       >
 385+ 64CD             >len_NFA         defl    $ - temp_NFA
 385+ 64CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 64C7             >
 385+ 64C7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 64C8 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 385+ 64CC 4F 4E       >
 385+ 64CE             >                org     $-1                 // alter last byte of Name just above to set
 385+ 64CD CE          >                db      {b $} | END_BIT     // msb as name end
 385+ 64CE             >
 385+ 64CE 8D 64       >                dw      last_NFA            // Link to previous definition Name
 385+ 64D0             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 64D0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 385+ 64D0 ~           >
 385+ 64D0 ~           >
 385+ 64D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 64D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 64D0             >
 385+ 64D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 64D0 3E C9                        ld      a, $C9              // "ret"
 387+ 64D2 32 BD 64                     ld      (Case_Sensitive), a
 388+ 64D5                              next
 388+ 64D5 DD E9       >                jp      (ix)
 389+ 64D7
 390+ 64D7              //  ______________________________________________________________________
 391+ 64D7              //
 392+ 64D7              //  caseoff     --
 393+ 64D7              // set system case-sensitivity on
 394+ 64D7              // it patches a RET/NOP at the beginning of the uppercase-routine
 395+ 64D7                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 395+ 64D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 395+ 64D7             >
 395+ 64D7             >                // dummy db directives used to calculate length of namec
 395+ 64D7 43 41 53 45 >                db      "CASEOFF"
 395+ 64DB 4F 46 46    >
 395+ 64DE             >len_NFA         defl    $ - temp_NFA
 395+ 64DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 395+ 64D7             >
 395+ 64D7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 395+ 64D8 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 395+ 64DC 4F 46 46    >
 395+ 64DF             >                org     $-1                 // alter last byte of Name just above to set
 395+ 64DE C6          >                db      {b $} | END_BIT     // msb as name end
 395+ 64DF             >
 395+ 64DF C7 64       >                dw      last_NFA            // Link to previous definition Name
 395+ 64E1             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 395+ 64E1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 395+ 64E1 ~           >
 395+ 64E1 ~           >
 395+ 64E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 395+ 64E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 395+ 64E1             >
 395+ 64E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 396+ 64E1 3E 00                        ld      a, $00              // "nop"
 397+ 64E3 32 BD 64                     ld      (Case_Sensitive), a
 398+ 64E6                              next
 398+ 64E6 DD E9       >                jp      (ix)
 399+ 64E8
 400+ 64E8              //  ______________________________________________________________________
 401+ 64E8              //
 402+ 64E8              //  upper       c1 -- c1 | c2
 403+ 64E8              // character on top of stack is forced to Uppercase.
 404+ 64E8                              New_Def UPPER, "UPPER", is_code, is_normal
 404+ 64E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 64E8             >
 404+ 64E8             >                // dummy db directives used to calculate length of namec
 404+ 64E8 55 50 50 45 >                db      "UPPER"
 404+ 64EC 52          >
 404+ 64ED             >len_NFA         defl    $ - temp_NFA
 404+ 64ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 64E8             >
 404+ 64E8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 64E9 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 404+ 64ED 52          >
 404+ 64EE             >                org     $-1                 // alter last byte of Name just above to set
 404+ 64ED D2          >                db      {b $} | END_BIT     // msb as name end
 404+ 64EE             >
 404+ 64EE D7 64       >                dw      last_NFA            // Link to previous definition Name
 404+ 64F0             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 64F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 404+ 64F0 ~           >
 404+ 64F0 ~           >
 404+ 64F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 64F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 64F0             >
 404+ 64F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 64F0 E1                           pop     hl
 406+ 64F1 7D                           ld      a, l
 407+ 64F2 CD BE 64                     call    Case_Upper
 408+ 64F5 6F                           ld      l, a
 409+ 64F6
 410+ 64F6                              psh1
 410+ 64F6 E5          >                push    hl
 410+ 64F7 DD E9       >                jp      (ix)
 411+ 64F9
 412+ 64F9              //  ______________________________________________________________________
 413+ 64F9              //
 414+ 64F9              // (find)       addr voc -- addr 0 | cfa b 1
 415+ 64F9              // vocabulary search,
 416+ 64F9              // - voc is starting word's NFA
 417+ 64F9              // - addr is the string to be searched for
 418+ 64F9              // On success, it returns the CFA of found word, the first NFA byte
 419+ 64F9              // (which contains length and some flags) and a true flag.
 420+ 64F9              // On fail, a false flag  (no more: leaves addr unchanged)
 421+ 64F9                              New_Def C_FIND, "(FIND)", is_code, is_normal
 421+ 64F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 64F9             >
 421+ 64F9             >                // dummy db directives used to calculate length of namec
 421+ 64F9 28 46 49 4E >                db      "(FIND)"
 421+ 64FD 44 29       >
 421+ 64FF             >len_NFA         defl    $ - temp_NFA
 421+ 64FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 64F9             >
 421+ 64F9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 64FA 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 421+ 64FE 44 29       >
 421+ 6500             >                org     $-1                 // alter last byte of Name just above to set
 421+ 64FF A9          >                db      {b $} | END_BIT     // msb as name end
 421+ 6500             >
 421+ 6500 E8 64       >                dw      last_NFA            // Link to previous definition Name
 421+ 6502             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6502 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 6502 ~           >
 421+ 6502 ~           >
 421+ 6502             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6502             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6502             >
 421+ 6502             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6502                                                              // de has dictionary pointer
 423+ 6502 D1                               pop     de
 424+ 6503              Find_VocabularyLoop:
 425+ 6503 E1                               pop     hl                  // string pointer to search for
 426+ 6504 E5                               push    hl                  // keep it on stack too for the end.
 427+ 6505 1A                               ld      a, (de)             // save NFA length byte
 428+ 6506 08                               ex      af,af'              // for later use (!)
 429+ 6507 1A                               ld      a, (de)             // reload NFA length byte
 430+ 6508 AE                               xor     (hl)                // check if same length
 431+ 6509 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 432+ 650B                                  // word an text haven't the same length, skip to next vocabulary entry
 433+ 650B 20 2C                            jr      nz, Find_DifferentLenght
 434+ 650D
 435+ 650D              Find_ThisWord:  // begin loop
 436+ 650D 23                                   inc     hl
 437+ 650E 13                                   inc     de
 438+ 650F 1A                                   ld      a, (de)
 439+ 6510                                      // case insensitive option - begin
 440+ 6510 C5                                   push    bc
 441+ 6511 E6 80                                and     $80                 // split A in msb and the rest
 442+ 6513 47                                   ld      b, a
 443+ 6514 1A                                   ld      a, (de)
 444+ 6515 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 445+ 6517 CD BD 64                             call    Case_Sensitive      // uppercase routine
 446+ 651A 4F                                   ld      c, a
 447+ 651B 7E                                   ld      a, (hl)
 448+ 651C CD BD 64                             call    Case_Sensitive      // uppercase routine
 449+ 651F A9                                   xor     c
 450+ 6520 A8                                   xor     b
 451+ 6521 C1                                   pop     bc
 452+ 6522                                      // case insensitive option - end
 453+ 6522 87                                   add     a                   // ignore msb during compare
 454+ 6523 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 455+ 6525
 456+ 6525                                  // loop back until last byte msb is found set
 457+ 6525                                  // that bit marks the ending char of this word
 458+ 6525 30 E6                            jr      nc, Find_ThisWord
 459+ 6527
 460+ 6527                                  // match found !
 461+ 6527 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 462+ 652A 19                                   add     hl, de
 463+ 652B E3                                   ex      (sp), hl            // CFA on stack and drop addr
 464+ 652C 08                                   ex      af, af'             // retrieve NFA byte (!)
 465+ 652D 5F                                   ld      e, a
 466+ 652E 16 00                                ld      d, 0
 467+ 6530
 468+ 6530
 469+ 6530 21 01 00                             ld      hl, 1
 470+ 6533                                      psh2
 470+ 6533 D5          >                push    de
 470+ 6534 E5          >                push    hl
 470+ 6535 DD E9       >                jp      (ix)
 471+ 6537
 472+ 6537              Find_DidntMatch: // didn't match (*)
 473+ 6537 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 474+ 6539
 475+ 6539              Find_DifferentLenght:
 476+ 6539                              // consume chars until the end of the word
 477+ 6539                              // that is last byte msb is found set
 478+ 6539 13                               inc     de
 479+ 653A 1A                               ld      a, (de)
 480+ 653B 87                               add     a, a
 481+ 653C 30 FB                        jr      nc, Find_DifferentLenght
 482+ 653E
 483+ 653E              Find_WordEnd:   // word-end  found (**)
 484+ 653E                              // take LFA and use it
 485+ 653E 13                           inc     de
 486+ 653F EB                           ex      de, hl
 487+ 6540 5E                           ld      e, (hl)
 488+ 6541 23                           inc     hl
 489+ 6542 56                           ld      d, (hl)
 490+ 6543 7A                           ld      a, d
 491+ 6544 B3                           or      e
 492+ 6545
 493+ 6545                          // loop until end of vocabulary
 494+ 6545 20 BC                    jr      nz, Find_VocabularyLoop
 495+ 6547
 496+ 6547 E1                       pop     hl              // with this, it leaves addr unchanged
 497+ 6548 21 00 00                 ld      hl, FALSE_FLAG
 498+ 654B
 499+ 654B                          psh1
 499+ 654B E5          >                push    hl
 499+ 654C DD E9       >                jp      (ix)
 500+ 654E
 501+ 654E              //  ______________________________________________________________________
 502+ 654E              //
 503+ 654E              // enclose      a c -- a  n1 n2 n3
 504+ 654E              // starting from a, using delimiter c, determines the offsets:
 505+ 654E              //   n1   the first character non-delimiter
 506+ 654E              //   n2   the first delimiter after the text
 507+ 654E              //   n3   the first character non enclosed.
 508+ 654E              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 509+ 654E              // an uncoditional delimiter.
 510+ 654E              // Examples:
 511+ 654E              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 512+ 654E              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 513+ 654E              // iii:	c  c  'nul'          -- 2  3  2
 514+ 654E                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 514+ 654E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 514+ 654E             >
 514+ 654E             >                // dummy db directives used to calculate length of namec
 514+ 654E 45 4E 43 4C >                db      "ENCLOSE"
 514+ 6552 4F 53 45    >
 514+ 6555             >len_NFA         defl    $ - temp_NFA
 514+ 6555             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 514+ 654E             >
 514+ 654E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 514+ 654F 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 514+ 6553 4F 53 45    >
 514+ 6556             >                org     $-1                 // alter last byte of Name just above to set
 514+ 6555 C5          >                db      {b $} | END_BIT     // msb as name end
 514+ 6556             >
 514+ 6556 F9 64       >                dw      last_NFA            // Link to previous definition Name
 514+ 6558             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 514+ 6558 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 514+ 6558 ~           >
 514+ 6558 ~           >
 514+ 6558             >                endif           ; ok        // for other definitions it "points" the correct handler
 514+ 6558             >                // Use of "; ok" to suppress "warning[fwdref]"
 514+ 6558             >
 514+ 6558             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 6558 D1                           pop     de                  //  e has the character
 516+ 6559 E1                           pop     hl                  // hl has the string address
 517+ 655A E5                           push    hl
 518+ 655B 7B                           ld      a, e
 519+ 655C 11 FF FF                     ld      de, -1              // let's start from -1
 520+ 655F 2B                           dec     hl
 521+ 6560              Enclose_NonDelimiter:
 522+ 6560                              // find first non delimiter
 523+ 6560 23                               inc     hl
 524+ 6561 13                               inc     de
 525+ 6562 BE                               cp      (hl)
 526+ 6563 28 FB                        jr      z, Enclose_NonDelimiter
 527+ 6565 D5                           push    de
 528+ 6566
 529+ 6566 C5                           push    bc                  // save Instruction Pointer
 530+ 6567
 531+ 6567 4F                           ld      c, a                // save char
 532+ 6568 7E                           ld      a, (hl)
 533+ 6569 A7                           and     a                   // stop if 0x00
 534+ 656A 20 07                        jr      nz, Enclose_NextChar
 535+ 656C
 536+ 656C                              /// case iii. no more character in string
 537+ 656C C1                               pop     bc                  // restore Instruction Pointer
 538+ 656D 13                               inc     de
 539+ 656E D5                               push    de
 540+ 656F 1B                               dec     de
 541+ 6570 D5                               push    de
 542+ 6571                                  next
 542+ 6571 DD E9       >                jp      (ix)
 543+ 6573              Enclose_NextChar:
 544+ 6573 79                               ld      a, c
 545+ 6574 23                               inc     hl
 546+ 6575 13                               inc     de
 547+ 6576 BE                               cp      (hl)
 548+ 6577 20 06                            jr      nz, Enclose_NonSeparator
 549+ 6579
 550+ 6579                                      // case i. first non enclosed
 551+ 6579 C1                                   pop     bc                  // restore Instruction Pointer
 552+ 657A D5                                   push    de
 553+ 657B 13                                   inc     de
 554+ 657C D5                                   push    de
 555+ 657D                                      next
 555+ 657D DD E9       >                jp      (ix)
 556+ 657F              Enclose_NonSeparator:
 557+ 657F 7E                               ld      a, (hl)
 558+ 6580 A7                               and     a
 559+ 6581 20 F0                        jr      nz, Enclose_NextChar
 560+ 6583
 561+ 6583                              // case ii. separator & terminator
 562+ 6583 C1                           pop     bc                  // restore Instruction Pointer
 563+ 6584 D5                           push    de
 564+ 6585 D5                           push    de
 565+ 6586                              next
 565+ 6586 DD E9       >                jp      (ix)
 566+ 6588
 567+ 6588              //  ______________________________________________________________________
 568+ 6588              //
 569+ 6588              // (map)        a2 a1 n c1 -- c2
 570+ 6588              // translate character c1 using mapping string a2 and a2
 571+ 6588              // if c1 is not present within string a1 then
 572+ 6588              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 573+ 6588                              New_Def C_MAP, "(MAP)", is_code, is_normal
 573+ 6588             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 573+ 6588             >
 573+ 6588             >                // dummy db directives used to calculate length of namec
 573+ 6588 28 4D 41 50 >                db      "(MAP)"
 573+ 658C 29          >
 573+ 658D             >len_NFA         defl    $ - temp_NFA
 573+ 658D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 573+ 6588             >
 573+ 6588 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 573+ 6589 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 573+ 658D 29          >
 573+ 658E             >                org     $-1                 // alter last byte of Name just above to set
 573+ 658D A9          >                db      {b $} | END_BIT     // msb as name end
 573+ 658E             >
 573+ 658E 4E 65       >                dw      last_NFA            // Link to previous definition Name
 573+ 6590             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 573+ 6590 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 573+ 6590 ~           >
 573+ 6590 ~           >
 573+ 6590             >                endif           ; ok        // for other definitions it "points" the correct handler
 573+ 6590             >                // Use of "; ok" to suppress "warning[fwdref]"
 573+ 6590             >
 573+ 6590             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 574+ 6590 D9                           exx
 575+ 6591 E1                           pop     hl
 576+ 6592 7D                           ld      a, l
 577+ 6593 C1                           pop     bc
 578+ 6594 E1                           pop     hl
 579+ 6595 50                           ld      d, b
 580+ 6596 59                           ld      e, c
 581+ 6597 ED B1                        cpir
 582+ 6599 E1                           pop     hl
 583+ 659A 20 05                        jr      nz, C_Map_Then
 583+ 659C
 584+ 659C 19                               add     hl, de
 585+ 659D 2B                               dec     hl
 586+ 659E ED 42                            sbc     hl, bc
 587+ 65A0 7E                               ld      a, (hl)
 588+ 65A1              C_Map_Then:
 589+ 65A1 6F                           ld      l, a
 590+ 65A2 26 00                        ld      h, 0
 591+ 65A4 E5                           push    hl
 592+ 65A5 D9                           exx
 593+ 65A6                              next
 593+ 65A6 DD E9       >                jp      (ix)
 594+ 65A8
 595+ 65A8              //  ______________________________________________________________________
 596+ 65A8              //
 597+ 65A8              // (compare)    a1 a2 n -- b
 598+ 65A8              // this word performs a lexicographic compare of n bytes of text at address a1
 599+ 65A8              // with n bytes of text at address a2. It returns numeric a value:
 600+ 65A8              //  0 : if strings are equal
 601+ 65A8              // +1 : if string at a1 greater than string at a2
 602+ 65A8              // -1 : if string at a1 less than string at a2
 603+ 65A8              // strings can be 256 bytes in length at most.
 604+ 65A8                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 604+ 65A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 604+ 65A8             >
 604+ 65A8             >                // dummy db directives used to calculate length of namec
 604+ 65A8 28 43 4F 4D >                db      "(COMPARE)"
 604+ 65AC 50 41 52 45 >
 604+ 65B0 29          >
 604+ 65B1             >len_NFA         defl    $ - temp_NFA
 604+ 65B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 604+ 65A8             >
 604+ 65A8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 604+ 65A9 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 604+ 65AD 50 41 52 45 >
 604+ 65B1 29          >
 604+ 65B2             >                org     $-1                 // alter last byte of Name just above to set
 604+ 65B1 A9          >                db      {b $} | END_BIT     // msb as name end
 604+ 65B2             >
 604+ 65B2 88 65       >                dw      last_NFA            // Link to previous definition Name
 604+ 65B4             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 604+ 65B4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 604+ 65B4 ~           >
 604+ 65B4 ~           >
 604+ 65B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 604+ 65B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 604+ 65B4             >
 604+ 65B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 605+ 65B4 D9                           exx
 606+ 65B5 E1                           pop     hl                  // Number of bytes
 607+ 65B6 7D                           ld      a, l
 608+ 65B7 E1                           pop     hl                  // hl points string a2
 609+ 65B8 D1                           pop     de                  // hl points string a1
 610+ 65B9              //              push    bc                  // Instruction pointer on stack
 611+ 65B9 47                           ld      b, a
 612+ 65BA              C_Compare_Loop:
 613+ 65BA 7E                               ld      a, (hl)
 614+ 65BB CD BD 64                         call    Case_Sensitive
 615+ 65BE 4F                               ld      c, a
 616+ 65BF 1A                               ld      a, (de)
 617+ 65C0 CD BD 64                         call    Case_Sensitive
 618+ 65C3 B9                               cp      c
 619+ 65C4 13                               inc     de
 620+ 65C5 23                               inc     hl
 621+ 65C6 28 0E                            jr      z, C_Compare_Equal
 622+ 65C8 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 623+ 65CA 21 01 00                                 ld      hl, 1               // a1 gt a2
 624+ 65CD 18 03                                jr      C_Compare_Then      // Else
 625+ 65CF              C_Compare_NotLessThan:
 626+ 65CF 21 FF FF                                 ld      hl, -1              // a1 lt a2
 627+ 65D2              C_Compare_Then:                                 // Endif
 628+ 65D2              //                      pop     bc              // restore Instruction Pointer
 629+ 65D2 E5                                   push    hl
 630+ 65D3 D9                                   exx
 631+ 65D4
 632+ 65D4                                      next
 632+ 65D4 DD E9       >                jp      (ix)
 633+ 65D6
 634+ 65D6              C_Compare_Equal:
 635+ 65D6 10 E2                        djnz    C_Compare_Loop
 636+ 65D8 21 00 00                     ld      hl, 0               // a1 eq a2
 637+ 65DB              //              pop     bc                  // restore Instruction Pointer
 638+ 65DB E5                           push    hl
 639+ 65DC D9                           exx
 640+ 65DD
 641+ 65DD                              next
 641+ 65DD DD E9       >                jp      (ix)
 642+ 65DF
 643+ 65DF              //  ______________________________________________________________________
 644+ 65DF              //
 645+ 65DF              // emitc        c --
 646+ 65DF              // low level emit, calls ROM routine at #10 to send a character to
 647+ 65DF              // the the current channel (see SELECT to change stream-channel)
 648+ 65DF                              New_Def EMITC, "EMITC", is_code, is_normal
 648+ 65DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 648+ 65DF             >
 648+ 65DF             >                // dummy db directives used to calculate length of namec
 648+ 65DF 45 4D 49 54 >                db      "EMITC"
 648+ 65E3 43          >
 648+ 65E4             >len_NFA         defl    $ - temp_NFA
 648+ 65E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 648+ 65DF             >
 648+ 65DF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 648+ 65E0 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 648+ 65E4 43          >
 648+ 65E5             >                org     $-1                 // alter last byte of Name just above to set
 648+ 65E4 C3          >                db      {b $} | END_BIT     // msb as name end
 648+ 65E5             >
 648+ 65E5 A8 65       >                dw      last_NFA            // Link to previous definition Name
 648+ 65E7             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 648+ 65E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 648+ 65E7 ~           >
 648+ 65E7 ~           >
 648+ 65E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 648+ 65E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 648+ 65E7             >
 648+ 65E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 649+ 65E7 E1                           pop     hl
 650+ 65E8 7D                           ld      a, l
 651+ 65E9              Emitc_Ptr:
 652+ 65E9 C5                           push    bc
 653+ 65EA DD E5                        push    ix
 654+ 65EC D7                           rst     $10
 655+ 65ED DD E1                        pop     ix
 656+ 65EF C1                           pop     bc
 657+ 65F0 3E FF                        ld      a, 255            // max possible
 658+ 65F2 32 8C 5C                     ld      (SCR_CT), a
 659+ 65F5
 660+ 65F5                              next
 660+ 65F5 DD E9       >                jp      (ix)
 661+ 65F7
 662+ 65F7              //  ______________________________________________________________________
 663+ 65F7              //
 664+ 65F7              // cr           --
 665+ 65F7              // send a CR via EMITC
 666+ 65F7                              New_Def CR, "CR", is_code, is_normal
 666+ 65F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 666+ 65F7             >
 666+ 65F7             >                // dummy db directives used to calculate length of namec
 666+ 65F7 43 52       >                db      "CR"
 666+ 65F9             >len_NFA         defl    $ - temp_NFA
 666+ 65F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 666+ 65F7             >
 666+ 65F7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 666+ 65F8 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 666+ 65FA             >                org     $-1                 // alter last byte of Name just above to set
 666+ 65F9 D2          >                db      {b $} | END_BIT     // msb as name end
 666+ 65FA             >
 666+ 65FA DF 65       >                dw      last_NFA            // Link to previous definition Name
 666+ 65FC             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 666+ 65FC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 666+ 65FC ~           >
 666+ 65FC ~           >
 666+ 65FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 666+ 65FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 666+ 65FC             >
 666+ 65FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 667+ 65FC
 668+ 65FC 3E 0D                        ld      a, CR_CHAR
 669+ 65FE 18 E9                        jr      Emitc_Ptr
 670+ 6600
 671+ 6600              Emitc_Vec:
 672+ 6600 43 66                        dw      C_Emit_Printable  // comma
 673+ 6602 49 66                        dw      C_Emit_Bel        // bel
 674+ 6604 43 66                        dw      C_Emit_Printable  // bs
 675+ 6606 5E 66                        dw      C_Emit_Tab        // tab
 676+ 6608 43 66                        dw      C_Emit_Printable  // cr
 677+ 660A 64 66                        dw      C_Emit_NL         // lf (unix newline)
 678+ 660C 43 66                        dw      C_Emit_Printable  // blank
 679+ 660E 43 66                        dw      C_Emit_Printable  // blank
 680+ 6610
 681+ 6610              Emit_Selector_Start:
 682+ 6610 06                           db      $06                 // comma
 683+ 6611 07                           db      $07                 // bel
 684+ 6612 08                           db      $08                 // bs
 685+ 6613 09                           db      $09                 // tab
 686+ 6614 0D                           db      $0D                 // cr
 687+ 6615 0A                           db      $0A                 // lf (unix newline)
 688+ 6616 20                           db      $20
 689+ 6617              Emit_Selector_End:
 690+ 6617 20                           db      $20
 691+ 6618
 692+ 6618              //  ______________________________________________________________________
 693+ 6618              //
 694+ 6618              // (?emit)      c1 -- c2 | c1
 695+ 6618              // decode a character to be sent via EMIT
 696+ 6618              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 697+ 6618              // the routine should resolve anything and convert the character anyway.
 698+ 6618                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 698+ 6618             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 698+ 6618             >
 698+ 6618             >                // dummy db directives used to calculate length of namec
 698+ 6618 28 3F 45 4D >                db      "(?EMIT)"
 698+ 661C 49 54 29    >
 698+ 661F             >len_NFA         defl    $ - temp_NFA
 698+ 661F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 698+ 6618             >
 698+ 6618 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 698+ 6619 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 698+ 661D 49 54 29    >
 698+ 6620             >                org     $-1                 // alter last byte of Name just above to set
 698+ 661F A9          >                db      {b $} | END_BIT     // msb as name end
 698+ 6620             >
 698+ 6620 F7 65       >                dw      last_NFA            // Link to previous definition Name
 698+ 6622             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 698+ 6622 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 698+ 6622 ~           >
 698+ 6622 ~           >
 698+ 6622             >                endif           ; ok        // for other definitions it "points" the correct handler
 698+ 6622             >                // Use of "; ok" to suppress "warning[fwdref]"
 698+ 6622             >
 698+ 6622             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 699+ 6622 D1                           pop     de
 700+ 6623 7B                           ld      a, e                //  de has c1
 701+ 6624 E6 7F                        and     $7F                 // 7-bit ascii only
 702+ 6626 C5                           push    bc                  // save Instruction Pointer
 703+ 6627 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 704+ 662A 21 17 66                     ld      hl, Emit_Selector_End
 705+ 662D ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 706+ 662F 20 0B                        jr      nz, C_Emit_Not_Found
 707+ 6631                                  // Found then decode it
 708+ 6631 21 00 66                         ld      hl, Emitc_Vec
 709+ 6634 09                               add     hl, bc
 710+ 6635 09                               add     hl, bc
 711+ 6636 5E                               ld      e, (hl)
 712+ 6637 23                               inc     hl
 713+ 6638 56                               ld      d, (hl)
 714+ 6639 EB                               ex      de, hl
 715+ 663A C1                               pop     bc                  // restore Instruction Pointer
 716+ 663B E9                               jp      (hl)                // one of the following labels
 717+ 663C              C_Emit_Not_Found:
 718+ 663C C1                           pop     bc                  // restore Instruction Pointer
 719+ 663D FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 720+ 663F 30 02                        jr      nc, C_Emit_Printable
 721+ 6641 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 722+ 6643              C_Emit_Printable:
 723+ 6643 6F                           ld      l, a
 724+ 6644 26 00                        ld      h, 0
 725+ 6646
 726+ 6646                              psh1
 726+ 6646 E5          >                push    hl
 726+ 6647 DD E9       >                jp      (ix)
 727+ 6649
 728+ 6649              C_Emit_Bel:
 729+ 6649 C5                           push    bc                  // save Instruction Pointer
 730+ 664A 11 00 01                     ld      de, $0100
 731+ 664D 21 00 02                     ld      hl, $0200
 732+ 6650 DD E5                        push    ix                  // save Next Pointer
 733+ 6652 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 734+ 6655 DD E1                        pop     ix                  // restore Next Pointer
 735+ 6657 C1                           pop     bc                  // restore Instruction Pointer
 736+ 6658 21 00 00                     ld      hl, NUL_CHAR
 737+ 665B
 738+ 665B                              psh1
 738+ 665B E5          >                push    hl
 738+ 665C DD E9       >                jp      (ix)
 739+ 665E
 740+ 665E 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 741+ 6661
 742+ 6661                              psh1
 742+ 6661 E5          >                push    hl
 742+ 6662 DD E9       >                jp      (ix)
 743+ 6664
 744+ 6664 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 745+ 6667
 746+ 6667                              psh1
 746+ 6667 E5          >                push    hl
 746+ 6668 DD E9       >                jp      (ix)
 747+ 666A
 748+ 666A              //  ______________________________________________________________________
 749+ 666A
 750+ 666A              Key_Table:
 751+ 666A E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 752+ 666B C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 753+ 666C CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 754+ 666D CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 755+ 666E CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 756+ 666F C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 757+ 6670 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 758+ 6671 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 759+ 6672 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 760+ 6673 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 761+ 6674 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 762+ 6675              Key_MapTo:
 763+ 6675 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 764+ 6676 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 765+ 6677 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 766+ 6678 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 767+ 6679 5D                           db      $5D                 //  6: SYMBOL+U : ]
 768+ 667A 5B                           db      $5B                 //  5: SYMBOL+Y : [
 769+ 667B 7D                           db      $7D                 //  4: SYMBOL+G : }
 770+ 667C 7B                           db      $7B                 //  3: SYMBOL+F : {
 771+ 667D 5C                           db      $5C                 //  2: SYMBOl+D : //
 772+ 667E 7C                           db      $7C                 //  1: SYMBOL+S : |
 773+ 667F 7E                           db      $7E                 //  0: SYMBOL+A : ~
 774+ 6680
 775+ 6680              //  ______________________________________________________________________
 776+ 6680              //
 777+ 6680              // key          -- c
 778+ 6680              // wait for a keypress
 779+ 6680              // This definition need Standard ROM Interrupt to be served
 780+ 6680
 781+ 6680                              New_Def KEY, "KEY", is_code, is_normal
 781+ 6680             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 781+ 6680             >
 781+ 6680             >                // dummy db directives used to calculate length of namec
 781+ 6680 4B 45 59    >                db      "KEY"
 781+ 6683             >len_NFA         defl    $ - temp_NFA
 781+ 6683             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 781+ 6680             >
 781+ 6680 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 781+ 6681 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 781+ 6684             >                org     $-1                 // alter last byte of Name just above to set
 781+ 6683 D9          >                db      {b $} | END_BIT     // msb as name end
 781+ 6684             >
 781+ 6684 18 66       >                dw      last_NFA            // Link to previous definition Name
 781+ 6686             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 781+ 6686 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 781+ 6686 ~           >
 781+ 6686 ~           >
 781+ 6686             >                endif           ; ok        // for other definitions it "points" the correct handler
 781+ 6686             >                // Use of "; ok" to suppress "warning[fwdref]"
 781+ 6686             >
 781+ 6686             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 782+ 6686
 783+ 6686 C5                           push    bc                  // save Instruction Pointer
 784+ 6687 DD E5                        push    ix
 785+ 6689
 786+ 6689 ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 787+ 668D 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 788+ 6690 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 789+ 6694
 790+ 6694              Key_Wait:
 791+ 6694 76                               halt
 792+ 6695 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 793+ 6697 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 794+ 669A
 795+ 669A                                  // software-flash: flips face every 320 ms
 796+ 669A 3E 10                            ld      a, $10              // Timing based
 797+ 669C FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 798+ 669F
 799+ 669F 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 800+ 66A2 20 0C                            jr      nz, Key_Cursor
 801+ 66A4 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 802+ 66A7 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 803+ 66AB 28 03                                jr      z, Key_Cursor
 804+ 66AD 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 805+ 66B0              Key_Cursor:
 806+ 66B0 D7                               rst     $10
 807+ 66B1 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 808+ 66B3 D7                               rst     $10
 809+ 66B4
 810+ 66B4 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 811+ 66B8 28 DA                        jr      z, Key_Wait
 812+ 66BA
 813+ 66BA 76                           halt    // this is to sync flashing cursor.
 814+ 66BB
 815+ 66BB 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 816+ 66BD D7                           rst     $10
 817+ 66BE 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 818+ 66C0 D7                           rst     $10
 819+ 66C1 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 820+ 66C4
 821+ 66C4                              // decode character from above table
 822+ 66C4 21 6A 66                     ld      hl, Key_Table
 823+ 66C7 01 0B 00                     ld      bc, $000B
 824+ 66CA ED B1                        cpir
 825+ 66CC 20 05                        jr      nz, Key_DontMap
 826+ 66CE 21 75 66                         ld      hl, Key_MapTo
 827+ 66D1 09                               add     hl, bc
 828+ 66D2 7E                               ld      a, (hl)
 829+ 66D3 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 830+ 66D5 20 09                        jr      nz, Key_NoCapsLock
 831+ 66D7 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 832+ 66DA 7E                               ld      a, (hl)
 833+ 66DB EE 08                            xor     $08
 834+ 66DD 77                               ld      (hl), a
 835+ 66DE 3E 00                            ld      a, NUL_CHAR
 836+ 66E0 6F           Key_NoCapsLock: ld      l, a
 837+ 66E1 26 00                        ld      h, 0                // Prepare TOS
 838+ 66E3
 839+ 66E3 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 840+ 66E6 1F                           rra
 841+ 66E7 1F                           rra
 842+ 66E8 1F                           rra
 843+ 66E9 F6 18                        or      $18                 // quick'n'dirty click
 844+ 66EB D3 FE                        out     ($fe), a
 845+ 66ED 06 00                        ld      b, 0
 846+ 66EF 10 FE                        djnz    $                   // wait loop
 847+ 66F1 EE 18                        xor     $18
 848+ 66F3 D3 FE                        out     ($fe), a
 849+ 66F5
 850+ 66F5 ED 7B 92 63                  ld      sp, (SP_Saved)
 851+ 66F9
 852+ 66F9 DD E1                        pop     ix
 853+ 66FB C1                           pop     bc                  // Restore Instruction Pointer
 854+ 66FC
 855+ 66FC                              psh1
 855+ 66FC E5          >                push    hl
 855+ 66FD DD E9       >                jp      (ix)
 856+ 66FF
 857+ 66FF              //  ______________________________________________________________________
 858+ 66FF              //
 859+ 66FF              // ?terminal    -- FALSE | TRUE
 860+ 66FF              // test for BREAK keypress
 861+ 66FF                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 861+ 66FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 861+ 66FF             >
 861+ 66FF             >                // dummy db directives used to calculate length of namec
 861+ 66FF 3F 54 45 52 >                db      "?TERMINAL"
 861+ 6703 4D 49 4E 41 >
 861+ 6707 4C          >
 861+ 6708             >len_NFA         defl    $ - temp_NFA
 861+ 6708             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 861+ 66FF             >
 861+ 66FF 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 861+ 6700 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 861+ 6704 4D 49 4E 41 >
 861+ 6708 4C          >
 861+ 6709             >                org     $-1                 // alter last byte of Name just above to set
 861+ 6708 CC          >                db      {b $} | END_BIT     // msb as name end
 861+ 6709             >
 861+ 6709 80 66       >                dw      last_NFA            // Link to previous definition Name
 861+ 670B             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 861+ 670B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 861+ 670B ~           >
 861+ 670B ~           >
 861+ 670B             >                endif           ; ok        // for other definitions it "points" the correct handler
 861+ 670B             >                // Use of "; ok" to suppress "warning[fwdref]"
 861+ 670B             >
 861+ 670B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 862+ 670B D9                           exx
 863+ 670C 01 FE 7F                     ld      bc, $7ffe
 864+ 670F ED 50                        in      d, (c)
 865+ 6711 41                           ld      b, c
 866+ 6712 ED 78                        in      a, (c)
 867+ 6714 B2                           or       d
 868+ 6715 1F                           rra
 869+ 6716 3F                           ccf
 870+ 6717 ED 62                        sbc     hl, hl
 871+ 6719 E5                           push    hl
 872+ 671A D9                           exx
 873+ 671B                              next
 873+ 671B DD E9       >                jp      (ix)
 874+ 671D
 875+ 671D
 876+ 671D              //  ______________________________________________________________________
 877+ 671D              //
 878+ 671D              // inkey        -- c | 0
 879+ 671D              // call ROM inkey$ routine, returns c or "zero".
 880+ 671D
 881+ 671D                              New_Def INKEY, "INKEY", is_code, is_normal
 881+ 671D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 881+ 671D             >
 881+ 671D             >                // dummy db directives used to calculate length of namec
 881+ 671D 49 4E 4B 45 >                db      "INKEY"
 881+ 6721 59          >
 881+ 6722             >len_NFA         defl    $ - temp_NFA
 881+ 6722             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 881+ 671D             >
 881+ 671D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 881+ 671E 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 881+ 6722 59          >
 881+ 6723             >                org     $-1                 // alter last byte of Name just above to set
 881+ 6722 D9          >                db      {b $} | END_BIT     // msb as name end
 881+ 6723             >
 881+ 6723 FF 66       >                dw      last_NFA            // Link to previous definition Name
 881+ 6725             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 881+ 6725 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 881+ 6725 ~           >
 881+ 6725 ~           >
 881+ 6725             >                endif           ; ok        // for other definitions it "points" the correct handler
 881+ 6725             >                // Use of "; ok" to suppress "warning[fwdref]"
 881+ 6725             >
 881+ 6725             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 882+ 6725
 883+ 6725 C5                           push    bc
 884+ 6726 ED 73 92 63                  ld      (SP_Saved), sp
 885+ 672A 31 61 63                     ld      sp, Cold_origin - 5
 886+ 672D DD E5                        push    ix
 887+ 672F CD E6 15                     call    $15E6                   // instead of 15E9
 888+ 6732 DD E1                        pop     ix
 889+ 6734 ED 7B 92 63                  ld      sp, (SP_Saved)
 890+ 6738 6F                           ld      l, a
 891+ 6739 26 00                        ld      h, 0
 892+ 673B C1                           pop     bc
 893+ 673C                              psh1
 893+ 673C E5          >                push    hl
 893+ 673D DD E9       >                jp      (ix)
 894+ 673F
 895+ 673F              //  ______________________________________________________________________
 896+ 673F              //
 897+ 673F              // select      n --
 898+ 673F              // selects the given channel number
 899+ 673F
 900+ 673F                              New_Def SELECT, "SELECT", is_code, is_normal
 900+ 673F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 900+ 673F             >
 900+ 673F             >                // dummy db directives used to calculate length of namec
 900+ 673F 53 45 4C 45 >                db      "SELECT"
 900+ 6743 43 54       >
 900+ 6745             >len_NFA         defl    $ - temp_NFA
 900+ 6745             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 900+ 673F             >
 900+ 673F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 900+ 6740 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 900+ 6744 43 54       >
 900+ 6746             >                org     $-1                 // alter last byte of Name just above to set
 900+ 6745 D4          >                db      {b $} | END_BIT     // msb as name end
 900+ 6746             >
 900+ 6746 1D 67       >                dw      last_NFA            // Link to previous definition Name
 900+ 6748             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 900+ 6748 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 900+ 6748 ~           >
 900+ 6748 ~           >
 900+ 6748             >                endif           ; ok        // for other definitions it "points" the correct handler
 900+ 6748             >                // Use of "; ok" to suppress "warning[fwdref]"
 900+ 6748             >
 900+ 6748             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 901+ 6748 E1                           pop     hl
 902+ 6749 C5                           push    bc
 903+ 674A 7D                           ld      a, l
 904+ 674B ED 73 92 63                  ld      (SP_Saved), sp
 905+ 674F 31 61 63                     ld      sp, Cold_origin - 5
 906+ 6752 DD E5                        push    ix
 907+ 6754 CD 01 16                     call    $1601
 908+ 6757 DD E1                        pop     ix
 909+ 6759 ED 7B 92 63                  ld      sp, (SP_Saved)
 910+ 675D C1                           pop     bc
 911+ 675E
 912+ 675E                              next
 912+ 675E DD E9       >                jp      (ix)
 913+ 6760
 914+ 6760              //  ______________________________________________________________________
 915+ 6760              //
 916+ 6760              // ZX Spectrum Next - Low Level disk primitives.
 917+ 6760              // this include is "here" for backward compatibility
 918+ 6760
 919+ 6760                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
   1++6760              //  ______________________________________________________________________
   2++6760              //
   3++6760              //  next-opt.asm
   4++6760              //
   5++6760              //  ZX Spectrum Next - peculiar definitions
   6++6760              //  ______________________________________________________________________
   7++6760
   8++6760              //  ______________________________________________________________________
   9++6760              //
  10++6760              // f_seek       d u -- f
  11++6760              // Seek to position d in file-handle u.
  12++6760              // Return a false-flag 0 on success, True flag on error
  13++6760                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++6760             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++6760             >
  13++6760             >                // dummy db directives used to calculate length of namec
  13++6760 46 5F 53 45 >                db      "F_SEEK"
  13++6764 45 4B       >
  13++6766             >len_NFA         defl    $ - temp_NFA
  13++6766             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++6760             >
  13++6760 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++6761 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++6765 45 4B       >
  13++6767             >                org     $-1                 // alter last byte of Name just above to set
  13++6766 CB          >                db      {b $} | END_BIT     // msb as name end
  13++6767             >
  13++6767 3F 67       >                dw      last_NFA            // Link to previous definition Name
  13++6769             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++6769 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++6769 ~           >
  13++6769 ~           >
  13++6769             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++6769             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++6769             >
  13++6769             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++6769 E1                           pop     hl                  // file-handle
  15++676A 7D                           ld      a, l                // file-handle
  16++676B 60                           ld      h, b                // save Intruction Pointer
  17++676C 69                           ld      l, c
  18++676D C1                           pop     bc                  // bc has high-word of d
  19++676E D1                           pop     de
  20++676F DD E5                        push    ix
  21++6771 E5                           push    hl                  // save Instruction Pointer
  22++6772 DD 21 00 00                  ld      ix, 0
  23++6776 CF                           rst     $08
  24++6777 9F                           db      $9F
  25++6778              F_Seek_Exit:
  26++6778 C1                           pop     bc                  // restore Instruction Pointer
  27++6779 DD E1                        pop     ix
  28++677B ED 62                        sbc     hl, hl              // to get 0 or -1
  29++677D
  30++677D                              psh1
  30++677D E5          >                push    hl
  30++677E DD E9       >                jp      (ix)
  31++6780
  32++6780              //  ______________________________________________________________________
  33++6780              //
  34++6780              // f_close      u -- f
  35++6780              // Close file-handle u.
  36++6780              // Return 0 on success, True flag on error
  37++6780
  38++6780                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++6780             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++6780             >
  38++6780             >                // dummy db directives used to calculate length of namec
  38++6780 46 5F 43 4C >                db      "F_CLOSE"
  38++6784 4F 53 45    >
  38++6787             >len_NFA         defl    $ - temp_NFA
  38++6787             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++6780             >
  38++6780 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++6781 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++6785 4F 53 45    >
  38++6788             >                org     $-1                 // alter last byte of Name just above to set
  38++6787 C5          >                db      {b $} | END_BIT     // msb as name end
  38++6788             >
  38++6788 60 67       >                dw      last_NFA            // Link to previous definition Name
  38++678A             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++678A ~           >                call    runcode ; ok        // for primitive definitions  actual code
  38++678A ~           >
  38++678A ~           >
  38++678A             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++678A             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++678A             >
  38++678A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++678A
  40++678A E1                           pop     hl
  41++678B 7D                           ld      a, l                // file-handle
  42++678C DD E5                        push    ix
  43++678E C5                           push    bc                  // Save Instruction pointer
  44++678F CF                           rst     $08
  45++6790 9B                           db      $9B
  46++6791 18 E5                        jr      F_Seek_Exit
  47++6793              //              pop     bc
  48++6793              //              pop     ix
  49++6793              //              sbc     hl, hl
  50++6793              //              psh1
  51++6793
  52++6793              //  ______________________________________________________________________
  53++6793              //
  54++6793              // f_sync      u -- f
  55++6793              // Close file-handle u.
  56++6793              // Return 0 on success, True flag on error
  57++6793
  58++6793                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++6793             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++6793             >
  58++6793             >                // dummy db directives used to calculate length of namec
  58++6793 46 5F 53 59 >                db      "F_SYNC"
  58++6797 4E 43       >
  58++6799             >len_NFA         defl    $ - temp_NFA
  58++6799             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++6793             >
  58++6793 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++6794 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++6798 4E 43       >
  58++679A             >                org     $-1                 // alter last byte of Name just above to set
  58++6799 C3          >                db      {b $} | END_BIT     // msb as name end
  58++679A             >
  58++679A 80 67       >                dw      last_NFA            // Link to previous definition Name
  58++679C             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++679C ~           >                call    runcode ; ok        // for primitive definitions  actual code
  58++679C ~           >
  58++679C ~           >
  58++679C             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++679C             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++679C             >
  58++679C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++679C E1                           pop     hl
  60++679D 7D                           ld      a, l                // file-handle
  61++679E DD E5                        push    ix
  62++67A0 C5                           push    bc
  63++67A1 CF                           rst     $08
  64++67A2 9C                           db      $9C
  65++67A3 18 D3                        jr      F_Seek_Exit
  66++67A5              //              pop     bc
  67++67A5              //              pop     ix
  68++67A5              //              sbc     hl, hl
  69++67A5              //              psh1
  70++67A5
  71++67A5              //  ______________________________________________________________________
  72++67A5              //
  73++67A5              // f_fgetpos    u -- d f
  74++67A5              // Seek to position d in file-handle u.
  75++67A5              // Return a false-flag 0 on success, True flag on error
  76++67A5                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++67A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++67A5             >
  76++67A5             >                // dummy db directives used to calculate length of namec
  76++67A5 46 5F 46 47 >                db      "F_FGETPOS"
  76++67A9 45 54 50 4F >
  76++67AD 53          >
  76++67AE             >len_NFA         defl    $ - temp_NFA
  76++67AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++67A5             >
  76++67A5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++67A6 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++67AA 45 54 50 4F >
  76++67AE 53          >
  76++67AF             >                org     $-1                 // alter last byte of Name just above to set
  76++67AE D3          >                db      {b $} | END_BIT     // msb as name end
  76++67AF             >
  76++67AF 93 67       >                dw      last_NFA            // Link to previous definition Name
  76++67B1             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++67B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  76++67B1 ~           >
  76++67B1 ~           >
  76++67B1             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++67B1             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++67B1             >
  76++67B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++67B1 E1                           pop     hl
  78++67B2 7D                           ld      a, l                // file-handle
  79++67B3 DD E5                        push    ix
  80++67B5 C5                           push    bc
  81++67B6 CF                           rst     $08
  82++67B7 A0                           db      $A0
  83++67B8 E1                           pop     hl                  // restore Instruction Pointer
  84++67B9 DD E1                        pop     ix
  85++67BB D5                           push    de
  86++67BC C5                           push    bc
  87++67BD 44                           ld      b, h                // restore Instruction Pointer
  88++67BE 4D                           ld      c, l
  89++67BF ED 62                        sbc     hl, hl
  90++67C1
  91++67C1                              psh1
  91++67C1 E5          >                push    hl
  91++67C2 DD E9       >                jp      (ix)
  92++67C4
  93++67C4              //  ______________________________________________________________________
  94++67C4              //
  95++67C4              // f_read       a b u -- n f
  96++67C4              // Read b bytes from file-handle u to address a
  97++67C4              // Return the actual number n of bytes read
  98++67C4              // Return 0 on success, True flag on error
  99++67C4                              New_Def F_READ, "F_READ", is_code, is_normal
  99++67C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++67C4             >
  99++67C4             >                // dummy db directives used to calculate length of namec
  99++67C4 46 5F 52 45 >                db      "F_READ"
  99++67C8 41 44       >
  99++67CA             >len_NFA         defl    $ - temp_NFA
  99++67CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++67C4             >
  99++67C4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++67C5 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++67C9 41 44       >
  99++67CB             >                org     $-1                 // alter last byte of Name just above to set
  99++67CA C4          >                db      {b $} | END_BIT     // msb as name end
  99++67CB             >
  99++67CB A5 67       >                dw      last_NFA            // Link to previous definition Name
  99++67CD             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++67CD ~           >                call    runcode ; ok        // for primitive definitions  actual code
  99++67CD ~           >
  99++67CD ~           >
  99++67CD             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++67CD             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++67CD             >
  99++67CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++67CD
 101++67CD 50                           ld      d, b
 102++67CE 59                           ld      e, c
 103++67CF E1                           pop     hl
 104++67D0 7D                           ld      a, l                // file-handle
 105++67D1 C1                           pop     bc                  // bc has bytes to read
 106++67D2 DD E3                        ex      (sp), ix            // ix has address
 107++67D4 D5                           push    de                  // Save Instruction pointer
 108++67D5 CF                           rst     $08
 109++67D6 9D                           db      $9D
 110++67D7              F_Read_Exit:
 111++67D7 C1                           pop     bc                  // Restore Instruction pointer
 112++67D8 DD E1                        pop     ix                  // Restore ix
 113++67DA D5                           push    de                  // bytes written
 114++67DB ED 62                        sbc     hl, hl
 115++67DD
 116++67DD                              psh1
 116++67DD E5          >                push    hl
 116++67DE DD E9       >                jp      (ix)
 117++67E0
 118++67E0              //  ______________________________________________________________________
 119++67E0              //
 120++67E0              // f_write      a b u -- n f
 121++67E0              // Write bytes currently stored at address a to file-handle u.
 122++67E0              // Return the actual n bytes written and 0 on success, True flag on error.
 123++67E0                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++67E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++67E0             >
 123++67E0             >                // dummy db directives used to calculate length of namec
 123++67E0 46 5F 57 52 >                db      "F_WRITE"
 123++67E4 49 54 45    >
 123++67E7             >len_NFA         defl    $ - temp_NFA
 123++67E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++67E0             >
 123++67E0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++67E1 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++67E5 49 54 45    >
 123++67E8             >                org     $-1                 // alter last byte of Name just above to set
 123++67E7 C5          >                db      {b $} | END_BIT     // msb as name end
 123++67E8             >
 123++67E8 C4 67       >                dw      last_NFA            // Link to previous definition Name
 123++67EA             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++67EA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 123++67EA ~           >
 123++67EA ~           >
 123++67EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++67EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++67EA             >
 123++67EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++67EA
 125++67EA 50                           ld      d, b
 126++67EB 59                           ld      e, c
 127++67EC E1                           pop     hl
 128++67ED 7D                           ld      a, l                // file-handle
 129++67EE C1                           pop     bc                  // bc has bytes to read
 130++67EF DD E3                        ex      (sp), ix            // ix has address
 131++67F1 D5                           push    de                  // Save Instruction pointer
 132++67F2 CF                           rst     $08
 133++67F3 9E                           db      $9E
 134++67F4 18 E1                        jr F_Read_Exit
 135++67F6              //              pop     bc                  // Restore Instruction pointer
 136++67F6              //              pop     ix                  // Restore ix
 137++67F6              //              push    de                  // bytes written
 138++67F6              //              sbc     hl, hl
 139++67F6              //
 140++67F6              //              psh1
 141++67F6
 142++67F6              //  ______________________________________________________________________
 143++67F6              //
 144++67F6              // f_open       a1 a2 b -- u f
 145++67F6              // open a file
 146++67F6              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++67F6              // a2 is address to an 8-byte header data used in some cases.
 148++67F6              // b is access mode-byte, that is a combination of:
 149++67F6              // any/all of:
 150++67F6              //   esx_mode_read          $01 request read access
 151++67F6              //   esx_mode_write         $02 request write access
 152++67F6              //   esx_mode_use_header    $40 read/write +3DOS header
 153++67F6              // plus one of:
 154++67F6              //   esx_mode_open_exist    $00 only open existing file
 155++67F6              //   esx_mode_open_creat    $08 open existing or create file
 156++67F6              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++67F6              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++67F6              // Return file-handle u and 0 on success, True flag on error
 159++67F6                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++67F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++67F6             >
 159++67F6             >                // dummy db directives used to calculate length of namec
 159++67F6 46 5F 4F 50 >                db      "F_OPEN"
 159++67FA 45 4E       >
 159++67FC             >len_NFA         defl    $ - temp_NFA
 159++67FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++67F6             >
 159++67F6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++67F7 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++67FB 45 4E       >
 159++67FD             >                org     $-1                 // alter last byte of Name just above to set
 159++67FC CE          >                db      {b $} | END_BIT     // msb as name end
 159++67FD             >
 159++67FD E0 67       >                dw      last_NFA            // Link to previous definition Name
 159++67FF             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++67FF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 159++67FF ~           >
 159++67FF ~           >
 159++67FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++67FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++67FF             >
 159++67FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++67FF 60                           ld      h, b                // Save Instruction pointer
 161++6800 69                           ld      l, c
 162++6801 C1                           pop     bc                  // file-mode
 163++6802 41                           ld      b, c                // file-mode
 164++6803 D1                           pop     de                  // 8-bytes buffer if any
 165++6804 DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++6806 E5                           push    hl                  // Save Instruction pointer
 167++6807 3E 2A                        ld      a, "*"
 168++6809 CF                           rst     $08
 169++680A 9A                           db      $9A
 170++680B              F_Open_Exit:
 171++680B 5F                           ld      e, a
 172++680C 16 00                        ld      d, 0
 173++680E 18 C7                        jr F_Read_Exit
 174++6810
 175++6810              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 176++6810              //   \ FILENAME 1+ PAD 1 F_OPEN
 177++6810              //   \ DROP
 178++6810              //   \ F_CLOSE
 179++6810
 180++6810
 181++6810              //  ______________________________________________________________________
 182++6810              //
 183++6810              // f_opendir    a1 a2 b -- u f
 184++6810              // open a file
 185++6810                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 185++6810             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185++6810             >
 185++6810             >                // dummy db directives used to calculate length of namec
 185++6810 46 5F 4F 50 >                db      "F_OPENDIR"
 185++6814 45 4E 44 49 >
 185++6818 52          >
 185++6819             >len_NFA         defl    $ - temp_NFA
 185++6819             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185++6810             >
 185++6810 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185++6811 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 185++6815 45 4E 44 49 >
 185++6819 52          >
 185++681A             >                org     $-1                 // alter last byte of Name just above to set
 185++6819 D2          >                db      {b $} | END_BIT     // msb as name end
 185++681A             >
 185++681A F6 67       >                dw      last_NFA            // Link to previous definition Name
 185++681C             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 185++681C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 185++681C ~           >
 185++681C ~           >
 185++681C             >                endif           ; ok        // for other definitions it "points" the correct handler
 185++681C             >                // Use of "; ok" to suppress "warning[fwdref]"
 185++681C             >
 185++681C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186++681C DD E3                        ex      (sp), ix            // filespec nul-terminated
 187++681E C5                           push    bc                  // Save Instruction pointer
 188++681F 06 10                        ld      b, $10              // file-mode
 189++6821 3E 43                        ld      a, "C"
 190++6823 CF                           rst     $08
 191++6824 A3                           db      $A3
 192++6825 18 E4                        jr      F_Open_Exit
 193++6827
 194++6827
 195++6827              //  ______________________________________________________________________
 196++6827              //
 197++6827              // f_readdir    a1 a2 b -- u f
 198++6827              // open a file
 199++6827                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 199++6827             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 199++6827             >
 199++6827             >                // dummy db directives used to calculate length of namec
 199++6827 46 5F 52 45 >                db      "F_READDIR"
 199++682B 41 44 44 49 >
 199++682F 52          >
 199++6830             >len_NFA         defl    $ - temp_NFA
 199++6830             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 199++6827             >
 199++6827 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 199++6828 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 199++682C 41 44 44 49 >
 199++6830 52          >
 199++6831             >                org     $-1                 // alter last byte of Name just above to set
 199++6830 D2          >                db      {b $} | END_BIT     // msb as name end
 199++6831             >
 199++6831 10 68       >                dw      last_NFA            // Link to previous definition Name
 199++6833             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 199++6833 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 199++6833 ~           >
 199++6833 ~           >
 199++6833             >                endif           ; ok        // for other definitions it "points" the correct handler
 199++6833             >                // Use of "; ok" to suppress "warning[fwdref]"
 199++6833             >
 199++6833             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 200++6833 E1                           pop     hl
 201++6834 7D                           ld      a, l
 202++6835 D1                           pop     de
 203++6836 DD E3                        ex      (sp), ix            // filespec nul-terminated
 204++6838 C5                           push    bc                  // Save Instruction pointer
 205++6839 CF                           rst     $08
 206++683A A4                           db      $A4
 207++683B 18 CE                        jr      F_Open_Exit
 208++683D
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
 920+ 683D
 921+ 683D
 922+ 683D              //  ______________________________________________________________________
 923+ 683D              //
 924+ 683D              // cmove    a1 a2 u --
 925+ 683D              // If u > 0, moves memory content starting at address a1 for n bytes long
 926+ 683D              // storing then starting at address addr2.
 927+ 683D              // The content of a1 is moved first. See CMOVE> also.
 928+ 683D                              New_Def CMOVE, "CMOVE", is_code, is_normal
 928+ 683D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 928+ 683D             >
 928+ 683D             >                // dummy db directives used to calculate length of namec
 928+ 683D 43 4D 4F 56 >                db      "CMOVE"
 928+ 6841 45          >
 928+ 6842             >len_NFA         defl    $ - temp_NFA
 928+ 6842             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 928+ 683D             >
 928+ 683D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 928+ 683E 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 928+ 6842 45          >
 928+ 6843             >                org     $-1                 // alter last byte of Name just above to set
 928+ 6842 C5          >                db      {b $} | END_BIT     // msb as name end
 928+ 6843             >
 928+ 6843 27 68       >                dw      last_NFA            // Link to previous definition Name
 928+ 6845             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 928+ 6845 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 928+ 6845 ~           >
 928+ 6845 ~           >
 928+ 6845             >                endif           ; ok        // for other definitions it "points" the correct handler
 928+ 6845             >                // Use of "; ok" to suppress "warning[fwdref]"
 928+ 6845             >
 928+ 6845             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 929+ 6845 D9                           exx
 930+ 6846
 931+ 6846 C1                           pop     bc                  // bc has counter
 932+ 6847 D1                           pop     de                  // de now has dest
 933+ 6848 E1                           pop     hl                 // hl has source, save Instruction Pointer
 934+ 6849 78                           ld      a, b
 935+ 684A B1                           or      c
 936+ 684B 28 02                        jr      z, Cmove_NoMove
 937+ 684D ED B0                            ldir
 938+ 684F              Cmove_NoMove:
 939+ 684F D9                           exx
 940+ 6850
 941+ 6850                              next
 941+ 6850 DD E9       >                jp      (ix)
 942+ 6852
 943+ 6852              //  ______________________________________________________________________
 944+ 6852              //
 945+ 6852              // cmove>    a1 a2 u --
 946+ 6852              // If u > 0, moves memory content starting at address a1 for n bytes long
 947+ 6852              // storing then starting at address addr2.
 948+ 6852              // The content of a1 is moved last. See cmove.
 949+ 6852                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 949+ 6852             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 949+ 6852             >
 949+ 6852             >                // dummy db directives used to calculate length of namec
 949+ 6852 43 4D 4F 56 >                db      "CMOVE>"
 949+ 6856 45 3E       >
 949+ 6858             >len_NFA         defl    $ - temp_NFA
 949+ 6858             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 949+ 6852             >
 949+ 6852 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 949+ 6853 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 949+ 6857 45 3E       >
 949+ 6859             >                org     $-1                 // alter last byte of Name just above to set
 949+ 6858 BE          >                db      {b $} | END_BIT     // msb as name end
 949+ 6859             >
 949+ 6859 3D 68       >                dw      last_NFA            // Link to previous definition Name
 949+ 685B             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 949+ 685B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 949+ 685B ~           >
 949+ 685B ~           >
 949+ 685B             >                endif           ; ok        // for other definitions it "points" the correct handler
 949+ 685B             >                // Use of "; ok" to suppress "warning[fwdref]"
 949+ 685B             >
 949+ 685B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 950+ 685B D9                           exx
 951+ 685C
 952+ 685C C1                           pop     bc                  // bc has counter
 953+ 685D D1                           pop     de                  // de has dest
 954+ 685E E1                           pop     hl                  // hl has source, save Instruction Pointer
 955+ 685F 78                           ld      a, b
 956+ 6860 B1                           or      c
 957+ 6861 28 08                        jr      z, CmoveV_NoMove
 958+ 6863 EB                               ex      de, hl              // compute address to
 959+ 6864 09                               add     hl, bc              // operate backward
 960+ 6865 2B                               dec     hl
 961+ 6866 EB                               ex      de, hl
 962+ 6867 09                               add     hl, bc
 963+ 6868 2B                               dec     hl
 964+ 6869 ED B8                            lddr                        // backward
 965+ 686B              CmoveV_NoMove:
 966+ 686B D9                           exx
 967+ 686C
 968+ 686C                              next
 968+ 686C DD E9       >                jp      (ix)
 969+ 686E
 970+ 686E              //  ______________________________________________________________________
 971+ 686E              //
 972+ 686E              // um*      u1 u2 -- ud
 973+ 686E              // Unsigned multiplication
 974+ 686E              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 975+ 686E              // On the stack a double number is treated as two single numbers
 976+ 686E              // where DE is on the top of the stack and HL is the second from top,
 977+ 686E              // Instead, in 2VARIABLE a double number is stored as EDLH.
 978+ 686E              // this definition could use "MUL" Z80N new op-code.
 979+ 686E                              New_Def UM_MUL, "UM*", is_code, is_normal
 979+ 686E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 979+ 686E             >
 979+ 686E             >                // dummy db directives used to calculate length of namec
 979+ 686E 55 4D 2A    >                db      "UM*"
 979+ 6871             >len_NFA         defl    $ - temp_NFA
 979+ 6871             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 979+ 686E             >
 979+ 686E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 979+ 686F 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 979+ 6872             >                org     $-1                 // alter last byte of Name just above to set
 979+ 6871 AA          >                db      {b $} | END_BIT     // msb as name end
 979+ 6872             >
 979+ 6872 52 68       >                dw      last_NFA            // Link to previous definition Name
 979+ 6874             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 979+ 6874 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 979+ 6874 ~           >
 979+ 6874 ~           >
 979+ 6874             >                endif           ; ok        // for other definitions it "points" the correct handler
 979+ 6874             >                // Use of "; ok" to suppress "warning[fwdref]"
 979+ 6874             >
 979+ 6874             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 980+ 6874 D9                           exx
 981+ 6875 D1                           pop     de                    // de has u2 operand
 982+ 6876 E1                           pop     hl                    // hl has u1 operand
 983+ 6877 45                           ld      b, l
 984+ 6878 4B                           ld      c, e
 985+ 6879 5D                           ld      e, l
 986+ 687A 6A                           ld      l, d
 987+ 687B E5                           push    hl
 988+ 687C 69                           ld      l, c
 989+ 687D ED 30                        mul
 990+ 687F EB                           ex      de, hl
 991+ 6880 ED 30                        mul
 992+ 6882 AF                           xor     a
 993+ 6883 19                           add     hl, de
 994+ 6884 8F                           adc     a
 995+ 6885 59                           ld      e, c
 996+ 6886 50                           ld      d, b
 997+ 6887 ED 30                        mul
 998+ 6889 47                           ld      b, a
 999+ 688A 4C                           ld      c, h
1000+ 688B 7A                           ld      a, d
1001+ 688C 85                           add     l
1002+ 688D 67                           ld      h, a
1003+ 688E 6B                           ld      l, e
1004+ 688F D1                           pop     de
1005+ 6890 ED 30                        mul
1006+ 6892 EB                           ex      de, hl
1007+ 6893 ED 4A                        adc     hl, bc
1008+ 6895 D5                           push    de
1009+ 6896 E5                           push    hl
1010+ 6897 D9                           exx
1011+ 6898                              next
1011+ 6898 DD E9       >                jp      (ix)
1012+ 689A
1013+ 689A              //  ______________________________________________________________________
1014+ 689A              //
1015+ 689A              // um/mod      ud u1 -- q r
1016+ 689A              // divides ud into u1 giving quotient q and remainder r
1017+ 689A              // algorithm takes 16 bit at a time starting from msb
1018+ 689A              // DE grows from lsb upward with quotient result
1019+ 689A              // HL keeps the remainder at each stage of division
1020+ 689A              // each loop 'lowers' the next binary digit to form the current dividend
1021+ 689A                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1021+ 689A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1021+ 689A             >
1021+ 689A             >                // dummy db directives used to calculate length of namec
1021+ 689A 55 4D 2F 4D >                db      "UM/MOD"
1021+ 689E 4F 44       >
1021+ 68A0             >len_NFA         defl    $ - temp_NFA
1021+ 68A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1021+ 689A             >
1021+ 689A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1021+ 689B 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1021+ 689F 4F 44       >
1021+ 68A1             >                org     $-1                 // alter last byte of Name just above to set
1021+ 68A0 C4          >                db      {b $} | END_BIT     // msb as name end
1021+ 68A1             >
1021+ 68A1 6E 68       >                dw      last_NFA            // Link to previous definition Name
1021+ 68A3             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1021+ 68A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1021+ 68A3 ~           >
1021+ 68A3 ~           >
1021+ 68A3             >                endif           ; ok        // for other definitions it "points" the correct handler
1021+ 68A3             >                // Use of "; ok" to suppress "warning[fwdref]"
1021+ 68A3             >
1021+ 68A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1022+ 68A3 D9                           exx
1023+ 68A4 C1                           pop     bc                      // divisor
1024+ 68A5
1025+ 68A5 E1                           pop     hl                      // < high part
1026+ 68A6 D1                           pop     de                      // < low part and
1027+ 68A7
1028+ 68A7 7D                           ld      a, l                    // check without changing arguments
1029+ 68A8 91                           sub     c                       // if divisor is greater than high part
1030+ 68A9 7C                           ld      a, h                    // so quotient will be in range
1031+ 68AA 98                           sbc     a, b
1032+ 68AB 30 20                        jr      nc, Um_DivMod_OutOfRange
1033+ 68AD 3E 10                            ld      a, 16
1034+ 68AF              Um_DivMod_Loop:
1035+ 68AF CB 23                                sla     e
1036+ 68B1 CB 12                                rl      d
1037+ 68B3 ED 6A                                adc     hl, hl
1038+ 68B5 30 05                                jr      nc, Um_DivMod_Carry
1039+ 68B7 A7                                       and     a
1040+ 68B8 ED 42                                    sbc     hl, bc
1041+ 68BA 18 07                                jr      Um_DivMod_Endif    // else
1042+ 68BC              Um_DivMod_Carry:
1043+ 68BC A7                                       and     a
1044+ 68BD ED 42                                    sbc     hl, bc
1045+ 68BF 30 02                                    jr      nc, Um_DivMod_Endif
1046+ 68C1 09                                           add     hl, bc
1047+ 68C2 1B                                           dec     de
1048+ 68C3              Um_DivMod_Endif:                                   // endif
1049+ 68C3 13                                   inc     de
1050+ 68C4 3D                                   dec     a
1051+ 68C5 20 E8                            jr      nz, Um_DivMod_Loop
1052+ 68C7 EB                               ex      de, hl
1053+ 68C8              Um_DivMod_Bailout:
1054+ 68C8 D5                               push    de                  // de := remanider
1055+ 68C9 E5                               push    hl                  // hl := quotient
1056+ 68CA D9                               exx
1057+ 68CB                                  next
1057+ 68CB DD E9       >                jp      (ix)
1058+ 68CD
1059+ 68CD              Um_DivMod_OutOfRange:
1060+ 68CD 21 FF FF                     ld      hl, -1
1061+ 68D0 54                           ld      d, h
1062+ 68D1 5D                           ld      e, l
1063+ 68D2 18 F4                        jr      Um_DivMod_Bailout
1064+ 68D4
1065+ 68D4              //  ______________________________________________________________________
1066+ 68D4              //
1067+ 68D4              // and          n1 n2 -- n3
1068+ 68D4              // bit logical AND. Returns n3 as n1 & n2
1069+ 68D4                              New_Def AND_OP, "AND", is_code, is_normal
1069+ 68D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1069+ 68D4             >
1069+ 68D4             >                // dummy db directives used to calculate length of namec
1069+ 68D4 41 4E 44    >                db      "AND"
1069+ 68D7             >len_NFA         defl    $ - temp_NFA
1069+ 68D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1069+ 68D4             >
1069+ 68D4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1069+ 68D5 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1069+ 68D8             >                org     $-1                 // alter last byte of Name just above to set
1069+ 68D7 C4          >                db      {b $} | END_BIT     // msb as name end
1069+ 68D8             >
1069+ 68D8 9A 68       >                dw      last_NFA            // Link to previous definition Name
1069+ 68DA             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1069+ 68DA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1069+ 68DA ~           >
1069+ 68DA ~           >
1069+ 68DA             >                endif           ; ok        // for other definitions it "points" the correct handler
1069+ 68DA             >                // Use of "; ok" to suppress "warning[fwdref]"
1069+ 68DA             >
1069+ 68DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1070+ 68DA D1                           pop     de
1071+ 68DB E1                           pop     hl
1072+ 68DC 7B                           ld      a, e
1073+ 68DD A5                           and     l
1074+ 68DE 6F                           ld      l, a
1075+ 68DF 7A                           ld      a, d
1076+ 68E0 A4                           and     h
1077+ 68E1 67                           ld      h, a
1078+ 68E2
1079+ 68E2                              psh1
1079+ 68E2 E5          >                push    hl
1079+ 68E3 DD E9       >                jp      (ix)
1080+ 68E5
1081+ 68E5              //  ______________________________________________________________________
1082+ 68E5              //
1083+ 68E5              // or           n1 n2 -- n3
1084+ 68E5              // bit logical OR. Returns n3 as n1 | n2
1085+ 68E5                              New_Def OR_OP, "OR", is_code, is_normal
1085+ 68E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1085+ 68E5             >
1085+ 68E5             >                // dummy db directives used to calculate length of namec
1085+ 68E5 4F 52       >                db      "OR"
1085+ 68E7             >len_NFA         defl    $ - temp_NFA
1085+ 68E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1085+ 68E5             >
1085+ 68E5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1085+ 68E6 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1085+ 68E8             >                org     $-1                 // alter last byte of Name just above to set
1085+ 68E7 D2          >                db      {b $} | END_BIT     // msb as name end
1085+ 68E8             >
1085+ 68E8 D4 68       >                dw      last_NFA            // Link to previous definition Name
1085+ 68EA             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1085+ 68EA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1085+ 68EA ~           >
1085+ 68EA ~           >
1085+ 68EA             >                endif           ; ok        // for other definitions it "points" the correct handler
1085+ 68EA             >                // Use of "; ok" to suppress "warning[fwdref]"
1085+ 68EA             >
1085+ 68EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1086+ 68EA D1                           pop     de
1087+ 68EB E1                           pop     hl
1088+ 68EC 7B                           ld      a, e
1089+ 68ED B5                           or      l
1090+ 68EE 6F                           ld      l, a
1091+ 68EF 7A                           ld      a, d
1092+ 68F0 B4                           or      h
1093+ 68F1 67                           ld      h, a
1094+ 68F2
1095+ 68F2                              psh1
1095+ 68F2 E5          >                push    hl
1095+ 68F3 DD E9       >                jp      (ix)
1096+ 68F5
1097+ 68F5              //  ______________________________________________________________________
1098+ 68F5              //
1099+ 68F5              // xor          n1 n2 -- n3
1100+ 68F5              // bit logical OR. Returns n3 as n1 ^ n2
1101+ 68F5                              New_Def XOR_OP, "XOR", is_code, is_normal
1101+ 68F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1101+ 68F5             >
1101+ 68F5             >                // dummy db directives used to calculate length of namec
1101+ 68F5 58 4F 52    >                db      "XOR"
1101+ 68F8             >len_NFA         defl    $ - temp_NFA
1101+ 68F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1101+ 68F5             >
1101+ 68F5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1101+ 68F6 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1101+ 68F9             >                org     $-1                 // alter last byte of Name just above to set
1101+ 68F8 D2          >                db      {b $} | END_BIT     // msb as name end
1101+ 68F9             >
1101+ 68F9 E5 68       >                dw      last_NFA            // Link to previous definition Name
1101+ 68FB             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1101+ 68FB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1101+ 68FB ~           >
1101+ 68FB ~           >
1101+ 68FB             >                endif           ; ok        // for other definitions it "points" the correct handler
1101+ 68FB             >                // Use of "; ok" to suppress "warning[fwdref]"
1101+ 68FB             >
1101+ 68FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1102+ 68FB D1                           pop     de
1103+ 68FC E1                           pop     hl
1104+ 68FD 7B                           ld      a, e
1105+ 68FE AD                           xor     l
1106+ 68FF 6F                           ld      l, a
1107+ 6900 7A                           ld      a, d
1108+ 6901 AC                           xor     h
1109+ 6902 67                           ld      h, a
1110+ 6903
1111+ 6903                              psh1
1111+ 6903 E5          >                push    hl
1111+ 6904 DD E9       >                jp      (ix)
1112+ 6906
1113+ 6906              //  ______________________________________________________________________
1114+ 6906              //
1115+ 6906              // sp@      -- a
1116+ 6906              // returns on top of stack the value of SP before execution
1117+ 6906                              New_Def SPFETCH, "SP@", is_code, is_normal
1117+ 6906             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1117+ 6906             >
1117+ 6906             >                // dummy db directives used to calculate length of namec
1117+ 6906 53 50 40    >                db      "SP@"
1117+ 6909             >len_NFA         defl    $ - temp_NFA
1117+ 6909             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1117+ 6906             >
1117+ 6906 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1117+ 6907 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1117+ 690A             >                org     $-1                 // alter last byte of Name just above to set
1117+ 6909 C0          >                db      {b $} | END_BIT     // msb as name end
1117+ 690A             >
1117+ 690A F5 68       >                dw      last_NFA            // Link to previous definition Name
1117+ 690C             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1117+ 690C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1117+ 690C ~           >
1117+ 690C ~           >
1117+ 690C             >                endif           ; ok        // for other definitions it "points" the correct handler
1117+ 690C             >                // Use of "; ok" to suppress "warning[fwdref]"
1117+ 690C             >
1117+ 690C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1118+ 690C
1119+ 690C 21 00 00                     ld      hl, 0
1120+ 690F 39                           add     hl, sp
1121+ 6910
1122+ 6910                              psh1
1122+ 6910 E5          >                push    hl
1122+ 6911 DD E9       >                jp      (ix)
1123+ 6913
1124+ 6913              //  ______________________________________________________________________
1125+ 6913              //
1126+ 6913              // sp!      a --
1127+ 6913              // restore SP to the initial value passed
1128+ 6913              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1129+ 6913                              New_Def SPSTORE, "SP!", is_code, is_normal
1129+ 6913             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1129+ 6913             >
1129+ 6913             >                // dummy db directives used to calculate length of namec
1129+ 6913 53 50 21    >                db      "SP!"
1129+ 6916             >len_NFA         defl    $ - temp_NFA
1129+ 6916             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1129+ 6913             >
1129+ 6913 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1129+ 6914 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1129+ 6917             >                org     $-1                 // alter last byte of Name just above to set
1129+ 6916 A1          >                db      {b $} | END_BIT     // msb as name end
1129+ 6917             >
1129+ 6917 06 69       >                dw      last_NFA            // Link to previous definition Name
1129+ 6919             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1129+ 6919 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1129+ 6919 ~           >
1129+ 6919 ~           >
1129+ 6919             >                endif           ; ok        // for other definitions it "points" the correct handler
1129+ 6919             >                // Use of "; ok" to suppress "warning[fwdref]"
1129+ 6919             >
1129+ 6919             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1130+ 6919 E1                           pop     hl
1131+ 691A F9                           ld      sp, hl
1132+ 691B
1133+ 691B                              next
1133+ 691B DD E9       >                jp      (ix)
1134+ 691D
1135+ 691D              //  ______________________________________________________________________
1136+ 691D              //
1137+ 691D              // rp@      -- a
1138+ 691D              // returns on top of stack the value of Return-Pointer
1139+ 691D                              New_Def RPFETCH, "RP@", is_code, is_normal
1139+ 691D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1139+ 691D             >
1139+ 691D             >                // dummy db directives used to calculate length of namec
1139+ 691D 52 50 40    >                db      "RP@"
1139+ 6920             >len_NFA         defl    $ - temp_NFA
1139+ 6920             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1139+ 691D             >
1139+ 691D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1139+ 691E 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1139+ 6921             >                org     $-1                 // alter last byte of Name just above to set
1139+ 6920 C0          >                db      {b $} | END_BIT     // msb as name end
1139+ 6921             >
1139+ 6921 13 69       >                dw      last_NFA            // Link to previous definition Name
1139+ 6923             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1139+ 6923 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1139+ 6923 ~           >
1139+ 6923 ~           >
1139+ 6923             >                endif           ; ok        // for other definitions it "points" the correct handler
1139+ 6923             >                // Use of "; ok" to suppress "warning[fwdref]"
1139+ 6923             >
1139+ 6923             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1140+ 6923
1141+ 6923                              ldhlrp
1141+ 6923 2A 96 63    >                ld      hl,(RP_Pointer)
1142+ 6926
1143+ 6926                              psh1
1143+ 6926 E5          >                push    hl
1143+ 6927 DD E9       >                jp      (ix)
1144+ 6929
1145+ 6929              //  ______________________________________________________________________
1146+ 6929              //
1147+ 6929              // rp!      a --
1148+ 6929              // restore RP to the initial value passed
1149+ 6929              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1150+ 6929                              New_Def RPSTORE, "RP!", is_code, is_normal
1150+ 6929             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1150+ 6929             >
1150+ 6929             >                // dummy db directives used to calculate length of namec
1150+ 6929 52 50 21    >                db      "RP!"
1150+ 692C             >len_NFA         defl    $ - temp_NFA
1150+ 692C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1150+ 6929             >
1150+ 6929 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1150+ 692A 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1150+ 692D             >                org     $-1                 // alter last byte of Name just above to set
1150+ 692C A1          >                db      {b $} | END_BIT     // msb as name end
1150+ 692D             >
1150+ 692D 1D 69       >                dw      last_NFA            // Link to previous definition Name
1150+ 692F             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1150+ 692F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1150+ 692F ~           >
1150+ 692F ~           >
1150+ 692F             >                endif           ; ok        // for other definitions it "points" the correct handler
1150+ 692F             >                // Use of "; ok" to suppress "warning[fwdref]"
1150+ 692F             >
1150+ 692F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1151+ 692F E1                           pop     hl
1152+ 6930                              ldrphl
1152+ 6930 22 96 63    >                ld      (RP_Pointer),hl
1153+ 6933
1154+ 6933                              next
1154+ 6933 DD E9       >                jp      (ix)
1155+ 6935
1156+ 6935              //  ______________________________________________________________________
1157+ 6935              //
1158+ 6935              // exit       --
1159+ 6935              // exits back to the caller word
1160+ 6935                              New_Def EXIT, "EXIT", is_code, is_normal
1160+ 6935             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1160+ 6935             >
1160+ 6935             >                // dummy db directives used to calculate length of namec
1160+ 6935 45 58 49 54 >                db      "EXIT"
1160+ 6939             >len_NFA         defl    $ - temp_NFA
1160+ 6939             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1160+ 6935             >
1160+ 6935 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1160+ 6936 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1160+ 693A             >                org     $-1                 // alter last byte of Name just above to set
1160+ 6939 D4          >                db      {b $} | END_BIT     // msb as name end
1160+ 693A             >
1160+ 693A 29 69       >                dw      last_NFA            // Link to previous definition Name
1160+ 693C             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1160+ 693C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1160+ 693C ~           >
1160+ 693C ~           >
1160+ 693C             >                endif           ; ok        // for other definitions it "points" the correct handler
1160+ 693C             >                // Use of "; ok" to suppress "warning[fwdref]"
1160+ 693C             >
1160+ 693C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1161+ 693C                              ldhlrp                      // Get Return Stack Pointer
1161+ 693C 2A 96 63    >                ld      hl,(RP_Pointer)
1162+ 693F 4E                           ld      c, (hl)             // pop Instruction Pointer
1163+ 6940 23                           inc     hl                  // from Return Stack
1164+ 6941 46                           ld      b, (hl)
1165+ 6942 23                           inc     hl
1166+ 6943                              ldrphl                      // Set Return Stack Pointer
1166+ 6943 22 96 63    >                ld      (RP_Pointer),hl
1167+ 6946                              next
1167+ 6946 DD E9       >                jp      (ix)
1168+ 6948
1169+ 6948              //  ______________________________________________________________________
1170+ 6948              //
1171+ 6948              // lastl      --
1172+ 6948              // exits back to the caller word
1173+ 6948              //              New_Def EXIT, "LASTL", is_code, is_normal
1174+ 6948              //              ldhlrp                      // Get Return Stack Pointer
1175+ 6948              //              ld      e, (hl)             // pop Instruction Pointer
1176+ 6948              //              inc     hl                  // from Return Stack
1177+ 6948              //              ld      d, (hl)
1178+ 6948              //              inc     hl
1179+ 6948              //              ld      (hl), e
1180+ 6948              //              inc     hl
1181+ 6948              //              ld      (hl), d
1182+ 6948              //              next
1183+ 6948
1184+ 6948              //  ______________________________________________________________________
1185+ 6948              //
1186+ 6948              // >r      n --
1187+ 6948              // pop from calculator-stack and push into return-stack
1188+ 6948                              New_Def TO_R, ">R", is_code, is_normal
1188+ 6948             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1188+ 6948             >
1188+ 6948             >                // dummy db directives used to calculate length of namec
1188+ 6948 3E 52       >                db      ">R"
1188+ 694A             >len_NFA         defl    $ - temp_NFA
1188+ 694A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1188+ 6948             >
1188+ 6948 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1188+ 6949 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1188+ 694B             >                org     $-1                 // alter last byte of Name just above to set
1188+ 694A D2          >                db      {b $} | END_BIT     // msb as name end
1188+ 694B             >
1188+ 694B 35 69       >                dw      last_NFA            // Link to previous definition Name
1188+ 694D             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1188+ 694D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1188+ 694D ~           >
1188+ 694D ~           >
1188+ 694D             >                endif           ; ok        // for other definitions it "points" the correct handler
1188+ 694D             >                // Use of "; ok" to suppress "warning[fwdref]"
1188+ 694D             >
1188+ 694D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1189+ 694D D1                           pop     de
1190+ 694E                              ldhlrp
1190+ 694E 2A 96 63    >                ld      hl,(RP_Pointer)
1191+ 6951 2B                           dec     hl
1192+ 6952 72                           ld      (hl), d             // store current TOS
1193+ 6953 2B                           dec     hl                  // to Return Stack
1194+ 6954 73                           ld      (hl), e
1195+ 6955                              ldrphl
1195+ 6955 22 96 63    >                ld      (RP_Pointer),hl
1196+ 6958
1197+ 6958                              next
1197+ 6958 DD E9       >                jp      (ix)
1198+ 695A
1199+ 695A              //  ______________________________________________________________________
1200+ 695A              //
1201+ 695A              // r>      -- n
1202+ 695A              // pop from return-stack and push into calculator-stack
1203+ 695A                              New_Def R_TO, "R>", is_code, is_normal
1203+ 695A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1203+ 695A             >
1203+ 695A             >                // dummy db directives used to calculate length of namec
1203+ 695A 52 3E       >                db      "R>"
1203+ 695C             >len_NFA         defl    $ - temp_NFA
1203+ 695C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1203+ 695A             >
1203+ 695A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1203+ 695B 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1203+ 695D             >                org     $-1                 // alter last byte of Name just above to set
1203+ 695C BE          >                db      {b $} | END_BIT     // msb as name end
1203+ 695D             >
1203+ 695D 48 69       >                dw      last_NFA            // Link to previous definition Name
1203+ 695F             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1203+ 695F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1203+ 695F ~           >
1203+ 695F ~           >
1203+ 695F             >                endif           ; ok        // for other definitions it "points" the correct handler
1203+ 695F             >                // Use of "; ok" to suppress "warning[fwdref]"
1203+ 695F             >
1203+ 695F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1204+ 695F
1205+ 695F                              ldhlrp
1205+ 695F 2A 96 63    >                ld      hl,(RP_Pointer)
1206+ 6962 5E                           ld      e, (hl)             // retrieve from Return Stack
1207+ 6963 23                           inc     hl
1208+ 6964 56                           ld      d, (hl)
1209+ 6965 23                           inc     hl
1210+ 6966                              ldrphl
1210+ 6966 22 96 63    >                ld      (RP_Pointer),hl
1211+ 6969 D5                           push    de
1212+ 696A                              next
1212+ 696A DD E9       >                jp      (ix)
1213+ 696C
1214+ 696C              //  ______________________________________________________________________
1215+ 696C              //
1216+ 696C              // r@           -- n
1217+ 696C              // return on top of stack the value of top of return-stack
1218+ 696C              // Since this is the same as I, we alter R's CFA to jump there
1219+ 696C                              New_Def R_OP, "R@", is_code, is_normal
1219+ 696C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1219+ 696C             >
1219+ 696C             >                // dummy db directives used to calculate length of namec
1219+ 696C 52 40       >                db      "R@"
1219+ 696E             >len_NFA         defl    $ - temp_NFA
1219+ 696E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1219+ 696C             >
1219+ 696C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1219+ 696D 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1219+ 696F             >                org     $-1                 // alter last byte of Name just above to set
1219+ 696E C0          >                db      {b $} | END_BIT     // msb as name end
1219+ 696F             >
1219+ 696F 5A 69       >                dw      last_NFA            // Link to previous definition Name
1219+ 6971             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1219+ 6971 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1219+ 6971 ~           >
1219+ 6971 ~           >
1219+ 6971             >                endif           ; ok        // for other definitions it "points" the correct handler
1219+ 6971             >                // Use of "; ok" to suppress "warning[fwdref]"
1219+ 6971             >
1219+ 6971             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1220+ 6971 C3 78 64                     jp      I_Ptr
1221+ 6974
1222+ 6974              //  ______________________________________________________________________
1223+ 6974              //
1224+ 6974              // r            -- n
1225+ 6974              // return on top of stack the value of top of return-stack
1226+ 6974              // Since this is the same as I, we alter R's CFA to jump there
1227+ 6974              //              New_Def R_OLD, "R", is_code, is_normal
1228+ 6974              //              jp      I_Ptr
1229+ 6974
1230+ 6974              //  ______________________________________________________________________
1231+ 6974              //
1232+ 6974              // 0=           n -- f
1233+ 6974              // true (non zero) if n is zero, false (0) elsewere
1234+ 6974                              New_Def ZEQUAL, "0=", is_code, is_normal
1234+ 6974             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1234+ 6974             >
1234+ 6974             >                // dummy db directives used to calculate length of namec
1234+ 6974 30 3D       >                db      "0="
1234+ 6976             >len_NFA         defl    $ - temp_NFA
1234+ 6976             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1234+ 6974             >
1234+ 6974 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1234+ 6975 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1234+ 6977             >                org     $-1                 // alter last byte of Name just above to set
1234+ 6976 BD          >                db      {b $} | END_BIT     // msb as name end
1234+ 6977             >
1234+ 6977 6C 69       >                dw      last_NFA            // Link to previous definition Name
1234+ 6979             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1234+ 6979 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1234+ 6979 ~           >
1234+ 6979 ~           >
1234+ 6979             >                endif           ; ok        // for other definitions it "points" the correct handler
1234+ 6979             >                // Use of "; ok" to suppress "warning[fwdref]"
1234+ 6979             >
1234+ 6979             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1235+ 6979              Zero_Equal:
1236+ 6979 E1                           pop     hl
1237+ 697A 7D                           ld      a, l
1238+ 697B B4                           or      h
1239+ 697C 21 00 00                     ld      hl, FALSE_FLAG
1240+ 697F 20 01                        jr      nz, ZEqual_Skip
1241+ 6981 2B                               dec     hl
1242+ 6982              ZEqual_Skip:
1243+ 6982                              psh1
1243+ 6982 E5          >                push    hl
1243+ 6983 DD E9       >                jp      (ix)
1244+ 6985
1245+ 6985              //  ______________________________________________________________________
1246+ 6985              //
1247+ 6985              // not         a1 -- a2
1248+ 6985              // increment by 2 top of stack
1249+ 6985                              New_Def NOT_OP, "NOT", is_code, is_normal
1249+ 6985             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1249+ 6985             >
1249+ 6985             >                // dummy db directives used to calculate length of namec
1249+ 6985 4E 4F 54    >                db      "NOT"
1249+ 6988             >len_NFA         defl    $ - temp_NFA
1249+ 6988             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1249+ 6985             >
1249+ 6985 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1249+ 6986 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1249+ 6989             >                org     $-1                 // alter last byte of Name just above to set
1249+ 6988 D4          >                db      {b $} | END_BIT     // msb as name end
1249+ 6989             >
1249+ 6989 74 69       >                dw      last_NFA            // Link to previous definition Name
1249+ 698B             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1249+ 698B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1249+ 698B ~           >
1249+ 698B ~           >
1249+ 698B             >                endif           ; ok        // for other definitions it "points" the correct handler
1249+ 698B             >                // Use of "; ok" to suppress "warning[fwdref]"
1249+ 698B             >
1249+ 698B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1250+ 698B C3 79 69                     jp      Zero_Equal
1251+ 698E
1252+ 698E              //  ______________________________________________________________________
1253+ 698E              //
1254+ 698E              // 0<           n -- f
1255+ 698E              // true (non zero) if n is less than zero, false (0) elsewere
1256+ 698E                              New_Def ZLESS, "0<", is_code, is_normal
1256+ 698E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1256+ 698E             >
1256+ 698E             >                // dummy db directives used to calculate length of namec
1256+ 698E 30 3C       >                db      "0<"
1256+ 6990             >len_NFA         defl    $ - temp_NFA
1256+ 6990             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1256+ 698E             >
1256+ 698E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1256+ 698F 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1256+ 6991             >                org     $-1                 // alter last byte of Name just above to set
1256+ 6990 BC          >                db      {b $} | END_BIT     // msb as name end
1256+ 6991             >
1256+ 6991 85 69       >                dw      last_NFA            // Link to previous definition Name
1256+ 6993             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1256+ 6993 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1256+ 6993 ~           >
1256+ 6993 ~           >
1256+ 6993             >                endif           ; ok        // for other definitions it "points" the correct handler
1256+ 6993             >                // Use of "; ok" to suppress "warning[fwdref]"
1256+ 6993             >
1256+ 6993             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1257+ 6993 E1                           pop     hl
1258+ 6994 29                           add     hl, hl
1259+ 6995 21 00 00                     ld      hl, 0
1260+ 6998 30 01                        jr      nc, ZLess_Skip
1261+ 699A 2B                               dec     hl
1262+ 699B              ZLess_Skip:
1263+ 699B                              psh1
1263+ 699B E5          >                push    hl
1263+ 699C DD E9       >                jp      (ix)
1264+ 699E
1265+ 699E              //  ______________________________________________________________________
1266+ 699E              //
1267+ 699E              // 0>           n -- f
1268+ 699E              // true (non zero) if n is less than zero, false (0) elsewere
1269+ 699E                              New_Def ZGREATER, "0>", is_code, is_normal
1269+ 699E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1269+ 699E             >
1269+ 699E             >                // dummy db directives used to calculate length of namec
1269+ 699E 30 3E       >                db      "0>"
1269+ 69A0             >len_NFA         defl    $ - temp_NFA
1269+ 69A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1269+ 699E             >
1269+ 699E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1269+ 699F 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1269+ 69A1             >                org     $-1                 // alter last byte of Name just above to set
1269+ 69A0 BE          >                db      {b $} | END_BIT     // msb as name end
1269+ 69A1             >
1269+ 69A1 8E 69       >                dw      last_NFA            // Link to previous definition Name
1269+ 69A3             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1269+ 69A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1269+ 69A3 ~           >
1269+ 69A3 ~           >
1269+ 69A3             >                endif           ; ok        // for other definitions it "points" the correct handler
1269+ 69A3             >                // Use of "; ok" to suppress "warning[fwdref]"
1269+ 69A3             >
1269+ 69A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1270+ 69A3 E1                           pop     hl
1271+ 69A4 7D                           ld      a, l
1272+ 69A5 B4                           or      h
1273+ 69A6 29                           add     hl, hl
1274+ 69A7 21 00 00                     ld      hl, FALSE_FLAG
1275+ 69AA 38 04                        jr      c, ZGreater_Skip
1276+ 69AC A7                               and     a
1277+ 69AD 28 01                            jr      z, ZGreater_Skip
1278+ 69AF 2B                                   dec     hl
1279+ 69B0              ZGreater_Skip:
1280+ 69B0                              psh1
1280+ 69B0 E5          >                push    hl
1280+ 69B1 DD E9       >                jp      (ix)
1281+ 69B3
1282+ 69B3              //  ______________________________________________________________________
1283+ 69B3              //
1284+ 69B3              // +            n1 n2 -- n3
1285+ 69B3              // returns the unsigned sum of two top values
1286+ 69B3                              New_Def PLUS, "+", is_code, is_normal
1286+ 69B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1286+ 69B3             >
1286+ 69B3             >                // dummy db directives used to calculate length of namec
1286+ 69B3 2B          >                db      "+"
1286+ 69B4             >len_NFA         defl    $ - temp_NFA
1286+ 69B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1286+ 69B3             >
1286+ 69B3 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1286+ 69B4 2B          >                db      "+"               // name string in 7-bit ascii, but
1286+ 69B5             >                org     $-1                 // alter last byte of Name just above to set
1286+ 69B4 AB          >                db      {b $} | END_BIT     // msb as name end
1286+ 69B5             >
1286+ 69B5 9E 69       >                dw      last_NFA            // Link to previous definition Name
1286+ 69B7             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1286+ 69B7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1286+ 69B7 ~           >
1286+ 69B7 ~           >
1286+ 69B7             >                endif           ; ok        // for other definitions it "points" the correct handler
1286+ 69B7             >                // Use of "; ok" to suppress "warning[fwdref]"
1286+ 69B7             >
1286+ 69B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1287+ 69B7 E1                           pop     hl
1288+ 69B8 D1                           pop     de
1289+ 69B9 19                           add     hl, de
1290+ 69BA
1291+ 69BA                              psh1
1291+ 69BA E5          >                push    hl
1291+ 69BB DD E9       >                jp      (ix)
1292+ 69BD
1293+ 69BD
1294+ 69BD              //  ______________________________________________________________________
1295+ 69BD              //
1296+ 69BD              // d+           d1 d2 -- d3
1297+ 69BD              // returns the unsigned sum of two top double-numbers
1298+ 69BD              //      d2  d1
1299+ 69BD              //      h l h l
1300+ 69BD              // SP   LHEDLHED
1301+ 69BD              // SP  +01234567
1302+ 69BD                              New_Def DPLUS, "D+", is_code, is_normal
1302+ 69BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1302+ 69BD             >
1302+ 69BD             >                // dummy db directives used to calculate length of namec
1302+ 69BD 44 2B       >                db      "D+"
1302+ 69BF             >len_NFA         defl    $ - temp_NFA
1302+ 69BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1302+ 69BD             >
1302+ 69BD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1302+ 69BE 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1302+ 69C0             >                org     $-1                 // alter last byte of Name just above to set
1302+ 69BF AB          >                db      {b $} | END_BIT     // msb as name end
1302+ 69C0             >
1302+ 69C0 B3 69       >                dw      last_NFA            // Link to previous definition Name
1302+ 69C2             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1302+ 69C2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1302+ 69C2 ~           >
1302+ 69C2 ~           >
1302+ 69C2             >                endif           ; ok        // for other definitions it "points" the correct handler
1302+ 69C2             >                // Use of "; ok" to suppress "warning[fwdref]"
1302+ 69C2             >
1302+ 69C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1303+ 69C2
1304+ 69C2 D9                           exx
1305+ 69C3 C1                           pop     bc                  // bc := d2.H
1306+ 69C4 D1                           pop     de                  // hl := d2.L
1307+ 69C5 E1                           pop     hl                  // d1.H
1308+ 69C6 E3                           ex      (sp), hl            // d1.L
1309+ 69C7 19                           add     hl, de              // hl := d2.L + d1.L
1310+ 69C8 E3                           ex      (sp), hl            // d1.H
1311+ 69C9 ED 4A                        adc     hl, bc              // d1.H + d2.H
1312+ 69CB E5                           push    hl
1313+ 69CC D9                           exx
1314+ 69CD                              next
1314+ 69CD DD E9       >                jp      (ix)
1315+ 69CF
1316+ 69CF              //  ______________________________________________________________________
1317+ 69CF              //
1318+ 69CF              // 1+           n1 -- n2
1319+ 69CF              // increment by 1 top of stack
1320+ 69CF                              New_Def ONE_PLUS, "1+", is_code, is_normal
1320+ 69CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1320+ 69CF             >
1320+ 69CF             >                // dummy db directives used to calculate length of namec
1320+ 69CF 31 2B       >                db      "1+"
1320+ 69D1             >len_NFA         defl    $ - temp_NFA
1320+ 69D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1320+ 69CF             >
1320+ 69CF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1320+ 69D0 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1320+ 69D2             >                org     $-1                 // alter last byte of Name just above to set
1320+ 69D1 AB          >                db      {b $} | END_BIT     // msb as name end
1320+ 69D2             >
1320+ 69D2 BD 69       >                dw      last_NFA            // Link to previous definition Name
1320+ 69D4             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1320+ 69D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1320+ 69D4 ~           >
1320+ 69D4 ~           >
1320+ 69D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1320+ 69D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1320+ 69D4             >
1320+ 69D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1321+ 69D4 E1                           pop     hl
1322+ 69D5 23                           inc     hl
1323+ 69D6
1324+ 69D6                              psh1
1324+ 69D6 E5          >                push    hl
1324+ 69D7 DD E9       >                jp      (ix)
1325+ 69D9
1326+ 69D9              //  ______________________________________________________________________
1327+ 69D9              //
1328+ 69D9              // 1-           n1 -- n2
1329+ 69D9              // decrement by 1 top of stack
1330+ 69D9                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1330+ 69D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1330+ 69D9             >
1330+ 69D9             >                // dummy db directives used to calculate length of namec
1330+ 69D9 31 2D       >                db      "1-"
1330+ 69DB             >len_NFA         defl    $ - temp_NFA
1330+ 69DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1330+ 69D9             >
1330+ 69D9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1330+ 69DA 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1330+ 69DC             >                org     $-1                 // alter last byte of Name just above to set
1330+ 69DB AD          >                db      {b $} | END_BIT     // msb as name end
1330+ 69DC             >
1330+ 69DC CF 69       >                dw      last_NFA            // Link to previous definition Name
1330+ 69DE             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1330+ 69DE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1330+ 69DE ~           >
1330+ 69DE ~           >
1330+ 69DE             >                endif           ; ok        // for other definitions it "points" the correct handler
1330+ 69DE             >                // Use of "; ok" to suppress "warning[fwdref]"
1330+ 69DE             >
1330+ 69DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1331+ 69DE E1                           pop     hl
1332+ 69DF 2B                           dec     hl
1333+ 69E0
1334+ 69E0                              psh1
1334+ 69E0 E5          >                push    hl
1334+ 69E1 DD E9       >                jp      (ix)
1335+ 69E3
1336+ 69E3              //  ______________________________________________________________________
1337+ 69E3              //
1338+ 69E3              // 2+           n1 -- n2
1339+ 69E3              // increment by 2 top of stack
1340+ 69E3                              New_Def TWO_PLUS, "2+", is_code, is_normal
1340+ 69E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1340+ 69E3             >
1340+ 69E3             >                // dummy db directives used to calculate length of namec
1340+ 69E3 32 2B       >                db      "2+"
1340+ 69E5             >len_NFA         defl    $ - temp_NFA
1340+ 69E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1340+ 69E3             >
1340+ 69E3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1340+ 69E4 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1340+ 69E6             >                org     $-1                 // alter last byte of Name just above to set
1340+ 69E5 AB          >                db      {b $} | END_BIT     // msb as name end
1340+ 69E6             >
1340+ 69E6 D9 69       >                dw      last_NFA            // Link to previous definition Name
1340+ 69E8             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1340+ 69E8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1340+ 69E8 ~           >
1340+ 69E8 ~           >
1340+ 69E8             >                endif           ; ok        // for other definitions it "points" the correct handler
1340+ 69E8             >                // Use of "; ok" to suppress "warning[fwdref]"
1340+ 69E8             >
1340+ 69E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1341+ 69E8              Two_Plus:
1342+ 69E8 E1                           pop     hl
1343+ 69E9 23                           inc     hl
1344+ 69EA 23                           inc     hl
1345+ 69EB
1346+ 69EB                              psh1
1346+ 69EB E5          >                push    hl
1346+ 69EC DD E9       >                jp      (ix)
1347+ 69EE
1348+ 69EE              //  ______________________________________________________________________
1349+ 69EE              //
1350+ 69EE              // cell+        a1 -- a2
1351+ 69EE              // increment by 2 top of stack
1352+ 69EE                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1352+ 69EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1352+ 69EE             >
1352+ 69EE             >                // dummy db directives used to calculate length of namec
1352+ 69EE 43 45 4C 4C >                db      "CELL+"
1352+ 69F2 2B          >
1352+ 69F3             >len_NFA         defl    $ - temp_NFA
1352+ 69F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1352+ 69EE             >
1352+ 69EE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1352+ 69EF 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1352+ 69F3 2B          >
1352+ 69F4             >                org     $-1                 // alter last byte of Name just above to set
1352+ 69F3 AB          >                db      {b $} | END_BIT     // msb as name end
1352+ 69F4             >
1352+ 69F4 E3 69       >                dw      last_NFA            // Link to previous definition Name
1352+ 69F6             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1352+ 69F6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1352+ 69F6 ~           >
1352+ 69F6 ~           >
1352+ 69F6             >                endif           ; ok        // for other definitions it "points" the correct handler
1352+ 69F6             >                // Use of "; ok" to suppress "warning[fwdref]"
1352+ 69F6             >
1352+ 69F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1353+ 69F6 C3 E8 69                     jp      Two_Plus
1354+ 69F9
1355+ 69F9              //  ______________________________________________________________________
1356+ 69F9              //
1357+ 69F9              // align        a1 -- a2
1358+ 69F9              // align memory : not used
1359+ 69F9              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1360+ 69F9              //            next
1361+ 69F9
1362+ 69F9              //  ______________________________________________________________________
1363+ 69F9              //
1364+ 69F9              // cell-        a1 -- a2
1365+ 69F9              // decrement by 2 top of stack
1366+ 69F9                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1366+ 69F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1366+ 69F9             >
1366+ 69F9             >                // dummy db directives used to calculate length of namec
1366+ 69F9 43 45 4C 4C >                db      "CELL-"
1366+ 69FD 2D          >
1366+ 69FE             >len_NFA         defl    $ - temp_NFA
1366+ 69FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1366+ 69F9             >
1366+ 69F9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1366+ 69FA 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1366+ 69FE 2D          >
1366+ 69FF             >                org     $-1                 // alter last byte of Name just above to set
1366+ 69FE AD          >                db      {b $} | END_BIT     // msb as name end
1366+ 69FF             >
1366+ 69FF EE 69       >                dw      last_NFA            // Link to previous definition Name
1366+ 6A01             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1366+ 6A01 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1366+ 6A01 ~           >
1366+ 6A01 ~           >
1366+ 6A01             >                endif           ; ok        // for other definitions it "points" the correct handler
1366+ 6A01             >                // Use of "; ok" to suppress "warning[fwdref]"
1366+ 6A01             >
1366+ 6A01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1367+ 6A01              CellMinus:
1368+ 6A01 E1                           pop     hl
1369+ 6A02 2B                           dec     hl
1370+ 6A03 2B                           dec     hl
1371+ 6A04
1372+ 6A04                              psh1
1372+ 6A04 E5          >                push    hl
1372+ 6A05 DD E9       >                jp      (ix)
1373+ 6A07
1374+ 6A07              //  ______________________________________________________________________
1375+ 6A07              //
1376+ 6A07              // 2-           a1 -- a2
1377+ 6A07              // decrement by 2 top of stack
1378+ 6A07                              New_Def TWO_MINUS, "2-", is_code, is_normal
1378+ 6A07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1378+ 6A07             >
1378+ 6A07             >                // dummy db directives used to calculate length of namec
1378+ 6A07 32 2D       >                db      "2-"
1378+ 6A09             >len_NFA         defl    $ - temp_NFA
1378+ 6A09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1378+ 6A07             >
1378+ 6A07 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1378+ 6A08 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1378+ 6A0A             >                org     $-1                 // alter last byte of Name just above to set
1378+ 6A09 AD          >                db      {b $} | END_BIT     // msb as name end
1378+ 6A0A             >
1378+ 6A0A F9 69       >                dw      last_NFA            // Link to previous definition Name
1378+ 6A0C             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1378+ 6A0C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1378+ 6A0C ~           >
1378+ 6A0C ~           >
1378+ 6A0C             >                endif           ; ok        // for other definitions it "points" the correct handler
1378+ 6A0C             >                // Use of "; ok" to suppress "warning[fwdref]"
1378+ 6A0C             >
1378+ 6A0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1379+ 6A0C C3 01 6A                     jp      CellMinus
1380+ 6A0F
1381+ 6A0F              //  ______________________________________________________________________
1382+ 6A0F              //
1383+ 6A0F              // negate       n1 -- n2
1384+ 6A0F              // change the sign of number
1385+ 6A0F                              New_Def MINUS, "NEGATE", is_code, is_normal
1385+ 6A0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1385+ 6A0F             >
1385+ 6A0F             >                // dummy db directives used to calculate length of namec
1385+ 6A0F 4E 45 47 41 >                db      "NEGATE"
1385+ 6A13 54 45       >
1385+ 6A15             >len_NFA         defl    $ - temp_NFA
1385+ 6A15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1385+ 6A0F             >
1385+ 6A0F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1385+ 6A10 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1385+ 6A14 54 45       >
1385+ 6A16             >                org     $-1                 // alter last byte of Name just above to set
1385+ 6A15 C5          >                db      {b $} | END_BIT     // msb as name end
1385+ 6A16             >
1385+ 6A16 07 6A       >                dw      last_NFA            // Link to previous definition Name
1385+ 6A18             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1385+ 6A18 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1385+ 6A18 ~           >
1385+ 6A18 ~           >
1385+ 6A18             >                endif           ; ok        // for other definitions it "points" the correct handler
1385+ 6A18             >                // Use of "; ok" to suppress "warning[fwdref]"
1385+ 6A18             >
1385+ 6A18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1386+ 6A18 21 00 00                     ld      hl, 0               // subtract from 0
1387+ 6A1B D1                           pop     de
1388+ 6A1C B7                           or      a
1389+ 6A1D ED 52                        sbc     hl, de
1390+ 6A1F
1391+ 6A1F                              psh1
1391+ 6A1F E5          >                push    hl
1391+ 6A20 DD E9       >                jp      (ix)
1392+ 6A22
1393+ 6A22              //  ______________________________________________________________________
1394+ 6A22              //
1395+ 6A22              // dnegate      d1 -- d2
1396+ 6A22              // change the sign of a double number
1397+ 6A22                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1397+ 6A22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1397+ 6A22             >
1397+ 6A22             >                // dummy db directives used to calculate length of namec
1397+ 6A22 44 4E 45 47 >                db      "DNEGATE"
1397+ 6A26 41 54 45    >
1397+ 6A29             >len_NFA         defl    $ - temp_NFA
1397+ 6A29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1397+ 6A22             >
1397+ 6A22 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1397+ 6A23 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1397+ 6A27 41 54 45    >
1397+ 6A2A             >                org     $-1                 // alter last byte of Name just above to set
1397+ 6A29 C5          >                db      {b $} | END_BIT     // msb as name end
1397+ 6A2A             >
1397+ 6A2A 0F 6A       >                dw      last_NFA            // Link to previous definition Name
1397+ 6A2C             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1397+ 6A2C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1397+ 6A2C ~           >
1397+ 6A2C ~           >
1397+ 6A2C             >                endif           ; ok        // for other definitions it "points" the correct handler
1397+ 6A2C             >                // Use of "; ok" to suppress "warning[fwdref]"
1397+ 6A2C             >
1397+ 6A2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1398+ 6A2C D9                           exx
1399+ 6A2D C1                           pop     bc                  // d1.H
1400+ 6A2E D1                           pop     de                  // d1.L
1401+ 6A2F AF                           xor     a
1402+ 6A30 67                           ld      h, a
1403+ 6A31 6F                           ld      l, a
1404+ 6A32 ED 52                        sbc     hl, de              // subtact from zero
1405+ 6A34 E5                           push    hl                  // > d2-L
1406+ 6A35 67                           ld      h, a
1407+ 6A36 6F                           ld      l, a
1408+ 6A37 ED 42                        sbc     hl, bc              // subtract from zero with carry
1409+ 6A39                                                          // > d2-H
1410+ 6A39 E5                           push    hl
1411+ 6A3A D9                           exx
1412+ 6A3B                              next
1412+ 6A3B DD E9       >                jp      (ix)
1413+ 6A3D
1414+ 6A3D              //  ______________________________________________________________________
1415+ 6A3D              //
1416+ 6A3D              // over         n1 n2 -- n1 n2 n1
1417+ 6A3D              // copy the second value of stack and put it on top.
1418+ 6A3D                              New_Def OVER, "OVER", is_code, is_normal
1418+ 6A3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1418+ 6A3D             >
1418+ 6A3D             >                // dummy db directives used to calculate length of namec
1418+ 6A3D 4F 56 45 52 >                db      "OVER"
1418+ 6A41             >len_NFA         defl    $ - temp_NFA
1418+ 6A41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1418+ 6A3D             >
1418+ 6A3D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1418+ 6A3E 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1418+ 6A42             >                org     $-1                 // alter last byte of Name just above to set
1418+ 6A41 D2          >                db      {b $} | END_BIT     // msb as name end
1418+ 6A42             >
1418+ 6A42 22 6A       >                dw      last_NFA            // Link to previous definition Name
1418+ 6A44             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1418+ 6A44 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1418+ 6A44 ~           >
1418+ 6A44 ~           >
1418+ 6A44             >                endif           ; ok        // for other definitions it "points" the correct handler
1418+ 6A44             >                // Use of "; ok" to suppress "warning[fwdref]"
1418+ 6A44             >
1418+ 6A44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1419+ 6A44 D1                           pop     de                  //   n2
1420+ 6A45 E1                           pop     hl                  // < n1
1421+ 6A46 E5                           push    hl                  // > n1
1422+ 6A47 D5                           push    de                  // > n2
1423+ 6A48 E5                           push    hl                  // > n1
1424+ 6A49                              next
1424+ 6A49 DD E9       >                jp      (ix)
1425+ 6A4B
1426+ 6A4B              //  ______________________________________________________________________
1427+ 6A4B              //
1428+ 6A4B              // drop         n1 --
1429+ 6A4B              // drops the top of stack
1430+ 6A4B                              New_Def DROP, "DROP", is_code, is_normal
1430+ 6A4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1430+ 6A4B             >
1430+ 6A4B             >                // dummy db directives used to calculate length of namec
1430+ 6A4B 44 52 4F 50 >                db      "DROP"
1430+ 6A4F             >len_NFA         defl    $ - temp_NFA
1430+ 6A4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1430+ 6A4B             >
1430+ 6A4B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1430+ 6A4C 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1430+ 6A50             >                org     $-1                 // alter last byte of Name just above to set
1430+ 6A4F D0          >                db      {b $} | END_BIT     // msb as name end
1430+ 6A50             >
1430+ 6A50 3D 6A       >                dw      last_NFA            // Link to previous definition Name
1430+ 6A52             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1430+ 6A52 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1430+ 6A52 ~           >
1430+ 6A52 ~           >
1430+ 6A52             >                endif           ; ok        // for other definitions it "points" the correct handler
1430+ 6A52             >                // Use of "; ok" to suppress "warning[fwdref]"
1430+ 6A52             >
1430+ 6A52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1431+ 6A52 E1                           pop     hl                  // < n1 and discard previous TOS
1432+ 6A53                              next
1432+ 6A53 DD E9       >                jp      (ix)
1433+ 6A55
1434+ 6A55              //  ______________________________________________________________________
1435+ 6A55              //
1436+ 6A55              // nip          n1 n2 -- n2
1437+ 6A55              // drops the second elemento on the stack
1438+ 6A55                              New_Def NIP, "NIP", is_code, is_normal
1438+ 6A55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1438+ 6A55             >
1438+ 6A55             >                // dummy db directives used to calculate length of namec
1438+ 6A55 4E 49 50    >                db      "NIP"
1438+ 6A58             >len_NFA         defl    $ - temp_NFA
1438+ 6A58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1438+ 6A55             >
1438+ 6A55 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1438+ 6A56 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1438+ 6A59             >                org     $-1                 // alter last byte of Name just above to set
1438+ 6A58 D0          >                db      {b $} | END_BIT     // msb as name end
1438+ 6A59             >
1438+ 6A59 4B 6A       >                dw      last_NFA            // Link to previous definition Name
1438+ 6A5B             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1438+ 6A5B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1438+ 6A5B ~           >
1438+ 6A5B ~           >
1438+ 6A5B             >                endif           ; ok        // for other definitions it "points" the correct handler
1438+ 6A5B             >                // Use of "; ok" to suppress "warning[fwdref]"
1438+ 6A5B             >
1438+ 6A5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1439+ 6A5B
1440+ 6A5B E1                           pop     hl                  // < n1 discarded
1441+ 6A5C E3                           ex      (sp), hl
1442+ 6A5D                              next
1442+ 6A5D DD E9       >                jp      (ix)
1443+ 6A5F
1444+ 6A5F              //  ______________________________________________________________________
1445+ 6A5F              //
1446+ 6A5F              // tuck         n1 n2 -- n2 n1 n2
1447+ 6A5F              // copy the top element after the second.
1448+ 6A5F                              New_Def TUCK, "TUCK", is_code, is_normal
1448+ 6A5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1448+ 6A5F             >
1448+ 6A5F             >                // dummy db directives used to calculate length of namec
1448+ 6A5F 54 55 43 4B >                db      "TUCK"
1448+ 6A63             >len_NFA         defl    $ - temp_NFA
1448+ 6A63             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1448+ 6A5F             >
1448+ 6A5F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1448+ 6A60 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1448+ 6A64             >                org     $-1                 // alter last byte of Name just above to set
1448+ 6A63 CB          >                db      {b $} | END_BIT     // msb as name end
1448+ 6A64             >
1448+ 6A64 55 6A       >                dw      last_NFA            // Link to previous definition Name
1448+ 6A66             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1448+ 6A66 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1448+ 6A66 ~           >
1448+ 6A66 ~           >
1448+ 6A66             >                endif           ; ok        // for other definitions it "points" the correct handler
1448+ 6A66             >                // Use of "; ok" to suppress "warning[fwdref]"
1448+ 6A66             >
1448+ 6A66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1449+ 6A66 E1                           pop     hl
1450+ 6A67 D1                           pop     de                  // < n1
1451+ 6A68 E5                           push    hl                  // > n2  and TOS
1452+ 6A69 D5                           push    de                  // > n1
1453+ 6A6A E5                           push    hl
1454+ 6A6B                              next
1454+ 6A6B DD E9       >                jp      (ix)
1455+ 6A6D
1456+ 6A6D              //  ______________________________________________________________________
1457+ 6A6D              //
1458+ 6A6D              // swap         n1 n2 -- n2 n1
1459+ 6A6D              // swaps the two values on top of stack
1460+ 6A6D                              New_Def SWAP, "SWAP", is_code, is_normal
1460+ 6A6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1460+ 6A6D             >
1460+ 6A6D             >                // dummy db directives used to calculate length of namec
1460+ 6A6D 53 57 41 50 >                db      "SWAP"
1460+ 6A71             >len_NFA         defl    $ - temp_NFA
1460+ 6A71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1460+ 6A6D             >
1460+ 6A6D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1460+ 6A6E 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1460+ 6A72             >                org     $-1                 // alter last byte of Name just above to set
1460+ 6A71 D0          >                db      {b $} | END_BIT     // msb as name end
1460+ 6A72             >
1460+ 6A72 5F 6A       >                dw      last_NFA            // Link to previous definition Name
1460+ 6A74             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1460+ 6A74 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1460+ 6A74 ~           >
1460+ 6A74 ~           >
1460+ 6A74             >                endif           ; ok        // for other definitions it "points" the correct handler
1460+ 6A74             >                // Use of "; ok" to suppress "warning[fwdref]"
1460+ 6A74             >
1460+ 6A74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1461+ 6A74 E1                           pop     hl                  // < n1
1462+ 6A75 E3                           ex      (sp),hl             // > n2
1463+ 6A76 E5                           push    hl                  // copy n1 to TOS
1464+ 6A77                              next
1464+ 6A77 DD E9       >                jp      (ix)
1465+ 6A79
1466+ 6A79              //  ______________________________________________________________________
1467+ 6A79              //
1468+ 6A79              // dup         n -- n n
1469+ 6A79              // duplicates the top value of stack
1470+ 6A79                              New_Def DUP, "DUP", is_code, is_normal
1470+ 6A79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1470+ 6A79             >
1470+ 6A79             >                // dummy db directives used to calculate length of namec
1470+ 6A79 44 55 50    >                db      "DUP"
1470+ 6A7C             >len_NFA         defl    $ - temp_NFA
1470+ 6A7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1470+ 6A79             >
1470+ 6A79 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1470+ 6A7A 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1470+ 6A7D             >                org     $-1                 // alter last byte of Name just above to set
1470+ 6A7C D0          >                db      {b $} | END_BIT     // msb as name end
1470+ 6A7D             >
1470+ 6A7D 6D 6A       >                dw      last_NFA            // Link to previous definition Name
1470+ 6A7F             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1470+ 6A7F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1470+ 6A7F ~           >
1470+ 6A7F ~           >
1470+ 6A7F             >                endif           ; ok        // for other definitions it "points" the correct handler
1470+ 6A7F             >                // Use of "; ok" to suppress "warning[fwdref]"
1470+ 6A7F             >
1470+ 6A7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1471+ 6A7F E1                           pop     hl
1472+ 6A80 E5                           push    hl                  // > n duplicate TOS
1473+ 6A81 E5                           push    hl
1474+ 6A82                              next
1474+ 6A82 DD E9       >                jp      (ix)
1475+ 6A84
1476+ 6A84              //  ______________________________________________________________________
1477+ 6A84              //
1478+ 6A84              // rot         n1 n2 n3 -- n2 n3 n1
1479+ 6A84              // Rotates the 3 top values of stack by picking the 3rd in access-order
1480+ 6A84              // and putting it on top. The other two are shifted down one place.
1481+ 6A84                              New_Def ROT, "ROT", is_code, is_normal
1481+ 6A84             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1481+ 6A84             >
1481+ 6A84             >                // dummy db directives used to calculate length of namec
1481+ 6A84 52 4F 54    >                db      "ROT"
1481+ 6A87             >len_NFA         defl    $ - temp_NFA
1481+ 6A87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1481+ 6A84             >
1481+ 6A84 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1481+ 6A85 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1481+ 6A88             >                org     $-1                 // alter last byte of Name just above to set
1481+ 6A87 D4          >                db      {b $} | END_BIT     // msb as name end
1481+ 6A88             >
1481+ 6A88 79 6A       >                dw      last_NFA            // Link to previous definition Name
1481+ 6A8A             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1481+ 6A8A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1481+ 6A8A ~           >
1481+ 6A8A ~           >
1481+ 6A8A             >                endif           ; ok        // for other definitions it "points" the correct handler
1481+ 6A8A             >                // Use of "; ok" to suppress "warning[fwdref]"
1481+ 6A8A             >
1481+ 6A8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1482+ 6A8A D1                           pop     de                  // < n3
1483+ 6A8B E1                           pop     hl                  // < n2
1484+ 6A8C E3                           ex      (sp),hl             // > n2 < n1
1485+ 6A8D D5                           push    de                  // > n3
1486+ 6A8E E5                           push    hl                  // copy n1 to TOS
1487+ 6A8F                              next
1487+ 6A8F DD E9       >                jp      (ix)
1488+ 6A91
1489+ 6A91              //  ______________________________________________________________________
1490+ 6A91              //
1491+ 6A91              // -rot         n1 n2 n3 -- n3 n1 n2
1492+ 6A91              // Rotates the 3 top values of stack by picking the 1st in access-order
1493+ 6A91              // and putting back to 3rd place. The other two are shifted down one place.
1494+ 6A91                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1494+ 6A91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1494+ 6A91             >
1494+ 6A91             >                // dummy db directives used to calculate length of namec
1494+ 6A91 2D 52 4F 54 >                db      "-ROT"
1494+ 6A95             >len_NFA         defl    $ - temp_NFA
1494+ 6A95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1494+ 6A91             >
1494+ 6A91 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1494+ 6A92 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1494+ 6A96             >                org     $-1                 // alter last byte of Name just above to set
1494+ 6A95 D4          >                db      {b $} | END_BIT     // msb as name end
1494+ 6A96             >
1494+ 6A96 84 6A       >                dw      last_NFA            // Link to previous definition Name
1494+ 6A98             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1494+ 6A98 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1494+ 6A98 ~           >
1494+ 6A98 ~           >
1494+ 6A98             >                endif           ; ok        // for other definitions it "points" the correct handler
1494+ 6A98             >                // Use of "; ok" to suppress "warning[fwdref]"
1494+ 6A98             >
1494+ 6A98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1495+ 6A98 E1                           pop     hl                  // < n3
1496+ 6A99 D1                           pop     de                  // < n2
1497+ 6A9A E3                           ex      (sp),hl             // > n3 < n1
1498+ 6A9B E5                           push    hl                  // > n1
1499+ 6A9C D5                           push    de                  // copy n3 to TOS
1500+ 6A9D                              next
1500+ 6A9D DD E9       >                jp      (ix)
1501+ 6A9F
1502+ 6A9F              //  ______________________________________________________________________
1503+ 6A9F              //
1504+ 6A9F              // pick        n1 -- nx
1505+ 6A9F              // picks the nth element from TOS
1506+ 6A9F                              New_Def PICK, "PICK", is_code, is_normal
1506+ 6A9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1506+ 6A9F             >
1506+ 6A9F             >                // dummy db directives used to calculate length of namec
1506+ 6A9F 50 49 43 4B >                db      "PICK"
1506+ 6AA3             >len_NFA         defl    $ - temp_NFA
1506+ 6AA3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1506+ 6A9F             >
1506+ 6A9F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1506+ 6AA0 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1506+ 6AA4             >                org     $-1                 // alter last byte of Name just above to set
1506+ 6AA3 CB          >                db      {b $} | END_BIT     // msb as name end
1506+ 6AA4             >
1506+ 6AA4 91 6A       >                dw      last_NFA            // Link to previous definition Name
1506+ 6AA6             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1506+ 6AA6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1506+ 6AA6 ~           >
1506+ 6AA6 ~           >
1506+ 6AA6             >                endif           ; ok        // for other definitions it "points" the correct handler
1506+ 6AA6             >                // Use of "; ok" to suppress "warning[fwdref]"
1506+ 6AA6             >
1506+ 6AA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1507+ 6AA6 E1                           pop     hl                  // take TOS as index
1508+ 6AA7 29                           add     hl, hl              // as cells
1509+ 6AA8 39                           add     hl, sp              // from Stack Pointer
1510+ 6AA9 7E                           ld      a, (hl)             // replace TOS
1511+ 6AAA 23                           inc     hl
1512+ 6AAB 66                           ld      h, (hl)
1513+ 6AAC 6F                           ld      l, a
1514+ 6AAD
1515+ 6AAD                              psh1
1515+ 6AAD E5          >                push    hl
1515+ 6AAE DD E9       >                jp      (ix)
1516+ 6AB0
1517+ 6AB0
1518+ 6AB0              //  ______________________________________________________________________
1519+ 6AB0              //
1520+ 6AB0              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1521+ 6AB0              // picks the nth element from TOS
1522+ 6AB0              //              New_Def ROLL, "ROLL", is_code, is_normal
1523+ 6AB0              //              exx                     // we need all registers free
1524+ 6AB0              //              pop     hl              // number of cells to roll
1525+ 6AB0              //              ld      a, h
1526+ 6AB0              //              or       l
1527+ 6AB0              //              jr      z, Roll_Zero
1528+ 6AB0              //                  add     hl, hl              // number of bytes to move
1529+ 6AB0              //                  ld      b, h
1530+ 6AB0              //                  ld      c, l
1531+ 6AB0              //                  add     hl, sp          // address of n1
1532+ 6AB0              //                  ld      a, (hl)         // take n1 into a and a,
1533+ 6AB0              //                  inc     hl
1534+ 6AB0              //                  ex      af, af'
1535+ 6AB0              //                  ld      a, (hl)         // take n1 into a and a,
1536+ 6AB0              //                  ld      d, h
1537+ 6AB0              //                  ld      e, l
1538+ 6AB0              //                  dec     hl
1539+ 6AB0              //                  dec     hl
1540+ 6AB0              //                  lddr
1541+ 6AB0              //                  ex      de, hl
1542+ 6AB0              //                  ld      (hl), a
1543+ 6AB0              //                  dec     hl
1544+ 6AB0              //                  ex      af, af'
1545+ 6AB0              //                  ld      (hl), a
1546+ 6AB0              //Roll_Zero:
1547+ 6AB0              //              exx
1548+ 6AB0              //              next
1549+ 6AB0
1550+ 6AB0
1551+ 6AB0              //  ______________________________________________________________________
1552+ 6AB0              //
1553+ 6AB0              // 2over        d1 d2 -- d1 d2 d1
1554+ 6AB0              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1555+ 6AB0              // copy the second double of stack and put on top.
1556+ 6AB0              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1557+ 6AB0              //
1558+ 6AB0              //              ld      hl, 7
1559+ 6AB0              //              add     hl, sp
1560+ 6AB0              //              ld      d, (hl)
1561+ 6AB0              //              dec     hl
1562+ 6AB0              //              ld      e, (hl)             // d1-L
1563+ 6AB0              //              push    de
1564+ 6AB0              //              dec     hl
1565+ 6AB0              //              ld      d, (hl)
1566+ 6AB0              //              dec     hl
1567+ 6AB0              //              ld      e, (hl)             // d1-H
1568+ 6AB0              //              push    de
1569+ 6AB0              //              next
1570+ 6AB0
1571+ 6AB0              //  ______________________________________________________________________
1572+ 6AB0              //
1573+ 6AB0              // 2drop        d --
1574+ 6AB0              //              n1 n2 --
1575+ 6AB0              // drops the top double from stack
1576+ 6AB0                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1576+ 6AB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1576+ 6AB0             >
1576+ 6AB0             >                // dummy db directives used to calculate length of namec
1576+ 6AB0 32 44 52 4F >                db      "2DROP"
1576+ 6AB4 50          >
1576+ 6AB5             >len_NFA         defl    $ - temp_NFA
1576+ 6AB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1576+ 6AB0             >
1576+ 6AB0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1576+ 6AB1 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1576+ 6AB5 50          >
1576+ 6AB6             >                org     $-1                 // alter last byte of Name just above to set
1576+ 6AB5 D0          >                db      {b $} | END_BIT     // msb as name end
1576+ 6AB6             >
1576+ 6AB6 9F 6A       >                dw      last_NFA            // Link to previous definition Name
1576+ 6AB8             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1576+ 6AB8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1576+ 6AB8 ~           >
1576+ 6AB8 ~           >
1576+ 6AB8             >                endif           ; ok        // for other definitions it "points" the correct handler
1576+ 6AB8             >                // Use of "; ok" to suppress "warning[fwdref]"
1576+ 6AB8             >
1576+ 6AB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1577+ 6AB8 E1                           pop     hl
1578+ 6AB9 E1                           pop     hl
1579+ 6ABA                              next
1579+ 6ABA DD E9       >                jp      (ix)
1580+ 6ABC
1581+ 6ABC              //  ______________________________________________________________________
1582+ 6ABC              //
1583+ 6ABC              // 2nip         d1 d2 -- d2
1584+ 6ABC              //              n1 n2 n3 n4 -- n3 n4
1585+ 6ABC              // drops the second double on the stack
1586+ 6ABC              //              New_Def TWO_NIP, 4, "2nip"
1587+ 6ABC              //              ...
1588+ 6ABC
1589+ 6ABC              //  ______________________________________________________________________
1590+ 6ABC              //
1591+ 6ABC              // 2tuck         d1 d2 -- d2 d1 d2
1592+ 6ABC              // copy the top element after the second.
1593+ 6ABC              //              New_Def TWO_TUCK, 5, "2tuck"
1594+ 6ABC              //              ...
1595+ 6ABC
1596+ 6ABC              //  ______________________________________________________________________
1597+ 6ABC              //
1598+ 6ABC              // 2swap         d1 d2 -- d2 d1
1599+ 6ABC              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1600+ 6ABC              // swaps the two doubles on top of stack
1601+ 6ABC                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1601+ 6ABC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1601+ 6ABC             >
1601+ 6ABC             >                // dummy db directives used to calculate length of namec
1601+ 6ABC 32 53 57 41 >                db      "2SWAP"
1601+ 6AC0 50          >
1601+ 6AC1             >len_NFA         defl    $ - temp_NFA
1601+ 6AC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1601+ 6ABC             >
1601+ 6ABC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1601+ 6ABD 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1601+ 6AC1 50          >
1601+ 6AC2             >                org     $-1                 // alter last byte of Name just above to set
1601+ 6AC1 D0          >                db      {b $} | END_BIT     // msb as name end
1601+ 6AC2             >
1601+ 6AC2 B0 6A       >                dw      last_NFA            // Link to previous definition Name
1601+ 6AC4             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1601+ 6AC4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1601+ 6AC4 ~           >
1601+ 6AC4 ~           >
1601+ 6AC4             >                endif           ; ok        // for other definitions it "points" the correct handler
1601+ 6AC4             >                // Use of "; ok" to suppress "warning[fwdref]"
1601+ 6AC4             >
1601+ 6AC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1602+ 6AC4 F1                           pop     af                  //   d2-H
1603+ 6AC5 E1                           pop     hl                  // < d2-L
1604+ 6AC6 D1                           pop     de                  // < d1-H
1605+ 6AC7 E3                           ex      (sp), hl            // < d1-L > d2-L
1606+ 6AC8 F5                           push    af                  // > d2-H
1607+ 6AC9 E5                           push    hl                  // > d1-L
1608+ 6ACA D5                           push    de
1609+ 6ACB
1610+ 6ACB                              next
1610+ 6ACB DD E9       >                jp      (ix)
1611+ 6ACD
1612+ 6ACD              //  ______________________________________________________________________
1613+ 6ACD              //
1614+ 6ACD              // 2dup         d -- d d
1615+ 6ACD              //              n1 n2 -- n1 n2 n1 n2
1616+ 6ACD              // duplicates the top double of stack
1617+ 6ACD                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1617+ 6ACD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1617+ 6ACD             >
1617+ 6ACD             >                // dummy db directives used to calculate length of namec
1617+ 6ACD 32 44 55 50 >                db      "2DUP"
1617+ 6AD1             >len_NFA         defl    $ - temp_NFA
1617+ 6AD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1617+ 6ACD             >
1617+ 6ACD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1617+ 6ACE 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1617+ 6AD2             >                org     $-1                 // alter last byte of Name just above to set
1617+ 6AD1 D0          >                db      {b $} | END_BIT     // msb as name end
1617+ 6AD2             >
1617+ 6AD2 BC 6A       >                dw      last_NFA            // Link to previous definition Name
1617+ 6AD4             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1617+ 6AD4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1617+ 6AD4 ~           >
1617+ 6AD4 ~           >
1617+ 6AD4             >                endif           ; ok        // for other definitions it "points" the correct handler
1617+ 6AD4             >                // Use of "; ok" to suppress "warning[fwdref]"
1617+ 6AD4             >
1617+ 6AD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1618+ 6AD4 E1                           pop     hl                  // < d-H
1619+ 6AD5 D1                           pop     de                  // < d-L
1620+ 6AD6 D5                           push    de                  // < d-L
1621+ 6AD7 E5                           push    hl                  // > d-H
1622+ 6AD8 D5                           push    de                  // > d-L
1623+ 6AD9 E5                           push    hl                  // > d-H
1624+ 6ADA                              next
1624+ 6ADA DD E9       >                jp      (ix)
1625+ 6ADC
1626+ 6ADC              //  ______________________________________________________________________
1627+ 6ADC              //
1628+ 6ADC              // 2rot         d1 d2 d3 -- d2 d3 d1
1629+ 6ADC              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1630+ 6ADC              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1631+ 6ADC              // and putting it on top. The other two are shifted down one place.
1632+ 6ADC              //              New_Def TWO?ROT, 4, "2rot"
1633+ 6ADC              //              ...
1634+ 6ADC              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1635+ 6ADC              //
1636+ 6ADC              //      d3  |d2  |d1  |
1637+ 6ADC              //      h l |h l |h l |
1638+ 6ADC              // SP   LHED|LHED|LHED|
1639+ 6ADC              // SP  +0123|4567|89ab|
1640+ 6ADC              //              ld      hl, $000B
1641+ 6ADC              //              add     hl, sp
1642+ 6ADC              //              ld      d, (hl)
1643+ 6ADC              //              dec     hl
1644+ 6ADC              //              ld      e, (hl)
1645+ 6ADC              //              dec     hl
1646+ 6ADC              //              push    de
1647+ 6ADC              //              ld      d, (hl)
1648+ 6ADC              //              dec     hl
1649+ 6ADC              //              ld      e, (hl)
1650+ 6ADC              //              dec     hl
1651+ 6ADC              //              push    de
1652+ 6ADC
1653+ 6ADC              //      d1  |d3  |d2  |d1  |
1654+ 6ADC              //      h l |h l |h l |h l |
1655+ 6ADC              // SP   LHED|LHED|LHED|LHED|
1656+ 6ADC              // SP       +0123|4567|89ab|
1657+ 6ADC
1658+ 6ADC              //              ld      d, h
1659+ 6ADC              //              ld      e, l
1660+ 6ADC              //              inc     de
1661+ 6ADC              //              inc     de
1662+ 6ADC              //              inc     de
1663+ 6ADC              //              inc     de
1664+ 6ADC              //              push    bc
1665+ 6ADC              //              ld      bc, $000C
1666+ 6ADC              //              lddr
1667+ 6ADC              //              pop     bc
1668+ 6ADC              //              pop     de
1669+ 6ADC              //              pop     de
1670+ 6ADC              //
1671+ 6ADC              //              next
1672+ 6ADC
1673+ 6ADC
1674+ 6ADC              //  ______________________________________________________________________
1675+ 6ADC              //
1676+ 6ADC              // +!           n a --
1677+ 6ADC              // Sums to the content of address a the number n.
1678+ 6ADC              // It is the same of  a @ n + a !
1679+ 6ADC                              New_Def PLUSSTORE, "+!", is_code, is_normal
1679+ 6ADC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1679+ 6ADC             >
1679+ 6ADC             >                // dummy db directives used to calculate length of namec
1679+ 6ADC 2B 21       >                db      "+!"
1679+ 6ADE             >len_NFA         defl    $ - temp_NFA
1679+ 6ADE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1679+ 6ADC             >
1679+ 6ADC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1679+ 6ADD 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1679+ 6ADF             >                org     $-1                 // alter last byte of Name just above to set
1679+ 6ADE A1          >                db      {b $} | END_BIT     // msb as name end
1679+ 6ADF             >
1679+ 6ADF CD 6A       >                dw      last_NFA            // Link to previous definition Name
1679+ 6AE1             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1679+ 6AE1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1679+ 6AE1 ~           >
1679+ 6AE1 ~           >
1679+ 6AE1             >                endif           ; ok        // for other definitions it "points" the correct handler
1679+ 6AE1             >                // Use of "; ok" to suppress "warning[fwdref]"
1679+ 6AE1             >
1679+ 6AE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1680+ 6AE1 E1                           pop     hl                  // hl is the address
1681+ 6AE2 D1                           pop     de                  // de is the number
1682+ 6AE3 7E                           ld      a, (hl)
1683+ 6AE4 83                           add     e
1684+ 6AE5 77                           ld      (hl), a
1685+ 6AE6 23                           inc     hl
1686+ 6AE7 7E                           ld      a, (hl)
1687+ 6AE8 8A                           adc     d
1688+ 6AE9 77                           ld      (hl), a
1689+ 6AEA
1690+ 6AEA                              next
1690+ 6AEA DD E9       >                jp      (ix)
1691+ 6AEC
1692+ 6AEC              //  ______________________________________________________________________
1693+ 6AEC              //
1694+ 6AEC              // toggle       a n --
1695+ 6AEC              // Complements (xor) the byte at addrress  a  with the model n.
1696+ 6AEC                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1696+ 6AEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1696+ 6AEC             >
1696+ 6AEC             >                // dummy db directives used to calculate length of namec
1696+ 6AEC 54 4F 47 47 >                db      "TOGGLE"
1696+ 6AF0 4C 45       >
1696+ 6AF2             >len_NFA         defl    $ - temp_NFA
1696+ 6AF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1696+ 6AEC             >
1696+ 6AEC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1696+ 6AED 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1696+ 6AF1 4C 45       >
1696+ 6AF3             >                org     $-1                 // alter last byte of Name just above to set
1696+ 6AF2 C5          >                db      {b $} | END_BIT     // msb as name end
1696+ 6AF3             >
1696+ 6AF3 DC 6A       >                dw      last_NFA            // Link to previous definition Name
1696+ 6AF5             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1696+ 6AF5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1696+ 6AF5 ~           >
1696+ 6AF5 ~           >
1696+ 6AF5             >                endif           ; ok        // for other definitions it "points" the correct handler
1696+ 6AF5             >                // Use of "; ok" to suppress "warning[fwdref]"
1696+ 6AF5             >
1696+ 6AF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1697+ 6AF5 D1                           pop     de
1698+ 6AF6 E1                           pop     hl
1699+ 6AF7 7E                           ld      a, (hl)
1700+ 6AF8 AB                           xor     e
1701+ 6AF9 77                           ld      (hl), a
1702+ 6AFA
1703+ 6AFA                              next
1703+ 6AFA DD E9       >                jp      (ix)
1704+ 6AFC
1705+ 6AFC              //  ______________________________________________________________________
1706+ 6AFC              //
1707+ 6AFC              // @            a -- n
1708+ 6AFC              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1709+ 6AFC                              New_Def FETCH, "@", is_code, is_normal
1709+ 6AFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1709+ 6AFC             >
1709+ 6AFC             >                // dummy db directives used to calculate length of namec
1709+ 6AFC 40          >                db      "@"
1709+ 6AFD             >len_NFA         defl    $ - temp_NFA
1709+ 6AFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1709+ 6AFC             >
1709+ 6AFC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1709+ 6AFD 40          >                db      "@"               // name string in 7-bit ascii, but
1709+ 6AFE             >                org     $-1                 // alter last byte of Name just above to set
1709+ 6AFD C0          >                db      {b $} | END_BIT     // msb as name end
1709+ 6AFE             >
1709+ 6AFE EC 6A       >                dw      last_NFA            // Link to previous definition Name
1709+ 6B00             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1709+ 6B00 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1709+ 6B00 ~           >
1709+ 6B00 ~           >
1709+ 6B00             >                endif           ; ok        // for other definitions it "points" the correct handler
1709+ 6B00             >                // Use of "; ok" to suppress "warning[fwdref]"
1709+ 6B00             >
1709+ 6B00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1710+ 6B00 E1                           pop     hl
1711+ 6B01 5E                           ld      e, (hl)             // low-byte
1712+ 6B02 23                           inc     hl
1713+ 6B03 56                           ld      d, (hl)             // high-byte
1714+ 6B04 D5                           push    de
1715+ 6B05                              next
1715+ 6B05 DD E9       >                jp      (ix)
1716+ 6B07
1717+ 6B07              //  ______________________________________________________________________
1718+ 6B07              //
1719+ 6B07              // !            n a --
1720+ 6B07              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1721+ 6B07                              New_Def STORE, "!", is_code, is_normal
1721+ 6B07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1721+ 6B07             >
1721+ 6B07             >                // dummy db directives used to calculate length of namec
1721+ 6B07 21          >                db      "!"
1721+ 6B08             >len_NFA         defl    $ - temp_NFA
1721+ 6B08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1721+ 6B07             >
1721+ 6B07 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1721+ 6B08 21          >                db      "!"               // name string in 7-bit ascii, but
1721+ 6B09             >                org     $-1                 // alter last byte of Name just above to set
1721+ 6B08 A1          >                db      {b $} | END_BIT     // msb as name end
1721+ 6B09             >
1721+ 6B09 FC 6A       >                dw      last_NFA            // Link to previous definition Name
1721+ 6B0B             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1721+ 6B0B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1721+ 6B0B ~           >
1721+ 6B0B ~           >
1721+ 6B0B             >                endif           ; ok        // for other definitions it "points" the correct handler
1721+ 6B0B             >                // Use of "; ok" to suppress "warning[fwdref]"
1721+ 6B0B             >
1721+ 6B0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1722+ 6B0B E1                           pop     hl                  // address
1723+ 6B0C D1                           pop     de                  // < n
1724+ 6B0D 73                           ld      (hl), e             // low-byte
1725+ 6B0E 23                           inc     hl
1726+ 6B0F 72                           ld      (hl), d             // high-byte
1727+ 6B10
1728+ 6B10                              next
1728+ 6B10 DD E9       >                jp      (ix)
1729+ 6B12
1730+ 6B12              //  ______________________________________________________________________
1731+ 6B12              //
1732+ 6B12              // c@           a -- c
1733+ 6B12              // fetch a character n from address a
1734+ 6B12                              New_Def CFETCH, "C@", is_code, is_normal
1734+ 6B12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1734+ 6B12             >
1734+ 6B12             >                // dummy db directives used to calculate length of namec
1734+ 6B12 43 40       >                db      "C@"
1734+ 6B14             >len_NFA         defl    $ - temp_NFA
1734+ 6B14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1734+ 6B12             >
1734+ 6B12 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1734+ 6B13 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1734+ 6B15             >                org     $-1                 // alter last byte of Name just above to set
1734+ 6B14 C0          >                db      {b $} | END_BIT     // msb as name end
1734+ 6B15             >
1734+ 6B15 07 6B       >                dw      last_NFA            // Link to previous definition Name
1734+ 6B17             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1734+ 6B17 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1734+ 6B17 ~           >
1734+ 6B17 ~           >
1734+ 6B17             >                endif           ; ok        // for other definitions it "points" the correct handler
1734+ 6B17             >                // Use of "; ok" to suppress "warning[fwdref]"
1734+ 6B17             >
1734+ 6B17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1735+ 6B17 E1                           pop     hl
1736+ 6B18 6E                           ld      l, (hl)             // low-byte
1737+ 6B19 26 00                        ld      h, 0
1738+ 6B1B
1739+ 6B1B                              psh1
1739+ 6B1B E5          >                push    hl
1739+ 6B1C DD E9       >                jp      (ix)
1740+ 6B1E
1741+ 6B1E              //  ______________________________________________________________________
1742+ 6B1E              //
1743+ 6B1E              // c!           c a --
1744+ 6B1E              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1745+ 6B1E                              New_Def CSTORE, "C!", is_code, is_normal
1745+ 6B1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1745+ 6B1E             >
1745+ 6B1E             >                // dummy db directives used to calculate length of namec
1745+ 6B1E 43 21       >                db      "C!"
1745+ 6B20             >len_NFA         defl    $ - temp_NFA
1745+ 6B20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1745+ 6B1E             >
1745+ 6B1E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1745+ 6B1F 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1745+ 6B21             >                org     $-1                 // alter last byte of Name just above to set
1745+ 6B20 A1          >                db      {b $} | END_BIT     // msb as name end
1745+ 6B21             >
1745+ 6B21 12 6B       >                dw      last_NFA            // Link to previous definition Name
1745+ 6B23             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1745+ 6B23 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1745+ 6B23 ~           >
1745+ 6B23 ~           >
1745+ 6B23             >                endif           ; ok        // for other definitions it "points" the correct handler
1745+ 6B23             >                // Use of "; ok" to suppress "warning[fwdref]"
1745+ 6B23             >
1745+ 6B23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1746+ 6B23 E1                           pop     hl                  // < address
1747+ 6B24 D1                           pop     de
1748+ 6B25 73                           ld      (hl), e             // low-byte
1749+ 6B26
1750+ 6B26                              next
1750+ 6B26 DD E9       >                jp      (ix)
1751+ 6B28
1752+ 6B28              //  ______________________________________________________________________
1753+ 6B28              //
1754+ 6B28              // 2@           a -- d
1755+ 6B28              // fetch a 32 bits number d from address a and leaves it on top of the
1756+ 6B28              // stack as two single numbers, high part as top of the stack.
1757+ 6B28              // A double number is normally kept in CPU registers as HLDE.
1758+ 6B28              // On stack a double number is treated as two single numbers
1759+ 6B28              // where BC is on the top of the stack and HL is the second from top,
1760+ 6B28              // so the sign of the number can be checked on top of stack
1761+ 6B28              // and in the stack memory it appears as LHED.
1762+ 6B28                              New_Def TWO_FETCH, "2@", is_code, is_normal
1762+ 6B28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1762+ 6B28             >
1762+ 6B28             >                // dummy db directives used to calculate length of namec
1762+ 6B28 32 40       >                db      "2@"
1762+ 6B2A             >len_NFA         defl    $ - temp_NFA
1762+ 6B2A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1762+ 6B28             >
1762+ 6B28 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1762+ 6B29 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1762+ 6B2B             >                org     $-1                 // alter last byte of Name just above to set
1762+ 6B2A C0          >                db      {b $} | END_BIT     // msb as name end
1762+ 6B2B             >
1762+ 6B2B 1E 6B       >                dw      last_NFA            // Link to previous definition Name
1762+ 6B2D             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1762+ 6B2D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1762+ 6B2D ~           >
1762+ 6B2D ~           >
1762+ 6B2D             >                endif           ; ok        // for other definitions it "points" the correct handler
1762+ 6B2D             >                // Use of "; ok" to suppress "warning[fwdref]"
1762+ 6B2D             >
1762+ 6B2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1763+ 6B2D E1                           pop     hl                  // address
1764+ 6B2E 5E                           ld      e, (hl)             // low-byte
1765+ 6B2F 23                           inc     hl
1766+ 6B30 56                           ld      d, (hl)             // high-byte
1767+ 6B31 23                           inc     hl
1768+ 6B32 7E                           ld      a, (hl)             // low-byte
1769+ 6B33 23                           inc     hl
1770+ 6B34 66                           ld      h, (hl)             // high-byte
1771+ 6B35 6F                           ld      l, a
1772+ 6B36 E5                           push    hl
1773+ 6B37 D5                           push    de
1774+ 6B38                              next
1774+ 6B38 DD E9       >                jp      (ix)
1775+ 6B3A
1776+ 6B3A              //  ______________________________________________________________________
1777+ 6B3A              //
1778+ 6B3A              // 2!           d a --
1779+ 6B3A              // stores a 32 bits number d from address a and leaves it on top of the
1780+ 6B3A              // stack as two single numbers, high part as top of the stack.
1781+ 6B3A              // A double number is normally kept in CPU registers as HLDE.
1782+ 6B3A              // On stack a double number is treated as two single numbers
1783+ 6B3A              // where BC is on the top of the stack and HL is the second from top,
1784+ 6B3A              // so the sign of the number can be checked on top of stack
1785+ 6B3A              // and in the stack memory it appears as LHED.
1786+ 6B3A                              New_Def TWO_STORE, "2!", is_code, is_normal
1786+ 6B3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1786+ 6B3A             >
1786+ 6B3A             >                // dummy db directives used to calculate length of namec
1786+ 6B3A 32 21       >                db      "2!"
1786+ 6B3C             >len_NFA         defl    $ - temp_NFA
1786+ 6B3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1786+ 6B3A             >
1786+ 6B3A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1786+ 6B3B 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1786+ 6B3D             >                org     $-1                 // alter last byte of Name just above to set
1786+ 6B3C A1          >                db      {b $} | END_BIT     // msb as name end
1786+ 6B3D             >
1786+ 6B3D 28 6B       >                dw      last_NFA            // Link to previous definition Name
1786+ 6B3F             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1786+ 6B3F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1786+ 6B3F ~           >
1786+ 6B3F ~           >
1786+ 6B3F             >                endif           ; ok        // for other definitions it "points" the correct handler
1786+ 6B3F             >                // Use of "; ok" to suppress "warning[fwdref]"
1786+ 6B3F             >
1786+ 6B3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1787+ 6B3F D9                           exx
1788+ 6B40 E1                           pop     hl                  // address
1789+ 6B41 C1                           pop     bc                  // < high-part
1790+ 6B42 D1                           pop     de                  // < low-part > Instruction Pointer
1791+ 6B43 71                           ld      (hl), c
1792+ 6B44 23                           inc     hl
1793+ 6B45 70                           ld      (hl), b
1794+ 6B46 23                           inc     hl
1795+ 6B47 73                           ld      (hl), e
1796+ 6B48 23                           inc     hl
1797+ 6B49 72                           ld      (hl), d
1798+ 6B4A D9                           exx
1799+ 6B4B                              next
1799+ 6B4B DD E9       >                jp      (ix)
1800+ 6B4D
1801+ 6B4D              //  ______________________________________________________________________
1802+ 6B4D              //
1803+ 6B4D              // p@           a -- c
1804+ 6B4D              // Read one byte from port a and leave the result on top of stack
1805+ 6B4D                              New_Def PFETCH, "P@", is_code, is_normal
1805+ 6B4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1805+ 6B4D             >
1805+ 6B4D             >                // dummy db directives used to calculate length of namec
1805+ 6B4D 50 40       >                db      "P@"
1805+ 6B4F             >len_NFA         defl    $ - temp_NFA
1805+ 6B4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1805+ 6B4D             >
1805+ 6B4D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1805+ 6B4E 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1805+ 6B50             >                org     $-1                 // alter last byte of Name just above to set
1805+ 6B4F C0          >                db      {b $} | END_BIT     // msb as name end
1805+ 6B50             >
1805+ 6B50 3A 6B       >                dw      last_NFA            // Link to previous definition Name
1805+ 6B52             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1805+ 6B52 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1805+ 6B52 ~           >
1805+ 6B52 ~           >
1805+ 6B52             >                endif           ; ok        // for other definitions it "points" the correct handler
1805+ 6B52             >                // Use of "; ok" to suppress "warning[fwdref]"
1805+ 6B52             >
1805+ 6B52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1806+ 6B52 D9                           exx
1807+ 6B53 C1                           pop     bc
1808+ 6B54 26 00                        ld      h, 0
1809+ 6B56 ED 68                        in      l, (c)
1810+ 6B58 E5                           push    hl
1811+ 6B59 D9                           exx
1812+ 6B5A                              next
1812+ 6B5A DD E9       >                jp      (ix)
1813+ 6B5C
1814+ 6B5C              //  ______________________________________________________________________
1815+ 6B5C              //
1816+ 6B5C              // p!           c a --
1817+ 6B5C              // Send one byte (top of stack) to port a
1818+ 6B5C                              New_Def PSTORE, "P!", is_code, is_normal
1818+ 6B5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1818+ 6B5C             >
1818+ 6B5C             >                // dummy db directives used to calculate length of namec
1818+ 6B5C 50 21       >                db      "P!"
1818+ 6B5E             >len_NFA         defl    $ - temp_NFA
1818+ 6B5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1818+ 6B5C             >
1818+ 6B5C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1818+ 6B5D 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1818+ 6B5F             >                org     $-1                 // alter last byte of Name just above to set
1818+ 6B5E A1          >                db      {b $} | END_BIT     // msb as name end
1818+ 6B5F             >
1818+ 6B5F 4D 6B       >                dw      last_NFA            // Link to previous definition Name
1818+ 6B61             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1818+ 6B61 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1818+ 6B61 ~           >
1818+ 6B61 ~           >
1818+ 6B61             >                endif           ; ok        // for other definitions it "points" the correct handler
1818+ 6B61             >                // Use of "; ok" to suppress "warning[fwdref]"
1818+ 6B61             >
1818+ 6B61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1819+ 6B61 D9                           exx
1820+ 6B62 C1                           pop     bc
1821+ 6B63 E1                           pop     hl                  // < c
1822+ 6B64 ED 69                        out     (c), l              // low-byte
1823+ 6B66 D9                           exx
1824+ 6B67                              next
1824+ 6B67 DD E9       >                jp      (ix)
1825+ 6B69
1826+ 6B69
1827+ 6B69              //  ______________________________________________________________________
1828+ 6B69              //
1829+ 6B69              // 2*           n1 -- n2
1830+ 6B69              // doubles the number at top of stack
1831+ 6B69                              New_Def TWO_MUL, "2*", is_code, is_normal
1831+ 6B69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1831+ 6B69             >
1831+ 6B69             >                // dummy db directives used to calculate length of namec
1831+ 6B69 32 2A       >                db      "2*"
1831+ 6B6B             >len_NFA         defl    $ - temp_NFA
1831+ 6B6B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1831+ 6B69             >
1831+ 6B69 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1831+ 6B6A 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1831+ 6B6C             >                org     $-1                 // alter last byte of Name just above to set
1831+ 6B6B AA          >                db      {b $} | END_BIT     // msb as name end
1831+ 6B6C             >
1831+ 6B6C 5C 6B       >                dw      last_NFA            // Link to previous definition Name
1831+ 6B6E             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1831+ 6B6E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1831+ 6B6E ~           >
1831+ 6B6E ~           >
1831+ 6B6E             >                endif           ; ok        // for other definitions it "points" the correct handler
1831+ 6B6E             >                // Use of "; ok" to suppress "warning[fwdref]"
1831+ 6B6E             >
1831+ 6B6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1832+ 6B6E              Two_Mul_Ptr:
1833+ 6B6E E1                           pop     hl
1834+ 6B6F 29                           add     hl, hl
1835+ 6B70
1836+ 6B70                              psh1
1836+ 6B70 E5          >                push    hl
1836+ 6B71 DD E9       >                jp      (ix)
1837+ 6B73
1838+ 6B73              //  ______________________________________________________________________
1839+ 6B73              //
1840+ 6B73              // 2/           n1 -- n2
1841+ 6B73              // halves the top of stack, sign is unchanged
1842+ 6B73                              New_Def TWO_DIV, "2/", is_code, is_normal
1842+ 6B73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1842+ 6B73             >
1842+ 6B73             >                // dummy db directives used to calculate length of namec
1842+ 6B73 32 2F       >                db      "2/"
1842+ 6B75             >len_NFA         defl    $ - temp_NFA
1842+ 6B75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1842+ 6B73             >
1842+ 6B73 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1842+ 6B74 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1842+ 6B76             >                org     $-1                 // alter last byte of Name just above to set
1842+ 6B75 AF          >                db      {b $} | END_BIT     // msb as name end
1842+ 6B76             >
1842+ 6B76 69 6B       >                dw      last_NFA            // Link to previous definition Name
1842+ 6B78             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1842+ 6B78 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1842+ 6B78 ~           >
1842+ 6B78 ~           >
1842+ 6B78             >                endif           ; ok        // for other definitions it "points" the correct handler
1842+ 6B78             >                // Use of "; ok" to suppress "warning[fwdref]"
1842+ 6B78             >
1842+ 6B78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1843+ 6B78 E1                           pop     hl
1844+ 6B79 CB 2C                        sra     h
1845+ 6B7B CB 1D                        rr      l
1846+ 6B7D
1847+ 6B7D                              psh1
1847+ 6B7D E5          >                push    hl
1847+ 6B7E DD E9       >                jp      (ix)
1848+ 6B80
1849+ 6B80              //  ______________________________________________________________________
1850+ 6B80              //
1851+ 6B80              // lshift       n1 u -- n2
1852+ 6B80              // bit left shift of u bits
1853+ 6B80                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1853+ 6B80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1853+ 6B80             >
1853+ 6B80             >                // dummy db directives used to calculate length of namec
1853+ 6B80 4C 53 48 49 >                db      "LSHIFT"
1853+ 6B84 46 54       >
1853+ 6B86             >len_NFA         defl    $ - temp_NFA
1853+ 6B86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1853+ 6B80             >
1853+ 6B80 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1853+ 6B81 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1853+ 6B85 46 54       >
1853+ 6B87             >                org     $-1                 // alter last byte of Name just above to set
1853+ 6B86 D4          >                db      {b $} | END_BIT     // msb as name end
1853+ 6B87             >
1853+ 6B87 73 6B       >                dw      last_NFA            // Link to previous definition Name
1853+ 6B89             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1853+ 6B89 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1853+ 6B89 ~           >
1853+ 6B89 ~           >
1853+ 6B89             >                endif           ; ok        // for other definitions it "points" the correct handler
1853+ 6B89             >                // Use of "; ok" to suppress "warning[fwdref]"
1853+ 6B89             >
1853+ 6B89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1854+ 6B89 D1                           pop     de
1855+ 6B8A
1856+ 6B8A E1                           pop     hl
1857+ 6B8B 7B                           ld      a, e
1858+ 6B8C B7                           or      a
1859+ 6B8D 28 04                        jr      z, Lshift_Zero
1860+ 6B8F              Lshift_Loop:
1861+ 6B8F 29                                   add     hl, hl
1862+ 6B90 3D                                   dec     a
1863+ 6B91 20 FC                            jr      nz, Lshift_Loop
1864+ 6B93              Lshift_Zero:
1865+ 6B93
1866+ 6B93
1867+ 6B93                              psh1
1867+ 6B93 E5          >                push    hl
1867+ 6B94 DD E9       >                jp      (ix)
1868+ 6B96
1869+ 6B96              //  ______________________________________________________________________
1870+ 6B96              //
1871+ 6B96              // rshift       n1 u -- n2
1872+ 6B96              // bit right shift of u bits
1873+ 6B96                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1873+ 6B96             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1873+ 6B96             >
1873+ 6B96             >                // dummy db directives used to calculate length of namec
1873+ 6B96 52 53 48 49 >                db      "RSHIFT"
1873+ 6B9A 46 54       >
1873+ 6B9C             >len_NFA         defl    $ - temp_NFA
1873+ 6B9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1873+ 6B96             >
1873+ 6B96 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1873+ 6B97 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1873+ 6B9B 46 54       >
1873+ 6B9D             >                org     $-1                 // alter last byte of Name just above to set
1873+ 6B9C D4          >                db      {b $} | END_BIT     // msb as name end
1873+ 6B9D             >
1873+ 6B9D 80 6B       >                dw      last_NFA            // Link to previous definition Name
1873+ 6B9F             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1873+ 6B9F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1873+ 6B9F ~           >
1873+ 6B9F ~           >
1873+ 6B9F             >                endif           ; ok        // for other definitions it "points" the correct handler
1873+ 6B9F             >                // Use of "; ok" to suppress "warning[fwdref]"
1873+ 6B9F             >
1873+ 6B9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1874+ 6B9F D1                           pop     de
1875+ 6BA0
1876+ 6BA0 E1                           pop     hl
1877+ 6BA1 7B                           ld      a, e
1878+ 6BA2 B7                           or      a
1879+ 6BA3 28 07                        jr      z, Rshift_Zero
1880+ 6BA5              Rshift_Loop:
1881+ 6BA5 CB 3C                                srl     h
1882+ 6BA7 CB 1D                                rr      l
1883+ 6BA9 3D                                   dec     a
1884+ 6BAA 20 F9                            jr      nz, Rshift_Loop
1885+ 6BAC              Rshift_Zero:
1886+ 6BAC
1887+ 6BAC
1888+ 6BAC                              psh1
1888+ 6BAC E5          >                push    hl
1888+ 6BAD DD E9       >                jp      (ix)
1889+ 6BAF
1890+ 6BAF              //  ______________________________________________________________________
1891+ 6BAF              //
1892+ 6BAF              // cells        n1 -- n2
1893+ 6BAF              // decrement by 2 top of stack
1894+ 6BAF                              New_Def CELLS, "CELLS", is_code, is_normal
1894+ 6BAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1894+ 6BAF             >
1894+ 6BAF             >                // dummy db directives used to calculate length of namec
1894+ 6BAF 43 45 4C 4C >                db      "CELLS"
1894+ 6BB3 53          >
1894+ 6BB4             >len_NFA         defl    $ - temp_NFA
1894+ 6BB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1894+ 6BAF             >
1894+ 6BAF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1894+ 6BB0 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1894+ 6BB4 53          >
1894+ 6BB5             >                org     $-1                 // alter last byte of Name just above to set
1894+ 6BB4 D3          >                db      {b $} | END_BIT     // msb as name end
1894+ 6BB5             >
1894+ 6BB5 96 6B       >                dw      last_NFA            // Link to previous definition Name
1894+ 6BB7             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1894+ 6BB7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1894+ 6BB7 ~           >
1894+ 6BB7 ~           >
1894+ 6BB7             >                endif           ; ok        // for other definitions it "points" the correct handler
1894+ 6BB7             >                // Use of "; ok" to suppress "warning[fwdref]"
1894+ 6BB7             >
1894+ 6BB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1895+ 6BB7 C3 6E 6B                     jp      Two_Mul_Ptr
1896+ 6BBA
1897+ 6BBA
1898+ 6BBA              //  ______________________________________________________________________
1899+ 6BBA
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
 111  6BBA                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
   1+ 6BBA              //  ______________________________________________________________________
   2+ 6BBA              //
   3+ 6BBA              //  L1.asm
   4+ 6BBA              //
   5+ 6BBA              //  Level-1 definitions and derivate
   6+ 6BBA              //  ______________________________________________________________________
   7+ 6BBA
   8+ 6BBA              //  ______________________________________________________________________
   9+ 6BBA              //
  10+ 6BBA              // :            -- cccc     ( compile time )
  11+ 6BBA              //              i*x -- j*x  ( run time )
  12+ 6BBA              // Colon Definition
  13+ 6BBA                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6BBA             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6BBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6BBA             >
  13+ 6BBA             >                // dummy db directives used to calculate length of namec
  13+ 6BBA 3A          >                db      ":"
  13+ 6BBB             >len_NFA         defl    $ - temp_NFA
  13+ 6BBB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6BBA             >
  13+ 6BBA C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6BBB 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6BBC             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6BBB BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6BBC             >
  13+ 6BBC AF 6B       >                dw      last_NFA            // Link to previous definition Name
  13+ 6BBE             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6BBE CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6BC1             >
  13+ 6BC1             >
  13+ 6BC1             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6BC1             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6BC1             >
  13+ 6BC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6BC1
  15+ 6BC1 61 70                        dw      QEXEC                   // ?exec
  16+ 6BC3 19 70                        dw      STORE_CSP               // !csp
  17+ 6BC5 A9 6D 00 6B                  dw      CURRENT, FETCH          // current @
  18+ 6BC9 9B 6D 0B 6B                  dw      CONTEXT, STORE          // context !
  19+ 6BCD 80 76                        dw      CREATE                  // create  ( forward )
  20+ 6BCF 16 71                        dw      SMUDGE                  // dmudge
  21+ 6BD1 00 71                        dw      SQUARED_CLOSE           // ]
  22+ 6BD3 70 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6BD5                                                              // ... immediate
  24+ 6BD5              Enter_Ptr:
  25+ 6BD5                              // via call coded in CFA
  26+ 6BD5                              ldhlrp
  26+ 6BD5 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6BD8 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6BD9 70                           ld      (hl), b
  29+ 6BDA 2B                           dec     hl
  30+ 6BDB 71                           ld      (hl), c
  31+ 6BDC                              ldrphl
  31+ 6BDC 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6BDF
  33+ 6BDF
  34+ 6BDF C1                           pop     bc                  // points to PFA of "this" word
  35+ 6BE0                              next
  35+ 6BE0 DD E9       >                jp      (ix)
  36+ 6BE2
  37+ 6BE2              //  ______________________________________________________________________
  38+ 6BE2              //
  39+ 6BE2              // ;            --
  40+ 6BE2              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6BE2                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6BE2             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6BE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6BE2             >
  41+ 6BE2             >                // dummy db directives used to calculate length of namec
  41+ 6BE2 3B          >                db      ";"
  41+ 6BE3             >len_NFA         defl    $ - temp_NFA
  41+ 6BE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6BE2             >
  41+ 6BE2 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6BE3 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6BE4             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6BE3 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6BE4             >
  41+ 6BE4 BA 6B       >                dw      last_NFA            // Link to previous definition Name
  41+ 6BE6             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6BE6 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6BE9             >
  41+ 6BE9             >
  41+ 6BE9             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6BE9             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6BE9             >
  41+ 6BE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6BE9
  43+ 6BE9 8D 70                        dw      QCSP                    // ?csp
  44+ 6BEB C6 70 3C 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6BEF 16 71                        dw      SMUDGE                  // smudge
  46+ 6BF1 F1 70                        dw      SQUARED_OPEN            // [
  47+ 6BF3 3C 69                        dw      EXIT                    // ; immediate
  48+ 6BF5
  49+ 6BF5              //  ______________________________________________________________________
  50+ 6BF5              //
  51+ 6BF5              // noop         --
  52+ 6BF5
  53+ 6BF5                              New_Def NOOP, "NOOP", is_code, is_normal
  53+ 6BF5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6BF5             >
  53+ 6BF5             >                // dummy db directives used to calculate length of namec
  53+ 6BF5 4E 4F 4F 50 >                db      "NOOP"
  53+ 6BF9             >len_NFA         defl    $ - temp_NFA
  53+ 6BF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6BF5             >
  53+ 6BF5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6BF6 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6BFA             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6BF9 D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6BFA             >
  53+ 6BFA E2 6B       >                dw      last_NFA            // Link to previous definition Name
  53+ 6BFC             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6BFC ~           >                call    runcode ; ok        // for primitive definitions  actual code
  53+ 6BFC ~           >
  53+ 6BFC ~           >
  53+ 6BFC             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6BFC             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6BFC             >
  53+ 6BFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6BFC                              next
  54+ 6BFC DD E9       >                jp      (ix)
  55+ 6BFE
  56+ 6BFE              //  ______________________________________________________________________
  57+ 6BFE              //
  58+ 6BFE              // constant     n -- cccc     ( compile time )
  59+ 6BFE              //              -- n          ( run time )
  60+ 6BFE              // Constant definition.
  61+ 6BFE                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6BFE             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6BFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6BFE             >
  61+ 6BFE             >                // dummy db directives used to calculate length of namec
  61+ 6BFE 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6C02 54 41 4E 54 >
  61+ 6C06             >len_NFA         defl    $ - temp_NFA
  61+ 6C06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6BFE             >
  61+ 6BFE 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6BFF 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6C03 54 41 4E 54 >
  61+ 6C07             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6C06 D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6C07             >
  61+ 6C07 F5 6B       >                dw      last_NFA            // Link to previous definition Name
  61+ 6C09             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6C09 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6C0C             >
  61+ 6C0C             >
  61+ 6C0C             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6C0C             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6C0C             >
  61+ 6C0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6C0C
  63+ 6C0C 80 76                        dw      CREATE                  // create
  64+ 6C0E 76 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6C10 70 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6C12              Constant_Ptr:
  67+ 6C12
  68+ 6C12
  69+ 6C12 E1                           pop     hl
  70+ 6C13
  71+ 6C13 5E                           ld      e, (hl)
  72+ 6C14 23                           inc     hl
  73+ 6C15 56                           ld      d, (hl)
  74+ 6C16 D5                           push    de
  75+ 6C17                              next
  75+ 6C17 DD E9       >                jp      (ix)
  76+ 6C19
  77+ 6C19              //  ______________________________________________________________________
  78+ 6C19              //
  79+ 6C19              // variable     n -- cccc     ( compile time )
  80+ 6C19              //              -- a          ( run time )
  81+ 6C19              // Variable definition, n is the initial value.
  82+ 6C19                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6C19             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6C19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6C19             >
  82+ 6C19             >                // dummy db directives used to calculate length of namec
  82+ 6C19 56 41 52 49 >                db      "VARIABLE"
  82+ 6C1D 41 42 4C 45 >
  82+ 6C21             >len_NFA         defl    $ - temp_NFA
  82+ 6C21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6C19             >
  82+ 6C19 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6C1A 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6C1E 41 42 4C 45 >
  82+ 6C22             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6C21 C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6C22             >
  82+ 6C22 FE 6B       >                dw      last_NFA            // Link to previous definition Name
  82+ 6C24             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6C24 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6C27             >
  82+ 6C27             >
  82+ 6C27             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6C27             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6C27             >
  82+ 6C27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6C27
  84+ 6C27 4E 6C                        dw      ZERO
  85+ 6C29 09 6C                        dw      CONSTANT                // constant
  86+ 6C2B 70 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  87+ 6C2D              Variable_Ptr:
  88+ 6C2D
  89+ 6C2D
  90+ 6C2D
  91+ 6C2D
  92+ 6C2D                              next
  92+ 6C2D DD E9       >                jp      (ix)
  93+ 6C2F
  94+ 6C2F              //  ______________________________________________________________________
  95+ 6C2F              //
  96+ 6C2F              // user         b -- cccc     ( compile time )
  97+ 6C2F              //              -- a          ( run time )
  98+ 6C2F              // User variable definition
  99+ 6C2F                              Colon_Def USER, "USER", is_normal
  99+ 6C2F             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  99+ 6C2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99+ 6C2F             >
  99+ 6C2F             >                // dummy db directives used to calculate length of namec
  99+ 6C2F 55 53 45 52 >                db      "USER"
  99+ 6C33             >len_NFA         defl    $ - temp_NFA
  99+ 6C33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99+ 6C2F             >
  99+ 6C2F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99+ 6C30 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  99+ 6C34             >                org     $-1                 // alter last byte of Name just above to set
  99+ 6C33 D2          >                db      {b $} | END_BIT     // msb as name end
  99+ 6C34             >
  99+ 6C34 19 6C       >                dw      last_NFA            // Link to previous definition Name
  99+ 6C36             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  99+ 6C36 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  99+ 6C39             >
  99+ 6C39             >
  99+ 6C39             >                endif           ; ok        // for other definitions it "points" the correct handler
  99+ 6C39             >                // Use of "; ok" to suppress "warning[fwdref]"
  99+ 6C39             >
  99+ 6C39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100+ 6C39
 101+ 6C39 80 76                        dw      CREATE                  // create
 102+ 6C3B 88 6E                        dw      CCOMMA                  // c,
 103+ 6C3D 70 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 104+ 6C3F
 105+ 6C3F
 106+ 6C3F              User_Ptr:
 107+ 6C3F                              // via call coded in CFA
 108+ 6C3F E1                           pop     hl
 109+ 6C40
 110+ 6C40 5E                           ld      e, (hl)
 111+ 6C41 16 00                        ld      d, 0
 112+ 6C43 2A 94 63                     ld      hl, (USER_Pointer)
 113+ 6C46 19                           add     hl, de
 114+ 6C47
 115+ 6C47                              psh1
 115+ 6C47 E5          >                push    hl
 115+ 6C48 DD E9       >                jp      (ix)
 116+ 6C4A
 117+ 6C4A              //  ______________________________________________________________________
 118+ 6C4A              //
 119+ 6C4A                              Constant_Def ZERO       ,   "0"     ,   0
 119+ 6C4A             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 119+ 6C4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6C4A             >
 119+ 6C4A             >                // dummy db directives used to calculate length of namec
 119+ 6C4A 30          >                db      "0"
 119+ 6C4B             >len_NFA         defl    $ - temp_NFA
 119+ 6C4B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6C4A             >
 119+ 6C4A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6C4B 30          >                db      "0"               // name string in 7-bit ascii, but
 119+ 6C4C             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6C4B B0          >                db      {b $} | END_BIT     // msb as name end
 119+ 6C4C             >
 119+ 6C4C 2F 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6C4E             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6C4E CD 12 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6C51             >
 119+ 6C51             >
 119+ 6C51             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6C51             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6C51             >
 119+ 6C51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6C51 00 00       >                dw      0
 120+ 6C53                              Constant_Def ONE        ,   "1"     ,   1
 120+ 6C53             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 120+ 6C53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6C53             >
 120+ 6C53             >                // dummy db directives used to calculate length of namec
 120+ 6C53 31          >                db      "1"
 120+ 6C54             >len_NFA         defl    $ - temp_NFA
 120+ 6C54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6C53             >
 120+ 6C53 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6C54 31          >                db      "1"               // name string in 7-bit ascii, but
 120+ 6C55             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6C54 B1          >                db      {b $} | END_BIT     // msb as name end
 120+ 6C55             >
 120+ 6C55 4A 6C       >                dw      last_NFA            // Link to previous definition Name
 120+ 6C57             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6C57 CD 12 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6C5A             >
 120+ 6C5A             >
 120+ 6C5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6C5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6C5A             >
 120+ 6C5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6C5A 01 00       >                dw      1
 121+ 6C5C                              Constant_Def TWO        ,   "2"     ,   2
 121+ 6C5C             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 121+ 6C5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6C5C             >
 121+ 6C5C             >                // dummy db directives used to calculate length of namec
 121+ 6C5C 32          >                db      "2"
 121+ 6C5D             >len_NFA         defl    $ - temp_NFA
 121+ 6C5D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6C5C             >
 121+ 6C5C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6C5D 32          >                db      "2"               // name string in 7-bit ascii, but
 121+ 6C5E             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6C5D B2          >                db      {b $} | END_BIT     // msb as name end
 121+ 6C5E             >
 121+ 6C5E 53 6C       >                dw      last_NFA            // Link to previous definition Name
 121+ 6C60             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6C60 CD 12 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6C63             >
 121+ 6C63             >
 121+ 6C63             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6C63             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6C63             >
 121+ 6C63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6C63 02 00       >                dw      2
 122+ 6C65                              Constant_Def THREE      ,   "3"     ,   3
 122+ 6C65             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 122+ 6C65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6C65             >
 122+ 6C65             >                // dummy db directives used to calculate length of namec
 122+ 6C65 33          >                db      "3"
 122+ 6C66             >len_NFA         defl    $ - temp_NFA
 122+ 6C66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6C65             >
 122+ 6C65 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6C66 33          >                db      "3"               // name string in 7-bit ascii, but
 122+ 6C67             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6C66 B3          >                db      {b $} | END_BIT     // msb as name end
 122+ 6C67             >
 122+ 6C67 5C 6C       >                dw      last_NFA            // Link to previous definition Name
 122+ 6C69             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6C69 CD 12 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6C6C             >
 122+ 6C6C             >
 122+ 6C6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6C6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6C6C             >
 122+ 6C6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6C6C 03 00       >                dw      3
 123+ 6C6E                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 123+ 6C6E             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 123+ 6C6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6C6E             >
 123+ 6C6E             >                // dummy db directives used to calculate length of namec
 123+ 6C6E 2D 31       >                db      "-1"
 123+ 6C70             >len_NFA         defl    $ - temp_NFA
 123+ 6C70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6C6E             >
 123+ 6C6E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6C6F 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 123+ 6C71             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6C70 B1          >                db      {b $} | END_BIT     // msb as name end
 123+ 6C71             >
 123+ 6C71 65 6C       >                dw      last_NFA            // Link to previous definition Name
 123+ 6C73             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6C73 CD 12 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6C76             >
 123+ 6C76             >
 123+ 6C76             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6C76             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6C76             >
 123+ 6C76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6C76 FF FF       >                dw      -1
 124+ 6C78                              Constant_Def BL         ,   "BL"    , $20
 124+ 6C78             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 124+ 6C78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6C78             >
 124+ 6C78             >                // dummy db directives used to calculate length of namec
 124+ 6C78 42 4C       >                db      "BL"
 124+ 6C7A             >len_NFA         defl    $ - temp_NFA
 124+ 6C7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6C78             >
 124+ 6C78 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6C79 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 124+ 6C7B             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6C7A CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6C7B             >
 124+ 6C7B 6E 6C       >                dw      last_NFA            // Link to previous definition Name
 124+ 6C7D             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6C7D CD 12 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6C80             >
 124+ 6C80             >
 124+ 6C80             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6C80             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6C80             >
 124+ 6C80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6C80 20 00       >                dw      $20
 125+ 6C82                              Constant_Def CL         ,   "C/L"   ,  64
 125+ 6C82             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 125+ 6C82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6C82             >
 125+ 6C82             >                // dummy db directives used to calculate length of namec
 125+ 6C82 43 2F 4C    >                db      "C/L"
 125+ 6C85             >len_NFA         defl    $ - temp_NFA
 125+ 6C85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6C82             >
 125+ 6C82 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6C83 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 125+ 6C86             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6C85 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ 6C86             >
 125+ 6C86 78 6C       >                dw      last_NFA            // Link to previous definition Name
 125+ 6C88             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6C88 CD 12 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6C8B             >
 125+ 6C8B             >
 125+ 6C8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6C8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6C8B             >
 125+ 6C8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6C8B 40 00       >                dw      64
 126+ 6C8D                              Constant_Def BBUF       ,   "B/BUF" , 512
 126+ 6C8D             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 126+ 6C8D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6C8D             >
 126+ 6C8D             >                // dummy db directives used to calculate length of namec
 126+ 6C8D 42 2F 42 55 >                db      "B/BUF"
 126+ 6C91 46          >
 126+ 6C92             >len_NFA         defl    $ - temp_NFA
 126+ 6C92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6C8D             >
 126+ 6C8D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6C8E 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 126+ 6C92 46          >
 126+ 6C93             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6C92 C6          >                db      {b $} | END_BIT     // msb as name end
 126+ 6C93             >
 126+ 6C93 82 6C       >                dw      last_NFA            // Link to previous definition Name
 126+ 6C95             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6C95 CD 12 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6C98             >
 126+ 6C98             >
 126+ 6C98             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6C98             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6C98             >
 126+ 6C98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6C98 00 02       >                dw      512
 127+ 6C9A                              Constant_Def BSCR       ,   "B/SCR" ,   2
 127+ 6C9A             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 127+ 6C9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6C9A             >
 127+ 6C9A             >                // dummy db directives used to calculate length of namec
 127+ 6C9A 42 2F 53 43 >                db      "B/SCR"
 127+ 6C9E 52          >
 127+ 6C9F             >len_NFA         defl    $ - temp_NFA
 127+ 6C9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6C9A             >
 127+ 6C9A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6C9B 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 127+ 6C9F 52          >
 127+ 6CA0             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6C9F D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6CA0             >
 127+ 6CA0 8D 6C       >                dw      last_NFA            // Link to previous definition Name
 127+ 6CA2             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6CA2 CD 12 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6CA5             >
 127+ 6CA5             >
 127+ 6CA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6CA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6CA5             >
 127+ 6CA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6CA5 02 00       >                dw      2
 128+ 6CA7                              Constant_Def LSCR       ,   "L/SCR" ,  16
 128+ 6CA7             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 128+ 6CA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ 6CA7             >
 128+ 6CA7             >                // dummy db directives used to calculate length of namec
 128+ 6CA7 4C 2F 53 43 >                db      "L/SCR"
 128+ 6CAB 52          >
 128+ 6CAC             >len_NFA         defl    $ - temp_NFA
 128+ 6CAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ 6CA7             >
 128+ 6CA7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ 6CA8 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 128+ 6CAC 52          >
 128+ 6CAD             >                org     $-1                 // alter last byte of Name just above to set
 128+ 6CAC D2          >                db      {b $} | END_BIT     // msb as name end
 128+ 6CAD             >
 128+ 6CAD 9A 6C       >                dw      last_NFA            // Link to previous definition Name
 128+ 6CAF             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6CAF CD 12 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6CB2             >
 128+ 6CB2             >
 128+ 6CB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6CB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6CB2             >
 128+ 6CB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6CB2 10 00       >                dw      16
 129+ 6CB4
 130+ 6CB4              //  ______________________________________________________________________
 131+ 6CB4              //
 132+ 6CB4              // +origin         --
 133+ 6CB4              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 134+ 6CB4              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 135+ 6CB4              //              dw      PLUS                    // +
 136+ 6CB4              //              dw      EXIT                    // ;
 137+ 6CB4                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 137+ 6CB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ 6CB4             >
 137+ 6CB4             >                // dummy db directives used to calculate length of namec
 137+ 6CB4 2B 4F 52 49 >                db      "+ORIGIN"
 137+ 6CB8 47 49 4E    >
 137+ 6CBB             >len_NFA         defl    $ - temp_NFA
 137+ 6CBB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ 6CB4             >
 137+ 6CB4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ 6CB5 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 137+ 6CB9 47 49 4E    >
 137+ 6CBC             >                org     $-1                 // alter last byte of Name just above to set
 137+ 6CBB CE          >                db      {b $} | END_BIT     // msb as name end
 137+ 6CBC             >
 137+ 6CBC A7 6C       >                dw      last_NFA            // Link to previous definition Name
 137+ 6CBE             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 6CBE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 137+ 6CBE ~           >
 137+ 6CBE ~           >
 137+ 6CBE             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 6CBE             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 6CBE             >
 137+ 6CBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 6CBE E1                           pop     hl
 139+ 6CBF 11 66 63                     ld      de, Cold_origin
 140+ 6CC2 19                           add     hl, de
 141+ 6CC3 E5                           push    hl
 142+ 6CC4                              next
 142+ 6CC4 DD E9       >                jp      (ix)
 143+ 6CC6
 144+ 6CC6
 145+ 6CC6              //  ______________________________________________________________________
 146+ 6CC6              //
 147+ 6CC6                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 147+ 6CC6             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 147+ 6CC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147+ 6CC6             >
 147+ 6CC6             >                // dummy db directives used to calculate length of namec
 147+ 6CC6 28 4E 45 58 >                db      "(NEXT)"
 147+ 6CCA 54 29       >
 147+ 6CCC             >len_NFA         defl    $ - temp_NFA
 147+ 6CCC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147+ 6CC6             >
 147+ 6CC6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147+ 6CC7 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 147+ 6CCB 54 29       >
 147+ 6CCD             >                org     $-1                 // alter last byte of Name just above to set
 147+ 6CCC A9          >                db      {b $} | END_BIT     // msb as name end
 147+ 6CCD             >
 147+ 6CCD B4 6C       >                dw      last_NFA            // Link to previous definition Name
 147+ 6CCF             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 147+ 6CCF CD 12 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 147+ 6CD2             >
 147+ 6CD2             >
 147+ 6CD2             >                endif           ; ok        // for other definitions it "points" the correct handler
 147+ 6CD2             >                // Use of "; ok" to suppress "warning[fwdref]"
 147+ 6CD2             >
 147+ 6CD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 147+ 6CD2 98 63       >                dw      Next_Ptr
 148+ 6CD4
 149+ 6CD4              //  ______________________________________________________________________
 150+ 6CD4              //
 151+ 6CD4
 152+ 6CD4                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 152+ 6CD4             >                New_Def  S0, "S0", User_Ptr, is_normal
 152+ 6CD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6CD4             >
 152+ 6CD4             >                // dummy db directives used to calculate length of namec
 152+ 6CD4 53 30       >                db      "S0"
 152+ 6CD6             >len_NFA         defl    $ - temp_NFA
 152+ 6CD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6CD4             >
 152+ 6CD4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6CD5 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 152+ 6CD7             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6CD6 B0          >                db      {b $} | END_BIT     // msb as name end
 152+ 6CD7             >
 152+ 6CD7 C6 6C       >                dw      last_NFA            // Link to previous definition Name
 152+ 6CD9             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6CD9 CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6CDC             >
 152+ 6CDC             >
 152+ 6CDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6CDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6CDC             >
 152+ 6CDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6CDC 06          >                db      06
 153+ 6CDD                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 153+ 6CDD             >                New_Def  R0, "R0", User_Ptr, is_normal
 153+ 6CDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6CDD             >
 153+ 6CDD             >                // dummy db directives used to calculate length of namec
 153+ 6CDD 52 30       >                db      "R0"
 153+ 6CDF             >len_NFA         defl    $ - temp_NFA
 153+ 6CDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6CDD             >
 153+ 6CDD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6CDE 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 153+ 6CE0             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6CDF B0          >                db      {b $} | END_BIT     // msb as name end
 153+ 6CE0             >
 153+ 6CE0 D4 6C       >                dw      last_NFA            // Link to previous definition Name
 153+ 6CE2             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6CE2 CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6CE5             >
 153+ 6CE5             >
 153+ 6CE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6CE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6CE5             >
 153+ 6CE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6CE5 08          >                db      08
 154+ 6CE6                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 154+ 6CE6             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 154+ 6CE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6CE6             >
 154+ 6CE6             >                // dummy db directives used to calculate length of namec
 154+ 6CE6 54 49 42    >                db      "TIB"
 154+ 6CE9             >len_NFA         defl    $ - temp_NFA
 154+ 6CE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6CE6             >
 154+ 6CE6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6CE7 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 154+ 6CEA             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6CE9 C2          >                db      {b $} | END_BIT     // msb as name end
 154+ 6CEA             >
 154+ 6CEA DD 6C       >                dw      last_NFA            // Link to previous definition Name
 154+ 6CEC             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6CEC CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6CEF             >
 154+ 6CEF             >
 154+ 6CEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6CEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6CEF             >
 154+ 6CEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6CEF 0A          >                db      10
 155+ 6CF0                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 155+ 6CF0             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 155+ 6CF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6CF0             >
 155+ 6CF0             >                // dummy db directives used to calculate length of namec
 155+ 6CF0 57 49 44 54 >                db      "WIDTH"
 155+ 6CF4 48          >
 155+ 6CF5             >len_NFA         defl    $ - temp_NFA
 155+ 6CF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6CF0             >
 155+ 6CF0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6CF1 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 155+ 6CF5 48          >
 155+ 6CF6             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6CF5 C8          >                db      {b $} | END_BIT     // msb as name end
 155+ 6CF6             >
 155+ 6CF6 E6 6C       >                dw      last_NFA            // Link to previous definition Name
 155+ 6CF8             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6CF8 CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6CFB             >
 155+ 6CFB             >
 155+ 6CFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6CFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6CFB             >
 155+ 6CFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6CFB 0C          >                db      12
 156+ 6CFC                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 156+ 6CFC             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 156+ 6CFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6CFC             >
 156+ 6CFC             >                // dummy db directives used to calculate length of namec
 156+ 6CFC 57 41 52 4E >                db      "WARNING"
 156+ 6D00 49 4E 47    >
 156+ 6D03             >len_NFA         defl    $ - temp_NFA
 156+ 6D03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6CFC             >
 156+ 6CFC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6CFD 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 156+ 6D01 49 4E 47    >
 156+ 6D04             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6D03 C7          >                db      {b $} | END_BIT     // msb as name end
 156+ 6D04             >
 156+ 6D04 F0 6C       >                dw      last_NFA            // Link to previous definition Name
 156+ 6D06             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6D06 CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6D09             >
 156+ 6D09             >
 156+ 6D09             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6D09             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6D09             >
 156+ 6D09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6D09 0E          >                db      14
 157+ 6D0A                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 157+ 6D0A             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 157+ 6D0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6D0A             >
 157+ 6D0A             >                // dummy db directives used to calculate length of namec
 157+ 6D0A 46 45 4E 43 >                db      "FENCE"
 157+ 6D0E 45          >
 157+ 6D0F             >len_NFA         defl    $ - temp_NFA
 157+ 6D0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6D0A             >
 157+ 6D0A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6D0B 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 157+ 6D0F 45          >
 157+ 6D10             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6D0F C5          >                db      {b $} | END_BIT     // msb as name end
 157+ 6D10             >
 157+ 6D10 FC 6C       >                dw      last_NFA            // Link to previous definition Name
 157+ 6D12             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6D12 CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6D15             >
 157+ 6D15             >
 157+ 6D15             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6D15             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6D15             >
 157+ 6D15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6D15 10          >                db      16
 158+ 6D16                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 158+ 6D16             >                New_Def  DP, "DP", User_Ptr, is_normal
 158+ 6D16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6D16             >
 158+ 6D16             >                // dummy db directives used to calculate length of namec
 158+ 6D16 44 50       >                db      "DP"
 158+ 6D18             >len_NFA         defl    $ - temp_NFA
 158+ 6D18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6D16             >
 158+ 6D16 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6D17 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 158+ 6D19             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6D18 D0          >                db      {b $} | END_BIT     // msb as name end
 158+ 6D19             >
 158+ 6D19 0A 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6D1B             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6D1B CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6D1E             >
 158+ 6D1E             >
 158+ 6D1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6D1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6D1E             >
 158+ 6D1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6D1E 12          >                db      18
 159+ 6D1F                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 159+ 6D1F             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 159+ 6D1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6D1F             >
 159+ 6D1F             >                // dummy db directives used to calculate length of namec
 159+ 6D1F 56 4F 43 2D >                db      "VOC-LINK"
 159+ 6D23 4C 49 4E 4B >
 159+ 6D27             >len_NFA         defl    $ - temp_NFA
 159+ 6D27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6D1F             >
 159+ 6D1F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6D20 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 159+ 6D24 4C 49 4E 4B >
 159+ 6D28             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6D27 CB          >                db      {b $} | END_BIT     // msb as name end
 159+ 6D28             >
 159+ 6D28 16 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6D2A             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6D2A CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6D2D             >
 159+ 6D2D             >
 159+ 6D2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6D2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6D2D             >
 159+ 6D2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6D2D 14          >                db      20
 160+ 6D2E                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 160+ 6D2E             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 160+ 6D2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6D2E             >
 160+ 6D2E             >                // dummy db directives used to calculate length of namec
 160+ 6D2E 46 49 52 53 >                db      "FIRST"
 160+ 6D32 54          >
 160+ 6D33             >len_NFA         defl    $ - temp_NFA
 160+ 6D33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6D2E             >
 160+ 6D2E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6D2F 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 160+ 6D33 54          >
 160+ 6D34             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6D33 D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6D34             >
 160+ 6D34 1F 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6D36             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6D36 CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6D39             >
 160+ 6D39             >
 160+ 6D39             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6D39             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6D39             >
 160+ 6D39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6D39 16          >                db      22
 161+ 6D3A                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 161+ 6D3A             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 161+ 6D3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6D3A             >
 161+ 6D3A             >                // dummy db directives used to calculate length of namec
 161+ 6D3A 4C 49 4D 49 >                db      "LIMIT"
 161+ 6D3E 54          >
 161+ 6D3F             >len_NFA         defl    $ - temp_NFA
 161+ 6D3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6D3A             >
 161+ 6D3A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6D3B 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 161+ 6D3F 54          >
 161+ 6D40             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6D3F D4          >                db      {b $} | END_BIT     // msb as name end
 161+ 6D40             >
 161+ 6D40 2E 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6D42             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6D42 CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6D45             >
 161+ 6D45             >
 161+ 6D45             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6D45             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6D45             >
 161+ 6D45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6D45 18          >                db      24
 162+ 6D46                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 162+ 6D46             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 162+ 6D46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6D46             >
 162+ 6D46             >                // dummy db directives used to calculate length of namec
 162+ 6D46 45 58 50    >                db      "EXP"
 162+ 6D49             >len_NFA         defl    $ - temp_NFA
 162+ 6D49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6D46             >
 162+ 6D46 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6D47 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 162+ 6D4A             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6D49 D0          >                db      {b $} | END_BIT     // msb as name end
 162+ 6D4A             >
 162+ 6D4A 3A 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6D4C             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6D4C CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6D4F             >
 162+ 6D4F             >
 162+ 6D4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6D4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6D4F             >
 162+ 6D4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6D4F 1A          >                db      26
 163+ 6D50                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 163+ 6D50             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 163+ 6D50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6D50             >
 163+ 6D50             >                // dummy db directives used to calculate length of namec
 163+ 6D50 4E 4D 4F 44 >                db      "NMODE"
 163+ 6D54 45          >
 163+ 6D55             >len_NFA         defl    $ - temp_NFA
 163+ 6D55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6D50             >
 163+ 6D50 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6D51 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 163+ 6D55 45          >
 163+ 6D56             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6D55 C5          >                db      {b $} | END_BIT     // msb as name end
 163+ 6D56             >
 163+ 6D56 46 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6D58             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6D58 CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6D5B             >
 163+ 6D5B             >
 163+ 6D5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6D5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6D5B             >
 163+ 6D5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6D5B 1C          >                db      28
 164+ 6D5C                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 164+ 6D5C             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 164+ 6D5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6D5C             >
 164+ 6D5C             >                // dummy db directives used to calculate length of namec
 164+ 6D5C 42 4C 4B    >                db      "BLK"
 164+ 6D5F             >len_NFA         defl    $ - temp_NFA
 164+ 6D5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6D5C             >
 164+ 6D5C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6D5D 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 164+ 6D60             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6D5F CB          >                db      {b $} | END_BIT     // msb as name end
 164+ 6D60             >
 164+ 6D60 50 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6D62             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6D62 CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6D65             >
 164+ 6D65             >
 164+ 6D65             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6D65             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6D65             >
 164+ 6D65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6D65 1E          >                db      30
 165+ 6D66                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 165+ 6D66             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 165+ 6D66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6D66             >
 165+ 6D66             >                // dummy db directives used to calculate length of namec
 165+ 6D66 3E 49 4E    >                db      ">IN"
 165+ 6D69             >len_NFA         defl    $ - temp_NFA
 165+ 6D69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6D66             >
 165+ 6D66 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6D67 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 165+ 6D6A             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6D69 CE          >                db      {b $} | END_BIT     // msb as name end
 165+ 6D6A             >
 165+ 6D6A 5C 6D       >                dw      last_NFA            // Link to previous definition Name
 165+ 6D6C             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6D6C CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6D6F             >
 165+ 6D6F             >
 165+ 6D6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6D6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6D6F             >
 165+ 6D6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6D6F 20          >                db      32
 166+ 6D70                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 166+ 6D70             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 166+ 6D70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6D70             >
 166+ 6D70             >                // dummy db directives used to calculate length of namec
 166+ 6D70 4F 55 54    >                db      "OUT"
 166+ 6D73             >len_NFA         defl    $ - temp_NFA
 166+ 6D73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6D70             >
 166+ 6D70 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6D71 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 166+ 6D74             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6D73 D4          >                db      {b $} | END_BIT     // msb as name end
 166+ 6D74             >
 166+ 6D74 66 6D       >                dw      last_NFA            // Link to previous definition Name
 166+ 6D76             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6D76 CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6D79             >
 166+ 6D79             >
 166+ 6D79             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6D79             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6D79             >
 166+ 6D79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6D79 22          >                db      34
 167+ 6D7A                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 167+ 6D7A             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 167+ 6D7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6D7A             >
 167+ 6D7A             >                // dummy db directives used to calculate length of namec
 167+ 6D7A 53 43 52    >                db      "SCR"
 167+ 6D7D             >len_NFA         defl    $ - temp_NFA
 167+ 6D7D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6D7A             >
 167+ 6D7A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6D7B 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 167+ 6D7E             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6D7D D2          >                db      {b $} | END_BIT     // msb as name end
 167+ 6D7E             >
 167+ 6D7E 70 6D       >                dw      last_NFA            // Link to previous definition Name
 167+ 6D80             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6D80 CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6D83             >
 167+ 6D83             >
 167+ 6D83             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6D83             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6D83             >
 167+ 6D83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6D83 24          >                db      36
 168+ 6D84                              User_Def OFFSET     , "OFFSET"    , 38 //
 168+ 6D84             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 168+ 6D84             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6D84             >
 168+ 6D84             >                // dummy db directives used to calculate length of namec
 168+ 6D84 4F 46 46 53 >                db      "OFFSET"
 168+ 6D88 45 54       >
 168+ 6D8A             >len_NFA         defl    $ - temp_NFA
 168+ 6D8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6D84             >
 168+ 6D84 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6D85 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 168+ 6D89 45 54       >
 168+ 6D8B             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6D8A D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6D8B             >
 168+ 6D8B 7A 6D       >                dw      last_NFA            // Link to previous definition Name
 168+ 6D8D             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6D8D CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6D90             >
 168+ 6D90             >
 168+ 6D90             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6D90             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6D90             >
 168+ 6D90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6D90 26          >                db      38
 169+ 6D91                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 169+ 6D91             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 169+ 6D91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6D91             >
 169+ 6D91             >                // dummy db directives used to calculate length of namec
 169+ 6D91 43 4F 4E 54 >                db      "CONTEXT"
 169+ 6D95 45 58 54    >
 169+ 6D98             >len_NFA         defl    $ - temp_NFA
 169+ 6D98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6D91             >
 169+ 6D91 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6D92 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 169+ 6D96 45 58 54    >
 169+ 6D99             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6D98 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6D99             >
 169+ 6D99 84 6D       >                dw      last_NFA            // Link to previous definition Name
 169+ 6D9B             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6D9B CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6D9E             >
 169+ 6D9E             >
 169+ 6D9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6D9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6D9E             >
 169+ 6D9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6D9E 28          >                db      40
 170+ 6D9F                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 170+ 6D9F             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 170+ 6D9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6D9F             >
 170+ 6D9F             >                // dummy db directives used to calculate length of namec
 170+ 6D9F 43 55 52 52 >                db      "CURRENT"
 170+ 6DA3 45 4E 54    >
 170+ 6DA6             >len_NFA         defl    $ - temp_NFA
 170+ 6DA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6D9F             >
 170+ 6D9F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6DA0 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 170+ 6DA4 45 4E 54    >
 170+ 6DA7             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6DA6 D4          >                db      {b $} | END_BIT     // msb as name end
 170+ 6DA7             >
 170+ 6DA7 91 6D       >                dw      last_NFA            // Link to previous definition Name
 170+ 6DA9             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6DA9 CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6DAC             >
 170+ 6DAC             >
 170+ 6DAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6DAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6DAC             >
 170+ 6DAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6DAC 2A          >                db      42
 171+ 6DAD                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 171+ 6DAD             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 171+ 6DAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6DAD             >
 171+ 6DAD             >                // dummy db directives used to calculate length of namec
 171+ 6DAD 53 54 41 54 >                db      "STATE"
 171+ 6DB1 45          >
 171+ 6DB2             >len_NFA         defl    $ - temp_NFA
 171+ 6DB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6DAD             >
 171+ 6DAD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6DAE 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 171+ 6DB2 45          >
 171+ 6DB3             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6DB2 C5          >                db      {b $} | END_BIT     // msb as name end
 171+ 6DB3             >
 171+ 6DB3 9F 6D       >                dw      last_NFA            // Link to previous definition Name
 171+ 6DB5             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6DB5 CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6DB8             >
 171+ 6DB8             >
 171+ 6DB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6DB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6DB8             >
 171+ 6DB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6DB8 2C          >                db      44
 172+ 6DB9                              User_Def BASE       , "BASE"      , 46 //
 172+ 6DB9             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 172+ 6DB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6DB9             >
 172+ 6DB9             >                // dummy db directives used to calculate length of namec
 172+ 6DB9 42 41 53 45 >                db      "BASE"
 172+ 6DBD             >len_NFA         defl    $ - temp_NFA
 172+ 6DBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6DB9             >
 172+ 6DB9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6DBA 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 172+ 6DBE             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6DBD C5          >                db      {b $} | END_BIT     // msb as name end
 172+ 6DBE             >
 172+ 6DBE AD 6D       >                dw      last_NFA            // Link to previous definition Name
 172+ 6DC0             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6DC0 CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6DC3             >
 172+ 6DC3             >
 172+ 6DC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6DC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6DC3             >
 172+ 6DC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6DC3 2E          >                db      46
 173+ 6DC4                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 173+ 6DC4             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 173+ 6DC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6DC4             >
 173+ 6DC4             >                // dummy db directives used to calculate length of namec
 173+ 6DC4 44 50 4C    >                db      "DPL"
 173+ 6DC7             >len_NFA         defl    $ - temp_NFA
 173+ 6DC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6DC4             >
 173+ 6DC4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6DC5 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 173+ 6DC8             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6DC7 CC          >                db      {b $} | END_BIT     // msb as name end
 173+ 6DC8             >
 173+ 6DC8 B9 6D       >                dw      last_NFA            // Link to previous definition Name
 173+ 6DCA             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6DCA CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6DCD             >
 173+ 6DCD             >
 173+ 6DCD             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6DCD             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6DCD             >
 173+ 6DCD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6DCD 30          >                db      48
 174+ 6DCE                              User_Def FLD        , "FLD"       , 50 // output field width
 174+ 6DCE             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 174+ 6DCE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6DCE             >
 174+ 6DCE             >                // dummy db directives used to calculate length of namec
 174+ 6DCE 46 4C 44    >                db      "FLD"
 174+ 6DD1             >len_NFA         defl    $ - temp_NFA
 174+ 6DD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6DCE             >
 174+ 6DCE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6DCF 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 174+ 6DD2             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6DD1 C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6DD2             >
 174+ 6DD2 C4 6D       >                dw      last_NFA            // Link to previous definition Name
 174+ 6DD4             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6DD4 CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6DD7             >
 174+ 6DD7             >
 174+ 6DD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6DD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6DD7             >
 174+ 6DD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6DD7 32          >                db      50
 175+ 6DD8                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 175+ 6DD8             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 175+ 6DD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6DD8             >
 175+ 6DD8             >                // dummy db directives used to calculate length of namec
 175+ 6DD8 43 53 50    >                db      "CSP"
 175+ 6DDB             >len_NFA         defl    $ - temp_NFA
 175+ 6DDB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6DD8             >
 175+ 6DD8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6DD9 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 175+ 6DDC             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6DDB D0          >                db      {b $} | END_BIT     // msb as name end
 175+ 6DDC             >
 175+ 6DDC CE 6D       >                dw      last_NFA            // Link to previous definition Name
 175+ 6DDE             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6DDE CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6DE1             >
 175+ 6DE1             >
 175+ 6DE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6DE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6DE1             >
 175+ 6DE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6DE1 34          >                db      52
 176+ 6DE2                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 176+ 6DE2             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 176+ 6DE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6DE2             >
 176+ 6DE2             >                // dummy db directives used to calculate length of namec
 176+ 6DE2 52 23       >                db      "R#"
 176+ 6DE4             >len_NFA         defl    $ - temp_NFA
 176+ 6DE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6DE2             >
 176+ 6DE2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6DE3 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 176+ 6DE5             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6DE4 A3          >                db      {b $} | END_BIT     // msb as name end
 176+ 6DE5             >
 176+ 6DE5 D8 6D       >                dw      last_NFA            // Link to previous definition Name
 176+ 6DE7             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6DE7 CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6DEA             >
 176+ 6DEA             >
 176+ 6DEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6DEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6DEA             >
 176+ 6DEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6DEA 36          >                db      54
 177+ 6DEB                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 177+ 6DEB             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 177+ 6DEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6DEB             >
 177+ 6DEB             >                // dummy db directives used to calculate length of namec
 177+ 6DEB 48 4C 44    >                db      "HLD"
 177+ 6DEE             >len_NFA         defl    $ - temp_NFA
 177+ 6DEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6DEB             >
 177+ 6DEB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6DEC 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 177+ 6DEF             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6DEE C4          >                db      {b $} | END_BIT     // msb as name end
 177+ 6DEF             >
 177+ 6DEF E2 6D       >                dw      last_NFA            // Link to previous definition Name
 177+ 6DF1             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6DF1 CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6DF4             >
 177+ 6DF4             >
 177+ 6DF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6DF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6DF4             >
 177+ 6DF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6DF4 38          >                db      56
 178+ 6DF5                              User_Def USE        , "USE"       , 58 // address of last used block
 178+ 6DF5             >                New_Def  USE, "USE", User_Ptr, is_normal
 178+ 6DF5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6DF5             >
 178+ 6DF5             >                // dummy db directives used to calculate length of namec
 178+ 6DF5 55 53 45    >                db      "USE"
 178+ 6DF8             >len_NFA         defl    $ - temp_NFA
 178+ 6DF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6DF5             >
 178+ 6DF5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6DF6 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 178+ 6DF9             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6DF8 C5          >                db      {b $} | END_BIT     // msb as name end
 178+ 6DF9             >
 178+ 6DF9 EB 6D       >                dw      last_NFA            // Link to previous definition Name
 178+ 6DFB             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6DFB CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6DFE             >
 178+ 6DFE             >
 178+ 6DFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6DFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6DFE             >
 178+ 6DFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6DFE 3A          >                db      58
 179+ 6DFF                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 179+ 6DFF             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 179+ 6DFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6DFF             >
 179+ 6DFF             >                // dummy db directives used to calculate length of namec
 179+ 6DFF 50 52 45 56 >                db      "PREV"
 179+ 6E03             >len_NFA         defl    $ - temp_NFA
 179+ 6E03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6DFF             >
 179+ 6DFF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6E00 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 179+ 6E04             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6E03 D6          >                db      {b $} | END_BIT     // msb as name end
 179+ 6E04             >
 179+ 6E04 F5 6D       >                dw      last_NFA            // Link to previous definition Name
 179+ 6E06             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6E06 CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6E09             >
 179+ 6E09             >
 179+ 6E09             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6E09             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6E09             >
 179+ 6E09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6E09 3C          >                db      60
 180+ 6E0A                              User_Def LP         , "LP"        , 62 // line printer (not used)
 180+ 6E0A             >                New_Def  LP, "LP", User_Ptr, is_normal
 180+ 6E0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6E0A             >
 180+ 6E0A             >                // dummy db directives used to calculate length of namec
 180+ 6E0A 4C 50       >                db      "LP"
 180+ 6E0C             >len_NFA         defl    $ - temp_NFA
 180+ 6E0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6E0A             >
 180+ 6E0A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6E0B 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 180+ 6E0D             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6E0C D0          >                db      {b $} | END_BIT     // msb as name end
 180+ 6E0D             >
 180+ 6E0D FF 6D       >                dw      last_NFA            // Link to previous definition Name
 180+ 6E0F             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6E0F CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6E12             >
 180+ 6E12             >
 180+ 6E12             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6E12             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6E12             >
 180+ 6E12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6E12 3E          >                db      62
 181+ 6E13                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 181+ 6E13             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 181+ 6E13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6E13             >
 181+ 6E13             >                // dummy db directives used to calculate length of namec
 181+ 6E13 50 4C 41 43 >                db      "PLACE"
 181+ 6E17 45          >
 181+ 6E18             >len_NFA         defl    $ - temp_NFA
 181+ 6E18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6E13             >
 181+ 6E13 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6E14 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 181+ 6E18 45          >
 181+ 6E19             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6E18 C5          >                db      {b $} | END_BIT     // msb as name end
 181+ 6E19             >
 181+ 6E19 0A 6E       >                dw      last_NFA            // Link to previous definition Name
 181+ 6E1B             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6E1B CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6E1E             >
 181+ 6E1E             >
 181+ 6E1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6E1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6E1E             >
 181+ 6E1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6E1E 40          >                db      64
 182+ 6E1F                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 182+ 6E1F             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 182+ 6E1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6E1F             >
 182+ 6E1F             >                // dummy db directives used to calculate length of namec
 182+ 6E1F 53 4F 55 52 >                db      "SOURCE-ID"
 182+ 6E23 43 45 2D 49 >
 182+ 6E27 44          >
 182+ 6E28             >len_NFA         defl    $ - temp_NFA
 182+ 6E28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6E1F             >
 182+ 6E1F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6E20 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 182+ 6E24 43 45 2D 49 >
 182+ 6E28 44          >
 182+ 6E29             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6E28 C4          >                db      {b $} | END_BIT     // msb as name end
 182+ 6E29             >
 182+ 6E29 13 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6E2B             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6E2B CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6E2E             >
 182+ 6E2E             >
 182+ 6E2E             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6E2E             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6E2E             >
 182+ 6E2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6E2E 42          >                db      66
 183+ 6E2F                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 183+ 6E2F             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 183+ 6E2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6E2F             >
 183+ 6E2F             >                // dummy db directives used to calculate length of namec
 183+ 6E2F 53 50 41 4E >                db      "SPAN"
 183+ 6E33             >len_NFA         defl    $ - temp_NFA
 183+ 6E33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6E2F             >
 183+ 6E2F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6E30 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 183+ 6E34             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6E33 CE          >                db      {b $} | END_BIT     // msb as name end
 183+ 6E34             >
 183+ 6E34 1F 6E       >                dw      last_NFA            // Link to previous definition Name
 183+ 6E36             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6E36 CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6E39             >
 183+ 6E39             >
 183+ 6E39             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6E39             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6E39             >
 183+ 6E39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6E39 44          >                db      68
 184+ 6E3A                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 184+ 6E3A             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 184+ 6E3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6E3A             >
 184+ 6E3A             >                // dummy db directives used to calculate length of namec
 184+ 6E3A 48 41 4E 44 >                db      "HANDLER"
 184+ 6E3E 4C 45 52    >
 184+ 6E41             >len_NFA         defl    $ - temp_NFA
 184+ 6E41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6E3A             >
 184+ 6E3A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6E3B 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 184+ 6E3F 4C 45 52    >
 184+ 6E42             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6E41 D2          >                db      {b $} | END_BIT     // msb as name end
 184+ 6E42             >
 184+ 6E42 2F 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6E44             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6E44 CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6E47             >
 184+ 6E47             >
 184+ 6E47             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6E47             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6E47             >
 184+ 6E47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6E47 46          >                db      70
 185+ 6E48                              User_Def HP         , "HP"        , 72 // heap-pointer address
 185+ 6E48             >                New_Def  HP, "HP", User_Ptr, is_normal
 185+ 6E48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ 6E48             >
 185+ 6E48             >                // dummy db directives used to calculate length of namec
 185+ 6E48 48 50       >                db      "HP"
 185+ 6E4A             >len_NFA         defl    $ - temp_NFA
 185+ 6E4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ 6E48             >
 185+ 6E48 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ 6E49 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 185+ 6E4B             >                org     $-1                 // alter last byte of Name just above to set
 185+ 6E4A D0          >                db      {b $} | END_BIT     // msb as name end
 185+ 6E4B             >
 185+ 6E4B 3A 6E       >                dw      last_NFA            // Link to previous definition Name
 185+ 6E4D             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6E4D CD 3F 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6E50             >
 185+ 6E50             >
 185+ 6E50             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6E50             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6E50             >
 185+ 6E50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6E50 48          >                db      72
 186+ 6E51
 187+ 6E51              //  ______________________________________________________________________
 188+ 6E51              //
 189+ 6E51              // here         -- a
 190+ 6E51                              Colon_Def HERE, "HERE", is_normal
 190+ 6E51             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 190+ 6E51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 6E51             >
 190+ 6E51             >                // dummy db directives used to calculate length of namec
 190+ 6E51 48 45 52 45 >                db      "HERE"
 190+ 6E55             >len_NFA         defl    $ - temp_NFA
 190+ 6E55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 6E51             >
 190+ 6E51 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 6E52 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 190+ 6E56             >                org     $-1                 // alter last byte of Name just above to set
 190+ 6E55 C5          >                db      {b $} | END_BIT     // msb as name end
 190+ 6E56             >
 190+ 6E56 48 6E       >                dw      last_NFA            // Link to previous definition Name
 190+ 6E58             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 6E58 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 190+ 6E5B             >
 190+ 6E5B             >
 190+ 6E5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 6E5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 6E5B             >
 190+ 6E5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 6E5B 1B 6D 00 6B                  dw      DP, FETCH               // dp @
 192+ 6E5F 3C 69                        dw      EXIT                    // ;
 193+ 6E61
 194+ 6E61              //  ______________________________________________________________________
 195+ 6E61              //
 196+ 6E61              // allot        n --
 197+ 6E61                              Colon_Def ALLOT, "ALLOT", is_normal
 197+ 6E61             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 197+ 6E61             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 6E61             >
 197+ 6E61             >                // dummy db directives used to calculate length of namec
 197+ 6E61 41 4C 4C 4F >                db      "ALLOT"
 197+ 6E65 54          >
 197+ 6E66             >len_NFA         defl    $ - temp_NFA
 197+ 6E66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 6E61             >
 197+ 6E61 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 6E62 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 197+ 6E66 54          >
 197+ 6E67             >                org     $-1                 // alter last byte of Name just above to set
 197+ 6E66 D4          >                db      {b $} | END_BIT     // msb as name end
 197+ 6E67             >
 197+ 6E67 51 6E       >                dw      last_NFA            // Link to previous definition Name
 197+ 6E69             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 6E69 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 6E6C             >
 197+ 6E6C             >
 197+ 6E6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 6E6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 6E6C             >
 197+ 6E6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 6E6C 1B 6D E1 6A                  dw      DP,  PLUSSTORE          // dp +!
 199+ 6E70 3C 69                        dw      EXIT                    // ;
 200+ 6E72
 201+ 6E72              //  ______________________________________________________________________
 202+ 6E72              //
 203+ 6E72              // comma        n --
 204+ 6E72                              Colon_Def COMMA, ",", is_normal
 204+ 6E72             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 204+ 6E72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204+ 6E72             >
 204+ 6E72             >                // dummy db directives used to calculate length of namec
 204+ 6E72 2C          >                db      ","
 204+ 6E73             >len_NFA         defl    $ - temp_NFA
 204+ 6E73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204+ 6E72             >
 204+ 6E72 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204+ 6E73 2C          >                db      ","               // name string in 7-bit ascii, but
 204+ 6E74             >                org     $-1                 // alter last byte of Name just above to set
 204+ 6E73 AC          >                db      {b $} | END_BIT     // msb as name end
 204+ 6E74             >
 204+ 6E74 61 6E       >                dw      last_NFA            // Link to previous definition Name
 204+ 6E76             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 204+ 6E76 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 204+ 6E79             >
 204+ 6E79             >
 204+ 6E79             >                endif           ; ok        // for other definitions it "points" the correct handler
 204+ 6E79             >                // Use of "; ok" to suppress "warning[fwdref]"
 204+ 6E79             >
 204+ 6E79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205+ 6E79 58 6E 0B 6B                  dw      HERE, STORE             // here !
 206+ 6E7D 60 6C 69 6E                  dw      TWO, ALLOT              // 2 allot
 207+ 6E81 3C 69                        dw      EXIT                    // ;
 208+ 6E83
 209+ 6E83              //  ______________________________________________________________________
 210+ 6E83              //
 211+ 6E83              // ccomma       c --
 212+ 6E83                              Colon_Def CCOMMA, "C,", is_normal
 212+ 6E83             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 212+ 6E83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 6E83             >
 212+ 6E83             >                // dummy db directives used to calculate length of namec
 212+ 6E83 43 2C       >                db      "C,"
 212+ 6E85             >len_NFA         defl    $ - temp_NFA
 212+ 6E85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 6E83             >
 212+ 6E83 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 6E84 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 212+ 6E86             >                org     $-1                 // alter last byte of Name just above to set
 212+ 6E85 AC          >                db      {b $} | END_BIT     // msb as name end
 212+ 6E86             >
 212+ 6E86 72 6E       >                dw      last_NFA            // Link to previous definition Name
 212+ 6E88             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 6E88 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 212+ 6E8B             >
 212+ 6E8B             >
 212+ 6E8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 6E8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 6E8B             >
 212+ 6E8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 6E8B 58 6E 23 6B                  dw      HERE, CSTORE            // here c!
 214+ 6E8F 57 6C 69 6E                  dw      ONE, ALLOT              // 1 allot
 215+ 6E93 3C 69                        dw      EXIT                    // ;
 216+ 6E95
 217+ 6E95              //  ______________________________________________________________________
 218+ 6E95              //
 219+ 6E95              // s>d          n -- d
 220+ 6E95              // converts a single precision integer in a double precision
 221+ 6E95                              New_Def S_TO_D, "S>D", is_code, is_normal
 221+ 6E95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 221+ 6E95             >
 221+ 6E95             >                // dummy db directives used to calculate length of namec
 221+ 6E95 53 3E 44    >                db      "S>D"
 221+ 6E98             >len_NFA         defl    $ - temp_NFA
 221+ 6E98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 221+ 6E95             >
 221+ 6E95 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 221+ 6E96 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 221+ 6E99             >                org     $-1                 // alter last byte of Name just above to set
 221+ 6E98 C4          >                db      {b $} | END_BIT     // msb as name end
 221+ 6E99             >
 221+ 6E99 83 6E       >                dw      last_NFA            // Link to previous definition Name
 221+ 6E9B             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 221+ 6E9B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 221+ 6E9B ~           >
 221+ 6E9B ~           >
 221+ 6E9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 221+ 6E9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 221+ 6E9B             >
 221+ 6E9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 222+ 6E9B D1                           pop     de
 223+ 6E9C 21 00 00                     ld      hl, 0
 224+ 6E9F 7A                           ld      a, d
 225+ 6EA0 E6 80                        and     $80
 226+ 6EA2 28 01                        jr      z, S_to_D_Skip
 227+ 6EA4 2B                           dec     hl                  // $FFFF
 228+ 6EA5              S_to_D_Skip:
 229+ 6EA5 D5                           push    de
 230+ 6EA6 E5                           push    hl
 231+ 6EA7                              next
 231+ 6EA7 DD E9       >                jp      (ix)
 232+ 6EA9
 233+ 6EA9              //  ______________________________________________________________________
 234+ 6EA9              //
 235+ 6EA9              // -            n1 n2 -- n3
 236+ 6EA9              // subtraction
 237+ 6EA9                              New_Def SUBTRACT, "-", is_code, is_normal
 237+ 6EA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 237+ 6EA9             >
 237+ 6EA9             >                // dummy db directives used to calculate length of namec
 237+ 6EA9 2D          >                db      "-"
 237+ 6EAA             >len_NFA         defl    $ - temp_NFA
 237+ 6EAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 237+ 6EA9             >
 237+ 6EA9 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 237+ 6EAA 2D          >                db      "-"               // name string in 7-bit ascii, but
 237+ 6EAB             >                org     $-1                 // alter last byte of Name just above to set
 237+ 6EAA AD          >                db      {b $} | END_BIT     // msb as name end
 237+ 6EAB             >
 237+ 6EAB 95 6E       >                dw      last_NFA            // Link to previous definition Name
 237+ 6EAD             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 237+ 6EAD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 237+ 6EAD ~           >
 237+ 6EAD ~           >
 237+ 6EAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 237+ 6EAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 237+ 6EAD             >
 237+ 6EAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 238+ 6EAD D1                           pop     de
 239+ 6EAE E1                           pop     hl
 240+ 6EAF A7                           and     a
 241+ 6EB0 ED 52                        sbc     hl, de
 242+ 6EB2
 243+ 6EB2                              psh1
 243+ 6EB2 E5          >                push    hl
 243+ 6EB3 DD E9       >                jp      (ix)
 244+ 6EB5
 245+ 6EB5              //  ______________________________________________________________________
 246+ 6EB5              //
 247+ 6EB5              // =            n1 n2 -- n3
 248+ 6EB5              // equals
 249+ 6EB5                              Colon_Def EQUALS, "=", is_normal
 249+ 6EB5             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 249+ 6EB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 6EB5             >
 249+ 6EB5             >                // dummy db directives used to calculate length of namec
 249+ 6EB5 3D          >                db      "="
 249+ 6EB6             >len_NFA         defl    $ - temp_NFA
 249+ 6EB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 6EB5             >
 249+ 6EB5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 6EB6 3D          >                db      "="               // name string in 7-bit ascii, but
 249+ 6EB7             >                org     $-1                 // alter last byte of Name just above to set
 249+ 6EB6 BD          >                db      {b $} | END_BIT     // msb as name end
 249+ 6EB7             >
 249+ 6EB7 A9 6E       >                dw      last_NFA            // Link to previous definition Name
 249+ 6EB9             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 6EB9 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 249+ 6EBC             >
 249+ 6EBC             >
 249+ 6EBC             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 6EBC             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 6EBC             >
 249+ 6EBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 250+ 6EBC AD 6E 79 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 251+ 6EC0 3C 69                        dw      EXIT                    // ;
 252+ 6EC2
 253+ 6EC2              //  ______________________________________________________________________
 254+ 6EC2              //
 255+ 6EC2              // u<           u1 u2 -- u3
 256+ 6EC2              // unsigned less-than
 257+ 6EC2                              New_Def ULESS, "U<", is_code, is_normal
 257+ 6EC2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 257+ 6EC2             >
 257+ 6EC2             >                // dummy db directives used to calculate length of namec
 257+ 6EC2 55 3C       >                db      "U<"
 257+ 6EC4             >len_NFA         defl    $ - temp_NFA
 257+ 6EC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 257+ 6EC2             >
 257+ 6EC2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 257+ 6EC3 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 257+ 6EC5             >                org     $-1                 // alter last byte of Name just above to set
 257+ 6EC4 BC          >                db      {b $} | END_BIT     // msb as name end
 257+ 6EC5             >
 257+ 6EC5 B5 6E       >                dw      last_NFA            // Link to previous definition Name
 257+ 6EC7             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 257+ 6EC7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 257+ 6EC7 ~           >
 257+ 6EC7 ~           >
 257+ 6EC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 257+ 6EC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 257+ 6EC7             >
 257+ 6EC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 258+ 6EC7 D1                           pop     de
 259+ 6EC8 E1                           pop     hl
 260+ 6EC9 A7                           and     a
 261+ 6ECA ED 52                        sbc     hl, de
 262+ 6ECC 21 FF FF                     ld      hl, -1
 263+ 6ECF 38 01                        jr      c, ULess_Skip
 264+ 6ED1 23                               inc     hl
 265+ 6ED2              ULess_Skip:
 266+ 6ED2
 267+ 6ED2                              psh1
 267+ 6ED2 E5          >                push    hl
 267+ 6ED3 DD E9       >                jp      (ix)
 268+ 6ED5
 269+ 6ED5              //  ______________________________________________________________________
 270+ 6ED5              //
 271+ 6ED5              // <           n1 n2 -- n3
 272+ 6ED5              // less-than
 273+ 6ED5                              New_Def LESS, "<", is_code, is_normal
 273+ 6ED5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 273+ 6ED5             >
 273+ 6ED5             >                // dummy db directives used to calculate length of namec
 273+ 6ED5 3C          >                db      "<"
 273+ 6ED6             >len_NFA         defl    $ - temp_NFA
 273+ 6ED6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 273+ 6ED5             >
 273+ 6ED5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 273+ 6ED6 3C          >                db      "<"               // name string in 7-bit ascii, but
 273+ 6ED7             >                org     $-1                 // alter last byte of Name just above to set
 273+ 6ED6 BC          >                db      {b $} | END_BIT     // msb as name end
 273+ 6ED7             >
 273+ 6ED7 C2 6E       >                dw      last_NFA            // Link to previous definition Name
 273+ 6ED9             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 273+ 6ED9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 273+ 6ED9 ~           >
 273+ 6ED9 ~           >
 273+ 6ED9             >                endif           ; ok        // for other definitions it "points" the correct handler
 273+ 6ED9             >                // Use of "; ok" to suppress "warning[fwdref]"
 273+ 6ED9             >
 273+ 6ED9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 274+ 6ED9 D1                           pop     de
 275+ 6EDA E1                           pop     hl
 276+ 6EDB 7C                           ld      a, h
 277+ 6EDC EE 80                        xor     $80
 278+ 6EDE 67                           ld      h, a
 279+ 6EDF 7A                           ld      a, d
 280+ 6EE0 EE 80                        xor     $80
 281+ 6EE2 57                           ld      d, a
 282+ 6EE3              //              and     a
 283+ 6EE3 ED 52                        sbc     hl, de
 284+ 6EE5 ED 62                        sbc     hl, hl
 285+ 6EE7                              psh1
 285+ 6EE7 E5          >                push    hl
 285+ 6EE8 DD E9       >                jp      (ix)
 286+ 6EEA
 287+ 6EEA              //  ______________________________________________________________________
 288+ 6EEA              //
 289+ 6EEA              // >            n1 n2 -- n3
 290+ 6EEA              // greater than
 291+ 6EEA                              Colon_Def GREATER, ">", is_normal
 291+ 6EEA             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 291+ 6EEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ 6EEA             >
 291+ 6EEA             >                // dummy db directives used to calculate length of namec
 291+ 6EEA 3E          >                db      ">"
 291+ 6EEB             >len_NFA         defl    $ - temp_NFA
 291+ 6EEB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ 6EEA             >
 291+ 6EEA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ 6EEB 3E          >                db      ">"               // name string in 7-bit ascii, but
 291+ 6EEC             >                org     $-1                 // alter last byte of Name just above to set
 291+ 6EEB BE          >                db      {b $} | END_BIT     // msb as name end
 291+ 6EEC             >
 291+ 6EEC D5 6E       >                dw      last_NFA            // Link to previous definition Name
 291+ 6EEE             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 6EEE CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 291+ 6EF1             >
 291+ 6EF1             >
 291+ 6EF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 6EF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 6EF1             >
 291+ 6EF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 6EF1 74 6A D9 6E                  dw      SWAP, LESS              // swap <
 293+ 6EF5 3C 69                        dw      EXIT                    // ;
 294+ 6EF7              //  ______________________________________________________________________
 295+ 6EF7              //
 296+ 6EF7              // min          n1 n2 -- n3
 297+ 6EF7              // minimum between n1 and n2
 298+ 6EF7                              Colon_Def MIN, "MIN" , is_normal
 298+ 6EF7             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 298+ 6EF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 298+ 6EF7             >
 298+ 6EF7             >                // dummy db directives used to calculate length of namec
 298+ 6EF7 4D 49 4E    >                db      "MIN"
 298+ 6EFA             >len_NFA         defl    $ - temp_NFA
 298+ 6EFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 298+ 6EF7             >
 298+ 6EF7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 298+ 6EF8 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 298+ 6EFB             >                org     $-1                 // alter last byte of Name just above to set
 298+ 6EFA CE          >                db      {b $} | END_BIT     // msb as name end
 298+ 6EFB             >
 298+ 6EFB EA 6E       >                dw      last_NFA            // Link to previous definition Name
 298+ 6EFD             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 298+ 6EFD CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 298+ 6F00             >
 298+ 6F00             >
 298+ 6F00             >                endif           ; ok        // for other definitions it "points" the correct handler
 298+ 6F00             >                // Use of "; ok" to suppress "warning[fwdref]"
 298+ 6F00             >
 298+ 6F00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 299+ 6F00 D4 6A                        dw      TWO_DUP                 // 2dup
 300+ 6F02 EE 6E                        dw      GREATER                 // >
 301+ 6F04 1C 64                        dw      ZBRANCH
 302+ 6F06 04 00                        dw      Min_Skip - $   // if
 303+ 6F08 74 6A                        dw          SWAP                //      swap
 304+ 6F0A              Min_Skip:                                       // endif
 305+ 6F0A 52 6A                        dw      DROP                    // drop
 306+ 6F0C 3C 69                        dw      EXIT                    // ;
 307+ 6F0E
 308+ 6F0E              //  ______________________________________________________________________
 309+ 6F0E              //
 310+ 6F0E              // max          n1 n2 -- n3
 311+ 6F0E              // maximum between n1 and n2
 312+ 6F0E                              Colon_Def MAX, "MAX", is_normal
 312+ 6F0E             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 312+ 6F0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 312+ 6F0E             >
 312+ 6F0E             >                // dummy db directives used to calculate length of namec
 312+ 6F0E 4D 41 58    >                db      "MAX"
 312+ 6F11             >len_NFA         defl    $ - temp_NFA
 312+ 6F11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 312+ 6F0E             >
 312+ 6F0E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 312+ 6F0F 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 312+ 6F12             >                org     $-1                 // alter last byte of Name just above to set
 312+ 6F11 D8          >                db      {b $} | END_BIT     // msb as name end
 312+ 6F12             >
 312+ 6F12 F7 6E       >                dw      last_NFA            // Link to previous definition Name
 312+ 6F14             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 312+ 6F14 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 312+ 6F17             >
 312+ 6F17             >
 312+ 6F17             >                endif           ; ok        // for other definitions it "points" the correct handler
 312+ 6F17             >                // Use of "; ok" to suppress "warning[fwdref]"
 312+ 6F17             >
 312+ 6F17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 313+ 6F17 D4 6A                        dw      TWO_DUP                 // 2dup
 314+ 6F19 D9 6E                        dw      LESS                    // <
 315+ 6F1B 1C 64                        dw      ZBRANCH
 316+ 6F1D 04 00                        dw      Max_Skip - $   // if
 317+ 6F1F 74 6A                        dw          SWAP                //      swap
 318+ 6F21              Max_Skip:                                       // endif
 319+ 6F21 52 6A                        dw      DROP                    // drop
 320+ 6F23 3C 69                        dw      EXIT                    // ;
 321+ 6F25
 322+ 6F25              //  ______________________________________________________________________
 323+ 6F25              //
 324+ 6F25              // ?dup         n -- 0 | n n
 325+ 6F25              // duplicate if not zero
 326+ 6F25                              New_Def QDUP, "?DUP", is_code, is_normal
 326+ 6F25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 326+ 6F25             >
 326+ 6F25             >                // dummy db directives used to calculate length of namec
 326+ 6F25 3F 44 55 50 >                db      "?DUP"
 326+ 6F29             >len_NFA         defl    $ - temp_NFA
 326+ 6F29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 326+ 6F25             >
 326+ 6F25 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 326+ 6F26 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 326+ 6F2A             >                org     $-1                 // alter last byte of Name just above to set
 326+ 6F29 D0          >                db      {b $} | END_BIT     // msb as name end
 326+ 6F2A             >
 326+ 6F2A 0E 6F       >                dw      last_NFA            // Link to previous definition Name
 326+ 6F2C             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 326+ 6F2C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 326+ 6F2C ~           >
 326+ 6F2C ~           >
 326+ 6F2C             >                endif           ; ok        // for other definitions it "points" the correct handler
 326+ 6F2C             >                // Use of "; ok" to suppress "warning[fwdref]"
 326+ 6F2C             >
 326+ 6F2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 327+ 6F2C              QDup_Ptr:
 328+ 6F2C E1                           pop     hl
 329+ 6F2D 7C                           ld      a, h
 330+ 6F2E B5                           or      l
 331+ 6F2F 28 01                        jr      z, QDup_Skip
 332+ 6F31 E5                               push    hl
 333+ 6F32              QDup_Skip:
 334+ 6F32                              psh1
 334+ 6F32 E5          >                push    hl
 334+ 6F33 DD E9       >                jp      (ix)
 335+ 6F35
 336+ 6F35              //  ______________________________________________________________________
 337+ 6F35              //
 338+ 6F35              // -dup         n -- 0 | n n
 339+ 6F35              // duplicate if not zero
 340+ 6F35                              New_Def LDUP, "-DUP", is_code, is_normal
 340+ 6F35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 340+ 6F35             >
 340+ 6F35             >                // dummy db directives used to calculate length of namec
 340+ 6F35 2D 44 55 50 >                db      "-DUP"
 340+ 6F39             >len_NFA         defl    $ - temp_NFA
 340+ 6F39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 340+ 6F35             >
 340+ 6F35 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 340+ 6F36 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 340+ 6F3A             >                org     $-1                 // alter last byte of Name just above to set
 340+ 6F39 D0          >                db      {b $} | END_BIT     // msb as name end
 340+ 6F3A             >
 340+ 6F3A 25 6F       >                dw      last_NFA            // Link to previous definition Name
 340+ 6F3C             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 340+ 6F3C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 340+ 6F3C ~           >
 340+ 6F3C ~           >
 340+ 6F3C             >                endif           ; ok        // for other definitions it "points" the correct handler
 340+ 6F3C             >                // Use of "; ok" to suppress "warning[fwdref]"
 340+ 6F3C             >
 340+ 6F3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 341+ 6F3C C3 2C 6F                     jp      QDup_Ptr
 342+ 6F3F
 343+ 6F3F              //  ______________________________________________________________________
 344+ 6F3F              //
 345+ 6F3F              // emit         c --
 346+ 6F3F                              Colon_Def EMIT, "EMIT", is_normal
 346+ 6F3F             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 346+ 6F3F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 346+ 6F3F             >
 346+ 6F3F             >                // dummy db directives used to calculate length of namec
 346+ 6F3F 45 4D 49 54 >                db      "EMIT"
 346+ 6F43             >len_NFA         defl    $ - temp_NFA
 346+ 6F43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 346+ 6F3F             >
 346+ 6F3F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 346+ 6F40 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 346+ 6F44             >                org     $-1                 // alter last byte of Name just above to set
 346+ 6F43 D4          >                db      {b $} | END_BIT     // msb as name end
 346+ 6F44             >
 346+ 6F44 35 6F       >                dw      last_NFA            // Link to previous definition Name
 346+ 6F46             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 346+ 6F46 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 346+ 6F49             >
 346+ 6F49             >
 346+ 6F49             >                endif           ; ok        // for other definitions it "points" the correct handler
 346+ 6F49             >                // Use of "; ok" to suppress "warning[fwdref]"
 346+ 6F49             >
 346+ 6F49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 347+ 6F49 22 66                        dw      C_EMIT                      // (?emit)
 348+ 6F4B 2C 6F                        dw      QDUP                        // ?dup
 349+ 6F4D                                                                  // if
 350+ 6F4D 1C 64                        dw      ZBRANCH
 351+ 6F4F 0A 00                        dw      Emit_Skip - $
 352+ 6F51 E7 65                        dw          EMITC                   //      emitc
 353+ 6F53 57 6C                        dw          ONE                     //      1
 354+ 6F55 76 6D E1 6A                  dw          OUT, PLUSSTORE        //      out +!
 355+ 6F59              Emit_Skip:                                          // endif
 356+ 6F59 3C 69                        dw      EXIT                        // ;
 357+ 6F5B
 358+ 6F5B              //  ______________________________________________________________________
 359+ 6F5B              //
 360+ 6F5B              // space        --
 361+ 6F5B                              Colon_Def SPACE, "SPACE", is_normal
 361+ 6F5B             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 361+ 6F5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 361+ 6F5B             >
 361+ 6F5B             >                // dummy db directives used to calculate length of namec
 361+ 6F5B 53 50 41 43 >                db      "SPACE"
 361+ 6F5F 45          >
 361+ 6F60             >len_NFA         defl    $ - temp_NFA
 361+ 6F60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 361+ 6F5B             >
 361+ 6F5B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 361+ 6F5C 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 361+ 6F60 45          >
 361+ 6F61             >                org     $-1                 // alter last byte of Name just above to set
 361+ 6F60 C5          >                db      {b $} | END_BIT     // msb as name end
 361+ 6F61             >
 361+ 6F61 3F 6F       >                dw      last_NFA            // Link to previous definition Name
 361+ 6F63             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 361+ 6F63 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 361+ 6F66             >
 361+ 6F66             >
 361+ 6F66             >                endif           ; ok        // for other definitions it "points" the correct handler
 361+ 6F66             >                // Use of "; ok" to suppress "warning[fwdref]"
 361+ 6F66             >
 361+ 6F66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 362+ 6F66 7D 6C 46 6F                  dw      BL, EMIT                // bl emit
 363+ 6F6A 3C 69                        dw      EXIT                    // ;
 364+ 6F6C
 365+ 6F6C              //  ______________________________________________________________________
 366+ 6F6C              //
 367+ 6F6C              // traverse     a n -- a
 368+ 6F6C              // A dictionary entry is structured as follows
 369+ 6F6C              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 370+ 6F6C              //      +1   word name, last character is toggled with $80
 371+ 6F6C              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 372+ 6F6C              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 373+ 6F6C              // PFA: +6+n "is_code", definitions have no PFA. // +5
 374+ 6F6C              //
 375+ 6F6C                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 375+ 6F6C             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 375+ 6F6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 375+ 6F6C             >
 375+ 6F6C             >                // dummy db directives used to calculate length of namec
 375+ 6F6C 54 52 41 56 >                db      "TRAVERSE"
 375+ 6F70 45 52 53 45 >
 375+ 6F74             >len_NFA         defl    $ - temp_NFA
 375+ 6F74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 375+ 6F6C             >
 375+ 6F6C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 375+ 6F6D 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 375+ 6F71 45 52 53 45 >
 375+ 6F75             >                org     $-1                 // alter last byte of Name just above to set
 375+ 6F74 C5          >                db      {b $} | END_BIT     // msb as name end
 375+ 6F75             >
 375+ 6F75 5B 6F       >                dw      last_NFA            // Link to previous definition Name
 375+ 6F77             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 375+ 6F77 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 375+ 6F7A             >
 375+ 6F7A             >
 375+ 6F7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 375+ 6F7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 375+ 6F7A             >
 375+ 6F7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 376+ 6F7A 74 6A                        dw      SWAP                    // swap
 377+ 6F7C              Traverse_Begin:                                 // begin
 378+ 6F7C 44 6A B7 69                  dw          OVER, PLUS          //      over +
 379+ 6F80 A5 63 7F 00                  dw          LIT, 127            //      127
 380+ 6F84 44 6A 17 6B                  dw          OVER, CFETCH        //      over @
 381+ 6F88 D9 6E                        dw          LESS                //      <
 382+ 6F8A                                                              // until
 383+ 6F8A 1C 64                        dw      ZBRANCH
 384+ 6F8C F0 FF                        dw      Traverse_Begin - $
 385+ 6F8E 5B 6A                        dw      NIP                     //  nip
 386+ 6F90 3C 69                        dw      EXIT                    //  ;
 387+ 6F92
 388+ 6F92              //  ______________________________________________________________________
 389+ 6F92              //
 390+ 6F92              // latest       -- nfa
 391+ 6F92                              Colon_Def LATEST, "LATEST", is_normal
 391+ 6F92             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 391+ 6F92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 391+ 6F92             >
 391+ 6F92             >                // dummy db directives used to calculate length of namec
 391+ 6F92 4C 41 54 45 >                db      "LATEST"
 391+ 6F96 53 54       >
 391+ 6F98             >len_NFA         defl    $ - temp_NFA
 391+ 6F98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 391+ 6F92             >
 391+ 6F92 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 391+ 6F93 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 391+ 6F97 53 54       >
 391+ 6F99             >                org     $-1                 // alter last byte of Name just above to set
 391+ 6F98 D4          >                db      {b $} | END_BIT     // msb as name end
 391+ 6F99             >
 391+ 6F99 6C 6F       >                dw      last_NFA            // Link to previous definition Name
 391+ 6F9B             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 391+ 6F9B CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 391+ 6F9E             >
 391+ 6F9E             >
 391+ 6F9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 391+ 6F9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 391+ 6F9E             >
 391+ 6F9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 392+ 6F9E A9 6D                        dw      CURRENT                 // current
 393+ 6FA0 00 6B 00 6B                  dw      FETCH, FETCH            // @ @
 394+ 6FA4 3C 69                        dw      EXIT                    // ;
 395+ 6FA6
 396+ 6FA6              //  ______________________________________________________________________
 397+ 6FA6              //
 398+ 6FA6              // lfa          pfa -- lfa
 399+ 6FA6                              Colon_Def LFA, "LFA", is_normal
 399+ 6FA6             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 399+ 6FA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 399+ 6FA6             >
 399+ 6FA6             >                // dummy db directives used to calculate length of namec
 399+ 6FA6 4C 46 41    >                db      "LFA"
 399+ 6FA9             >len_NFA         defl    $ - temp_NFA
 399+ 6FA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 399+ 6FA6             >
 399+ 6FA6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 399+ 6FA7 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 399+ 6FAA             >                org     $-1                 // alter last byte of Name just above to set
 399+ 6FA9 C1          >                db      {b $} | END_BIT     // msb as name end
 399+ 6FAA             >
 399+ 6FAA 92 6F       >                dw      last_NFA            // Link to previous definition Name
 399+ 6FAC             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 399+ 6FAC CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 399+ 6FAF             >
 399+ 6FAF             >
 399+ 6FAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 399+ 6FAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 399+ 6FAF             >
 399+ 6FAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 400+ 6FAF A5 63 05 00                  dw      LIT, 5                  // cell- --> 5
 401+ 6FB3 AD 6E                        dw      SUBTRACT                // cell- --> -
 402+ 6FB5 3C 69                        dw      EXIT                    // ;
 403+ 6FB7
 404+ 6FB7              //  ______________________________________________________________________
 405+ 6FB7              //
 406+ 6FB7              // cfa          pfa -- cfa
 407+ 6FB7                              Colon_Def CFA, "CFA", is_normal
 407+ 6FB7             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 407+ 6FB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 407+ 6FB7             >
 407+ 6FB7             >                // dummy db directives used to calculate length of namec
 407+ 6FB7 43 46 41    >                db      "CFA"
 407+ 6FBA             >len_NFA         defl    $ - temp_NFA
 407+ 6FBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 407+ 6FB7             >
 407+ 6FB7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 407+ 6FB8 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 407+ 6FBB             >                org     $-1                 // alter last byte of Name just above to set
 407+ 6FBA C1          >                db      {b $} | END_BIT     // msb as name end
 407+ 6FBB             >
 407+ 6FBB A6 6F       >                dw      last_NFA            // Link to previous definition Name
 407+ 6FBD             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 407+ 6FBD CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 407+ 6FC0             >
 407+ 6FC0             >
 407+ 6FC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 407+ 6FC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 407+ 6FC0             >
 407+ 6FC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 408+ 6FC0              //              dw      CELL_MINUS              // cell-
 409+ 6FC0 69 6C AD 6E                  dw      THREE, SUBTRACT         // 3 -
 410+ 6FC4 3C 69                        dw      EXIT                    // ;
 411+ 6FC6
 412+ 6FC6              //  ______________________________________________________________________
 413+ 6FC6              //
 414+ 6FC6              // nfa          pfa -- nfa
 415+ 6FC6                              Colon_Def NFA, "NFA", is_normal
 415+ 6FC6             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 415+ 6FC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 415+ 6FC6             >
 415+ 6FC6             >                // dummy db directives used to calculate length of namec
 415+ 6FC6 4E 46 41    >                db      "NFA"
 415+ 6FC9             >len_NFA         defl    $ - temp_NFA
 415+ 6FC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 415+ 6FC6             >
 415+ 6FC6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 415+ 6FC7 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 415+ 6FCA             >                org     $-1                 // alter last byte of Name just above to set
 415+ 6FC9 C1          >                db      {b $} | END_BIT     // msb as name end
 415+ 6FCA             >
 415+ 6FCA B7 6F       >                dw      last_NFA            // Link to previous definition Name
 415+ 6FCC             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 415+ 6FCC CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 415+ 6FCF             >
 415+ 6FCF             >
 415+ 6FCF             >                endif           ; ok        // for other definitions it "points" the correct handler
 415+ 6FCF             >                // Use of "; ok" to suppress "warning[fwdref]"
 415+ 6FCF             >
 415+ 6FCF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 416+ 6FCF A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 417+ 6FD3 AD 6E                        dw      SUBTRACT                // -
 418+ 6FD5 73 6C                        dw      NEG_ONE                 // -1
 419+ 6FD7 77 6F                        dw      TRAVERSE                // traverse
 420+ 6FD9 3C 69                        dw      EXIT                    // ;
 421+ 6FDB
 422+ 6FDB              //  ______________________________________________________________________
 423+ 6FDB              //
 424+ 6FDB              // pfa          nfa -- pfa
 425+ 6FDB                              Colon_Def PFA, "PFA", is_normal
 425+ 6FDB             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 425+ 6FDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 425+ 6FDB             >
 425+ 6FDB             >                // dummy db directives used to calculate length of namec
 425+ 6FDB 50 46 41    >                db      "PFA"
 425+ 6FDE             >len_NFA         defl    $ - temp_NFA
 425+ 6FDE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 425+ 6FDB             >
 425+ 6FDB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 425+ 6FDC 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 425+ 6FDF             >                org     $-1                 // alter last byte of Name just above to set
 425+ 6FDE C1          >                db      {b $} | END_BIT     // msb as name end
 425+ 6FDF             >
 425+ 6FDF C6 6F       >                dw      last_NFA            // Link to previous definition Name
 425+ 6FE1             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 425+ 6FE1 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 425+ 6FE4             >
 425+ 6FE4             >
 425+ 6FE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 425+ 6FE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 425+ 6FE4             >
 425+ 6FE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 426+ 6FE4 57 6C                        dw      ONE                     // 1
 427+ 6FE6 77 6F                        dw      TRAVERSE                // traverse
 428+ 6FE8 A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 429+ 6FEC B7 69                        dw      PLUS                    // +
 430+ 6FEE 3C 69                        dw      EXIT                    // ;
 431+ 6FF0
 432+ 6FF0              //  ______________________________________________________________________
 433+ 6FF0              //
 434+ 6FF0              // >body        cfa -- pfa
 435+ 6FF0                              Colon_Def TO_BODY, ">BODY", is_normal
 435+ 6FF0             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 435+ 6FF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 435+ 6FF0             >
 435+ 6FF0             >                // dummy db directives used to calculate length of namec
 435+ 6FF0 3E 42 4F 44 >                db      ">BODY"
 435+ 6FF4 59          >
 435+ 6FF5             >len_NFA         defl    $ - temp_NFA
 435+ 6FF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 435+ 6FF0             >
 435+ 6FF0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 435+ 6FF1 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 435+ 6FF5 59          >
 435+ 6FF6             >                org     $-1                 // alter last byte of Name just above to set
 435+ 6FF5 D9          >                db      {b $} | END_BIT     // msb as name end
 435+ 6FF6             >
 435+ 6FF6 DB 6F       >                dw      last_NFA            // Link to previous definition Name
 435+ 6FF8             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 435+ 6FF8 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 435+ 6FFB             >
 435+ 6FFB             >
 435+ 6FFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 435+ 6FFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 435+ 6FFB             >
 435+ 6FFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 436+ 6FFB 69 6C B7 69                  dw      THREE, PLUS             // cell+ --> 3 +
 437+ 6FFF 3C 69                        dw      EXIT                    // ;
 438+ 7001
 439+ 7001              //  ______________________________________________________________________
 440+ 7001              //
 441+ 7001              // <name        cfa -- nfa
 442+ 7001                              Colon_Def TO_NAME, "<NAME", is_normal
 442+ 7001             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 442+ 7001             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ 7001             >
 442+ 7001             >                // dummy db directives used to calculate length of namec
 442+ 7001 3C 4E 41 4D >                db      "<NAME"
 442+ 7005 45          >
 442+ 7006             >len_NFA         defl    $ - temp_NFA
 442+ 7006             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ 7001             >
 442+ 7001 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ 7002 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 442+ 7006 45          >
 442+ 7007             >                org     $-1                 // alter last byte of Name just above to set
 442+ 7006 C5          >                db      {b $} | END_BIT     // msb as name end
 442+ 7007             >
 442+ 7007 F0 6F       >                dw      last_NFA            // Link to previous definition Name
 442+ 7009             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 7009 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 442+ 700C             >
 442+ 700C             >
 442+ 700C             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 700C             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 700C             >
 442+ 700C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 700C F8 6F                        dw      TO_BODY                 // >body
 444+ 700E CC 6F                        dw      NFA                     // nfa
 445+ 7010 3C 69                        dw      EXIT                    // ;
 446+ 7012
 447+ 7012              //  ______________________________________________________________________
 448+ 7012              //
 449+ 7012              // !csp         --
 450+ 7012              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 451+ 7012                              Colon_Def STORE_CSP, "!CSP", is_normal
 451+ 7012             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 451+ 7012             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 451+ 7012             >
 451+ 7012             >                // dummy db directives used to calculate length of namec
 451+ 7012 21 43 53 50 >                db      "!CSP"
 451+ 7016             >len_NFA         defl    $ - temp_NFA
 451+ 7016             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 451+ 7012             >
 451+ 7012 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 451+ 7013 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 451+ 7017             >                org     $-1                 // alter last byte of Name just above to set
 451+ 7016 D0          >                db      {b $} | END_BIT     // msb as name end
 451+ 7017             >
 451+ 7017 01 70       >                dw      last_NFA            // Link to previous definition Name
 451+ 7019             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 451+ 7019 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 451+ 701C             >
 451+ 701C             >
 451+ 701C             >                endif           ; ok        // for other definitions it "points" the correct handler
 451+ 701C             >                // Use of "; ok" to suppress "warning[fwdref]"
 451+ 701C             >
 451+ 701C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 452+ 701C 0C 69                        dw      SPFETCH                 // sp@
 453+ 701E DE 6D 0B 6B                  dw      CSP, STORE              // csp !
 454+ 7022 3C 69                        dw      EXIT                    // ;
 455+ 7024
 456+ 7024              //  ______________________________________________________________________
 457+ 7024              //
 458+ 7024              // ?error       f n --
 459+ 7024              // rase error n if flag f it true
 460+ 7024                              Colon_Def QERROR, "?ERROR", is_normal
 460+ 7024             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 460+ 7024             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 460+ 7024             >
 460+ 7024             >                // dummy db directives used to calculate length of namec
 460+ 7024 3F 45 52 52 >                db      "?ERROR"
 460+ 7028 4F 52       >
 460+ 702A             >len_NFA         defl    $ - temp_NFA
 460+ 702A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 460+ 7024             >
 460+ 7024 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 460+ 7025 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 460+ 7029 4F 52       >
 460+ 702B             >                org     $-1                 // alter last byte of Name just above to set
 460+ 702A D2          >                db      {b $} | END_BIT     // msb as name end
 460+ 702B             >
 460+ 702B 12 70       >                dw      last_NFA            // Link to previous definition Name
 460+ 702D             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 460+ 702D CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 460+ 7030             >
 460+ 7030             >
 460+ 7030             >                endif           ; ok        // for other definitions it "points" the correct handler
 460+ 7030             >                // Use of "; ok" to suppress "warning[fwdref]"
 460+ 7030             >
 460+ 7030             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 461+ 7030 74 6A                        dw      SWAP                    // swap
 462+ 7032                                                              // if
 463+ 7032 1C 64                        dw      ZBRANCH
 464+ 7034 08 00                        dw      QError_Else - $
 465+ 7036 C0 75                        dw          ERROR               //      error  ( is a forward-ref )
 466+ 7038                                                              // else
 467+ 7038 07 64                        dw      BRANCH
 468+ 703A 04 00                        dw      QError_Endif - $
 469+ 703C              QError_Else:
 470+ 703C 52 6A                        dw          DROP                //      drop
 471+ 703E              QError_Endif:                                   // endif
 472+ 703E 3C 69                        dw      EXIT                    // ;
 473+ 7040
 474+ 7040              //  ______________________________________________________________________
 475+ 7040              //
 476+ 7040              // ?comp       --
 477+ 7040              // raise msg #17 if not compiling
 478+ 7040                              Colon_Def QCOMP, "?COMP", is_normal
 478+ 7040             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 478+ 7040             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7040             >
 478+ 7040             >                // dummy db directives used to calculate length of namec
 478+ 7040 3F 43 4F 4D >                db      "?COMP"
 478+ 7044 50          >
 478+ 7045             >len_NFA         defl    $ - temp_NFA
 478+ 7045             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7040             >
 478+ 7040 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7041 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 478+ 7045 50          >
 478+ 7046             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7045 D0          >                db      {b $} | END_BIT     // msb as name end
 478+ 7046             >
 478+ 7046 24 70       >                dw      last_NFA            // Link to previous definition Name
 478+ 7048             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7048 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 704B             >
 478+ 704B             >
 478+ 704B             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 704B             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 704B             >
 478+ 704B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 704B B5 6D 00 6B                  dw      STATE, FETCH            // state @
 480+ 704F 79 69                        dw      ZEQUAL                  // 0=
 481+ 7051 A5 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 482+ 7055 2D 70                        dw      QERROR                  // ?error
 483+ 7057 3C 69                        dw      EXIT                    // ;
 484+ 7059
 485+ 7059              //  ______________________________________________________________________
 486+ 7059              //
 487+ 7059              // ?exec       --
 488+ 7059              // raise msg #18 if compiling
 489+ 7059                              Colon_Def QEXEC, "?EXEC", is_normal
 489+ 7059             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 489+ 7059             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 489+ 7059             >
 489+ 7059             >                // dummy db directives used to calculate length of namec
 489+ 7059 3F 45 58 45 >                db      "?EXEC"
 489+ 705D 43          >
 489+ 705E             >len_NFA         defl    $ - temp_NFA
 489+ 705E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 489+ 7059             >
 489+ 7059 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 489+ 705A 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 489+ 705E 43          >
 489+ 705F             >                org     $-1                 // alter last byte of Name just above to set
 489+ 705E C3          >                db      {b $} | END_BIT     // msb as name end
 489+ 705F             >
 489+ 705F 40 70       >                dw      last_NFA            // Link to previous definition Name
 489+ 7061             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 489+ 7061 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 489+ 7064             >
 489+ 7064             >
 489+ 7064             >                endif           ; ok        // for other definitions it "points" the correct handler
 489+ 7064             >                // Use of "; ok" to suppress "warning[fwdref]"
 489+ 7064             >
 489+ 7064             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 490+ 7064 B5 6D 00 6B                  dw      STATE, FETCH            // state @
 491+ 7068 A5 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 492+ 706C 2D 70                        dw      QERROR                  // ?error
 493+ 706E 3C 69                        dw      EXIT                    // ;
 494+ 7070
 495+ 7070              //  ______________________________________________________________________
 496+ 7070              //
 497+ 7070              // ?pairs       n1 n2 --
 498+ 7070              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 499+ 7070                              Colon_Def QPAIRS, "?PAIRS", is_normal
 499+ 7070             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 499+ 7070             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 499+ 7070             >
 499+ 7070             >                // dummy db directives used to calculate length of namec
 499+ 7070 3F 50 41 49 >                db      "?PAIRS"
 499+ 7074 52 53       >
 499+ 7076             >len_NFA         defl    $ - temp_NFA
 499+ 7076             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 499+ 7070             >
 499+ 7070 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 499+ 7071 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 499+ 7075 52 53       >
 499+ 7077             >                org     $-1                 // alter last byte of Name just above to set
 499+ 7076 D3          >                db      {b $} | END_BIT     // msb as name end
 499+ 7077             >
 499+ 7077 59 70       >                dw      last_NFA            // Link to previous definition Name
 499+ 7079             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 499+ 7079 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 499+ 707C             >
 499+ 707C             >
 499+ 707C             >                endif           ; ok        // for other definitions it "points" the correct handler
 499+ 707C             >                // Use of "; ok" to suppress "warning[fwdref]"
 499+ 707C             >
 499+ 707C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 500+ 707C AD 6E                        dw      SUBTRACT                // -
 501+ 707E A5 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 502+ 7082 2D 70                        dw      QERROR                  // ?error
 503+ 7084 3C 69                        dw      EXIT                    // ;
 504+ 7086
 505+ 7086              //  ______________________________________________________________________
 506+ 7086              //
 507+ 7086              // ?csp       --
 508+ 7086              // raise msg #20 if surrent SP in not what previously saved in CSP.
 509+ 7086              // Compiler relies on that for  syntax checking of structures
 510+ 7086                              Colon_Def QCSP, "?CSP", is_normal
 510+ 7086             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 510+ 7086             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 510+ 7086             >
 510+ 7086             >                // dummy db directives used to calculate length of namec
 510+ 7086 3F 43 53 50 >                db      "?CSP"
 510+ 708A             >len_NFA         defl    $ - temp_NFA
 510+ 708A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 510+ 7086             >
 510+ 7086 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 510+ 7087 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 510+ 708B             >                org     $-1                 // alter last byte of Name just above to set
 510+ 708A D0          >                db      {b $} | END_BIT     // msb as name end
 510+ 708B             >
 510+ 708B 70 70       >                dw      last_NFA            // Link to previous definition Name
 510+ 708D             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 510+ 708D CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 510+ 7090             >
 510+ 7090             >
 510+ 7090             >                endif           ; ok        // for other definitions it "points" the correct handler
 510+ 7090             >                // Use of "; ok" to suppress "warning[fwdref]"
 510+ 7090             >
 510+ 7090             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 511+ 7090 0C 69                        dw      SPFETCH                 // sp@
 512+ 7092 DE 6D 00 6B                  dw      CSP, FETCH              // csp @
 513+ 7096 AD 6E                        dw      SUBTRACT                // -
 514+ 7098 A5 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 515+ 709C 2D 70                        dw      QERROR                  // ?error
 516+ 709E 3C 69                        dw      EXIT                    // ;
 517+ 70A0
 518+ 70A0              //  ______________________________________________________________________
 519+ 70A0              //
 520+ 70A0              // ?loading      --
 521+ 70A0              // raise msg #22 if not loading
 522+ 70A0                              Colon_Def QLOADING, "?LOADING", is_normal
 522+ 70A0             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 522+ 70A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 70A0             >
 522+ 70A0             >                // dummy db directives used to calculate length of namec
 522+ 70A0 3F 4C 4F 41 >                db      "?LOADING"
 522+ 70A4 44 49 4E 47 >
 522+ 70A8             >len_NFA         defl    $ - temp_NFA
 522+ 70A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 70A0             >
 522+ 70A0 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 70A1 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 522+ 70A5 44 49 4E 47 >
 522+ 70A9             >                org     $-1                 // alter last byte of Name just above to set
 522+ 70A8 C7          >                db      {b $} | END_BIT     // msb as name end
 522+ 70A9             >
 522+ 70A9 86 70       >                dw      last_NFA            // Link to previous definition Name
 522+ 70AB             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 70AB CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 522+ 70AE             >
 522+ 70AE             >
 522+ 70AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 70AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 70AE             >
 522+ 70AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 70AE 62 6D 00 6B                  dw      BLK, FETCH              // blk @
 524+ 70B2 79 69                        dw      ZEQUAL                  // 0=
 525+ 70B4 A5 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 526+ 70B8 2D 70                        dw      QERROR                  // ?error
 527+ 70BA 3C 69                        dw      EXIT                    // ;
 528+ 70BC
 529+ 70BC              //  ______________________________________________________________________
 530+ 70BC              //
 531+ 70BC              // compile      --
 532+ 70BC              // compiles the following word
 533+ 70BC                              Colon_Def COMPILE, "COMPILE", is_normal
 533+ 70BC             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 533+ 70BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 533+ 70BC             >
 533+ 70BC             >                // dummy db directives used to calculate length of namec
 533+ 70BC 43 4F 4D 50 >                db      "COMPILE"
 533+ 70C0 49 4C 45    >
 533+ 70C3             >len_NFA         defl    $ - temp_NFA
 533+ 70C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 533+ 70BC             >
 533+ 70BC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 533+ 70BD 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 533+ 70C1 49 4C 45    >
 533+ 70C4             >                org     $-1                 // alter last byte of Name just above to set
 533+ 70C3 C5          >                db      {b $} | END_BIT     // msb as name end
 533+ 70C4             >
 533+ 70C4 A0 70       >                dw      last_NFA            // Link to previous definition Name
 533+ 70C6             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 533+ 70C6 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 533+ 70C9             >
 533+ 70C9             >
 533+ 70C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 533+ 70C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 533+ 70C9             >
 533+ 70C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 534+ 70C9 48 70                        dw      QCOMP                   // ?comp
 535+ 70CB 5F 69                        dw      R_TO                    // r>
 536+ 70CD 7F 6A F6 69                  dw      DUP, CELL_PLUS          // dup, cell+
 537+ 70D1 4D 69                        dw      TO_R                    // >r
 538+ 70D3 00 6B 76 6E                  dw      FETCH, COMMA            // @ ,
 539+ 70D7 3C 69                        dw      EXIT                    // ;
 540+ 70D9
 541+ 70D9              //  ______________________________________________________________________
 542+ 70D9              //
 543+ 70D9              // compile,     --
 544+ 70D9              // compiles the following word
 545+ 70D9                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 545+ 70D9             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 545+ 70D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 545+ 70D9             >
 545+ 70D9             >                // dummy db directives used to calculate length of namec
 545+ 70D9 43 4F 4D 50 >                db      "COMPILE,"
 545+ 70DD 49 4C 45 2C >
 545+ 70E1             >len_NFA         defl    $ - temp_NFA
 545+ 70E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 545+ 70D9             >
 545+ 70D9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 545+ 70DA 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 545+ 70DE 49 4C 45 2C >
 545+ 70E2             >                org     $-1                 // alter last byte of Name just above to set
 545+ 70E1 AC          >                db      {b $} | END_BIT     // msb as name end
 545+ 70E2             >
 545+ 70E2 BC 70       >                dw      last_NFA            // Link to previous definition Name
 545+ 70E4             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 545+ 70E4 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 545+ 70E7             >
 545+ 70E7             >
 545+ 70E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 545+ 70E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 545+ 70E7             >
 545+ 70E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 546+ 70E7 48 70                        dw      QCOMP                   // ?comp
 547+ 70E9 76 6E                        dw      COMMA                   // ,
 548+ 70EB 3C 69                        dw      EXIT                    // ;
 549+ 70ED
 550+ 70ED              //  ______________________________________________________________________
 551+ 70ED              //
 552+ 70ED              // [            --
 553+ 70ED              // stop compilation
 554+ 70ED                              Colon_Def SQUARED_OPEN, "[", is_immediate
 554+ 70ED             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 554+ 70ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 554+ 70ED             >
 554+ 70ED             >                // dummy db directives used to calculate length of namec
 554+ 70ED 5B          >                db      "["
 554+ 70EE             >len_NFA         defl    $ - temp_NFA
 554+ 70EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 554+ 70ED             >
 554+ 70ED C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 554+ 70EE 5B          >                db      "["               // name string in 7-bit ascii, but
 554+ 70EF             >                org     $-1                 // alter last byte of Name just above to set
 554+ 70EE DB          >                db      {b $} | END_BIT     // msb as name end
 554+ 70EF             >
 554+ 70EF D9 70       >                dw      last_NFA            // Link to previous definition Name
 554+ 70F1             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 554+ 70F1 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 554+ 70F4             >
 554+ 70F4             >
 554+ 70F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 554+ 70F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 554+ 70F4             >
 554+ 70F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 555+ 70F4 4E 6C                        dw      ZERO                    // 0
 556+ 70F6 B5 6D 0B 6B                  dw      STATE, STORE            // state !
 557+ 70FA 3C 69                        dw      EXIT                    // ; immediate
 558+ 70FC
 559+ 70FC              //  ______________________________________________________________________
 560+ 70FC              //
 561+ 70FC              // ]            --
 562+ 70FC              // start compilation
 563+ 70FC                              Colon_Def SQUARED_CLOSE, "]", is_normal
 563+ 70FC             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 563+ 70FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 563+ 70FC             >
 563+ 70FC             >                // dummy db directives used to calculate length of namec
 563+ 70FC 5D          >                db      "]"
 563+ 70FD             >len_NFA         defl    $ - temp_NFA
 563+ 70FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 563+ 70FC             >
 563+ 70FC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 563+ 70FD 5D          >                db      "]"               // name string in 7-bit ascii, but
 563+ 70FE             >                org     $-1                 // alter last byte of Name just above to set
 563+ 70FD DD          >                db      {b $} | END_BIT     // msb as name end
 563+ 70FE             >
 563+ 70FE ED 70       >                dw      last_NFA            // Link to previous definition Name
 563+ 7100             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 563+ 7100 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 563+ 7103             >
 563+ 7103             >
 563+ 7103             >                endif           ; ok        // for other definitions it "points" the correct handler
 563+ 7103             >                // Use of "; ok" to suppress "warning[fwdref]"
 563+ 7103             >
 563+ 7103             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 564+ 7103 A5 63 C0 00                  dw      LIT, $C0                // 192
 565+ 7107 B5 6D 0B 6B                  dw      STATE, STORE            // state !
 566+ 710B 3C 69                        dw      EXIT                    // ;
 567+ 710D
 568+ 710D              //  ______________________________________________________________________
 569+ 710D              //
 570+ 710D              // smudge       --
 571+ 710D              // toggle smudge bit of latest definition
 572+ 710D                              Colon_Def SMUDGE, "SMUDGE", is_normal
 572+ 710D             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 572+ 710D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 572+ 710D             >
 572+ 710D             >                // dummy db directives used to calculate length of namec
 572+ 710D 53 4D 55 44 >                db      "SMUDGE"
 572+ 7111 47 45       >
 572+ 7113             >len_NFA         defl    $ - temp_NFA
 572+ 7113             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 572+ 710D             >
 572+ 710D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 572+ 710E 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 572+ 7112 47 45       >
 572+ 7114             >                org     $-1                 // alter last byte of Name just above to set
 572+ 7113 C5          >                db      {b $} | END_BIT     // msb as name end
 572+ 7114             >
 572+ 7114 FC 70       >                dw      last_NFA            // Link to previous definition Name
 572+ 7116             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 572+ 7116 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 572+ 7119             >
 572+ 7119             >
 572+ 7119             >                endif           ; ok        // for other definitions it "points" the correct handler
 572+ 7119             >                // Use of "; ok" to suppress "warning[fwdref]"
 572+ 7119             >
 572+ 7119             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 573+ 7119 9B 6F                        dw      LATEST                  // latest
 574+ 711B A5 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 575+ 711F F5 6A                        dw      TOGGLE                  // toggle
 576+ 7121 3C 69                        dw      EXIT                    // ;
 577+ 7123
 578+ 7123              //  ______________________________________________________________________
 579+ 7123              //
 580+ 7123              // immediate    --
 581+ 7123              // make immediate the latest definition
 582+ 7123                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 582+ 7123             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 582+ 7123             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 582+ 7123             >
 582+ 7123             >                // dummy db directives used to calculate length of namec
 582+ 7123 49 4D 4D 45 >                db      "IMMEDIATE"
 582+ 7127 44 49 41 54 >
 582+ 712B 45          >
 582+ 712C             >len_NFA         defl    $ - temp_NFA
 582+ 712C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 582+ 7123             >
 582+ 7123 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 582+ 7124 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 582+ 7128 44 49 41 54 >
 582+ 712C 45          >
 582+ 712D             >                org     $-1                 // alter last byte of Name just above to set
 582+ 712C C5          >                db      {b $} | END_BIT     // msb as name end
 582+ 712D             >
 582+ 712D 0D 71       >                dw      last_NFA            // Link to previous definition Name
 582+ 712F             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 582+ 712F CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 582+ 7132             >
 582+ 7132             >
 582+ 7132             >                endif           ; ok        // for other definitions it "points" the correct handler
 582+ 7132             >                // Use of "; ok" to suppress "warning[fwdref]"
 582+ 7132             >
 582+ 7132             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 583+ 7132 9B 6F                        dw      LATEST                  // latest
 584+ 7134 A5 63 40 00                  dw      LIT, $40                // 64
 585+ 7138 F5 6A                        dw      TOGGLE                  // toggle
 586+ 713A 3C 69                        dw      EXIT                    // ;
 587+ 713C
 588+ 713C              //  ______________________________________________________________________
 589+ 713C              //
 590+ 713C              // hex          --
 591+ 713C              // change numeration base
 592+ 713C                              Colon_Def HEX, "HEX", is_normal
 592+ 713C             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 592+ 713C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 592+ 713C             >
 592+ 713C             >                // dummy db directives used to calculate length of namec
 592+ 713C 48 45 58    >                db      "HEX"
 592+ 713F             >len_NFA         defl    $ - temp_NFA
 592+ 713F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 592+ 713C             >
 592+ 713C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 592+ 713D 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 592+ 7140             >                org     $-1                 // alter last byte of Name just above to set
 592+ 713F D8          >                db      {b $} | END_BIT     // msb as name end
 592+ 7140             >
 592+ 7140 23 71       >                dw      last_NFA            // Link to previous definition Name
 592+ 7142             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 592+ 7142 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 592+ 7145             >
 592+ 7145             >
 592+ 7145             >                endif           ; ok        // for other definitions it "points" the correct handler
 592+ 7145             >                // Use of "; ok" to suppress "warning[fwdref]"
 592+ 7145             >
 592+ 7145             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 593+ 7145 A5 63 10 00                  dw      LIT, 16                 // 16
 594+ 7149 C0 6D 0B 6B                  dw      BASE, STORE             // base !
 595+ 714D 3C 69                        dw      EXIT                    // ;
 596+ 714F
 597+ 714F              //  ______________________________________________________________________
 598+ 714F              //
 599+ 714F              // decimal      --
 600+ 714F              // change numeration base
 601+ 714F                              Colon_Def DECIMAL, "DECIMAL", is_normal
 601+ 714F             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 601+ 714F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ 714F             >
 601+ 714F             >                // dummy db directives used to calculate length of namec
 601+ 714F 44 45 43 49 >                db      "DECIMAL"
 601+ 7153 4D 41 4C    >
 601+ 7156             >len_NFA         defl    $ - temp_NFA
 601+ 7156             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ 714F             >
 601+ 714F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ 7150 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 601+ 7154 4D 41 4C    >
 601+ 7157             >                org     $-1                 // alter last byte of Name just above to set
 601+ 7156 CC          >                db      {b $} | END_BIT     // msb as name end
 601+ 7157             >
 601+ 7157 3C 71       >                dw      last_NFA            // Link to previous definition Name
 601+ 7159             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 7159 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 601+ 715C             >
 601+ 715C             >
 601+ 715C             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 715C             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 715C             >
 601+ 715C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 715C A5 63 0A 00                  dw      LIT, 10                 // 10
 603+ 7160 C0 6D 0B 6B                  dw      BASE, STORE             // base !
 604+ 7164 3C 69                        dw      EXIT                    // ;
 605+ 7166
 606+ 7166              //  ______________________________________________________________________
 607+ 7166              //
 608+ 7166              // (;code)       --
 609+ 7166              // patch to CFA to call/jump to the "following code"
 610+ 7166                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 610+ 7166             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 610+ 7166             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 610+ 7166             >
 610+ 7166             >                // dummy db directives used to calculate length of namec
 610+ 7166 28 3B 43 4F >                db      "(;CODE)"
 610+ 716A 44 45 29    >
 610+ 716D             >len_NFA         defl    $ - temp_NFA
 610+ 716D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 610+ 7166             >
 610+ 7166 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 610+ 7167 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 610+ 716B 44 45 29    >
 610+ 716E             >                org     $-1                 // alter last byte of Name just above to set
 610+ 716D A9          >                db      {b $} | END_BIT     // msb as name end
 610+ 716E             >
 610+ 716E 4F 71       >                dw      last_NFA            // Link to previous definition Name
 610+ 7170             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 610+ 7170 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 610+ 7173             >
 610+ 7173             >
 610+ 7173             >                endif           ; ok        // for other definitions it "points" the correct handler
 610+ 7173             >                // Use of "; ok" to suppress "warning[fwdref]"
 610+ 7173             >
 610+ 7173             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 611+ 7173 5F 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 612+ 7175 9B 6F                        dw      LATEST                  // latest   ( Word being defined in this moment )
 613+ 7177 E1 6F BD 6F                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 614+ 717B
 615+ 717B A5 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 616+ 717F 44 6A 23 6B                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 617+ 7183 D4 69                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 618+ 7185
 619+ 7185 0B 6B                        dw      STORE                   // !
 620+ 7187 3C 69                        dw      EXIT                    // ;
 621+ 7189
 622+ 7189              //  ______________________________________________________________________
 623+ 7189              //
 624+ 7189              // ;code        --
 625+ 7189                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 625+ 7189             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 625+ 7189             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 625+ 7189             >
 625+ 7189             >                // dummy db directives used to calculate length of namec
 625+ 7189 3B 43 4F 44 >                db      ";CODE"
 625+ 718D 45          >
 625+ 718E             >len_NFA         defl    $ - temp_NFA
 625+ 718E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 625+ 7189             >
 625+ 7189 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 625+ 718A 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 625+ 718E 45          >
 625+ 718F             >                org     $-1                 // alter last byte of Name just above to set
 625+ 718E C5          >                db      {b $} | END_BIT     // msb as name end
 625+ 718F             >
 625+ 718F 66 71       >                dw      last_NFA            // Link to previous definition Name
 625+ 7191             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 625+ 7191 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 625+ 7194             >
 625+ 7194             >
 625+ 7194             >                endif           ; ok        // for other definitions it "points" the correct handler
 625+ 7194             >                // Use of "; ok" to suppress "warning[fwdref]"
 625+ 7194             >
 625+ 7194             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 626+ 7194 8D 70                        dw      QCSP                    // ?csp
 627+ 7196 C6 70                        dw      COMPILE                 // compile
 628+ 7198 70 71                        dw      C_SEMICOLON_CODE        // (;code)
 629+ 719A F1 70                        dw      SQUARED_OPEN            // [
 630+ 719C FC 6B                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 631+ 719E 3C 69                        dw      EXIT                    // ; immediate
 632+ 71A0
 633+ 71A0              //  ______________________________________________________________________
 634+ 71A0              //
 635+ 71A0              // <builds      --
 636+ 71A0                              Colon_Def CBUILDS, "<BUILDS", is_normal
 636+ 71A0             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 636+ 71A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 636+ 71A0             >
 636+ 71A0             >                // dummy db directives used to calculate length of namec
 636+ 71A0 3C 42 55 49 >                db      "<BUILDS"
 636+ 71A4 4C 44 53    >
 636+ 71A7             >len_NFA         defl    $ - temp_NFA
 636+ 71A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 636+ 71A0             >
 636+ 71A0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 636+ 71A1 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 636+ 71A5 4C 44 53    >
 636+ 71A8             >                org     $-1                 // alter last byte of Name just above to set
 636+ 71A7 D3          >                db      {b $} | END_BIT     // msb as name end
 636+ 71A8             >
 636+ 71A8 89 71       >                dw      last_NFA            // Link to previous definition Name
 636+ 71AA             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 636+ 71AA CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 636+ 71AD             >
 636+ 71AD             >
 636+ 71AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 636+ 71AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 636+ 71AD             >
 636+ 71AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 637+ 71AD 4E 6C                        dw      ZERO                    // 0
 638+ 71AF 09 6C                        dw      CONSTANT                // constant
 639+ 71B1 3C 69                        dw      EXIT                    // ;
 640+ 71B3
 641+ 71B3              //  ______________________________________________________________________
 642+ 71B3              //
 643+ 71B3              // recurse      --
 644+ 71B3              //              Colon_Def RECURSE, "RECURSE", is_immediate
 645+ 71B3              //              dw      QCOMP                   // ?comp
 646+ 71B3              //              dw      LATEST                  // latest
 647+ 71B3              //              dw      PFA, CFA                // pfa cfa
 648+ 71B3              //              dw      COMMA                   // ,
 649+ 71B3              //              dw      EXIT                    // ; immediate
 650+ 71B3
 651+ 71B3              //  ______________________________________________________________________
 652+ 71B3              //
 653+ 71B3              // does>     --
 654+ 71B3                              Colon_Def DOES_TO, "DOES>", is_normal
 654+ 71B3             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 654+ 71B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 654+ 71B3             >
 654+ 71B3             >                // dummy db directives used to calculate length of namec
 654+ 71B3 44 4F 45 53 >                db      "DOES>"
 654+ 71B7 3E          >
 654+ 71B8             >len_NFA         defl    $ - temp_NFA
 654+ 71B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 654+ 71B3             >
 654+ 71B3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 654+ 71B4 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 654+ 71B8 3E          >
 654+ 71B9             >                org     $-1                 // alter last byte of Name just above to set
 654+ 71B8 BE          >                db      {b $} | END_BIT     // msb as name end
 654+ 71B9             >
 654+ 71B9 A0 71       >                dw      last_NFA            // Link to previous definition Name
 654+ 71BB             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 654+ 71BB CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 654+ 71BE             >
 654+ 71BE             >
 654+ 71BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 654+ 71BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 654+ 71BE             >
 654+ 71BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 655+ 71BE 5F 69                        dw      R_TO                    // r>
 656+ 71C0 9B 6F                        dw      LATEST                  // latest
 657+ 71C2 E1 6F                        dw      PFA                     // pfa
 658+ 71C4 0B 6B                        dw      STORE                   // !
 659+ 71C6 70 71                        dw      C_SEMICOLON_CODE        // ;code
 660+ 71C8              Does_Ptr:
 661+ 71C8                              // via call coded in CFA
 662+ 71C8                              ldhlrp
 662+ 71C8 2A 96 63    >                ld      hl,(RP_Pointer)
 663+ 71CB 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 664+ 71CC 70                           ld      (hl), b
 665+ 71CD 2B                           dec     hl
 666+ 71CE 71                           ld      (hl), c
 667+ 71CF                              ldrphl
 667+ 71CF 22 96 63    >                ld      (RP_Pointer),hl
 668+ 71D2 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 669+ 71D3
 670+ 71D3 4E                           ld      c, (hl)
 671+ 71D4 23                           inc     hl
 672+ 71D5 46                           ld      b, (hl)
 673+ 71D6 23                           inc     hl
 674+ 71D7
 675+ 71D7                              psh1
 675+ 71D7 E5          >                push    hl
 675+ 71D8 DD E9       >                jp      (ix)
 676+ 71DA                              // SMUDGE !
 677+ 71DA
 678+ 71DA              //  ______________________________________________________________________
 679+ 71DA              //
 680+ 71DA              // count        a -- a2 n
 681+ 71DA              // expects a counted string at address a, returns string address and counter
 682+ 71DA                              New_Def COUNT, "COUNT", is_code, is_normal
 682+ 71DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 682+ 71DA             >
 682+ 71DA             >                // dummy db directives used to calculate length of namec
 682+ 71DA 43 4F 55 4E >                db      "COUNT"
 682+ 71DE 54          >
 682+ 71DF             >len_NFA         defl    $ - temp_NFA
 682+ 71DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 682+ 71DA             >
 682+ 71DA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 682+ 71DB 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 682+ 71DF 54          >
 682+ 71E0             >                org     $-1                 // alter last byte of Name just above to set
 682+ 71DF D4          >                db      {b $} | END_BIT     // msb as name end
 682+ 71E0             >
 682+ 71E0 B3 71       >                dw      last_NFA            // Link to previous definition Name
 682+ 71E2             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 682+ 71E2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 682+ 71E2 ~           >
 682+ 71E2 ~           >
 682+ 71E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 682+ 71E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 682+ 71E2             >
 682+ 71E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 683+ 71E2 E1                           pop     hl
 684+ 71E3 5E                           ld      e, (hl)
 685+ 71E4 16 00                        ld      d, 0
 686+ 71E6 23                           inc     hl
 687+ 71E7              Count_Ptr:
 688+ 71E7 E5                           push    hl
 689+ 71E8 D5                           push    de
 690+ 71E9                              next
 690+ 71E9 DD E9       >                jp      (ix)
 691+ 71EB
 692+ 71EB              //  ______________________________________________________________________
 693+ 71EB              //
 694+ 71EB              // bounds       a n -- a+n n
 695+ 71EB              // given an address and a length ( a n ) calculate the bound addresses
 696+ 71EB              // suitable for DO-LOOP
 697+ 71EB                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 697+ 71EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 697+ 71EB             >
 697+ 71EB             >                // dummy db directives used to calculate length of namec
 697+ 71EB 42 4F 55 4E >                db      "BOUNDS"
 697+ 71EF 44 53       >
 697+ 71F1             >len_NFA         defl    $ - temp_NFA
 697+ 71F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 697+ 71EB             >
 697+ 71EB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 697+ 71EC 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 697+ 71F0 44 53       >
 697+ 71F2             >                org     $-1                 // alter last byte of Name just above to set
 697+ 71F1 D3          >                db      {b $} | END_BIT     // msb as name end
 697+ 71F2             >
 697+ 71F2 DA 71       >                dw      last_NFA            // Link to previous definition Name
 697+ 71F4             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 697+ 71F4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 697+ 71F4 ~           >
 697+ 71F4 ~           >
 697+ 71F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 697+ 71F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 697+ 71F4             >
 697+ 71F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 698+ 71F4 E1                           pop     hl
 699+ 71F5 D1                           pop     de
 700+ 71F6 19                           add     hl, de
 701+ 71F7 18 EE                        jr      Count_Ptr
 702+ 71F9
 703+ 71F9              //  ______________________________________________________________________
 704+ 71F9              //
 705+ 71F9              // type         a n --
 706+ 71F9              // Sends to current output channel n characters starting at address a.
 707+ 71F9                              Colon_Def TYPE, "TYPE", is_normal
 707+ 71F9             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 707+ 71F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 707+ 71F9             >
 707+ 71F9             >                // dummy db directives used to calculate length of namec
 707+ 71F9 54 59 50 45 >                db      "TYPE"
 707+ 71FD             >len_NFA         defl    $ - temp_NFA
 707+ 71FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 707+ 71F9             >
 707+ 71F9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 707+ 71FA 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 707+ 71FE             >                org     $-1                 // alter last byte of Name just above to set
 707+ 71FD C5          >                db      {b $} | END_BIT     // msb as name end
 707+ 71FE             >
 707+ 71FE EB 71       >                dw      last_NFA            // Link to previous definition Name
 707+ 7200             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 707+ 7200 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 707+ 7203             >
 707+ 7203             >
 707+ 7203             >                endif           ; ok        // for other definitions it "points" the correct handler
 707+ 7203             >                // Use of "; ok" to suppress "warning[fwdref]"
 707+ 7203             >
 707+ 7203             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 708+ 7203 F4 71                        dw      BOUNDS                  // bounds
 709+ 7205 45 64                        dw      C_Q_DO                  // ?do
 710+ 7207 0C 00                        dw      Type_Skip - $
 711+ 7209              Type_Loop:
 712+ 7209 78 64 17 6B                  dw          I, CFETCH           //      i c@
 713+ 720D 46 6F                        dw          EMIT                //      emit
 714+ 720F F8 63                        dw      C_LOOP                  // loop
 715+ 7211 F8 FF                        dw      Type_Loop - $
 716+ 7213              Type_Skip:
 717+ 7213 3C 69                        dw      EXIT                    // ;
 718+ 7215
 719+ 7215              //  ______________________________________________________________________
 720+ 7215              //
 721+ 7215              // leave        --
 722+ 7215              // Compile (leave) to leave current LOOP and jump just after it
 723+ 7215                              Colon_Def LEAVE, "LEAVE", is_immediate
 723+ 7215             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 723+ 7215             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 723+ 7215             >
 723+ 7215             >                // dummy db directives used to calculate length of namec
 723+ 7215 4C 45 41 56 >                db      "LEAVE"
 723+ 7219 45          >
 723+ 721A             >len_NFA         defl    $ - temp_NFA
 723+ 721A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 723+ 7215             >
 723+ 7215 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 723+ 7216 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 723+ 721A 45          >
 723+ 721B             >                org     $-1                 // alter last byte of Name just above to set
 723+ 721A C5          >                db      {b $} | END_BIT     // msb as name end
 723+ 721B             >
 723+ 721B F9 71       >                dw      last_NFA            // Link to previous definition Name
 723+ 721D             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 723+ 721D CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 723+ 7220             >
 723+ 7220             >
 723+ 7220             >                endif           ; ok        // for other definitions it "points" the correct handler
 723+ 7220             >                // Use of "; ok" to suppress "warning[fwdref]"
 723+ 7220             >
 723+ 7220             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 724+ 7220 C6 70 2F 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 725+ 7224 58 6E 4D 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 725+ 7228 4E 6C 76 6E
 726+ 722C 4E 6C 4E 6C                  dw      ZERO, ZERO
 727+ 7230 0C 69 7F 6A                  dw      SPFETCH, DUP
 728+ 7234 F6 69 F6 69                  dw      CELL_PLUS, CELL_PLUS
 729+ 7238 66 6A                        dw      TUCK
 730+ 723A DE 6D 00 6B                  dw      CSP, FETCH
 731+ 723E 74 6A AD 6E                  dw      SWAP, SUBTRACT
 732+ 7242 45 68                        dw      CMOVE
 733+ 7244 DE 6D 00 6B                  dw      CSP, FETCH, CELL_MINUS
 733+ 7248 01 6A
 734+ 724A 5F 69 44 6A                  dw      R_TO, OVER, STORE
 734+ 724E 0B 6B
 735+ 7250 01 6A 4E 6C                  dw      CELL_MINUS, ZERO
 736+ 7254 74 6A 0B 6B                  dw      SWAP, STORE
 737+ 7258 3C 69                        dw      EXIT                    // ;
 738+ 725A
 739+ 725A              //  ______________________________________________________________________
 740+ 725A              //
 741+ 725A              // -trailing    a n1 -- a n2
 742+ 725A              // Assumes that an n1 bytes-long string is stored at address a
 743+ 725A              // and the string contains a space delimited word,
 744+ 725A              // Finds n2 as the position of the first character after the word.
 745+ 725A                              Colon_Def LTRAILING, "-TRAILING", is_normal
 745+ 725A             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 745+ 725A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 745+ 725A             >
 745+ 725A             >                // dummy db directives used to calculate length of namec
 745+ 725A 2D 54 52 41 >                db      "-TRAILING"
 745+ 725E 49 4C 49 4E >
 745+ 7262 47          >
 745+ 7263             >len_NFA         defl    $ - temp_NFA
 745+ 7263             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 745+ 725A             >
 745+ 725A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 745+ 725B 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 745+ 725F 49 4C 49 4E >
 745+ 7263 47          >
 745+ 7264             >                org     $-1                 // alter last byte of Name just above to set
 745+ 7263 C7          >                db      {b $} | END_BIT     // msb as name end
 745+ 7264             >
 745+ 7264 15 72       >                dw      last_NFA            // Link to previous definition Name
 745+ 7266             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 745+ 7266 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 745+ 7269             >
 745+ 7269             >
 745+ 7269             >                endif           ; ok        // for other definitions it "points" the correct handler
 745+ 7269             >                // Use of "; ok" to suppress "warning[fwdref]"
 745+ 7269             >
 745+ 7269             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 746+ 7269 7F 6A 4E 6C                  dw      DUP, ZERO               // dup 0
 747+ 726D                                                              // do
 748+ 726D 45 64                        dw      C_Q_DO
 749+ 726F 20 00                        dw      LTrailing_Leave - $
 750+ 7271              LTrailing_Loop:
 751+ 7271 D4 6A B7 69                  dw          TWO_DUP, PLUS       //      2dup +
 752+ 7275 DE 69                        dw          ONE_SUBTRACT        //      1-
 753+ 7277 17 6B                        dw          CFETCH              //      c@
 754+ 7279 7D 6C AD 6E                  dw          BL, SUBTRACT        //      bl -
 755+ 727D                                                              //      if
 756+ 727D 1C 64                        dw          ZBRANCH
 757+ 727F 0A 00                        dw          LTrailing_Else - $
 758+ 7281 2F 64                        dw              C_LEAVE         //          leave
 759+ 7283 0C 00                        dw              LTrailing_Leave - $
 760+ 7285 07 64                        dw          BRANCH              //      else
 761+ 7287 04 00                        dw          LTrailing_Endif - $
 762+ 7289              LTrailing_Else:
 763+ 7289 DE 69                        dw              ONE_SUBTRACT    //          1-
 764+ 728B              LTrailing_Endif:                                //      endif
 765+ 728B                                                              // loop
 766+ 728B F8 63                        dw      C_LOOP
 767+ 728D E4 FF                        dw      LTrailing_Loop - $
 768+ 728F              LTrailing_Leave:
 769+ 728F 3C 69                        dw      EXIT                    // ;
 770+ 7291
 771+ 7291              //  ______________________________________________________________________
 772+ 7291              //
 773+ 7291              // accept       a n1 -- n2
 774+ 7291              // Accepts at most n1 characters from terminal and stores them at address a
 775+ 7291              // CR stops input. A 'nul' is added as trailer.
 776+ 7291              // n2 is the string length. n2 is kept in span user variable also.
 777+ 7291                              Colon_Def ACCEPT, "ACCEPT", is_normal
 777+ 7291             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 777+ 7291             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 777+ 7291             >
 777+ 7291             >                // dummy db directives used to calculate length of namec
 777+ 7291 41 43 43 45 >                db      "ACCEPT"
 777+ 7295 50 54       >
 777+ 7297             >len_NFA         defl    $ - temp_NFA
 777+ 7297             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 777+ 7291             >
 777+ 7291 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 777+ 7292 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 777+ 7296 50 54       >
 777+ 7298             >                org     $-1                 // alter last byte of Name just above to set
 777+ 7297 D4          >                db      {b $} | END_BIT     // msb as name end
 777+ 7298             >
 777+ 7298 5A 72       >                dw      last_NFA            // Link to previous definition Name
 777+ 729A             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 777+ 729A CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 777+ 729D             >
 777+ 729D             >
 777+ 729D             >                endif           ; ok        // for other definitions it "points" the correct handler
 777+ 729D             >                // Use of "; ok" to suppress "warning[fwdref]"
 777+ 729D             >
 777+ 729D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 778+ 729D 44 6A B7 69                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 778+ 72A1 44 6A
 779+ 72A3 4E 6C 98 6A                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 780+ 72A7                                                              // do
 781+ 72A7 45 64                        dw      C_Q_DO
 782+ 72A9 8A 00                        dw      Accept_Leave - $
 783+ 72AB              Accept_Loop:
 784+ 72AB 52 6A 86 66                  dw          DROP, KEY           //      drop key        ( a  c )
 785+ 72AF 7F 6A                        dw          DUP                 //      dup             ( a  c  c )
 786+ 72B1 A5 63 0E 00                  dw          LIT, $0E            //      0E
 787+ 72B5 BE 6C                        dw          PLUS_ORIGIN         //      +origin
 788+ 72B7 00 6B                        dw          FETCH               //      @               ( a  c  c  del )
 789+ 72B9 B9 6E                        dw          EQUALS              //      =               ( a  c  c==del )
 790+ 72BB                                                              //      if
 791+ 72BB 1C 64                        dw          ZBRANCH
 792+ 72BD 2C 00                        dw          Accept_Else_0 - $
 793+ 72BF 52 6A                        dw              DROP            //          drop        ( a  )
 794+ 72C1 7F 6A 78 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 794+ 72C5 B9 6E
 795+ 72C7 57 6C DA 68                  dw              ONE, AND_OP     //          1 and
 796+ 72CB 7F 6A                        dw              DUP             //          dup         ( a  a==i  a==i )
 797+ 72CD 5F 69                        dw              R_TO            //          r> 2 - + r>
 798+ 72CF 0C 6A B7 69                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 799+ 72D3 4D 69                        dw              TO_R            //
 800+ 72D5                                                              //          if
 801+ 72D5 1C 64                        dw              ZBRANCH
 802+ 72D7 0A 00                        dw              Accept_Else_1 - $
 803+ 72D9 A5 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 804+ 72DD                                                              //          else
 805+ 72DD 07 64                        dw              BRANCH
 806+ 72DF 06 00                        dw              Accept_Endif_1 - $
 807+ 72E1              Accept_Else_1:
 808+ 72E1 A5 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 809+ 72E5              Accept_Endif_1:                                 //          endif
 810+ 72E5 07 64                        dw          BRANCH
 811+ 72E7 2E 00                        dw          Accept_Endif_0 - $
 812+ 72E9              Accept_Else_0:                                  //      else
 813+ 72E9 7F 6A                        dw              DUP             //          dup         ( a  c  c )
 814+ 72EB A5 63 0D 00                  dw              LIT, 13         //          13
 815+ 72EF B9 6E                        dw              EQUALS          //          =           ( a  c  c==CR )
 816+ 72F1                                                              //          if
 817+ 72F1 1C 64                        dw              ZBRANCH
 818+ 72F3 0C 00                        dw              Accept_Else_2 - $
 819+ 72F5 52 6A 7D 6C                  dw                  DROP, BL    //              drop bl ( a  bl )
 820+ 72F9 4E 6C                        dw                  ZERO        //              0       ( a  c  0 )
 821+ 72FB                                                              //          else
 822+ 72FB 07 64                        dw              BRANCH
 823+ 72FD 04 00                        dw              Accept_Endif_2 - $
 824+ 72FF              Accept_Else_2:
 825+ 72FF 7F 6A                        dw                  DUP         //              dup     ( a  c  c )
 826+ 7301                                                              //          endif
 827+ 7301              Accept_Endif_2:
 828+ 7301 78 64 23 6B                  dw              I, CSTORE       //          i           ( a  c )
 829+ 7305 7F 6A 7D 6C                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 829+ 7309 D9 6E
 830+ 730B                                                              //          if
 831+ 730B 1C 64                        dw              ZBRANCH
 832+ 730D 08 00                        dw              Accept_Endif_3 - $
 833+ 730F 5F 69                        dw                  R_TO        //              r>
 834+ 7311 DE 69                        dw                  ONE_SUBTRACT//              1-
 835+ 7313 4D 69                        dw                  TO_R        //              >r
 836+ 7315                                                              //          endif
 837+ 7315              Accept_Endif_3:
 838+ 7315              Accept_Endif_0:                                 //      endif
 839+ 7315 46 6F                        dw          EMIT                //      emit
 840+ 7317 4E 6C 78 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 840+ 731B D4 69
 841+ 731D 0B 6B                        dw          STORE               //          ( zero pad )
 842+ 731F 78 64                        dw          I                   //      i
 843+ 7321 78 64 17 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 843+ 7325 79 69
 844+ 7327 1C 64                        dw          ZBRANCH             //
 845+ 7329 06 00                        dw              Accept_Endif_4 - $
 846+ 732B 2F 64                        dw                  C_LEAVE     //              leave
 847+ 732D 06 00                        dw                  Accept_Leave - $
 848+ 732F              Accept_Endif_4:                                 //      endif
 849+ 732F                                                              // loop
 850+ 732F F8 63                        dw      C_LOOP
 851+ 7331 7A FF                        dw      Accept_Loop - $
 852+ 7333              Accept_Leave:
 853+ 7333 74 6A AD 6E                  dw      SWAP, SUBTRACT          // swap -
 854+ 7337 D4 69                        dw      ONE_PLUS                // 1+
 855+ 7339 7F 6A 36 6E                  dw      DUP, SPAN, STORE        // dup span !
 855+ 733D 0B 6B
 856+ 733F 3C 69                        dw      EXIT                    // ;
 857+ 7341
 858+ 7341              //  ______________________________________________________________________
 859+ 7341              //
 860+ 7341              // expect      a n --
 861+ 7341              // Accepts at most n1 characters from terminal and stores them at address a
 862+ 7341              // CR stops input. A 'nul' is added as trailer.
 863+ 7341              // n2 is the string length. n2 is kept in span user variable also.
 864+ 7341              //              Colon_Def EXPECT, "EXPECT", is_normal
 865+ 7341              //              dw      ACCEPT, DROP            // accept drop
 866+ 7341              //              dw      EXIT                    // ;
 867+ 7341
 868+ 7341              //  ______________________________________________________________________
 869+ 7341              //
 870+ 7341              // query        --
 871+ 7341              // Accept at most 80 character from console. CR stops.
 872+ 7341              // Text is stored in TIB. Variable IN is zeroed.
 873+ 7341                              Colon_Def QUERY, "QUERY", is_normal
 873+ 7341             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 873+ 7341             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 873+ 7341             >
 873+ 7341             >                // dummy db directives used to calculate length of namec
 873+ 7341 51 55 45 52 >                db      "QUERY"
 873+ 7345 59          >
 873+ 7346             >len_NFA         defl    $ - temp_NFA
 873+ 7346             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 873+ 7341             >
 873+ 7341 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 873+ 7342 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 873+ 7346 59          >
 873+ 7347             >                org     $-1                 // alter last byte of Name just above to set
 873+ 7346 D9          >                db      {b $} | END_BIT     // msb as name end
 873+ 7347             >
 873+ 7347 91 72       >                dw      last_NFA            // Link to previous definition Name
 873+ 7349             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 873+ 7349 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 873+ 734C             >
 873+ 734C             >
 873+ 734C             >                endif           ; ok        // for other definitions it "points" the correct handler
 873+ 734C             >                // Use of "; ok" to suppress "warning[fwdref]"
 873+ 734C             >
 873+ 734C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 874+ 734C EC 6C 00 6B                  dw      TIB, FETCH              // tib @
 875+ 7350 A5 63 50 00                  dw      LIT, 80                 // 80
 876+ 7354 9A 72 52 6A                  dw      ACCEPT, DROP            // accept drop
 877+ 7358 4E 6C 6C 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 877+ 735C 0B 6B
 878+ 735E 3C 69                        dw      EXIT                    // ;
 879+ 7360
 880+ 7360              //  ______________________________________________________________________
 881+ 7360              //
 882+ 7360              // fill        a n c --
 883+ 7360              // If n > 0, fills n locations starting from address a with the value c.
 884+ 7360                              New_Def FILL, "FILL", is_code, is_normal
 884+ 7360             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 884+ 7360             >
 884+ 7360             >                // dummy db directives used to calculate length of namec
 884+ 7360 46 49 4C 4C >                db      "FILL"
 884+ 7364             >len_NFA         defl    $ - temp_NFA
 884+ 7364             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 884+ 7360             >
 884+ 7360 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 884+ 7361 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 884+ 7365             >                org     $-1                 // alter last byte of Name just above to set
 884+ 7364 CC          >                db      {b $} | END_BIT     // msb as name end
 884+ 7365             >
 884+ 7365 41 73       >                dw      last_NFA            // Link to previous definition Name
 884+ 7367             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 884+ 7367 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 884+ 7367 ~           >
 884+ 7367 ~           >
 884+ 7367             >                endif           ; ok        // for other definitions it "points" the correct handler
 884+ 7367             >                // Use of "; ok" to suppress "warning[fwdref]"
 884+ 7367             >
 884+ 7367             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 885+ 7367 D9                           exx
 886+ 7368 D1                           pop     de                  // de has character
 887+ 7369 C1                           pop     bc                  // bc has counter
 888+ 736A E1                           pop     hl                  // hl has address, save Instruction Pointer
 889+ 736B              Fill_Loop:
 890+ 736B 78                               ld      a, b
 891+ 736C B1                               or      c
 892+ 736D 28 05                        jr      z, Fill_While_End
 893+ 736F 73                               ld      (hl), e
 894+ 7370 0B                               dec     bc
 895+ 7371 23                               inc     hl
 896+ 7372 18 F7                        jr      Fill_Loop
 897+ 7374              Fill_While_End:
 898+ 7374 D9                           exx
 899+ 7375                              next
 899+ 7375 DD E9       >                jp      (ix)
 900+ 7377
 901+ 7377              //  ______________________________________________________________________
 902+ 7377              //
 903+ 7377              // erase        a n --
 904+ 7377              // If n > 0, fills n locations starting from address a with 'nul' characters.
 905+ 7377                              Colon_Def ERASE, "ERASE", is_normal
 905+ 7377             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 905+ 7377             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 905+ 7377             >
 905+ 7377             >                // dummy db directives used to calculate length of namec
 905+ 7377 45 52 41 53 >                db      "ERASE"
 905+ 737B 45          >
 905+ 737C             >len_NFA         defl    $ - temp_NFA
 905+ 737C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 905+ 7377             >
 905+ 7377 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 905+ 7378 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 905+ 737C 45          >
 905+ 737D             >                org     $-1                 // alter last byte of Name just above to set
 905+ 737C C5          >                db      {b $} | END_BIT     // msb as name end
 905+ 737D             >
 905+ 737D 60 73       >                dw      last_NFA            // Link to previous definition Name
 905+ 737F             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 905+ 737F CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 905+ 7382             >
 905+ 7382             >
 905+ 7382             >                endif           ; ok        // for other definitions it "points" the correct handler
 905+ 7382             >                // Use of "; ok" to suppress "warning[fwdref]"
 905+ 7382             >
 905+ 7382             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 906+ 7382 4E 6C 67 73                  dw      ZERO, FILL              // 0 fill
 907+ 7386 3C 69                        dw      EXIT                    // ;
 908+ 7388
 909+ 7388              //  ______________________________________________________________________
 910+ 7388              //
 911+ 7388              // blanks       a n --
 912+ 7388              // If n > 0, fills n locations starting from address a with 'nul' characters.
 913+ 7388                              Colon_Def BLANKS, "BLANKS", is_normal
 913+ 7388             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 913+ 7388             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 913+ 7388             >
 913+ 7388             >                // dummy db directives used to calculate length of namec
 913+ 7388 42 4C 41 4E >                db      "BLANKS"
 913+ 738C 4B 53       >
 913+ 738E             >len_NFA         defl    $ - temp_NFA
 913+ 738E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 913+ 7388             >
 913+ 7388 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 913+ 7389 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 913+ 738D 4B 53       >
 913+ 738F             >                org     $-1                 // alter last byte of Name just above to set
 913+ 738E D3          >                db      {b $} | END_BIT     // msb as name end
 913+ 738F             >
 913+ 738F 77 73       >                dw      last_NFA            // Link to previous definition Name
 913+ 7391             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 913+ 7391 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 913+ 7394             >
 913+ 7394             >
 913+ 7394             >                endif           ; ok        // for other definitions it "points" the correct handler
 913+ 7394             >                // Use of "; ok" to suppress "warning[fwdref]"
 913+ 7394             >
 913+ 7394             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 914+ 7394 7D 6C 67 73                  dw      BL, FILL                // bl fill
 915+ 7398 3C 69                        dw      EXIT                    // ;
 916+ 739A
 917+ 739A              //  ______________________________________________________________________
 918+ 739A              //
 919+ 739A              // hold         c --
 920+ 739A              // Used between <# and #> to insert a character c in numeric formatting.
 921+ 739A                              Colon_Def HOLD, "HOLD", is_normal
 921+ 739A             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 921+ 739A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 921+ 739A             >
 921+ 739A             >                // dummy db directives used to calculate length of namec
 921+ 739A 48 4F 4C 44 >                db      "HOLD"
 921+ 739E             >len_NFA         defl    $ - temp_NFA
 921+ 739E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 921+ 739A             >
 921+ 739A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 921+ 739B 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 921+ 739F             >                org     $-1                 // alter last byte of Name just above to set
 921+ 739E C4          >                db      {b $} | END_BIT     // msb as name end
 921+ 739F             >
 921+ 739F 88 73       >                dw      last_NFA            // Link to previous definition Name
 921+ 73A1             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 921+ 73A1 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 921+ 73A4             >
 921+ 73A4             >
 921+ 73A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 921+ 73A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 921+ 73A4             >
 921+ 73A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 922+ 73A4 73 6C                        dw      NEG_ONE                 // -1
 923+ 73A6 F1 6D E1 6A                  dw      HLD, PLUSSTORE          // hld +!
 924+ 73AA F1 6D 00 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 924+ 73AE 23 6B
 925+ 73B0 3C 69                        dw      EXIT                    // ;
 926+ 73B2
 927+ 73B2              //  ______________________________________________________________________
 928+ 73B2              //
 929+ 73B2              // pad         -- a
 930+ 73B2              // leaves the buffer text address. This is at a fixed distance over HERE.
 931+ 73B2                              Colon_Def PAD, "PAD", is_normal
 931+ 73B2             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 931+ 73B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 931+ 73B2             >
 931+ 73B2             >                // dummy db directives used to calculate length of namec
 931+ 73B2 50 41 44    >                db      "PAD"
 931+ 73B5             >len_NFA         defl    $ - temp_NFA
 931+ 73B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 931+ 73B2             >
 931+ 73B2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 931+ 73B3 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 931+ 73B6             >                org     $-1                 // alter last byte of Name just above to set
 931+ 73B5 C4          >                db      {b $} | END_BIT     // msb as name end
 931+ 73B6             >
 931+ 73B6 9A 73       >                dw      last_NFA            // Link to previous definition Name
 931+ 73B8             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 931+ 73B8 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 931+ 73BB             >
 931+ 73BB             >
 931+ 73BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 931+ 73BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 931+ 73BB             >
 931+ 73BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 932+ 73BB 58 6E                        dw      HERE                    // here
 933+ 73BD A5 63 44 00                  dw      LIT, 68                 // 68
 934+ 73C1 B7 69                        dw      PLUS                    // +
 935+ 73C3 3C 69                        dw      EXIT                    // ;
 936+ 73C5
 937+ 73C5              //  ______________________________________________________________________
 938+ 73C5              //
 939+ 73C5              // word         c -- a
 940+ 73C5              // reads characters from input streams until it encouners a c delimiter.
 941+ 73C5              // Stores that packet so it starts from HERE
 942+ 73C5              // WORD leaves a counter as first byte and ends the packet with two spaces.
 943+ 73C5              // Other occurrences of c are ignored.
 944+ 73C5              // If BLK is zero, text is taken from terminal buffer TIB.
 945+ 73C5              // Otherwise text is taken from the disk-block given by BLK.
 946+ 73C5              // "in" variable is incremented of the number of character read.
 947+ 73C5              // The number of characters read is given by ENCLOSE.
 948+ 73C5                              Colon_Def WORD, "WORD", is_normal
 948+ 73C5             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 948+ 73C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ 73C5             >
 948+ 73C5             >                // dummy db directives used to calculate length of namec
 948+ 73C5 57 4F 52 44 >                db      "WORD"
 948+ 73C9             >len_NFA         defl    $ - temp_NFA
 948+ 73C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ 73C5             >
 948+ 73C5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ 73C6 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 948+ 73CA             >                org     $-1                 // alter last byte of Name just above to set
 948+ 73C9 C4          >                db      {b $} | END_BIT     // msb as name end
 948+ 73CA             >
 948+ 73CA B2 73       >                dw      last_NFA            // Link to previous definition Name
 948+ 73CC             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 73CC CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 948+ 73CF             >
 948+ 73CF             >
 948+ 73CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 73CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 73CF             >
 948+ 73CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 73CF 62 6D 00 6B                  dw      BLK, FETCH              // blk @
 950+ 73D3                                                              // if
 951+ 73D3 1C 64                        dw      ZBRANCH
 952+ 73D5 0C 00                        dw      Word_Else - $
 953+ 73D7 62 6D 00 6B                  dw          BLK, FETCH          //      blk @
 954+ 73DB 58 7D                        dw          BLOCK               //      block ( forward )
 955+ 73DD                                                              // else
 956+ 73DD 07 64                        dw      BRANCH
 957+ 73DF 06 00                        dw      Word_Endif - $
 958+ 73E1              Word_Else:
 959+ 73E1 EC 6C 00 6B                  dw         TIB, FETCH           //      tib @
 960+ 73E5              Word_Endif:                                     // endif
 961+ 73E5 6C 6D 00 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 961+ 73E9 B7 69
 962+ 73EB 74 6A 58 65                  dw      SWAP, ENCLOSE           // swap enclose
 963+ 73EF 58 6E A5 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 963+ 73F3 22 00 91 73
 964+ 73F7 6C 6D E1 6A                  dw      TO_IN, PLUSSTORE        // >in @ +
 965+ 73FB 44 6A AD 6E                  dw      OVER, SUBTRACT, TO_R    // over - >r
 965+ 73FF 4D 69
 966+ 7401 71 69 58 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 966+ 7405 23 6B
 967+ 7407 B7 69                        dw      PLUS                    // +
 968+ 7409 58 6E D4 69                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 968+ 740D 5F 69
 969+ 740F 45 68                        dw      CMOVE                   // cmove
 970+ 7411 58 6E                        dw      HERE                    // here
 971+ 7413 3C 69                        dw      EXIT                    // ;
 972+ 7415
 973+ 7415              //  ______________________________________________________________________
 974+ 7415              //
 975+ 7415              // (.")         --
 976+ 7415              // Direct procedure compiled by ." and  .(  It executes TYPE.
 977+ 7415                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 977+ 7415             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 977+ 7415             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 977+ 7415             >
 977+ 7415             >                // dummy db directives used to calculate length of namec
 977+ 7415 28 2E 22 29 >                db      '(.")'
 977+ 7419             >len_NFA         defl    $ - temp_NFA
 977+ 7419             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 977+ 7415             >
 977+ 7415 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 977+ 7416 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 977+ 741A             >                org     $-1                 // alter last byte of Name just above to set
 977+ 7419 A9          >                db      {b $} | END_BIT     // msb as name end
 977+ 741A             >
 977+ 741A C5 73       >                dw      last_NFA            // Link to previous definition Name
 977+ 741C             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 977+ 741C CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 977+ 741F             >
 977+ 741F             >
 977+ 741F             >                endif           ; ok        // for other definitions it "points" the correct handler
 977+ 741F             >                // Use of "; ok" to suppress "warning[fwdref]"
 977+ 741F             >
 977+ 741F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 978+ 741F 71 69 E2 71                  dw      R_OP, COUNT             // r count
 979+ 7423 7F 6A D4 69                  dw      DUP, ONE_PLUS           // dup 1+
 980+ 7427 5F 69 B7 69                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 980+ 742B 4D 69
 981+ 742D 00 72                        dw      TYPE                    // type
 982+ 742F 3C 69                        dw      EXIT                    // ;
 983+ 7431
 984+ 7431              //  ______________________________________________________________________
 985+ 7431              //
 986+ 7431              // char         -- c
 987+ 7431              // get first character from next input word
 988+ 7431                              Colon_Def CHAR,  "CHAR", is_normal
 988+ 7431             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 988+ 7431             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 988+ 7431             >
 988+ 7431             >                // dummy db directives used to calculate length of namec
 988+ 7431 43 48 41 52 >                db      "CHAR"
 988+ 7435             >len_NFA         defl    $ - temp_NFA
 988+ 7435             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 988+ 7431             >
 988+ 7431 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 988+ 7432 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 988+ 7436             >                org     $-1                 // alter last byte of Name just above to set
 988+ 7435 D2          >                db      {b $} | END_BIT     // msb as name end
 988+ 7436             >
 988+ 7436 15 74       >                dw      last_NFA            // Link to previous definition Name
 988+ 7438             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 988+ 7438 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 988+ 743B             >
 988+ 743B             >
 988+ 743B             >                endif           ; ok        // for other definitions it "points" the correct handler
 988+ 743B             >                // Use of "; ok" to suppress "warning[fwdref]"
 988+ 743B             >
 988+ 743B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 989+ 743B 7D 6C CC 73                  dw      BL, WORD                // bl word
 990+ 743F D4 69 17 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 991+ 7443 3C 69                        dw      EXIT                    // ;
 992+ 7445
 993+ 7445              //  ______________________________________________________________________
 994+ 7445              //
 995+ 7445              // ,"           --
 996+ 7445              // compiles a string terminated by " as a counted string from next input stream
 997+ 7445                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 997+ 7445             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 997+ 7445             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 997+ 7445             >
 997+ 7445             >                // dummy db directives used to calculate length of namec
 997+ 7445 2C 22       >                db      ',"'
 997+ 7447             >len_NFA         defl    $ - temp_NFA
 997+ 7447             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 997+ 7445             >
 997+ 7445 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 997+ 7446 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 997+ 7448             >                org     $-1                 // alter last byte of Name just above to set
 997+ 7447 A2          >                db      {b $} | END_BIT     // msb as name end
 997+ 7448             >
 997+ 7448 31 74       >                dw      last_NFA            // Link to previous definition Name
 997+ 744A             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 997+ 744A CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 997+ 744D             >
 997+ 744D             >
 997+ 744D             >                endif           ; ok        // for other definitions it "points" the correct handler
 997+ 744D             >                // Use of "; ok" to suppress "warning[fwdref]"
 997+ 744D             >
 997+ 744D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 998+ 744D A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 999+ 7451 CC 73                        dw      WORD                    // word
1000+ 7453 17 6B D4 69                  dw      CFETCH, ONE_PLUS        // c@ 1+
1001+ 7457 69 6E                        dw      ALLOT                   // allot
1002+ 7459 4E 6C 88 6E                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1003+ 745D 3C 69                        dw      EXIT
1004+ 745F
1005+ 745F              //  ______________________________________________________________________
1006+ 745F              //
1007+ 745F              // .c           c --
1008+ 745F              // intermediate general purpose string builder, used by ." and .(
1009+ 745F                              Colon_Def DOT_C,  ".C", is_immediate
1009+ 745F             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1009+ 745F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1009+ 745F             >
1009+ 745F             >                // dummy db directives used to calculate length of namec
1009+ 745F 2E 43       >                db      ".C"
1009+ 7461             >len_NFA         defl    $ - temp_NFA
1009+ 7461             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1009+ 745F             >
1009+ 745F C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1009+ 7460 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1009+ 7462             >                org     $-1                 // alter last byte of Name just above to set
1009+ 7461 C3          >                db      {b $} | END_BIT     // msb as name end
1009+ 7462             >
1009+ 7462 45 74       >                dw      last_NFA            // Link to previous definition Name
1009+ 7464             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1009+ 7464 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1009+ 7467             >
1009+ 7467             >
1009+ 7467             >                endif           ; ok        // for other definitions it "points" the correct handler
1009+ 7467             >                // Use of "; ok" to suppress "warning[fwdref]"
1009+ 7467             >
1009+ 7467             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1010+ 7467 B5 6D 00 6B                  dw      STATE, FETCH            // state @
1011+ 746B                                                              // if
1012+ 746B 1C 64                        dw      ZBRANCH
1013+ 746D 12 00                        dw      Dot_C_Else - $
1014+ 746F C6 70 1C 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1015+ 7473 CC 73 17 6B                  dw          WORD, CFETCH        //      word c@
1016+ 7477 D4 69 69 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1017+ 747B                                                              // else
1018+ 747B 07 64                        dw      BRANCH
1019+ 747D 08 00                        dw      Dot_C_Endif - $
1020+ 747F              Dot_C_Else:
1021+ 747F CC 73 E2 71                  dw          WORD, COUNT, TYPE   //      word count type
1021+ 7483 00 72
1022+ 7485              Dot_C_Endif:                                    // endif
1023+ 7485 3C 69                        dw      EXIT                    ;
1024+ 7487
1025+ 7487              //  ______________________________________________________________________
1026+ 7487              //
1027+ 7487              // ."           c --
1028+ 7487                              Colon_Def DOT_QUOTE,  '."', is_immediate
1028+ 7487             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1028+ 7487             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1028+ 7487             >
1028+ 7487             >                // dummy db directives used to calculate length of namec
1028+ 7487 2E 22       >                db      '."'
1028+ 7489             >len_NFA         defl    $ - temp_NFA
1028+ 7489             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1028+ 7487             >
1028+ 7487 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1028+ 7488 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1028+ 748A             >                org     $-1                 // alter last byte of Name just above to set
1028+ 7489 A2          >                db      {b $} | END_BIT     // msb as name end
1028+ 748A             >
1028+ 748A 5F 74       >                dw      last_NFA            // Link to previous definition Name
1028+ 748C             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1028+ 748C CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1028+ 748F             >
1028+ 748F             >
1028+ 748F             >                endif           ; ok        // for other definitions it "points" the correct handler
1028+ 748F             >                // Use of "; ok" to suppress "warning[fwdref]"
1028+ 748F             >
1028+ 748F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1029+ 748F A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1030+ 7493 64 74                        dw      DOT_C                   // [compile] .c
1031+ 7495 3C 69                        dw      EXIT                    // ; immediate
1032+ 7497
1033+ 7497              //  ______________________________________________________________________
1034+ 7497              //
1035+ 7497              // .(           c --
1036+ 7497                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1036+ 7497             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1036+ 7497             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1036+ 7497             >
1036+ 7497             >                // dummy db directives used to calculate length of namec
1036+ 7497 2E 28       >                db      ".("
1036+ 7499             >len_NFA         defl    $ - temp_NFA
1036+ 7499             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1036+ 7497             >
1036+ 7497 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1036+ 7498 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1036+ 749A             >                org     $-1                 // alter last byte of Name just above to set
1036+ 7499 A8          >                db      {b $} | END_BIT     // msb as name end
1036+ 749A             >
1036+ 749A 87 74       >                dw      last_NFA            // Link to previous definition Name
1036+ 749C             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1036+ 749C CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1036+ 749F             >
1036+ 749F             >
1036+ 749F             >                endif           ; ok        // for other definitions it "points" the correct handler
1036+ 749F             >                // Use of "; ok" to suppress "warning[fwdref]"
1036+ 749F             >
1036+ 749F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1037+ 749F A5 63 29 00                  dw      LIT, ")"                // [char] )
1038+ 74A3 64 74                        dw      DOT_C                   // [compile] .c
1039+ 74A5 3C 69                        dw      EXIT                    // ; immediate
1040+ 74A7
1041+ 74A7              //  ______________________________________________________________________
1042+ 74A7              //
1043+ 74A7              // (sgn)        a -- a f
1044+ 74A7              // determines if char in addr a is a sign (+ or -), and in that case increments
1045+ 74A7              // a flag. Returns f as the sign, true for negative, false for positive.
1046+ 74A7              // called by NUMBER and (EXP)
1047+ 74A7                              Colon_Def CSGN,  "(SGN)", is_normal
1047+ 74A7             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1047+ 74A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1047+ 74A7             >
1047+ 74A7             >                // dummy db directives used to calculate length of namec
1047+ 74A7 28 53 47 4E >                db      "(SGN)"
1047+ 74AB 29          >
1047+ 74AC             >len_NFA         defl    $ - temp_NFA
1047+ 74AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1047+ 74A7             >
1047+ 74A7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1047+ 74A8 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1047+ 74AC 29          >
1047+ 74AD             >                org     $-1                 // alter last byte of Name just above to set
1047+ 74AC A9          >                db      {b $} | END_BIT     // msb as name end
1047+ 74AD             >
1047+ 74AD 97 74       >                dw      last_NFA            // Link to previous definition Name
1047+ 74AF             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1047+ 74AF CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1047+ 74B2             >
1047+ 74B2             >
1047+ 74B2             >                endif           ; ok        // for other definitions it "points" the correct handler
1047+ 74B2             >                // Use of "; ok" to suppress "warning[fwdref]"
1047+ 74B2             >
1047+ 74B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1048+ 74B2 7F 6A D4 69                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1048+ 74B6 17 6B
1049+ 74B8 7F 6A A5 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1049+ 74BC 2D 00 B9 6E
1050+ 74C0                                                              // if
1051+ 74C0 1C 64                        dw      ZBRANCH
1052+ 74C2 12 00                        dw      CSgn_Else_0 - $
1053+ 74C4 52 6A                        dw          DROP                //      drop
1054+ 74C6 D4 69                        dw          ONE_PLUS            //      1+
1055+ 74C8 57 6C CA 6D                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1055+ 74CC E1 6A
1056+ 74CE 57 6C                        dw          ONE                 //      1
1057+ 74D0                                                              // else
1058+ 74D0 07 64                        dw      BRANCH
1059+ 74D2 16 00                        dw      CSgn_Endif_0 - $
1060+ 74D4              CSgn_Else_0:
1061+ 74D4 A5 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1061+ 74D8 B9 6E
1062+ 74DA                                                              //      if
1063+ 74DA 1C 64                        dw          ZBRANCH
1064+ 74DC 0A 00                        dw          CSgn_Endif_1 - $
1065+ 74DE D4 69                        dw              ONE_PLUS        //          1+
1066+ 74E0 57 6C CA 6D                  dw              ONE, DPL        //          1 dpl
1067+ 74E4 E1 6A                        dw              PLUSSTORE       //          +!
1068+ 74E6              CSgn_Endif_1                                    //      endif
1069+ 74E6 4E 6C                        dw          ZERO                //      0
1070+ 74E8              CSgn_Endif_0:                                   // endif
1071+ 74E8 3C 69                        dw      EXIT
1072+ 74EA
1073+ 74EA              //  ______________________________________________________________________
1074+ 74EA              //
1075+ 74EA              // (number)     d a -- d1 a1
1076+ 74EA              // using the current BASE parse characters stored in address a
1077+ 74EA              // accumulating a double precision integer d
1078+ 74EA              // the process stops at the first not-convertible character
1079+ 74EA              // A double-number is kept in CPU registers as HLDE.
1080+ 74EA              // On the stack a double number is treated as two single numbers
1081+ 74EA              // where HL is on the top of the stack and DE is the second from top,
1082+ 74EA              // so in the stack memory it appears as LHED.
1083+ 74EA              // Instead, in 2VARIABLE a double number is stored as EDLH.
1084+ 74EA                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1084+ 74EA             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1084+ 74EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1084+ 74EA             >
1084+ 74EA             >                // dummy db directives used to calculate length of namec
1084+ 74EA 28 4E 55 4D >                db      "(NUMBER)"
1084+ 74EE 42 45 52 29 >
1084+ 74F2             >len_NFA         defl    $ - temp_NFA
1084+ 74F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1084+ 74EA             >
1084+ 74EA 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1084+ 74EB 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1084+ 74EF 42 45 52 29 >
1084+ 74F3             >                org     $-1                 // alter last byte of Name just above to set
1084+ 74F2 A9          >                db      {b $} | END_BIT     // msb as name end
1084+ 74F3             >
1084+ 74F3 A7 74       >                dw      last_NFA            // Link to previous definition Name
1084+ 74F5             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1084+ 74F5 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1084+ 74F8             >
1084+ 74F8             >
1084+ 74F8             >                endif           ; ok        // for other definitions it "points" the correct handler
1084+ 74F8             >                // Use of "; ok" to suppress "warning[fwdref]"
1084+ 74F8             >
1084+ 74F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1085+ 74F8                                                              // begin
1086+ 74F8              CNumber_Begin:
1087+ 74F8 D4 69                        dw          ONE_PLUS            //      1+
1088+ 74FA 7F 6A 4D 69                  dw          DUP, TO_R           //      dup >r
1089+ 74FE 17 6B                        dw          CFETCH              //      @
1090+ 7500 C0 6D 00 6B                  dw          BASE, FETCH         //      base @
1091+ 7504 95 64                        dw          DIGIT               //      digit
1092+ 7506                                                              // while
1093+ 7506 1C 64                        dw      ZBRANCH
1094+ 7508 2C 00                        dw      CNumber_While_end - $
1095+ 750A 74 6A                        dw          SWAP                //      swap
1096+ 750C C0 6D 00 6B                  dw          BASE, FETCH         //      base @
1097+ 7510 74 68                        dw          UM_MUL              //      um*
1098+ 7512 52 6A 8A 6A                  dw          DROP, ROT           //      drop rot
1099+ 7516 C0 6D 00 6B                  dw          BASE, FETCH         //      base @
1100+ 751A 74 68                        dw          UM_MUL              //      um*
1101+ 751C C2 69                        dw          DPLUS               //      d+
1102+ 751E CA 6D 00 6B                  dw          DPL, FETCH          //      dpl @
1103+ 7522 D4 69                        dw          ONE_PLUS            //      1+
1104+ 7524                                                              //      if
1105+ 7524 1C 64                        dw          ZBRANCH
1106+ 7526 08 00                        dw          CNumber_Endif - $
1107+ 7528 57 6C CA 6D                  dw              ONE, DPL        //          1 dpl
1108+ 752C E1 6A                        dw              PLUSSTORE       //          +!
1109+ 752E              CNumber_Endif:                                  //      endif
1110+ 752E 5F 69                        dw             R_TO             //      r>  ( balance rp )
1111+ 7530 07 64                        dw      BRANCH
1112+ 7532 C6 FF                        dw      CNumber_Begin - $
1113+ 7534              CNumber_While_end:                              // repeat
1114+ 7534 5F 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1115+ 7536 3C 69                        dw      EXIT                    // ;
1116+ 7538
1117+ 7538              //  ______________________________________________________________________
1118+ 7538              //
1119+ 7538              // number       a -- d
1120+ 7538                              Colon_Def NUMBER,  "NUMBER", is_normal
1120+ 7538             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1120+ 7538             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1120+ 7538             >
1120+ 7538             >                // dummy db directives used to calculate length of namec
1120+ 7538 4E 55 4D 42 >                db      "NUMBER"
1120+ 753C 45 52       >
1120+ 753E             >len_NFA         defl    $ - temp_NFA
1120+ 753E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1120+ 7538             >
1120+ 7538 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1120+ 7539 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1120+ 753D 45 52       >
1120+ 753F             >                org     $-1                 // alter last byte of Name just above to set
1120+ 753E D2          >                db      {b $} | END_BIT     // msb as name end
1120+ 753F             >
1120+ 753F EA 74       >                dw      last_NFA            // Link to previous definition Name
1120+ 7541             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1120+ 7541 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1120+ 7544             >
1120+ 7544             >
1120+ 7544             >                endif           ; ok        // for other definitions it "points" the correct handler
1120+ 7544             >                // Use of "; ok" to suppress "warning[fwdref]"
1120+ 7544             >
1120+ 7544             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1121+ 7544 4E 6C 4E 6C                  dw      ZERO, ZERO              // 0 0
1122+ 7548 8A 6A                        dw      ROT                     // rot
1123+ 754A AF 74 4D 69                  dw      CSGN, TO_R              // (sgn) >r
1124+ 754E 73 6C CA 6D                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1124+ 7552 0B 6B
1125+ 7554 F5 74                        dw      CNUMBER                 // (number)
1126+ 7556 7F 6A 17 6B                  dw      DUP, CFETCH             // dup c@
1127+ 755A A5 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1127+ 755E B9 6E
1128+ 7560                                                              // if
1129+ 7560 1C 64                        dw      ZBRANCH
1130+ 7562 0A 00                        dw      Number_Endif_1 - $
1131+ 7564 4E 6C CA 6D                  dw          ZERO, DPL, STORE    //      0 dpl !
1131+ 7568 0B 6B
1132+ 756A F5 74                        dw          CNUMBER             //      (number)
1133+ 756C              Number_Endif_1:                                 // endif
1134+ 756C 17 6B 7D 6C                  dw      CFETCH, BL              // c@ bl
1135+ 7570 AD 6E 4E 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1135+ 7574 2D 70
1136+ 7576 5F 69                        dw      R_TO                    // r>
1137+ 7578                                                              // if
1138+ 7578 1C 64                        dw      ZBRANCH
1139+ 757A 04 00                        dw      Number_Endif_2 - $
1140+ 757C 2C 6A                        dw          DMINUS              //      dminus
1141+ 757E              Number_Endif_2:                                 // endif
1142+ 757E 3C 69                        dw      EXIT                    // ;
1143+ 7580
1144+ 7580              //  ______________________________________________________________________
1145+ 7580              //
1146+ 7580              // -find        a -- d
1147+ 7580                              Colon_Def LFIND,  "-FIND", is_normal
1147+ 7580             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1147+ 7580             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1147+ 7580             >
1147+ 7580             >                // dummy db directives used to calculate length of namec
1147+ 7580 2D 46 49 4E >                db      "-FIND"
1147+ 7584 44          >
1147+ 7585             >len_NFA         defl    $ - temp_NFA
1147+ 7585             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1147+ 7580             >
1147+ 7580 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1147+ 7581 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1147+ 7585 44          >
1147+ 7586             >                org     $-1                 // alter last byte of Name just above to set
1147+ 7585 C4          >                db      {b $} | END_BIT     // msb as name end
1147+ 7586             >
1147+ 7586 38 75       >                dw      last_NFA            // Link to previous definition Name
1147+ 7588             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1147+ 7588 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1147+ 758B             >
1147+ 758B             >
1147+ 758B             >                endif           ; ok        // for other definitions it "points" the correct handler
1147+ 758B             >                // Use of "; ok" to suppress "warning[fwdref]"
1147+ 758B             >
1147+ 758B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1148+ 758B 7D 6C CC 73                  dw      BL, WORD                // bl word
1149+ 758F 9B 6D 00 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1149+ 7593 00 6B
1150+ 7595 02 65                        dw      C_FIND                  // (find)
1151+ 7597 2C 6F                        dw      QDUP                    // ?dup
1152+ 7599 79 69                        dw      ZEQUAL                  // 0=
1153+ 759B                                                              // if
1154+ 759B 1C 64                        dw      ZBRANCH
1155+ 759D 08 00                        dw      LFind_Endif - $
1156+ 759F 58 6E                        dw          HERE                //      here
1157+ 75A1 9B 6F                        dw          LATEST              //      latest
1158+ 75A3 02 65                        dw          C_FIND              //      (find)
1159+ 75A5              LFind_Endif:                                    // endif
1160+ 75A5 3C 69                        dw      EXIT                    // ;
1161+ 75A7
1162+ 75A7              //  ______________________________________________________________________
1163+ 75A7              //
1164+ 75A7              // (abort)      --
1165+ 75A7                              Colon_Def CABORT,  "(ABORT)", is_normal
1165+ 75A7             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1165+ 75A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1165+ 75A7             >
1165+ 75A7             >                // dummy db directives used to calculate length of namec
1165+ 75A7 28 41 42 4F >                db      "(ABORT)"
1165+ 75AB 52 54 29    >
1165+ 75AE             >len_NFA         defl    $ - temp_NFA
1165+ 75AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1165+ 75A7             >
1165+ 75A7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1165+ 75A8 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1165+ 75AC 52 54 29    >
1165+ 75AF             >                org     $-1                 // alter last byte of Name just above to set
1165+ 75AE A9          >                db      {b $} | END_BIT     // msb as name end
1165+ 75AF             >
1165+ 75AF 80 75       >                dw      last_NFA            // Link to previous definition Name
1165+ 75B1             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1165+ 75B1 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1165+ 75B4             >
1165+ 75B4             >
1165+ 75B4             >                endif           ; ok        // for other definitions it "points" the correct handler
1165+ 75B4             >                // Use of "; ok" to suppress "warning[fwdref]"
1165+ 75B4             >
1165+ 75B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1166+ 75B4 8D 78                        dw      ABORT                   // abort
1167+ 75B6 3C 69                        dw      EXIT                    // ;
1168+ 75B8
1169+ 75B8              //  ______________________________________________________________________
1170+ 75B8              //
1171+ 75B8              // error        n --
1172+ 75B8              // raise an error
1173+ 75B8              // if WARNING is 0, prints "MSG#n".
1174+ 75B8              // if WARNING is 1, prints line n of screen 4.
1175+ 75B8              // if WARNING is -1 does (ABORT) that normally does ABORT
1176+ 75B8              // value can be negative or beyond block 4.
1177+ 75B8                              Colon_Def ERROR,  "ERROR", is_normal
1177+ 75B8             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1177+ 75B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1177+ 75B8             >
1177+ 75B8             >                // dummy db directives used to calculate length of namec
1177+ 75B8 45 52 52 4F >                db      "ERROR"
1177+ 75BC 52          >
1177+ 75BD             >len_NFA         defl    $ - temp_NFA
1177+ 75BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1177+ 75B8             >
1177+ 75B8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1177+ 75B9 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1177+ 75BD 52          >
1177+ 75BE             >                org     $-1                 // alter last byte of Name just above to set
1177+ 75BD D2          >                db      {b $} | END_BIT     // msb as name end
1177+ 75BE             >
1177+ 75BE A7 75       >                dw      last_NFA            // Link to previous definition Name
1177+ 75C0             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1177+ 75C0 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1177+ 75C3             >
1177+ 75C3             >
1177+ 75C3             >                endif           ; ok        // for other definitions it "points" the correct handler
1177+ 75C3             >                // Use of "; ok" to suppress "warning[fwdref]"
1177+ 75C3             >
1177+ 75C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1178+ 75C3 06 6D 00 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1178+ 75C7 93 69
1179+ 75C9                                                              // if
1180+ 75C9 1C 64                        dw      ZBRANCH
1181+ 75CB 04 00                        dw      Error_Endif_1 - $
1182+ 75CD B1 75                        dw          CABORT              //      (abort)
1183+ 75CF              Error_Endif_1:                                  // endif
1184+ 75CF 58 6E E2 71                  dw      HERE, COUNT, TYPE       // here count type
1184+ 75D3 00 72
1185+ 75D5 1C 74                        dw      C_DOT_QUOTE             // .( ? )
1186+ 75D7 02 3F 20                     db      2, "? "
1187+ 75DA D0 7A                        dw      MESSAGE                 // message  ( forward )
1188+ 75DC D9 6C 00 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1188+ 75E0 19 69
1189+ 75E2 62 6D 00 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1189+ 75E6 2C 6F
1190+ 75E8                                                              // if
1191+ 75E8 1C 64                        dw      ZBRANCH
1192+ 75EA 08 00                        dw      Error_Endif_2 - $
1193+ 75EC 6C 6D 00 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1193+ 75F0 74 6A
1194+ 75F2              Error_Endif_2:                                  // endif
1195+ 75F2 4B 78                        dw      QUIT                    // quit ( forward )
1196+ 75F4 3C 69                        dw      EXIT                    // ;
1197+ 75F6              //  ______________________________________________________________________
1198+ 75F6              //
1199+ 75F6              // id.          nfa --
1200+ 75F6                              Colon_Def ID_DOT,  "ID.", is_normal
1200+ 75F6             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1200+ 75F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1200+ 75F6             >
1200+ 75F6             >                // dummy db directives used to calculate length of namec
1200+ 75F6 49 44 2E    >                db      "ID."
1200+ 75F9             >len_NFA         defl    $ - temp_NFA
1200+ 75F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1200+ 75F6             >
1200+ 75F6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1200+ 75F7 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1200+ 75FA             >                org     $-1                 // alter last byte of Name just above to set
1200+ 75F9 AE          >                db      {b $} | END_BIT     // msb as name end
1200+ 75FA             >
1200+ 75FA B8 75       >                dw      last_NFA            // Link to previous definition Name
1200+ 75FC             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1200+ 75FC CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1200+ 75FF             >
1200+ 75FF             >
1200+ 75FF             >                endif           ; ok        // for other definitions it "points" the correct handler
1200+ 75FF             >                // Use of "; ok" to suppress "warning[fwdref]"
1200+ 75FF             >
1200+ 75FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1201+ 75FF B8 73 A5 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1201+ 7603 20 00 A5 63
1201+ 7607 60 00
1202+ 7609 67 73                        dw      FILL                    // fill
1203+ 760B 7F 6A E1 6F                  dw      DUP, PFA, LFA           // dup pfa lfa
1203+ 760F AC 6F
1204+ 7611 44 6A AD 6E                  dw      OVER, SUBTRACT          // over -
1205+ 7615 B8 73 74 6A                  dw      PAD, SWAP               // pad swap
1206+ 7619 45 68                        dw      CMOVE                   // cmove
1207+ 761B B8 73 E2 71                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1207+ 761F A5 63 1F 00
1208+ 7623 DA 68                        dw      AND_OP                  // and  ( use only lower bits )
1209+ 7625 00 72 63 6F                  dw      TYPE, SPACE             // type
1210+ 7629 3C 69                        dw      EXIT                    // ;
1211+ 762B
1212+ 762B              //  ______________________________________________________________________
1213+ 762B              //
1214+ 762B              // code         -- cccc
1215+ 762B                              Colon_Def CODE,  "CODE", is_normal
1215+ 762B             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1215+ 762B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1215+ 762B             >
1215+ 762B             >                // dummy db directives used to calculate length of namec
1215+ 762B 43 4F 44 45 >                db      "CODE"
1215+ 762F             >len_NFA         defl    $ - temp_NFA
1215+ 762F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1215+ 762B             >
1215+ 762B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1215+ 762C 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1215+ 7630             >                org     $-1                 // alter last byte of Name just above to set
1215+ 762F C5          >                db      {b $} | END_BIT     // msb as name end
1215+ 7630             >
1215+ 7630 F6 75       >                dw      last_NFA            // Link to previous definition Name
1215+ 7632             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1215+ 7632 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1215+ 7635             >
1215+ 7635             >
1215+ 7635             >                endif           ; ok        // for other definitions it "points" the correct handler
1215+ 7635             >                // Use of "; ok" to suppress "warning[fwdref]"
1215+ 7635             >
1215+ 7635             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1216+ 7635 88 75                        dw      LFIND                   // -find
1217+ 7637                                                              // if
1218+ 7637 1C 64                        dw      ZBRANCH
1219+ 7639 10 00                        dw      Code_Endif - $
1220+ 763B 52 6A                        dw          DROP                //      drop
1221+ 763D 09 70 FC 75                  dw          TO_NAME, ID_DOT     //      >name id.
1222+ 7641 A5 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1222+ 7645 D0 7A
1223+ 7647 63 6F                        dw          SPACE               //      space
1224+ 7649              Code_Endif:                                     // endif
1225+ 7649 58 6E                        dw      HERE                    // here
1226+ 764B                                                              // ( ---- here begins NFA ---- )
1227+ 764B 7F 6A 17 6B                  dw      DUP, CFETCH             // dup c@
1228+ 764F F8 6C 00 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1228+ 7653 FD 6E
1229+ 7655 D4 69 69 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1230+ 7659 7F 6A                        dw      DUP                     // dup
1231+ 765B A5 63                        dw      LIT
1232+ 765D A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1233+ 765F F5 6A                        dw      TOGGLE                  // toggle
1234+ 7661 58 6E DE 69                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1235+ 7665 A5 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1235+ 7669 F5 6A
1236+ 766B                                                              // ( ---- here is LFA ---- )
1237+ 766B 9B 6F 76 6E                  dw      LATEST, COMMA           // latest ,
1238+ 766F A9 6D 00 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1238+ 7673 0B 6B
1239+ 7675                                                              // ( ---- here is LFA ---- )
1240+ 7675              //              dw      HERE, CELL_PLUS, COMMA  // ( CFA is empty and PFA yet to exist )
1241+ 7675 3C 69                        dw      EXIT                    // ;
1242+ 7677
1243+ 7677              //  ______________________________________________________________________
1244+ 7677              //
1245+ 7677              // create       -- cccc     ( compile time )
1246+ 7677              //              -- a        ( run time )
1247+ 7677                              Colon_Def CREATE,  "CREATE", is_normal
1247+ 7677             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1247+ 7677             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1247+ 7677             >
1247+ 7677             >                // dummy db directives used to calculate length of namec
1247+ 7677 43 52 45 41 >                db      "CREATE"
1247+ 767B 54 45       >
1247+ 767D             >len_NFA         defl    $ - temp_NFA
1247+ 767D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1247+ 7677             >
1247+ 7677 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1247+ 7678 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1247+ 767C 54 45       >
1247+ 767E             >                org     $-1                 // alter last byte of Name just above to set
1247+ 767D C5          >                db      {b $} | END_BIT     // msb as name end
1247+ 767E             >
1247+ 767E 2B 76       >                dw      last_NFA            // Link to previous definition Name
1247+ 7680             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1247+ 7680 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1247+ 7683             >
1247+ 7683             >
1247+ 7683             >                endif           ; ok        // for other definitions it "points" the correct handler
1247+ 7683             >                // Use of "; ok" to suppress "warning[fwdref]"
1247+ 7683             >
1247+ 7683             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1248+ 7683 32 76 16 71                  dw      CODE, SMUDGE            // code smudge
1249+ 7687 A5 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1249+ 768B 88 6E
1250+ 768D A5 63 2D 6C                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1250+ 7691 76 6E
1251+ 7693 70 71                        dw      C_SEMICOLON_CODE
1252+ 7695                              // this routine is called from the call coded in CFA
1253+ 7695              Create_Ptr:
1254+ 7695
1255+ 7695
1256+ 7695
1257+ 7695                              next
1257+ 7695 DD E9       >                jp      (ix)
1258+ 7697
1259+ 7697              //  ______________________________________________________________________
1260+ 7697              //
1261+ 7697              // [compile]    -- cccc     ( compile time )
1262+ 7697                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1262+ 7697             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1262+ 7697             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1262+ 7697             >
1262+ 7697             >                // dummy db directives used to calculate length of namec
1262+ 7697 5B 43 4F 4D >                db      "[COMPILE]"
1262+ 769B 50 49 4C 45 >
1262+ 769F 5D          >
1262+ 76A0             >len_NFA         defl    $ - temp_NFA
1262+ 76A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1262+ 7697             >
1262+ 7697 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1262+ 7698 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1262+ 769C 50 49 4C 45 >
1262+ 76A0 5D          >
1262+ 76A1             >                org     $-1                 // alter last byte of Name just above to set
1262+ 76A0 DD          >                db      {b $} | END_BIT     // msb as name end
1262+ 76A1             >
1262+ 76A1 77 76       >                dw      last_NFA            // Link to previous definition Name
1262+ 76A3             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1262+ 76A3 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1262+ 76A6             >
1262+ 76A6             >
1262+ 76A6             >                endif           ; ok        // for other definitions it "points" the correct handler
1262+ 76A6             >                // Use of "; ok" to suppress "warning[fwdref]"
1262+ 76A6             >
1262+ 76A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1263+ 76A6 88 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1264+ 76A8 79 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1265+ 76AA 4E 6C 2D 70                  dw      ZERO, QERROR            // 0 ?error
1266+ 76AE 52 6A                        dw      DROP                    // drop       (  cfa  )
1267+ 76B0 76 6E                        dw      COMMA                   // ,
1268+ 76B2 3C 69                        dw      EXIT                    // ; immediate
1269+ 76B4
1270+ 76B4              //  ______________________________________________________________________
1271+ 76B4              //
1272+ 76B4              // literal      n --      ( compile time )
1273+ 76B4                              Colon_Def LITERAL,  "LITERAL", is_immediate
1273+ 76B4             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1273+ 76B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1273+ 76B4             >
1273+ 76B4             >                // dummy db directives used to calculate length of namec
1273+ 76B4 4C 49 54 45 >                db      "LITERAL"
1273+ 76B8 52 41 4C    >
1273+ 76BB             >len_NFA         defl    $ - temp_NFA
1273+ 76BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1273+ 76B4             >
1273+ 76B4 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1273+ 76B5 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1273+ 76B9 52 41 4C    >
1273+ 76BC             >                org     $-1                 // alter last byte of Name just above to set
1273+ 76BB CC          >                db      {b $} | END_BIT     // msb as name end
1273+ 76BC             >
1273+ 76BC 97 76       >                dw      last_NFA            // Link to previous definition Name
1273+ 76BE             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1273+ 76BE CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1273+ 76C1             >
1273+ 76C1             >
1273+ 76C1             >                endif           ; ok        // for other definitions it "points" the correct handler
1273+ 76C1             >                // Use of "; ok" to suppress "warning[fwdref]"
1273+ 76C1             >
1273+ 76C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1274+ 76C1 B5 6D 00 6B                  dw      STATE, FETCH            // state @
1275+ 76C5                                                              // if
1276+ 76C5 1C 64                        dw      ZBRANCH
1277+ 76C7 08 00                        dw      Literal_Endif - $
1278+ 76C9 C6 70 A5 63                  dw          COMPILE, LIT        //      compile lit
1279+ 76CD 76 6E                        dw          COMMA               //      ,
1280+ 76CF              Literal_Endif:                                  // endif
1281+ 76CF 3C 69                        dw      EXIT                    // ; immediate
1282+ 76D1
1283+ 76D1              //  ______________________________________________________________________
1284+ 76D1              //
1285+ 76D1              // dliteral     n --      ( compile time )
1286+ 76D1                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1286+ 76D1             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1286+ 76D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1286+ 76D1             >
1286+ 76D1             >                // dummy db directives used to calculate length of namec
1286+ 76D1 44 4C 49 54 >                db      "DLITERAL"
1286+ 76D5 45 52 41 4C >
1286+ 76D9             >len_NFA         defl    $ - temp_NFA
1286+ 76D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1286+ 76D1             >
1286+ 76D1 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1286+ 76D2 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1286+ 76D6 45 52 41 4C >
1286+ 76DA             >                org     $-1                 // alter last byte of Name just above to set
1286+ 76D9 CC          >                db      {b $} | END_BIT     // msb as name end
1286+ 76DA             >
1286+ 76DA B4 76       >                dw      last_NFA            // Link to previous definition Name
1286+ 76DC             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1286+ 76DC CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1286+ 76DF             >
1286+ 76DF             >
1286+ 76DF             >                endif           ; ok        // for other definitions it "points" the correct handler
1286+ 76DF             >                // Use of "; ok" to suppress "warning[fwdref]"
1286+ 76DF             >
1286+ 76DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1287+ 76DF B5 6D 00 6B                  dw      STATE, FETCH            // state @
1288+ 76E3                                                              // if
1289+ 76E3 1C 64                        dw      ZBRANCH
1290+ 76E5 08 00                        dw      DLiteral_Endif - $
1291+ 76E7 74 6A                        dw          SWAP                //      swap
1292+ 76E9 BE 76 BE 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1293+ 76ED              DLiteral_Endif:                                 // endif
1294+ 76ED 3C 69                        dw      EXIT                    // ; immediate
1295+ 76EF
1296+ 76EF              //  ______________________________________________________________________
1297+ 76EF              //
1298+ 76EF              // [char]       n --      ( compile time )
1299+ 76EF              // inside colon definition, gets first character from next input word
1300+ 76EF              // and compiles it as literal.
1301+ 76EF                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1301+ 76EF             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1301+ 76EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1301+ 76EF             >
1301+ 76EF             >                // dummy db directives used to calculate length of namec
1301+ 76EF 5B 43 48 41 >                db      "[CHAR]"
1301+ 76F3 52 5D       >
1301+ 76F5             >len_NFA         defl    $ - temp_NFA
1301+ 76F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1301+ 76EF             >
1301+ 76EF C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1301+ 76F0 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1301+ 76F4 52 5D       >
1301+ 76F6             >                org     $-1                 // alter last byte of Name just above to set
1301+ 76F5 DD          >                db      {b $} | END_BIT     // msb as name end
1301+ 76F6             >
1301+ 76F6 D1 76       >                dw      last_NFA            // Link to previous definition Name
1301+ 76F8             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1301+ 76F8 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1301+ 76FB             >
1301+ 76FB             >
1301+ 76FB             >                endif           ; ok        // for other definitions it "points" the correct handler
1301+ 76FB             >                // Use of "; ok" to suppress "warning[fwdref]"
1301+ 76FB             >
1301+ 76FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1302+ 76FB 38 74 BE 76                  dw      CHAR, LITERAL           // char [compile] literal
1303+ 76FF 3C 69                        dw      EXIT                    // ; immediate
1304+ 7701
1305+ 7701              //  ______________________________________________________________________
1306+ 7701              //
1307+ 7701              // 0x00         n --      ( compile time )
1308+ 7701                              Colon_Def NUL_WORD,  $00, is_immediate
1308+ 7701             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1308+ 7701             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1308+ 7701             >
1308+ 7701             >                // dummy db directives used to calculate length of namec
1308+ 7701 00          >                db      $00
1308+ 7702             >len_NFA         defl    $ - temp_NFA
1308+ 7702             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1308+ 7701             >
1308+ 7701 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1308+ 7702 00          >                db      $00               // name string in 7-bit ascii, but
1308+ 7703             >                org     $-1                 // alter last byte of Name just above to set
1308+ 7702 80          >                db      {b $} | END_BIT     // msb as name end
1308+ 7703             >
1308+ 7703 EF 76       >                dw      last_NFA            // Link to previous definition Name
1308+ 7705             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1308+ 7705 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1308+ 7708             >
1308+ 7708             >
1308+ 7708             >                endif           ; ok        // for other definitions it "points" the correct handler
1308+ 7708             >                // Use of "; ok" to suppress "warning[fwdref]"
1308+ 7708             >
1308+ 7708             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1309+ 7708 62 6D 00 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1309+ 770C 57 6C
1310+ 770E EE 6E                        dw      GREATER                 // > if
1311+ 7710                                                              // if
1312+ 7710 1C 64                        dw      ZBRANCH
1313+ 7712 28 00                        dw      Nul_Else_1 - $
1314+ 7714 57 6C 62 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1314+ 7718 E1 6A
1315+ 771A 4E 6C 6C 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
1315+ 771E 0B 6B
1316+ 7720 62 6D 00 6B                  dw          BLK, FETCH          //      blk @
1317+ 7724 A2 6C                        dw          BSCR                //      b/scr
1318+ 7726 DE 69                        dw          ONE_SUBTRACT        //      1 -
1319+ 7728 DA 68                        dw          AND_OP              //      and  ( this is tricky )
1320+ 772A 79 69                        dw          ZEQUAL              //      0=
1321+ 772C                                                              //      if
1322+ 772C 1C 64                        dw          ZBRANCH
1323+ 772E 08 00                        dw          Nul_Endif_2 - $
1324+ 7730 61 70                        dw              QEXEC           //          ?exec
1325+ 7732 5F 69 52 6A                  dw              R_TO, DROP      //          r> drop
1326+ 7736              Nul_Endif_2:                                    //      endif
1327+ 7736 07 64                        dw      BRANCH
1328+ 7738 06 00                        dw      Nul_Endif_1 - $
1329+ 773A              Nul_Else_1:                                     // else
1330+ 773A 5F 69 52 6A                  dw          R_TO, DROP          //      r> drop
1331+ 773E              Nul_Endif_1:                                    // endif
1332+ 773E 3C 69                        dw      EXIT                    // ;
1333+ 7740
1334+ 7740              //  ______________________________________________________________________
1335+ 7740              //
1336+ 7740              // ?stack       --
1337+ 7740              // Raise error #1 if stack is empty and you pop it
1338+ 7740              // Raise error #7 if stack is full.
1339+ 7740              // This means SP must always stay between HERE and FFFF
1340+ 7740              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1341+ 7740              // for Next 8K MMU paging this is $DOE8
1342+ 7740                              Colon_Def QSTACK, "?STACK", is_normal
1342+ 7740             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1342+ 7740             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1342+ 7740             >
1342+ 7740             >                // dummy db directives used to calculate length of namec
1342+ 7740 3F 53 54 41 >                db      "?STACK"
1342+ 7744 43 4B       >
1342+ 7746             >len_NFA         defl    $ - temp_NFA
1342+ 7746             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1342+ 7740             >
1342+ 7740 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1342+ 7741 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1342+ 7745 43 4B       >
1342+ 7747             >                org     $-1                 // alter last byte of Name just above to set
1342+ 7746 CB          >                db      {b $} | END_BIT     // msb as name end
1342+ 7747             >
1342+ 7747 01 77       >                dw      last_NFA            // Link to previous definition Name
1342+ 7749             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1342+ 7749 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1342+ 774C             >
1342+ 774C             >
1342+ 774C             >                endif           ; ok        // for other definitions it "points" the correct handler
1342+ 774C             >                // Use of "; ok" to suppress "warning[fwdref]"
1342+ 774C             >
1342+ 774C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1343+ 774C 0C 69                        dw      SPFETCH                 // sp@
1344+ 774E D9 6C 00 6B                  dw      S0, FETCH               // s0 @
1345+ 7752 74 6A C7 6E                  dw      SWAP, ULESS             // swap u<
1346+ 7756 57 6C 2D 70                  dw      ONE, QERROR             // 1 ?error
1347+ 775A 58 6E                        dw      HERE                    // here
1348+ 775C D9 6C 00 6B                  dw      S0, FETCH, LESS         // s0 @ <
1348+ 7760 D9 6E
1349+ 7762                                                              // if
1350+ 7762 1C 64                        dw      ZBRANCH
1351+ 7764 14 00                        dw      QStack_Endif - $
1352+ 7766 0C 69                        dw          SPFETCH             //      sp@
1353+ 7768 58 6E A5 63                  dw          HERE, LIT, 128      //      here 128
1353+ 776C 80 00
1354+ 776E B7 69 C7 6E                  dw          PLUS, ULESS         //      plus u<
1355+ 7772 A5 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1355+ 7776 2D 70
1356+ 7778              QStack_Endif:                                   // endif
1357+ 7778 3C 69                        dw      EXIT                    // ;
1358+ 777A
1359+ 777A
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
 112  777A                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
   1+ 777A              //  ______________________________________________________________________
   2+ 777A              //
   3+ 777A              //  L2.asm
   4+ 777A              //
   5+ 777A              //  Level-2
   6+ 777A              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 777A              //  ______________________________________________________________________
   8+ 777A
   9+ 777A
  10+ 777A              //  ______________________________________________________________________
  11+ 777A              //
  12+ 777A              // interpret    --
  13+ 777A              // This is the text interpreter.
  14+ 777A              // It executes or compiles, depending on STATE, the text coming from
  15+ 777A              // current input stream.
  16+ 777A              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 777A              // the word is interpreted as numeric and converted, using current BASE,
  18+ 777A              // leaving on top of stack a single or double precision number, depending
  19+ 777A              // on the presence of a decimal point.
  20+ 777A              // If the number conversion fails, the terminal is notified with ? followed
  21+ 777A              // by the offending word.
  22+ 777A                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 777A             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 777A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 777A             >
  22+ 777A             >                // dummy db directives used to calculate length of namec
  22+ 777A 49 4E 54 45 >                db      "INTERPRET"
  22+ 777E 52 50 52 45 >
  22+ 7782 54          >
  22+ 7783             >len_NFA         defl    $ - temp_NFA
  22+ 7783             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 777A             >
  22+ 777A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 777B 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 777F 52 50 52 45 >
  22+ 7783 54          >
  22+ 7784             >                org     $-1                 // alter last byte of Name just above to set
  22+ 7783 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 7784             >
  22+ 7784 40 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 7786             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 7786 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 7789             >
  22+ 7789             >
  22+ 7789             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 7789             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 7789             >
  22+ 7789             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 7789
  24+ 7789              Interpret_Begin:                                        // begin
  25+ 7789 88 75                        dw          LFIND                       //      -find
  26+ 778B                                                                      //      if
  27+ 778B 1C 64                        dw          ZBRANCH
  28+ 778D 1A 00                        dw          Interpret_Else_1 - $
  29+ 778F B5 6D 00 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 7793 D9 6E
  30+ 7795                                                                      //          if
  31+ 7795 1C 64                        dw              ZBRANCH
  32+ 7797 08 00                        dw              Interpret_Else_2 - $
  33+ 7799 E4 70                        dw                  COMPILE_XT          //              compile,
  34+ 779B                                                                      //          else
  35+ 779B 07 64                        dw              BRANCH
  36+ 779D 06 00                        dw              Interpret_Endif_2 - $
  37+ 779F              Interpret_Else_2:
  38+ 779F B8 63 FC 6B                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77A3              Interpret_Endif_2:                                      //          endif
  40+ 77A3                                                                      //      else
  41+ 77A3 07 64                        dw          BRANCH
  42+ 77A5 1A 00                        dw          Interpret_Endif_1 - $
  43+ 77A7              Interpret_Else_1:
  44+ 77A7 58 6E 41 75                  dw              HERE, NUMBER            //          here number
  45+ 77AB CA 6D 00 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77AF D4 69
  46+ 77B1                                                                      //          if
  47+ 77B1 1C 64                        dw              ZBRANCH
  48+ 77B3 08 00                        dw              Interpret_Else_3 - $
  49+ 77B5              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77B5              //                                                      //              if
  51+ 77B5              //              dw                  ZBRANCH
  52+ 77B5              //              dw                  Interpret_Endif_4 - $
  53+ 77B5              //              dw                      ONE, ZERO       //                  1 0
  54+ 77B5              //              dw                      TWO_DROP        //                  2drop
  55+ 77B5              //Interpret_Endif_4:                                      //              endif
  56+ 77B5 DC 76                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77B7                                                                      //          else
  58+ 77B7 07 64                        dw              BRANCH
  59+ 77B9 06 00                        dw              Interpret_Endif_3 - $
  60+ 77BB              Interpret_Else_3:
  61+ 77BB 52 6A                        dw                  DROP                //              drop
  62+ 77BD BE 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77BF              Interpret_Endif_3:                                      //          endif
  64+ 77BF              Interpret_Endif_1:                                      //      endif
  65+ 77BF 49 77                        dw          QSTACK                      //      ?stack
  66+ 77C1 0B 67                        dw          QTERMINAL                   //      ?terminal
  67+ 77C3                                                                      //      if
  68+ 77C3 1C 64                        dw          ZBRANCH
  69+ 77C5 04 00                        dw          Interpret_Endif_5 - $
  70+ 77C7 B1 75                        dw              CABORT                  //          (abort)
  71+ 77C9              Interpret_Endif_5:                                      //      endif
  72+ 77C9 07 64                        dw      BRANCH
  73+ 77CB BE FF                        dw      Interpret_Begin - $
  74+ 77CD 3C 69                        dw      EXIT                            // ;
  75+ 77CF
  76+ 77CF              //  ______________________________________________________________________
  77+ 77CF              //
  78+ 77CF              // vocabulary   -- cccc     ( compile time )
  79+ 77CF              // Defining word used in the form   VOCABULARY cccc
  80+ 77CF              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 77CF              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 77CF              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 77CF              // so new definitions can be inserted in that vocabulary.
  84+ 77CF                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 77CF             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 77CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 77CF             >
  84+ 77CF             >                // dummy db directives used to calculate length of namec
  84+ 77CF 56 4F 43 41 >                db      "VOCABULARY"
  84+ 77D3 42 55 4C 41 >
  84+ 77D7 52 59       >
  84+ 77D9             >len_NFA         defl    $ - temp_NFA
  84+ 77D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 77CF             >
  84+ 77CF 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 77D0 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 77D4 42 55 4C 41 >
  84+ 77D8 52 59       >
  84+ 77DA             >                org     $-1                 // alter last byte of Name just above to set
  84+ 77D9 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 77DA             >
  84+ 77DA 7A 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 77DC             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 77DC CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 77DF             >
  84+ 77DF             >
  84+ 77DF             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 77DF             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 77DF             >
  84+ 77DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 77DF
  86+ 77DF AA 71                        dw      CBUILDS
  87+ 77E1
  88+ 77E1 A5 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 77E5 76 6E
  89+ 77E7 A9 6D 00 6B                  dw      CURRENT, FETCH          // current @
  90+ 77EB 01 6A 76 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 77EF 58 6E                        dw      HERE                    // here
  92+ 77F1 2A 6D 00 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 77F5 76 6E
  93+ 77F7 2A 6D 0B 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 77FB
  95+ 77FB BB 71                        dw      DOES_TO                 // does>
  96+ 77FD              Vocabulary_Does:
  97+ 77FD F6 69                        dw      CELL_PLUS               // cell+
  98+ 77FF 9B 6D 0B 6B                  dw      CONTEXT, STORE          // context !
  99+ 7803 3C 69                        dw      EXIT                    // ;
 100+ 7805
 101+ 7805              //  ______________________________________________________________________
 102+ 7805              //
 103+ 7805              // forth        --
 104+ 7805              // Name of the first vocabulary.
 105+ 7805              // It makes FORTH the CONTEXT vocabulary.
 106+ 7805              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7805              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7805              // of a colon definition to be able to select the vocabulary.
 109+ 7805
 110+ 7805                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7805             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7805             >
 110+ 7805             >                // dummy db directives used to calculate length of namec
 110+ 7805 46 4F 52 54 >                db      "FORTH"
 110+ 7809 48          >
 110+ 780A             >len_NFA         defl    $ - temp_NFA
 110+ 780A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7805             >
 110+ 7805 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 7806 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 780A 48          >
 110+ 780B             >                org     $-1                 // alter last byte of Name just above to set
 110+ 780A C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 780B             >
 110+ 780B CF 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 780D             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 780D CD C8 71    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 7810             >
 110+ 7810             >
 110+ 7810             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 7810             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 7810             >
 110+ 7810             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 7810 FD 77                        dw      Vocabulary_Does
 112+ 7812 81 A0                        db      $81, $A0
 113+ 7814              Forth_Latest_Ptr:
 114+ 7814 87 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 7816              Voclink_Ptr:
 116+ 7816 00 00                        dw      0
 117+ 7818              // Any new vocabulary is structured as follow:
 118+ 7818              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7818              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7818              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7818              //       at creations it points to the null-word of its parent vocabulary
 122+ 7818              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7818              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7818              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7818              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7818              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7818              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7818
 129+ 7818              //  ______________________________________________________________________
 130+ 7818              //
 131+ 7818              // definitions  --
 132+ 7818              // Used in the form  cccc DEFINITIONS
 133+ 7818              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7818              // vocabulary cccc.
 135+ 7818                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7818             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7818             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7818             >
 135+ 7818             >                // dummy db directives used to calculate length of namec
 135+ 7818 44 45 46 49 >                db      "DEFINITIONS"
 135+ 781C 4E 49 54 49 >
 135+ 7820 4F 4E 53    >
 135+ 7823             >len_NFA         defl    $ - temp_NFA
 135+ 7823             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7818             >
 135+ 7818 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7819 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 781D 4E 49 54 49 >
 135+ 7821 4F 4E 53    >
 135+ 7824             >                org     $-1                 // alter last byte of Name just above to set
 135+ 7823 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7824             >
 135+ 7824 05 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 7826             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7826 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7829             >
 135+ 7829             >
 135+ 7829             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7829             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7829             >
 135+ 7829             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7829 9B 6D 00 6B                  dw      CONTEXT, FETCH          // context @
 137+ 782D A9 6D 0B 6B                  dw      CURRENT, STORE          // current !
 138+ 7831 3C 69                        dw      EXIT                    // ;
 139+ 7833
 140+ 7833              //  ______________________________________________________________________
 141+ 7833              //
 142+ 7833              // (            -- cccc )
 143+ 7833              // the following text is interpreted as a comment until a closing )
 144+ 7833                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7833             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7833             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7833             >
 144+ 7833             >                // dummy db directives used to calculate length of namec
 144+ 7833 28          >                db      "("
 144+ 7834             >len_NFA         defl    $ - temp_NFA
 144+ 7834             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7833             >
 144+ 7833 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7834 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 7835             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7834 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 7835             >
 144+ 7835 18 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7837             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7837 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 783A             >
 144+ 783A             >
 144+ 783A             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 783A             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 783A             >
 144+ 783A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 783A A5 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 783E CC 73 52 6A                  dw      WORD, DROP              // word drop
 147+ 7842 3C 69                        dw      EXIT                    // ;
 148+ 7844
 149+ 7844              //  ______________________________________________________________________
 150+ 7844              //
 151+ 7844              // quit         --
 152+ 7844              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7844                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7844             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7844             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7844             >
 153+ 7844             >                // dummy db directives used to calculate length of namec
 153+ 7844 51 55 49 54 >                db      "QUIT"
 153+ 7848             >len_NFA         defl    $ - temp_NFA
 153+ 7848             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7844             >
 153+ 7844 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7845 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7849             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7848 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7849             >
 153+ 7849 33 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 784B             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 784B CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 784E             >
 153+ 784E             >
 153+ 784E             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 784E             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 784E             >
 153+ 784E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 784E
 155+ 784E 2B 6E 00 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7852 8A 67 52 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 7856 4E 6C 2B 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 785A 0B 6B
 158+ 785C 4E 6C 62 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 7860 0B 6B
 159+ 7862 F1 70                        dw      SQUARED_OPEN            // [compile] [
 160+ 7864                                                              // begin
 161+ 7864              Quit_Begin:
 162+ 7864 E2 6C 00 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 7868 2F 69
 163+ 786A FC 65                        dw      CR                      //      cr
 164+ 786C 49 73                        dw      QUERY                   //      query
 165+ 786E              Next_Breakpoint_1:
 166+ 786E 86 77                        dw      INTERPRET               //      interpret
 167+ 7870 B5 6D 00 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 7874 79 69
 168+ 7876                                                              //      if
 169+ 7876 1C 64                        dw      ZBRANCH
 170+ 7878 07 00                        dw      Quit_Endif - $
 171+ 787A 1C 74                        dw          C_DOT_QUOTE
 172+ 787C 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 787F              Quit_Endif:                                     //      else
 174+ 787F                                                              // again
 175+ 787F 07 64                        dw      BRANCH
 176+ 7881 E3 FF                        dw      Quit_Begin - $
 177+ 7883 3C 69                        dw      EXIT                    // ;
 178+ 7885
 179+ 7885              //  ______________________________________________________________________
 180+ 7885              //
 181+ 7885              // abort        --
 182+ 7885                              Colon_Def ABORT, "ABORT", is_normal
 182+ 7885             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 7885             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 7885             >
 182+ 7885             >                // dummy db directives used to calculate length of namec
 182+ 7885 41 42 4F 52 >                db      "ABORT"
 182+ 7889 54          >
 182+ 788A             >len_NFA         defl    $ - temp_NFA
 182+ 788A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 7885             >
 182+ 7885 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 7886 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 788A 54          >
 182+ 788B             >                org     $-1                 // alter last byte of Name just above to set
 182+ 788A D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 788B             >
 182+ 788B 44 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 788D             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 788D CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 7890             >
 182+ 7890             >
 182+ 7890             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 7890             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 7890             >
 182+ 7890             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 7890 D9 6C 00 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 7894 19 69
 184+ 7896 59 71                        dw      DECIMAL                 // decimal
 185+ 7898 0D 78                        dw      FORTH                   // [compile] forth
 186+ 789A 26 78                        dw      DEFINITIONS             // definitions
 187+ 789C              Autoexec_Ptr:
 188+ 789C 94 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 789E 4B 78                        dw      QUIT                    // quit
 190+ 78A0 3C 69                        dw      EXIT                    // ;
 191+ 78A2
 192+ 78A2              //  ______________________________________________________________________
 193+ 78A2              //
 194+ 78A2              // warm         --
 195+ 78A2                              Colon_Def WARM, "WARM", is_normal
 195+ 78A2             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78A2             >
 195+ 78A2             >                // dummy db directives used to calculate length of namec
 195+ 78A2 57 41 52 4D >                db      "WARM"
 195+ 78A6             >len_NFA         defl    $ - temp_NFA
 195+ 78A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78A2             >
 195+ 78A2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78A3 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78A7             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78A6 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78A7             >
 195+ 78A7 85 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78A9             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78A9 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78AC             >
 195+ 78AC             >
 195+ 78AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78AC             >
 195+ 78AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78AC 39 7C                        dw      BLK_INIT                // blk-init
 197+ 78AE 42 84                        dw      SPLASH                  // splash
 198+ 78B0 A5 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78B4 46 6F
 199+ 78B6 8D 78                        dw      ABORT                   // abort
 200+ 78B8 3C 69                        dw      EXIT                    // exit
 201+ 78BA
 202+ 78BA              //  ______________________________________________________________________
 203+ 78BA              //
 204+ 78BA              // cold         --
 205+ 78BA                              Colon_Def COLD, "COLD", is_normal
 205+ 78BA             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78BA             >
 205+ 78BA             >                // dummy db directives used to calculate length of namec
 205+ 78BA 43 4F 4C 44 >                db      "COLD"
 205+ 78BE             >len_NFA         defl    $ - temp_NFA
 205+ 78BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78BA             >
 205+ 78BA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78BB 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78BF             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78BE C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78BF             >
 205+ 78BF A2 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78C1             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78C1 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78C4             >
 205+ 78C4             >
 205+ 78C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78C4             >
 205+ 78C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78C4 A5 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78C8 A5 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78CC 00 6B                        dw      FETCH                   // @
 209+ 78CE A5 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78D2 B7 69
 210+ 78D4 A5 63 14 00                  dw      LIT, 20                 // 20
 211+ 78D8 45 68                        dw      CMOVE
 212+ 78DA A5 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 78DE 00 6B                        dw      FETCH                   // @
 214+ 78E0 A5 63 14 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 78E4 0B 6B                        dw      STORE                   // !
 216+ 78E6 4E 6C 58 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 78EA 0B 6B
 217+ 78EC 36 6D 00 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 78F0 7F 6A
 218+ 78F2 FB 6D 0B 6B                  dw      USE, STORE              // use !
 219+ 78F6 06 6E 0B 6B                  dw      PREV, STORE             // prev !
 220+ 78FA A5 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 78FE 1B 6E 0B 6B
 221+ 7902              //              dw      LIT, 8
 222+ 7902              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 7902 60 6C 4D 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 7906 0B 6B
 224+ 7908 A9 78        Warm_Start:     dw      WARM
 225+ 790A C1 78        Cold_Start:     dw      COLD
 226+ 790C 3C 69                        dw      EXIT
 227+ 790E
 228+ 790E              //  ______________________________________________________________________
 229+ 790E              WarmRoutine:
 230+ 790E              ColdRoutine:
 231+ 790E DD 21 98 63                  ld      ix, Next_Ptr
 232+ 7912 D9                           exx
 233+ 7913 E5                           push    hl
 234+ 7914 D9                           exx
 235+ 7915
 236+ 7915 ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 7919 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 791D              //              nop
 239+ 791D 2A 7A 63                     ld      hl, (R0_origin)
 240+ 7920              //              nop
 241+ 7920                              ldrphl
 241+ 7920 22 96 63    >                ld      (RP_Pointer),hl
 242+ 7923 01 08 79                     ld      bc, Warm_Start
 243+ 7926 38 02                        jr      c, Warm_Skip
 244+ 7928 03                           inc     bc
 245+ 7929 03                           inc     bc
 246+ 792A              Warm_Skip:
 247+ 792A                              next
 247+ 792A DD E9       >                jp      (ix)
 248+ 792C
 249+ 792C              //  ______________________________________________________________________
 250+ 792C              //
 251+ 792C              // basic        --
 252+ 792C                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 792C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 792C             >
 252+ 792C             >                // dummy db directives used to calculate length of namec
 252+ 792C 42 41 53 49 >                db      "BASIC"
 252+ 7930 43          >
 252+ 7931             >len_NFA         defl    $ - temp_NFA
 252+ 7931             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 792C             >
 252+ 792C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 792D 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 7931 43          >
 252+ 7932             >                org     $-1                 // alter last byte of Name just above to set
 252+ 7931 C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 7932             >
 252+ 7932 BA 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 7934             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 7934 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 252+ 7934 ~           >
 252+ 7934 ~           >
 252+ 7934             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 7934             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 7934             >
 252+ 7934             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 7934 C1                           pop     bc
 254+ 7935 21 00 00                     ld      hl, 0
 255+ 7938 39                           add     hl, sp
 256+ 7939 ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 793D              //              nop
 258+ 793D 22 6E 63                     ld      (SP_Basic),hl
 259+ 7940 D9                           exx
 260+ 7941 E1                           pop     hl
 261+ 7942 D9                           exx
 262+ 7943 C9                           ret     // to Basic
 263+ 7944
 264+ 7944              //  ______________________________________________________________________
 265+ 7944              //
 266+ 7944              // +-           n1 n2 -- n3
 267+ 7944              // leaves n1 with the sign of n2 as n3.
 268+ 7944                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 7944             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 7944             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 7944             >
 268+ 7944             >                // dummy db directives used to calculate length of namec
 268+ 7944 2B 2D       >                db      "+-"
 268+ 7946             >len_NFA         defl    $ - temp_NFA
 268+ 7946             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 7944             >
 268+ 7944 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 7945 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 7947             >                org     $-1                 // alter last byte of Name just above to set
 268+ 7946 AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 7947             >
 268+ 7947 2C 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 7949             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 7949 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 794C             >
 268+ 794C             >
 268+ 794C             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 794C             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 794C             >
 268+ 794C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 794C 93 69                        dw      ZLESS                   // 0<
 270+ 794E                                                              // if
 271+ 794E 1C 64                        dw      ZBRANCH
 272+ 7950 04 00                        dw      Plus_Minus_Endif - $
 273+ 7952 18 6A                        dw          MINUS               //      minus
 274+ 7954              Plus_Minus_Endif:                               // endif
 275+ 7954 3C 69                        dw      EXIT                    // ;
 276+ 7956
 277+ 7956              //  ______________________________________________________________________
 278+ 7956              //
 279+ 7956              // d+-          d1 n -- d2
 280+ 7956              // leaves d1 with the sign of n as d2.
 281+ 7956                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 7956             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 7956             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 7956             >
 281+ 7956             >                // dummy db directives used to calculate length of namec
 281+ 7956 44 2B 2D    >                db      "D+-"
 281+ 7959             >len_NFA         defl    $ - temp_NFA
 281+ 7959             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 7956             >
 281+ 7956 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 7957 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 795A             >                org     $-1                 // alter last byte of Name just above to set
 281+ 7959 AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 795A             >
 281+ 795A 44 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 795C             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 795C CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 795F             >
 281+ 795F             >
 281+ 795F             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 795F             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 795F             >
 281+ 795F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 795F 93 69                        dw      ZLESS                   // 0<
 283+ 7961                                                              // if
 284+ 7961 1C 64                        dw      ZBRANCH
 285+ 7963 04 00                        dw      DPlus_Minus_Endif - $
 286+ 7965 2C 6A                        dw          DMINUS              //      dminus
 287+ 7967              DPlus_Minus_Endif:                              // endif
 288+ 7967 3C 69                        dw      EXIT                    // ;
 289+ 7969
 290+ 7969              //  ______________________________________________________________________
 291+ 7969              //
 292+ 7969              // abs          n1 -- n2
 293+ 7969                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 7969             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 7969             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 7969             >
 293+ 7969             >                // dummy db directives used to calculate length of namec
 293+ 7969 41 42 53    >                db      "ABS"
 293+ 796C             >len_NFA         defl    $ - temp_NFA
 293+ 796C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 7969             >
 293+ 7969 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 796A 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 796D             >                org     $-1                 // alter last byte of Name just above to set
 293+ 796C D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 796D             >
 293+ 796D 56 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 796F             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 796F CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 7972             >
 293+ 7972             >
 293+ 7972             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 7972             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 7972             >
 293+ 7972             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 7972 7F 6A                        dw      DUP                     // dup
 295+ 7974 49 79                        dw      PLUS_MINUS              // +-
 296+ 7976 3C 69                        dw      EXIT                    // ;
 297+ 7978
 298+ 7978              //  ______________________________________________________________________
 299+ 7978              //
 300+ 7978              // dabs         d1 -- d2
 301+ 7978                              Colon_Def DABS, "DABS", is_normal
 301+ 7978             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 7978             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 7978             >
 301+ 7978             >                // dummy db directives used to calculate length of namec
 301+ 7978 44 41 42 53 >                db      "DABS"
 301+ 797C             >len_NFA         defl    $ - temp_NFA
 301+ 797C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 7978             >
 301+ 7978 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 7979 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 797D             >                org     $-1                 // alter last byte of Name just above to set
 301+ 797C D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 797D             >
 301+ 797D 69 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 797F             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 797F CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 7982             >
 301+ 7982             >
 301+ 7982             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 7982             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 7982             >
 301+ 7982             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 7982 7F 6A                        dw      DUP                     // dup
 303+ 7984 5C 79                        dw      DPLUS_MINUS             // d+-
 304+ 7986 3C 69                        dw      EXIT                    // ;
 305+ 7988
 306+ 7988              //  ______________________________________________________________________
 307+ 7988              //
 308+ 7988              // m*           n1 n2 -- d
 309+ 7988              // multiply two integer giving a double
 310+ 7988                              Colon_Def MMUL, "M*", is_normal
 310+ 7988             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 7988             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 7988             >
 310+ 7988             >                // dummy db directives used to calculate length of namec
 310+ 7988 4D 2A       >                db      "M*"
 310+ 798A             >len_NFA         defl    $ - temp_NFA
 310+ 798A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 7988             >
 310+ 7988 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 7989 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 798B             >                org     $-1                 // alter last byte of Name just above to set
 310+ 798A AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 798B             >
 310+ 798B 78 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 798D             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 798D CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 7990             >
 310+ 7990             >
 310+ 7990             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 7990             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 7990             >
 310+ 7990             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 7990 D4 6A FB 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 7994 4D 69
 312+ 7996 6F 79 74 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 799A 6F 79 74 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 799E 5F 69 5C 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79A2 3C 69                        dw      EXIT                    // ;
 316+ 79A4
 317+ 79A4              //  ______________________________________________________________________
 318+ 79A4              //
 319+ 79A4              // sm/rem       d n -- q r
 320+ 79A4              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 79A4              // the remainder has the sign of d.
 322+ 79A4                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 79A4             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 79A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 79A4             >
 322+ 79A4             >                // dummy db directives used to calculate length of namec
 322+ 79A4 53 4D 2F 52 >                db      "SM/REM"
 322+ 79A8 45 4D       >
 322+ 79AA             >len_NFA         defl    $ - temp_NFA
 322+ 79AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 79A4             >
 322+ 79A4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 79A5 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 79A9 45 4D       >
 322+ 79AB             >                org     $-1                 // alter last byte of Name just above to set
 322+ 79AA CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 79AB             >
 322+ 79AB 88 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 79AD             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 79AD CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 79B0             >
 322+ 79B0             >
 322+ 79B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 79B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 79B0             >
 322+ 79B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 79B0 44 6A 4D 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 79B4 4D 69
 324+ 79B6 7F 79 71 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 79BA 6F 79
 325+ 79BC A3 68                        dw      UMDIVMOD                // um/mod
 326+ 79BE 5F 69                        dw      R_TO                    // r>
 327+ 79C0 71 69 FB 68                  dw      R_OP, XOR_OP            // r xor
 328+ 79C4 49 79 74 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 79C8 5F 69                        dw      R_TO                    // r>
 330+ 79CA 49 79 74 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 79CE 3C 69                        dw      EXIT                    // ;
 332+ 79D0
 333+ 79D0              //  ______________________________________________________________________
 334+ 79D0              //
 335+ 79D0              // fm/mod       d n -- q r
 336+ 79D0              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 79D0              // the remainder has the sign of d.
 338+ 79D0                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 79D0             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 79D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 79D0             >
 338+ 79D0             >                // dummy db directives used to calculate length of namec
 338+ 79D0 46 4D 2F 4D >                db      "FM/MOD"
 338+ 79D4 4F 44       >
 338+ 79D6             >len_NFA         defl    $ - temp_NFA
 338+ 79D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 79D0             >
 338+ 79D0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 79D1 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 79D5 4F 44       >
 338+ 79D7             >                org     $-1                 // alter last byte of Name just above to set
 338+ 79D6 C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 79D7             >
 338+ 79D7 A4 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 79D9             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 79D9 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 79DC             >
 338+ 79DC             >
 338+ 79DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 79DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 79DC             >
 338+ 79DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 79DC 7F 6A 4D 69                  dw      DUP, TO_R               // dup >r
 340+ 79E0 AD 79                        dw      SMDIVM
 341+ 79E2 44 6A 7F 6A                  dw      OVER, DUP
 342+ 79E6 79 69 79 69                  dw      ZEQUAL, ZEQUAL
 343+ 79EA 74 6A 93 69                  dw      SWAP, ZLESS
 344+ 79EE 71 69 93 69                  dw      R_OP, ZLESS
 345+ 79F2 FB 68 DA 68                  dw      XOR_OP, AND_OP
 346+ 79F6 1C 64                        dw      ZBRANCH
 347+ 79F8 10 00                        dw      Fm_Mod_Else - $
 348+ 79FA DE 69                        dw          ONE_SUBTRACT
 349+ 79FC 74 6A 5F 69                  dw          SWAP, R_TO
 350+ 7A00 B7 69 74 6A                  dw          PLUS, SWAP
 351+ 7A04 07 64                        dw      BRANCH
 352+ 7A06 06 00                        dw      Fm_Mod_Endif - $
 353+ 7A08              Fm_Mod_Else:
 354+ 7A08 5F 69 52 6A                  dw          R_TO, DROP
 355+ 7A0C              Fm_Mod_Endif:
 356+ 7A0C 3C 69                        dw      EXIT
 357+ 7A0E              //              dw      TWO_DUP                 // 2dup
 358+ 7A0E              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 7A0E              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 7A0E              //              dw      UMDIVMOD                // um/mod
 361+ 7A0E              //              dw      SWAP                    // swap
 362+ 7A0E              //              dw      II, ZLESS               // i'
 363+ 7A0E              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 7A0E              //              dw      R_TO                    // r>
 365+ 7A0E              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 7A0E              //              dw      R_OP                    // r@
 367+ 7A0E              //              dw      ZLESS                   // i'
 368+ 7A0E              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 7A0E              //              dw      R_TO                    // r>
 370+ 7A0E              //              dw      PLUS_MINUS              // +- swap
 371+ 7A0E              //              dw      EXIT                    // ;
 372+ 7A0E
 373+ 7A0E              //  ______________________________________________________________________
 374+ 7A0E              //
 375+ 7A0E              // m/mod        d n -- q r
 376+ 7A0E              // multiply two integer giving a double
 377+ 7A0E                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 7A0E             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 7A0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 7A0E             >
 377+ 7A0E             >                // dummy db directives used to calculate length of namec
 377+ 7A0E 4D 2F 4D 4F >                db      "M/MOD"
 377+ 7A12 44          >
 377+ 7A13             >len_NFA         defl    $ - temp_NFA
 377+ 7A13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 7A0E             >
 377+ 7A0E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 7A0F 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 7A13 44          >
 377+ 7A14             >                org     $-1                 // alter last byte of Name just above to set
 377+ 7A13 C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 7A14             >
 377+ 7A14 D0 79       >                dw      last_NFA            // Link to previous definition Name
 377+ 7A16             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 7A16 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A19             >
 377+ 7A19             >
 377+ 7A19             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A19             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A19             >
 377+ 7A19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A19 AD 79                        dw      SMDIVM
 379+ 7A1B 3C 69                        dw      EXIT                    // ;
 380+ 7A1D
 381+ 7A1D              //  ______________________________________________________________________
 382+ 7A1D              //
 383+ 7A1D              // m/           d n -- q
 384+ 7A1D              // multiply two integer giving a double
 385+ 7A1D                              Colon_Def MDIV, "M/", is_normal
 385+ 7A1D             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A1D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A1D             >
 385+ 7A1D             >                // dummy db directives used to calculate length of namec
 385+ 7A1D 4D 2F       >                db      "M/"
 385+ 7A1F             >len_NFA         defl    $ - temp_NFA
 385+ 7A1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A1D             >
 385+ 7A1D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A1E 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A20             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A1F AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A20             >
 385+ 7A20 0E 7A       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A22             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A22 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A25             >
 385+ 7A25             >
 385+ 7A25             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A25             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A25             >
 385+ 7A25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A25 16 7A 5B 6A                  dw      MDIVM, NIP
 387+ 7A29 3C 69                        dw      EXIT                    // ;
 388+ 7A2B
 389+ 7A2B              //  ______________________________________________________________________
 390+ 7A2B              //
 391+ 7A2B              // *            n1 n2 -- n3
 392+ 7A2B              // multiply two integer
 393+ 7A2B                              Colon_Def MUL, "*", is_normal
 393+ 7A2B             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A2B             >
 393+ 7A2B             >                // dummy db directives used to calculate length of namec
 393+ 7A2B 2A          >                db      "*"
 393+ 7A2C             >len_NFA         defl    $ - temp_NFA
 393+ 7A2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A2B             >
 393+ 7A2B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A2C 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A2D             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A2C AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A2D             >
 393+ 7A2D 1D 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A2F             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A2F CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A32             >
 393+ 7A32             >
 393+ 7A32             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A32             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A32             >
 393+ 7A32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A32 8D 79 52 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A36 3C 69                        dw      EXIT                    // ;
 396+ 7A38
 397+ 7A38              //  ______________________________________________________________________
 398+ 7A38              //
 399+ 7A38              // /mod         n1 n2 -- n3 n4
 400+ 7A38              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A38              // The remainder has the sign of n1
 402+ 7A38                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A38             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A38             >
 402+ 7A38             >                // dummy db directives used to calculate length of namec
 402+ 7A38 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A3C             >len_NFA         defl    $ - temp_NFA
 402+ 7A3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A38             >
 402+ 7A38 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A39 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A3D             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A3C C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A3D             >
 402+ 7A3D 2B 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A3F             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A3F CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A42             >
 402+ 7A42             >
 402+ 7A42             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A42             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A42             >
 402+ 7A42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A42 4D 69 9B 6E                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A46 5F 69
 404+ 7A48 16 7A                        dw      MDIVM                   // m/mod
 405+ 7A4A 3C 69                        dw      EXIT                    // ;
 406+ 7A4C
 407+ 7A4C              //  ______________________________________________________________________
 408+ 7A4C              //
 409+ 7A4C              // /            n1 n2 -- n3
 410+ 7A4C              // division
 411+ 7A4C                              Colon_Def DIV, "/", is_normal
 411+ 7A4C             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A4C             >
 411+ 7A4C             >                // dummy db directives used to calculate length of namec
 411+ 7A4C 2F          >                db      "/"
 411+ 7A4D             >len_NFA         defl    $ - temp_NFA
 411+ 7A4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A4C             >
 411+ 7A4C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A4D 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A4E             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A4D AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A4E             >
 411+ 7A4E 38 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A50             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A50 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A53             >
 411+ 7A53             >
 411+ 7A53             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A53             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A53             >
 411+ 7A53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A53 3F 7A 5B 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A57 3C 69                        dw      EXIT                    // ;
 414+ 7A59
 415+ 7A59              //  ______________________________________________________________________
 416+ 7A59              //
 417+ 7A59              // mod          n1 n2 -- n3
 418+ 7A59                              Colon_Def MOD, "MOD", is_normal
 418+ 7A59             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A59             >
 418+ 7A59             >                // dummy db directives used to calculate length of namec
 418+ 7A59 4D 4F 44    >                db      "MOD"
 418+ 7A5C             >len_NFA         defl    $ - temp_NFA
 418+ 7A5C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A59             >
 418+ 7A59 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A5A 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A5D             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A5C C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A5D             >
 418+ 7A5D 4C 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A5F             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A5F CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A62             >
 418+ 7A62             >
 418+ 7A62             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A62             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A62             >
 418+ 7A62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A62 3F 7A 52 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7A66 3C 69                        dw      EXIT                    // ;
 421+ 7A68
 422+ 7A68              //  ______________________________________________________________________
 423+ 7A68              //
 424+ 7A68              // */mod        n1 n2 n3 -- n4 n5
 425+ 7A68              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7A68              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7A68              // avoids loss of precision
 428+ 7A68                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7A68             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7A68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7A68             >
 428+ 7A68             >                // dummy db directives used to calculate length of namec
 428+ 7A68 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7A6C 44          >
 428+ 7A6D             >len_NFA         defl    $ - temp_NFA
 428+ 7A6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7A68             >
 428+ 7A68 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7A69 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7A6D 44          >
 428+ 7A6E             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7A6D C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7A6E             >
 428+ 7A6E 59 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7A70             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7A70 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7A73             >
 428+ 7A73             >
 428+ 7A73             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7A73             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7A73             >
 428+ 7A73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7A73 4D 69 8D 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7A77 5F 69 16 7A                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7A7B 3C 69                        dw      EXIT                    // ;
 432+ 7A7D
 433+ 7A7D              //  ______________________________________________________________________
 434+ 7A7D              //
 435+ 7A7D              // */          n1 n2 n3 -- n4
 436+ 7A7D              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7A7D                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7A7D             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7A7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7A7D             >
 437+ 7A7D             >                // dummy db directives used to calculate length of namec
 437+ 7A7D 2A 2F       >                db      "*/"
 437+ 7A7F             >len_NFA         defl    $ - temp_NFA
 437+ 7A7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7A7D             >
 437+ 7A7D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7A7E 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7A80             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7A7F AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7A80             >
 437+ 7A80 68 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7A82             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7A82 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7A85             >
 437+ 7A85             >
 437+ 7A85             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7A85             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7A85             >
 437+ 7A85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7A85 70 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7A87 5B 6A                        dw     NIP                      // nip
 440+ 7A89 3C 69                        dw     EXIT                     // ;
 441+ 7A8B
 442+ 7A8B
 443+ 7A8B              //  ______________________________________________________________________
 444+ 7A8B              //
 445+ 7A8B              // m/mod        ud1 u2 -- u3 ud4
 446+ 7A8B              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7A8B              // All terms are unsigned.
 448+ 7A8B              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7A8B              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7A8B              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7A8B              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7A8B              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7A8B              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7A8B              //              dw      EXIT                    // ;
 455+ 7A8B
 456+ 7A8B              //  ______________________________________________________________________
 457+ 7A8B              //
 458+ 7A8B              // (line)       n1 n2 -- a b
 459+ 7A8B              // sends the line n1 of block n2 to the disk buffer.
 460+ 7A8B              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7A8B                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7A8B             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7A8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7A8B             >
 461+ 7A8B             >                // dummy db directives used to calculate length of namec
 461+ 7A8B 28 4C 49 4E >                db      "(LINE)"
 461+ 7A8F 45 29       >
 461+ 7A91             >len_NFA         defl    $ - temp_NFA
 461+ 7A91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7A8B             >
 461+ 7A8B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7A8C 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7A90 45 29       >
 461+ 7A92             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7A91 A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7A92             >
 461+ 7A92 7D 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7A94             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7A94 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7A97             >
 461+ 7A97             >
 461+ 7A97             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7A97             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7A97             >
 461+ 7A97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7A97 4D 69                        dw      TO_R                    // >r
 463+ 7A99 FC 6B                        dw      NOOP                    // noop
 464+ 7A9B 88 6C                        dw      CL                      // c/l
 465+ 7A9D 95 6C 70 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7AA1 5F 69                        dw      R_TO                    // r>
 467+ 7AA3 A2 6C 2F 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7AA7 B7 69
 468+ 7AA9 58 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7AAB B7 69                        dw      PLUS                    // +
 470+ 7AAD FC 6B                        dw      NOOP                    // noop
 471+ 7AAF 88 6C                        dw      CL                      // c/l
 472+ 7AB1 3C 69                        dw      EXIT                    // ;
 473+ 7AB3
 474+ 7AB3              //  ______________________________________________________________________
 475+ 7AB3              //
 476+ 7AB3              // .line        n1 n2 --
 477+ 7AB3              // Sends to output line  n1  of screen n2.
 478+ 7AB3                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7AB3             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7AB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7AB3             >
 478+ 7AB3             >                // dummy db directives used to calculate length of namec
 478+ 7AB3 2E 4C 49 4E >                db      ".LINE"
 478+ 7AB7 45          >
 478+ 7AB8             >len_NFA         defl    $ - temp_NFA
 478+ 7AB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7AB3             >
 478+ 7AB3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7AB4 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7AB8 45          >
 478+ 7AB9             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7AB8 C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7AB9             >
 478+ 7AB9 8B 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7ABB             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7ABB CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7ABE             >
 478+ 7ABE             >
 478+ 7ABE             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7ABE             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7ABE             >
 478+ 7ABE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7ABE 94 7A 66 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7AC2 00 72
 480+ 7AC4 3C 69                        dw      EXIT                    // ;
 481+ 7AC6
 482+ 7AC6              //  ______________________________________________________________________
 483+ 7AC6              //
 484+ 7AC6              // message       n1 n2 --
 485+ 7AC6              // prints error message to current channel.
 486+ 7AC6              // if WARNING is 0, prints "MSG#n".
 487+ 7AC6              // if WARNING is 1, prints line n of screen 4.
 488+ 7AC6              // if WARNING is -1, see ERROR
 489+ 7AC6              // value can be negative or beyond block 4.
 490+ 7AC6                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7AC6             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7AC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7AC6             >
 490+ 7AC6             >                // dummy db directives used to calculate length of namec
 490+ 7AC6 4D 45 53 53 >                db      "MESSAGE"
 490+ 7ACA 41 47 45    >
 490+ 7ACD             >len_NFA         defl    $ - temp_NFA
 490+ 7ACD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7AC6             >
 490+ 7AC6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7AC7 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7ACB 41 47 45    >
 490+ 7ACE             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7ACD C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7ACE             >
 490+ 7ACE B3 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7AD0             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7AD0 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7AD3             >
 490+ 7AD3             >
 490+ 7AD3             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7AD3             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7AD3             >
 490+ 7AD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7AD3 06 6D 00 6B                  dw      WARNING, FETCH          // warning @
 492+ 7AD7                                                              // if
 493+ 7AD7 1C 64                        dw      ZBRANCH
 494+ 7AD9 18 00                        dw      Message_Else - $
 495+ 7ADB A5 63 04 00                  dw          LIT, 4              //      4
 496+ 7ADF 8D 6D 00 6B                  dw          OFFSET, FETCH       //      offset @
 497+ 7AE3 A2 6C 50 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7AE7 AD 6E
 498+ 7AE9 BB 7A                        dw          DOT_LINE            //      .line
 499+ 7AEB 63 6F                        dw          SPACE               //      space
 500+ 7AED                                                              // else
 501+ 7AED
 502+ 7AED 07 64                        dw      BRANCH
 503+ 7AEF 0B 00                        dw      Message_ENdif - $
 504+ 7AF1              Message_Else:
 505+ 7AF1 1C 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7AF3 04 6D 73 67                  db          4, "msg#"
 506+ 7AF7 23
 507+ 7AF8 34 83                        dw          DOT                 //      .  ( forward )
 508+ 7AFA              Message_ENdif:                                  // endif
 509+ 7AFA 3C 69                        dw      EXIT                    // ;
 510+ 7AFC
 511+ 7AFC
 512+ 7AFC              //  ______________________________________________________________________
 513+ 7AFC              //
 514+ 7AFC              // device
 515+ 7AFC                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7AFC             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7AFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7AFC             >
 515+ 7AFC             >                // dummy db directives used to calculate length of namec
 515+ 7AFC 44 45 56 49 >                db      "DEVICE"
 515+ 7B00 43 45       >
 515+ 7B02             >len_NFA         defl    $ - temp_NFA
 515+ 7B02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7AFC             >
 515+ 7AFC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7AFD 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7B01 43 45       >
 515+ 7B03             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7B02 C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7B03             >
 515+ 7B03 C6 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7B05             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7B05 CD 2D 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7B08             >
 515+ 7B08             >
 515+ 7B08             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7B08             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7B08             >
 515+ 7B08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7B08 02 00       >                dw      2
 516+ 7B0A
 517+ 7B0A              //  ______________________________________________________________________
 518+ 7B0A
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
 113  7B0A                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
   1+ 7B0A              //  ______________________________________________________________________
   2+ 7B0A              //
   3+ 7B0A              //  next-opt.asm
   4+ 7B0A              //
   5+ 7B0A              //  ZX Spectrum Next - peculiar definitions
   6+ 7B0A              //  ______________________________________________________________________
   7+ 7B0A
   8+ 7B0A              //  ______________________________________________________________________
   9+ 7B0A              //
  10+ 7B0A              // reg@         n -- b
  11+ 7B0A              // read Next REGister n giving byte b
  12+ 7B0A              //
  13+ 7B0A              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 7B0A              //              dw      LIT, $243B
  15+ 7B0A              //              dw      PSTORE
  16+ 7B0A              //              dw      LIT, $253B
  17+ 7B0A              //              dw      PFETCH
  18+ 7B0A              //              dw      EXIT
  19+ 7B0A                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 7B0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ 7B0A             >
  19+ 7B0A             >                // dummy db directives used to calculate length of namec
  19+ 7B0A 52 45 47 40 >                db      "REG@"
  19+ 7B0E             >len_NFA         defl    $ - temp_NFA
  19+ 7B0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ 7B0A             >
  19+ 7B0A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ 7B0B 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ 7B0F             >                org     $-1                 // alter last byte of Name just above to set
  19+ 7B0E C0          >                db      {b $} | END_BIT     // msb as name end
  19+ 7B0F             >
  19+ 7B0F FC 7A       >                dw      last_NFA            // Link to previous definition Name
  19+ 7B11             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 7B11 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 7B11 ~           >
  19+ 7B11 ~           >
  19+ 7B11             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 7B11             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 7B11             >
  19+ 7B11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 7B11 D9                           exx
  21+ 7B12 01 3B 24                     ld      bc, $243B
  22+ 7B15 E1                           pop     hl
  23+ 7B16 ED 69                        out     (c), l
  24+ 7B18 04                           inc     b
  25+ 7B19 ED 68                        in      l, (c)
  26+ 7B1B E5                           push    hl
  27+ 7B1C D9                           exx
  28+ 7B1D                              next
  28+ 7B1D DD E9       >                jp      (ix)
  29+ 7B1F
  30+ 7B1F
  31+ 7B1F              //  ______________________________________________________________________
  32+ 7B1F              //
  33+ 7B1F              // reg!         b n --
  34+ 7B1F              // write value b to Next REGister n
  35+ 7B1F              //
  36+ 7B1F              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 7B1F              //              dw      LIT, $243B
  38+ 7B1F              //              dw      PSTORE
  39+ 7B1F              //              dw      LIT, $253B
  40+ 7B1F              //              dw      PSTORE
  41+ 7B1F              //              dw      EXIT
  42+ 7B1F                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 7B1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ 7B1F             >
  42+ 7B1F             >                // dummy db directives used to calculate length of namec
  42+ 7B1F 52 45 47 21 >                db      "REG!"
  42+ 7B23             >len_NFA         defl    $ - temp_NFA
  42+ 7B23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ 7B1F             >
  42+ 7B1F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ 7B20 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ 7B24             >                org     $-1                 // alter last byte of Name just above to set
  42+ 7B23 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ 7B24             >
  42+ 7B24 0A 7B       >                dw      last_NFA            // Link to previous definition Name
  42+ 7B26             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 7B26 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 7B26 ~           >
  42+ 7B26 ~           >
  42+ 7B26             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 7B26             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 7B26             >
  42+ 7B26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 7B26 D9                           exx
  44+ 7B27 01 3B 24                     ld      bc, $243B
  45+ 7B2A E1                           pop     hl
  46+ 7B2B ED 69                        out     (c), l
  47+ 7B2D 04                           inc     b
  48+ 7B2E E1                           pop     hl
  49+ 7B2F ED 69                        out     (c), l
  50+ 7B31 D9                           exx
  51+ 7B32                              next
  51+ 7B32 DD E9       >                jp      (ix)
  52+ 7B34
  53+ 7B34
  54+ 7B34              //  ______________________________________________________________________
  55+ 7B34              //
  56+ 7B34              // mmu7@        -- n
  57+ 7B34              // query current page in MMU7 8K-RAM : 0 and 223
  58+ 7B34
  59+ 7B34                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  59+ 7B34             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  59+ 7B34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59+ 7B34             >
  59+ 7B34             >                // dummy db directives used to calculate length of namec
  59+ 7B34 4D 4D 55 37 >                db      "MMU7@"
  59+ 7B38 40          >
  59+ 7B39             >len_NFA         defl    $ - temp_NFA
  59+ 7B39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59+ 7B34             >
  59+ 7B34 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59+ 7B35 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  59+ 7B39 40          >
  59+ 7B3A             >                org     $-1                 // alter last byte of Name just above to set
  59+ 7B39 C0          >                db      {b $} | END_BIT     // msb as name end
  59+ 7B3A             >
  59+ 7B3A 1F 7B       >                dw      last_NFA            // Link to previous definition Name
  59+ 7B3C             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  59+ 7B3C CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  59+ 7B3F             >
  59+ 7B3F             >
  59+ 7B3F             >                endif           ; ok        // for other definitions it "points" the correct handler
  59+ 7B3F             >                // Use of "; ok" to suppress "warning[fwdref]"
  59+ 7B3F             >
  59+ 7B3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60+ 7B3F A5 63 57 00                  dw      LIT, 87, REG_FETCH
  60+ 7B43 11 7B
  61+ 7B45 3C 69                        dw      EXIT
  62+ 7B47
  63+ 7B47              //  ______________________________________________________________________
  64+ 7B47              //
  65+ 7B47              // mmu7!        n --
  66+ 7B47              // set MMU7 8K-RAM page to n given between 0 and 223
  67+ 7B47              // optimized version that uses NEXTREG n,A Z80n op-code.
  68+ 7B47
  69+ 7B47                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  69+ 7B47             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ 7B47             >
  69+ 7B47             >                // dummy db directives used to calculate length of namec
  69+ 7B47 4D 4D 55 37 >                db      "MMU7!"
  69+ 7B4B 21          >
  69+ 7B4C             >len_NFA         defl    $ - temp_NFA
  69+ 7B4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ 7B47             >
  69+ 7B47 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ 7B48 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  69+ 7B4C 21          >
  69+ 7B4D             >                org     $-1                 // alter last byte of Name just above to set
  69+ 7B4C A1          >                db      {b $} | END_BIT     // msb as name end
  69+ 7B4D             >
  69+ 7B4D 34 7B       >                dw      last_NFA            // Link to previous definition Name
  69+ 7B4F             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 7B4F ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 7B4F ~           >
  69+ 7B4F ~           >
  69+ 7B4F             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 7B4F             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 7B4F             >
  69+ 7B4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 7B4F E1                           pop     hl
  71+ 7B50 7D                           ld      a, l
  72+ 7B51 ED 92 57                     nextreg 87, a
  73+ 7B54
  74+ 7B54                              next
  74+ 7B54 DD E9       >                jp      (ix)
  75+ 7B56
  76+ 7B56              //  ______________________________________________________________________
  77+ 7B56              //
  78+ 7B56              // >far         ha -- a n
  79+ 7B56              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  80+ 7B56              // take lower bits of H and L as an offset from E000h
  81+ 7B56              // then return address  a  between E000h-FFFFh
  82+ 7B56              // and page number n  between 64-71 (40h-47h)
  83+ 7B56              // For example, in hex:
  84+ 7B56              //   0000 >FAR  gives  40.E000
  85+ 7B56              //   1FFF >FAR  gives  40.FFFF
  86+ 7B56              //   2000 >FAR  gives  41.E000
  87+ 7B56              //   3FFF >FAR  gives  41.FFFF
  88+ 7B56              //   EFFF >FAR  gives  47.EFFF
  89+ 7B56              //   FFFF >FAR  gives  47.FFFF
  90+ 7B56              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  91+ 7B56              //                pop     de
  92+ 7B56              //                ld      a, d
  93+ 7B56              //                and     $E0
  94+ 7B56              //                rlca
  95+ 7B56              //                rlca
  96+ 7B56              //                rlca
  97+ 7B56              //                add     $40
  98+ 7B56              //                ld      l, a
  99+ 7B56              //                ld      h, 0
 100+ 7B56              //                ld      a, d
 101+ 7B56              //                or      $E0
 102+ 7B56              //                ld      d, a
 103+ 7B56              //                push    hl
 104+ 7B56              //                push    de
 105+ 7B56              //                next
 106+ 7B56
 107+ 7B56              //  ______________________________________________________________________
 108+ 7B56              //
 109+ 7B56              // <far         a n  -- ha
 110+ 7B56              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 111+ 7B56              // reverse of >FAR: encodes a FAR address compressing
 112+ 7B56              // to bits 765 of H, lower bits of HL address offset from E000h
 113+ 7B56              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 114+ 7B56              //                pop     de                  // page number in e
 115+ 7B56              //                pop     hl                  // address in hl
 116+ 7B56              //                ld      a, e
 117+ 7B56              //                sub     $40                 // reduced to 0-7
 118+ 7B56              //                rrca
 119+ 7B56              //                rrca
 120+ 7B56              //                rrca
 121+ 7B56              //                ld      d, a                // save to d bits 765
 122+ 7B56              //                ld      a, h                // drops
 123+ 7B56              //                and     $1F
 124+ 7B56              //                or      d
 125+ 7B56              //                ld      h, a
 126+ 7B56              //
 127+ 7B56              //                psh1
 128+ 7B56
 129+ 7B56              //  ______________________________________________________________________
 130+ 7B56              //
 131+ 7B56              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 132+ 7B56              // NextZXOS call wrapper.
 133+ 7B56              //  n1 = hl register parameter value
 134+ 7B56              //  n2 = de register parameter value
 135+ 7B56              //  n3 = bc register parameter value
 136+ 7B56              //  n4 =  a register parameter value
 137+ 7B56              //   a = routine address in ROM 3
 138+ 7B56              // ----
 139+ 7B56              //  n5 = hl returned value
 140+ 7B56              //  n6 = de returned value
 141+ 7B56              //  n7 = bc returned value
 142+ 7B56              //  n8 =  a returned value
 143+ 7B56              //   f
 144+ 7B56                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 144+ 7B56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7B56             >
 144+ 7B56             >                // dummy db directives used to calculate length of namec
 144+ 7B56 4D 5F 50 33 >                db      "M_P3DOS"
 144+ 7B5A 44 4F 53    >
 144+ 7B5D             >len_NFA         defl    $ - temp_NFA
 144+ 7B5D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7B56             >
 144+ 7B56 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7B57 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 144+ 7B5B 44 4F 53    >
 144+ 7B5E             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7B5D D3          >                db      {b $} | END_BIT     // msb as name end
 144+ 7B5E             >
 144+ 7B5E 47 7B       >                dw      last_NFA            // Link to previous definition Name
 144+ 7B60             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7B60 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 144+ 7B60 ~           >
 144+ 7B60 ~           >
 144+ 7B60             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7B60             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7B60             >
 144+ 7B60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7B60 D1                           pop     de                  // dos call entry address in de
 146+ 7B61 E1                           pop     hl                  // a register
 147+ 7B62 7D                           ld      a, l
 148+ 7B63 D9                           exx
 149+ 7B64 C1                           pop     bc
 150+ 7B65 D1                           pop     de
 151+ 7B66 E1                           pop     hl
 152+ 7B67 D9                           exx
 153+ 7B68
 154+ 7B68 C5                           push    bc
 155+ 7B69 DD E5                        push    ix
 156+ 7B6B
 157+ 7B6B              //              ld      (SP_Saved), sp
 158+ 7B6B              //              ld      sp, Cold_origin - 5
 159+ 7B6B 0E 07                        ld      c, 7                // use 7 RAM Bank
 160+ 7B6D
 161+ 7B6D CF                           rst     08
 162+ 7B6E 94                           db      $94
 163+ 7B6F
 164+ 7B6F              //              ld      sp, (SP_Saved)
 165+ 7B6F              //              push    ix
 166+ 7B6F              //              pop     hl
 167+ 7B6F              //              ld      (IX_Echo), hl
 168+ 7B6F DD 22 90 63                  ld      (IX_Echo), ix
 169+ 7B73              //              nop
 170+ 7B73 DD E1                        pop     ix
 171+ 7B75 E3                           ex      (sp), hl            // hl argument and retrieve bc
 172+ 7B76 D5                           push    de
 173+ 7B77 C5                           push    bc
 174+ 7B78 4D                           ld      c, l
 175+ 7B79 44                           ld      b, h
 176+ 7B7A
 177+ 7B7A 26 00                        ld      h, 0
 178+ 7B7C 6F                           ld      l, a
 179+ 7B7D E5                           push    hl
 180+ 7B7E ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 181+ 7B80 23                           inc     hl                  //  0 for OK ; 1 for ko
 182+ 7B81
 183+ 7B81                              psh1
 183+ 7B81 E5          >                push    hl
 183+ 7B82 DD E9       >                jp      (ix)
 184+ 7B84
 185+ 7B84              //  ______________________________________________________________________
 186+ 7B84              //
 187+ 7B84              // blk-fh
 188+ 7B84                              Variable_Def BLK_FH,   "BLK-FH",   1
 188+ 7B84             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 188+ 7B84             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 7B84             >
 188+ 7B84             >                // dummy db directives used to calculate length of namec
 188+ 7B84 42 4C 4B 2D >                db      "BLK-FH"
 188+ 7B88 46 48       >
 188+ 7B8A             >len_NFA         defl    $ - temp_NFA
 188+ 7B8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 7B84             >
 188+ 7B84 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 7B85 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 188+ 7B89 46 48       >
 188+ 7B8B             >                org     $-1                 // alter last byte of Name just above to set
 188+ 7B8A C8          >                db      {b $} | END_BIT     // msb as name end
 188+ 7B8B             >
 188+ 7B8B 56 7B       >                dw      last_NFA            // Link to previous definition Name
 188+ 7B8D             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 7B8D CD 2D 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 188+ 7B90             >
 188+ 7B90             >
 188+ 7B90             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 7B90             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 7B90             >
 188+ 7B90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 7B90 01 00       >                dw      1
 189+ 7B92
 190+ 7B92                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 190+ 7B92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 7B92             >
 190+ 7B92             >                // dummy db directives used to calculate length of namec
 190+ 7B92 42 4C 4B 2D >                db      "BLK-FNAME"
 190+ 7B96 46 4E 41 4D >
 190+ 7B9A 45          >
 190+ 7B9B             >len_NFA         defl    $ - temp_NFA
 190+ 7B9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 7B92             >
 190+ 7B92 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 7B93 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 190+ 7B97 46 4E 41 4D >
 190+ 7B9B 45          >
 190+ 7B9C             >                org     $-1                 // alter last byte of Name just above to set
 190+ 7B9B C5          >                db      {b $} | END_BIT     // msb as name end
 190+ 7B9C             >
 190+ 7B9C 84 7B       >                dw      last_NFA            // Link to previous definition Name
 190+ 7B9E             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 7B9E CD 95 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 190+ 7BA1             >
 190+ 7BA1             >
 190+ 7BA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 7BA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 7BA1             >
 190+ 7BA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 7BA1 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 191+ 7BA5 6F 63 6B 73
 191+ 7BA9 2D 36 34 2E
 191+ 7BAD 62 69 6E 00
 192+ 7BB1 00 00 00...                  ds      24
 193+ 7BC9
 194+ 7BC9              //  ______________________________________________________________________
 195+ 7BC9              //
 196+ 7BC9              // blk-seek     n --
 197+ 7BC9              // seek block n  within blocks!.bin  file
 198+ 7BC9                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 198+ 7BC9             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 198+ 7BC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 7BC9             >
 198+ 7BC9             >                // dummy db directives used to calculate length of namec
 198+ 7BC9 42 4C 4B 2D >                db      "BLK-SEEK"
 198+ 7BCD 53 45 45 4B >
 198+ 7BD1             >len_NFA         defl    $ - temp_NFA
 198+ 7BD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 7BC9             >
 198+ 7BC9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 7BCA 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 198+ 7BCE 53 45 45 4B >
 198+ 7BD2             >                org     $-1                 // alter last byte of Name just above to set
 198+ 7BD1 CB          >                db      {b $} | END_BIT     // msb as name end
 198+ 7BD2             >
 198+ 7BD2 92 7B       >                dw      last_NFA            // Link to previous definition Name
 198+ 7BD4             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 7BD4 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 198+ 7BD7             >
 198+ 7BD7             >
 198+ 7BD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 7BD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 7BD7             >
 198+ 7BD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 7BD7 95 6C 8D 79                  dw  BBUF, MMUL
 200+ 7BDB 8D 7B 00 6B                  dw  BLK_FH, FETCH
 201+ 7BDF 69 67                        dw  F_SEEK
 202+ 7BE1 A5 63 2D 00                  dw  LIT, $2D, QERROR
 202+ 7BE5 2D 70
 203+ 7BE7 3C 69                        dw  EXIT
 204+ 7BE9
 205+ 7BE9              //  ______________________________________________________________________
 206+ 7BE9              //
 207+ 7BE9              // blk-read     n --
 208+ 7BE9              // seek block n  within blocks!.bin  file
 209+ 7BE9                              Colon_Def BLK_READ, "BLK-READ", is_normal
 209+ 7BE9             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 209+ 7BE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 209+ 7BE9             >
 209+ 7BE9             >                // dummy db directives used to calculate length of namec
 209+ 7BE9 42 4C 4B 2D >                db      "BLK-READ"
 209+ 7BED 52 45 41 44 >
 209+ 7BF1             >len_NFA         defl    $ - temp_NFA
 209+ 7BF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 209+ 7BE9             >
 209+ 7BE9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 209+ 7BEA 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 209+ 7BEE 52 45 41 44 >
 209+ 7BF2             >                org     $-1                 // alter last byte of Name just above to set
 209+ 7BF1 C4          >                db      {b $} | END_BIT     // msb as name end
 209+ 7BF2             >
 209+ 7BF2 C9 7B       >                dw      last_NFA            // Link to previous definition Name
 209+ 7BF4             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 209+ 7BF4 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 209+ 7BF7             >
 209+ 7BF7             >
 209+ 7BF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 209+ 7BF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 209+ 7BF7             >
 209+ 7BF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 210+ 7BF7 D4 7B                        dw  BLK_SEEK
 211+ 7BF9 95 6C                        dw  BBUF
 212+ 7BFB 8D 7B 00 6B                  dw  BLK_FH, FETCH
 213+ 7BFF CD 67                        dw  F_READ
 214+ 7C01 A5 63 2E 00                  dw  LIT, $2E, QERROR
 214+ 7C05 2D 70
 215+ 7C07 52 6A                        dw  DROP
 216+ 7C09 3C 69                        dw  EXIT
 217+ 7C0B
 218+ 7C0B              //  ______________________________________________________________________
 219+ 7C0B              //
 220+ 7C0B              // blk-write     n --
 221+ 7C0B              // seek block n  within blocks!.bin  file
 222+ 7C0B                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 222+ 7C0B             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 222+ 7C0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 7C0B             >
 222+ 7C0B             >                // dummy db directives used to calculate length of namec
 222+ 7C0B 42 4C 4B 2D >                db      "BLK-WRITE"
 222+ 7C0F 57 52 49 54 >
 222+ 7C13 45          >
 222+ 7C14             >len_NFA         defl    $ - temp_NFA
 222+ 7C14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 7C0B             >
 222+ 7C0B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 7C0C 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 222+ 7C10 57 52 49 54 >
 222+ 7C14 45          >
 222+ 7C15             >                org     $-1                 // alter last byte of Name just above to set
 222+ 7C14 C5          >                db      {b $} | END_BIT     // msb as name end
 222+ 7C15             >
 222+ 7C15 E9 7B       >                dw      last_NFA            // Link to previous definition Name
 222+ 7C17             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 7C17 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 7C1A             >
 222+ 7C1A             >
 222+ 7C1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 7C1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 7C1A             >
 222+ 7C1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 7C1A D4 7B                        dw  BLK_SEEK
 224+ 7C1C 95 6C                        dw  BBUF
 225+ 7C1E 8D 7B 00 6B                  dw  BLK_FH, FETCH
 226+ 7C22 EA 67                        dw  F_WRITE
 227+ 7C24 A5 63 2F 00                  dw  LIT, $2F, QERROR
 227+ 7C28 2D 70
 228+ 7C2A 52 6A                        dw  DROP
 229+ 7C2C 3C 69                        dw  EXIT
 230+ 7C2E
 231+ 7C2E              //  ______________________________________________________________________
 232+ 7C2E              //
 233+ 7C2E              // blk-init     n --
 234+ 7C2E              // seek block n  within blocks!.bin  file
 235+ 7C2E                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 235+ 7C2E             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 235+ 7C2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 235+ 7C2E             >
 235+ 7C2E             >                // dummy db directives used to calculate length of namec
 235+ 7C2E 42 4C 4B 2D >                db      "BLK-INIT"
 235+ 7C32 49 4E 49 54 >
 235+ 7C36             >len_NFA         defl    $ - temp_NFA
 235+ 7C36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 235+ 7C2E             >
 235+ 7C2E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 235+ 7C2F 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 235+ 7C33 49 4E 49 54 >
 235+ 7C37             >                org     $-1                 // alter last byte of Name just above to set
 235+ 7C36 D4          >                db      {b $} | END_BIT     // msb as name end
 235+ 7C37             >
 235+ 7C37 0B 7C       >                dw      last_NFA            // Link to previous definition Name
 235+ 7C39             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 235+ 7C39 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 235+ 7C3C             >
 235+ 7C3C             >
 235+ 7C3C             >                endif           ; ok        // for other definitions it "points" the correct handler
 235+ 7C3C             >                // Use of "; ok" to suppress "warning[fwdref]"
 235+ 7C3C             >
 235+ 7C3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 7C3C 8D 7B 00 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 236+ 7C40 8A 67 52 6A
 237+ 7C44 9E 7B D4 69                  dw  BLK_FNAME, ONE_PLUS
 238+ 7C48 58 6E 69 6C                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 238+ 7C4C FF 67
 239+ 7C4E A5 63 2C 00                  dw  LIT, $2C, QERROR
 239+ 7C52 2D 70
 240+ 7C54 8D 7B 0B 6B                  dw  BLK_FH, STORE
 241+ 7C58 3C 69                        dw  EXIT
 242+ 7C5A
 243+ 7C5A              //  ______________________________________________________________________
 244+ 7C5A              //
 245+ 7C5A              // #sec
 246+ 7C5A              // number of 512-Byte "sectors" available on thie sysstem.
 247+ 7C5A              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 248+ 7C5A
 249+ 7C5A                              Constant_Def NSEC , "#SEC", 32767
 249+ 7C5A             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 249+ 7C5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 7C5A             >
 249+ 7C5A             >                // dummy db directives used to calculate length of namec
 249+ 7C5A 23 53 45 43 >                db      "#SEC"
 249+ 7C5E             >len_NFA         defl    $ - temp_NFA
 249+ 7C5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 7C5A             >
 249+ 7C5A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 7C5B 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 249+ 7C5F             >                org     $-1                 // alter last byte of Name just above to set
 249+ 7C5E C3          >                db      {b $} | END_BIT     // msb as name end
 249+ 7C5F             >
 249+ 7C5F 2E 7C       >                dw      last_NFA            // Link to previous definition Name
 249+ 7C61             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 7C61 CD 12 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 249+ 7C64             >
 249+ 7C64             >
 249+ 7C64             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 7C64             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 7C64             >
 249+ 7C64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 7C64 FF 7F       >                dw      32767
 250+ 7C66
 251+ 7C66              //  ______________________________________________________________________
 252+ 7C66
 253+ 7C66
 254+ 7C66
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
 114  7C66                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
   1+ 7C66              //  ______________________________________________________________________
   2+ 7C66              //
   3+ 7C66              //  L3.asm
   4+ 7C66              //
   5+ 7C66              //  Continuation of L2.asm
   6+ 7C66              //  I/O Block definitions
   7+ 7C66              //  ______________________________________________________________________
   8+ 7C66
   9+ 7C66
  10+ 7C66              //  ______________________________________________________________________
  11+ 7C66              //
  12+ 7C66              // r/w          a n f --
  13+ 7C66              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C66                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C66             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C66             >
  14+ 7C66             >                // dummy db directives used to calculate length of namec
  14+ 7C66 52 2F 57    >                db      "R/W"
  14+ 7C69             >len_NFA         defl    $ - temp_NFA
  14+ 7C69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C66             >
  14+ 7C66 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C67 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C6A             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C69 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C6A             >
  14+ 7C6A 5A 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C6C             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C6C CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C6F             >
  14+ 7C6F             >
  14+ 7C6F             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C6F             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C6F             >
  14+ 7C6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C6F 4D 69                        dw      TO_R                    // >r
  16+ 7C71 DE 69                        dw      ONE_SUBTRACT            // 1-
  17+ 7C73 7F 6A 93 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7C77 44 6A 61 7C                  dw      OVER, NSEC              // over #sec
  19+ 7C7B DE 69 EE 6E                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7C7F EA 68                        dw      OR_OP                   // or
  21+ 7C81 A5 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7C85 2D 70
  22+ 7C87 5F 69                        dw      R_TO                    // r>
  23+ 7C89                                                              // if
  24+ 7C89 1C 64                        dw      ZBRANCH
  25+ 7C8B 08 00                        dw      Read_Write_Else - $
  26+ 7C8D F4 7B                        dw          BLK_READ            //      blk-read
  27+ 7C8F 07 64                        dw      BRANCH
  28+ 7C91 04 00                        dw      Read_Write_Endif - $
  29+ 7C93              Read_Write_Else:                                // else
  30+ 7C93 17 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7C95              Read_Write_Endif:                               // endif
  32+ 7C95 3C 69                        dw      EXIT                    // ;
  33+ 7C97
  34+ 7C97
  35+ 7C97              //  ______________________________________________________________________
  36+ 7C97              //
  37+ 7C97              // +buf        a1 -- a2 f
  38+ 7C97              // advences to next buffer, cyclically rotating along them
  39+ 7C97                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7C97             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7C97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7C97             >
  39+ 7C97             >                // dummy db directives used to calculate length of namec
  39+ 7C97 2B 42 55 46 >                db      "+BUF"
  39+ 7C9B             >len_NFA         defl    $ - temp_NFA
  39+ 7C9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7C97             >
  39+ 7C97 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7C98 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7C9C             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7C9B C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7C9C             >
  39+ 7C9C 66 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7C9E             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7C9E CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CA1             >
  39+ 7CA1             >
  39+ 7CA1             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CA1             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CA1             >
  39+ 7CA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CA1 A5 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CA5 B7 69
  41+ 7CA7 7F 6A 42 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CAB 00 6B
  42+ 7CAD B9 6E                        dw      EQUALS                  // =
  43+ 7CAF                                                              // if
  44+ 7CAF 1C 64                        dw      ZBRANCH
  45+ 7CB1 08 00                        dw      PBuf_Endif - $
  46+ 7CB3 52 6A                        dw          DROP                //      drop
  47+ 7CB5 36 6D 00 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CB9              PBuf_Endif:                                     // endif
  49+ 7CB9 7F 6A 06 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CBD 00 6B
  50+ 7CBF AD 6E                        dw      SUBTRACT                // -
  51+ 7CC1 3C 69                        dw      EXIT                    // ;
  52+ 7CC3
  53+ 7CC3              //  ______________________________________________________________________
  54+ 7CC3              //
  55+ 7CC3              // update       --
  56+ 7CC3              // mark the last used block to be written to disk
  57+ 7CC3                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CC3             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CC3             >
  57+ 7CC3             >                // dummy db directives used to calculate length of namec
  57+ 7CC3 55 50 44 41 >                db      "UPDATE"
  57+ 7CC7 54 45       >
  57+ 7CC9             >len_NFA         defl    $ - temp_NFA
  57+ 7CC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CC3             >
  57+ 7CC3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CC4 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CC8 54 45       >
  57+ 7CCA             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CC9 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CCA             >
  57+ 7CCA 97 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CCC             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CCC CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CCF             >
  57+ 7CCF             >
  57+ 7CCF             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CCF             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CCF             >
  57+ 7CCF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CCF 06 6E 00 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7CD3 00 6B
  59+ 7CD5 A5 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7CD9 EA 68
  60+ 7CDB 06 6E 00 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7CDF 0B 6B
  61+ 7CE1 3C 69                        dw      EXIT                    // ;
  62+ 7CE3
  63+ 7CE3
  64+ 7CE3              //  ______________________________________________________________________
  65+ 7CE3              //
  66+ 7CE3              // empty-buffers --
  67+ 7CE3                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7CE3             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7CE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7CE3             >
  67+ 7CE3             >                // dummy db directives used to calculate length of namec
  67+ 7CE3 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7CE7 59 2D 42 55 >
  67+ 7CEB 46 46 45 52 >
  67+ 7CEF 53          >
  67+ 7CF0             >len_NFA         defl    $ - temp_NFA
  67+ 7CF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7CE3             >
  67+ 7CE3 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7CE4 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7CE8 59 2D 42 55 >
  67+ 7CEC 46 46 45 52 >
  67+ 7CF0 53          >
  67+ 7CF1             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7CF0 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7CF1             >
  67+ 7CF1 C3 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7CF3             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7CF3 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7CF6             >
  67+ 7CF6             >
  67+ 7CF6             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7CF6             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7CF6             >
  67+ 7CF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7CF6 36 6D 00 6B                  dw      FIRST, FETCH            // first @
  69+ 7CFA 42 6D 00 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7CFE 44 6A AD 6E                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D02 7F 73
  71+ 7D04 3C 69                        dw      EXIT                    // ;
  72+ 7D06
  73+ 7D06              //  ______________________________________________________________________
  74+ 7D06              //
  75+ 7D06              // buffer       n -- a
  76+ 7D06              // read block n and gives the address to a buffer
  77+ 7D06              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D06              // disk before reading the block n.
  79+ 7D06
  80+ 7D06                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D06             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D06             >
  80+ 7D06             >                // dummy db directives used to calculate length of namec
  80+ 7D06 42 55 46 46 >                db      "BUFFER"
  80+ 7D0A 45 52       >
  80+ 7D0C             >len_NFA         defl    $ - temp_NFA
  80+ 7D0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D06             >
  80+ 7D06 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D07 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D0B 45 52       >
  80+ 7D0D             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D0C D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D0D             >
  80+ 7D0D E3 7C       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D0F             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D0F CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D12             >
  80+ 7D12             >
  80+ 7D12             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D12             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D12             >
  80+ 7D12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D12 FB 6D 00 6B                  dw      USE, FETCH              // use @
  82+ 7D16 7F 6A 4D 69                  dw      DUP, TO_R               // dup >r
  83+ 7D1A                                                              // begin
  84+ 7D1A              Buffer_Begin:
  85+ 7D1A 9E 7C                        dw          PBUF                //      +buf
  86+ 7D1C                                                              // until
  87+ 7D1C 1C 64                        dw      ZBRANCH
  88+ 7D1E FC FF                        dw      Buffer_Begin - $
  89+ 7D20 FB 6D 0B 6B                  dw      USE, STORE              // use !
  90+ 7D24 71 69 00 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D28 93 69
  91+ 7D2A                                                              // if
  92+ 7D2A 1C 64                        dw      ZBRANCH
  93+ 7D2C 14 00                        dw      Buffer_Endif - $
  94+ 7D2E 71 69 F6 69                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D32 71 69 00 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D36 A5 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D3A DA 68                        dw          AND_OP              //      and
  98+ 7D3C 4E 6C 6C 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D40              Buffer_Endif:                                   // endif
 100+ 7D40 71 69 0B 6B                  dw      R_OP, STORE             // r !
 101+ 7D44 71 69 06 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D48 0B 6B
 102+ 7D4A 5F 69 F6 69                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D4E 3C 69                        dw      EXIT                    // ;
 104+ 7D50
 105+ 7D50              //  ______________________________________________________________________
 106+ 7D50              //
 107+ 7D50              // block        n -- a
 108+ 7D50              // Leaves the buffer address that contains the block n.
 109+ 7D50              // If the block is not already present, it will be loaded from disk
 110+ 7D50              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D50              // disk before reading the block n.
 112+ 7D50              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D50
 114+ 7D50                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D50             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D50             >
 114+ 7D50             >                // dummy db directives used to calculate length of namec
 114+ 7D50 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D54 4B          >
 114+ 7D55             >len_NFA         defl    $ - temp_NFA
 114+ 7D55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D50             >
 114+ 7D50 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D51 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D55 4B          >
 114+ 7D56             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D55 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D56             >
 114+ 7D56 06 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D58             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D58 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D5B             >
 114+ 7D5B             >
 114+ 7D5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D5B             >
 114+ 7D5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D5B 8D 6D 00 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D5F B7 69 4D 69                  dw      PLUS, TO_R              // + >r
 117+ 7D63 06 6E 00 6B                  dw      PREV, FETCH             // prev @
 118+ 7D67 7F 6A 00 6B                  dw      DUP, FETCH              // dup @
 119+ 7D6B 71 69 AD 6E                  dw      R_OP, SUBTRACT          // r -
 120+ 7D6F 7F 6A B7 69                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7D73                                                              // if
 122+ 7D73 1C 64                        dw        ZBRANCH
 123+ 7D75 32 00                        dw        Block_Endif_1 - $
 124+ 7D77              Block_Begin:                                    //      begin
 125+ 7D77 9E 7C 79 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7D7B                                                              //          if
 127+ 7D7B 1C 64                        dw          ZBRANCH
 128+ 7D7D 12 00                        dw          Block_Endif_2 - $
 129+ 7D7F 52 6A                        dw              DROP            //              drop
 130+ 7D81 71 69 0F 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7D85 7F 6A                        dw              DUP             //              dup
 132+ 7D87 71 69 57 6C                  dw              R_OP, ONE       //              r 1
 133+ 7D8B 6C 7C                        dw              READ_WRITE      //              r/w
 134+ 7D8D 0C 6A                        dw              TWO_MINUS       //              2-
 135+ 7D8F              Block_Endif_2:                                  //          endif
 136+ 7D8F 7F 6A 00 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7D93 71 69
 137+ 7D95 AD 6E 7F 6A                  dw          SUBTRACT, DUP       //          - dup
 138+ 7D99 B7 69 79 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7D9D                                                              //      until
 140+ 7D9D 1C 64                        dw        ZBRANCH
 141+ 7D9F D8 FF                        dw        Block_Begin - $
 142+ 7DA1 7F 6A 06 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DA5 0B 6B
 143+ 7DA7              Block_Endif_1:                                  // endif
 144+ 7DA7 5F 69 52 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DAB F6 69
 145+ 7DAD 3C 69                        dw      EXIT                    // ;
 146+ 7DAF
 147+ 7DAF              //  ______________________________________________________________________
 148+ 7DAF              //
 149+ 7DAF              // #buff        -- n
 150+ 7DAF              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DAF                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DAF             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DAF             >
 151+ 7DAF             >                // dummy db directives used to calculate length of namec
 151+ 7DAF 23 42 55 46 >                db      "#BUFF"
 151+ 7DB3 46          >
 151+ 7DB4             >len_NFA         defl    $ - temp_NFA
 151+ 7DB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DAF             >
 151+ 7DAF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DB0 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DB4 46          >
 151+ 7DB5             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DB4 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DB5             >
 151+ 7DB5 50 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DB7             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DB7 CD 12 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DBA             >
 151+ 7DBA             >
 151+ 7DBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DBA             >
 151+ 7DBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DBA 07 00       >                dw      7
 152+ 7DBC
 153+ 7DBC              //  ______________________________________________________________________
 154+ 7DBC              //
 155+ 7DBC              // flush        --
 156+ 7DBC                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DBC             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DBC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DBC             >
 156+ 7DBC             >                // dummy db directives used to calculate length of namec
 156+ 7DBC 46 4C 55 53 >                db      "FLUSH"
 156+ 7DC0 48          >
 156+ 7DC1             >len_NFA         defl    $ - temp_NFA
 156+ 7DC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DBC             >
 156+ 7DBC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DBD 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DC1 48          >
 156+ 7DC2             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DC1 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DC2             >
 156+ 7DC2 AF 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DC4             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DC4 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DC7             >
 156+ 7DC7             >
 156+ 7DC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DC7             >
 156+ 7DC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DC7 B7 7D D4 69                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DCB 4E 6C
 158+ 7DCD              Flush_Do:                                       // do
 159+ 7DCD 70 64                        dw      C_DO
 160+ 7DCF 4E 6C 0F 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7DD3 52 6A
 161+ 7DD5                                                              // loop
 162+ 7DD5 F8 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7DD9 8D 7B 00 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7DDD 9C 67 52 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7DE1 3C 69                        dw      EXIT                    // exit
 166+ 7DE3
 167+ 7DE3              //  ______________________________________________________________________
 168+ 7DE3              //
 169+ 7DE3              // f_getline    a m fh -- n
 170+ 7DE3              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7DE3              // Address a is left for subsequent processing
 172+ 7DE3              // and n as the actual number of byte read, that is the length of line
 173+ 7DE3                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7DE3             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7DE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7DE3             >
 173+ 7DE3             >                // dummy db directives used to calculate length of namec
 173+ 7DE3 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7DE7 54 4C 49 4E >
 173+ 7DEB 45          >
 173+ 7DEC             >len_NFA         defl    $ - temp_NFA
 173+ 7DEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7DE3             >
 173+ 7DE3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7DE4 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7DE8 54 4C 49 4E >
 173+ 7DEC 45          >
 173+ 7DED             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7DEC C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7DED             >
 173+ 7DED BC 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7DEF             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7DEF CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7DF2             >
 173+ 7DF2             >
 173+ 7DF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7DF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7DF2             >
 173+ 7DF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7DF2 4D 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7DF4 66 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7DF6 71 69 B1 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7DFA A5 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7DFE 2D 70
 178+ 7E00
 179+ 7E00 C4 6A 44 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E04 D4 69 74 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E08
 182+ 7E08 71 69 CD 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E0C A5 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E10 2D 70
 184+ 7E12                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E12 1C 64                        dw      ZBRANCH
 186+ 7E14 3C 00                        dw      FGetline_Else - $
 187+ 7E16 A5 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E1A 58 65
 188+ 7E1C 52 6A 5B 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E20 74 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E22 A5 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E26 58 65
 191+ 7E28 52 6A 5B 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E2C 8A 6A FD 6E                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E30 7F 6A 36 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E34 0B 6B
 194+ 7E36 7F 6A 4D 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E3A C4 6A 5F 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E3E 4E 6C C2 69                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E42 5F 69 69 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E46 A5 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E4A 2D 70
 199+ 7E4C                                                              // else
 200+ 7E4C 07 64                        dw      BRANCH
 201+ 7E4E 0C 00                        dw      FGetline_Endif - $
 202+ 7E50              FGetline_Else:
 203+ 7E50 5F 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E52 C4 6A B8 6A                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E56 52 6A 4E 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E5A              FGetline_Endif:                                 // endif
 207+ 7E5A 4D 69 7F 6A                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E5E 7F 6A
 208+ 7E60 D4 69 74 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E64 71 69 45 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7E68 D4 6A B7 69                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7E6C 4E 6C 74 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7E70 01 6A 0B 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7E74 71 69 B7 69                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7E78 DE 69
 214+ 7E7A 74 6A 71 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7E7E AD 6E
 215+ 7E80 91 73                        dw      BLANKS                  // blanks
 216+ 7E82 5F 69                        dw      R_TO                    // r>                   ( n )
 217+ 7E84 3C 69                        dw      EXIT                    // ;
 218+ 7E86
 219+ 7E86              //  ______________________________________________________________________
 220+ 7E86              //
 221+ 7E86              // f_include    fh --
 222+ 7E86              // Given a filehandle includes the source from file
 223+ 7E86                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7E86             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7E86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7E86             >
 223+ 7E86             >                // dummy db directives used to calculate length of namec
 223+ 7E86 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7E8A 43 4C 55 44 >
 223+ 7E8E 45          >
 223+ 7E8F             >len_NFA         defl    $ - temp_NFA
 223+ 7E8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7E86             >
 223+ 7E86 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7E87 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7E8B 43 4C 55 44 >
 223+ 7E8F 45          >
 223+ 7E90             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7E8F C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7E90             >
 223+ 7E90 E3 7D       >                dw      last_NFA            // Link to previous definition Name
 223+ 7E92             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7E92 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7E95             >
 223+ 7E95             >
 223+ 7E95             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7E95             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7E95             >
 223+ 7E95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7E95 62 6D 00 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7E99 4D 69
 225+ 7E9B 6C 6D 00 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7E9F 4D 69
 226+ 7EA1 2B 6E 00 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7EA5 4D 69
 227+ 7EA7 71 69                        dw      R_OP                    // r
 228+ 7EA9                                                              // if
 229+ 7EA9 1C 64                        dw      ZBRANCH
 230+ 7EAB 20 00                        dw      FInclude_Else_1 - $
 231+ 7EAD 71 69 B1 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7EB1 A5 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7EB5 2D 70
 233+ 7EB7 6C 6D 00 6B                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7EBB 0C 6A                        dw          TWO_MINUS
 235+ 7EBD 36 6E 00 6B                  dw          SPAN, FETCH         //      span @ -
 236+ 7EC1 AD 6E                        dw          SUBTRACT
 237+ 7EC3 9B 6E C2 69                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7EC7                                                              // else
 239+ 7EC7 07 64                        dw      BRANCH
 240+ 7EC9 06 00                        dw      FInclude_Endif_1 - $
 241+ 7ECB              FInclude_Else_1:
 242+ 7ECB 4E 6C 4E 6C                  dw          ZERO, ZERO          //      0 0
 243+ 7ECF                                                              // endif
 244+ 7ECF              FInclude_Endif_1:
 245+ 7ECF 4D 69 4D 69                  dw      TO_R, TO_R              // >r >r
 246+ 7ED3 2B 6E 0B 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7ED7              FInclude_Begin:                                 // begin
 248+ 7ED7 57 6C 58 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7EDB 95 6C
 249+ 7EDD D4 6A 91 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 250+ 7EE1 74 6A D4 69                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7EE5 74 6A 01 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7EE9 2B 6E 00 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7EED EF 7D                        dw          F_GETLINE           //      f_getline
 254+ 7EEF                                                              // while
 255+ 7EEF 1C 64                        dw      ZBRANCH
 256+ 7EF1 14 00                        dw      FInclude_Repeat - $
 257+ 7EF3 57 6C 62 6D                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7EF7 0B 6B
 258+ 7EF9 4E 6C 6C 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7EFD 0B 6B
 259+ 7EFF 86 77                        dw          INTERPRET           //      interpret
 260+ 7F01 07 64                        dw      BRANCH
 261+ 7F03 D4 FF                        dw      FInclude_Begin - $
 262+ 7F05              FInclude_Repeat:                                // repeat
 263+ 7F05 2B 6E 00 6B                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F09 4E 6C 2B 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F0D 0B 6B
 265+ 7F0F 8A 67                        dw      F_CLOSE                 // f_close
 266+ 7F11 A5 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F15 2D 70
 267+ 7F17 5F 69 5F 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F1B 5F 69
 268+ 7F1D 7F 6A 2B 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F21 0B 6B
 269+ 7F23                                                              // if
 270+ 7F23 1C 64                        dw      ZBRANCH
 271+ 7F25 12 00                        dw      FInclude_Else_2 - $
 272+ 7F27 2B 6E 00 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F2B 69 67                        dw          F_SEEK              //      f_seek
 274+ 7F2D A5 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F31 2D 70
 275+ 7F33                                                              // else
 276+ 7F33 07 64                        dw      BRANCH
 277+ 7F35 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F37              FInclude_Else_2:
 279+ 7F37 B8 6A                        dw          TWO_DROP            //      2drop
 280+ 7F39              FInclude_Endif_2:                               // endif
 281+ 7F39 5F 69 6C 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F3D 0B 6B
 282+ 7F3F 5F 69 62 6D                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F43 0B 6B
 283+ 7F45 3C 69                        dw      EXIT                    // ;
 284+ 7F47
 285+ 7F47              //  ______________________________________________________________________
 286+ 7F47              //
 287+ 7F47              // open<         -- fh
 288+ 7F47              // Open the following filename and return it file-handle
 289+ 7F47              // Used in the form OPEN CCCC
 290+ 7F47                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F47             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F47             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F47             >
 290+ 7F47             >                // dummy db directives used to calculate length of namec
 290+ 7F47 4F 50 45 4E >                db      "OPEN<"
 290+ 7F4B 3C          >
 290+ 7F4C             >len_NFA         defl    $ - temp_NFA
 290+ 7F4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F47             >
 290+ 7F47 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F48 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F4C 3C          >
 290+ 7F4D             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F4C BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F4D             >
 290+ 7F4D 86 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F4F             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F4F CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F52             >
 290+ 7F52             >
 290+ 7F52             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F52             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F52             >
 290+ 7F52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F52 7D 6C                        dw      BL
 292+ 7F54 CC 73 E2 71                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F58 44 6A
 293+ 7F5A B7 69 4E 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F5E 74 6A 0B 6B
 294+ 7F62 B8 73 57 6C                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7F66 FF 67
 295+ 7F68 A5 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7F6C 2D 70                        dw      QERROR                  // ?error
 297+ 7F6E 3C 69                        dw      EXIT                    // ;
 298+ 7F70
 299+ 7F70              //  ______________________________________________________________________
 300+ 7F70              //
 301+ 7F70              // include      -- cccc
 302+ 7F70              // Include the following filename
 303+ 7F70                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7F70             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7F70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7F70             >
 303+ 7F70             >                // dummy db directives used to calculate length of namec
 303+ 7F70 49 4E 43 4C >                db      "INCLUDE"
 303+ 7F74 55 44 45    >
 303+ 7F77             >len_NFA         defl    $ - temp_NFA
 303+ 7F77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7F70             >
 303+ 7F70 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7F71 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7F75 55 44 45    >
 303+ 7F78             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7F77 C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7F78             >
 303+ 7F78 47 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7F7A             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7F7A CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7F7D             >
 303+ 7F7D             >
 303+ 7F7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7F7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7F7D             >
 303+ 7F7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7F7D 4F 7F                        dw      OPEN_FH                 // open
 305+ 7F7F 7F 6A 92 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7F83 8A 67 52 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7F87 3C 69                        dw      EXIT                    // ;
 308+ 7F89
 309+ 7F89              //  ______________________________________________________________________
 310+ 7F89              //
 311+ 7F89              // needs
 312+ 7F89              // check for cccc exists in vocabulary
 313+ 7F89              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7F89
 315+ 7F89              // temp filename cccc.f as counted string zero-padded
 316+ 7F89                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7F89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7F89             >
 316+ 7F89             >                // dummy db directives used to calculate length of namec
 316+ 7F89 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7F8D 53 2D 57    >
 316+ 7F90             >len_NFA         defl    $ - temp_NFA
 316+ 7F90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7F89             >
 316+ 7F89 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7F8A 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7F8E 53 2D 57    >
 316+ 7F91             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7F90 D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7F91             >
 316+ 7F91 70 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7F93             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7F93 CD 95 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7F96             >
 316+ 7F96             >
 316+ 7F96             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7F96             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7F96             >
 316+ 7F96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7F96 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FB9              // temp complete path+filename
 319+ 7FB9                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FB9             >
 319+ 7FB9             >                // dummy db directives used to calculate length of namec
 319+ 7FB9 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FBD 53 2D 46 4E >
 319+ 7FC1             >len_NFA         defl    $ - temp_NFA
 319+ 7FC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FB9             >
 319+ 7FB9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FBA 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FBE 53 2D 46 4E >
 319+ 7FC2             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FC1 CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FC2             >
 319+ 7FC2 89 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FC4             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FC4 CD 95 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7FC7             >
 319+ 7FC7             >
 319+ 7FC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7FC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7FC7             >
 319+ 7FC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7FC7 00 00 00...                  ds      40
 321+ 7FEF              // constant path
 322+ 7FEF                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 7FEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 7FEF             >
 322+ 7FEF             >                // dummy db directives used to calculate length of namec
 322+ 7FEF 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 7FF3 53 2D 49 4E >
 322+ 7FF7 43          >
 322+ 7FF8             >len_NFA         defl    $ - temp_NFA
 322+ 7FF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 7FEF             >
 322+ 7FEF 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 7FF0 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 7FF4 53 2D 49 4E >
 322+ 7FF8 43          >
 322+ 7FF9             >                org     $-1                 // alter last byte of Name just above to set
 322+ 7FF8 C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 7FF9             >
 322+ 7FF9 B9 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 7FFB             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 7FFB CD 95 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 7FFE             >
 322+ 7FFE             >
 322+ 7FFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 7FFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 7FFE             >
 322+ 7FFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 7FFE 04 69 6E 63                  db      4, "inc/", 0
 323+ 8002 2F 00
 324+ 8004                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 8004             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 8004             >
 324+ 8004             >                // dummy db directives used to calculate length of namec
 324+ 8004 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 8008 53 2D 4C 49 >
 324+ 800C 42          >
 324+ 800D             >len_NFA         defl    $ - temp_NFA
 324+ 800D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 8004             >
 324+ 8004 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 8005 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 8009 53 2D 4C 49 >
 324+ 800D 42          >
 324+ 800E             >                org     $-1                 // alter last byte of Name just above to set
 324+ 800D C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 800E             >
 324+ 800E EF 7F       >                dw      last_NFA            // Link to previous definition Name
 324+ 8010             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 8010 CD 95 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 8013             >
 324+ 8013             >
 324+ 8013             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 8013             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 8013             >
 324+ 8013             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 8013 04 6C 69 62                  db      4, "lib/", 0
 325+ 8017 2F 00
 326+ 8019
 327+ 8019              // Concatenate path at a and filename and include it
 328+ 8019              // No error is issued if filename doesn't exist.
 329+ 8019                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 8019             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 8019             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 8019             >
 329+ 8019             >                // dummy db directives used to calculate length of namec
 329+ 8019 4E 45 45 44 >                db      "NEEDS/"
 329+ 801D 53 2F       >
 329+ 801F             >len_NFA         defl    $ - temp_NFA
 329+ 801F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 8019             >
 329+ 8019 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 801A 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 801E 53 2F       >
 329+ 8020             >                org     $-1                 // alter last byte of Name just above to set
 329+ 801F AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 8020             >
 329+ 8020 04 80       >                dw      last_NFA            // Link to previous definition Name
 329+ 8022             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 8022 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 8025             >
 329+ 8025             >
 329+ 8025             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 8025             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 8025             >
 329+ 8025             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 8025 E2 71 66 6A                  dw      COUNT, TUCK             // n a n
 331+ 8029 C4 7F 74 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 802D 45 68
 332+ 802F C4 7F B7 69                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 8033 93 7F D4 69                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 8037 74 6A
 334+ 8039 A5 63 23 00                  dw      LIT, 35
 335+ 803D 45 68                        dw      CMOVE
 336+ 803F C4 7F                        dw      NEEDS_FN
 337+ 8041 B8 73 57 6C                  dw      PAD, ONE, F_OPEN
 337+ 8045 FF 67
 338+ 8047 79 69                        dw      ZEQUAL
 339+ 8049 1C 64                        dw      ZBRANCH
 340+ 804B 08 00                        dw      Needs_1 - $
 341+ 804D 92 7E                        dw          F_INCLUDE
 342+ 804F 07 64                        dw      BRANCH
 343+ 8051 04 00                        dw      Needs_2 - $
 344+ 8053              Needs_1:
 345+ 8053              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 8053              //              dw          LIT, 43, MESSAGE
 347+ 8053 52 6A                        dw          DROP
 348+ 8055              Needs_2:
 349+ 8055 3C 69                        dw      EXIT                    // ;
 350+ 8057
 351+ 8057
 352+ 8057                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 352+ 8057             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 8057             >
 352+ 8057             >                // dummy db directives used to calculate length of namec
 352+ 8057 4E 44 4F 4D >                db      "NDOM"
 352+ 805B             >len_NFA         defl    $ - temp_NFA
 352+ 805B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 8057             >
 352+ 8057 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 8058 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 352+ 805C             >                org     $-1                 // alter last byte of Name just above to set
 352+ 805B CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 805C             >
 352+ 805C 19 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 805E             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 805E CD 95 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 8061             >
 352+ 8061             >
 352+ 8061             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 8061             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 8061             >
 352+ 8061             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 8061              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 354+ 8061 3A 3F 2F 2A                  db ':?/*|\<>"'
 354+ 8065 7C 5C 3C 3E
 354+ 8069 22
 355+ 806A
 356+ 806A                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 356+ 806A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 356+ 806A             >
 356+ 806A             >                // dummy db directives used to calculate length of namec
 356+ 806A 4E 43 44 4D >                db      "NCDM"
 356+ 806E             >len_NFA         defl    $ - temp_NFA
 356+ 806E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 356+ 806A             >
 356+ 806A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 356+ 806B 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 356+ 806F             >                org     $-1                 // alter last byte of Name just above to set
 356+ 806E CD          >                db      {b $} | END_BIT     // msb as name end
 356+ 806F             >
 356+ 806F 57 80       >                dw      last_NFA            // Link to previous definition Name
 356+ 8071             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 356+ 8071 CD 95 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 356+ 8074             >
 356+ 8074             >
 356+ 8074             >                endif           ; ok        // for other definitions it "points" the correct handler
 356+ 8074             >                // Use of "; ok" to suppress "warning[fwdref]"
 356+ 8074             >
 356+ 8074             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 357+ 8074              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 358+ 8074 5F 5E 25 26                  db '_^%&$_{}~'
 358+ 8078 24 5F 7B 7D
 358+ 807C 7E
 359+ 807D
 360+ 807D
 361+ 807D              // Replace illegal character in filename using the map here above
 362+ 807D              // at the moment we need only  "
 363+ 807D                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 363+ 807D             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 363+ 807D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 363+ 807D             >
 363+ 807D             >                // dummy db directives used to calculate length of namec
 363+ 807D 4E 45 45 44 >                db      "NEEDS-CH"
 363+ 8081 53 2D 43 48 >
 363+ 8085             >len_NFA         defl    $ - temp_NFA
 363+ 8085             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 363+ 807D             >
 363+ 807D 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 363+ 807E 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 363+ 8082 53 2D 43 48 >
 363+ 8086             >                org     $-1                 // alter last byte of Name just above to set
 363+ 8085 C8          >                db      {b $} | END_BIT     // msb as name end
 363+ 8086             >
 363+ 8086 6A 80       >                dw      last_NFA            // Link to previous definition Name
 363+ 8088             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 363+ 8088 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 363+ 808B             >
 363+ 808B             >
 363+ 808B             >                endif           ; ok        // for other definitions it "points" the correct handler
 363+ 808B             >                // Use of "; ok" to suppress "warning[fwdref]"
 363+ 808B             >
 363+ 808B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 364+ 808B E2 71 F4 71                  dw      COUNT, BOUNDS
 365+ 808F 70 64                        dw      C_DO
 366+ 8091              Needs_3:
 367+ 8091 71 80 5E 80                  dw          NCDM, NDOM, LIT, 9
 367+ 8095 A5 63 09 00
 368+ 8099 78 64 17 6B                  dw          I, CFETCH
 369+ 809D 90 65                        dw          C_MAP
 370+ 809F 78 64 23 6B                  dw          I, CSTORE
 371+ 80A3              Needs_4:
 372+ 80A3 F8 63                        dw      C_LOOP
 373+ 80A5 EC FF                        dw      Needs_3 - $
 374+ 80A7 3C 69                        dw      EXIT
 375+ 80A9
 376+ 80A9
 377+ 80A9              // include  "path/cccc.f" if cccc is not defined
 378+ 80A9              // filename cccc.f is temporary stored at NEEDS-W
 379+ 80A9                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 379+ 80A9             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 379+ 80A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ 80A9             >
 379+ 80A9             >                // dummy db directives used to calculate length of namec
 379+ 80A9 4E 45 45 44 >                db      "NEEDS-F"
 379+ 80AD 53 2D 46    >
 379+ 80B0             >len_NFA         defl    $ - temp_NFA
 379+ 80B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ 80A9             >
 379+ 80A9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ 80AA 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 379+ 80AE 53 2D 46    >
 379+ 80B1             >                org     $-1                 // alter last byte of Name just above to set
 379+ 80B0 C6          >                db      {b $} | END_BIT     // msb as name end
 379+ 80B1             >
 379+ 80B1 7D 80       >                dw      last_NFA            // Link to previous definition Name
 379+ 80B3             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 80B3 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 379+ 80B6             >
 379+ 80B6             >
 379+ 80B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 80B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 80B6             >
 379+ 80B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 80B6 88 75                        dw      LFIND
 381+ 80B8 1C 64                        dw      ZBRANCH
 382+ 80BA 0A 00                        dw      Needs_5 - $
 383+ 80BC
 384+ 80BC 52 6A B8 6A                  dw          DROP, TWO_DROP
 385+ 80C0 07 64                        dw      BRANCH
 386+ 80C2 2C 00                        dw      Needs_6 - $
 387+ 80C4              Needs_5:
 388+ 80C4 93 7F                        dw          NEEDS_W
 389+ 80C6 A5 63 23 00                  dw          LIT, 35
 390+ 80CA 7F 73                        dw          ERASE                   // a
 391+ 80CC 58 6E 17 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 391+ 80D0 D4 69
 392+ 80D2 58 6E 44 6A                  dw          HERE, OVER              // a n here n
 393+ 80D6 93 7F 74 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 393+ 80DA 45 68
 394+ 80DC 93 7F 88 80                  dw          NEEDS_W, NEEDS_CHECK
 395+ 80E0 93 7F B7 69                  dw          NEEDS_W, PLUS           // a a1+1
 396+ 80E4 A5 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 397+ 80E8 74 6A 0B 6B                  dw          SWAP, STORE             // a
 398+ 80EC 22 80                        dw          NEEDS_SLASH
 399+ 80EE              Needs_6:
 400+ 80EE 3C 69                        dw      EXIT
 401+ 80F0
 402+ 80F0
 403+ 80F0              // check for cccc exists in vocabulary
 404+ 80F0              // if it doesn't then  INCLUDE  inc/cccc.F
 405+ 80F0              // search in inc subdirectory
 406+ 80F0                              Colon_Def NEEDS, "NEEDS", is_normal
 406+ 80F0             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 406+ 80F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ 80F0             >
 406+ 80F0             >                // dummy db directives used to calculate length of namec
 406+ 80F0 4E 45 45 44 >                db      "NEEDS"
 406+ 80F4 53          >
 406+ 80F5             >len_NFA         defl    $ - temp_NFA
 406+ 80F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ 80F0             >
 406+ 80F0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ 80F1 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 406+ 80F5 53          >
 406+ 80F6             >                org     $-1                 // alter last byte of Name just above to set
 406+ 80F5 D3          >                db      {b $} | END_BIT     // msb as name end
 406+ 80F6             >
 406+ 80F6 A9 80       >                dw      last_NFA            // Link to previous definition Name
 406+ 80F8             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 80F8 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 406+ 80FB             >
 406+ 80FB             >
 406+ 80FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 80FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 80FB             >
 406+ 80FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 80FB 6C 6D 00 6B                  dw      TO_IN, FETCH
 408+ 80FF 7F 6A                        dw      DUP
 409+ 8101 FB 7F B3 80                  dw      NEEDS_INC, NEEDS_PATH
 410+ 8105 6C 6D 0B 6B                  dw      TO_IN, STORE
 411+ 8109 10 80 B3 80                  dw      NEEDS_LIB, NEEDS_PATH
 412+ 810D 6C 6D 0B 6B                  dw      TO_IN, STORE
 413+ 8111 88 75                        dw      LFIND
 414+ 8113 1C 64                        dw      ZBRANCH
 415+ 8115 08 00                        dw      Needs_10 - $
 416+ 8117 B8 6A                        dw          TWO_DROP
 417+ 8119 07 64                        dw      BRANCH
 418+ 811B 10 00                        dw      Needs_11 - $
 419+ 811D              Needs_10:
 420+ 811D 93 7F E2 71                  dw      NEEDS_W, COUNT, TYPE, SPACE
 420+ 8121 00 72 63 6F
 421+ 8125 A5 63 2B 00                  dw      LIT, 43, MESSAGE
 421+ 8129 D0 7A
 422+ 812B              Needs_11:
 423+ 812B 3C 69                        dw      EXIT
 424+ 812D
 425+ 812D
 426+ 812D              //  ______________________________________________________________________
 427+ 812D              //
 428+ 812D              // load+        n --
 429+ 812D                              Colon_Def LOAD_P, "LOAD+", is_normal
 429+ 812D             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 429+ 812D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 429+ 812D             >
 429+ 812D             >                // dummy db directives used to calculate length of namec
 429+ 812D 4C 4F 41 44 >                db      "LOAD+"
 429+ 8131 2B          >
 429+ 8132             >len_NFA         defl    $ - temp_NFA
 429+ 8132             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 429+ 812D             >
 429+ 812D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 429+ 812E 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 429+ 8132 2B          >
 429+ 8133             >                org     $-1                 // alter last byte of Name just above to set
 429+ 8132 AB          >                db      {b $} | END_BIT     // msb as name end
 429+ 8133             >
 429+ 8133 F0 80       >                dw      last_NFA            // Link to previous definition Name
 429+ 8135             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 429+ 8135 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 429+ 8138             >
 429+ 8138             >
 429+ 8138             >                endif           ; ok        // for other definitions it "points" the correct handler
 429+ 8138             >                // Use of "; ok" to suppress "warning[fwdref]"
 429+ 8138             >
 429+ 8138             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 430+ 8138 62 6D 00 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 430+ 813C 4D 69
 431+ 813E 6C 6D 00 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 431+ 8142 4D 69
 432+ 8144
 433+ 8144 4E 6C 6C 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 433+ 8148 0B 6B
 434+ 814A A2 6C 2F 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 434+ 814E 62 6D 0B 6B
 435+ 8152 86 77                        dw      INTERPRET               // interpret
 436+ 8154
 437+ 8154 5F 69 6C 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 437+ 8158 0B 6B
 438+ 815A 5F 69 62 6D                  dw      R_TO, BLK, STORE        // r> blk !
 438+ 815E 0B 6B
 439+ 8160 3C 69                        dw      EXIT                    // ;
 440+ 8162
 441+ 8162              //  ______________________________________________________________________
 442+ 8162              //
 443+ 8162              // -->          --
 444+ 8162                              Colon_Def LOAD_NEXT, "-->", is_immediate
 444+ 8162             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 444+ 8162             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 444+ 8162             >
 444+ 8162             >                // dummy db directives used to calculate length of namec
 444+ 8162 2D 2D 3E    >                db      "-->"
 444+ 8165             >len_NFA         defl    $ - temp_NFA
 444+ 8165             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 444+ 8162             >
 444+ 8162 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 444+ 8163 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 444+ 8166             >                org     $-1                 // alter last byte of Name just above to set
 444+ 8165 BE          >                db      {b $} | END_BIT     // msb as name end
 444+ 8166             >
 444+ 8166 2D 81       >                dw      last_NFA            // Link to previous definition Name
 444+ 8168             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 444+ 8168 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 444+ 816B             >
 444+ 816B             >
 444+ 816B             >                endif           ; ok        // for other definitions it "points" the correct handler
 444+ 816B             >                // Use of "; ok" to suppress "warning[fwdref]"
 444+ 816B             >
 444+ 816B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 445+ 816B AB 70                        dw      QLOADING                // ?loading
 446+ 816D 4E 6C 6C 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 446+ 8171 0B 6B
 447+ 8173 A2 6C                        dw      BSCR                    // b/scr
 448+ 8175 62 6D 00 6B                  dw      BLK, FETCH              // blk @
 449+ 8179 44 6A                        dw      OVER                    // over
 450+ 817B 5F 7A                        dw      MOD                     // mod
 451+ 817D AD 6E                        dw      SUBTRACT                // -
 452+ 817F 62 6D E1 6A                  dw      BLK, PLUSSTORE          // +!
 453+ 8183 3C 69                        dw      EXIT                    // ;
 454+ 8185
 455+ 8185              //  ______________________________________________________________________
 456+ 8185              //
 457+ 8185              // '            -- xt
 458+ 8185                              Colon_Def TICK, "'", is_normal
 458+ 8185             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 458+ 8185             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 458+ 8185             >
 458+ 8185             >                // dummy db directives used to calculate length of namec
 458+ 8185 27          >                db      "'"
 458+ 8186             >len_NFA         defl    $ - temp_NFA
 458+ 8186             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 458+ 8185             >
 458+ 8185 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 458+ 8186 27          >                db      "'"               // name string in 7-bit ascii, but
 458+ 8187             >                org     $-1                 // alter last byte of Name just above to set
 458+ 8186 A7          >                db      {b $} | END_BIT     // msb as name end
 458+ 8187             >
 458+ 8187 62 81       >                dw      last_NFA            // Link to previous definition Name
 458+ 8189             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 458+ 8189 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 458+ 818C             >
 458+ 818C             >
 458+ 818C             >                endif           ; ok        // for other definitions it "points" the correct handler
 458+ 818C             >                // Use of "; ok" to suppress "warning[fwdref]"
 458+ 818C             >
 458+ 818C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 459+ 818C 88 75                        dw      LFIND                   // -find
 460+ 818E 79 69                        dw      ZEQUAL                  // 0=
 461+ 8190 4E 6C 2D 70                  dw      ZERO, QERROR            // 0 ?error
 462+ 8194 52 6A                        dw      DROP                    // drop
 463+ 8196 3C 69                        dw      EXIT                    // ;
 464+ 8198
 465+ 8198              //  ______________________________________________________________________
 466+ 8198              //
 467+ 8198              // forget       -- cccc
 468+ 8198                              Colon_Def FORGET, "FORGET", is_normal
 468+ 8198             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 468+ 8198             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 468+ 8198             >
 468+ 8198             >                // dummy db directives used to calculate length of namec
 468+ 8198 46 4F 52 47 >                db      "FORGET"
 468+ 819C 45 54       >
 468+ 819E             >len_NFA         defl    $ - temp_NFA
 468+ 819E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 468+ 8198             >
 468+ 8198 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 468+ 8199 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 468+ 819D 45 54       >
 468+ 819F             >                org     $-1                 // alter last byte of Name just above to set
 468+ 819E D4          >                db      {b $} | END_BIT     // msb as name end
 468+ 819F             >
 468+ 819F 85 81       >                dw      last_NFA            // Link to previous definition Name
 468+ 81A1             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 468+ 81A1 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 468+ 81A4             >
 468+ 81A4             >
 468+ 81A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 468+ 81A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 468+ 81A4             >
 468+ 81A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 469+ 81A4 A9 6D 00 6B                  dw      CURRENT, FETCH          // current @
 470+ 81A8 9B 6D 00 6B                  dw      CONTEXT, FETCH          // context @
 471+ 81AC AD 6E A5 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 471+ 81B0 17 00 2D 70
 472+ 81B4 89 81 F8 6F                  dw      TICK, TO_BODY           // ' >body
 473+ 81B8 7F 6A 12 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 473+ 81BC 00 6B
 474+ 81BE C7 6E A5 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 474+ 81C2 15 00 2D 70
 475+ 81C6 7F 6A CC 6F                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 475+ 81CA 1B 6D 0B 6B
 476+ 81CE AC 6F 00 6B                  dw      LFA, FETCH              // lfa @
 477+ 81D2 9B 6D 00 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 477+ 81D6 0B 6B
 478+ 81D8 3C 69                        dw      EXIT                    // ;
 479+ 81DA
 480+ 81DA              //  ______________________________________________________________________
 481+ 81DA              //
 482+ 81DA              // marker       -- cccc
 483+ 81DA                              Colon_Def MARKER, "MARKER", is_immediate
 483+ 81DA             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 483+ 81DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 483+ 81DA             >
 483+ 81DA             >                // dummy db directives used to calculate length of namec
 483+ 81DA 4D 41 52 4B >                db      "MARKER"
 483+ 81DE 45 52       >
 483+ 81E0             >len_NFA         defl    $ - temp_NFA
 483+ 81E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 483+ 81DA             >
 483+ 81DA C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 483+ 81DB 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 483+ 81DF 45 52       >
 483+ 81E1             >                org     $-1                 // alter last byte of Name just above to set
 483+ 81E0 D2          >                db      {b $} | END_BIT     // msb as name end
 483+ 81E1             >
 483+ 81E1 98 81       >                dw      last_NFA            // Link to previous definition Name
 483+ 81E3             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 483+ 81E3 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 483+ 81E6             >
 483+ 81E6             >
 483+ 81E6             >                endif           ; ok        // for other definitions it "points" the correct handler
 483+ 81E6             >                // Use of "; ok" to suppress "warning[fwdref]"
 483+ 81E6             >
 483+ 81E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 484+ 81E6 AA 71                        dw      CBUILDS
 485+ 81E8 2A 6D 00 6B                  dw      VOC_LINK, FETCH, COMMA
 485+ 81EC 76 6E
 486+ 81EE A9 6D 00 6B                  dw      CURRENT, FETCH, COMMA
 486+ 81F2 76 6E
 487+ 81F4 9B 6D 00 6B                  dw      CONTEXT, FETCH, COMMA
 487+ 81F8 76 6E
 488+ 81FA 9B 6F 76 6E                  dw      LATEST, COMMA
 489+ 81FE 9B 6F E1 6F                  dw      LATEST, PFA, LFA, FETCH, COMMA
 489+ 8202 AC 6F 00 6B
 489+ 8206 76 6E
 490+ 8208 BB 71                        dw      DOES_TO
 491+ 820A 7F 6A 00 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 491+ 820E 2A 6D 0B 6B
 491+ 8212 F6 69
 492+ 8214 7F 6A 00 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 492+ 8218 A9 6D 0B 6B
 492+ 821C F6 69
 493+ 821E 7F 6A 00 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 493+ 8222 9B 6D 0B 6B
 493+ 8226 F6 69
 494+ 8228 7F 6A 00 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 494+ 822C 1B 6D 0B 6B
 494+ 8230 F6 69
 495+ 8232 00 6B A9 6D                  dw           FETCH, CURRENT, FETCH, STORE
 495+ 8236 00 6B 0B 6B
 496+ 823A 3C 69                        dw      EXIT
 497+ 823C
 498+ 823C              //  ______________________________________________________________________
 499+ 823C              //
 500+ 823C              // spaces       n --
 501+ 823C                              Colon_Def SPACES, "SPACES", is_normal
 501+ 823C             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 501+ 823C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 501+ 823C             >
 501+ 823C             >                // dummy db directives used to calculate length of namec
 501+ 823C 53 50 41 43 >                db      "SPACES"
 501+ 8240 45 53       >
 501+ 8242             >len_NFA         defl    $ - temp_NFA
 501+ 8242             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 501+ 823C             >
 501+ 823C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 501+ 823D 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 501+ 8241 45 53       >
 501+ 8243             >                org     $-1                 // alter last byte of Name just above to set
 501+ 8242 D3          >                db      {b $} | END_BIT     // msb as name end
 501+ 8243             >
 501+ 8243 DA 81       >                dw      last_NFA            // Link to previous definition Name
 501+ 8245             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 501+ 8245 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 501+ 8248             >
 501+ 8248             >
 501+ 8248             >                endif           ; ok        // for other definitions it "points" the correct handler
 501+ 8248             >                // Use of "; ok" to suppress "warning[fwdref]"
 501+ 8248             >
 501+ 8248             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 502+ 8248 4E 6C 14 6F                  dw      ZERO, MAX
 503+ 824C 4E 6C 45 64                  dw      ZERO, C_Q_DO
 504+ 8250 08 00                        dw      Spaces_Leave - $
 505+ 8252              Spaces_Loop:
 506+ 8252 63 6F                        dw          SPACE
 507+ 8254 F8 63                        dw      C_LOOP
 508+ 8256 FC FF                        dw      Spaces_Loop - $
 509+ 8258              Spaces_Leave:
 510+ 8258 3C 69                        dw      EXIT                    // ;
 511+ 825A
 512+ 825A              //  ______________________________________________________________________
 513+ 825A              //
 514+ 825A              // <#           --
 515+ 825A                              Colon_Def BEGIN_DASH, "<#", is_normal
 515+ 825A             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 515+ 825A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 825A             >
 515+ 825A             >                // dummy db directives used to calculate length of namec
 515+ 825A 3C 23       >                db      "<#"
 515+ 825C             >len_NFA         defl    $ - temp_NFA
 515+ 825C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 825A             >
 515+ 825A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 825B 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 515+ 825D             >                org     $-1                 // alter last byte of Name just above to set
 515+ 825C A3          >                db      {b $} | END_BIT     // msb as name end
 515+ 825D             >
 515+ 825D 3C 82       >                dw      last_NFA            // Link to previous definition Name
 515+ 825F             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 825F CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 515+ 8262             >
 515+ 8262             >
 515+ 8262             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 8262             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 8262             >
 515+ 8262             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 516+ 8262 B8 73 F1 6D                  dw      PAD, HLD, STORE
 516+ 8266 0B 6B
 517+ 8268 3C 69                        dw      EXIT
 518+ 826A
 519+ 826A              //  ______________________________________________________________________
 520+ 826A              //
 521+ 826A              // #>           --
 522+ 826A                              Colon_Def DASH_END, "#>", is_normal
 522+ 826A             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 522+ 826A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 826A             >
 522+ 826A             >                // dummy db directives used to calculate length of namec
 522+ 826A 23 3E       >                db      "#>"
 522+ 826C             >len_NFA         defl    $ - temp_NFA
 522+ 826C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 826A             >
 522+ 826A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 826B 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 522+ 826D             >                org     $-1                 // alter last byte of Name just above to set
 522+ 826C BE          >                db      {b $} | END_BIT     // msb as name end
 522+ 826D             >
 522+ 826D 5A 82       >                dw      last_NFA            // Link to previous definition Name
 522+ 826F             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 826F CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 522+ 8272             >
 522+ 8272             >
 522+ 8272             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 8272             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 8272             >
 522+ 8272             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 8272 B8 6A                        dw      TWO_DROP
 524+ 8274 F1 6D 00 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 524+ 8278 B8 73 44 6A
 524+ 827C AD 6E
 525+ 827E 3C 69                        dw      EXIT
 526+ 8280
 527+ 8280              //  ______________________________________________________________________
 528+ 8280              //
 529+ 8280              // sign         n d -- d
 530+ 8280                              Colon_Def SIGN, "SIGN", is_normal
 530+ 8280             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 530+ 8280             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 530+ 8280             >
 530+ 8280             >                // dummy db directives used to calculate length of namec
 530+ 8280 53 49 47 4E >                db      "SIGN"
 530+ 8284             >len_NFA         defl    $ - temp_NFA
 530+ 8284             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 530+ 8280             >
 530+ 8280 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 530+ 8281 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 530+ 8285             >                org     $-1                 // alter last byte of Name just above to set
 530+ 8284 CE          >                db      {b $} | END_BIT     // msb as name end
 530+ 8285             >
 530+ 8285 6A 82       >                dw      last_NFA            // Link to previous definition Name
 530+ 8287             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 530+ 8287 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 530+ 828A             >
 530+ 828A             >
 530+ 828A             >                endif           ; ok        // for other definitions it "points" the correct handler
 530+ 828A             >                // Use of "; ok" to suppress "warning[fwdref]"
 530+ 828A             >
 530+ 828A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 828A 8A 6A 93 69                  dw      ROT, ZLESS
 532+ 828E 1C 64                        dw      ZBRANCH
 533+ 8290 08 00                        dw      Sign_Endif - $
 534+ 8292 A5 63 2D 00                  dw          LIT, 45, HOLD
 534+ 8296 A1 73
 535+ 8298              Sign_Endif:
 536+ 8298 3C 69                        dw      EXIT
 537+ 829A
 538+ 829A              //  ______________________________________________________________________
 539+ 829A              //
 540+ 829A              // #           d1 -- d2
 541+ 829A                              Colon_Def DASH, "#", is_normal
 541+ 829A             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 541+ 829A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 541+ 829A             >
 541+ 829A             >                // dummy db directives used to calculate length of namec
 541+ 829A 23          >                db      "#"
 541+ 829B             >len_NFA         defl    $ - temp_NFA
 541+ 829B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 541+ 829A             >
 541+ 829A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 541+ 829B 23          >                db      "#"               // name string in 7-bit ascii, but
 541+ 829C             >                org     $-1                 // alter last byte of Name just above to set
 541+ 829B A3          >                db      {b $} | END_BIT     // msb as name end
 541+ 829C             >
 541+ 829C 80 82       >                dw      last_NFA            // Link to previous definition Name
 541+ 829E             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 541+ 829E CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 541+ 82A1             >
 541+ 82A1             >
 541+ 82A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 541+ 82A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 541+ 82A1             >
 541+ 82A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 542+ 82A1 C0 6D 00 6B                  dw      BASE, FETCH
 543+ 82A5
 544+ 82A5 4D 69                        dw      TO_R                    // >r           ( ud1 )
 545+ 82A7 4E 6C 71 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 545+ 82AB A3 68
 546+ 82AD 5F 69 74 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 546+ 82B1 4D 69
 547+ 82B3 A3 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 548+ 82B5 5F 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 549+ 82B7
 550+ 82B7 8A 6A                        dw      ROT
 551+ 82B9 A5 63 09 00                  dw      LIT, 9, OVER, LESS
 551+ 82BD 44 6A D9 6E
 552+ 82C1 1C 64                        dw      ZBRANCH
 553+ 82C3 08 00                        dw      Dash_Endif - $
 554+ 82C5 A5 63 07 00                  dw          LIT, 7, PLUS
 554+ 82C9 B7 69
 555+ 82CB              Dash_Endif:
 556+ 82CB
 557+ 82CB A5 63 30 00                  dw      LIT, 48, PLUS, HOLD
 557+ 82CF B7 69 A1 73
 558+ 82D3 3C 69                        dw      EXIT
 559+ 82D5
 560+ 82D5              //  ______________________________________________________________________
 561+ 82D5              //
 562+ 82D5              // #s           d1 -- d2
 563+ 82D5                              Colon_Def DASHES, "#S", is_normal
 563+ 82D5             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 563+ 82D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 563+ 82D5             >
 563+ 82D5             >                // dummy db directives used to calculate length of namec
 563+ 82D5 23 53       >                db      "#S"
 563+ 82D7             >len_NFA         defl    $ - temp_NFA
 563+ 82D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 563+ 82D5             >
 563+ 82D5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 563+ 82D6 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 563+ 82D8             >                org     $-1                 // alter last byte of Name just above to set
 563+ 82D7 D3          >                db      {b $} | END_BIT     // msb as name end
 563+ 82D8             >
 563+ 82D8 9A 82       >                dw      last_NFA            // Link to previous definition Name
 563+ 82DA             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 563+ 82DA CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 563+ 82DD             >
 563+ 82DD             >
 563+ 82DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 563+ 82DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 563+ 82DD             >
 563+ 82DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 564+ 82DD              Dashes_Begin:
 565+ 82DD 9E 82 D4 6A                  dw      DASH, TWO_DUP
 566+ 82E1 EA 68 79 69                  dw          OR_OP, ZEQUAL
 567+ 82E5 1C 64                        dw      ZBRANCH
 568+ 82E7 F6 FF                        dw      Dashes_Begin - $
 569+ 82E9 3C 69                        dw      EXIT
 570+ 82EB
 571+ 82EB              //  ______________________________________________________________________
 572+ 82EB              //
 573+ 82EB              // d.r          d n --
 574+ 82EB                              Colon_Def D_DOT_R, "D.R", is_normal
 574+ 82EB             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 574+ 82EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 574+ 82EB             >
 574+ 82EB             >                // dummy db directives used to calculate length of namec
 574+ 82EB 44 2E 52    >                db      "D.R"
 574+ 82EE             >len_NFA         defl    $ - temp_NFA
 574+ 82EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 574+ 82EB             >
 574+ 82EB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 574+ 82EC 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 574+ 82EF             >                org     $-1                 // alter last byte of Name just above to set
 574+ 82EE D2          >                db      {b $} | END_BIT     // msb as name end
 574+ 82EF             >
 574+ 82EF D5 82       >                dw      last_NFA            // Link to previous definition Name
 574+ 82F1             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 574+ 82F1 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 574+ 82F4             >
 574+ 82F4             >
 574+ 82F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 574+ 82F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 574+ 82F4             >
 574+ 82F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 575+ 82F4 4D 69                        dw      TO_R
 576+ 82F6 66 6A 7F 79                  dw      TUCK, DABS
 577+ 82FA 5F 82 DA 82                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 577+ 82FE 87 82 6F 82
 578+ 8302 5F 69                        dw      R_TO
 579+ 8304 44 6A AD 6E                  dw      OVER, SUBTRACT, SPACES, TYPE
 579+ 8308 45 82 00 72
 580+ 830C 3C 69                        dw      EXIT
 581+ 830E
 582+ 830E              //  ______________________________________________________________________
 583+ 830E              //
 584+ 830E              // .r           n1 n2 --
 585+ 830E                              Colon_Def DOT_R, ".R", is_normal
 585+ 830E             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 585+ 830E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 585+ 830E             >
 585+ 830E             >                // dummy db directives used to calculate length of namec
 585+ 830E 2E 52       >                db      ".R"
 585+ 8310             >len_NFA         defl    $ - temp_NFA
 585+ 8310             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 585+ 830E             >
 585+ 830E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 585+ 830F 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 585+ 8311             >                org     $-1                 // alter last byte of Name just above to set
 585+ 8310 D2          >                db      {b $} | END_BIT     // msb as name end
 585+ 8311             >
 585+ 8311 EB 82       >                dw      last_NFA            // Link to previous definition Name
 585+ 8313             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 585+ 8313 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 585+ 8316             >
 585+ 8316             >
 585+ 8316             >                endif           ; ok        // for other definitions it "points" the correct handler
 585+ 8316             >                // Use of "; ok" to suppress "warning[fwdref]"
 585+ 8316             >
 585+ 8316             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 586+ 8316 4D 69                        dw      TO_R
 587+ 8318 9B 6E 5F 69                  dw      S_TO_D, R_TO
 588+ 831C F1 82                        dw      D_DOT_R
 589+ 831E 3C 69                        dw      EXIT
 590+ 8320
 591+ 8320              //  ______________________________________________________________________
 592+ 8320              //
 593+ 8320              // d.           d --
 594+ 8320                              Colon_Def D_DOT, "D.", is_normal
 594+ 8320             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 594+ 8320             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ 8320             >
 594+ 8320             >                // dummy db directives used to calculate length of namec
 594+ 8320 44 2E       >                db      "D."
 594+ 8322             >len_NFA         defl    $ - temp_NFA
 594+ 8322             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ 8320             >
 594+ 8320 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ 8321 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 594+ 8323             >                org     $-1                 // alter last byte of Name just above to set
 594+ 8322 AE          >                db      {b $} | END_BIT     // msb as name end
 594+ 8323             >
 594+ 8323 0E 83       >                dw      last_NFA            // Link to previous definition Name
 594+ 8325             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 8325 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 8328             >
 594+ 8328             >
 594+ 8328             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 8328             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 8328             >
 594+ 8328             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 8328 4E 6C F1 82                  dw      ZERO, D_DOT_R, SPACE
 595+ 832C 63 6F
 596+ 832E 3C 69                        dw      EXIT
 597+ 8330
 598+ 8330              //  ______________________________________________________________________
 599+ 8330              //
 600+ 8330              // .            n --
 601+ 8330                              Colon_Def DOT, ".", is_normal
 601+ 8330             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 601+ 8330             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ 8330             >
 601+ 8330             >                // dummy db directives used to calculate length of namec
 601+ 8330 2E          >                db      "."
 601+ 8331             >len_NFA         defl    $ - temp_NFA
 601+ 8331             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ 8330             >
 601+ 8330 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ 8331 2E          >                db      "."               // name string in 7-bit ascii, but
 601+ 8332             >                org     $-1                 // alter last byte of Name just above to set
 601+ 8331 AE          >                db      {b $} | END_BIT     // msb as name end
 601+ 8332             >
 601+ 8332 20 83       >                dw      last_NFA            // Link to previous definition Name
 601+ 8334             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 8334 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 601+ 8337             >
 601+ 8337             >
 601+ 8337             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 8337             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 8337             >
 601+ 8337             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 8337 9B 6E 25 83                  dw      S_TO_D, D_DOT
 603+ 833B 3C 69                        dw      EXIT
 604+ 833D
 605+ 833D              //  ______________________________________________________________________
 606+ 833D              //
 607+ 833D              // ?            n --
 608+ 833D                              Colon_Def QUESTION, "?", is_normal
 608+ 833D             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 608+ 833D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 608+ 833D             >
 608+ 833D             >                // dummy db directives used to calculate length of namec
 608+ 833D 3F          >                db      "?"
 608+ 833E             >len_NFA         defl    $ - temp_NFA
 608+ 833E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 608+ 833D             >
 608+ 833D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 608+ 833E 3F          >                db      "?"               // name string in 7-bit ascii, but
 608+ 833F             >                org     $-1                 // alter last byte of Name just above to set
 608+ 833E BF          >                db      {b $} | END_BIT     // msb as name end
 608+ 833F             >
 608+ 833F 30 83       >                dw      last_NFA            // Link to previous definition Name
 608+ 8341             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 608+ 8341 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 608+ 8344             >
 608+ 8344             >
 608+ 8344             >                endif           ; ok        // for other definitions it "points" the correct handler
 608+ 8344             >                // Use of "; ok" to suppress "warning[fwdref]"
 608+ 8344             >
 608+ 8344             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 609+ 8344 00 6B 34 83                  dw      FETCH, DOT
 610+ 8348 3C 69                        dw      EXIT
 611+ 834A
 612+ 834A              //  ______________________________________________________________________
 613+ 834A              //
 614+ 834A              // u.           u --
 615+ 834A                              Colon_Def U_DOT, "U.", is_normal
 615+ 834A             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 615+ 834A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 615+ 834A             >
 615+ 834A             >                // dummy db directives used to calculate length of namec
 615+ 834A 55 2E       >                db      "U."
 615+ 834C             >len_NFA         defl    $ - temp_NFA
 615+ 834C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 615+ 834A             >
 615+ 834A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 615+ 834B 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 615+ 834D             >                org     $-1                 // alter last byte of Name just above to set
 615+ 834C AE          >                db      {b $} | END_BIT     // msb as name end
 615+ 834D             >
 615+ 834D 3D 83       >                dw      last_NFA            // Link to previous definition Name
 615+ 834F             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 615+ 834F CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 615+ 8352             >
 615+ 8352             >
 615+ 8352             >                endif           ; ok        // for other definitions it "points" the correct handler
 615+ 8352             >                // Use of "; ok" to suppress "warning[fwdref]"
 615+ 8352             >
 615+ 8352             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 616+ 8352 4E 6C 25 83                  dw      ZERO, D_DOT
 617+ 8356 3C 69                        dw      EXIT
 618+ 8358
 619+ 8358              //  ______________________________________________________________________
 620+ 8358              //
 621+ 8358              // words        --
 622+ 8358                              Colon_Def WORDS, "WORDS", is_normal
 622+ 8358             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 622+ 8358             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 622+ 8358             >
 622+ 8358             >                // dummy db directives used to calculate length of namec
 622+ 8358 57 4F 52 44 >                db      "WORDS"
 622+ 835C 53          >
 622+ 835D             >len_NFA         defl    $ - temp_NFA
 622+ 835D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 622+ 8358             >
 622+ 8358 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 622+ 8359 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 622+ 835D 53          >
 622+ 835E             >                org     $-1                 // alter last byte of Name just above to set
 622+ 835D D3          >                db      {b $} | END_BIT     // msb as name end
 622+ 835E             >
 622+ 835E 4A 83       >                dw      last_NFA            // Link to previous definition Name
 622+ 8360             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 622+ 8360 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 622+ 8363             >
 622+ 8363             >
 622+ 8363             >                endif           ; ok        // for other definitions it "points" the correct handler
 622+ 8363             >                // Use of "; ok" to suppress "warning[fwdref]"
 622+ 8363             >
 622+ 8363             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 623+ 8363 A5 63 80 00                  dw      LIT, 128, OUT, STORE
 623+ 8367 76 6D 0B 6B
 624+ 836B 9B 6D 00 6B                  dw      CONTEXT, FETCH, FETCH
 624+ 836F 00 6B
 625+ 8371              Words_Begin:
 626+ 8371 7F 6A 17 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 626+ 8375 A5 63 1F 00
 626+ 8379 DA 68
 627+ 837B 76 6D 00 6B                  dw          OUT, FETCH, PLUS
 627+ 837F B7 69
 628+ 8381 88 6C D9 6E                  dw          CL, LESS, ZEQUAL
 628+ 8385 79 69
 629+ 8387 1C 64                        dw          ZBRANCH
 630+ 8389 0A 00                        dw          Words_Endif - $
 631+ 838B FC 65 4E 6C                  dw              CR, ZERO, OUT, STORE
 631+ 838F 76 6D 0B 6B
 632+ 8393              Words_Endif:
 633+ 8393 7F 6A FC 75                  dw          DUP, ID_DOT
 634+ 8397 E1 6F AC 6F                  dw          PFA, LFA, FETCH
 634+ 839B 00 6B
 635+ 839D 7F 6A 79 69                  dw          DUP, ZEQUAL
 636+ 83A1 0B 67 EA 68                  dw          QTERMINAL, OR_OP
 637+ 83A5 1C 64                        dw      ZBRANCH
 638+ 83A7 CA FF                        dw      Words_Begin - $
 639+ 83A9 52 6A                        dw      DROP
 640+ 83AB 3C 69                        dw      EXIT
 641+ 83AD
 642+ 83AD              //  ______________________________________________________________________
 643+ 83AD              //
 644+ 83AD              // list         n --
 645+ 83AD                              Colon_Def LIST, "LIST", is_normal
 645+ 83AD             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 645+ 83AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 645+ 83AD             >
 645+ 83AD             >                // dummy db directives used to calculate length of namec
 645+ 83AD 4C 49 53 54 >                db      "LIST"
 645+ 83B1             >len_NFA         defl    $ - temp_NFA
 645+ 83B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 645+ 83AD             >
 645+ 83AD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 645+ 83AE 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 645+ 83B2             >                org     $-1                 // alter last byte of Name just above to set
 645+ 83B1 D4          >                db      {b $} | END_BIT     // msb as name end
 645+ 83B2             >
 645+ 83B2 58 83       >                dw      last_NFA            // Link to previous definition Name
 645+ 83B4             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 645+ 83B4 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 645+ 83B7             >
 645+ 83B7             >
 645+ 83B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 645+ 83B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 645+ 83B7             >
 645+ 83B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 646+ 83B7 59 71 FC 65                  dw      DECIMAL, CR
 647+ 83BB 7F 6A 80 6D                  dw      DUP, SCR, STORE
 647+ 83BF 0B 6B
 648+ 83C1 1C 74                        dw      C_DOT_QUOTE
 649+ 83C3 05 53 63 72                  db      5, "Scr# "
 649+ 83C7 23 20
 650+ 83C9 34 83                        dw      DOT
 651+ 83CB AF 6C 4E 6C                  dw      LSCR, ZERO, C_DO
 651+ 83CF 70 64
 652+ 83D1              List_Loop:
 653+ 83D1 FC 65                        dw          CR
 654+ 83D3 78 64 69 6C                  dw          I, THREE
 655+ 83D7 13 83 63 6F                  dw          DOT_R, SPACE
 656+ 83DB 78 64 80 6D                  dw          I, SCR, FETCH, DOT_LINE
 656+ 83DF 00 6B BB 7A
 657+ 83E3 0B 67                        dw          QTERMINAL
 658+ 83E5 1C 64                        dw          ZBRANCH
 659+ 83E7 06 00                        dw          List_Endif - $
 660+ 83E9 2F 64                        dw              C_LEAVE
 661+ 83EB 06 00                        dw              List_Leave - $
 662+ 83ED              List_Endif:
 663+ 83ED F8 63                        dw      C_LOOP
 664+ 83EF E2 FF                        dw      List_Loop - $
 665+ 83F1              List_Leave:
 666+ 83F1 FC 65                        dw      CR
 667+ 83F3 3C 69                        dw      EXIT
 668+ 83F5
 669+ 83F5              //  ______________________________________________________________________
 670+ 83F5              //
 671+ 83F5              // index        n1 n2 --
 672+ 83F5                              Colon_Def INDEX, "INDEX", is_normal
 672+ 83F5             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 672+ 83F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 672+ 83F5             >
 672+ 83F5             >                // dummy db directives used to calculate length of namec
 672+ 83F5 49 4E 44 45 >                db      "INDEX"
 672+ 83F9 58          >
 672+ 83FA             >len_NFA         defl    $ - temp_NFA
 672+ 83FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 672+ 83F5             >
 672+ 83F5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 672+ 83F6 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 672+ 83FA 58          >
 672+ 83FB             >                org     $-1                 // alter last byte of Name just above to set
 672+ 83FA D8          >                db      {b $} | END_BIT     // msb as name end
 672+ 83FB             >
 672+ 83FB AD 83       >                dw      last_NFA            // Link to previous definition Name
 672+ 83FD             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 672+ 83FD CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 672+ 8400             >
 672+ 8400             >
 672+ 8400             >                endif           ; ok        // for other definitions it "points" the correct handler
 672+ 8400             >                // Use of "; ok" to suppress "warning[fwdref]"
 672+ 8400             >
 672+ 8400             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 673+ 8400 D4 69 74 6A                  dw      ONE_PLUS, SWAP, C_DO
 673+ 8404 70 64
 674+ 8406              Index_Loop:
 675+ 8406 FC 65 78 64                  dw          CR, I, THREE
 675+ 840A 69 6C
 676+ 840C 13 83 63 6F                  dw          DOT_R, SPACE
 677+ 8410 4E 6C 78 64                  dw          ZERO, I, DOT_LINE
 677+ 8414 BB 7A
 678+ 8416 0B 67                        dw          QTERMINAL
 679+ 8418 1C 64                        dw          ZBRANCH
 680+ 841A 06 00                        dw          Index_Endif - $
 681+ 841C 2F 64                        dw              C_LEAVE
 682+ 841E 06 00                        dw              Index_Leave - $
 683+ 8420              Index_Endif:
 684+ 8420 F8 63                        dw      C_LOOP
 685+ 8422 E4 FF                        dw      Index_Loop - $
 686+ 8424              Index_Leave:
 687+ 8424 FC 65                        dw      CR
 688+ 8426 3C 69                        dw      EXIT
 689+ 8428
 690+ 8428              //  ______________________________________________________________________
 691+ 8428              //
 692+ 8428              // cls          --
 693+ 8428                              Colon_Def CLS, "CLS", is_normal
 693+ 8428             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 693+ 8428             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 693+ 8428             >
 693+ 8428             >                // dummy db directives used to calculate length of namec
 693+ 8428 43 4C 53    >                db      "CLS"
 693+ 842B             >len_NFA         defl    $ - temp_NFA
 693+ 842B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 693+ 8428             >
 693+ 8428 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 693+ 8429 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 693+ 842C             >                org     $-1                 // alter last byte of Name just above to set
 693+ 842B D3          >                db      {b $} | END_BIT     // msb as name end
 693+ 842C             >
 693+ 842C F5 83       >                dw      last_NFA            // Link to previous definition Name
 693+ 842E             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 693+ 842E CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 693+ 8431             >
 693+ 8431             >
 693+ 8431             >                endif           ; ok        // for other definitions it "points" the correct handler
 693+ 8431             >                // Use of "; ok" to suppress "warning[fwdref]"
 693+ 8431             >
 693+ 8431             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 694+ 8431 A5 63 0E 00                  dw      LIT, $0E, EMITC
 694+ 8435 E7 65
 695+ 8437 3C 69                        dw      EXIT
 696+ 8439
 697+ 8439              //  ______________________________________________________________________
 698+ 8439              //
 699+ 8439              // splash       --
 700+ 8439                              Colon_Def SPLASH, "SPLASH", is_normal
 700+ 8439             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 700+ 8439             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 700+ 8439             >
 700+ 8439             >                // dummy db directives used to calculate length of namec
 700+ 8439 53 50 4C 41 >                db      "SPLASH"
 700+ 843D 53 48       >
 700+ 843F             >len_NFA         defl    $ - temp_NFA
 700+ 843F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 700+ 8439             >
 700+ 8439 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 700+ 843A 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 700+ 843E 53 48       >
 700+ 8440             >                org     $-1                 // alter last byte of Name just above to set
 700+ 843F C8          >                db      {b $} | END_BIT     // msb as name end
 700+ 8440             >
 700+ 8440 28 84       >                dw      last_NFA            // Link to previous definition Name
 700+ 8442             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 700+ 8442 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 700+ 8445             >
 700+ 8445             >
 700+ 8445             >                endif           ; ok        // for other definitions it "points" the correct handler
 700+ 8445             >                // Use of "; ok" to suppress "warning[fwdref]"
 700+ 8445             >
 700+ 8445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 701+ 8445 2E 84                        dw      CLS
 702+ 8447 1C 74                        dw      C_DOT_QUOTE
 703+ 8449 58                           db      88
 704+ 844A 76 2D 46 6F                  db      "v-Forth 1.52 NextZXOS version", 13    // 29
 704+ 844E 72 74 68 20
 704+ 8452 31 2E 35 32
 704+ 8456 20 4E 65 78
 704+ 845A 74 5A 58 4F
 704+ 845E 53 20 76 65
 704+ 8462 72 73 69 6F
 704+ 8466 6E 0D
 705+ 8468 44 69 72 65                  db      "Direct Threaded - build 20220626", 13  // 31
 705+ 846C 63 74 20 54
 705+ 8470 68 72 65 61
 705+ 8474 64 65 64 20
 705+ 8478 2D 20 62 75
 705+ 847C 69 6C 64 20
 705+ 8480 32 30 32 32
 705+ 8484 30 36 32 36
 705+ 8488 0D
 706+ 8489 31 39 39 30                  db      "1990-2022 Matteo Vitturi", 13        // 25
 706+ 848D 2D 32 30 32
 706+ 8491 32 20 4D 61
 706+ 8495 74 74 65 6F
 706+ 8499 20 56 69 74
 706+ 849D 74 75 72 69
 706+ 84A1 0D
 707+ 84A2 3C 69                        dw      EXIT
 708+ 84A4
 709+ 84A4              //  ______________________________________________________________________
 710+ 84A4              //
 711+ 84A4              // video        --
 712+ 84A4                              Colon_Def VIDEO, "VIDEO", is_normal
 712+ 84A4             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 712+ 84A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 712+ 84A4             >
 712+ 84A4             >                // dummy db directives used to calculate length of namec
 712+ 84A4 56 49 44 45 >                db      "VIDEO"
 712+ 84A8 4F          >
 712+ 84A9             >len_NFA         defl    $ - temp_NFA
 712+ 84A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 712+ 84A4             >
 712+ 84A4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 712+ 84A5 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 712+ 84A9 4F          >
 712+ 84AA             >                org     $-1                 // alter last byte of Name just above to set
 712+ 84A9 CF          >                db      {b $} | END_BIT     // msb as name end
 712+ 84AA             >
 712+ 84AA 39 84       >                dw      last_NFA            // Link to previous definition Name
 712+ 84AC             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 712+ 84AC CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 712+ 84AF             >
 712+ 84AF             >
 712+ 84AF             >                endif           ; ok        // for other definitions it "points" the correct handler
 712+ 84AF             >                // Use of "; ok" to suppress "warning[fwdref]"
 712+ 84AF             >
 712+ 84AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 713+ 84AF 60 6C 7F 6A                  dw      TWO, DUP, DEVICE, STORE
 713+ 84B3 05 7B 0B 6B
 714+ 84B7 48 67                        dw      SELECT
 715+ 84B9 3C 69                        dw      EXIT
 716+ 84BB
 717+ 84BB              //  ______________________________________________________________________
 718+ 84BB              //
 719+ 84BB              // accept-      a n1 -- n2
 720+ 84BB                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 720+ 84BB             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 720+ 84BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 720+ 84BB             >
 720+ 84BB             >                // dummy db directives used to calculate length of namec
 720+ 84BB 41 43 43 45 >                db      "ACCEPT-"
 720+ 84BF 50 54 2D    >
 720+ 84C2             >len_NFA         defl    $ - temp_NFA
 720+ 84C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 720+ 84BB             >
 720+ 84BB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 720+ 84BC 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 720+ 84C0 50 54 2D    >
 720+ 84C3             >                org     $-1                 // alter last byte of Name just above to set
 720+ 84C2 AD          >                db      {b $} | END_BIT     // msb as name end
 720+ 84C3             >
 720+ 84C3 A4 84       >                dw      last_NFA            // Link to previous definition Name
 720+ 84C5             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 720+ 84C5 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 720+ 84C8             >
 720+ 84C8             >
 720+ 84C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 720+ 84C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 720+ 84C8             >
 720+ 84C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 721+ 84C8 4D 69                        dw      TO_R
 722+ 84CA 4E 6C                        dw      ZERO
 723+ 84CC 74 6A                        dw      SWAP
 724+ 84CE 7F 6A                        dw      DUP
 725+ 84D0 5F 69                        dw      R_TO
 726+ 84D2 B7 69                        dw      PLUS
 727+ 84D4 74 6A                        dw      SWAP
 728+ 84D6 70 64                        dw      C_DO
 729+ 84D8              AcceptN_Loop:
 730+ 84D8 3C 7B                        dw          MMU7_FETCH
 731+ 84DA 25 67                        dw          INKEY
 732+ 84DC 74 6A 4F 7B                  dw          SWAP, MMU7_STORE
 733+ 84E0 7F 6A 79 69                  dw          DUP, ZEQUAL
 734+ 84E4 1C 64                        dw          ZBRANCH
 735+ 84E6 06 00                        dw          AcceptN_Endif_1 - $
 736+ 84E8 AC 84 4B 78                  dw              VIDEO, QUIT
 737+ 84EC              AcceptN_Endif_1:
 738+ 84EC 7F 6A A5 63                  dw          DUP, LIT, 13, EQUALS
 738+ 84F0 0D 00 B9 6E
 739+ 84F4 1C 64                        dw          ZBRANCH
 740+ 84F6 06 00                        dw          AcceptN_Endif_2 - $
 741+ 84F8 52 6A 4E 6C                  dw              DROP, ZERO
 742+ 84FC              AcceptN_Endif_2:
 743+ 84FC 7F 6A A5 63                  dw          DUP, LIT, 10, EQUALS
 743+ 8500 0A 00 B9 6E
 744+ 8504 1C 64                        dw          ZBRANCH
 745+ 8506 06 00                        dw          AcceptN_Endif_3 - $
 746+ 8508 52 6A 4E 6C                  dw              DROP, ZERO
 747+ 850C              AcceptN_Endif_3:
 748+ 850C 78 64 23 6B                  dw          I, CSTORE, ONE_PLUS
 748+ 8510 D4 69
 749+ 8512
 750+ 8512 78 64 17 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 750+ 8516 79 69
 751+ 8518 1C 64                        dw          ZBRANCH
 752+ 851A 06 00                        dw              AcceptN_Endif_4 - $
 753+ 851C 2F 64                        dw                  C_LEAVE     //              leave
 754+ 851E 06 00                        dw                  AcceptN_Leave - $
 755+ 8520              AcceptN_Endif_4:                                 //      endif
 756+ 8520
 757+ 8520 F8 63                        dw      C_LOOP
 758+ 8522 B6 FF                        dw      AcceptN_Loop -$
 759+ 8524              AcceptN_Leave:
 760+ 8524 3C 69                        dw      EXIT
 761+ 8526
 762+ 8526              //  ______________________________________________________________________
 763+ 8526              //
 764+ 8526              // load-        n --
 765+ 8526              // Provided that a stream n is OPEN# via the standart BASIC
 766+ 8526              // it accepts text from stream #n to the normal INTERPRET
 767+ 8526              // up to now, text-file must end with QUIT
 768+ 8526                              Colon_Def LOAD_N, "LOAD-", is_normal
 768+ 8526             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 768+ 8526             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 768+ 8526             >
 768+ 8526             >                // dummy db directives used to calculate length of namec
 768+ 8526 4C 4F 41 44 >                db      "LOAD-"
 768+ 852A 2D          >
 768+ 852B             >len_NFA         defl    $ - temp_NFA
 768+ 852B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 768+ 8526             >
 768+ 8526 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 768+ 8527 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 768+ 852B 2D          >
 768+ 852C             >                org     $-1                 // alter last byte of Name just above to set
 768+ 852B AD          >                db      {b $} | END_BIT     // msb as name end
 768+ 852C             >
 768+ 852C BB 84       >                dw      last_NFA            // Link to previous definition Name
 768+ 852E             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 768+ 852E CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 768+ 8531             >
 768+ 8531             >
 768+ 8531             >                endif           ; ok        // for other definitions it "points" the correct handler
 768+ 8531             >                // Use of "; ok" to suppress "warning[fwdref]"
 768+ 8531             >
 768+ 8531             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 769+ 8531 2B 6E 0B 6B                  dw      SOURCE_ID, STORE
 770+ 8535              Load_N_Begin:
 771+ 8535 EC 6C 00 6B                  dw          TIB, FETCH
 772+ 8539 7F 6A A5 63                  dw          DUP, LIT, 80
 772+ 853D 50 00
 773+ 853F D4 6A 91 73                  dw          TWO_DUP, BLANKS
 774+ 8543 2B 6E 00 6B                  dw          SOURCE_ID, FETCH
 775+ 8547 6F 79 7F 6A                  dw          ABS_OP, DUP, DEVICE, STORE
 775+ 854B 05 7B 0B 6B
 776+ 854F 48 67                        dw          SELECT
 777+ 8551 C5 84                        dw          ACCEPT_N
 778+ 8553 AC 84                        dw          VIDEO
 779+ 8555 B8 6A                        dw          TWO_DROP
 780+ 8557 4E 6C 62 6D                  dw          ZERO, BLK, STORE
 780+ 855B 0B 6B
 781+ 855D 4E 6C 6C 6D                  dw          ZERO, TO_IN, STORE
 781+ 8561 0B 6B
 782+ 8563 86 77                        dw          INTERPRET
 783+ 8565 0B 67                        dw          QTERMINAL
 784+ 8567 1C 64                        dw      ZBRANCH
 785+ 8569 CC FF                        dw      Load_N_Begin - $
 786+ 856B 3C 69                        dw      EXIT
 787+ 856D
 788+ 856D              //  ______________________________________________________________________
 789+ 856D              //
 790+ 856D              // load         n --
 791+ 856D              // if n is positive, it loads screen #n (as usual)
 792+ 856D              // if n is negative, it connects stream #n to the normal INTERPRET
 793+ 856D              // this second way is useful if you want to load any kind of file
 794+ 856D              // provied that it is OPEN# the usual BASIC way.
 795+ 856D                              Colon_Def LOAD, "LOAD", is_normal
 795+ 856D             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 795+ 856D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 795+ 856D             >
 795+ 856D             >                // dummy db directives used to calculate length of namec
 795+ 856D 4C 4F 41 44 >                db      "LOAD"
 795+ 8571             >len_NFA         defl    $ - temp_NFA
 795+ 8571             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 795+ 856D             >
 795+ 856D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 795+ 856E 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 795+ 8572             >                org     $-1                 // alter last byte of Name just above to set
 795+ 8571 C4          >                db      {b $} | END_BIT     // msb as name end
 795+ 8572             >
 795+ 8572 26 85       >                dw      last_NFA            // Link to previous definition Name
 795+ 8574             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 795+ 8574 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 795+ 8577             >
 795+ 8577             >
 795+ 8577             >                endif           ; ok        // for other definitions it "points" the correct handler
 795+ 8577             >                // Use of "; ok" to suppress "warning[fwdref]"
 795+ 8577             >
 795+ 8577             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 796+ 8577 7F 6A 93 69                  dw      DUP, ZLESS
 797+ 857B 1C 64                        dw      ZBRANCH
 798+ 857D 08 00                        dw      Load_Else - $
 799+ 857F 2E 85                        dw          LOAD_N
 800+ 8581 07 64                        dw      BRANCH
 801+ 8583 04 00                        dw      Load_Endif - $
 802+ 8585              Load_Else:
 803+ 8585 35 81                        dw          LOAD_P
 804+ 8587              Load_Endif:
 805+ 8587 3C 69                        dw      EXIT
 806+ 8589
 807+ 8589
 808+ 8589              //  ______________________________________________________________________
 809+ 8589              //
 810+ 8589              // autoexec     --
 811+ 8589              // this word is called the first time the Forth system boot to
 812+ 8589              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 813+ 8589                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 813+ 8589             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 813+ 8589             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 813+ 8589             >
 813+ 8589             >                // dummy db directives used to calculate length of namec
 813+ 8589 41 55 54 4F >                db      "AUTOEXEC"
 813+ 858D 45 58 45 43 >
 813+ 8591             >len_NFA         defl    $ - temp_NFA
 813+ 8591             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 813+ 8589             >
 813+ 8589 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 813+ 858A 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 813+ 858E 45 58 45 43 >
 813+ 8592             >                org     $-1                 // alter last byte of Name just above to set
 813+ 8591 C3          >                db      {b $} | END_BIT     // msb as name end
 813+ 8592             >
 813+ 8592 6D 85       >                dw      last_NFA            // Link to previous definition Name
 813+ 8594             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 813+ 8594 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 813+ 8597             >
 813+ 8597             >
 813+ 8597             >                endif           ; ok        // for other definitions it "points" the correct handler
 813+ 8597             >                // Use of "; ok" to suppress "warning[fwdref]"
 813+ 8597             >
 813+ 8597             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 814+ 8597 A5 63 0B 00                  dw      LIT, 11
 815+ 859B A5 63 FC 6B                  dw      LIT, NOOP
 816+ 859F A5 63 9C 78                  dw      LIT, Autoexec_Ptr
 817+ 85A3 0B 6B                        dw      STORE
 818+ 85A5 74 85                        dw      LOAD
 819+ 85A7 4B 78                        dw      QUIT
 820+ 85A9 3C 69                        dw      EXIT
 821+ 85AB
 822+ 85AB
 823+ 85AB              //  ______________________________________________________________________
 824+ 85AB              //
 825+ 85AB              // bye     --
 826+ 85AB              //
 827+ 85AB                              Colon_Def BYE, "BYE", is_normal
 827+ 85AB             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 827+ 85AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 827+ 85AB             >
 827+ 85AB             >                // dummy db directives used to calculate length of namec
 827+ 85AB 42 59 45    >                db      "BYE"
 827+ 85AE             >len_NFA         defl    $ - temp_NFA
 827+ 85AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 827+ 85AB             >
 827+ 85AB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 827+ 85AC 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 827+ 85AF             >                org     $-1                 // alter last byte of Name just above to set
 827+ 85AE C5          >                db      {b $} | END_BIT     // msb as name end
 827+ 85AF             >
 827+ 85AF 89 85       >                dw      last_NFA            // Link to previous definition Name
 827+ 85B1             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 827+ 85B1 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 827+ 85B4             >
 827+ 85B4             >
 827+ 85B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 827+ 85B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 827+ 85B4             >
 827+ 85B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 828+ 85B4 C4 7D                        dw      FLUSH
 829+ 85B6 F3 7C                        dw      EMPTY_BUFFERS
 830+ 85B8 8D 7B 00 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 830+ 85BC 8A 67 52 6A
 831+ 85C0 4E 6C BE 6C                  dw      ZERO, PLUS_ORIGIN
 832+ 85C4 34 79                        dw      BASIC
 833+ 85C6
 834+ 85C6              //  ______________________________________________________________________
 835+ 85C6              //
 836+ 85C6              // invv     --
 837+ 85C6              //
 838+ 85C6              //              Colon_Def INVV, "INVV", is_normal
 839+ 85C6              //              dw      LIT, 20, EMITC, ONE, EMITC
 840+ 85C6              //              dw      EXIT
 841+ 85C6
 842+ 85C6              //  ______________________________________________________________________
 843+ 85C6              //
 844+ 85C6              // truv     --
 845+ 85C6              //
 846+ 85C6              //              Colon_Def TRUV, "TRUV", is_normal
 847+ 85C6              //              dw      LIT, 20, EMITC, ZERO, EMITC
 848+ 85C6              //              dw      EXIT
 849+ 85C6
 850+ 85C6              //  ______________________________________________________________________
 851+ 85C6              //
 852+ 85C6              // mark     --
 853+ 85C6              //
 854+ 85C6              //              Colon_Def MARK, "MARK", is_normal
 855+ 85C6              //              dw      INVV, TYPE, TRUV
 856+ 85C6              //              dw      EXIT
 857+ 85C6
 858+ 85C6              //  ______________________________________________________________________
 859+ 85C6              //
 860+ 85C6              // back     --
 861+ 85C6              //
 862+ 85C6                              Colon_Def BACK, "BACK", is_normal
 862+ 85C6             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 862+ 85C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 862+ 85C6             >
 862+ 85C6             >                // dummy db directives used to calculate length of namec
 862+ 85C6 42 41 43 4B >                db      "BACK"
 862+ 85CA             >len_NFA         defl    $ - temp_NFA
 862+ 85CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 862+ 85C6             >
 862+ 85C6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 862+ 85C7 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 862+ 85CB             >                org     $-1                 // alter last byte of Name just above to set
 862+ 85CA CB          >                db      {b $} | END_BIT     // msb as name end
 862+ 85CB             >
 862+ 85CB AB 85       >                dw      last_NFA            // Link to previous definition Name
 862+ 85CD             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 862+ 85CD CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 862+ 85D0             >
 862+ 85D0             >
 862+ 85D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 862+ 85D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 862+ 85D0             >
 862+ 85D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 863+ 85D0 58 6E AD 6E                  dw      HERE, SUBTRACT, COMMA
 863+ 85D4 76 6E
 864+ 85D6 3C 69                        dw      EXIT
 865+ 85D8
 866+ 85D8              //  ______________________________________________________________________
 867+ 85D8              //
 868+ 85D8              // if          ( -- a 2 ) \ compile-time
 869+ 85D8              // IF ... THEN
 870+ 85D8              // IF ... ELSE ... ENDIF
 871+ 85D8                              Colon_Def IF, "IF", is_immediate
 871+ 85D8             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 871+ 85D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 871+ 85D8             >
 871+ 85D8             >                // dummy db directives used to calculate length of namec
 871+ 85D8 49 46       >                db      "IF"
 871+ 85DA             >len_NFA         defl    $ - temp_NFA
 871+ 85DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 871+ 85D8             >
 871+ 85D8 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 871+ 85D9 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 871+ 85DB             >                org     $-1                 // alter last byte of Name just above to set
 871+ 85DA C6          >                db      {b $} | END_BIT     // msb as name end
 871+ 85DB             >
 871+ 85DB C6 85       >                dw      last_NFA            // Link to previous definition Name
 871+ 85DD             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 871+ 85DD CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 871+ 85E0             >
 871+ 85E0             >
 871+ 85E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 871+ 85E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 871+ 85E0             >
 871+ 85E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 872+ 85E0 C6 70 1C 64                  dw      COMPILE, ZBRANCH
 873+ 85E4 58 6E 4E 6C                  dw      HERE, ZERO, COMMA
 873+ 85E8 76 6E
 874+ 85EA 60 6C                        dw      TWO
 875+ 85EC 3C 69                        dw      EXIT
 876+ 85EE
 877+ 85EE              //  ______________________________________________________________________
 878+ 85EE              //
 879+ 85EE              // then        ( a 2 -- ) \ compile-time
 880+ 85EE              //
 881+ 85EE                              Colon_Def THEN, "THEN", is_immediate
 881+ 85EE             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 881+ 85EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 881+ 85EE             >
 881+ 85EE             >                // dummy db directives used to calculate length of namec
 881+ 85EE 54 48 45 4E >                db      "THEN"
 881+ 85F2             >len_NFA         defl    $ - temp_NFA
 881+ 85F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 881+ 85EE             >
 881+ 85EE C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 881+ 85EF 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 881+ 85F3             >                org     $-1                 // alter last byte of Name just above to set
 881+ 85F2 CE          >                db      {b $} | END_BIT     // msb as name end
 881+ 85F3             >
 881+ 85F3 D8 85       >                dw      last_NFA            // Link to previous definition Name
 881+ 85F5             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 881+ 85F5 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 881+ 85F8             >
 881+ 85F8             >
 881+ 85F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 881+ 85F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 881+ 85F8             >
 881+ 85F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 882+ 85F8 48 70                        dw      QCOMP
 883+ 85FA 60 6C 79 70                  dw      TWO, QPAIRS
 884+ 85FE 58 6E 44 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 884+ 8602 AD 6E 74 6A
 884+ 8606 0B 6B
 885+ 8608 3C 69                        dw      EXIT
 886+ 860A
 887+ 860A              //  ______________________________________________________________________
 888+ 860A              //
 889+ 860A              // endif       ( a 2 -- ) \ compile-time
 890+ 860A              //
 891+ 860A                              Colon_Def ENDIF, "ENDIF", is_immediate
 891+ 860A             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 891+ 860A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 891+ 860A             >
 891+ 860A             >                // dummy db directives used to calculate length of namec
 891+ 860A 45 4E 44 49 >                db      "ENDIF"
 891+ 860E 46          >
 891+ 860F             >len_NFA         defl    $ - temp_NFA
 891+ 860F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 891+ 860A             >
 891+ 860A C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 891+ 860B 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 891+ 860F 46          >
 891+ 8610             >                org     $-1                 // alter last byte of Name just above to set
 891+ 860F C6          >                db      {b $} | END_BIT     // msb as name end
 891+ 8610             >
 891+ 8610 EE 85       >                dw      last_NFA            // Link to previous definition Name
 891+ 8612             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 891+ 8612 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 891+ 8615             >
 891+ 8615             >
 891+ 8615             >                endif           ; ok        // for other definitions it "points" the correct handler
 891+ 8615             >                // Use of "; ok" to suppress "warning[fwdref]"
 891+ 8615             >
 891+ 8615             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 892+ 8615 F5 85                        dw      THEN
 893+ 8617 3C 69                        dw      EXIT
 894+ 8619
 895+ 8619              //  ______________________________________________________________________
 896+ 8619              //
 897+ 8619              // else        ( a1 2 -- a2 2 ) \ compile-time
 898+ 8619              //
 899+ 8619                              Colon_Def ELSE, "ELSE", is_immediate
 899+ 8619             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 899+ 8619             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 899+ 8619             >
 899+ 8619             >                // dummy db directives used to calculate length of namec
 899+ 8619 45 4C 53 45 >                db      "ELSE"
 899+ 861D             >len_NFA         defl    $ - temp_NFA
 899+ 861D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 899+ 8619             >
 899+ 8619 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 899+ 861A 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 899+ 861E             >                org     $-1                 // alter last byte of Name just above to set
 899+ 861D C5          >                db      {b $} | END_BIT     // msb as name end
 899+ 861E             >
 899+ 861E 0A 86       >                dw      last_NFA            // Link to previous definition Name
 899+ 8620             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 899+ 8620 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 899+ 8623             >
 899+ 8623             >
 899+ 8623             >                endif           ; ok        // for other definitions it "points" the correct handler
 899+ 8623             >                // Use of "; ok" to suppress "warning[fwdref]"
 899+ 8623             >
 899+ 8623             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 900+ 8623 48 70                        dw      QCOMP
 901+ 8625 60 6C 79 70                  dw      TWO, QPAIRS
 902+ 8629 C6 70 07 64                  dw      COMPILE, BRANCH
 903+ 862D 58 6E 4E 6C                  dw      HERE, ZERO, COMMA
 903+ 8631 76 6E
 904+ 8633 74 6A 60 6C                  dw      SWAP, TWO, THEN
 904+ 8637 F5 85
 905+ 8639 60 6C                        dw      TWO
 906+ 863B 3C 69                        dw      EXIT
 907+ 863D
 908+ 863D              //  ______________________________________________________________________
 909+ 863D              //
 910+ 863D              // begin        ( -- a 1 ) \ compile-time
 911+ 863D              // BEGIN ... AGAIN
 912+ 863D              // BEGIN ... f UNTIL
 913+ 863D              // BEGIN ... f WHILE ... REPEAT
 914+ 863D                              Colon_Def BEGIN, "BEGIN", is_immediate
 914+ 863D             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 914+ 863D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 914+ 863D             >
 914+ 863D             >                // dummy db directives used to calculate length of namec
 914+ 863D 42 45 47 49 >                db      "BEGIN"
 914+ 8641 4E          >
 914+ 8642             >len_NFA         defl    $ - temp_NFA
 914+ 8642             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 914+ 863D             >
 914+ 863D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 914+ 863E 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 914+ 8642 4E          >
 914+ 8643             >                org     $-1                 // alter last byte of Name just above to set
 914+ 8642 CE          >                db      {b $} | END_BIT     // msb as name end
 914+ 8643             >
 914+ 8643 19 86       >                dw      last_NFA            // Link to previous definition Name
 914+ 8645             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 914+ 8645 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 914+ 8648             >
 914+ 8648             >
 914+ 8648             >                endif           ; ok        // for other definitions it "points" the correct handler
 914+ 8648             >                // Use of "; ok" to suppress "warning[fwdref]"
 914+ 8648             >
 914+ 8648             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 915+ 8648 48 70                        dw      QCOMP
 916+ 864A 58 6E                        dw      HERE
 917+ 864C 60 6C                        dw      TWO
 918+ 864E 3C 69                        dw      EXIT
 919+ 8650
 920+ 8650              //  ______________________________________________________________________
 921+ 8650              //
 922+ 8650              // again        ( a 1 -- ) \ compile-time
 923+ 8650                              Colon_Def AGAIN, "AGAIN", is_immediate
 923+ 8650             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 923+ 8650             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 923+ 8650             >
 923+ 8650             >                // dummy db directives used to calculate length of namec
 923+ 8650 41 47 41 49 >                db      "AGAIN"
 923+ 8654 4E          >
 923+ 8655             >len_NFA         defl    $ - temp_NFA
 923+ 8655             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 923+ 8650             >
 923+ 8650 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 923+ 8651 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 923+ 8655 4E          >
 923+ 8656             >                org     $-1                 // alter last byte of Name just above to set
 923+ 8655 CE          >                db      {b $} | END_BIT     // msb as name end
 923+ 8656             >
 923+ 8656 3D 86       >                dw      last_NFA            // Link to previous definition Name
 923+ 8658             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 923+ 8658 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 923+ 865B             >
 923+ 865B             >
 923+ 865B             >                endif           ; ok        // for other definitions it "points" the correct handler
 923+ 865B             >                // Use of "; ok" to suppress "warning[fwdref]"
 923+ 865B             >
 923+ 865B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 924+ 865B 48 70                        dw      QCOMP
 925+ 865D 60 6C 79 70                  dw      TWO, QPAIRS
 926+ 8661 C6 70 07 64                  dw      COMPILE, BRANCH
 927+ 8665 CD 85                        dw      BACK
 928+ 8667 3C 69                        dw      EXIT
 929+ 8669
 930+ 8669              //  ______________________________________________________________________
 931+ 8669              //
 932+ 8669              // until        ( a 1 -- ) \ compile-time
 933+ 8669                              Colon_Def UNTIL, "UNTIL", is_immediate
 933+ 8669             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 933+ 8669             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 933+ 8669             >
 933+ 8669             >                // dummy db directives used to calculate length of namec
 933+ 8669 55 4E 54 49 >                db      "UNTIL"
 933+ 866D 4C          >
 933+ 866E             >len_NFA         defl    $ - temp_NFA
 933+ 866E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 933+ 8669             >
 933+ 8669 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 933+ 866A 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 933+ 866E 4C          >
 933+ 866F             >                org     $-1                 // alter last byte of Name just above to set
 933+ 866E CC          >                db      {b $} | END_BIT     // msb as name end
 933+ 866F             >
 933+ 866F 50 86       >                dw      last_NFA            // Link to previous definition Name
 933+ 8671             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 933+ 8671 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 933+ 8674             >
 933+ 8674             >
 933+ 8674             >                endif           ; ok        // for other definitions it "points" the correct handler
 933+ 8674             >                // Use of "; ok" to suppress "warning[fwdref]"
 933+ 8674             >
 933+ 8674             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 934+ 8674 48 70                        dw      QCOMP
 935+ 8676 60 6C 79 70                  dw      TWO, QPAIRS
 936+ 867A C6 70 1C 64                  dw      COMPILE, ZBRANCH
 937+ 867E CD 85                        dw      BACK
 938+ 8680 3C 69                        dw      EXIT
 939+ 8682
 940+ 8682              //  ______________________________________________________________________
 941+ 8682              //
 942+ 8682              // end          ( a 1 -- ) \ compile-time
 943+ 8682                              Colon_Def END, "END", is_immediate
 943+ 8682             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 943+ 8682             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 943+ 8682             >
 943+ 8682             >                // dummy db directives used to calculate length of namec
 943+ 8682 45 4E 44    >                db      "END"
 943+ 8685             >len_NFA         defl    $ - temp_NFA
 943+ 8685             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 943+ 8682             >
 943+ 8682 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 943+ 8683 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 943+ 8686             >                org     $-1                 // alter last byte of Name just above to set
 943+ 8685 C4          >                db      {b $} | END_BIT     // msb as name end
 943+ 8686             >
 943+ 8686 69 86       >                dw      last_NFA            // Link to previous definition Name
 943+ 8688             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 943+ 8688 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 943+ 868B             >
 943+ 868B             >
 943+ 868B             >                endif           ; ok        // for other definitions it "points" the correct handler
 943+ 868B             >                // Use of "; ok" to suppress "warning[fwdref]"
 943+ 868B             >
 943+ 868B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 944+ 868B 71 86                        dw      UNTIL
 945+ 868D 3C 69                        dw      EXIT
 946+ 868F
 947+ 868F              //  ______________________________________________________________________
 948+ 868F              //
 949+ 868F              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 950+ 868F                              Colon_Def WHILE, "WHILE", is_immediate
 950+ 868F             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 950+ 868F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 950+ 868F             >
 950+ 868F             >                // dummy db directives used to calculate length of namec
 950+ 868F 57 48 49 4C >                db      "WHILE"
 950+ 8693 45          >
 950+ 8694             >len_NFA         defl    $ - temp_NFA
 950+ 8694             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 950+ 868F             >
 950+ 868F C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 950+ 8690 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 950+ 8694 45          >
 950+ 8695             >                org     $-1                 // alter last byte of Name just above to set
 950+ 8694 C5          >                db      {b $} | END_BIT     // msb as name end
 950+ 8695             >
 950+ 8695 82 86       >                dw      last_NFA            // Link to previous definition Name
 950+ 8697             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 950+ 8697 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 950+ 869A             >
 950+ 869A             >
 950+ 869A             >                endif           ; ok        // for other definitions it "points" the correct handler
 950+ 869A             >                // Use of "; ok" to suppress "warning[fwdref]"
 950+ 869A             >
 950+ 869A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 951+ 869A DD 85                        dw      IF
 952+ 869C              //              dw      TWO_PLUS // ( that is 4 )
 953+ 869C C4 6A                        dw      TWO_SWAP
 954+ 869E 3C 69                        dw      EXIT
 955+ 86A0
 956+ 86A0              //  ______________________________________________________________________
 957+ 86A0              //
 958+ 86A0              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 959+ 86A0                              Colon_Def REPEAT, "REPEAT", is_immediate
 959+ 86A0             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 959+ 86A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 959+ 86A0             >
 959+ 86A0             >                // dummy db directives used to calculate length of namec
 959+ 86A0 52 45 50 45 >                db      "REPEAT"
 959+ 86A4 41 54       >
 959+ 86A6             >len_NFA         defl    $ - temp_NFA
 959+ 86A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 959+ 86A0             >
 959+ 86A0 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 959+ 86A1 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 959+ 86A5 41 54       >
 959+ 86A7             >                org     $-1                 // alter last byte of Name just above to set
 959+ 86A6 D4          >                db      {b $} | END_BIT     // msb as name end
 959+ 86A7             >
 959+ 86A7 8F 86       >                dw      last_NFA            // Link to previous definition Name
 959+ 86A9             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 959+ 86A9 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 959+ 86AC             >
 959+ 86AC             >
 959+ 86AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 959+ 86AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 959+ 86AC             >
 959+ 86AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 960+ 86AC 58 86                        dw      AGAIN
 961+ 86AE              //              dw      TWO_MINUS
 962+ 86AE F5 85                        dw      THEN
 963+ 86B0 3C 69                        dw      EXIT
 964+ 86B2
 965+ 86B2              //  ______________________________________________________________________
 966+ 86B2              //
 967+ 86B2              // ?do-
 968+ 86B2              // special version of "BACK" used by ?DO and LOOP
 969+ 86B2                              Colon_Def C_DO_BACK, "?DO-", is_normal
 969+ 86B2             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 969+ 86B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 969+ 86B2             >
 969+ 86B2             >                // dummy db directives used to calculate length of namec
 969+ 86B2 3F 44 4F 2D >                db      "?DO-"
 969+ 86B6             >len_NFA         defl    $ - temp_NFA
 969+ 86B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 969+ 86B2             >
 969+ 86B2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 969+ 86B3 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 969+ 86B7             >                org     $-1                 // alter last byte of Name just above to set
 969+ 86B6 AD          >                db      {b $} | END_BIT     // msb as name end
 969+ 86B7             >
 969+ 86B7 A0 86       >                dw      last_NFA            // Link to previous definition Name
 969+ 86B9             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 969+ 86B9 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 969+ 86BC             >
 969+ 86BC             >
 969+ 86BC             >                endif           ; ok        // for other definitions it "points" the correct handler
 969+ 86BC             >                // Use of "; ok" to suppress "warning[fwdref]"
 969+ 86BC             >
 969+ 86BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 970+ 86BC CD 85                        dw      BACK
 971+ 86BE              CDoBack_Begin:
 972+ 86BE 0C 69 DE 6D                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 972+ 86C2 00 6B AD 6E
 973+ 86C6 1C 64                        dw      ZBRANCH
 974+ 86C8 0A 00                        dw      CDoBack_While - $
 975+ 86CA E8 69 F5 85                  dw          TWO_PLUS, THEN
 976+ 86CE 07 64                        dw      BRANCH
 977+ 86D0 EE FF                        dw      CDoBack_Begin - $
 978+ 86D2              CDoBack_While:
 979+ 86D2 8D 70 DE 6D                  dw      QCSP, CSP, STORE
 979+ 86D6 0B 6B
 980+ 86D8 3C 69                        dw      EXIT
 981+ 86DA
 982+ 86DA              //  ______________________________________________________________________
 983+ 86DA              //
 984+ 86DA              // do
 985+ 86DA              // DO  ... LOOP
 986+ 86DA              // DO  ... n +LOOP
 987+ 86DA              // ?DO ... LOOP
 988+ 86DA              // ?DO ... n +LOOP
 989+ 86DA                              Colon_Def DO, "DO", is_immediate
 989+ 86DA             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 989+ 86DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 989+ 86DA             >
 989+ 86DA             >                // dummy db directives used to calculate length of namec
 989+ 86DA 44 4F       >                db      "DO"
 989+ 86DC             >len_NFA         defl    $ - temp_NFA
 989+ 86DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 989+ 86DA             >
 989+ 86DA C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 989+ 86DB 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 989+ 86DD             >                org     $-1                 // alter last byte of Name just above to set
 989+ 86DC CF          >                db      {b $} | END_BIT     // msb as name end
 989+ 86DD             >
 989+ 86DD B2 86       >                dw      last_NFA            // Link to previous definition Name
 989+ 86DF             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 989+ 86DF CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 989+ 86E2             >
 989+ 86E2             >
 989+ 86E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 989+ 86E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 989+ 86E2             >
 989+ 86E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 990+ 86E2 C6 70 70 64                  dw      COMPILE, C_DO
 991+ 86E6 DE 6D 00 6B                  dw      CSP, FETCH, STORE_CSP
 991+ 86EA 19 70
 992+ 86EC 58 6E 69 6C                  dw      HERE, THREE
 993+ 86F0 3C 69                        dw      EXIT
 994+ 86F2
 995+ 86F2              //  ______________________________________________________________________
 996+ 86F2              //
 997+ 86F2              // loop
 998+ 86F2                              Colon_Def LOOP, "LOOP", is_immediate
 998+ 86F2             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 998+ 86F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 998+ 86F2             >
 998+ 86F2             >                // dummy db directives used to calculate length of namec
 998+ 86F2 4C 4F 4F 50 >                db      "LOOP"
 998+ 86F6             >len_NFA         defl    $ - temp_NFA
 998+ 86F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 998+ 86F2             >
 998+ 86F2 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 998+ 86F3 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 998+ 86F7             >                org     $-1                 // alter last byte of Name just above to set
 998+ 86F6 D0          >                db      {b $} | END_BIT     // msb as name end
 998+ 86F7             >
 998+ 86F7 DA 86       >                dw      last_NFA            // Link to previous definition Name
 998+ 86F9             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 998+ 86F9 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 998+ 86FC             >
 998+ 86FC             >
 998+ 86FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 998+ 86FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 998+ 86FC             >
 998+ 86FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 999+ 86FC 69 6C 79 70                  dw      THREE, QPAIRS
1000+ 8700 C6 70 F8 63                  dw      COMPILE, C_LOOP
1001+ 8704 B9 86                        dw      C_DO_BACK
1002+ 8706 3C 69                        dw      EXIT
1003+ 8708
1004+ 8708              //  ______________________________________________________________________
1005+ 8708              //
1006+ 8708              // +loop
1007+ 8708                              Colon_Def PLOOP, "+LOOP", is_immediate
1007+ 8708             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1007+ 8708             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1007+ 8708             >
1007+ 8708             >                // dummy db directives used to calculate length of namec
1007+ 8708 2B 4C 4F 4F >                db      "+LOOP"
1007+ 870C 50          >
1007+ 870D             >len_NFA         defl    $ - temp_NFA
1007+ 870D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1007+ 8708             >
1007+ 8708 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1007+ 8709 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1007+ 870D 50          >
1007+ 870E             >                org     $-1                 // alter last byte of Name just above to set
1007+ 870D D0          >                db      {b $} | END_BIT     // msb as name end
1007+ 870E             >
1007+ 870E F2 86       >                dw      last_NFA            // Link to previous definition Name
1007+ 8710             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1007+ 8710 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1007+ 8713             >
1007+ 8713             >
1007+ 8713             >                endif           ; ok        // for other definitions it "points" the correct handler
1007+ 8713             >                // Use of "; ok" to suppress "warning[fwdref]"
1007+ 8713             >
1007+ 8713             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1008+ 8713 69 6C 79 70                  dw      THREE, QPAIRS
1009+ 8717 C6 70 C3 63                  dw      COMPILE, C_PLOOP
1010+ 871B B9 86                        dw      C_DO_BACK
1011+ 871D 3C 69                        dw      EXIT
1012+ 871F
1013+ 871F              //  ______________________________________________________________________
1014+ 871F              //
1015+ 871F              // ?do
1016+ 871F                              Colon_Def QDO, "?DO", is_immediate
1016+ 871F             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1016+ 871F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1016+ 871F             >
1016+ 871F             >                // dummy db directives used to calculate length of namec
1016+ 871F 3F 44 4F    >                db      "?DO"
1016+ 8722             >len_NFA         defl    $ - temp_NFA
1016+ 8722             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1016+ 871F             >
1016+ 871F C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1016+ 8720 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1016+ 8723             >                org     $-1                 // alter last byte of Name just above to set
1016+ 8722 CF          >                db      {b $} | END_BIT     // msb as name end
1016+ 8723             >
1016+ 8723 08 87       >                dw      last_NFA            // Link to previous definition Name
1016+ 8725             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1016+ 8725 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1016+ 8728             >
1016+ 8728             >
1016+ 8728             >                endif           ; ok        // for other definitions it "points" the correct handler
1016+ 8728             >                // Use of "; ok" to suppress "warning[fwdref]"
1016+ 8728             >
1016+ 8728             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1017+ 8728 C6 70 45 64                  dw      COMPILE, C_Q_DO
1018+ 872C DE 6D 00 6B                  dw      CSP, FETCH, STORE_CSP
1018+ 8730 19 70
1019+ 8732 58 6E 4E 6C                  dw      HERE, ZERO, COMMA, ZERO
1019+ 8736 76 6E 4E 6C
1020+ 873A 58 6E 69 6C                  dw      HERE, THREE
1021+ 873E 3C 69                        dw      EXIT
1022+ 8740
1023+ 8740              Latest_Definition:
1024+ 8740              //  ______________________________________________________________________
1025+ 8740              //
1026+ 8740              // \
1027+ 8740                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1027+ 8740             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1027+ 8740             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1027+ 8740             >
1027+ 8740             >                // dummy db directives used to calculate length of namec
1027+ 8740 5C          >                db      "\\"
1027+ 8741             >len_NFA         defl    $ - temp_NFA
1027+ 8741             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1027+ 8740             >
1027+ 8740 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1027+ 8741 5C          >                db      "\\"               // name string in 7-bit ascii, but
1027+ 8742             >                org     $-1                 // alter last byte of Name just above to set
1027+ 8741 DC          >                db      {b $} | END_BIT     // msb as name end
1027+ 8742             >
1027+ 8742 1F 87       >                dw      last_NFA            // Link to previous definition Name
1027+ 8744             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1027+ 8744 CD D5 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1027+ 8747             >
1027+ 8747             >
1027+ 8747             >                endif           ; ok        // for other definitions it "points" the correct handler
1027+ 8747             >                // Use of "; ok" to suppress "warning[fwdref]"
1027+ 8747             >
1027+ 8747             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1028+ 8747 62 6D 00 6B                  dw      BLK, FETCH
1029+ 874B 1C 64                        dw      ZBRANCH
1030+ 874D 30 00                        dw      Backslash_Else_1 - $
1031+ 874F 62 6D 00 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1031+ 8753 57 6C EE 6E
1032+ 8757 1C 64                        dw          ZBRANCH
1033+ 8759 18 00                        dw          Backslash_Else_2 - $
1034+ 875B 6C 6D 00 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1034+ 875F 88 6C 5F 7A
1034+ 8763 88 6C
1035+ 8765 74 6A AD 6E                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1035+ 8769 6C 6D E1 6A
1036+ 876D 07 64                        dw          BRANCH
1037+ 876F 0A 00                        dw          Backslash_Endif_2 - $
1038+ 8771              Backslash_Else_2:
1039+ 8771 95 6C 01 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1039+ 8775 6C 6D 0B 6B
1040+ 8779              Backslash_Endif_2:
1041+ 8779 07 64                        dw      BRANCH
1042+ 877B 0A 00                        dw      Backslash_Endif_1 - $
1043+ 877D              Backslash_Else_1:
1044+ 877D A5 63 50 00                  dw          LIT, 80, TO_IN, STORE
1044+ 8781 6C 6D 0B 6B
1045+ 8785              Backslash_Endif_1:
1046+ 8785 3C 69                        dw      EXIT
1047+ 8787
1048+ 8787              Fence_Word:
1049+ 8787              //  ______________________________________________________________________
1050+ 8787              //
1051+ 8787
1052+ 8787 00           Here_Dictionary db      0
1053+ 8788
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
 115  8788
 116  8788              // now we save the compiled file so we can either run it or debug it
 117  8788                              SAVENEX OPEN "output/main.nex", ORIGIN
 118  8788                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 119  8788                              SAVENEX CFG  0
 120  8788                              SAVENEX BANK 2, 0
 121  8788                              SAVENEX AUTO
 122  8788                              SAVENEX CLOSE
 123  8788
 124  8788              //              PAGE 7 ;set 7 page to current slot
 125  8788              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 126  8788              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 127  8788
 128  8788                              SAVETAP "output/F15f.tap", CODE, "forth15f", ORIGIN, 10000
 129  8788
 130  8788                              SAVEBIN "output/forth15f.bin", ORIGIN, 10000
 131  8788
 132  8788                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
