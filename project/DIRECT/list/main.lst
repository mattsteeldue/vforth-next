# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.6 NextZXOS version
   7  0000              //  build 20220227
   8  0000              //
   9  0000              //  Direct-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2022
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000              //ORIGIN          equ     $8CC1                   // for binary comparison
  69  0000                              endif
  70  0000              //  ______________________________________________________________________
  71  0000
  72  0000                              if (  0 == DEBUGGING )
  73  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  74  0000                              endif
  75  0000              //  ______________________________________________________________________
  76  0000
  77  0000                              if (  1 == DEBUGGING )
  78  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  79  0000                              endif
  80  0000              //  ______________________________________________________________________
  81  0000
  82  0000                              DEVICE  ZXSPECTRUMNEXT
  83  0000
  84  0000                              ORG     ORIGIN
  85  62E6
  86  62E6                              if ( -1 == DEBUGGING )
  87  62E6 00 00 00...                  ds 128                            // for binary comparison
  88  62EA                              endif
  89  6366
  90  6366              //  ______________________________________________________________________
  91  6366              //
  92  6366              //  Naming convention for Label vs Forth correspondance
  93  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  94  6366              //    - Leading "0" is converted into "Z_"
  95  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  96  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  97  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  98  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  99  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 100  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 101  6366              //    - Equal sign "=" is converted in EQUAL
 102  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 103  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 104  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 105  6366              //    - Exclamation mark "!" is converted in STORE
 106  6366              //    - At-Sign "@" is converted in FETCH
 107  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 108  6366
 109  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~
 125+ 6366 ~
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
 110  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 2A 79                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 2A 79                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 5C 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 A3 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 A3 87        DP_origin       dw      Fence_Word
  39+ 6386 32 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E
 100+ 639E
 101+ 639E
 102+ 639E
 103+ 639E E9                           jp      (hl)                // and jump to it
 104+ 639F                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 639F
 106+ 639F              //  ______________________________________________________________________
 107+ 639F              //
 108+ 639F              // lit          -- x
 109+ 639F              // puts on top of stack the value of the following word.
 110+ 639F              // it is compiled in colon definition before a literal number
 111+ 639F
 112+ 639F                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 639F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 639F             >
 112+ 639F             >                // dummy db directives used to calculate length of namec
 112+ 639F 4C 49 54    >                db      "LIT"
 112+ 63A2             >len_NFA         defl    $ - temp_NFA
 112+ 63A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 639F             >
 112+ 639F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A0 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A3             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A2 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A3             >
 112+ 63A3 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A5             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 112+ 63A5 ~           >
 112+ 63A5 ~           >
 112+ 63A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63A5             >
 112+ 63A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63A5
 114+ 63A5 0A                           ld      a, (bc)
 115+ 63A6 03                           inc     bc
 116+ 63A7 6F                           ld      l, a
 117+ 63A8 0A                           ld      a, (bc)
 118+ 63A9 03                           inc     bc
 119+ 63AA 67                           ld      h, a
 120+ 63AB                              psh1
 120+ 63AB E5          >                push    hl
 120+ 63AC DD E9       >                jp      (ix)
 121+ 63AE
 122+ 63AE              //  ______________________________________________________________________
 123+ 63AE              //
 124+ 63AE              // execute      i*x xt -- j*x
 125+ 63AE              // execution token. usually xt is given by CFA
 126+ 63AE
 127+ 63AE                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63AE             >
 127+ 63AE             >                // dummy db directives used to calculate length of namec
 127+ 63AE 45 58 45 43 >                db      "EXECUTE"
 127+ 63B2 55 54 45    >
 127+ 63B5             >len_NFA         defl    $ - temp_NFA
 127+ 63B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63AE             >
 127+ 63AE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63AF 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B3 55 54 45    >
 127+ 63B6             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63B5 C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63B6             >
 127+ 63B6 9F 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63B8             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 127+ 63B8 ~           >
 127+ 63B8 ~           >
 127+ 63B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63B8             >
 127+ 63B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63B8 C9                           ret
 129+ 63B9              //              pop     hl
 130+ 63B9              //              jp      (hl)
 131+ 63B9              //              jr      Exec_Ptr
 132+ 63B9
 133+ 63B9
 134+ 63B9              //  ______________________________________________________________________
 135+ 63B9              //
 136+ 63B9              // (+loop)       --
 137+ 63B9              // compiled by +LOOP. it uses the top two values of return-stack to
 138+ 63B9              // keep track of index and limit, they are accessed via I and I'
 139+ 63B9                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 139+ 63B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 63B9             >
 139+ 63B9             >                // dummy db directives used to calculate length of namec
 139+ 63B9 28 2B 4C 4F >                db      "(+LOOP)"
 139+ 63BD 4F 50 29    >
 139+ 63C0             >len_NFA         defl    $ - temp_NFA
 139+ 63C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 63B9             >
 139+ 63B9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 63BA 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 139+ 63BE 4F 50 29    >
 139+ 63C1             >                org     $-1                 // alter last byte of Name just above to set
 139+ 63C0 A9          >                db      {b $} | END_BIT     // msb as name end
 139+ 63C1             >
 139+ 63C1 AE 63       >                dw      last_NFA            // Link to previous definition Name
 139+ 63C3             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 63C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 139+ 63C3 ~           >
 139+ 63C3 ~           >
 139+ 63C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 63C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 63C3             >
 139+ 63C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 140+ 63C3
 141+ 63C3              Loop_Ptr:
 142+ 63C3 D9                           exx
 143+ 63C4                              ldhlrp                      // ld hl,rp macro 30h +Origin
 143+ 63C4 2A 96 63    >                ld      hl,(RP_Pointer)
 144+ 63C7
 145+ 63C7 C1                           pop     bc                  // bc is increment
 146+ 63C8
 147+ 63C8 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 148+ 63C9 7B                           ld      a, e                // de keeps index before increment.
 149+ 63CA 81                           add     c
 150+ 63CB 77                           ld      (hl), a
 151+ 63CC 23                           inc     hl
 152+ 63CD 56                           ld      d, (hl)
 153+ 63CE 7A                           ld      a, d
 154+ 63CF 88                           adc     b
 155+ 63D0 77                           ld      (hl),a
 156+ 63D1 23                           inc     hl
 157+ 63D2
 158+ 63D2 7B                           ld      a, e
 159+ 63D3 96                           sub     (hl)
 160+ 63D4 5F                           ld      e, a
 161+ 63D5 23                           inc     hl
 162+ 63D6 7A                           ld      a, d
 163+ 63D7 9E                           sbc     (hl)
 164+ 63D8 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 165+ 63D9
 166+ 63D9 EB                           ex      de, hl
 167+ 63DA 09                           add     hl, bc
 168+ 63DB
 169+ 63DB CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 170+ 63DD 28 01                        jr      z, Loop_NegativeIncrement
 171+ 63DF 3F                               ccf
 172+ 63E0              Loop_NegativeIncrement:
 173+ 63E0 38 03                        jr      c, Loop_Endif
 174+ 63E2 D9                               exx
 175+ 63E3 18 22                            jr      Branch_Ptr      // perform branch consuming following cell
 176+ 63E5              Loop_Endif:
 177+ 63E5 EB                           ex      de, hl
 178+ 63E6 23                           inc     hl
 179+ 63E7                              ldrphl                      // ld rp,hl macro 30h +Origin
 179+ 63E7 22 96 63    >                ld      (RP_Pointer),hl
 180+ 63EA D9                           exx
 181+ 63EB 03                           inc     bc                  // skip branch-style offset
 182+ 63EC 03                           inc     bc
 183+ 63ED                              next
 183+ 63ED DD E9       >                jp      (ix)
 184+ 63EF
 185+ 63EF              //  ______________________________________________________________________
 186+ 63EF              //
 187+ 63EF              // (loop)       n --
 188+ 63EF              // same as (LOOP) but index is incremented by 1
 189+ 63EF              // compiled by LOOP.
 190+ 63EF                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 190+ 63EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 63EF             >
 190+ 63EF             >                // dummy db directives used to calculate length of namec
 190+ 63EF 28 4C 4F 4F >                db      "(LOOP)"
 190+ 63F3 50 29       >
 190+ 63F5             >len_NFA         defl    $ - temp_NFA
 190+ 63F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 63EF             >
 190+ 63EF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 63F0 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 190+ 63F4 50 29       >
 190+ 63F6             >                org     $-1                 // alter last byte of Name just above to set
 190+ 63F5 A9          >                db      {b $} | END_BIT     // msb as name end
 190+ 63F6             >
 190+ 63F6 B9 63       >                dw      last_NFA            // Link to previous definition Name
 190+ 63F8             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 63F8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190+ 63F8 ~           >
 190+ 63F8 ~           >
 190+ 63F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 63F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 63F8             >
 190+ 63F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 63F8 ED 8A 00 01                  push    1
 192+ 63FC 18 C5                        jr      Loop_Ptr
 193+ 63FE
 194+ 63FE              //  ______________________________________________________________________
 195+ 63FE              //
 196+ 63FE              // branch       --
 197+ 63FE              // unconditional branch in colon definition using the following cell as an offset from current IP value
 198+ 63FE              // compiled by ELSE, AGAIN and some other immediate words
 199+ 63FE
 200+ 63FE                              New_Def BRANCH, "BRANCH", is_code, is_normal
 200+ 63FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ 63FE             >
 200+ 63FE             >                // dummy db directives used to calculate length of namec
 200+ 63FE 42 52 41 4E >                db      "BRANCH"
 200+ 6402 43 48       >
 200+ 6404             >len_NFA         defl    $ - temp_NFA
 200+ 6404             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ 63FE             >
 200+ 63FE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ 63FF 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 200+ 6403 43 48       >
 200+ 6405             >                org     $-1                 // alter last byte of Name just above to set
 200+ 6404 C8          >                db      {b $} | END_BIT     // msb as name end
 200+ 6405             >
 200+ 6405 EF 63       >                dw      last_NFA            // Link to previous definition Name
 200+ 6407             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 6407 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 200+ 6407 ~           >
 200+ 6407 ~           >
 200+ 6407             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 6407             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 6407             >
 200+ 6407             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 6407              Branch_Ptr:
 202+ 6407 60                           ld      h, b
 203+ 6408 69                           ld      l, c
 204+ 6409 5E                           ld      e, (hl)
 205+ 640A 23                           inc     hl
 206+ 640B 56                           ld      d, (hl)
 207+ 640C 2B                           dec     hl                  // offset is calculated from current IP
 208+ 640D 19                           add     hl, de
 209+ 640E 4D                           ld      c, l
 210+ 640F 44                           ld      b, h
 211+ 6410                              next
 211+ 6410 DD E9       >                jp      (ix)
 212+ 6412
 213+ 6412
 214+ 6412              //  ______________________________________________________________________
 215+ 6412              //
 216+ 6412              // 0branch      f --
 217+ 6412              // conditional branch if the top-of-stack is ZERO or FALSE.
 218+ 6412              // compiled by IF, UNTIL and some other immediate words
 219+ 6412
 220+ 6412                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 220+ 6412             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 6412             >
 220+ 6412             >                // dummy db directives used to calculate length of namec
 220+ 6412 30 42 52 41 >                db      "0BRANCH"
 220+ 6416 4E 43 48    >
 220+ 6419             >len_NFA         defl    $ - temp_NFA
 220+ 6419             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 6412             >
 220+ 6412 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 6413 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 220+ 6417 4E 43 48    >
 220+ 641A             >                org     $-1                 // alter last byte of Name just above to set
 220+ 6419 C8          >                db      {b $} | END_BIT     // msb as name end
 220+ 641A             >
 220+ 641A FE 63       >                dw      last_NFA            // Link to previous definition Name
 220+ 641C             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 641C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 220+ 641C ~           >
 220+ 641C ~           >
 220+ 641C             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 641C             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 641C             >
 220+ 641C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 641C              ZBranch_Ptr:
 222+ 641C E1                           pop     hl
 223+ 641D 7D                           ld      a, l
 224+ 641E B4                           or      h
 225+ 641F 28 E6                        jr      z, Branch_Ptr
 226+ 6421 03                           inc     bc                  // if not branch, skip offset cell.
 227+ 6422 03                           inc     bc
 228+ 6423                              next
 228+ 6423 DD E9       >                jp      (ix)
 229+ 6425
 230+ 6425              //  ______________________________________________________________________
 231+ 6425              //
 232+ 6425              // (leave)        --
 233+ 6425              // compiled by LEAVE
 234+ 6425              // this forces to exit from loop and jump past
 235+ 6425                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 235+ 6425             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 235+ 6425             >
 235+ 6425             >                // dummy db directives used to calculate length of namec
 235+ 6425 28 4C 45 41 >                db      "(LEAVE)"
 235+ 6429 56 45 29    >
 235+ 642C             >len_NFA         defl    $ - temp_NFA
 235+ 642C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 235+ 6425             >
 235+ 6425 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 235+ 6426 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 235+ 642A 56 45 29    >
 235+ 642D             >                org     $-1                 // alter last byte of Name just above to set
 235+ 642C A9          >                db      {b $} | END_BIT     // msb as name end
 235+ 642D             >
 235+ 642D 12 64       >                dw      last_NFA            // Link to previous definition Name
 235+ 642F             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 235+ 642F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 235+ 642F ~           >
 235+ 642F ~           >
 235+ 642F             >                endif           ; ok        // for other definitions it "points" the correct handler
 235+ 642F             >                // Use of "; ok" to suppress "warning[fwdref]"
 235+ 642F             >
 235+ 642F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 642F
 237+ 642F                              ldhlrp
 237+ 642F 2A 96 63    >                ld      hl,(RP_Pointer)
 238+ 6432 11 04 00                     ld      de, 4
 239+ 6435 19                           add     hl, de
 240+ 6436                              ldrphl
 240+ 6436 22 96 63    >                ld      (RP_Pointer),hl
 241+ 6439
 242+ 6439 18 CC                        jr      Branch_Ptr       // perform branch consuming following cell
 243+ 643B                              next
 243+ 643B DD E9       >                jp      (ix)
 244+ 643D
 245+ 643D              //  ______________________________________________________________________
 246+ 643D              //
 247+ 643D              // (?do)        lim ind --
 248+ 643D              // compiled by ?DO to make a loop checking for lim == ind first
 249+ 643D              // at run-time (?DO) must be followed by a BRANCH offset
 250+ 643D              // used to skip the loop if lim == ind
 251+ 643D                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 251+ 643D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 251+ 643D             >
 251+ 643D             >                // dummy db directives used to calculate length of namec
 251+ 643D 28 3F 44 4F >                db      "(?DO)"
 251+ 6441 29          >
 251+ 6442             >len_NFA         defl    $ - temp_NFA
 251+ 6442             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 251+ 643D             >
 251+ 643D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 251+ 643E 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 251+ 6442 29          >
 251+ 6443             >                org     $-1                 // alter last byte of Name just above to set
 251+ 6442 A9          >                db      {b $} | END_BIT     // msb as name end
 251+ 6443             >
 251+ 6443 25 64       >                dw      last_NFA            // Link to previous definition Name
 251+ 6445             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 251+ 6445 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 251+ 6445 ~           >
 251+ 6445 ~           >
 251+ 6445             >                endif           ; ok        // for other definitions it "points" the correct handler
 251+ 6445             >                // Use of "; ok" to suppress "warning[fwdref]"
 251+ 6445             >
 251+ 6445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 252+ 6445 D1                           pop     de                  // de has the index
 253+ 6446 E1                           pop     hl                  // hl has the limit
 254+ 6447 E5                           push    hl
 255+ 6448 D5                           push    de
 256+ 6449 A7                           and     a                   // reset carry flag
 257+ 644A ED 52                        sbc     hl, de              // compute limit - index
 258+ 644C 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 259+ 644E D1                               pop     de
 260+ 644F E1                               pop     hl
 261+ 6450
 262+ 6450 18 B5                            jr      Branch_Ptr          // perform branch consuming following cell
 263+ 6452              Do_Ptr:
 264+ 6452                              ldhlrp                      // prepare RP
 264+ 6452 2A 96 63    >                ld      hl,(RP_Pointer)
 265+ 6455 2B                           dec     hl
 266+ 6456 2B                           dec     hl
 267+ 6457 2B                           dec     hl
 268+ 6458 2B                           dec     hl
 269+ 6459                              ldrphl
 269+ 6459 22 96 63    >                ld      (RP_Pointer),hl
 270+ 645C
 271+ 645C                              // store index as top RP
 272+ 645C D1                           pop     de
 273+ 645D 73                           ld      (hl), e
 274+ 645E 23                           inc     hl
 275+ 645F 72                           ld      (hl), d
 276+ 6460 23                           inc     hl
 277+ 6461                              // stores lim as second from top RP
 278+ 6461 D1                           pop     de
 279+ 6462 73                           ld      (hl), e
 280+ 6463 23                           inc     hl
 281+ 6464 72                           ld      (hl), d
 282+ 6465
 283+ 6465                              // skip branch-style offseet
 284+ 6465 03                           inc     bc
 285+ 6466 03                           inc     bc
 286+ 6467                              next
 286+ 6467 DD E9       >                jp      (ix)
 287+ 6469
 288+ 6469              //  ______________________________________________________________________
 289+ 6469              //
 290+ 6469              // (do)        lim ind --
 291+ 6469              // compiled by DO to make a loop checking for lim == ind first
 292+ 6469              // this is a simpler version of (?DO)
 293+ 6469                              New_Def C_DO, "(DO)", is_code, is_normal
 293+ 6469             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 6469             >
 293+ 6469             >                // dummy db directives used to calculate length of namec
 293+ 6469 28 44 4F 29 >                db      "(DO)"
 293+ 646D             >len_NFA         defl    $ - temp_NFA
 293+ 646D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 6469             >
 293+ 6469 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 646A 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 293+ 646E             >                org     $-1                 // alter last byte of Name just above to set
 293+ 646D A9          >                db      {b $} | END_BIT     // msb as name end
 293+ 646E             >
 293+ 646E 3D 64       >                dw      last_NFA            // Link to previous definition Name
 293+ 6470             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 6470 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 293+ 6470 ~           >
 293+ 6470 ~           >
 293+ 6470             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 6470             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 6470             >
 293+ 6470             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 6470 0B                           dec     bc                  // prepare IP beforehand
 295+ 6471 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 296+ 6472 18 DE                        jr      Do_Ptr
 297+ 6474
 298+ 6474              //  ______________________________________________________________________
 299+ 6474              //
 300+ 6474              // i            -- n
 301+ 6474              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 302+ 6474              // the current value of the index-loop
 303+ 6474                              New_Def I, "I", is_code, is_normal
 303+ 6474             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 6474             >
 303+ 6474             >                // dummy db directives used to calculate length of namec
 303+ 6474 49          >                db      "I"
 303+ 6475             >len_NFA         defl    $ - temp_NFA
 303+ 6475             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 6474             >
 303+ 6474 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 6475 49          >                db      "I"               // name string in 7-bit ascii, but
 303+ 6476             >                org     $-1                 // alter last byte of Name just above to set
 303+ 6475 C9          >                db      {b $} | END_BIT     // msb as name end
 303+ 6476             >
 303+ 6476 69 64       >                dw      last_NFA            // Link to previous definition Name
 303+ 6478             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 6478 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 303+ 6478 ~           >
 303+ 6478 ~           >
 303+ 6478             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 6478             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 6478             >
 303+ 6478             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 6478              I_Ptr:
 305+ 6478
 306+ 6478                              ldhlrp
 306+ 6478 2A 96 63    >                ld      hl,(RP_Pointer)
 307+ 647B              I_Ptr_prime
 308+ 647B 5E                           ld      e, (hl)
 309+ 647C 23                           inc     hl
 310+ 647D 56                           ld      d, (hl)
 311+ 647E D5                           push    de
 312+ 647F                              next
 312+ 647F DD E9       >                jp      (ix)
 313+ 6481
 314+ 6481
 315+ 6481              //  ______________________________________________________________________
 316+ 6481              //
 317+ 6481              // i'            -- n
 318+ 6481              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 319+ 6481              // the limit of the index-loop
 320+ 6481
 321+ 6481                              New_Def II, "I'", is_code, is_normal
 321+ 6481             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 6481             >
 321+ 6481             >                // dummy db directives used to calculate length of namec
 321+ 6481 49 27       >                db      "I'"
 321+ 6483             >len_NFA         defl    $ - temp_NFA
 321+ 6483             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 6481             >
 321+ 6481 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 6482 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 321+ 6484             >                org     $-1                 // alter last byte of Name just above to set
 321+ 6483 A7          >                db      {b $} | END_BIT     // msb as name end
 321+ 6484             >
 321+ 6484 74 64       >                dw      last_NFA            // Link to previous definition Name
 321+ 6486             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 6486 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 321+ 6486 ~           >
 321+ 6486 ~           >
 321+ 6486             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 6486             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 6486             >
 321+ 6486             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 6486                              ldhlrp
 322+ 6486 2A 96 63    >                ld      hl,(RP_Pointer)
 323+ 6489 23                           inc     hl
 324+ 648A 23                           inc     hl
 325+ 648B 18 EE                        jr      I_Ptr_prime
 326+ 648D
 327+ 648D
 328+ 648D              //  ______________________________________________________________________
 329+ 648D              //
 330+ 648D              // digit        c n -- u 1  |  0
 331+ 648D              // convert a character c using base n
 332+ 648D              // returns a unsigned number and a true flag
 333+ 648D              // or just a false flag if the conversion fails
 334+ 648D                              New_Def DIGIT, "DIGIT", is_code, is_normal
 334+ 648D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 334+ 648D             >
 334+ 648D             >                // dummy db directives used to calculate length of namec
 334+ 648D 44 49 47 49 >                db      "DIGIT"
 334+ 6491 54          >
 334+ 6492             >len_NFA         defl    $ - temp_NFA
 334+ 6492             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 334+ 648D             >
 334+ 648D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 334+ 648E 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 334+ 6492 54          >
 334+ 6493             >                org     $-1                 // alter last byte of Name just above to set
 334+ 6492 D4          >                db      {b $} | END_BIT     // msb as name end
 334+ 6493             >
 334+ 6493 81 64       >                dw      last_NFA            // Link to previous definition Name
 334+ 6495             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 334+ 6495 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 334+ 6495 ~           >
 334+ 6495 ~           >
 334+ 6495             >                endif           ; ok        // for other definitions it "points" the correct handler
 334+ 6495             >                // Use of "; ok" to suppress "warning[fwdref]"
 334+ 6495             >
 334+ 6495             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 335+ 6495 E1                           pop     hl                  // l has the base
 336+ 6496 D1                           pop     de                  // e has the digit
 337+ 6497 7B                           ld      a, e
 338+ 6498 FE 60                        cp      $60                 // check if lowercase
 339+ 649A 38 02                        jr      c, Digit_Uppercase
 340+ 649C D6 20                            sub     $20                 // quick'n'dirty uppercase
 341+ 649E              Digit_Uppercase:
 342+ 649E D6 30                        sub     $30
 343+ 64A0 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 344+ 64A2 FE 0A                            cp      $0A
 345+ 64A4 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 346+ 64A6 D6 07                                sub     7                   // try hex and subtract 7
 347+ 64A8 FE 0A                                cp      $0A
 348+ 64AA 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 349+ 64AC
 350+ 64AC              Digit_Decimal:
 351+ 64AC                              // compare digit
 352+ 64AC BD                           cp      l                   // compare with base
 353+ 64AD
 354+ 64AD 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 355+ 64AF 5F                               ld      e, a                // digit is returned as second from TOS
 356+ 64B0 21 01 00                         ld      hl, 1
 357+ 64B3
 358+ 64B3                                  psh2
 358+ 64B3 D5          >                push    de
 358+ 64B4 E5          >                push    hl
 358+ 64B5 DD E9       >                jp      (ix)
 359+ 64B7              Digit_Fail:
 360+ 64B7 21 00 00                     ld      hl, 0
 361+ 64BA                              psh1
 361+ 64BA E5          >                push    hl
 361+ 64BB DD E9       >                jp      (ix)
 362+ 64BD
 363+ 64BD              //  ______________________________________________________________________
 364+ 64BD              //
 365+ 64BD              //  parametric uppercase routine
 366+ 64BD              //  depending on the following op-code the routine can be by-passed
 367+ 64BD              //  changing the behaviour of some callers.
 368+ 64BD              //  If it is "ret" then the system is Case-Sensitive
 369+ 64BD              //  If it is "Nop" then the system is Case-Insensitive
 370+ 64BD              //  Only A register is touched.
 371+ 64BD 00           Case_Sensitive: nop                         // Default is case-insensitive.
 372+ 64BE              Case_Upper:
 373+ 64BE FE 61                        cp      LC_A_CHAR           // lower-case "a"
 374+ 64C0 D8                           ret     c                   // no change if A < "a"
 375+ 64C1 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 376+ 64C3 D0                           ret     nc                  // no change if A > "z"
 377+ 64C4 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 378+ 64C6 C9                           ret
 379+ 64C7
 380+ 64C7              //  ______________________________________________________________________
 381+ 64C7              //
 382+ 64C7              //  caseon      --
 383+ 64C7              // set system case-sensitivity on
 384+ 64C7              // it patches a RET/NOP at the beginning of the uppercase-routine
 385+ 64C7                              New_Def CASEON, "CASEON", is_code, is_normal
 385+ 64C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 64C7             >
 385+ 64C7             >                // dummy db directives used to calculate length of namec
 385+ 64C7 43 41 53 45 >                db      "CASEON"
 385+ 64CB 4F 4E       >
 385+ 64CD             >len_NFA         defl    $ - temp_NFA
 385+ 64CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 64C7             >
 385+ 64C7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 64C8 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 385+ 64CC 4F 4E       >
 385+ 64CE             >                org     $-1                 // alter last byte of Name just above to set
 385+ 64CD CE          >                db      {b $} | END_BIT     // msb as name end
 385+ 64CE             >
 385+ 64CE 8D 64       >                dw      last_NFA            // Link to previous definition Name
 385+ 64D0             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 64D0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 385+ 64D0 ~           >
 385+ 64D0 ~           >
 385+ 64D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 64D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 64D0             >
 385+ 64D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 64D0 3E C9                        ld      a, $C9              // "ret"
 387+ 64D2 32 BD 64                     ld      (Case_Sensitive), a
 388+ 64D5                              next
 388+ 64D5 DD E9       >                jp      (ix)
 389+ 64D7
 390+ 64D7              //  ______________________________________________________________________
 391+ 64D7              //
 392+ 64D7              //  caseoff     --
 393+ 64D7              // set system case-sensitivity on
 394+ 64D7              // it patches a RET/NOP at the beginning of the uppercase-routine
 395+ 64D7                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 395+ 64D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 395+ 64D7             >
 395+ 64D7             >                // dummy db directives used to calculate length of namec
 395+ 64D7 43 41 53 45 >                db      "CASEOFF"
 395+ 64DB 4F 46 46    >
 395+ 64DE             >len_NFA         defl    $ - temp_NFA
 395+ 64DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 395+ 64D7             >
 395+ 64D7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 395+ 64D8 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 395+ 64DC 4F 46 46    >
 395+ 64DF             >                org     $-1                 // alter last byte of Name just above to set
 395+ 64DE C6          >                db      {b $} | END_BIT     // msb as name end
 395+ 64DF             >
 395+ 64DF C7 64       >                dw      last_NFA            // Link to previous definition Name
 395+ 64E1             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 395+ 64E1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 395+ 64E1 ~           >
 395+ 64E1 ~           >
 395+ 64E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 395+ 64E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 395+ 64E1             >
 395+ 64E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 396+ 64E1 3E 00                        ld      a, $00              // "nop"
 397+ 64E3 32 BD 64                     ld      (Case_Sensitive), a
 398+ 64E6                              next
 398+ 64E6 DD E9       >                jp      (ix)
 399+ 64E8
 400+ 64E8              //  ______________________________________________________________________
 401+ 64E8              //
 402+ 64E8              //  upper       c1 -- c1 | c2
 403+ 64E8              // character on top of stack is forced to Uppercase.
 404+ 64E8                              New_Def UPPER, "UPPER", is_code, is_normal
 404+ 64E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 64E8             >
 404+ 64E8             >                // dummy db directives used to calculate length of namec
 404+ 64E8 55 50 50 45 >                db      "UPPER"
 404+ 64EC 52          >
 404+ 64ED             >len_NFA         defl    $ - temp_NFA
 404+ 64ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 64E8             >
 404+ 64E8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 64E9 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 404+ 64ED 52          >
 404+ 64EE             >                org     $-1                 // alter last byte of Name just above to set
 404+ 64ED D2          >                db      {b $} | END_BIT     // msb as name end
 404+ 64EE             >
 404+ 64EE D7 64       >                dw      last_NFA            // Link to previous definition Name
 404+ 64F0             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 64F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 404+ 64F0 ~           >
 404+ 64F0 ~           >
 404+ 64F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 64F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 64F0             >
 404+ 64F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 64F0 E1                           pop     hl
 406+ 64F1 7D                           ld      a, l
 407+ 64F2 CD BE 64                     call    Case_Upper
 408+ 64F5 6F                           ld      l, a
 409+ 64F6
 410+ 64F6                              psh1
 410+ 64F6 E5          >                push    hl
 410+ 64F7 DD E9       >                jp      (ix)
 411+ 64F9
 412+ 64F9              //  ______________________________________________________________________
 413+ 64F9              //
 414+ 64F9              // (find)       addr voc -- addr 0 | cfa b 1
 415+ 64F9              // vocabulary search,
 416+ 64F9              // - voc is starting word's NFA
 417+ 64F9              // - addr is the string to be searched for
 418+ 64F9              // On success, it returns the CFA of found word, the first NFA byte
 419+ 64F9              // (which contains length and some flags) and a true flag.
 420+ 64F9              // On fail, a false flag  (no more: leaves addr unchanged)
 421+ 64F9                              New_Def C_FIND, "(FIND)", is_code, is_normal
 421+ 64F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 64F9             >
 421+ 64F9             >                // dummy db directives used to calculate length of namec
 421+ 64F9 28 46 49 4E >                db      "(FIND)"
 421+ 64FD 44 29       >
 421+ 64FF             >len_NFA         defl    $ - temp_NFA
 421+ 64FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 64F9             >
 421+ 64F9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 64FA 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 421+ 64FE 44 29       >
 421+ 6500             >                org     $-1                 // alter last byte of Name just above to set
 421+ 64FF A9          >                db      {b $} | END_BIT     // msb as name end
 421+ 6500             >
 421+ 6500 E8 64       >                dw      last_NFA            // Link to previous definition Name
 421+ 6502             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6502 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 6502 ~           >
 421+ 6502 ~           >
 421+ 6502             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6502             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6502             >
 421+ 6502             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6502                                                              // de has dictionary pointer
 423+ 6502 D1                               pop     de
 424+ 6503              Find_VocabularyLoop:
 425+ 6503 E1                               pop     hl                  // string pointer to search for
 426+ 6504 E5                               push    hl                  // keep it on stack too for the end.
 427+ 6505 1A                               ld      a, (de)             // save NFA length byte
 428+ 6506 08                               ex      af,af'              // for later use (!)
 429+ 6507 1A                               ld      a, (de)             // reload NFA length byte
 430+ 6508 AE                               xor     (hl)                // check if same length
 431+ 6509 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 432+ 650B                                  // word an text haven't the same length, skip to next vocabulary entry
 433+ 650B 20 2C                            jr      nz, Find_DifferentLenght
 434+ 650D
 435+ 650D              Find_ThisWord:  // begin loop
 436+ 650D 23                                   inc     hl
 437+ 650E 13                                   inc     de
 438+ 650F 1A                                   ld      a, (de)
 439+ 6510                                      // case insensitive option - begin
 440+ 6510 C5                                   push    bc
 441+ 6511 E6 80                                and     $80                 // split A in msb and the rest
 442+ 6513 47                                   ld      b, a
 443+ 6514 1A                                   ld      a, (de)
 444+ 6515 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 445+ 6517 CD BD 64                             call    Case_Sensitive      // uppercase routine
 446+ 651A 4F                                   ld      c, a
 447+ 651B 7E                                   ld      a, (hl)
 448+ 651C CD BD 64                             call    Case_Sensitive      // uppercase routine
 449+ 651F A9                                   xor     c
 450+ 6520 A8                                   xor     b
 451+ 6521 C1                                   pop     bc
 452+ 6522                                      // case insensitive option - end
 453+ 6522 87                                   add     a                   // ignore msb during compare
 454+ 6523 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 455+ 6525
 456+ 6525                                  // loop back until last byte msb is found set
 457+ 6525                                  // that bit marks the ending char of this word
 458+ 6525 30 E6                            jr      nc, Find_ThisWord
 459+ 6527
 460+ 6527                                  // match found !
 461+ 6527 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 462+ 652A 19                                   add     hl, de
 463+ 652B E3                                   ex      (sp), hl            // CFA on stack and drop addr
 464+ 652C 08                                   ex      af, af'             // retrieve NFA byte (!)
 465+ 652D 5F                                   ld      e, a
 466+ 652E 16 00                                ld      d, 0
 467+ 6530
 468+ 6530
 469+ 6530 21 01 00                             ld      hl, 1
 470+ 6533                                      psh2
 470+ 6533 D5          >                push    de
 470+ 6534 E5          >                push    hl
 470+ 6535 DD E9       >                jp      (ix)
 471+ 6537
 472+ 6537              Find_DidntMatch: // didn't match (*)
 473+ 6537 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 474+ 6539
 475+ 6539              Find_DifferentLenght:
 476+ 6539                              // consume chars until the end of the word
 477+ 6539                              // that is last byte msb is found set
 478+ 6539 13                               inc     de
 479+ 653A 1A                               ld      a, (de)
 480+ 653B 87                               add     a, a
 481+ 653C 30 FB                        jr      nc, Find_DifferentLenght
 482+ 653E
 483+ 653E              Find_WordEnd:   // word-end  found (**)
 484+ 653E                              // take LFA and use it
 485+ 653E 13                           inc     de
 486+ 653F EB                           ex      de, hl
 487+ 6540 5E                           ld      e, (hl)
 488+ 6541 23                           inc     hl
 489+ 6542 56                           ld      d, (hl)
 490+ 6543 7A                           ld      a, d
 491+ 6544 B3                           or      e
 492+ 6545
 493+ 6545                          // loop until end of vocabulary
 494+ 6545 20 BC                    jr      nz, Find_VocabularyLoop
 495+ 6547
 496+ 6547 E1                       pop     hl              // with this, it leaves addr unchanged
 497+ 6548 21 00 00                 ld      hl, FALSE_FLAG
 498+ 654B
 499+ 654B                          psh1
 499+ 654B E5          >                push    hl
 499+ 654C DD E9       >                jp      (ix)
 500+ 654E
 501+ 654E              //  ______________________________________________________________________
 502+ 654E              //
 503+ 654E              // enclose      a c -- a  n1 n2 n3
 504+ 654E              // starting from a, using delimiter c, determines the offsets:
 505+ 654E              //   n1   the first character non-delimiter
 506+ 654E              //   n2   the first delimiter after the text
 507+ 654E              //   n3   the first character non enclosed.
 508+ 654E              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 509+ 654E              // an uncoditional delimiter.
 510+ 654E              // Examples:
 511+ 654E              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 512+ 654E              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 513+ 654E              // iii:	c  c  'nul'          -- 2  3  2
 514+ 654E                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 514+ 654E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 514+ 654E             >
 514+ 654E             >                // dummy db directives used to calculate length of namec
 514+ 654E 45 4E 43 4C >                db      "ENCLOSE"
 514+ 6552 4F 53 45    >
 514+ 6555             >len_NFA         defl    $ - temp_NFA
 514+ 6555             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 514+ 654E             >
 514+ 654E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 514+ 654F 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 514+ 6553 4F 53 45    >
 514+ 6556             >                org     $-1                 // alter last byte of Name just above to set
 514+ 6555 C5          >                db      {b $} | END_BIT     // msb as name end
 514+ 6556             >
 514+ 6556 F9 64       >                dw      last_NFA            // Link to previous definition Name
 514+ 6558             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 514+ 6558 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 514+ 6558 ~           >
 514+ 6558 ~           >
 514+ 6558             >                endif           ; ok        // for other definitions it "points" the correct handler
 514+ 6558             >                // Use of "; ok" to suppress "warning[fwdref]"
 514+ 6558             >
 514+ 6558             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 6558 D1                           pop     de                  //  e has the character
 516+ 6559 E1                           pop     hl                  // hl has the string address
 517+ 655A E5                           push    hl
 518+ 655B 7B                           ld      a, e
 519+ 655C 11 FF FF                     ld      de, -1              // let's start from -1
 520+ 655F 2B                           dec     hl
 521+ 6560              Enclose_NonDelimiter:
 522+ 6560                              // find first non delimiter
 523+ 6560 23                               inc     hl
 524+ 6561 13                               inc     de
 525+ 6562 BE                               cp      (hl)
 526+ 6563 28 FB                        jr      z, Enclose_NonDelimiter
 527+ 6565 D5                           push    de
 528+ 6566
 529+ 6566 C5                           push    bc                  // save Instruction Pointer
 530+ 6567
 531+ 6567 4F                           ld      c, a                // save char
 532+ 6568 7E                           ld      a, (hl)
 533+ 6569 A7                           and     a                   // stop if 0x00
 534+ 656A 20 07                        jr      nz, Enclose_NextChar
 535+ 656C
 536+ 656C                              /// case iii. no more character in string
 537+ 656C C1                               pop     bc                  // restore Instruction Pointer
 538+ 656D 13                               inc     de
 539+ 656E D5                               push    de
 540+ 656F 1B                               dec     de
 541+ 6570 D5                               push    de
 542+ 6571                                  next
 542+ 6571 DD E9       >                jp      (ix)
 543+ 6573              Enclose_NextChar:
 544+ 6573 79                               ld      a, c
 545+ 6574 23                               inc     hl
 546+ 6575 13                               inc     de
 547+ 6576 BE                               cp      (hl)
 548+ 6577 20 06                            jr      nz, Enclose_NonSeparator
 549+ 6579
 550+ 6579                                      // case i. first non enclosed
 551+ 6579 C1                                   pop     bc                  // restore Instruction Pointer
 552+ 657A D5                                   push    de
 553+ 657B 13                                   inc     de
 554+ 657C D5                                   push    de
 555+ 657D                                      next
 555+ 657D DD E9       >                jp      (ix)
 556+ 657F              Enclose_NonSeparator:
 557+ 657F 7E                               ld      a, (hl)
 558+ 6580 A7                               and     a
 559+ 6581 20 F0                        jr      nz, Enclose_NextChar
 560+ 6583
 561+ 6583                              // case ii. separator & terminator
 562+ 6583 C1                           pop     bc                  // restore Instruction Pointer
 563+ 6584 D5                           push    de
 564+ 6585 D5                           push    de
 565+ 6586                              next
 565+ 6586 DD E9       >                jp      (ix)
 566+ 6588
 567+ 6588              //  ______________________________________________________________________
 568+ 6588              //
 569+ 6588              // (map)        a2 a1 n c1 -- c2
 570+ 6588              // translate character c1 using mapping string a2 and a2
 571+ 6588              // if c1 is not present within string a1 then
 572+ 6588              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 573+ 6588                              New_Def C_MAP, "(MAP)", is_code, is_normal
 573+ 6588             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 573+ 6588             >
 573+ 6588             >                // dummy db directives used to calculate length of namec
 573+ 6588 28 4D 41 50 >                db      "(MAP)"
 573+ 658C 29          >
 573+ 658D             >len_NFA         defl    $ - temp_NFA
 573+ 658D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 573+ 6588             >
 573+ 6588 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 573+ 6589 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 573+ 658D 29          >
 573+ 658E             >                org     $-1                 // alter last byte of Name just above to set
 573+ 658D A9          >                db      {b $} | END_BIT     // msb as name end
 573+ 658E             >
 573+ 658E 4E 65       >                dw      last_NFA            // Link to previous definition Name
 573+ 6590             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 573+ 6590 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 573+ 6590 ~           >
 573+ 6590 ~           >
 573+ 6590             >                endif           ; ok        // for other definitions it "points" the correct handler
 573+ 6590             >                // Use of "; ok" to suppress "warning[fwdref]"
 573+ 6590             >
 573+ 6590             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 574+ 6590 D9                           exx
 575+ 6591 E1                           pop     hl
 576+ 6592 7D                           ld      a, l
 577+ 6593 C1                           pop     bc
 578+ 6594 E1                           pop     hl
 579+ 6595 50                           ld      d, b
 580+ 6596 59                           ld      e, c
 581+ 6597 ED B1                        cpir
 582+ 6599 E1                           pop     hl
 583+ 659A 20 05                        jr      nz, C_Map_Then
 583+ 659C
 584+ 659C 19                               add     hl, de
 585+ 659D 2B                               dec     hl
 586+ 659E ED 42                            sbc     hl, bc
 587+ 65A0 7E                               ld      a, (hl)
 588+ 65A1              C_Map_Then:
 589+ 65A1 6F                           ld      l, a
 590+ 65A2 26 00                        ld      h, 0
 591+ 65A4 E5                           push    hl
 592+ 65A5 D9                           exx
 593+ 65A6                              next
 593+ 65A6 DD E9       >                jp      (ix)
 594+ 65A8
 595+ 65A8              //  ______________________________________________________________________
 596+ 65A8              //
 597+ 65A8              // (compare)    a1 a2 n -- b
 598+ 65A8              // this word performs a lexicographic compare of n bytes of text at address a1
 599+ 65A8              // with n bytes of text at address a2. It returns numeric a value:
 600+ 65A8              //  0 : if strings are equal
 601+ 65A8              // +1 : if string at a1 greater than string at a2
 602+ 65A8              // -1 : if string at a1 less than string at a2
 603+ 65A8              // strings can be 256 bytes in length at most.
 604+ 65A8                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 604+ 65A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 604+ 65A8             >
 604+ 65A8             >                // dummy db directives used to calculate length of namec
 604+ 65A8 28 43 4F 4D >                db      "(COMPARE)"
 604+ 65AC 50 41 52 45 >
 604+ 65B0 29          >
 604+ 65B1             >len_NFA         defl    $ - temp_NFA
 604+ 65B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 604+ 65A8             >
 604+ 65A8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 604+ 65A9 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 604+ 65AD 50 41 52 45 >
 604+ 65B1 29          >
 604+ 65B2             >                org     $-1                 // alter last byte of Name just above to set
 604+ 65B1 A9          >                db      {b $} | END_BIT     // msb as name end
 604+ 65B2             >
 604+ 65B2 88 65       >                dw      last_NFA            // Link to previous definition Name
 604+ 65B4             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 604+ 65B4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 604+ 65B4 ~           >
 604+ 65B4 ~           >
 604+ 65B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 604+ 65B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 604+ 65B4             >
 604+ 65B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 605+ 65B4 D9                           exx
 606+ 65B5 E1                           pop     hl                  // Number of bytes
 607+ 65B6 7D                           ld      a, l
 608+ 65B7 E1                           pop     hl                  // hl points string a2
 609+ 65B8 D1                           pop     de                  // hl points string a1
 610+ 65B9              //              push    bc                  // Instruction pointer on stack
 611+ 65B9 47                           ld      b, a
 612+ 65BA              C_Compare_Loop:
 613+ 65BA 7E                               ld      a, (hl)
 614+ 65BB CD BD 64                         call    Case_Sensitive
 615+ 65BE 4F                               ld      c, a
 616+ 65BF 1A                               ld      a, (de)
 617+ 65C0 CD BD 64                         call    Case_Sensitive
 618+ 65C3 B9                               cp      c
 619+ 65C4 13                               inc     de
 620+ 65C5 23                               inc     hl
 621+ 65C6 28 0E                            jr      z, C_Compare_Equal
 622+ 65C8 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 623+ 65CA 21 01 00                                 ld      hl, 1               // a1 gt a2
 624+ 65CD 18 03                                jr      C_Compare_Then      // Else
 625+ 65CF              C_Compare_NotLessThan:
 626+ 65CF 21 FF FF                                 ld      hl, -1              // a1 lt a2
 627+ 65D2              C_Compare_Then:                                 // Endif
 628+ 65D2              //                      pop     bc              // restore Instruction Pointer
 629+ 65D2 E5                                   push    hl
 630+ 65D3 D9                                   exx
 631+ 65D4
 632+ 65D4                                      next
 632+ 65D4 DD E9       >                jp      (ix)
 633+ 65D6
 634+ 65D6              C_Compare_Equal:
 635+ 65D6 10 E2                        djnz    C_Compare_Loop
 636+ 65D8 21 00 00                     ld      hl, 0               // a1 eq a2
 637+ 65DB              //              pop     bc                  // restore Instruction Pointer
 638+ 65DB E5                           push    hl
 639+ 65DC D9                           exx
 640+ 65DD
 641+ 65DD                              next
 641+ 65DD DD E9       >                jp      (ix)
 642+ 65DF
 643+ 65DF              //  ______________________________________________________________________
 644+ 65DF              //
 645+ 65DF              // emitc        c --
 646+ 65DF              // low level emit, calls ROM routine at #10 to send a character to
 647+ 65DF              // the the current channel (see SELECT to change stream-channel)
 648+ 65DF                              New_Def EMITC, "EMITC", is_code, is_normal
 648+ 65DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 648+ 65DF             >
 648+ 65DF             >                // dummy db directives used to calculate length of namec
 648+ 65DF 45 4D 49 54 >                db      "EMITC"
 648+ 65E3 43          >
 648+ 65E4             >len_NFA         defl    $ - temp_NFA
 648+ 65E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 648+ 65DF             >
 648+ 65DF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 648+ 65E0 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 648+ 65E4 43          >
 648+ 65E5             >                org     $-1                 // alter last byte of Name just above to set
 648+ 65E4 C3          >                db      {b $} | END_BIT     // msb as name end
 648+ 65E5             >
 648+ 65E5 A8 65       >                dw      last_NFA            // Link to previous definition Name
 648+ 65E7             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 648+ 65E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 648+ 65E7 ~           >
 648+ 65E7 ~           >
 648+ 65E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 648+ 65E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 648+ 65E7             >
 648+ 65E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 649+ 65E7 E1                           pop     hl
 650+ 65E8 7D                           ld      a, l
 651+ 65E9              Emitc_Ptr:
 652+ 65E9 C5                           push    bc
 653+ 65EA DD E5                        push    ix
 654+ 65EC D7                           rst     $10
 655+ 65ED DD E1                        pop     ix
 656+ 65EF C1                           pop     bc
 657+ 65F0 3E FF                        ld      a, 255            // max possible
 658+ 65F2 32 8C 5C                     ld      (SCR_CT), a
 659+ 65F5
 660+ 65F5                              next
 660+ 65F5 DD E9       >                jp      (ix)
 661+ 65F7
 662+ 65F7              //  ______________________________________________________________________
 663+ 65F7              //
 664+ 65F7              // cr           --
 665+ 65F7              // send a CR via EMITC
 666+ 65F7                              New_Def CR, "CR", is_code, is_normal
 666+ 65F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 666+ 65F7             >
 666+ 65F7             >                // dummy db directives used to calculate length of namec
 666+ 65F7 43 52       >                db      "CR"
 666+ 65F9             >len_NFA         defl    $ - temp_NFA
 666+ 65F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 666+ 65F7             >
 666+ 65F7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 666+ 65F8 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 666+ 65FA             >                org     $-1                 // alter last byte of Name just above to set
 666+ 65F9 D2          >                db      {b $} | END_BIT     // msb as name end
 666+ 65FA             >
 666+ 65FA DF 65       >                dw      last_NFA            // Link to previous definition Name
 666+ 65FC             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 666+ 65FC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 666+ 65FC ~           >
 666+ 65FC ~           >
 666+ 65FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 666+ 65FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 666+ 65FC             >
 666+ 65FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 667+ 65FC
 668+ 65FC 3E 0D                        ld      a, CR_CHAR
 669+ 65FE 18 E9                        jr      Emitc_Ptr
 670+ 6600
 671+ 6600              Emitc_Vec:
 672+ 6600 43 66                        dw      C_Emit_Printable  // comma
 673+ 6602 49 66                        dw      C_Emit_Bel        // bel
 674+ 6604 43 66                        dw      C_Emit_Printable  // bs
 675+ 6606 5E 66                        dw      C_Emit_Tab        // tab
 676+ 6608 43 66                        dw      C_Emit_Printable  // cr
 677+ 660A 64 66                        dw      C_Emit_NL         // lf (unix newline)
 678+ 660C 43 66                        dw      C_Emit_Printable  // blank
 679+ 660E 43 66                        dw      C_Emit_Printable  // blank
 680+ 6610
 681+ 6610              Emit_Selector_Start:
 682+ 6610 06                           db      $06                 // comma
 683+ 6611 07                           db      $07                 // bel
 684+ 6612 08                           db      $08                 // bs
 685+ 6613 09                           db      $09                 // tab
 686+ 6614 0D                           db      $0D                 // cr
 687+ 6615 0A                           db      $0A                 // lf (unix newline)
 688+ 6616 20                           db      $20
 689+ 6617              Emit_Selector_End:
 690+ 6617 20                           db      $20
 691+ 6618
 692+ 6618              //  ______________________________________________________________________
 693+ 6618              //
 694+ 6618              // (?emit)      c1 -- c2 | c1
 695+ 6618              // decode a character to be sent via EMIT
 696+ 6618              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 697+ 6618              // the routine should resolve anything and convert the character anyway.
 698+ 6618                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 698+ 6618             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 698+ 6618             >
 698+ 6618             >                // dummy db directives used to calculate length of namec
 698+ 6618 28 3F 45 4D >                db      "(?EMIT)"
 698+ 661C 49 54 29    >
 698+ 661F             >len_NFA         defl    $ - temp_NFA
 698+ 661F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 698+ 6618             >
 698+ 6618 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 698+ 6619 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 698+ 661D 49 54 29    >
 698+ 6620             >                org     $-1                 // alter last byte of Name just above to set
 698+ 661F A9          >                db      {b $} | END_BIT     // msb as name end
 698+ 6620             >
 698+ 6620 F7 65       >                dw      last_NFA            // Link to previous definition Name
 698+ 6622             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 698+ 6622 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 698+ 6622 ~           >
 698+ 6622 ~           >
 698+ 6622             >                endif           ; ok        // for other definitions it "points" the correct handler
 698+ 6622             >                // Use of "; ok" to suppress "warning[fwdref]"
 698+ 6622             >
 698+ 6622             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 699+ 6622 D1                           pop     de
 700+ 6623 7B                           ld      a, e                //  de has c1
 701+ 6624 E6 7F                        and     $7F                 // 7-bit ascii only
 702+ 6626 C5                           push    bc                  // save Instruction Pointer
 703+ 6627 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 704+ 662A 21 17 66                     ld      hl, Emit_Selector_End
 705+ 662D ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 706+ 662F 20 0B                        jr      nz, C_Emit_Not_Found
 707+ 6631                                  // Found then decode it
 708+ 6631 21 00 66                         ld      hl, Emitc_Vec
 709+ 6634 09                               add     hl, bc
 710+ 6635 09                               add     hl, bc
 711+ 6636 5E                               ld      e, (hl)
 712+ 6637 23                               inc     hl
 713+ 6638 56                               ld      d, (hl)
 714+ 6639 EB                               ex      de, hl
 715+ 663A C1                               pop     bc                  // restore Instruction Pointer
 716+ 663B E9                               jp      (hl)                // one of the following labels
 717+ 663C              C_Emit_Not_Found:
 718+ 663C C1                           pop     bc                  // restore Instruction Pointer
 719+ 663D FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 720+ 663F 30 02                        jr      nc, C_Emit_Printable
 721+ 6641 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 722+ 6643              C_Emit_Printable:
 723+ 6643 6F                           ld      l, a
 724+ 6644 26 00                        ld      h, 0
 725+ 6646
 726+ 6646                              psh1
 726+ 6646 E5          >                push    hl
 726+ 6647 DD E9       >                jp      (ix)
 727+ 6649
 728+ 6649              C_Emit_Bel:
 729+ 6649 C5                           push    bc                  // save Instruction Pointer
 730+ 664A 11 00 01                     ld      de, $0100
 731+ 664D 21 00 02                     ld      hl, $0200
 732+ 6650 DD E5                        push    ix                  // save Next Pointer
 733+ 6652 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 734+ 6655 DD E1                        pop     ix                  // restore Next Pointer
 735+ 6657 C1                           pop     bc                  // restore Instruction Pointer
 736+ 6658 21 00 00                     ld      hl, NUL_CHAR
 737+ 665B
 738+ 665B                              psh1
 738+ 665B E5          >                push    hl
 738+ 665C DD E9       >                jp      (ix)
 739+ 665E
 740+ 665E 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 741+ 6661
 742+ 6661                              psh1
 742+ 6661 E5          >                push    hl
 742+ 6662 DD E9       >                jp      (ix)
 743+ 6664
 744+ 6664 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 745+ 6667
 746+ 6667                              psh1
 746+ 6667 E5          >                push    hl
 746+ 6668 DD E9       >                jp      (ix)
 747+ 666A
 748+ 666A              //  ______________________________________________________________________
 749+ 666A
 750+ 666A              Key_Table:
 751+ 666A E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 752+ 666B C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 753+ 666C CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 754+ 666D CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 755+ 666E CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 756+ 666F C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 757+ 6670 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 758+ 6671 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 759+ 6672 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 760+ 6673 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 761+ 6674 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 762+ 6675              Key_MapTo:
 763+ 6675 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 764+ 6676 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 765+ 6677 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 766+ 6678 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 767+ 6679 5D                           db      $5D                 //  6: SYMBOL+U : ]
 768+ 667A 5B                           db      $5B                 //  5: SYMBOL+Y : [
 769+ 667B 7D                           db      $7D                 //  4: SYMBOL+G : }
 770+ 667C 7B                           db      $7B                 //  3: SYMBOL+F : {
 771+ 667D 5C                           db      $5C                 //  2: SYMBOl+D : //
 772+ 667E 7C                           db      $7C                 //  1: SYMBOL+S : |
 773+ 667F 7E                           db      $7E                 //  0: SYMBOL+A : ~
 774+ 6680
 775+ 6680              //  ______________________________________________________________________
 776+ 6680              //
 777+ 6680              // key          -- c
 778+ 6680              // wait for a keypress
 779+ 6680              // This definition need Standard ROM Interrupt to be served
 780+ 6680
 781+ 6680                              New_Def KEY, "KEY", is_code, is_normal
 781+ 6680             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 781+ 6680             >
 781+ 6680             >                // dummy db directives used to calculate length of namec
 781+ 6680 4B 45 59    >                db      "KEY"
 781+ 6683             >len_NFA         defl    $ - temp_NFA
 781+ 6683             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 781+ 6680             >
 781+ 6680 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 781+ 6681 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 781+ 6684             >                org     $-1                 // alter last byte of Name just above to set
 781+ 6683 D9          >                db      {b $} | END_BIT     // msb as name end
 781+ 6684             >
 781+ 6684 18 66       >                dw      last_NFA            // Link to previous definition Name
 781+ 6686             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 781+ 6686 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 781+ 6686 ~           >
 781+ 6686 ~           >
 781+ 6686             >                endif           ; ok        // for other definitions it "points" the correct handler
 781+ 6686             >                // Use of "; ok" to suppress "warning[fwdref]"
 781+ 6686             >
 781+ 6686             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 782+ 6686
 783+ 6686 C5                           push    bc                  // save Instruction Pointer
 784+ 6687 DD E5                        push    ix
 785+ 6689
 786+ 6689 ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 787+ 668D 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 788+ 6690 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 789+ 6694
 790+ 6694              Key_Wait:
 791+ 6694 76                               halt
 792+ 6695 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 793+ 6697 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 794+ 669A
 795+ 669A                                  // software-flash: flips face every 320 ms
 796+ 669A 3E 10                            ld      a, $10              // Timing based
 797+ 669C FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 798+ 669F
 799+ 669F 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 800+ 66A2 20 0C                            jr      nz, Key_Cursor
 801+ 66A4 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 802+ 66A7 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 803+ 66AB 28 03                                jr      z, Key_Cursor
 804+ 66AD 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 805+ 66B0              Key_Cursor:
 806+ 66B0 D7                               rst     $10
 807+ 66B1 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 808+ 66B3 D7                               rst     $10
 809+ 66B4
 810+ 66B4 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 811+ 66B8 28 DA                        jr      z, Key_Wait
 812+ 66BA
 813+ 66BA 76                           halt    // this is to sync flashing cursor.
 814+ 66BB
 815+ 66BB 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 816+ 66BD D7                           rst     $10
 817+ 66BE 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 818+ 66C0 D7                           rst     $10
 819+ 66C1 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 820+ 66C4
 821+ 66C4                              // decode character from above table
 822+ 66C4 21 6A 66                     ld      hl, Key_Table
 823+ 66C7 01 0B 00                     ld      bc, $000B
 824+ 66CA ED B1                        cpir
 825+ 66CC 20 05                        jr      nz, Key_DontMap
 826+ 66CE 21 75 66                         ld      hl, Key_MapTo
 827+ 66D1 09                               add     hl, bc
 828+ 66D2 7E                               ld      a, (hl)
 829+ 66D3 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 830+ 66D5 20 09                        jr      nz, Key_NoCapsLock
 831+ 66D7 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 832+ 66DA 7E                               ld      a, (hl)
 833+ 66DB EE 08                            xor     $08
 834+ 66DD 77                               ld      (hl), a
 835+ 66DE 3E 00                            ld      a, NUL_CHAR
 836+ 66E0 6F           Key_NoCapsLock: ld      l, a
 837+ 66E1 26 00                        ld      h, 0                // Prepare TOS
 838+ 66E3
 839+ 66E3 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 840+ 66E6 1F                           rra
 841+ 66E7 1F                           rra
 842+ 66E8 1F                           rra
 843+ 66E9 F6 18                        or      $18                 // quick'n'dirty click
 844+ 66EB D3 FE                        out     ($fe), a
 845+ 66ED 06 00                        ld      b, 0
 846+ 66EF 10 FE                        djnz    $                   // wait loop
 847+ 66F1 EE 18                        xor     $18
 848+ 66F3 D3 FE                        out     ($fe), a
 849+ 66F5
 850+ 66F5 ED 7B 92 63                  ld      sp, (SP_Saved)
 851+ 66F9
 852+ 66F9 DD E1                        pop     ix
 853+ 66FB C1                           pop     bc                  // Restore Instruction Pointer
 854+ 66FC
 855+ 66FC                              psh1
 855+ 66FC E5          >                push    hl
 855+ 66FD DD E9       >                jp      (ix)
 856+ 66FF
 857+ 66FF              //  ______________________________________________________________________
 858+ 66FF              //
 859+ 66FF              // ?terminal    -- FALSE | TRUE
 860+ 66FF              // test for BREAK keypress
 861+ 66FF                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 861+ 66FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 861+ 66FF             >
 861+ 66FF             >                // dummy db directives used to calculate length of namec
 861+ 66FF 3F 54 45 52 >                db      "?TERMINAL"
 861+ 6703 4D 49 4E 41 >
 861+ 6707 4C          >
 861+ 6708             >len_NFA         defl    $ - temp_NFA
 861+ 6708             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 861+ 66FF             >
 861+ 66FF 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 861+ 6700 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 861+ 6704 4D 49 4E 41 >
 861+ 6708 4C          >
 861+ 6709             >                org     $-1                 // alter last byte of Name just above to set
 861+ 6708 CC          >                db      {b $} | END_BIT     // msb as name end
 861+ 6709             >
 861+ 6709 80 66       >                dw      last_NFA            // Link to previous definition Name
 861+ 670B             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 861+ 670B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 861+ 670B ~           >
 861+ 670B ~           >
 861+ 670B             >                endif           ; ok        // for other definitions it "points" the correct handler
 861+ 670B             >                // Use of "; ok" to suppress "warning[fwdref]"
 861+ 670B             >
 861+ 670B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 862+ 670B 21 00 00                     ld      hl, 0
 863+ 670E ED 73 92 63                  ld      (SP_Saved), sp
 864+ 6712 31 61 63                     ld      sp, Cold_origin - 5
 865+ 6715 CD 54 1F                     call    $1F54
 866+ 6718 ED 7B 92 63                  ld      sp, (SP_Saved)
 867+ 671C
 868+ 671C 38 01                        jr      c, QTerminal_NoBreak
 869+ 671E 2B                               dec     hl                  // quick TRUE_FLAG
 870+ 671F              QTerminal_NoBreak:
 871+ 671F
 872+ 671F                              psh1
 872+ 671F E5          >                push    hl
 872+ 6720 DD E9       >                jp      (ix)
 873+ 6722
 874+ 6722
 875+ 6722              //  ______________________________________________________________________
 876+ 6722              //
 877+ 6722              // inkey        -- c | 0
 878+ 6722              // call ROM inkey$ routine, returns c or "zero".
 879+ 6722
 880+ 6722                              New_Def INKEY, "INKEY", is_code, is_normal
 880+ 6722             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 880+ 6722             >
 880+ 6722             >                // dummy db directives used to calculate length of namec
 880+ 6722 49 4E 4B 45 >                db      "INKEY"
 880+ 6726 59          >
 880+ 6727             >len_NFA         defl    $ - temp_NFA
 880+ 6727             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 880+ 6722             >
 880+ 6722 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 880+ 6723 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 880+ 6727 59          >
 880+ 6728             >                org     $-1                 // alter last byte of Name just above to set
 880+ 6727 D9          >                db      {b $} | END_BIT     // msb as name end
 880+ 6728             >
 880+ 6728 FF 66       >                dw      last_NFA            // Link to previous definition Name
 880+ 672A             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 880+ 672A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 880+ 672A ~           >
 880+ 672A ~           >
 880+ 672A             >                endif           ; ok        // for other definitions it "points" the correct handler
 880+ 672A             >                // Use of "; ok" to suppress "warning[fwdref]"
 880+ 672A             >
 880+ 672A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 881+ 672A
 882+ 672A C5                           push    bc
 883+ 672B ED 73 92 63                  ld      (SP_Saved), sp
 884+ 672F 31 61 63                     ld      sp, Cold_origin - 5
 885+ 6732 DD E5                        push    ix
 886+ 6734 CD E6 15                     call    $15E6                   // instead of 15E9
 887+ 6737 DD E1                        pop     ix
 888+ 6739 ED 7B 92 63                  ld      sp, (SP_Saved)
 889+ 673D 6F                           ld      l, a
 890+ 673E 26 00                        ld      h, 0
 891+ 6740 C1                           pop     bc
 892+ 6741                              psh1
 892+ 6741 E5          >                push    hl
 892+ 6742 DD E9       >                jp      (ix)
 893+ 6744
 894+ 6744              //  ______________________________________________________________________
 895+ 6744              //
 896+ 6744              // select      n --
 897+ 6744              // selects the given channel number
 898+ 6744
 899+ 6744                              New_Def SELECT, "SELECT", is_code, is_normal
 899+ 6744             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 899+ 6744             >
 899+ 6744             >                // dummy db directives used to calculate length of namec
 899+ 6744 53 45 4C 45 >                db      "SELECT"
 899+ 6748 43 54       >
 899+ 674A             >len_NFA         defl    $ - temp_NFA
 899+ 674A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 899+ 6744             >
 899+ 6744 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 899+ 6745 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 899+ 6749 43 54       >
 899+ 674B             >                org     $-1                 // alter last byte of Name just above to set
 899+ 674A D4          >                db      {b $} | END_BIT     // msb as name end
 899+ 674B             >
 899+ 674B 22 67       >                dw      last_NFA            // Link to previous definition Name
 899+ 674D             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 899+ 674D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 899+ 674D ~           >
 899+ 674D ~           >
 899+ 674D             >                endif           ; ok        // for other definitions it "points" the correct handler
 899+ 674D             >                // Use of "; ok" to suppress "warning[fwdref]"
 899+ 674D             >
 899+ 674D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 900+ 674D E1                           pop     hl
 901+ 674E C5                           push    bc
 902+ 674F 7D                           ld      a, l
 903+ 6750 ED 73 92 63                  ld      (SP_Saved), sp
 904+ 6754 31 61 63                     ld      sp, Cold_origin - 5
 905+ 6757 DD E5                        push    ix
 906+ 6759 CD 01 16                     call    $1601
 907+ 675C DD E1                        pop     ix
 908+ 675E ED 7B 92 63                  ld      sp, (SP_Saved)
 909+ 6762 C1                           pop     bc
 910+ 6763
 911+ 6763                              next
 911+ 6763 DD E9       >                jp      (ix)
 912+ 6765
 913+ 6765              //  ______________________________________________________________________
 914+ 6765              //
 915+ 6765              // ZX Spectrum Next - Low Level disk primitives.
 916+ 6765              // this include is "here" for backward compatibility
 917+ 6765
 918+ 6765                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
   1++6765              //  ______________________________________________________________________
   2++6765              //
   3++6765              //  next-opt.asm
   4++6765              //
   5++6765              //  ZX Spectrum Next - peculiar definitions
   6++6765              //  ______________________________________________________________________
   7++6765
   8++6765              //  ______________________________________________________________________
   9++6765              //
  10++6765              // f_seek       d u -- f
  11++6765              // Seek to position d in file-handle u.
  12++6765              // Return a false-flag 0 on success, True flag on error
  13++6765                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++6765             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++6765             >
  13++6765             >                // dummy db directives used to calculate length of namec
  13++6765 46 5F 53 45 >                db      "F_SEEK"
  13++6769 45 4B       >
  13++676B             >len_NFA         defl    $ - temp_NFA
  13++676B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++6765             >
  13++6765 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++6766 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++676A 45 4B       >
  13++676C             >                org     $-1                 // alter last byte of Name just above to set
  13++676B CB          >                db      {b $} | END_BIT     // msb as name end
  13++676C             >
  13++676C 44 67       >                dw      last_NFA            // Link to previous definition Name
  13++676E             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++676E ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++676E ~           >
  13++676E ~           >
  13++676E             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++676E             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++676E             >
  13++676E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++676E E1                           pop     hl                  // file-handle
  15++676F 7D                           ld      a, l                // file-handle
  16++6770 60                           ld      h, b                // save Intruction Pointer
  17++6771 69                           ld      l, c
  18++6772 C1                           pop     bc                  // bc has high-word of d
  19++6773 D1                           pop     de
  20++6774 DD E5                        push    ix
  21++6776 E5                           push    hl                  // save Instruction Pointer
  22++6777 DD 21 00 00                  ld      ix, 0
  23++677B CF                           rst     $08
  24++677C 9F                           db      $9F
  25++677D              F_Seek_Exit:
  26++677D C1                           pop     bc                  // restore Instruction Pointer
  27++677E DD E1                        pop     ix
  28++6780 ED 62                        sbc     hl, hl              // to get 0 or -1
  29++6782
  30++6782                              psh1
  30++6782 E5          >                push    hl
  30++6783 DD E9       >                jp      (ix)
  31++6785
  32++6785              //  ______________________________________________________________________
  33++6785              //
  34++6785              // f_close      u -- f
  35++6785              // Close file-handle u.
  36++6785              // Return 0 on success, True flag on error
  37++6785
  38++6785                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++6785             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++6785             >
  38++6785             >                // dummy db directives used to calculate length of namec
  38++6785 46 5F 43 4C >                db      "F_CLOSE"
  38++6789 4F 53 45    >
  38++678C             >len_NFA         defl    $ - temp_NFA
  38++678C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++6785             >
  38++6785 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++6786 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++678A 4F 53 45    >
  38++678D             >                org     $-1                 // alter last byte of Name just above to set
  38++678C C5          >                db      {b $} | END_BIT     // msb as name end
  38++678D             >
  38++678D 65 67       >                dw      last_NFA            // Link to previous definition Name
  38++678F             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++678F ~           >                call    runcode ; ok        // for primitive definitions  actual code
  38++678F ~           >
  38++678F ~           >
  38++678F             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++678F             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++678F             >
  38++678F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++678F
  40++678F E1                           pop     hl
  41++6790 7D                           ld      a, l                // file-handle
  42++6791 DD E5                        push    ix
  43++6793 C5                           push    bc                  // Save Instruction pointer
  44++6794 CF                           rst     $08
  45++6795 9B                           db      $9B
  46++6796 18 E5                        jr      F_Seek_Exit
  47++6798              //              pop     bc
  48++6798              //              pop     ix
  49++6798              //              sbc     hl, hl
  50++6798              //              psh1
  51++6798
  52++6798              //  ______________________________________________________________________
  53++6798              //
  54++6798              // f_sync      u -- f
  55++6798              // Close file-handle u.
  56++6798              // Return 0 on success, True flag on error
  57++6798
  58++6798                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++6798             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++6798             >
  58++6798             >                // dummy db directives used to calculate length of namec
  58++6798 46 5F 53 59 >                db      "F_SYNC"
  58++679C 4E 43       >
  58++679E             >len_NFA         defl    $ - temp_NFA
  58++679E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++6798             >
  58++6798 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++6799 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++679D 4E 43       >
  58++679F             >                org     $-1                 // alter last byte of Name just above to set
  58++679E C3          >                db      {b $} | END_BIT     // msb as name end
  58++679F             >
  58++679F 85 67       >                dw      last_NFA            // Link to previous definition Name
  58++67A1             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++67A1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  58++67A1 ~           >
  58++67A1 ~           >
  58++67A1             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++67A1             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++67A1             >
  58++67A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++67A1 E1                           pop     hl
  60++67A2 7D                           ld      a, l                // file-handle
  61++67A3 DD E5                        push    ix
  62++67A5 C5                           push    bc
  63++67A6 CF                           rst     $08
  64++67A7 9C                           db      $9C
  65++67A8 18 D3                        jr      F_Seek_Exit
  66++67AA              //              pop     bc
  67++67AA              //              pop     ix
  68++67AA              //              sbc     hl, hl
  69++67AA              //              psh1
  70++67AA
  71++67AA              //  ______________________________________________________________________
  72++67AA              //
  73++67AA              // f_fgetpos    u -- d f
  74++67AA              // Seek to position d in file-handle u.
  75++67AA              // Return a false-flag 0 on success, True flag on error
  76++67AA                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++67AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++67AA             >
  76++67AA             >                // dummy db directives used to calculate length of namec
  76++67AA 46 5F 46 47 >                db      "F_FGETPOS"
  76++67AE 45 54 50 4F >
  76++67B2 53          >
  76++67B3             >len_NFA         defl    $ - temp_NFA
  76++67B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++67AA             >
  76++67AA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++67AB 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++67AF 45 54 50 4F >
  76++67B3 53          >
  76++67B4             >                org     $-1                 // alter last byte of Name just above to set
  76++67B3 D3          >                db      {b $} | END_BIT     // msb as name end
  76++67B4             >
  76++67B4 98 67       >                dw      last_NFA            // Link to previous definition Name
  76++67B6             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++67B6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  76++67B6 ~           >
  76++67B6 ~           >
  76++67B6             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++67B6             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++67B6             >
  76++67B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++67B6 E1                           pop     hl
  78++67B7 7D                           ld      a, l                // file-handle
  79++67B8 DD E5                        push    ix
  80++67BA C5                           push    bc
  81++67BB CF                           rst     $08
  82++67BC A0                           db      $A0
  83++67BD E1                           pop     hl                  // restore Instruction Pointer
  84++67BE DD E1                        pop     ix
  85++67C0 D5                           push    de
  86++67C1 C5                           push    bc
  87++67C2 44                           ld      b, h                // restore Instruction Pointer
  88++67C3 4D                           ld      c, l
  89++67C4 ED 62                        sbc     hl, hl
  90++67C6
  91++67C6                              psh1
  91++67C6 E5          >                push    hl
  91++67C7 DD E9       >                jp      (ix)
  92++67C9
  93++67C9              //  ______________________________________________________________________
  94++67C9              //
  95++67C9              // f_read       a b u -- n f
  96++67C9              // Read b bytes from file-handle u to address a
  97++67C9              // Return the actual number n of bytes read
  98++67C9              // Return 0 on success, True flag on error
  99++67C9                              New_Def F_READ, "F_READ", is_code, is_normal
  99++67C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++67C9             >
  99++67C9             >                // dummy db directives used to calculate length of namec
  99++67C9 46 5F 52 45 >                db      "F_READ"
  99++67CD 41 44       >
  99++67CF             >len_NFA         defl    $ - temp_NFA
  99++67CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++67C9             >
  99++67C9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++67CA 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++67CE 41 44       >
  99++67D0             >                org     $-1                 // alter last byte of Name just above to set
  99++67CF C4          >                db      {b $} | END_BIT     // msb as name end
  99++67D0             >
  99++67D0 AA 67       >                dw      last_NFA            // Link to previous definition Name
  99++67D2             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++67D2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  99++67D2 ~           >
  99++67D2 ~           >
  99++67D2             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++67D2             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++67D2             >
  99++67D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++67D2
 101++67D2 50                           ld      d, b
 102++67D3 59                           ld      e, c
 103++67D4 E1                           pop     hl
 104++67D5 7D                           ld      a, l                // file-handle
 105++67D6 C1                           pop     bc                  // bc has bytes to read
 106++67D7 DD E3                        ex      (sp), ix            // ix has address
 107++67D9 D5                           push    de                  // Save Instruction pointer
 108++67DA CF                           rst     $08
 109++67DB 9D                           db      $9D
 110++67DC              F_Read_Exit:
 111++67DC C1                           pop     bc                  // Restore Instruction pointer
 112++67DD DD E1                        pop     ix                  // Restore ix
 113++67DF D5                           push    de                  // bytes written
 114++67E0 ED 62                        sbc     hl, hl
 115++67E2
 116++67E2                              psh1
 116++67E2 E5          >                push    hl
 116++67E3 DD E9       >                jp      (ix)
 117++67E5
 118++67E5              //  ______________________________________________________________________
 119++67E5              //
 120++67E5              // f_write      a b u -- n f
 121++67E5              // Write bytes currently stored at address a to file-handle u.
 122++67E5              // Return the actual n bytes written and 0 on success, True flag on error.
 123++67E5                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++67E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++67E5             >
 123++67E5             >                // dummy db directives used to calculate length of namec
 123++67E5 46 5F 57 52 >                db      "F_WRITE"
 123++67E9 49 54 45    >
 123++67EC             >len_NFA         defl    $ - temp_NFA
 123++67EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++67E5             >
 123++67E5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++67E6 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++67EA 49 54 45    >
 123++67ED             >                org     $-1                 // alter last byte of Name just above to set
 123++67EC C5          >                db      {b $} | END_BIT     // msb as name end
 123++67ED             >
 123++67ED C9 67       >                dw      last_NFA            // Link to previous definition Name
 123++67EF             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++67EF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 123++67EF ~           >
 123++67EF ~           >
 123++67EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++67EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++67EF             >
 123++67EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++67EF
 125++67EF 50                           ld      d, b
 126++67F0 59                           ld      e, c
 127++67F1 E1                           pop     hl
 128++67F2 7D                           ld      a, l                // file-handle
 129++67F3 C1                           pop     bc                  // bc has bytes to read
 130++67F4 DD E3                        ex      (sp), ix            // ix has address
 131++67F6 D5                           push    de                  // Save Instruction pointer
 132++67F7 CF                           rst     $08
 133++67F8 9E                           db      $9E
 134++67F9 18 E1                        jr F_Read_Exit
 135++67FB              //              pop     bc                  // Restore Instruction pointer
 136++67FB              //              pop     ix                  // Restore ix
 137++67FB              //              push    de                  // bytes written
 138++67FB              //              sbc     hl, hl
 139++67FB              //
 140++67FB              //              psh1
 141++67FB
 142++67FB              //  ______________________________________________________________________
 143++67FB              //
 144++67FB              // f_open       a1 a2 b -- u f
 145++67FB              // open a file
 146++67FB              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++67FB              // a2 is address to an 8-byte header data used in some cases.
 148++67FB              // b is access mode-byte, that is a combination of:
 149++67FB              // any/all of:
 150++67FB              //   esx_mode_read          $01 request read access
 151++67FB              //   esx_mode_write         $02 request write access
 152++67FB              //   esx_mode_use_header    $40 read/write +3DOS header
 153++67FB              // plus one of:
 154++67FB              //   esx_mode_open_exist    $00 only open existing file
 155++67FB              //   esx_mode_open_creat    $08 open existing or create file
 156++67FB              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++67FB              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++67FB              // Return file-handle u and 0 on success, True flag on error
 159++67FB                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++67FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++67FB             >
 159++67FB             >                // dummy db directives used to calculate length of namec
 159++67FB 46 5F 4F 50 >                db      "F_OPEN"
 159++67FF 45 4E       >
 159++6801             >len_NFA         defl    $ - temp_NFA
 159++6801             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++67FB             >
 159++67FB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++67FC 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++6800 45 4E       >
 159++6802             >                org     $-1                 // alter last byte of Name just above to set
 159++6801 CE          >                db      {b $} | END_BIT     // msb as name end
 159++6802             >
 159++6802 E5 67       >                dw      last_NFA            // Link to previous definition Name
 159++6804             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++6804 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 159++6804 ~           >
 159++6804 ~           >
 159++6804             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++6804             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++6804             >
 159++6804             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++6804 60                           ld      h, b                // Save Instruction pointer
 161++6805 69                           ld      l, c
 162++6806 C1                           pop     bc                  // file-mode
 163++6807 41                           ld      b, c                // file-mode
 164++6808 D1                           pop     de                  // 8-bytes buffer if any
 165++6809 DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++680B E5                           push    hl                  // Save Instruction pointer
 167++680C 3E 2A                        ld      a, "*"
 168++680E CF                           rst     $08
 169++680F 9A                           db      $9A
 170++6810              F_Open_Exit:
 171++6810 C1                           pop     bc
 172++6811 DD E1                        pop     ix
 173++6813 ED 62                        sbc     hl, hl
 174++6815 5F                           ld      e, a
 175++6816 16 00                        ld      d, 0
 176++6818
 177++6818
 178++6818                              psh2
 178++6818 D5          >                push    de
 178++6819 E5          >                push    hl
 178++681A DD E9       >                jp      (ix)
 179++681C
 180++681C              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 181++681C              //   \ FILENAME 1+ PAD 1 F_OPEN
 182++681C              //   \ DROP
 183++681C              //   \ F_CLOSE
 184++681C
 185++681C
 186++681C              //  ______________________________________________________________________
 187++681C              //
 188++681C              // f_opendir    a1 a2 b -- u f
 189++681C              // open a file
 190++681C                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 190++681C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190++681C             >
 190++681C             >                // dummy db directives used to calculate length of namec
 190++681C 46 5F 4F 50 >                db      "F_OPENDIR"
 190++6820 45 4E 44 49 >
 190++6824 52          >
 190++6825             >len_NFA         defl    $ - temp_NFA
 190++6825             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190++681C             >
 190++681C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190++681D 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 190++6821 45 4E 44 49 >
 190++6825 52          >
 190++6826             >                org     $-1                 // alter last byte of Name just above to set
 190++6825 D2          >                db      {b $} | END_BIT     // msb as name end
 190++6826             >
 190++6826 FB 67       >                dw      last_NFA            // Link to previous definition Name
 190++6828             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190++6828 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190++6828 ~           >
 190++6828 ~           >
 190++6828             >                endif           ; ok        // for other definitions it "points" the correct handler
 190++6828             >                // Use of "; ok" to suppress "warning[fwdref]"
 190++6828             >
 190++6828             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191++6828 DD E3                        ex      (sp), ix            // filespec nul-terminated
 192++682A C5                           push    bc                  // Save Instruction pointer
 193++682B 06 10                        ld      b, $10              // file-mode
 194++682D 3E 43                        ld      a, "C"
 195++682F CF                           rst     $08
 196++6830 A3                           db      $A3
 197++6831 18 DD                        jr      F_Open_Exit
 198++6833
 199++6833
 200++6833              //  ______________________________________________________________________
 201++6833              //
 202++6833              // f_readdir    a1 a2 b -- u f
 203++6833              // open a file
 204++6833                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 204++6833             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204++6833             >
 204++6833             >                // dummy db directives used to calculate length of namec
 204++6833 46 5F 52 45 >                db      "F_READDIR"
 204++6837 41 44 44 49 >
 204++683B 52          >
 204++683C             >len_NFA         defl    $ - temp_NFA
 204++683C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204++6833             >
 204++6833 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204++6834 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 204++6838 41 44 44 49 >
 204++683C 52          >
 204++683D             >                org     $-1                 // alter last byte of Name just above to set
 204++683C D2          >                db      {b $} | END_BIT     // msb as name end
 204++683D             >
 204++683D 1C 68       >                dw      last_NFA            // Link to previous definition Name
 204++683F             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 204++683F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 204++683F ~           >
 204++683F ~           >
 204++683F             >                endif           ; ok        // for other definitions it "points" the correct handler
 204++683F             >                // Use of "; ok" to suppress "warning[fwdref]"
 204++683F             >
 204++683F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205++683F E1                           pop     hl
 206++6840 7D                           ld      a, l
 207++6841 D1                           pop     de
 208++6842 DD E3                        ex      (sp), ix            // filespec nul-terminated
 209++6844 C5                           push    bc                  // Save Instruction pointer
 210++6845 CF                           rst     $08
 211++6846 A4                           db      $A4
 212++6847 18 C7                        jr      F_Open_Exit
 213++6849
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
 919+ 6849
 920+ 6849
 921+ 6849              //  ______________________________________________________________________
 922+ 6849              //
 923+ 6849              // cmove    a1 a2 u --
 924+ 6849              // If u > 0, moves memory content starting at address a1 for n bytes long
 925+ 6849              // storing then starting at address addr2.
 926+ 6849              // The content of a1 is moved first. See CMOVE> also.
 927+ 6849                              New_Def CMOVE, "CMOVE", is_code, is_normal
 927+ 6849             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 927+ 6849             >
 927+ 6849             >                // dummy db directives used to calculate length of namec
 927+ 6849 43 4D 4F 56 >                db      "CMOVE"
 927+ 684D 45          >
 927+ 684E             >len_NFA         defl    $ - temp_NFA
 927+ 684E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 927+ 6849             >
 927+ 6849 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 927+ 684A 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 927+ 684E 45          >
 927+ 684F             >                org     $-1                 // alter last byte of Name just above to set
 927+ 684E C5          >                db      {b $} | END_BIT     // msb as name end
 927+ 684F             >
 927+ 684F 33 68       >                dw      last_NFA            // Link to previous definition Name
 927+ 6851             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 927+ 6851 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 927+ 6851 ~           >
 927+ 6851 ~           >
 927+ 6851             >                endif           ; ok        // for other definitions it "points" the correct handler
 927+ 6851             >                // Use of "; ok" to suppress "warning[fwdref]"
 927+ 6851             >
 927+ 6851             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 928+ 6851 D9                           exx
 929+ 6852
 930+ 6852 C1                           pop     bc                  // bc has counter
 931+ 6853 D1                           pop     de                  // de now has dest
 932+ 6854 E1                           pop     hl                 // hl has source, save Instruction Pointer
 933+ 6855 78                           ld      a, b
 934+ 6856 B1                           or      c
 935+ 6857 28 02                        jr      z, Cmove_NoMove
 936+ 6859 ED B0                            ldir
 937+ 685B              Cmove_NoMove:
 938+ 685B D9                           exx
 939+ 685C
 940+ 685C                              next
 940+ 685C DD E9       >                jp      (ix)
 941+ 685E
 942+ 685E              //  ______________________________________________________________________
 943+ 685E              //
 944+ 685E              // cmove>    a1 a2 u --
 945+ 685E              // If u > 0, moves memory content starting at address a1 for n bytes long
 946+ 685E              // storing then starting at address addr2.
 947+ 685E              // The content of a1 is moved last. See cmove.
 948+ 685E                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 948+ 685E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ 685E             >
 948+ 685E             >                // dummy db directives used to calculate length of namec
 948+ 685E 43 4D 4F 56 >                db      "CMOVE>"
 948+ 6862 45 3E       >
 948+ 6864             >len_NFA         defl    $ - temp_NFA
 948+ 6864             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ 685E             >
 948+ 685E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ 685F 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 948+ 6863 45 3E       >
 948+ 6865             >                org     $-1                 // alter last byte of Name just above to set
 948+ 6864 BE          >                db      {b $} | END_BIT     // msb as name end
 948+ 6865             >
 948+ 6865 49 68       >                dw      last_NFA            // Link to previous definition Name
 948+ 6867             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 6867 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 948+ 6867 ~           >
 948+ 6867 ~           >
 948+ 6867             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 6867             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 6867             >
 948+ 6867             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 6867 D9                           exx
 950+ 6868
 951+ 6868 C1                           pop     bc                  // bc has counter
 952+ 6869 D1                           pop     de                  // de has dest
 953+ 686A E1                           pop     hl                  // hl has source, save Instruction Pointer
 954+ 686B 78                           ld      a, b
 955+ 686C B1                           or      c
 956+ 686D 28 08                        jr      z, CmoveV_NoMove
 957+ 686F EB                               ex      de, hl              // compute address to
 958+ 6870 09                               add     hl, bc              // operate backward
 959+ 6871 2B                               dec     hl
 960+ 6872 EB                               ex      de, hl
 961+ 6873 09                               add     hl, bc
 962+ 6874 2B                               dec     hl
 963+ 6875 ED B8                            lddr                        // backward
 964+ 6877              CmoveV_NoMove:
 965+ 6877 D9                           exx
 966+ 6878
 967+ 6878                              next
 967+ 6878 DD E9       >                jp      (ix)
 968+ 687A
 969+ 687A              //  ______________________________________________________________________
 970+ 687A              //
 971+ 687A              // um*      u1 u2 -- ud
 972+ 687A              // Unsigned multiplication
 973+ 687A              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 974+ 687A              // On the stack a double number is treated as two single numbers
 975+ 687A              // where DE is on the top of the stack and HL is the second from top,
 976+ 687A              // Instead, in 2VARIABLE a double number is stored as EDLH.
 977+ 687A              // this definition could use "MUL" Z80N new op-code.
 978+ 687A                              New_Def UM_MUL, "UM*", is_code, is_normal
 978+ 687A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ 687A             >
 978+ 687A             >                // dummy db directives used to calculate length of namec
 978+ 687A 55 4D 2A    >                db      "UM*"
 978+ 687D             >len_NFA         defl    $ - temp_NFA
 978+ 687D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ 687A             >
 978+ 687A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ 687B 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 978+ 687E             >                org     $-1                 // alter last byte of Name just above to set
 978+ 687D AA          >                db      {b $} | END_BIT     // msb as name end
 978+ 687E             >
 978+ 687E 5E 68       >                dw      last_NFA            // Link to previous definition Name
 978+ 6880             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 6880 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 978+ 6880 ~           >
 978+ 6880 ~           >
 978+ 6880             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 6880             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 6880             >
 978+ 6880             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 6880 D9                           exx
 980+ 6881 D1                           pop     de                    // de has u2 operand
 981+ 6882 E1                           pop     hl                    // hl has u1 operand
 982+ 6883 45                           ld      b, l
 983+ 6884 4B                           ld      c, e
 984+ 6885 5D                           ld      e, l
 985+ 6886 6A                           ld      l, d
 986+ 6887 E5                           push    hl
 987+ 6888 69                           ld      l, c
 988+ 6889 ED 30                        mul
 989+ 688B EB                           ex      de, hl
 990+ 688C ED 30                        mul
 991+ 688E AF                           xor     a
 992+ 688F 19                           add     hl, de
 993+ 6890 8F                           adc     a
 994+ 6891 59                           ld      e, c
 995+ 6892 50                           ld      d, b
 996+ 6893 ED 30                        mul
 997+ 6895 47                           ld      b, a
 998+ 6896 4C                           ld      c, h
 999+ 6897 7A                           ld      a, d
1000+ 6898 85                           add     l
1001+ 6899 67                           ld      h, a
1002+ 689A 6B                           ld      l, e
1003+ 689B D1                           pop     de
1004+ 689C ED 30                        mul
1005+ 689E EB                           ex      de, hl
1006+ 689F ED 4A                        adc     hl, bc
1007+ 68A1 D5                           push    de
1008+ 68A2 E5                           push    hl
1009+ 68A3 D9                           exx
1010+ 68A4                              next
1010+ 68A4 DD E9       >                jp      (ix)
1011+ 68A6
1012+ 68A6              //  ______________________________________________________________________
1013+ 68A6              //
1014+ 68A6              // um/mod      ud u1 -- q r
1015+ 68A6              // divides ud into u1 giving quotient q and remainder r
1016+ 68A6              // algorithm takes 16 bit at a time starting from msb
1017+ 68A6              // DE grows from lsb upward with quotient result
1018+ 68A6              // HL keeps the remainder at each stage of division
1019+ 68A6              // each loop 'lowers' the next binary digit to form the current dividend
1020+ 68A6                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1020+ 68A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1020+ 68A6             >
1020+ 68A6             >                // dummy db directives used to calculate length of namec
1020+ 68A6 55 4D 2F 4D >                db      "UM/MOD"
1020+ 68AA 4F 44       >
1020+ 68AC             >len_NFA         defl    $ - temp_NFA
1020+ 68AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1020+ 68A6             >
1020+ 68A6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1020+ 68A7 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1020+ 68AB 4F 44       >
1020+ 68AD             >                org     $-1                 // alter last byte of Name just above to set
1020+ 68AC C4          >                db      {b $} | END_BIT     // msb as name end
1020+ 68AD             >
1020+ 68AD 7A 68       >                dw      last_NFA            // Link to previous definition Name
1020+ 68AF             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1020+ 68AF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1020+ 68AF ~           >
1020+ 68AF ~           >
1020+ 68AF             >                endif           ; ok        // for other definitions it "points" the correct handler
1020+ 68AF             >                // Use of "; ok" to suppress "warning[fwdref]"
1020+ 68AF             >
1020+ 68AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1021+ 68AF D9                           exx
1022+ 68B0 C1                           pop     bc                      // divisor
1023+ 68B1
1024+ 68B1 E1                           pop     hl                      // < high part
1025+ 68B2 D1                           pop     de                      // < low part and
1026+ 68B3
1027+ 68B3 7D                           ld      a, l                    // check without changing arguments
1028+ 68B4 91                           sub     c                       // if divisor is greater than high part
1029+ 68B5 7C                           ld      a, h                    // so quotient will be in range
1030+ 68B6 98                           sbc     a, b
1031+ 68B7 30 23                        jr      nc, Um_DivMod_OutOfRange
1032+ 68B9 3E 10                            ld      a, 16
1033+ 68BB              Um_DivMod_Loop:
1034+ 68BB A7                                   and     a
1035+ 68BC CB 13                                rl      e
1036+ 68BE CB 12                                rl      d
1037+ 68C0 CB 15                                rl      l
1038+ 68C2 CB 14                                rl      h
1039+ 68C4 30 05                                jr      nc, Um_DivMod_Carry
1040+ 68C6 A7                                       and     a
1041+ 68C7 ED 42                                    sbc     hl, bc
1042+ 68C9 18 07                                jr      Um_DivMod_Endif    // else
1043+ 68CB              Um_DivMod_Carry:
1044+ 68CB A7                                       and     a
1045+ 68CC ED 42                                    sbc     hl, bc
1046+ 68CE 30 02                                    jr      nc, Um_DivMod_Endif
1047+ 68D0 09                                           add     hl, bc
1048+ 68D1 1B                                           dec     de
1049+ 68D2              Um_DivMod_Endif:                                   // endif
1050+ 68D2 13                                   inc     de
1051+ 68D3 3D                                   dec     a
1052+ 68D4 20 E5                            jr      nz, Um_DivMod_Loop
1053+ 68D6 EB                               ex      de, hl
1054+ 68D7              Um_DivMod_Bailout:
1055+ 68D7 D5                               push    de                  // de := remanider
1056+ 68D8 E5                               push    hl                  // hl := quotient
1057+ 68D9 D9                               exx
1058+ 68DA                                  next
1058+ 68DA DD E9       >                jp      (ix)
1059+ 68DC
1060+ 68DC              Um_DivMod_OutOfRange:
1061+ 68DC 21 FF FF                     ld      hl, -1
1062+ 68DF 54                           ld      d, h
1063+ 68E0 5D                           ld      e, l
1064+ 68E1 18 F4                        jr      Um_DivMod_Bailout
1065+ 68E3
1066+ 68E3              //  ______________________________________________________________________
1067+ 68E3              //
1068+ 68E3              // and          n1 n2 -- n3
1069+ 68E3              // bit logical AND. Returns n3 as n1 & n2
1070+ 68E3                              New_Def AND_OP, "AND", is_code, is_normal
1070+ 68E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1070+ 68E3             >
1070+ 68E3             >                // dummy db directives used to calculate length of namec
1070+ 68E3 41 4E 44    >                db      "AND"
1070+ 68E6             >len_NFA         defl    $ - temp_NFA
1070+ 68E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1070+ 68E3             >
1070+ 68E3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1070+ 68E4 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1070+ 68E7             >                org     $-1                 // alter last byte of Name just above to set
1070+ 68E6 C4          >                db      {b $} | END_BIT     // msb as name end
1070+ 68E7             >
1070+ 68E7 A6 68       >                dw      last_NFA            // Link to previous definition Name
1070+ 68E9             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1070+ 68E9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1070+ 68E9 ~           >
1070+ 68E9 ~           >
1070+ 68E9             >                endif           ; ok        // for other definitions it "points" the correct handler
1070+ 68E9             >                // Use of "; ok" to suppress "warning[fwdref]"
1070+ 68E9             >
1070+ 68E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1071+ 68E9 D1                           pop     de
1072+ 68EA E1                           pop     hl
1073+ 68EB 7B                           ld      a, e
1074+ 68EC A5                           and     l
1075+ 68ED 6F                           ld      l, a
1076+ 68EE 7A                           ld      a, d
1077+ 68EF A4                           and     h
1078+ 68F0 67                           ld      h, a
1079+ 68F1
1080+ 68F1                              psh1
1080+ 68F1 E5          >                push    hl
1080+ 68F2 DD E9       >                jp      (ix)
1081+ 68F4
1082+ 68F4              //  ______________________________________________________________________
1083+ 68F4              //
1084+ 68F4              // or           n1 n2 -- n3
1085+ 68F4              // bit logical OR. Returns n3 as n1 | n2
1086+ 68F4                              New_Def OR_OP, "OR", is_code, is_normal
1086+ 68F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1086+ 68F4             >
1086+ 68F4             >                // dummy db directives used to calculate length of namec
1086+ 68F4 4F 52       >                db      "OR"
1086+ 68F6             >len_NFA         defl    $ - temp_NFA
1086+ 68F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1086+ 68F4             >
1086+ 68F4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1086+ 68F5 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1086+ 68F7             >                org     $-1                 // alter last byte of Name just above to set
1086+ 68F6 D2          >                db      {b $} | END_BIT     // msb as name end
1086+ 68F7             >
1086+ 68F7 E3 68       >                dw      last_NFA            // Link to previous definition Name
1086+ 68F9             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1086+ 68F9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1086+ 68F9 ~           >
1086+ 68F9 ~           >
1086+ 68F9             >                endif           ; ok        // for other definitions it "points" the correct handler
1086+ 68F9             >                // Use of "; ok" to suppress "warning[fwdref]"
1086+ 68F9             >
1086+ 68F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1087+ 68F9 D1                           pop     de
1088+ 68FA E1                           pop     hl
1089+ 68FB 7B                           ld      a, e
1090+ 68FC B5                           or      l
1091+ 68FD 6F                           ld      l, a
1092+ 68FE 7A                           ld      a, d
1093+ 68FF B4                           or      h
1094+ 6900 67                           ld      h, a
1095+ 6901
1096+ 6901                              psh1
1096+ 6901 E5          >                push    hl
1096+ 6902 DD E9       >                jp      (ix)
1097+ 6904
1098+ 6904              //  ______________________________________________________________________
1099+ 6904              //
1100+ 6904              // xor          n1 n2 -- n3
1101+ 6904              // bit logical OR. Returns n3 as n1 ^ n2
1102+ 6904                              New_Def XOR_OP, "XOR", is_code, is_normal
1102+ 6904             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1102+ 6904             >
1102+ 6904             >                // dummy db directives used to calculate length of namec
1102+ 6904 58 4F 52    >                db      "XOR"
1102+ 6907             >len_NFA         defl    $ - temp_NFA
1102+ 6907             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1102+ 6904             >
1102+ 6904 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1102+ 6905 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1102+ 6908             >                org     $-1                 // alter last byte of Name just above to set
1102+ 6907 D2          >                db      {b $} | END_BIT     // msb as name end
1102+ 6908             >
1102+ 6908 F4 68       >                dw      last_NFA            // Link to previous definition Name
1102+ 690A             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1102+ 690A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1102+ 690A ~           >
1102+ 690A ~           >
1102+ 690A             >                endif           ; ok        // for other definitions it "points" the correct handler
1102+ 690A             >                // Use of "; ok" to suppress "warning[fwdref]"
1102+ 690A             >
1102+ 690A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1103+ 690A D1                           pop     de
1104+ 690B E1                           pop     hl
1105+ 690C 7B                           ld      a, e
1106+ 690D AD                           xor     l
1107+ 690E 6F                           ld      l, a
1108+ 690F 7A                           ld      a, d
1109+ 6910 AC                           xor     h
1110+ 6911 67                           ld      h, a
1111+ 6912
1112+ 6912                              psh1
1112+ 6912 E5          >                push    hl
1112+ 6913 DD E9       >                jp      (ix)
1113+ 6915
1114+ 6915              //  ______________________________________________________________________
1115+ 6915              //
1116+ 6915              // sp@      -- a
1117+ 6915              // returns on top of stack the value of SP before execution
1118+ 6915                              New_Def SPFETCH, "SP@", is_code, is_normal
1118+ 6915             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1118+ 6915             >
1118+ 6915             >                // dummy db directives used to calculate length of namec
1118+ 6915 53 50 40    >                db      "SP@"
1118+ 6918             >len_NFA         defl    $ - temp_NFA
1118+ 6918             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1118+ 6915             >
1118+ 6915 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1118+ 6916 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1118+ 6919             >                org     $-1                 // alter last byte of Name just above to set
1118+ 6918 C0          >                db      {b $} | END_BIT     // msb as name end
1118+ 6919             >
1118+ 6919 04 69       >                dw      last_NFA            // Link to previous definition Name
1118+ 691B             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1118+ 691B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1118+ 691B ~           >
1118+ 691B ~           >
1118+ 691B             >                endif           ; ok        // for other definitions it "points" the correct handler
1118+ 691B             >                // Use of "; ok" to suppress "warning[fwdref]"
1118+ 691B             >
1118+ 691B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1119+ 691B
1120+ 691B 21 00 00                     ld      hl, 0
1121+ 691E 39                           add     hl, sp
1122+ 691F
1123+ 691F                              psh1
1123+ 691F E5          >                push    hl
1123+ 6920 DD E9       >                jp      (ix)
1124+ 6922
1125+ 6922              //  ______________________________________________________________________
1126+ 6922              //
1127+ 6922              // sp!      a --
1128+ 6922              // restore SP to the initial value passed
1129+ 6922              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1130+ 6922                              New_Def SPSTORE, "SP!", is_code, is_normal
1130+ 6922             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1130+ 6922             >
1130+ 6922             >                // dummy db directives used to calculate length of namec
1130+ 6922 53 50 21    >                db      "SP!"
1130+ 6925             >len_NFA         defl    $ - temp_NFA
1130+ 6925             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1130+ 6922             >
1130+ 6922 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1130+ 6923 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1130+ 6926             >                org     $-1                 // alter last byte of Name just above to set
1130+ 6925 A1          >                db      {b $} | END_BIT     // msb as name end
1130+ 6926             >
1130+ 6926 15 69       >                dw      last_NFA            // Link to previous definition Name
1130+ 6928             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1130+ 6928 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1130+ 6928 ~           >
1130+ 6928 ~           >
1130+ 6928             >                endif           ; ok        // for other definitions it "points" the correct handler
1130+ 6928             >                // Use of "; ok" to suppress "warning[fwdref]"
1130+ 6928             >
1130+ 6928             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1131+ 6928 E1                           pop     hl
1132+ 6929 F9                           ld      sp, hl
1133+ 692A
1134+ 692A                              next
1134+ 692A DD E9       >                jp      (ix)
1135+ 692C
1136+ 692C              //  ______________________________________________________________________
1137+ 692C              //
1138+ 692C              // rp@      -- a
1139+ 692C              // returns on top of stack the value of Return-Pointer
1140+ 692C                              New_Def RPFETCH, "RP@", is_code, is_normal
1140+ 692C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1140+ 692C             >
1140+ 692C             >                // dummy db directives used to calculate length of namec
1140+ 692C 52 50 40    >                db      "RP@"
1140+ 692F             >len_NFA         defl    $ - temp_NFA
1140+ 692F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1140+ 692C             >
1140+ 692C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1140+ 692D 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1140+ 6930             >                org     $-1                 // alter last byte of Name just above to set
1140+ 692F C0          >                db      {b $} | END_BIT     // msb as name end
1140+ 6930             >
1140+ 6930 22 69       >                dw      last_NFA            // Link to previous definition Name
1140+ 6932             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1140+ 6932 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1140+ 6932 ~           >
1140+ 6932 ~           >
1140+ 6932             >                endif           ; ok        // for other definitions it "points" the correct handler
1140+ 6932             >                // Use of "; ok" to suppress "warning[fwdref]"
1140+ 6932             >
1140+ 6932             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1141+ 6932
1142+ 6932                              ldhlrp
1142+ 6932 2A 96 63    >                ld      hl,(RP_Pointer)
1143+ 6935
1144+ 6935                              psh1
1144+ 6935 E5          >                push    hl
1144+ 6936 DD E9       >                jp      (ix)
1145+ 6938
1146+ 6938              //  ______________________________________________________________________
1147+ 6938              //
1148+ 6938              // rp!      a --
1149+ 6938              // restore RP to the initial value passed
1150+ 6938              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1151+ 6938                              New_Def RPSTORE, "RP!", is_code, is_normal
1151+ 6938             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1151+ 6938             >
1151+ 6938             >                // dummy db directives used to calculate length of namec
1151+ 6938 52 50 21    >                db      "RP!"
1151+ 693B             >len_NFA         defl    $ - temp_NFA
1151+ 693B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1151+ 6938             >
1151+ 6938 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1151+ 6939 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1151+ 693C             >                org     $-1                 // alter last byte of Name just above to set
1151+ 693B A1          >                db      {b $} | END_BIT     // msb as name end
1151+ 693C             >
1151+ 693C 2C 69       >                dw      last_NFA            // Link to previous definition Name
1151+ 693E             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1151+ 693E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1151+ 693E ~           >
1151+ 693E ~           >
1151+ 693E             >                endif           ; ok        // for other definitions it "points" the correct handler
1151+ 693E             >                // Use of "; ok" to suppress "warning[fwdref]"
1151+ 693E             >
1151+ 693E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1152+ 693E E1                           pop     hl
1153+ 693F                              ldrphl
1153+ 693F 22 96 63    >                ld      (RP_Pointer),hl
1154+ 6942
1155+ 6942                              next
1155+ 6942 DD E9       >                jp      (ix)
1156+ 6944
1157+ 6944              //  ______________________________________________________________________
1158+ 6944              //
1159+ 6944              // exit       --
1160+ 6944              // exits back to the caller word
1161+ 6944                              New_Def EXIT, "EXIT", is_code, is_normal
1161+ 6944             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1161+ 6944             >
1161+ 6944             >                // dummy db directives used to calculate length of namec
1161+ 6944 45 58 49 54 >                db      "EXIT"
1161+ 6948             >len_NFA         defl    $ - temp_NFA
1161+ 6948             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1161+ 6944             >
1161+ 6944 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1161+ 6945 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1161+ 6949             >                org     $-1                 // alter last byte of Name just above to set
1161+ 6948 D4          >                db      {b $} | END_BIT     // msb as name end
1161+ 6949             >
1161+ 6949 38 69       >                dw      last_NFA            // Link to previous definition Name
1161+ 694B             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1161+ 694B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1161+ 694B ~           >
1161+ 694B ~           >
1161+ 694B             >                endif           ; ok        // for other definitions it "points" the correct handler
1161+ 694B             >                // Use of "; ok" to suppress "warning[fwdref]"
1161+ 694B             >
1161+ 694B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1162+ 694B                              ldhlrp                      // Get Return Stack Pointer
1162+ 694B 2A 96 63    >                ld      hl,(RP_Pointer)
1163+ 694E 4E                           ld      c, (hl)             // pop Instruction Pointer
1164+ 694F 23                           inc     hl                  // from Return Stack
1165+ 6950 46                           ld      b, (hl)
1166+ 6951 23                           inc     hl
1167+ 6952                              ldrphl                      // Set Return Stack Pointer
1167+ 6952 22 96 63    >                ld      (RP_Pointer),hl
1168+ 6955                              next
1168+ 6955 DD E9       >                jp      (ix)
1169+ 6957
1170+ 6957              //  ______________________________________________________________________
1171+ 6957              //
1172+ 6957              // lastl      --
1173+ 6957              // exits back to the caller word
1174+ 6957              //              New_Def EXIT, "LASTL", is_code, is_normal
1175+ 6957              //              ldhlrp                      // Get Return Stack Pointer
1176+ 6957              //              ld      e, (hl)             // pop Instruction Pointer
1177+ 6957              //              inc     hl                  // from Return Stack
1178+ 6957              //              ld      d, (hl)
1179+ 6957              //              inc     hl
1180+ 6957              //              ld      (hl), e
1181+ 6957              //              inc     hl
1182+ 6957              //              ld      (hl), d
1183+ 6957              //              next
1184+ 6957
1185+ 6957              //  ______________________________________________________________________
1186+ 6957              //
1187+ 6957              // >r      n --
1188+ 6957              // pop from calculator-stack and push into return-stack
1189+ 6957                              New_Def TO_R, ">R", is_code, is_normal
1189+ 6957             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1189+ 6957             >
1189+ 6957             >                // dummy db directives used to calculate length of namec
1189+ 6957 3E 52       >                db      ">R"
1189+ 6959             >len_NFA         defl    $ - temp_NFA
1189+ 6959             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1189+ 6957             >
1189+ 6957 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1189+ 6958 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1189+ 695A             >                org     $-1                 // alter last byte of Name just above to set
1189+ 6959 D2          >                db      {b $} | END_BIT     // msb as name end
1189+ 695A             >
1189+ 695A 44 69       >                dw      last_NFA            // Link to previous definition Name
1189+ 695C             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1189+ 695C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1189+ 695C ~           >
1189+ 695C ~           >
1189+ 695C             >                endif           ; ok        // for other definitions it "points" the correct handler
1189+ 695C             >                // Use of "; ok" to suppress "warning[fwdref]"
1189+ 695C             >
1189+ 695C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1190+ 695C D1                           pop     de
1191+ 695D                              ldhlrp
1191+ 695D 2A 96 63    >                ld      hl,(RP_Pointer)
1192+ 6960 2B                           dec     hl
1193+ 6961 72                           ld      (hl), d             // store current TOS
1194+ 6962 2B                           dec     hl                  // to Return Stack
1195+ 6963 73                           ld      (hl), e
1196+ 6964                              ldrphl
1196+ 6964 22 96 63    >                ld      (RP_Pointer),hl
1197+ 6967
1198+ 6967                              next
1198+ 6967 DD E9       >                jp      (ix)
1199+ 6969
1200+ 6969              //  ______________________________________________________________________
1201+ 6969              //
1202+ 6969              // r>      -- n
1203+ 6969              // pop from return-stack and push into calculator-stack
1204+ 6969                              New_Def R_TO, "R>", is_code, is_normal
1204+ 6969             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1204+ 6969             >
1204+ 6969             >                // dummy db directives used to calculate length of namec
1204+ 6969 52 3E       >                db      "R>"
1204+ 696B             >len_NFA         defl    $ - temp_NFA
1204+ 696B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1204+ 6969             >
1204+ 6969 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1204+ 696A 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1204+ 696C             >                org     $-1                 // alter last byte of Name just above to set
1204+ 696B BE          >                db      {b $} | END_BIT     // msb as name end
1204+ 696C             >
1204+ 696C 57 69       >                dw      last_NFA            // Link to previous definition Name
1204+ 696E             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1204+ 696E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1204+ 696E ~           >
1204+ 696E ~           >
1204+ 696E             >                endif           ; ok        // for other definitions it "points" the correct handler
1204+ 696E             >                // Use of "; ok" to suppress "warning[fwdref]"
1204+ 696E             >
1204+ 696E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1205+ 696E
1206+ 696E                              ldhlrp
1206+ 696E 2A 96 63    >                ld      hl,(RP_Pointer)
1207+ 6971 5E                           ld      e, (hl)             // retrieve from Return Stack
1208+ 6972 23                           inc     hl
1209+ 6973 56                           ld      d, (hl)
1210+ 6974 23                           inc     hl
1211+ 6975                              ldrphl
1211+ 6975 22 96 63    >                ld      (RP_Pointer),hl
1212+ 6978 D5                           push    de
1213+ 6979                              next
1213+ 6979 DD E9       >                jp      (ix)
1214+ 697B
1215+ 697B              //  ______________________________________________________________________
1216+ 697B              //
1217+ 697B              // r@           -- n
1218+ 697B              // return on top of stack the value of top of return-stack
1219+ 697B              // Since this is the same as I, we alter R's CFA to jump there
1220+ 697B                              New_Def R_OP, "R@", is_code, is_normal
1220+ 697B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1220+ 697B             >
1220+ 697B             >                // dummy db directives used to calculate length of namec
1220+ 697B 52 40       >                db      "R@"
1220+ 697D             >len_NFA         defl    $ - temp_NFA
1220+ 697D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1220+ 697B             >
1220+ 697B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1220+ 697C 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1220+ 697E             >                org     $-1                 // alter last byte of Name just above to set
1220+ 697D C0          >                db      {b $} | END_BIT     // msb as name end
1220+ 697E             >
1220+ 697E 69 69       >                dw      last_NFA            // Link to previous definition Name
1220+ 6980             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1220+ 6980 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1220+ 6980 ~           >
1220+ 6980 ~           >
1220+ 6980             >                endif           ; ok        // for other definitions it "points" the correct handler
1220+ 6980             >                // Use of "; ok" to suppress "warning[fwdref]"
1220+ 6980             >
1220+ 6980             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1221+ 6980 C3 78 64                     jp      I_Ptr
1222+ 6983
1223+ 6983              //  ______________________________________________________________________
1224+ 6983              //
1225+ 6983              // r            -- n
1226+ 6983              // return on top of stack the value of top of return-stack
1227+ 6983              // Since this is the same as I, we alter R's CFA to jump there
1228+ 6983              //              New_Def R_OLD, "R", is_code, is_normal
1229+ 6983              //              jp      I_Ptr
1230+ 6983
1231+ 6983              //  ______________________________________________________________________
1232+ 6983              //
1233+ 6983              // 0=           n -- f
1234+ 6983              // true (non zero) if n is zero, false (0) elsewere
1235+ 6983                              New_Def ZEQUAL, "0=", is_code, is_normal
1235+ 6983             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1235+ 6983             >
1235+ 6983             >                // dummy db directives used to calculate length of namec
1235+ 6983 30 3D       >                db      "0="
1235+ 6985             >len_NFA         defl    $ - temp_NFA
1235+ 6985             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1235+ 6983             >
1235+ 6983 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1235+ 6984 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1235+ 6986             >                org     $-1                 // alter last byte of Name just above to set
1235+ 6985 BD          >                db      {b $} | END_BIT     // msb as name end
1235+ 6986             >
1235+ 6986 7B 69       >                dw      last_NFA            // Link to previous definition Name
1235+ 6988             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1235+ 6988 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1235+ 6988 ~           >
1235+ 6988 ~           >
1235+ 6988             >                endif           ; ok        // for other definitions it "points" the correct handler
1235+ 6988             >                // Use of "; ok" to suppress "warning[fwdref]"
1235+ 6988             >
1235+ 6988             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1236+ 6988              Zero_Equal:
1237+ 6988 E1                           pop     hl
1238+ 6989 7D                           ld      a, l
1239+ 698A B4                           or      h
1240+ 698B 21 00 00                     ld      hl, FALSE_FLAG
1241+ 698E 20 01                        jr      nz, ZEqual_Skip
1242+ 6990 2B                               dec     hl
1243+ 6991              ZEqual_Skip:
1244+ 6991                              psh1
1244+ 6991 E5          >                push    hl
1244+ 6992 DD E9       >                jp      (ix)
1245+ 6994
1246+ 6994              //  ______________________________________________________________________
1247+ 6994              //
1248+ 6994              // not         a1 -- a2
1249+ 6994              // increment by 2 top of stack
1250+ 6994                              New_Def NOT_OP, "NOT", is_code, is_normal
1250+ 6994             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1250+ 6994             >
1250+ 6994             >                // dummy db directives used to calculate length of namec
1250+ 6994 4E 4F 54    >                db      "NOT"
1250+ 6997             >len_NFA         defl    $ - temp_NFA
1250+ 6997             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1250+ 6994             >
1250+ 6994 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1250+ 6995 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1250+ 6998             >                org     $-1                 // alter last byte of Name just above to set
1250+ 6997 D4          >                db      {b $} | END_BIT     // msb as name end
1250+ 6998             >
1250+ 6998 83 69       >                dw      last_NFA            // Link to previous definition Name
1250+ 699A             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1250+ 699A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1250+ 699A ~           >
1250+ 699A ~           >
1250+ 699A             >                endif           ; ok        // for other definitions it "points" the correct handler
1250+ 699A             >                // Use of "; ok" to suppress "warning[fwdref]"
1250+ 699A             >
1250+ 699A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1251+ 699A C3 88 69                     jp      Zero_Equal
1252+ 699D
1253+ 699D              //  ______________________________________________________________________
1254+ 699D              //
1255+ 699D              // 0<           n -- f
1256+ 699D              // true (non zero) if n is less than zero, false (0) elsewere
1257+ 699D                              New_Def ZLESS, "0<", is_code, is_normal
1257+ 699D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1257+ 699D             >
1257+ 699D             >                // dummy db directives used to calculate length of namec
1257+ 699D 30 3C       >                db      "0<"
1257+ 699F             >len_NFA         defl    $ - temp_NFA
1257+ 699F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1257+ 699D             >
1257+ 699D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1257+ 699E 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1257+ 69A0             >                org     $-1                 // alter last byte of Name just above to set
1257+ 699F BC          >                db      {b $} | END_BIT     // msb as name end
1257+ 69A0             >
1257+ 69A0 94 69       >                dw      last_NFA            // Link to previous definition Name
1257+ 69A2             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1257+ 69A2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1257+ 69A2 ~           >
1257+ 69A2 ~           >
1257+ 69A2             >                endif           ; ok        // for other definitions it "points" the correct handler
1257+ 69A2             >                // Use of "; ok" to suppress "warning[fwdref]"
1257+ 69A2             >
1257+ 69A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1258+ 69A2 E1                           pop     hl
1259+ 69A3 29                           add     hl, hl
1260+ 69A4 21 00 00                     ld      hl, 0
1261+ 69A7 30 01                        jr      nc, ZLess_Skip
1262+ 69A9 2B                               dec     hl
1263+ 69AA              ZLess_Skip:
1264+ 69AA                              psh1
1264+ 69AA E5          >                push    hl
1264+ 69AB DD E9       >                jp      (ix)
1265+ 69AD
1266+ 69AD              //  ______________________________________________________________________
1267+ 69AD              //
1268+ 69AD              // 0>           n -- f
1269+ 69AD              // true (non zero) if n is less than zero, false (0) elsewere
1270+ 69AD                              New_Def ZGREATER, "0>", is_code, is_normal
1270+ 69AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1270+ 69AD             >
1270+ 69AD             >                // dummy db directives used to calculate length of namec
1270+ 69AD 30 3E       >                db      "0>"
1270+ 69AF             >len_NFA         defl    $ - temp_NFA
1270+ 69AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1270+ 69AD             >
1270+ 69AD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1270+ 69AE 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1270+ 69B0             >                org     $-1                 // alter last byte of Name just above to set
1270+ 69AF BE          >                db      {b $} | END_BIT     // msb as name end
1270+ 69B0             >
1270+ 69B0 9D 69       >                dw      last_NFA            // Link to previous definition Name
1270+ 69B2             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1270+ 69B2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1270+ 69B2 ~           >
1270+ 69B2 ~           >
1270+ 69B2             >                endif           ; ok        // for other definitions it "points" the correct handler
1270+ 69B2             >                // Use of "; ok" to suppress "warning[fwdref]"
1270+ 69B2             >
1270+ 69B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1271+ 69B2 E1                           pop     hl
1272+ 69B3 7D                           ld      a, l
1273+ 69B4 B4                           or      h
1274+ 69B5 29                           add     hl, hl
1275+ 69B6 21 00 00                     ld      hl, FALSE_FLAG
1276+ 69B9 38 04                        jr      c, ZGreater_Skip
1277+ 69BB A7                               and     a
1278+ 69BC 28 01                            jr      z, ZGreater_Skip
1279+ 69BE 2B                                   dec     hl
1280+ 69BF              ZGreater_Skip:
1281+ 69BF                              psh1
1281+ 69BF E5          >                push    hl
1281+ 69C0 DD E9       >                jp      (ix)
1282+ 69C2
1283+ 69C2              //  ______________________________________________________________________
1284+ 69C2              //
1285+ 69C2              // +            n1 n2 -- n3
1286+ 69C2              // returns the unsigned sum of two top values
1287+ 69C2                              New_Def PLUS, "+", is_code, is_normal
1287+ 69C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1287+ 69C2             >
1287+ 69C2             >                // dummy db directives used to calculate length of namec
1287+ 69C2 2B          >                db      "+"
1287+ 69C3             >len_NFA         defl    $ - temp_NFA
1287+ 69C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1287+ 69C2             >
1287+ 69C2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1287+ 69C3 2B          >                db      "+"               // name string in 7-bit ascii, but
1287+ 69C4             >                org     $-1                 // alter last byte of Name just above to set
1287+ 69C3 AB          >                db      {b $} | END_BIT     // msb as name end
1287+ 69C4             >
1287+ 69C4 AD 69       >                dw      last_NFA            // Link to previous definition Name
1287+ 69C6             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1287+ 69C6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1287+ 69C6 ~           >
1287+ 69C6 ~           >
1287+ 69C6             >                endif           ; ok        // for other definitions it "points" the correct handler
1287+ 69C6             >                // Use of "; ok" to suppress "warning[fwdref]"
1287+ 69C6             >
1287+ 69C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1288+ 69C6 E1                           pop     hl
1289+ 69C7 D1                           pop     de
1290+ 69C8 19                           add     hl, de
1291+ 69C9
1292+ 69C9                              psh1
1292+ 69C9 E5          >                push    hl
1292+ 69CA DD E9       >                jp      (ix)
1293+ 69CC
1294+ 69CC
1295+ 69CC              //  ______________________________________________________________________
1296+ 69CC              //
1297+ 69CC              // d+           d1 d2 -- d3
1298+ 69CC              // returns the unsigned sum of two top double-numbers
1299+ 69CC              //      d2  d1
1300+ 69CC              //      h l h l
1301+ 69CC              // SP   LHEDLHED
1302+ 69CC              // SP  +01234567
1303+ 69CC                              New_Def DPLUS, "D+", is_code, is_normal
1303+ 69CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1303+ 69CC             >
1303+ 69CC             >                // dummy db directives used to calculate length of namec
1303+ 69CC 44 2B       >                db      "D+"
1303+ 69CE             >len_NFA         defl    $ - temp_NFA
1303+ 69CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1303+ 69CC             >
1303+ 69CC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1303+ 69CD 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1303+ 69CF             >                org     $-1                 // alter last byte of Name just above to set
1303+ 69CE AB          >                db      {b $} | END_BIT     // msb as name end
1303+ 69CF             >
1303+ 69CF C2 69       >                dw      last_NFA            // Link to previous definition Name
1303+ 69D1             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1303+ 69D1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1303+ 69D1 ~           >
1303+ 69D1 ~           >
1303+ 69D1             >                endif           ; ok        // for other definitions it "points" the correct handler
1303+ 69D1             >                // Use of "; ok" to suppress "warning[fwdref]"
1303+ 69D1             >
1303+ 69D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1304+ 69D1
1305+ 69D1 D9                           exx
1306+ 69D2 C1                           pop     bc                  // bc := d2.H
1307+ 69D3 D1                           pop     de                  // hl := d2.L
1308+ 69D4 E1                           pop     hl                  // d1.H
1309+ 69D5 E3                           ex      (sp), hl            // d1.L
1310+ 69D6 19                           add     hl, de              // hl := d2.L + d1.L
1311+ 69D7 E3                           ex      (sp), hl            // d1.H
1312+ 69D8 ED 4A                        adc     hl, bc              // d1.H + d2.H
1313+ 69DA E5                           push    hl
1314+ 69DB D9                           exx
1315+ 69DC                              next
1315+ 69DC DD E9       >                jp      (ix)
1316+ 69DE
1317+ 69DE              //  ______________________________________________________________________
1318+ 69DE              //
1319+ 69DE              // 1+           n1 -- n2
1320+ 69DE              // increment by 1 top of stack
1321+ 69DE                              New_Def ONE_PLUS, "1+", is_code, is_normal
1321+ 69DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1321+ 69DE             >
1321+ 69DE             >                // dummy db directives used to calculate length of namec
1321+ 69DE 31 2B       >                db      "1+"
1321+ 69E0             >len_NFA         defl    $ - temp_NFA
1321+ 69E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1321+ 69DE             >
1321+ 69DE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1321+ 69DF 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1321+ 69E1             >                org     $-1                 // alter last byte of Name just above to set
1321+ 69E0 AB          >                db      {b $} | END_BIT     // msb as name end
1321+ 69E1             >
1321+ 69E1 CC 69       >                dw      last_NFA            // Link to previous definition Name
1321+ 69E3             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1321+ 69E3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1321+ 69E3 ~           >
1321+ 69E3 ~           >
1321+ 69E3             >                endif           ; ok        // for other definitions it "points" the correct handler
1321+ 69E3             >                // Use of "; ok" to suppress "warning[fwdref]"
1321+ 69E3             >
1321+ 69E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1322+ 69E3 E1                           pop     hl
1323+ 69E4 23                           inc     hl
1324+ 69E5
1325+ 69E5                              psh1
1325+ 69E5 E5          >                push    hl
1325+ 69E6 DD E9       >                jp      (ix)
1326+ 69E8
1327+ 69E8              //  ______________________________________________________________________
1328+ 69E8              //
1329+ 69E8              // 1-           n1 -- n2
1330+ 69E8              // decrement by 1 top of stack
1331+ 69E8                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1331+ 69E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1331+ 69E8             >
1331+ 69E8             >                // dummy db directives used to calculate length of namec
1331+ 69E8 31 2D       >                db      "1-"
1331+ 69EA             >len_NFA         defl    $ - temp_NFA
1331+ 69EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1331+ 69E8             >
1331+ 69E8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1331+ 69E9 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1331+ 69EB             >                org     $-1                 // alter last byte of Name just above to set
1331+ 69EA AD          >                db      {b $} | END_BIT     // msb as name end
1331+ 69EB             >
1331+ 69EB DE 69       >                dw      last_NFA            // Link to previous definition Name
1331+ 69ED             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1331+ 69ED ~           >                call    runcode ; ok        // for primitive definitions  actual code
1331+ 69ED ~           >
1331+ 69ED ~           >
1331+ 69ED             >                endif           ; ok        // for other definitions it "points" the correct handler
1331+ 69ED             >                // Use of "; ok" to suppress "warning[fwdref]"
1331+ 69ED             >
1331+ 69ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1332+ 69ED E1                           pop     hl
1333+ 69EE 2B                           dec     hl
1334+ 69EF
1335+ 69EF                              psh1
1335+ 69EF E5          >                push    hl
1335+ 69F0 DD E9       >                jp      (ix)
1336+ 69F2
1337+ 69F2              //  ______________________________________________________________________
1338+ 69F2              //
1339+ 69F2              // 2+           n1 -- n2
1340+ 69F2              // increment by 2 top of stack
1341+ 69F2                              New_Def TWO_PLUS, "2+", is_code, is_normal
1341+ 69F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1341+ 69F2             >
1341+ 69F2             >                // dummy db directives used to calculate length of namec
1341+ 69F2 32 2B       >                db      "2+"
1341+ 69F4             >len_NFA         defl    $ - temp_NFA
1341+ 69F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1341+ 69F2             >
1341+ 69F2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1341+ 69F3 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1341+ 69F5             >                org     $-1                 // alter last byte of Name just above to set
1341+ 69F4 AB          >                db      {b $} | END_BIT     // msb as name end
1341+ 69F5             >
1341+ 69F5 E8 69       >                dw      last_NFA            // Link to previous definition Name
1341+ 69F7             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1341+ 69F7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1341+ 69F7 ~           >
1341+ 69F7 ~           >
1341+ 69F7             >                endif           ; ok        // for other definitions it "points" the correct handler
1341+ 69F7             >                // Use of "; ok" to suppress "warning[fwdref]"
1341+ 69F7             >
1341+ 69F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1342+ 69F7              Two_Plus:
1343+ 69F7 E1                           pop     hl
1344+ 69F8 23                           inc     hl
1345+ 69F9 23                           inc     hl
1346+ 69FA
1347+ 69FA                              psh1
1347+ 69FA E5          >                push    hl
1347+ 69FB DD E9       >                jp      (ix)
1348+ 69FD
1349+ 69FD              //  ______________________________________________________________________
1350+ 69FD              //
1351+ 69FD              // cell+        a1 -- a2
1352+ 69FD              // increment by 2 top of stack
1353+ 69FD                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1353+ 69FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1353+ 69FD             >
1353+ 69FD             >                // dummy db directives used to calculate length of namec
1353+ 69FD 43 45 4C 4C >                db      "CELL+"
1353+ 6A01 2B          >
1353+ 6A02             >len_NFA         defl    $ - temp_NFA
1353+ 6A02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1353+ 69FD             >
1353+ 69FD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1353+ 69FE 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1353+ 6A02 2B          >
1353+ 6A03             >                org     $-1                 // alter last byte of Name just above to set
1353+ 6A02 AB          >                db      {b $} | END_BIT     // msb as name end
1353+ 6A03             >
1353+ 6A03 F2 69       >                dw      last_NFA            // Link to previous definition Name
1353+ 6A05             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1353+ 6A05 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1353+ 6A05 ~           >
1353+ 6A05 ~           >
1353+ 6A05             >                endif           ; ok        // for other definitions it "points" the correct handler
1353+ 6A05             >                // Use of "; ok" to suppress "warning[fwdref]"
1353+ 6A05             >
1353+ 6A05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1354+ 6A05 C3 F7 69                     jp      Two_Plus
1355+ 6A08
1356+ 6A08              //  ______________________________________________________________________
1357+ 6A08              //
1358+ 6A08              // align        a1 -- a2
1359+ 6A08              // align memory : not used
1360+ 6A08              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1361+ 6A08              //            next
1362+ 6A08
1363+ 6A08              //  ______________________________________________________________________
1364+ 6A08              //
1365+ 6A08              // cell-        a1 -- a2
1366+ 6A08              // decrement by 2 top of stack
1367+ 6A08                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1367+ 6A08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1367+ 6A08             >
1367+ 6A08             >                // dummy db directives used to calculate length of namec
1367+ 6A08 43 45 4C 4C >                db      "CELL-"
1367+ 6A0C 2D          >
1367+ 6A0D             >len_NFA         defl    $ - temp_NFA
1367+ 6A0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1367+ 6A08             >
1367+ 6A08 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1367+ 6A09 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1367+ 6A0D 2D          >
1367+ 6A0E             >                org     $-1                 // alter last byte of Name just above to set
1367+ 6A0D AD          >                db      {b $} | END_BIT     // msb as name end
1367+ 6A0E             >
1367+ 6A0E FD 69       >                dw      last_NFA            // Link to previous definition Name
1367+ 6A10             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1367+ 6A10 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1367+ 6A10 ~           >
1367+ 6A10 ~           >
1367+ 6A10             >                endif           ; ok        // for other definitions it "points" the correct handler
1367+ 6A10             >                // Use of "; ok" to suppress "warning[fwdref]"
1367+ 6A10             >
1367+ 6A10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1368+ 6A10              CellMinus:
1369+ 6A10 E1                           pop     hl
1370+ 6A11 2B                           dec     hl
1371+ 6A12 2B                           dec     hl
1372+ 6A13
1373+ 6A13                              psh1
1373+ 6A13 E5          >                push    hl
1373+ 6A14 DD E9       >                jp      (ix)
1374+ 6A16
1375+ 6A16              //  ______________________________________________________________________
1376+ 6A16              //
1377+ 6A16              // 2-           a1 -- a2
1378+ 6A16              // decrement by 2 top of stack
1379+ 6A16                              New_Def TWO_MINUS, "2-", is_code, is_normal
1379+ 6A16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1379+ 6A16             >
1379+ 6A16             >                // dummy db directives used to calculate length of namec
1379+ 6A16 32 2D       >                db      "2-"
1379+ 6A18             >len_NFA         defl    $ - temp_NFA
1379+ 6A18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1379+ 6A16             >
1379+ 6A16 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1379+ 6A17 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1379+ 6A19             >                org     $-1                 // alter last byte of Name just above to set
1379+ 6A18 AD          >                db      {b $} | END_BIT     // msb as name end
1379+ 6A19             >
1379+ 6A19 08 6A       >                dw      last_NFA            // Link to previous definition Name
1379+ 6A1B             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1379+ 6A1B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1379+ 6A1B ~           >
1379+ 6A1B ~           >
1379+ 6A1B             >                endif           ; ok        // for other definitions it "points" the correct handler
1379+ 6A1B             >                // Use of "; ok" to suppress "warning[fwdref]"
1379+ 6A1B             >
1379+ 6A1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1380+ 6A1B C3 10 6A                     jp      CellMinus
1381+ 6A1E
1382+ 6A1E              //  ______________________________________________________________________
1383+ 6A1E              //
1384+ 6A1E              // negate       n1 -- n2
1385+ 6A1E              // change the sign of number
1386+ 6A1E                              New_Def MINUS, "NEGATE", is_code, is_normal
1386+ 6A1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1386+ 6A1E             >
1386+ 6A1E             >                // dummy db directives used to calculate length of namec
1386+ 6A1E 4E 45 47 41 >                db      "NEGATE"
1386+ 6A22 54 45       >
1386+ 6A24             >len_NFA         defl    $ - temp_NFA
1386+ 6A24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1386+ 6A1E             >
1386+ 6A1E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1386+ 6A1F 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1386+ 6A23 54 45       >
1386+ 6A25             >                org     $-1                 // alter last byte of Name just above to set
1386+ 6A24 C5          >                db      {b $} | END_BIT     // msb as name end
1386+ 6A25             >
1386+ 6A25 16 6A       >                dw      last_NFA            // Link to previous definition Name
1386+ 6A27             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1386+ 6A27 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1386+ 6A27 ~           >
1386+ 6A27 ~           >
1386+ 6A27             >                endif           ; ok        // for other definitions it "points" the correct handler
1386+ 6A27             >                // Use of "; ok" to suppress "warning[fwdref]"
1386+ 6A27             >
1386+ 6A27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1387+ 6A27 21 00 00                     ld      hl, 0               // subtract from 0
1388+ 6A2A D1                           pop     de
1389+ 6A2B B7                           or      a
1390+ 6A2C ED 52                        sbc     hl, de
1391+ 6A2E
1392+ 6A2E                              psh1
1392+ 6A2E E5          >                push    hl
1392+ 6A2F DD E9       >                jp      (ix)
1393+ 6A31
1394+ 6A31              //  ______________________________________________________________________
1395+ 6A31              //
1396+ 6A31              // dnegate      d1 -- d2
1397+ 6A31              // change the sign of a double number
1398+ 6A31                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1398+ 6A31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1398+ 6A31             >
1398+ 6A31             >                // dummy db directives used to calculate length of namec
1398+ 6A31 44 4E 45 47 >                db      "DNEGATE"
1398+ 6A35 41 54 45    >
1398+ 6A38             >len_NFA         defl    $ - temp_NFA
1398+ 6A38             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1398+ 6A31             >
1398+ 6A31 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1398+ 6A32 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1398+ 6A36 41 54 45    >
1398+ 6A39             >                org     $-1                 // alter last byte of Name just above to set
1398+ 6A38 C5          >                db      {b $} | END_BIT     // msb as name end
1398+ 6A39             >
1398+ 6A39 1E 6A       >                dw      last_NFA            // Link to previous definition Name
1398+ 6A3B             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1398+ 6A3B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1398+ 6A3B ~           >
1398+ 6A3B ~           >
1398+ 6A3B             >                endif           ; ok        // for other definitions it "points" the correct handler
1398+ 6A3B             >                // Use of "; ok" to suppress "warning[fwdref]"
1398+ 6A3B             >
1398+ 6A3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1399+ 6A3B D9                           exx
1400+ 6A3C C1                           pop     bc                  // d1.H
1401+ 6A3D D1                           pop     de                  // d1.L
1402+ 6A3E AF                           xor     a
1403+ 6A3F 67                           ld      h, a
1404+ 6A40 6F                           ld      l, a
1405+ 6A41 ED 52                        sbc     hl, de              // subtact from zero
1406+ 6A43 E5                           push    hl                  // > d2-L
1407+ 6A44 67                           ld      h, a
1408+ 6A45 6F                           ld      l, a
1409+ 6A46 ED 42                        sbc     hl, bc              // subtract from zero with carry
1410+ 6A48                                                          // > d2-H
1411+ 6A48 E5                           push    hl
1412+ 6A49 D9                           exx
1413+ 6A4A                              next
1413+ 6A4A DD E9       >                jp      (ix)
1414+ 6A4C
1415+ 6A4C              //  ______________________________________________________________________
1416+ 6A4C              //
1417+ 6A4C              // over         n1 n2 -- n1 n2 n1
1418+ 6A4C              // copy the second value of stack and put it on top.
1419+ 6A4C                              New_Def OVER, "OVER", is_code, is_normal
1419+ 6A4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1419+ 6A4C             >
1419+ 6A4C             >                // dummy db directives used to calculate length of namec
1419+ 6A4C 4F 56 45 52 >                db      "OVER"
1419+ 6A50             >len_NFA         defl    $ - temp_NFA
1419+ 6A50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1419+ 6A4C             >
1419+ 6A4C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1419+ 6A4D 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1419+ 6A51             >                org     $-1                 // alter last byte of Name just above to set
1419+ 6A50 D2          >                db      {b $} | END_BIT     // msb as name end
1419+ 6A51             >
1419+ 6A51 31 6A       >                dw      last_NFA            // Link to previous definition Name
1419+ 6A53             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1419+ 6A53 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1419+ 6A53 ~           >
1419+ 6A53 ~           >
1419+ 6A53             >                endif           ; ok        // for other definitions it "points" the correct handler
1419+ 6A53             >                // Use of "; ok" to suppress "warning[fwdref]"
1419+ 6A53             >
1419+ 6A53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1420+ 6A53 D1                           pop     de                  //   n2
1421+ 6A54 E1                           pop     hl                  // < n1
1422+ 6A55 E5                           push    hl                  // > n1
1423+ 6A56 D5                           push    de                  // > n2
1424+ 6A57 E5                           push    hl                  // > n1
1425+ 6A58                              next
1425+ 6A58 DD E9       >                jp      (ix)
1426+ 6A5A
1427+ 6A5A              //  ______________________________________________________________________
1428+ 6A5A              //
1429+ 6A5A              // drop         n1 --
1430+ 6A5A              // drops the top of stack
1431+ 6A5A                              New_Def DROP, "DROP", is_code, is_normal
1431+ 6A5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1431+ 6A5A             >
1431+ 6A5A             >                // dummy db directives used to calculate length of namec
1431+ 6A5A 44 52 4F 50 >                db      "DROP"
1431+ 6A5E             >len_NFA         defl    $ - temp_NFA
1431+ 6A5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1431+ 6A5A             >
1431+ 6A5A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1431+ 6A5B 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1431+ 6A5F             >                org     $-1                 // alter last byte of Name just above to set
1431+ 6A5E D0          >                db      {b $} | END_BIT     // msb as name end
1431+ 6A5F             >
1431+ 6A5F 4C 6A       >                dw      last_NFA            // Link to previous definition Name
1431+ 6A61             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1431+ 6A61 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1431+ 6A61 ~           >
1431+ 6A61 ~           >
1431+ 6A61             >                endif           ; ok        // for other definitions it "points" the correct handler
1431+ 6A61             >                // Use of "; ok" to suppress "warning[fwdref]"
1431+ 6A61             >
1431+ 6A61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1432+ 6A61 E1                           pop     hl                  // < n1 and discard previous TOS
1433+ 6A62                              next
1433+ 6A62 DD E9       >                jp      (ix)
1434+ 6A64
1435+ 6A64              //  ______________________________________________________________________
1436+ 6A64              //
1437+ 6A64              // nip          n1 n2 -- n2
1438+ 6A64              // drops the second elemento on the stack
1439+ 6A64                              New_Def NIP, "NIP", is_code, is_normal
1439+ 6A64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1439+ 6A64             >
1439+ 6A64             >                // dummy db directives used to calculate length of namec
1439+ 6A64 4E 49 50    >                db      "NIP"
1439+ 6A67             >len_NFA         defl    $ - temp_NFA
1439+ 6A67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1439+ 6A64             >
1439+ 6A64 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1439+ 6A65 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1439+ 6A68             >                org     $-1                 // alter last byte of Name just above to set
1439+ 6A67 D0          >                db      {b $} | END_BIT     // msb as name end
1439+ 6A68             >
1439+ 6A68 5A 6A       >                dw      last_NFA            // Link to previous definition Name
1439+ 6A6A             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1439+ 6A6A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1439+ 6A6A ~           >
1439+ 6A6A ~           >
1439+ 6A6A             >                endif           ; ok        // for other definitions it "points" the correct handler
1439+ 6A6A             >                // Use of "; ok" to suppress "warning[fwdref]"
1439+ 6A6A             >
1439+ 6A6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1440+ 6A6A
1441+ 6A6A E1                           pop     hl                  // < n1 discarded
1442+ 6A6B E3                           ex      (sp), hl
1443+ 6A6C                              next
1443+ 6A6C DD E9       >                jp      (ix)
1444+ 6A6E
1445+ 6A6E              //  ______________________________________________________________________
1446+ 6A6E              //
1447+ 6A6E              // tuck         n1 n2 -- n2 n1 n2
1448+ 6A6E              // copy the top element after the second.
1449+ 6A6E                              New_Def TUCK, "TUCK", is_code, is_normal
1449+ 6A6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1449+ 6A6E             >
1449+ 6A6E             >                // dummy db directives used to calculate length of namec
1449+ 6A6E 54 55 43 4B >                db      "TUCK"
1449+ 6A72             >len_NFA         defl    $ - temp_NFA
1449+ 6A72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1449+ 6A6E             >
1449+ 6A6E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1449+ 6A6F 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1449+ 6A73             >                org     $-1                 // alter last byte of Name just above to set
1449+ 6A72 CB          >                db      {b $} | END_BIT     // msb as name end
1449+ 6A73             >
1449+ 6A73 64 6A       >                dw      last_NFA            // Link to previous definition Name
1449+ 6A75             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1449+ 6A75 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1449+ 6A75 ~           >
1449+ 6A75 ~           >
1449+ 6A75             >                endif           ; ok        // for other definitions it "points" the correct handler
1449+ 6A75             >                // Use of "; ok" to suppress "warning[fwdref]"
1449+ 6A75             >
1449+ 6A75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1450+ 6A75 E1                           pop     hl
1451+ 6A76 D1                           pop     de                  // < n1
1452+ 6A77 E5                           push    hl                  // > n2  and TOS
1453+ 6A78 D5                           push    de                  // > n1
1454+ 6A79 E5                           push    hl
1455+ 6A7A                              next
1455+ 6A7A DD E9       >                jp      (ix)
1456+ 6A7C
1457+ 6A7C              //  ______________________________________________________________________
1458+ 6A7C              //
1459+ 6A7C              // swap         n1 n2 -- n2 n1
1460+ 6A7C              // swaps the two values on top of stack
1461+ 6A7C                              New_Def SWAP, "SWAP", is_code, is_normal
1461+ 6A7C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1461+ 6A7C             >
1461+ 6A7C             >                // dummy db directives used to calculate length of namec
1461+ 6A7C 53 57 41 50 >                db      "SWAP"
1461+ 6A80             >len_NFA         defl    $ - temp_NFA
1461+ 6A80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1461+ 6A7C             >
1461+ 6A7C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1461+ 6A7D 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1461+ 6A81             >                org     $-1                 // alter last byte of Name just above to set
1461+ 6A80 D0          >                db      {b $} | END_BIT     // msb as name end
1461+ 6A81             >
1461+ 6A81 6E 6A       >                dw      last_NFA            // Link to previous definition Name
1461+ 6A83             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1461+ 6A83 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1461+ 6A83 ~           >
1461+ 6A83 ~           >
1461+ 6A83             >                endif           ; ok        // for other definitions it "points" the correct handler
1461+ 6A83             >                // Use of "; ok" to suppress "warning[fwdref]"
1461+ 6A83             >
1461+ 6A83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1462+ 6A83 E1                           pop     hl                  // < n1
1463+ 6A84 E3                           ex      (sp),hl             // > n2
1464+ 6A85 E5                           push    hl                  // copy n1 to TOS
1465+ 6A86                              next
1465+ 6A86 DD E9       >                jp      (ix)
1466+ 6A88
1467+ 6A88              //  ______________________________________________________________________
1468+ 6A88              //
1469+ 6A88              // dup         n -- n n
1470+ 6A88              // duplicates the top value of stack
1471+ 6A88                              New_Def DUP, "DUP", is_code, is_normal
1471+ 6A88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1471+ 6A88             >
1471+ 6A88             >                // dummy db directives used to calculate length of namec
1471+ 6A88 44 55 50    >                db      "DUP"
1471+ 6A8B             >len_NFA         defl    $ - temp_NFA
1471+ 6A8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1471+ 6A88             >
1471+ 6A88 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1471+ 6A89 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1471+ 6A8C             >                org     $-1                 // alter last byte of Name just above to set
1471+ 6A8B D0          >                db      {b $} | END_BIT     // msb as name end
1471+ 6A8C             >
1471+ 6A8C 7C 6A       >                dw      last_NFA            // Link to previous definition Name
1471+ 6A8E             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1471+ 6A8E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1471+ 6A8E ~           >
1471+ 6A8E ~           >
1471+ 6A8E             >                endif           ; ok        // for other definitions it "points" the correct handler
1471+ 6A8E             >                // Use of "; ok" to suppress "warning[fwdref]"
1471+ 6A8E             >
1471+ 6A8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1472+ 6A8E E1                           pop     hl
1473+ 6A8F E5                           push    hl                  // > n duplicate TOS
1474+ 6A90 E5                           push    hl
1475+ 6A91                              next
1475+ 6A91 DD E9       >                jp      (ix)
1476+ 6A93
1477+ 6A93              //  ______________________________________________________________________
1478+ 6A93              //
1479+ 6A93              // rot         n1 n2 n3 -- n2 n3 n1
1480+ 6A93              // Rotates the 3 top values of stack by picking the 3rd in access-order
1481+ 6A93              // and putting it on top. The other two are shifted down one place.
1482+ 6A93                              New_Def ROT, "ROT", is_code, is_normal
1482+ 6A93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1482+ 6A93             >
1482+ 6A93             >                // dummy db directives used to calculate length of namec
1482+ 6A93 52 4F 54    >                db      "ROT"
1482+ 6A96             >len_NFA         defl    $ - temp_NFA
1482+ 6A96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1482+ 6A93             >
1482+ 6A93 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1482+ 6A94 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1482+ 6A97             >                org     $-1                 // alter last byte of Name just above to set
1482+ 6A96 D4          >                db      {b $} | END_BIT     // msb as name end
1482+ 6A97             >
1482+ 6A97 88 6A       >                dw      last_NFA            // Link to previous definition Name
1482+ 6A99             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1482+ 6A99 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1482+ 6A99 ~           >
1482+ 6A99 ~           >
1482+ 6A99             >                endif           ; ok        // for other definitions it "points" the correct handler
1482+ 6A99             >                // Use of "; ok" to suppress "warning[fwdref]"
1482+ 6A99             >
1482+ 6A99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1483+ 6A99 D1                           pop     de                  // < n3
1484+ 6A9A E1                           pop     hl                  // < n2
1485+ 6A9B E3                           ex      (sp),hl             // > n2 < n1
1486+ 6A9C D5                           push    de                  // > n3
1487+ 6A9D E5                           push    hl                  // copy n1 to TOS
1488+ 6A9E                              next
1488+ 6A9E DD E9       >                jp      (ix)
1489+ 6AA0
1490+ 6AA0              //  ______________________________________________________________________
1491+ 6AA0              //
1492+ 6AA0              // -rot         n1 n2 n3 -- n3 n1 n2
1493+ 6AA0              // Rotates the 3 top values of stack by picking the 1st in access-order
1494+ 6AA0              // and putting back to 3rd place. The other two are shifted down one place.
1495+ 6AA0                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1495+ 6AA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1495+ 6AA0             >
1495+ 6AA0             >                // dummy db directives used to calculate length of namec
1495+ 6AA0 2D 52 4F 54 >                db      "-ROT"
1495+ 6AA4             >len_NFA         defl    $ - temp_NFA
1495+ 6AA4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1495+ 6AA0             >
1495+ 6AA0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1495+ 6AA1 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1495+ 6AA5             >                org     $-1                 // alter last byte of Name just above to set
1495+ 6AA4 D4          >                db      {b $} | END_BIT     // msb as name end
1495+ 6AA5             >
1495+ 6AA5 93 6A       >                dw      last_NFA            // Link to previous definition Name
1495+ 6AA7             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1495+ 6AA7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1495+ 6AA7 ~           >
1495+ 6AA7 ~           >
1495+ 6AA7             >                endif           ; ok        // for other definitions it "points" the correct handler
1495+ 6AA7             >                // Use of "; ok" to suppress "warning[fwdref]"
1495+ 6AA7             >
1495+ 6AA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1496+ 6AA7 E1                           pop     hl                  // < n3
1497+ 6AA8 D1                           pop     de                  // < n2
1498+ 6AA9 E3                           ex      (sp),hl             // > n3 < n1
1499+ 6AAA E5                           push    hl                  // > n1
1500+ 6AAB D5                           push    de                  // copy n3 to TOS
1501+ 6AAC                              next
1501+ 6AAC DD E9       >                jp      (ix)
1502+ 6AAE
1503+ 6AAE              //  ______________________________________________________________________
1504+ 6AAE              //
1505+ 6AAE              // pick        n1 -- nx
1506+ 6AAE              // picks the nth element from TOS
1507+ 6AAE                              New_Def PICK, "PICK", is_code, is_normal
1507+ 6AAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1507+ 6AAE             >
1507+ 6AAE             >                // dummy db directives used to calculate length of namec
1507+ 6AAE 50 49 43 4B >                db      "PICK"
1507+ 6AB2             >len_NFA         defl    $ - temp_NFA
1507+ 6AB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1507+ 6AAE             >
1507+ 6AAE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1507+ 6AAF 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1507+ 6AB3             >                org     $-1                 // alter last byte of Name just above to set
1507+ 6AB2 CB          >                db      {b $} | END_BIT     // msb as name end
1507+ 6AB3             >
1507+ 6AB3 A0 6A       >                dw      last_NFA            // Link to previous definition Name
1507+ 6AB5             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1507+ 6AB5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1507+ 6AB5 ~           >
1507+ 6AB5 ~           >
1507+ 6AB5             >                endif           ; ok        // for other definitions it "points" the correct handler
1507+ 6AB5             >                // Use of "; ok" to suppress "warning[fwdref]"
1507+ 6AB5             >
1507+ 6AB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1508+ 6AB5 E1                           pop     hl                  // take TOS as index
1509+ 6AB6 29                           add     hl, hl              // as cells
1510+ 6AB7 39                           add     hl, sp              // from Stack Pointer
1511+ 6AB8 7E                           ld      a, (hl)             // replace TOS
1512+ 6AB9 23                           inc     hl
1513+ 6ABA 66                           ld      h, (hl)
1514+ 6ABB 6F                           ld      l, a
1515+ 6ABC
1516+ 6ABC                              psh1
1516+ 6ABC E5          >                push    hl
1516+ 6ABD DD E9       >                jp      (ix)
1517+ 6ABF
1518+ 6ABF
1519+ 6ABF              //  ______________________________________________________________________
1520+ 6ABF              //
1521+ 6ABF              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1522+ 6ABF              // picks the nth element from TOS
1523+ 6ABF              //              New_Def ROLL, "ROLL", is_code, is_normal
1524+ 6ABF              //              exx                     // we need all registers free
1525+ 6ABF              //              pop     hl              // number of cells to roll
1526+ 6ABF              //              ld      a, h
1527+ 6ABF              //              or       l
1528+ 6ABF              //              jr      z, Roll_Zero
1529+ 6ABF              //                  add     hl, hl              // number of bytes to move
1530+ 6ABF              //                  ld      b, h
1531+ 6ABF              //                  ld      c, l
1532+ 6ABF              //                  add     hl, sp          // address of n1
1533+ 6ABF              //                  ld      a, (hl)         // take n1 into a and a,
1534+ 6ABF              //                  inc     hl
1535+ 6ABF              //                  ex      af, af'
1536+ 6ABF              //                  ld      a, (hl)         // take n1 into a and a,
1537+ 6ABF              //                  ld      d, h
1538+ 6ABF              //                  ld      e, l
1539+ 6ABF              //                  dec     hl
1540+ 6ABF              //                  dec     hl
1541+ 6ABF              //                  lddr
1542+ 6ABF              //                  ex      de, hl
1543+ 6ABF              //                  ld      (hl), a
1544+ 6ABF              //                  dec     hl
1545+ 6ABF              //                  ex      af, af'
1546+ 6ABF              //                  ld      (hl), a
1547+ 6ABF              //Roll_Zero:
1548+ 6ABF              //              exx
1549+ 6ABF              //              next
1550+ 6ABF
1551+ 6ABF
1552+ 6ABF              //  ______________________________________________________________________
1553+ 6ABF              //
1554+ 6ABF              // 2over        d1 d2 -- d1 d2 d1
1555+ 6ABF              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1556+ 6ABF              // copy the second double of stack and put on top.
1557+ 6ABF              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1558+ 6ABF              //
1559+ 6ABF              //              ld      hl, 7
1560+ 6ABF              //              add     hl, sp
1561+ 6ABF              //              ld      d, (hl)
1562+ 6ABF              //              dec     hl
1563+ 6ABF              //              ld      e, (hl)             // d1-L
1564+ 6ABF              //              push    de
1565+ 6ABF              //              dec     hl
1566+ 6ABF              //              ld      d, (hl)
1567+ 6ABF              //              dec     hl
1568+ 6ABF              //              ld      e, (hl)             // d1-H
1569+ 6ABF              //              push    de
1570+ 6ABF              //              next
1571+ 6ABF
1572+ 6ABF              //  ______________________________________________________________________
1573+ 6ABF              //
1574+ 6ABF              // 2drop        d --
1575+ 6ABF              //              n1 n2 --
1576+ 6ABF              // drops the top double from stack
1577+ 6ABF                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1577+ 6ABF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1577+ 6ABF             >
1577+ 6ABF             >                // dummy db directives used to calculate length of namec
1577+ 6ABF 32 44 52 4F >                db      "2DROP"
1577+ 6AC3 50          >
1577+ 6AC4             >len_NFA         defl    $ - temp_NFA
1577+ 6AC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1577+ 6ABF             >
1577+ 6ABF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1577+ 6AC0 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1577+ 6AC4 50          >
1577+ 6AC5             >                org     $-1                 // alter last byte of Name just above to set
1577+ 6AC4 D0          >                db      {b $} | END_BIT     // msb as name end
1577+ 6AC5             >
1577+ 6AC5 AE 6A       >                dw      last_NFA            // Link to previous definition Name
1577+ 6AC7             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1577+ 6AC7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1577+ 6AC7 ~           >
1577+ 6AC7 ~           >
1577+ 6AC7             >                endif           ; ok        // for other definitions it "points" the correct handler
1577+ 6AC7             >                // Use of "; ok" to suppress "warning[fwdref]"
1577+ 6AC7             >
1577+ 6AC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1578+ 6AC7 E1                           pop     hl
1579+ 6AC8 E1                           pop     hl
1580+ 6AC9                              next
1580+ 6AC9 DD E9       >                jp      (ix)
1581+ 6ACB
1582+ 6ACB              //  ______________________________________________________________________
1583+ 6ACB              //
1584+ 6ACB              // 2nip         d1 d2 -- d2
1585+ 6ACB              //              n1 n2 n3 n4 -- n3 n4
1586+ 6ACB              // drops the second double on the stack
1587+ 6ACB              //              New_Def TWO_NIP, 4, "2nip"
1588+ 6ACB              //              ...
1589+ 6ACB
1590+ 6ACB              //  ______________________________________________________________________
1591+ 6ACB              //
1592+ 6ACB              // 2tuck         d1 d2 -- d2 d1 d2
1593+ 6ACB              // copy the top element after the second.
1594+ 6ACB              //              New_Def TWO_TUCK, 5, "2tuck"
1595+ 6ACB              //              ...
1596+ 6ACB
1597+ 6ACB              //  ______________________________________________________________________
1598+ 6ACB              //
1599+ 6ACB              // 2swap         d1 d2 -- d2 d1
1600+ 6ACB              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1601+ 6ACB              // swaps the two doubles on top of stack
1602+ 6ACB                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1602+ 6ACB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1602+ 6ACB             >
1602+ 6ACB             >                // dummy db directives used to calculate length of namec
1602+ 6ACB 32 53 57 41 >                db      "2SWAP"
1602+ 6ACF 50          >
1602+ 6AD0             >len_NFA         defl    $ - temp_NFA
1602+ 6AD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1602+ 6ACB             >
1602+ 6ACB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1602+ 6ACC 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1602+ 6AD0 50          >
1602+ 6AD1             >                org     $-1                 // alter last byte of Name just above to set
1602+ 6AD0 D0          >                db      {b $} | END_BIT     // msb as name end
1602+ 6AD1             >
1602+ 6AD1 BF 6A       >                dw      last_NFA            // Link to previous definition Name
1602+ 6AD3             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1602+ 6AD3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1602+ 6AD3 ~           >
1602+ 6AD3 ~           >
1602+ 6AD3             >                endif           ; ok        // for other definitions it "points" the correct handler
1602+ 6AD3             >                // Use of "; ok" to suppress "warning[fwdref]"
1602+ 6AD3             >
1602+ 6AD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1603+ 6AD3 F1                           pop     af                  //   d2-H
1604+ 6AD4 E1                           pop     hl                  // < d2-L
1605+ 6AD5 D1                           pop     de                  // < d1-H
1606+ 6AD6 E3                           ex      (sp), hl            // < d1-L > d2-L
1607+ 6AD7 F5                           push    af                  // > d2-H
1608+ 6AD8 E5                           push    hl                  // > d1-L
1609+ 6AD9 D5                           push    de
1610+ 6ADA
1611+ 6ADA                              next
1611+ 6ADA DD E9       >                jp      (ix)
1612+ 6ADC
1613+ 6ADC              //  ______________________________________________________________________
1614+ 6ADC              //
1615+ 6ADC              // 2dup         d -- d d
1616+ 6ADC              //              n1 n2 -- n1 n2 n1 n2
1617+ 6ADC              // duplicates the top double of stack
1618+ 6ADC                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1618+ 6ADC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1618+ 6ADC             >
1618+ 6ADC             >                // dummy db directives used to calculate length of namec
1618+ 6ADC 32 44 55 50 >                db      "2DUP"
1618+ 6AE0             >len_NFA         defl    $ - temp_NFA
1618+ 6AE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1618+ 6ADC             >
1618+ 6ADC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1618+ 6ADD 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1618+ 6AE1             >                org     $-1                 // alter last byte of Name just above to set
1618+ 6AE0 D0          >                db      {b $} | END_BIT     // msb as name end
1618+ 6AE1             >
1618+ 6AE1 CB 6A       >                dw      last_NFA            // Link to previous definition Name
1618+ 6AE3             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1618+ 6AE3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1618+ 6AE3 ~           >
1618+ 6AE3 ~           >
1618+ 6AE3             >                endif           ; ok        // for other definitions it "points" the correct handler
1618+ 6AE3             >                // Use of "; ok" to suppress "warning[fwdref]"
1618+ 6AE3             >
1618+ 6AE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1619+ 6AE3 E1                           pop     hl                  // < d-H
1620+ 6AE4 D1                           pop     de                  // < d-L
1621+ 6AE5 D5                           push    de                  // < d-L
1622+ 6AE6 E5                           push    hl                  // > d-H
1623+ 6AE7 D5                           push    de                  // > d-L
1624+ 6AE8 E5                           push    hl                  // > d-H
1625+ 6AE9                              next
1625+ 6AE9 DD E9       >                jp      (ix)
1626+ 6AEB
1627+ 6AEB              //  ______________________________________________________________________
1628+ 6AEB              //
1629+ 6AEB              // 2rot         d1 d2 d3 -- d2 d3 d1
1630+ 6AEB              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1631+ 6AEB              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1632+ 6AEB              // and putting it on top. The other two are shifted down one place.
1633+ 6AEB              //              New_Def TWO?ROT, 4, "2rot"
1634+ 6AEB              //              ...
1635+ 6AEB              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1636+ 6AEB              //
1637+ 6AEB              //      d3  |d2  |d1  |
1638+ 6AEB              //      h l |h l |h l |
1639+ 6AEB              // SP   LHED|LHED|LHED|
1640+ 6AEB              // SP  +0123|4567|89ab|
1641+ 6AEB              //              ld      hl, $000B
1642+ 6AEB              //              add     hl, sp
1643+ 6AEB              //              ld      d, (hl)
1644+ 6AEB              //              dec     hl
1645+ 6AEB              //              ld      e, (hl)
1646+ 6AEB              //              dec     hl
1647+ 6AEB              //              push    de
1648+ 6AEB              //              ld      d, (hl)
1649+ 6AEB              //              dec     hl
1650+ 6AEB              //              ld      e, (hl)
1651+ 6AEB              //              dec     hl
1652+ 6AEB              //              push    de
1653+ 6AEB
1654+ 6AEB              //      d1  |d3  |d2  |d1  |
1655+ 6AEB              //      h l |h l |h l |h l |
1656+ 6AEB              // SP   LHED|LHED|LHED|LHED|
1657+ 6AEB              // SP       +0123|4567|89ab|
1658+ 6AEB
1659+ 6AEB              //              ld      d, h
1660+ 6AEB              //              ld      e, l
1661+ 6AEB              //              inc     de
1662+ 6AEB              //              inc     de
1663+ 6AEB              //              inc     de
1664+ 6AEB              //              inc     de
1665+ 6AEB              //              push    bc
1666+ 6AEB              //              ld      bc, $000C
1667+ 6AEB              //              lddr
1668+ 6AEB              //              pop     bc
1669+ 6AEB              //              pop     de
1670+ 6AEB              //              pop     de
1671+ 6AEB              //
1672+ 6AEB              //              next
1673+ 6AEB
1674+ 6AEB
1675+ 6AEB              //  ______________________________________________________________________
1676+ 6AEB              //
1677+ 6AEB              // +!           n a --
1678+ 6AEB              // Sums to the content of address a the number n.
1679+ 6AEB              // It is the same of  a @ n + a !
1680+ 6AEB                              New_Def PLUSSTORE, "+!", is_code, is_normal
1680+ 6AEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1680+ 6AEB             >
1680+ 6AEB             >                // dummy db directives used to calculate length of namec
1680+ 6AEB 2B 21       >                db      "+!"
1680+ 6AED             >len_NFA         defl    $ - temp_NFA
1680+ 6AED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1680+ 6AEB             >
1680+ 6AEB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1680+ 6AEC 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1680+ 6AEE             >                org     $-1                 // alter last byte of Name just above to set
1680+ 6AED A1          >                db      {b $} | END_BIT     // msb as name end
1680+ 6AEE             >
1680+ 6AEE DC 6A       >                dw      last_NFA            // Link to previous definition Name
1680+ 6AF0             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1680+ 6AF0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1680+ 6AF0 ~           >
1680+ 6AF0 ~           >
1680+ 6AF0             >                endif           ; ok        // for other definitions it "points" the correct handler
1680+ 6AF0             >                // Use of "; ok" to suppress "warning[fwdref]"
1680+ 6AF0             >
1680+ 6AF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1681+ 6AF0 E1                           pop     hl                  // hl is the address
1682+ 6AF1 D1                           pop     de                  // de is the number
1683+ 6AF2 7E                           ld      a, (hl)
1684+ 6AF3 83                           add     e
1685+ 6AF4 77                           ld      (hl), a
1686+ 6AF5 23                           inc     hl
1687+ 6AF6 7E                           ld      a, (hl)
1688+ 6AF7 8A                           adc     d
1689+ 6AF8 77                           ld      (hl), a
1690+ 6AF9
1691+ 6AF9                              next
1691+ 6AF9 DD E9       >                jp      (ix)
1692+ 6AFB
1693+ 6AFB              //  ______________________________________________________________________
1694+ 6AFB              //
1695+ 6AFB              // toggle       a n --
1696+ 6AFB              // Complements (xor) the byte at addrress  a  with the model n.
1697+ 6AFB                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1697+ 6AFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1697+ 6AFB             >
1697+ 6AFB             >                // dummy db directives used to calculate length of namec
1697+ 6AFB 54 4F 47 47 >                db      "TOGGLE"
1697+ 6AFF 4C 45       >
1697+ 6B01             >len_NFA         defl    $ - temp_NFA
1697+ 6B01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1697+ 6AFB             >
1697+ 6AFB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1697+ 6AFC 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1697+ 6B00 4C 45       >
1697+ 6B02             >                org     $-1                 // alter last byte of Name just above to set
1697+ 6B01 C5          >                db      {b $} | END_BIT     // msb as name end
1697+ 6B02             >
1697+ 6B02 EB 6A       >                dw      last_NFA            // Link to previous definition Name
1697+ 6B04             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1697+ 6B04 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1697+ 6B04 ~           >
1697+ 6B04 ~           >
1697+ 6B04             >                endif           ; ok        // for other definitions it "points" the correct handler
1697+ 6B04             >                // Use of "; ok" to suppress "warning[fwdref]"
1697+ 6B04             >
1697+ 6B04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1698+ 6B04 D1                           pop     de
1699+ 6B05 E1                           pop     hl
1700+ 6B06 7E                           ld      a, (hl)
1701+ 6B07 AB                           xor     e
1702+ 6B08 77                           ld      (hl), a
1703+ 6B09
1704+ 6B09                              next
1704+ 6B09 DD E9       >                jp      (ix)
1705+ 6B0B
1706+ 6B0B              //  ______________________________________________________________________
1707+ 6B0B              //
1708+ 6B0B              // @            a -- n
1709+ 6B0B              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1710+ 6B0B                              New_Def FETCH, "@", is_code, is_normal
1710+ 6B0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1710+ 6B0B             >
1710+ 6B0B             >                // dummy db directives used to calculate length of namec
1710+ 6B0B 40          >                db      "@"
1710+ 6B0C             >len_NFA         defl    $ - temp_NFA
1710+ 6B0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1710+ 6B0B             >
1710+ 6B0B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1710+ 6B0C 40          >                db      "@"               // name string in 7-bit ascii, but
1710+ 6B0D             >                org     $-1                 // alter last byte of Name just above to set
1710+ 6B0C C0          >                db      {b $} | END_BIT     // msb as name end
1710+ 6B0D             >
1710+ 6B0D FB 6A       >                dw      last_NFA            // Link to previous definition Name
1710+ 6B0F             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1710+ 6B0F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1710+ 6B0F ~           >
1710+ 6B0F ~           >
1710+ 6B0F             >                endif           ; ok        // for other definitions it "points" the correct handler
1710+ 6B0F             >                // Use of "; ok" to suppress "warning[fwdref]"
1710+ 6B0F             >
1710+ 6B0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1711+ 6B0F E1                           pop     hl
1712+ 6B10 5E                           ld      e, (hl)             // low-byte
1713+ 6B11 23                           inc     hl
1714+ 6B12 56                           ld      d, (hl)             // high-byte
1715+ 6B13 D5                           push    de
1716+ 6B14                              next
1716+ 6B14 DD E9       >                jp      (ix)
1717+ 6B16
1718+ 6B16              //  ______________________________________________________________________
1719+ 6B16              //
1720+ 6B16              // !            n a --
1721+ 6B16              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1722+ 6B16                              New_Def STORE, "!", is_code, is_normal
1722+ 6B16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1722+ 6B16             >
1722+ 6B16             >                // dummy db directives used to calculate length of namec
1722+ 6B16 21          >                db      "!"
1722+ 6B17             >len_NFA         defl    $ - temp_NFA
1722+ 6B17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1722+ 6B16             >
1722+ 6B16 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1722+ 6B17 21          >                db      "!"               // name string in 7-bit ascii, but
1722+ 6B18             >                org     $-1                 // alter last byte of Name just above to set
1722+ 6B17 A1          >                db      {b $} | END_BIT     // msb as name end
1722+ 6B18             >
1722+ 6B18 0B 6B       >                dw      last_NFA            // Link to previous definition Name
1722+ 6B1A             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1722+ 6B1A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1722+ 6B1A ~           >
1722+ 6B1A ~           >
1722+ 6B1A             >                endif           ; ok        // for other definitions it "points" the correct handler
1722+ 6B1A             >                // Use of "; ok" to suppress "warning[fwdref]"
1722+ 6B1A             >
1722+ 6B1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1723+ 6B1A E1                           pop     hl                  // address
1724+ 6B1B D1                           pop     de                  // < n
1725+ 6B1C 73                           ld      (hl), e             // low-byte
1726+ 6B1D 23                           inc     hl
1727+ 6B1E 72                           ld      (hl), d             // high-byte
1728+ 6B1F
1729+ 6B1F                              next
1729+ 6B1F DD E9       >                jp      (ix)
1730+ 6B21
1731+ 6B21              //  ______________________________________________________________________
1732+ 6B21              //
1733+ 6B21              // c@           a -- c
1734+ 6B21              // fetch a character n from address a
1735+ 6B21                              New_Def CFETCH, "C@", is_code, is_normal
1735+ 6B21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1735+ 6B21             >
1735+ 6B21             >                // dummy db directives used to calculate length of namec
1735+ 6B21 43 40       >                db      "C@"
1735+ 6B23             >len_NFA         defl    $ - temp_NFA
1735+ 6B23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1735+ 6B21             >
1735+ 6B21 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1735+ 6B22 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1735+ 6B24             >                org     $-1                 // alter last byte of Name just above to set
1735+ 6B23 C0          >                db      {b $} | END_BIT     // msb as name end
1735+ 6B24             >
1735+ 6B24 16 6B       >                dw      last_NFA            // Link to previous definition Name
1735+ 6B26             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1735+ 6B26 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1735+ 6B26 ~           >
1735+ 6B26 ~           >
1735+ 6B26             >                endif           ; ok        // for other definitions it "points" the correct handler
1735+ 6B26             >                // Use of "; ok" to suppress "warning[fwdref]"
1735+ 6B26             >
1735+ 6B26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1736+ 6B26 E1                           pop     hl
1737+ 6B27 6E                           ld      l, (hl)             // low-byte
1738+ 6B28 26 00                        ld      h, 0
1739+ 6B2A
1740+ 6B2A                              psh1
1740+ 6B2A E5          >                push    hl
1740+ 6B2B DD E9       >                jp      (ix)
1741+ 6B2D
1742+ 6B2D              //  ______________________________________________________________________
1743+ 6B2D              //
1744+ 6B2D              // c!           c a --
1745+ 6B2D              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1746+ 6B2D                              New_Def CSTORE, "C!", is_code, is_normal
1746+ 6B2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1746+ 6B2D             >
1746+ 6B2D             >                // dummy db directives used to calculate length of namec
1746+ 6B2D 43 21       >                db      "C!"
1746+ 6B2F             >len_NFA         defl    $ - temp_NFA
1746+ 6B2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1746+ 6B2D             >
1746+ 6B2D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1746+ 6B2E 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1746+ 6B30             >                org     $-1                 // alter last byte of Name just above to set
1746+ 6B2F A1          >                db      {b $} | END_BIT     // msb as name end
1746+ 6B30             >
1746+ 6B30 21 6B       >                dw      last_NFA            // Link to previous definition Name
1746+ 6B32             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1746+ 6B32 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1746+ 6B32 ~           >
1746+ 6B32 ~           >
1746+ 6B32             >                endif           ; ok        // for other definitions it "points" the correct handler
1746+ 6B32             >                // Use of "; ok" to suppress "warning[fwdref]"
1746+ 6B32             >
1746+ 6B32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1747+ 6B32 E1                           pop     hl                  // < address
1748+ 6B33 D1                           pop     de
1749+ 6B34 73                           ld      (hl), e             // low-byte
1750+ 6B35
1751+ 6B35                              next
1751+ 6B35 DD E9       >                jp      (ix)
1752+ 6B37
1753+ 6B37              //  ______________________________________________________________________
1754+ 6B37              //
1755+ 6B37              // 2@           a -- d
1756+ 6B37              // fetch a 32 bits number d from address a and leaves it on top of the
1757+ 6B37              // stack as two single numbers, high part as top of the stack.
1758+ 6B37              // A double number is normally kept in CPU registers as HLDE.
1759+ 6B37              // On stack a double number is treated as two single numbers
1760+ 6B37              // where BC is on the top of the stack and HL is the second from top,
1761+ 6B37              // so the sign of the number can be checked on top of stack
1762+ 6B37              // and in the stack memory it appears as LHED.
1763+ 6B37                              New_Def TWO_FETCH, "2@", is_code, is_normal
1763+ 6B37             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1763+ 6B37             >
1763+ 6B37             >                // dummy db directives used to calculate length of namec
1763+ 6B37 32 40       >                db      "2@"
1763+ 6B39             >len_NFA         defl    $ - temp_NFA
1763+ 6B39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1763+ 6B37             >
1763+ 6B37 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1763+ 6B38 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1763+ 6B3A             >                org     $-1                 // alter last byte of Name just above to set
1763+ 6B39 C0          >                db      {b $} | END_BIT     // msb as name end
1763+ 6B3A             >
1763+ 6B3A 2D 6B       >                dw      last_NFA            // Link to previous definition Name
1763+ 6B3C             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1763+ 6B3C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1763+ 6B3C ~           >
1763+ 6B3C ~           >
1763+ 6B3C             >                endif           ; ok        // for other definitions it "points" the correct handler
1763+ 6B3C             >                // Use of "; ok" to suppress "warning[fwdref]"
1763+ 6B3C             >
1763+ 6B3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1764+ 6B3C E1                           pop     hl                  // address
1765+ 6B3D 5E                           ld      e, (hl)             // low-byte
1766+ 6B3E 23                           inc     hl
1767+ 6B3F 56                           ld      d, (hl)             // high-byte
1768+ 6B40 23                           inc     hl
1769+ 6B41 7E                           ld      a, (hl)             // low-byte
1770+ 6B42 23                           inc     hl
1771+ 6B43 66                           ld      h, (hl)             // high-byte
1772+ 6B44 6F                           ld      l, a
1773+ 6B45 E5                           push    hl
1774+ 6B46 D5                           push    de
1775+ 6B47                              next
1775+ 6B47 DD E9       >                jp      (ix)
1776+ 6B49
1777+ 6B49              //  ______________________________________________________________________
1778+ 6B49              //
1779+ 6B49              // 2!           d a --
1780+ 6B49              // stores a 32 bits number d from address a and leaves it on top of the
1781+ 6B49              // stack as two single numbers, high part as top of the stack.
1782+ 6B49              // A double number is normally kept in CPU registers as HLDE.
1783+ 6B49              // On stack a double number is treated as two single numbers
1784+ 6B49              // where BC is on the top of the stack and HL is the second from top,
1785+ 6B49              // so the sign of the number can be checked on top of stack
1786+ 6B49              // and in the stack memory it appears as LHED.
1787+ 6B49                              New_Def TWO_STORE, "2!", is_code, is_normal
1787+ 6B49             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1787+ 6B49             >
1787+ 6B49             >                // dummy db directives used to calculate length of namec
1787+ 6B49 32 21       >                db      "2!"
1787+ 6B4B             >len_NFA         defl    $ - temp_NFA
1787+ 6B4B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1787+ 6B49             >
1787+ 6B49 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1787+ 6B4A 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1787+ 6B4C             >                org     $-1                 // alter last byte of Name just above to set
1787+ 6B4B A1          >                db      {b $} | END_BIT     // msb as name end
1787+ 6B4C             >
1787+ 6B4C 37 6B       >                dw      last_NFA            // Link to previous definition Name
1787+ 6B4E             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1787+ 6B4E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1787+ 6B4E ~           >
1787+ 6B4E ~           >
1787+ 6B4E             >                endif           ; ok        // for other definitions it "points" the correct handler
1787+ 6B4E             >                // Use of "; ok" to suppress "warning[fwdref]"
1787+ 6B4E             >
1787+ 6B4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1788+ 6B4E D9                           exx
1789+ 6B4F E1                           pop     hl                  // address
1790+ 6B50 C1                           pop     bc                  // < high-part
1791+ 6B51 D1                           pop     de                  // < low-part > Instruction Pointer
1792+ 6B52 71                           ld      (hl), c
1793+ 6B53 23                           inc     hl
1794+ 6B54 70                           ld      (hl), b
1795+ 6B55 23                           inc     hl
1796+ 6B56 73                           ld      (hl), e
1797+ 6B57 23                           inc     hl
1798+ 6B58 72                           ld      (hl), d
1799+ 6B59 D9                           exx
1800+ 6B5A                              next
1800+ 6B5A DD E9       >                jp      (ix)
1801+ 6B5C
1802+ 6B5C              //  ______________________________________________________________________
1803+ 6B5C              //
1804+ 6B5C              // p@           a -- c
1805+ 6B5C              // Read one byte from port a and leave the result on top of stack
1806+ 6B5C                              New_Def PFETCH, "P@", is_code, is_normal
1806+ 6B5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1806+ 6B5C             >
1806+ 6B5C             >                // dummy db directives used to calculate length of namec
1806+ 6B5C 50 40       >                db      "P@"
1806+ 6B5E             >len_NFA         defl    $ - temp_NFA
1806+ 6B5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1806+ 6B5C             >
1806+ 6B5C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1806+ 6B5D 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1806+ 6B5F             >                org     $-1                 // alter last byte of Name just above to set
1806+ 6B5E C0          >                db      {b $} | END_BIT     // msb as name end
1806+ 6B5F             >
1806+ 6B5F 49 6B       >                dw      last_NFA            // Link to previous definition Name
1806+ 6B61             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1806+ 6B61 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1806+ 6B61 ~           >
1806+ 6B61 ~           >
1806+ 6B61             >                endif           ; ok        // for other definitions it "points" the correct handler
1806+ 6B61             >                // Use of "; ok" to suppress "warning[fwdref]"
1806+ 6B61             >
1806+ 6B61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1807+ 6B61 D9                           exx
1808+ 6B62 C1                           pop     bc
1809+ 6B63 26 00                        ld      h, 0
1810+ 6B65 ED 68                        in      l, (c)
1811+ 6B67 E5                           push    hl
1812+ 6B68 D9                           exx
1813+ 6B69                              next
1813+ 6B69 DD E9       >                jp      (ix)
1814+ 6B6B
1815+ 6B6B              //  ______________________________________________________________________
1816+ 6B6B              //
1817+ 6B6B              // p!           c a --
1818+ 6B6B              // Send one byte (top of stack) to port a
1819+ 6B6B                              New_Def PSTORE, "P!", is_code, is_normal
1819+ 6B6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1819+ 6B6B             >
1819+ 6B6B             >                // dummy db directives used to calculate length of namec
1819+ 6B6B 50 21       >                db      "P!"
1819+ 6B6D             >len_NFA         defl    $ - temp_NFA
1819+ 6B6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1819+ 6B6B             >
1819+ 6B6B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1819+ 6B6C 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1819+ 6B6E             >                org     $-1                 // alter last byte of Name just above to set
1819+ 6B6D A1          >                db      {b $} | END_BIT     // msb as name end
1819+ 6B6E             >
1819+ 6B6E 5C 6B       >                dw      last_NFA            // Link to previous definition Name
1819+ 6B70             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1819+ 6B70 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1819+ 6B70 ~           >
1819+ 6B70 ~           >
1819+ 6B70             >                endif           ; ok        // for other definitions it "points" the correct handler
1819+ 6B70             >                // Use of "; ok" to suppress "warning[fwdref]"
1819+ 6B70             >
1819+ 6B70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1820+ 6B70 D9                           exx
1821+ 6B71 C1                           pop     bc
1822+ 6B72 E1                           pop     hl                  // < c
1823+ 6B73 ED 69                        out     (c), l              // low-byte
1824+ 6B75 D9                           exx
1825+ 6B76                              next
1825+ 6B76 DD E9       >                jp      (ix)
1826+ 6B78
1827+ 6B78
1828+ 6B78              //  ______________________________________________________________________
1829+ 6B78              //
1830+ 6B78              // 2*           n1 -- n2
1831+ 6B78              // doubles the number at top of stack
1832+ 6B78                              New_Def TWO_MUL, "2*", is_code, is_normal
1832+ 6B78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1832+ 6B78             >
1832+ 6B78             >                // dummy db directives used to calculate length of namec
1832+ 6B78 32 2A       >                db      "2*"
1832+ 6B7A             >len_NFA         defl    $ - temp_NFA
1832+ 6B7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1832+ 6B78             >
1832+ 6B78 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1832+ 6B79 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1832+ 6B7B             >                org     $-1                 // alter last byte of Name just above to set
1832+ 6B7A AA          >                db      {b $} | END_BIT     // msb as name end
1832+ 6B7B             >
1832+ 6B7B 6B 6B       >                dw      last_NFA            // Link to previous definition Name
1832+ 6B7D             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1832+ 6B7D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1832+ 6B7D ~           >
1832+ 6B7D ~           >
1832+ 6B7D             >                endif           ; ok        // for other definitions it "points" the correct handler
1832+ 6B7D             >                // Use of "; ok" to suppress "warning[fwdref]"
1832+ 6B7D             >
1832+ 6B7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1833+ 6B7D              Two_Mul_Ptr:
1834+ 6B7D E1                           pop     hl
1835+ 6B7E 29                           add     hl, hl
1836+ 6B7F
1837+ 6B7F                              psh1
1837+ 6B7F E5          >                push    hl
1837+ 6B80 DD E9       >                jp      (ix)
1838+ 6B82
1839+ 6B82              //  ______________________________________________________________________
1840+ 6B82              //
1841+ 6B82              // 2/           n1 -- n2
1842+ 6B82              // halves the top of stack, sign is unchanged
1843+ 6B82                              New_Def TWO_DIV, "2/", is_code, is_normal
1843+ 6B82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1843+ 6B82             >
1843+ 6B82             >                // dummy db directives used to calculate length of namec
1843+ 6B82 32 2F       >                db      "2/"
1843+ 6B84             >len_NFA         defl    $ - temp_NFA
1843+ 6B84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1843+ 6B82             >
1843+ 6B82 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1843+ 6B83 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1843+ 6B85             >                org     $-1                 // alter last byte of Name just above to set
1843+ 6B84 AF          >                db      {b $} | END_BIT     // msb as name end
1843+ 6B85             >
1843+ 6B85 78 6B       >                dw      last_NFA            // Link to previous definition Name
1843+ 6B87             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1843+ 6B87 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1843+ 6B87 ~           >
1843+ 6B87 ~           >
1843+ 6B87             >                endif           ; ok        // for other definitions it "points" the correct handler
1843+ 6B87             >                // Use of "; ok" to suppress "warning[fwdref]"
1843+ 6B87             >
1843+ 6B87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1844+ 6B87 E1                           pop     hl
1845+ 6B88 CB 2C                        sra     h
1846+ 6B8A CB 1D                        rr      l
1847+ 6B8C
1848+ 6B8C                              psh1
1848+ 6B8C E5          >                push    hl
1848+ 6B8D DD E9       >                jp      (ix)
1849+ 6B8F
1850+ 6B8F              //  ______________________________________________________________________
1851+ 6B8F              //
1852+ 6B8F              // lshift       n1 u -- n2
1853+ 6B8F              // bit left shift of u bits
1854+ 6B8F                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1854+ 6B8F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1854+ 6B8F             >
1854+ 6B8F             >                // dummy db directives used to calculate length of namec
1854+ 6B8F 4C 53 48 49 >                db      "LSHIFT"
1854+ 6B93 46 54       >
1854+ 6B95             >len_NFA         defl    $ - temp_NFA
1854+ 6B95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1854+ 6B8F             >
1854+ 6B8F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1854+ 6B90 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1854+ 6B94 46 54       >
1854+ 6B96             >                org     $-1                 // alter last byte of Name just above to set
1854+ 6B95 D4          >                db      {b $} | END_BIT     // msb as name end
1854+ 6B96             >
1854+ 6B96 82 6B       >                dw      last_NFA            // Link to previous definition Name
1854+ 6B98             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1854+ 6B98 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1854+ 6B98 ~           >
1854+ 6B98 ~           >
1854+ 6B98             >                endif           ; ok        // for other definitions it "points" the correct handler
1854+ 6B98             >                // Use of "; ok" to suppress "warning[fwdref]"
1854+ 6B98             >
1854+ 6B98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1855+ 6B98 D1                           pop     de
1856+ 6B99
1857+ 6B99 E1                           pop     hl
1858+ 6B9A 7B                           ld      a, e
1859+ 6B9B B7                           or      a
1860+ 6B9C 28 04                        jr      z, Lshift_Zero
1861+ 6B9E              Lshift_Loop:
1862+ 6B9E 29                                   add     hl, hl
1863+ 6B9F 3D                                   dec     a
1864+ 6BA0 20 FC                            jr      nz, Lshift_Loop
1865+ 6BA2              Lshift_Zero:
1866+ 6BA2
1867+ 6BA2
1868+ 6BA2                              psh1
1868+ 6BA2 E5          >                push    hl
1868+ 6BA3 DD E9       >                jp      (ix)
1869+ 6BA5
1870+ 6BA5              //  ______________________________________________________________________
1871+ 6BA5              //
1872+ 6BA5              // rshift       n1 u -- n2
1873+ 6BA5              // bit right shift of u bits
1874+ 6BA5                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1874+ 6BA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1874+ 6BA5             >
1874+ 6BA5             >                // dummy db directives used to calculate length of namec
1874+ 6BA5 52 53 48 49 >                db      "RSHIFT"
1874+ 6BA9 46 54       >
1874+ 6BAB             >len_NFA         defl    $ - temp_NFA
1874+ 6BAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1874+ 6BA5             >
1874+ 6BA5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1874+ 6BA6 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1874+ 6BAA 46 54       >
1874+ 6BAC             >                org     $-1                 // alter last byte of Name just above to set
1874+ 6BAB D4          >                db      {b $} | END_BIT     // msb as name end
1874+ 6BAC             >
1874+ 6BAC 8F 6B       >                dw      last_NFA            // Link to previous definition Name
1874+ 6BAE             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1874+ 6BAE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1874+ 6BAE ~           >
1874+ 6BAE ~           >
1874+ 6BAE             >                endif           ; ok        // for other definitions it "points" the correct handler
1874+ 6BAE             >                // Use of "; ok" to suppress "warning[fwdref]"
1874+ 6BAE             >
1874+ 6BAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1875+ 6BAE D1                           pop     de
1876+ 6BAF
1877+ 6BAF E1                           pop     hl
1878+ 6BB0 7B                           ld      a, e
1879+ 6BB1 B7                           or      a
1880+ 6BB2 28 07                        jr      z, Rshift_Zero
1881+ 6BB4              Rshift_Loop:
1882+ 6BB4 CB 3C                                srl     h
1883+ 6BB6 CB 1D                                rr      l
1884+ 6BB8 3D                                   dec     a
1885+ 6BB9 20 F9                            jr      nz, Rshift_Loop
1886+ 6BBB              Rshift_Zero:
1887+ 6BBB
1888+ 6BBB
1889+ 6BBB                              psh1
1889+ 6BBB E5          >                push    hl
1889+ 6BBC DD E9       >                jp      (ix)
1890+ 6BBE
1891+ 6BBE              //  ______________________________________________________________________
1892+ 6BBE              //
1893+ 6BBE              // cells        n1 -- n2
1894+ 6BBE              // decrement by 2 top of stack
1895+ 6BBE                              New_Def CELLS, "CELLS", is_code, is_normal
1895+ 6BBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1895+ 6BBE             >
1895+ 6BBE             >                // dummy db directives used to calculate length of namec
1895+ 6BBE 43 45 4C 4C >                db      "CELLS"
1895+ 6BC2 53          >
1895+ 6BC3             >len_NFA         defl    $ - temp_NFA
1895+ 6BC3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1895+ 6BBE             >
1895+ 6BBE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1895+ 6BBF 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1895+ 6BC3 53          >
1895+ 6BC4             >                org     $-1                 // alter last byte of Name just above to set
1895+ 6BC3 D3          >                db      {b $} | END_BIT     // msb as name end
1895+ 6BC4             >
1895+ 6BC4 A5 6B       >                dw      last_NFA            // Link to previous definition Name
1895+ 6BC6             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1895+ 6BC6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1895+ 6BC6 ~           >
1895+ 6BC6 ~           >
1895+ 6BC6             >                endif           ; ok        // for other definitions it "points" the correct handler
1895+ 6BC6             >                // Use of "; ok" to suppress "warning[fwdref]"
1895+ 6BC6             >
1895+ 6BC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1896+ 6BC6 C3 7D 6B                     jp      Two_Mul_Ptr
1897+ 6BC9
1898+ 6BC9
1899+ 6BC9              //  ______________________________________________________________________
1900+ 6BC9
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
 111  6BC9                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
   1+ 6BC9              //  ______________________________________________________________________
   2+ 6BC9              //
   3+ 6BC9              //  L1.asm
   4+ 6BC9              //
   5+ 6BC9              //  Level-1 definitions and derivate
   6+ 6BC9              //  ______________________________________________________________________
   7+ 6BC9
   8+ 6BC9              //  ______________________________________________________________________
   9+ 6BC9              //
  10+ 6BC9              // :            -- cccc     ( compile time )
  11+ 6BC9              //              i*x -- j*x  ( run time )
  12+ 6BC9              // Colon Definition
  13+ 6BC9                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6BC9             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6BC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6BC9             >
  13+ 6BC9             >                // dummy db directives used to calculate length of namec
  13+ 6BC9 3A          >                db      ":"
  13+ 6BCA             >len_NFA         defl    $ - temp_NFA
  13+ 6BCA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6BC9             >
  13+ 6BC9 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6BCA 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6BCB             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6BCA BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6BCB             >
  13+ 6BCB BE 6B       >                dw      last_NFA            // Link to previous definition Name
  13+ 6BCD             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6BCD CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6BD0             >
  13+ 6BD0             >
  13+ 6BD0             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6BD0             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6BD0             >
  13+ 6BD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6BD0
  15+ 6BD0 73 70                        dw      QEXEC                   // ?exec
  16+ 6BD2 2B 70                        dw      STORE_CSP               // !csp
  17+ 6BD4 BB 6D 0F 6B                  dw      CURRENT, FETCH          // current @
  18+ 6BD8 AD 6D 1A 6B                  dw      CONTEXT, STORE          // context !
  19+ 6BDC 9C 76                        dw      CREATE                  // create  ( forward )
  20+ 6BDE 28 71                        dw      SMUDGE                  // dmudge
  21+ 6BE0 12 71                        dw      SQUARED_CLOSE           // ]
  22+ 6BE2 82 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6BE4                                                              // ... immediate
  24+ 6BE4              Enter_Ptr:
  25+ 6BE4                              // via call coded in CFA
  26+ 6BE4                              ldhlrp
  26+ 6BE4 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6BE7 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6BE8 70                           ld      (hl), b
  29+ 6BE9 2B                           dec     hl
  30+ 6BEA 71                           ld      (hl), c
  31+ 6BEB                              ldrphl
  31+ 6BEB 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6BEE
  33+ 6BEE
  34+ 6BEE C1                           pop     bc                  // points to PFA of "this" word
  35+ 6BEF                              next
  35+ 6BEF DD E9       >                jp      (ix)
  36+ 6BF1
  37+ 6BF1              //  ______________________________________________________________________
  38+ 6BF1              //
  39+ 6BF1              // ;            --
  40+ 6BF1              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6BF1                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6BF1             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6BF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6BF1             >
  41+ 6BF1             >                // dummy db directives used to calculate length of namec
  41+ 6BF1 3B          >                db      ";"
  41+ 6BF2             >len_NFA         defl    $ - temp_NFA
  41+ 6BF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6BF1             >
  41+ 6BF1 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6BF2 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6BF3             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6BF2 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6BF3             >
  41+ 6BF3 C9 6B       >                dw      last_NFA            // Link to previous definition Name
  41+ 6BF5             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6BF5 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6BF8             >
  41+ 6BF8             >
  41+ 6BF8             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6BF8             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6BF8             >
  41+ 6BF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6BF8
  43+ 6BF8 9F 70                        dw      QCSP                    // ?csp
  44+ 6BFA D8 70 4B 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6BFE 28 71                        dw      SMUDGE                  // smudge
  46+ 6C00 03 71                        dw      SQUARED_OPEN            // [
  47+ 6C02 4B 69                        dw      EXIT                    // ; immediate
  48+ 6C04
  49+ 6C04              //  ______________________________________________________________________
  50+ 6C04              //
  51+ 6C04              // noop         --
  52+ 6C04
  53+ 6C04                              Colon_Def NOOP, "NOOP", is_normal
  53+ 6C04             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 6C04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6C04             >
  53+ 6C04             >                // dummy db directives used to calculate length of namec
  53+ 6C04 4E 4F 4F 50 >                db      "NOOP"
  53+ 6C08             >len_NFA         defl    $ - temp_NFA
  53+ 6C08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6C04             >
  53+ 6C04 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6C05 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6C09             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6C08 D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6C09             >
  53+ 6C09 F1 6B       >                dw      last_NFA            // Link to previous definition Name
  53+ 6C0B             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6C0B CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 6C0E             >
  53+ 6C0E             >
  53+ 6C0E             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6C0E             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6C0E             >
  53+ 6C0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6C0E 4B 69                        dw      EXIT
  55+ 6C10
  56+ 6C10              //  ______________________________________________________________________
  57+ 6C10              //
  58+ 6C10              // constant     n -- cccc     ( compile time )
  59+ 6C10              //              -- n          ( run time )
  60+ 6C10              // Constant definition.
  61+ 6C10                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6C10             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6C10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6C10             >
  61+ 6C10             >                // dummy db directives used to calculate length of namec
  61+ 6C10 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6C14 54 41 4E 54 >
  61+ 6C18             >len_NFA         defl    $ - temp_NFA
  61+ 6C18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6C10             >
  61+ 6C10 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6C11 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6C15 54 41 4E 54 >
  61+ 6C19             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6C18 D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6C19             >
  61+ 6C19 04 6C       >                dw      last_NFA            // Link to previous definition Name
  61+ 6C1B             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6C1B CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6C1E             >
  61+ 6C1E             >
  61+ 6C1E             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6C1E             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6C1E             >
  61+ 6C1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6C1E
  63+ 6C1E 9C 76                        dw      CREATE                  // create
  64+ 6C20 88 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6C22 82 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6C24              Constant_Ptr:
  67+ 6C24
  68+ 6C24
  69+ 6C24 E1                           pop     hl
  70+ 6C25
  71+ 6C25 5E                           ld      e, (hl)
  72+ 6C26 23                           inc     hl
  73+ 6C27 56                           ld      d, (hl)
  74+ 6C28 D5                           push    de
  75+ 6C29                              next
  75+ 6C29 DD E9       >                jp      (ix)
  76+ 6C2B
  77+ 6C2B              //  ______________________________________________________________________
  78+ 6C2B              //
  79+ 6C2B              // variable     n -- cccc     ( compile time )
  80+ 6C2B              //              -- a          ( run time )
  81+ 6C2B              // Variable definition, n is the initial value.
  82+ 6C2B                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6C2B             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6C2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6C2B             >
  82+ 6C2B             >                // dummy db directives used to calculate length of namec
  82+ 6C2B 56 41 52 49 >                db      "VARIABLE"
  82+ 6C2F 41 42 4C 45 >
  82+ 6C33             >len_NFA         defl    $ - temp_NFA
  82+ 6C33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6C2B             >
  82+ 6C2B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6C2C 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6C30 41 42 4C 45 >
  82+ 6C34             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6C33 C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6C34             >
  82+ 6C34 10 6C       >                dw      last_NFA            // Link to previous definition Name
  82+ 6C36             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6C36 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6C39             >
  82+ 6C39             >
  82+ 6C39             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6C39             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6C39             >
  82+ 6C39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6C39
  84+ 6C39 60 6C                        dw      ZERO
  85+ 6C3B 1B 6C                        dw      CONSTANT                // constant
  86+ 6C3D 82 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  87+ 6C3F              Variable_Ptr:
  88+ 6C3F
  89+ 6C3F
  90+ 6C3F
  91+ 6C3F
  92+ 6C3F                              next
  92+ 6C3F DD E9       >                jp      (ix)
  93+ 6C41
  94+ 6C41              //  ______________________________________________________________________
  95+ 6C41              //
  96+ 6C41              // user         b -- cccc     ( compile time )
  97+ 6C41              //              -- a          ( run time )
  98+ 6C41              // User variable definition
  99+ 6C41                              Colon_Def USER, "USER", is_normal
  99+ 6C41             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  99+ 6C41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99+ 6C41             >
  99+ 6C41             >                // dummy db directives used to calculate length of namec
  99+ 6C41 55 53 45 52 >                db      "USER"
  99+ 6C45             >len_NFA         defl    $ - temp_NFA
  99+ 6C45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99+ 6C41             >
  99+ 6C41 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99+ 6C42 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  99+ 6C46             >                org     $-1                 // alter last byte of Name just above to set
  99+ 6C45 D2          >                db      {b $} | END_BIT     // msb as name end
  99+ 6C46             >
  99+ 6C46 2B 6C       >                dw      last_NFA            // Link to previous definition Name
  99+ 6C48             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  99+ 6C48 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  99+ 6C4B             >
  99+ 6C4B             >
  99+ 6C4B             >                endif           ; ok        // for other definitions it "points" the correct handler
  99+ 6C4B             >                // Use of "; ok" to suppress "warning[fwdref]"
  99+ 6C4B             >
  99+ 6C4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100+ 6C4B
 101+ 6C4B 9C 76                        dw      CREATE                  // create
 102+ 6C4D 9A 6E                        dw      CCOMMA                  // c,
 103+ 6C4F 82 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 104+ 6C51
 105+ 6C51
 106+ 6C51              User_Ptr:
 107+ 6C51                              // via call coded in CFA
 108+ 6C51 E1                           pop     hl
 109+ 6C52
 110+ 6C52 5E                           ld      e, (hl)
 111+ 6C53 16 00                        ld      d, 0
 112+ 6C55 2A 94 63                     ld      hl, (USER_Pointer)
 113+ 6C58 19                           add     hl, de
 114+ 6C59
 115+ 6C59                              psh1
 115+ 6C59 E5          >                push    hl
 115+ 6C5A DD E9       >                jp      (ix)
 116+ 6C5C
 117+ 6C5C              //  ______________________________________________________________________
 118+ 6C5C              //
 119+ 6C5C                              Constant_Def ZERO       ,   "0"     ,   0
 119+ 6C5C             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 119+ 6C5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6C5C             >
 119+ 6C5C             >                // dummy db directives used to calculate length of namec
 119+ 6C5C 30          >                db      "0"
 119+ 6C5D             >len_NFA         defl    $ - temp_NFA
 119+ 6C5D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6C5C             >
 119+ 6C5C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6C5D 30          >                db      "0"               // name string in 7-bit ascii, but
 119+ 6C5E             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6C5D B0          >                db      {b $} | END_BIT     // msb as name end
 119+ 6C5E             >
 119+ 6C5E 41 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6C60             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6C60 CD 24 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6C63             >
 119+ 6C63             >
 119+ 6C63             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6C63             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6C63             >
 119+ 6C63             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6C63 00 00       >                dw      0
 120+ 6C65                              Constant_Def ONE        ,   "1"     ,   1
 120+ 6C65             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 120+ 6C65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6C65             >
 120+ 6C65             >                // dummy db directives used to calculate length of namec
 120+ 6C65 31          >                db      "1"
 120+ 6C66             >len_NFA         defl    $ - temp_NFA
 120+ 6C66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6C65             >
 120+ 6C65 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6C66 31          >                db      "1"               // name string in 7-bit ascii, but
 120+ 6C67             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6C66 B1          >                db      {b $} | END_BIT     // msb as name end
 120+ 6C67             >
 120+ 6C67 5C 6C       >                dw      last_NFA            // Link to previous definition Name
 120+ 6C69             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6C69 CD 24 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6C6C             >
 120+ 6C6C             >
 120+ 6C6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6C6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6C6C             >
 120+ 6C6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6C6C 01 00       >                dw      1
 121+ 6C6E                              Constant_Def TWO        ,   "2"     ,   2
 121+ 6C6E             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 121+ 6C6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6C6E             >
 121+ 6C6E             >                // dummy db directives used to calculate length of namec
 121+ 6C6E 32          >                db      "2"
 121+ 6C6F             >len_NFA         defl    $ - temp_NFA
 121+ 6C6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6C6E             >
 121+ 6C6E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6C6F 32          >                db      "2"               // name string in 7-bit ascii, but
 121+ 6C70             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6C6F B2          >                db      {b $} | END_BIT     // msb as name end
 121+ 6C70             >
 121+ 6C70 65 6C       >                dw      last_NFA            // Link to previous definition Name
 121+ 6C72             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6C72 CD 24 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6C75             >
 121+ 6C75             >
 121+ 6C75             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6C75             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6C75             >
 121+ 6C75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6C75 02 00       >                dw      2
 122+ 6C77                              Constant_Def THREE      ,   "3"     ,   3
 122+ 6C77             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 122+ 6C77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6C77             >
 122+ 6C77             >                // dummy db directives used to calculate length of namec
 122+ 6C77 33          >                db      "3"
 122+ 6C78             >len_NFA         defl    $ - temp_NFA
 122+ 6C78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6C77             >
 122+ 6C77 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6C78 33          >                db      "3"               // name string in 7-bit ascii, but
 122+ 6C79             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6C78 B3          >                db      {b $} | END_BIT     // msb as name end
 122+ 6C79             >
 122+ 6C79 6E 6C       >                dw      last_NFA            // Link to previous definition Name
 122+ 6C7B             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6C7B CD 24 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6C7E             >
 122+ 6C7E             >
 122+ 6C7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6C7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6C7E             >
 122+ 6C7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6C7E 03 00       >                dw      3
 123+ 6C80                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 123+ 6C80             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 123+ 6C80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6C80             >
 123+ 6C80             >                // dummy db directives used to calculate length of namec
 123+ 6C80 2D 31       >                db      "-1"
 123+ 6C82             >len_NFA         defl    $ - temp_NFA
 123+ 6C82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6C80             >
 123+ 6C80 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6C81 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 123+ 6C83             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6C82 B1          >                db      {b $} | END_BIT     // msb as name end
 123+ 6C83             >
 123+ 6C83 77 6C       >                dw      last_NFA            // Link to previous definition Name
 123+ 6C85             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6C85 CD 24 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6C88             >
 123+ 6C88             >
 123+ 6C88             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6C88             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6C88             >
 123+ 6C88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6C88 FF FF       >                dw      -1
 124+ 6C8A                              Constant_Def BL         ,   "BL"    , $20
 124+ 6C8A             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 124+ 6C8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6C8A             >
 124+ 6C8A             >                // dummy db directives used to calculate length of namec
 124+ 6C8A 42 4C       >                db      "BL"
 124+ 6C8C             >len_NFA         defl    $ - temp_NFA
 124+ 6C8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6C8A             >
 124+ 6C8A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6C8B 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 124+ 6C8D             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6C8C CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6C8D             >
 124+ 6C8D 80 6C       >                dw      last_NFA            // Link to previous definition Name
 124+ 6C8F             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6C8F CD 24 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6C92             >
 124+ 6C92             >
 124+ 6C92             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6C92             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6C92             >
 124+ 6C92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6C92 20 00       >                dw      $20
 125+ 6C94                              Constant_Def CL         ,   "C/L"   ,  64
 125+ 6C94             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 125+ 6C94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6C94             >
 125+ 6C94             >                // dummy db directives used to calculate length of namec
 125+ 6C94 43 2F 4C    >                db      "C/L"
 125+ 6C97             >len_NFA         defl    $ - temp_NFA
 125+ 6C97             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6C94             >
 125+ 6C94 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6C95 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 125+ 6C98             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6C97 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ 6C98             >
 125+ 6C98 8A 6C       >                dw      last_NFA            // Link to previous definition Name
 125+ 6C9A             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6C9A CD 24 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6C9D             >
 125+ 6C9D             >
 125+ 6C9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6C9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6C9D             >
 125+ 6C9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6C9D 40 00       >                dw      64
 126+ 6C9F                              Constant_Def BBUF       ,   "B/BUF" , 512
 126+ 6C9F             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 126+ 6C9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6C9F             >
 126+ 6C9F             >                // dummy db directives used to calculate length of namec
 126+ 6C9F 42 2F 42 55 >                db      "B/BUF"
 126+ 6CA3 46          >
 126+ 6CA4             >len_NFA         defl    $ - temp_NFA
 126+ 6CA4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6C9F             >
 126+ 6C9F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6CA0 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 126+ 6CA4 46          >
 126+ 6CA5             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6CA4 C6          >                db      {b $} | END_BIT     // msb as name end
 126+ 6CA5             >
 126+ 6CA5 94 6C       >                dw      last_NFA            // Link to previous definition Name
 126+ 6CA7             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6CA7 CD 24 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6CAA             >
 126+ 6CAA             >
 126+ 6CAA             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6CAA             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6CAA             >
 126+ 6CAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6CAA 00 02       >                dw      512
 127+ 6CAC                              Constant_Def BSCR       ,   "B/SCR" ,   2
 127+ 6CAC             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 127+ 6CAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6CAC             >
 127+ 6CAC             >                // dummy db directives used to calculate length of namec
 127+ 6CAC 42 2F 53 43 >                db      "B/SCR"
 127+ 6CB0 52          >
 127+ 6CB1             >len_NFA         defl    $ - temp_NFA
 127+ 6CB1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6CAC             >
 127+ 6CAC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6CAD 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 127+ 6CB1 52          >
 127+ 6CB2             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6CB1 D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6CB2             >
 127+ 6CB2 9F 6C       >                dw      last_NFA            // Link to previous definition Name
 127+ 6CB4             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6CB4 CD 24 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6CB7             >
 127+ 6CB7             >
 127+ 6CB7             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6CB7             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6CB7             >
 127+ 6CB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6CB7 02 00       >                dw      2
 128+ 6CB9                              Constant_Def LSCR       ,   "L/SCR" ,  16
 128+ 6CB9             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 128+ 6CB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ 6CB9             >
 128+ 6CB9             >                // dummy db directives used to calculate length of namec
 128+ 6CB9 4C 2F 53 43 >                db      "L/SCR"
 128+ 6CBD 52          >
 128+ 6CBE             >len_NFA         defl    $ - temp_NFA
 128+ 6CBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ 6CB9             >
 128+ 6CB9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ 6CBA 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 128+ 6CBE 52          >
 128+ 6CBF             >                org     $-1                 // alter last byte of Name just above to set
 128+ 6CBE D2          >                db      {b $} | END_BIT     // msb as name end
 128+ 6CBF             >
 128+ 6CBF AC 6C       >                dw      last_NFA            // Link to previous definition Name
 128+ 6CC1             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6CC1 CD 24 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6CC4             >
 128+ 6CC4             >
 128+ 6CC4             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6CC4             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6CC4             >
 128+ 6CC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6CC4 10 00       >                dw      16
 129+ 6CC6
 130+ 6CC6              //  ______________________________________________________________________
 131+ 6CC6              //
 132+ 6CC6              // +origin         --
 133+ 6CC6              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 134+ 6CC6              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 135+ 6CC6              //              dw      PLUS                    // +
 136+ 6CC6              //              dw      EXIT                    // ;
 137+ 6CC6                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 137+ 6CC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ 6CC6             >
 137+ 6CC6             >                // dummy db directives used to calculate length of namec
 137+ 6CC6 2B 4F 52 49 >                db      "+ORIGIN"
 137+ 6CCA 47 49 4E    >
 137+ 6CCD             >len_NFA         defl    $ - temp_NFA
 137+ 6CCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ 6CC6             >
 137+ 6CC6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ 6CC7 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 137+ 6CCB 47 49 4E    >
 137+ 6CCE             >                org     $-1                 // alter last byte of Name just above to set
 137+ 6CCD CE          >                db      {b $} | END_BIT     // msb as name end
 137+ 6CCE             >
 137+ 6CCE B9 6C       >                dw      last_NFA            // Link to previous definition Name
 137+ 6CD0             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 6CD0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 137+ 6CD0 ~           >
 137+ 6CD0 ~           >
 137+ 6CD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 6CD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 6CD0             >
 137+ 6CD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 6CD0 E1                           pop     hl
 139+ 6CD1 11 66 63                     ld      de, Cold_origin
 140+ 6CD4 19                           add     hl, de
 141+ 6CD5 E5                           push    hl
 142+ 6CD6                              next
 142+ 6CD6 DD E9       >                jp      (ix)
 143+ 6CD8
 144+ 6CD8
 145+ 6CD8              //  ______________________________________________________________________
 146+ 6CD8              //
 147+ 6CD8                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 147+ 6CD8             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 147+ 6CD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147+ 6CD8             >
 147+ 6CD8             >                // dummy db directives used to calculate length of namec
 147+ 6CD8 28 4E 45 58 >                db      "(NEXT)"
 147+ 6CDC 54 29       >
 147+ 6CDE             >len_NFA         defl    $ - temp_NFA
 147+ 6CDE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147+ 6CD8             >
 147+ 6CD8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147+ 6CD9 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 147+ 6CDD 54 29       >
 147+ 6CDF             >                org     $-1                 // alter last byte of Name just above to set
 147+ 6CDE A9          >                db      {b $} | END_BIT     // msb as name end
 147+ 6CDF             >
 147+ 6CDF C6 6C       >                dw      last_NFA            // Link to previous definition Name
 147+ 6CE1             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 147+ 6CE1 CD 24 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 147+ 6CE4             >
 147+ 6CE4             >
 147+ 6CE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 147+ 6CE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 147+ 6CE4             >
 147+ 6CE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 147+ 6CE4 98 63       >                dw      Next_Ptr
 148+ 6CE6
 149+ 6CE6              //  ______________________________________________________________________
 150+ 6CE6              //
 151+ 6CE6
 152+ 6CE6                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 152+ 6CE6             >                New_Def  S0, "S0", User_Ptr, is_normal
 152+ 6CE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6CE6             >
 152+ 6CE6             >                // dummy db directives used to calculate length of namec
 152+ 6CE6 53 30       >                db      "S0"
 152+ 6CE8             >len_NFA         defl    $ - temp_NFA
 152+ 6CE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6CE6             >
 152+ 6CE6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6CE7 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 152+ 6CE9             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6CE8 B0          >                db      {b $} | END_BIT     // msb as name end
 152+ 6CE9             >
 152+ 6CE9 D8 6C       >                dw      last_NFA            // Link to previous definition Name
 152+ 6CEB             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6CEB CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6CEE             >
 152+ 6CEE             >
 152+ 6CEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6CEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6CEE             >
 152+ 6CEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6CEE 06          >                db      06
 153+ 6CEF                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 153+ 6CEF             >                New_Def  R0, "R0", User_Ptr, is_normal
 153+ 6CEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6CEF             >
 153+ 6CEF             >                // dummy db directives used to calculate length of namec
 153+ 6CEF 52 30       >                db      "R0"
 153+ 6CF1             >len_NFA         defl    $ - temp_NFA
 153+ 6CF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6CEF             >
 153+ 6CEF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6CF0 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 153+ 6CF2             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6CF1 B0          >                db      {b $} | END_BIT     // msb as name end
 153+ 6CF2             >
 153+ 6CF2 E6 6C       >                dw      last_NFA            // Link to previous definition Name
 153+ 6CF4             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6CF4 CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6CF7             >
 153+ 6CF7             >
 153+ 6CF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6CF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6CF7             >
 153+ 6CF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6CF7 08          >                db      08
 154+ 6CF8                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 154+ 6CF8             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 154+ 6CF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6CF8             >
 154+ 6CF8             >                // dummy db directives used to calculate length of namec
 154+ 6CF8 54 49 42    >                db      "TIB"
 154+ 6CFB             >len_NFA         defl    $ - temp_NFA
 154+ 6CFB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6CF8             >
 154+ 6CF8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6CF9 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 154+ 6CFC             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6CFB C2          >                db      {b $} | END_BIT     // msb as name end
 154+ 6CFC             >
 154+ 6CFC EF 6C       >                dw      last_NFA            // Link to previous definition Name
 154+ 6CFE             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6CFE CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6D01             >
 154+ 6D01             >
 154+ 6D01             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6D01             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6D01             >
 154+ 6D01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6D01 0A          >                db      10
 155+ 6D02                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 155+ 6D02             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 155+ 6D02             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6D02             >
 155+ 6D02             >                // dummy db directives used to calculate length of namec
 155+ 6D02 57 49 44 54 >                db      "WIDTH"
 155+ 6D06 48          >
 155+ 6D07             >len_NFA         defl    $ - temp_NFA
 155+ 6D07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6D02             >
 155+ 6D02 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6D03 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 155+ 6D07 48          >
 155+ 6D08             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6D07 C8          >                db      {b $} | END_BIT     // msb as name end
 155+ 6D08             >
 155+ 6D08 F8 6C       >                dw      last_NFA            // Link to previous definition Name
 155+ 6D0A             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6D0A CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6D0D             >
 155+ 6D0D             >
 155+ 6D0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6D0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6D0D             >
 155+ 6D0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6D0D 0C          >                db      12
 156+ 6D0E                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 156+ 6D0E             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 156+ 6D0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6D0E             >
 156+ 6D0E             >                // dummy db directives used to calculate length of namec
 156+ 6D0E 57 41 52 4E >                db      "WARNING"
 156+ 6D12 49 4E 47    >
 156+ 6D15             >len_NFA         defl    $ - temp_NFA
 156+ 6D15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6D0E             >
 156+ 6D0E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6D0F 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 156+ 6D13 49 4E 47    >
 156+ 6D16             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6D15 C7          >                db      {b $} | END_BIT     // msb as name end
 156+ 6D16             >
 156+ 6D16 02 6D       >                dw      last_NFA            // Link to previous definition Name
 156+ 6D18             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6D18 CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6D1B             >
 156+ 6D1B             >
 156+ 6D1B             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6D1B             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6D1B             >
 156+ 6D1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6D1B 0E          >                db      14
 157+ 6D1C                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 157+ 6D1C             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 157+ 6D1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6D1C             >
 157+ 6D1C             >                // dummy db directives used to calculate length of namec
 157+ 6D1C 46 45 4E 43 >                db      "FENCE"
 157+ 6D20 45          >
 157+ 6D21             >len_NFA         defl    $ - temp_NFA
 157+ 6D21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6D1C             >
 157+ 6D1C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6D1D 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 157+ 6D21 45          >
 157+ 6D22             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6D21 C5          >                db      {b $} | END_BIT     // msb as name end
 157+ 6D22             >
 157+ 6D22 0E 6D       >                dw      last_NFA            // Link to previous definition Name
 157+ 6D24             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6D24 CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6D27             >
 157+ 6D27             >
 157+ 6D27             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6D27             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6D27             >
 157+ 6D27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6D27 10          >                db      16
 158+ 6D28                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 158+ 6D28             >                New_Def  DP, "DP", User_Ptr, is_normal
 158+ 6D28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6D28             >
 158+ 6D28             >                // dummy db directives used to calculate length of namec
 158+ 6D28 44 50       >                db      "DP"
 158+ 6D2A             >len_NFA         defl    $ - temp_NFA
 158+ 6D2A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6D28             >
 158+ 6D28 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6D29 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 158+ 6D2B             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6D2A D0          >                db      {b $} | END_BIT     // msb as name end
 158+ 6D2B             >
 158+ 6D2B 1C 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6D2D             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6D2D CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6D30             >
 158+ 6D30             >
 158+ 6D30             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6D30             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6D30             >
 158+ 6D30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6D30 12          >                db      18
 159+ 6D31                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 159+ 6D31             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 159+ 6D31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6D31             >
 159+ 6D31             >                // dummy db directives used to calculate length of namec
 159+ 6D31 56 4F 43 2D >                db      "VOC-LINK"
 159+ 6D35 4C 49 4E 4B >
 159+ 6D39             >len_NFA         defl    $ - temp_NFA
 159+ 6D39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6D31             >
 159+ 6D31 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6D32 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 159+ 6D36 4C 49 4E 4B >
 159+ 6D3A             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6D39 CB          >                db      {b $} | END_BIT     // msb as name end
 159+ 6D3A             >
 159+ 6D3A 28 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6D3C             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6D3C CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6D3F             >
 159+ 6D3F             >
 159+ 6D3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6D3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6D3F             >
 159+ 6D3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6D3F 14          >                db      20
 160+ 6D40                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 160+ 6D40             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 160+ 6D40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6D40             >
 160+ 6D40             >                // dummy db directives used to calculate length of namec
 160+ 6D40 46 49 52 53 >                db      "FIRST"
 160+ 6D44 54          >
 160+ 6D45             >len_NFA         defl    $ - temp_NFA
 160+ 6D45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6D40             >
 160+ 6D40 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6D41 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 160+ 6D45 54          >
 160+ 6D46             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6D45 D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6D46             >
 160+ 6D46 31 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6D48             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6D48 CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6D4B             >
 160+ 6D4B             >
 160+ 6D4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6D4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6D4B             >
 160+ 6D4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6D4B 16          >                db      22
 161+ 6D4C                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 161+ 6D4C             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 161+ 6D4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6D4C             >
 161+ 6D4C             >                // dummy db directives used to calculate length of namec
 161+ 6D4C 4C 49 4D 49 >                db      "LIMIT"
 161+ 6D50 54          >
 161+ 6D51             >len_NFA         defl    $ - temp_NFA
 161+ 6D51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6D4C             >
 161+ 6D4C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6D4D 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 161+ 6D51 54          >
 161+ 6D52             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6D51 D4          >                db      {b $} | END_BIT     // msb as name end
 161+ 6D52             >
 161+ 6D52 40 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6D54             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6D54 CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6D57             >
 161+ 6D57             >
 161+ 6D57             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6D57             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6D57             >
 161+ 6D57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6D57 18          >                db      24
 162+ 6D58                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 162+ 6D58             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 162+ 6D58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6D58             >
 162+ 6D58             >                // dummy db directives used to calculate length of namec
 162+ 6D58 45 58 50    >                db      "EXP"
 162+ 6D5B             >len_NFA         defl    $ - temp_NFA
 162+ 6D5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6D58             >
 162+ 6D58 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6D59 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 162+ 6D5C             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6D5B D0          >                db      {b $} | END_BIT     // msb as name end
 162+ 6D5C             >
 162+ 6D5C 4C 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6D5E             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6D5E CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6D61             >
 162+ 6D61             >
 162+ 6D61             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6D61             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6D61             >
 162+ 6D61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6D61 1A          >                db      26
 163+ 6D62                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 163+ 6D62             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 163+ 6D62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6D62             >
 163+ 6D62             >                // dummy db directives used to calculate length of namec
 163+ 6D62 4E 4D 4F 44 >                db      "NMODE"
 163+ 6D66 45          >
 163+ 6D67             >len_NFA         defl    $ - temp_NFA
 163+ 6D67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6D62             >
 163+ 6D62 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6D63 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 163+ 6D67 45          >
 163+ 6D68             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6D67 C5          >                db      {b $} | END_BIT     // msb as name end
 163+ 6D68             >
 163+ 6D68 58 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6D6A             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6D6A CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6D6D             >
 163+ 6D6D             >
 163+ 6D6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6D6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6D6D             >
 163+ 6D6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6D6D 1C          >                db      28
 164+ 6D6E                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 164+ 6D6E             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 164+ 6D6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6D6E             >
 164+ 6D6E             >                // dummy db directives used to calculate length of namec
 164+ 6D6E 42 4C 4B    >                db      "BLK"
 164+ 6D71             >len_NFA         defl    $ - temp_NFA
 164+ 6D71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6D6E             >
 164+ 6D6E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6D6F 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 164+ 6D72             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6D71 CB          >                db      {b $} | END_BIT     // msb as name end
 164+ 6D72             >
 164+ 6D72 62 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6D74             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6D74 CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6D77             >
 164+ 6D77             >
 164+ 6D77             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6D77             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6D77             >
 164+ 6D77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6D77 1E          >                db      30
 165+ 6D78                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 165+ 6D78             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 165+ 6D78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6D78             >
 165+ 6D78             >                // dummy db directives used to calculate length of namec
 165+ 6D78 3E 49 4E    >                db      ">IN"
 165+ 6D7B             >len_NFA         defl    $ - temp_NFA
 165+ 6D7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6D78             >
 165+ 6D78 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6D79 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 165+ 6D7C             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6D7B CE          >                db      {b $} | END_BIT     // msb as name end
 165+ 6D7C             >
 165+ 6D7C 6E 6D       >                dw      last_NFA            // Link to previous definition Name
 165+ 6D7E             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6D7E CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6D81             >
 165+ 6D81             >
 165+ 6D81             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6D81             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6D81             >
 165+ 6D81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6D81 20          >                db      32
 166+ 6D82                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 166+ 6D82             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 166+ 6D82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6D82             >
 166+ 6D82             >                // dummy db directives used to calculate length of namec
 166+ 6D82 4F 55 54    >                db      "OUT"
 166+ 6D85             >len_NFA         defl    $ - temp_NFA
 166+ 6D85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6D82             >
 166+ 6D82 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6D83 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 166+ 6D86             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6D85 D4          >                db      {b $} | END_BIT     // msb as name end
 166+ 6D86             >
 166+ 6D86 78 6D       >                dw      last_NFA            // Link to previous definition Name
 166+ 6D88             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6D88 CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6D8B             >
 166+ 6D8B             >
 166+ 6D8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6D8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6D8B             >
 166+ 6D8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6D8B 22          >                db      34
 167+ 6D8C                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 167+ 6D8C             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 167+ 6D8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6D8C             >
 167+ 6D8C             >                // dummy db directives used to calculate length of namec
 167+ 6D8C 53 43 52    >                db      "SCR"
 167+ 6D8F             >len_NFA         defl    $ - temp_NFA
 167+ 6D8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6D8C             >
 167+ 6D8C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6D8D 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 167+ 6D90             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6D8F D2          >                db      {b $} | END_BIT     // msb as name end
 167+ 6D90             >
 167+ 6D90 82 6D       >                dw      last_NFA            // Link to previous definition Name
 167+ 6D92             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6D92 CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6D95             >
 167+ 6D95             >
 167+ 6D95             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6D95             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6D95             >
 167+ 6D95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6D95 24          >                db      36
 168+ 6D96                              User_Def OFFSET     , "OFFSET"    , 38 //
 168+ 6D96             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 168+ 6D96             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6D96             >
 168+ 6D96             >                // dummy db directives used to calculate length of namec
 168+ 6D96 4F 46 46 53 >                db      "OFFSET"
 168+ 6D9A 45 54       >
 168+ 6D9C             >len_NFA         defl    $ - temp_NFA
 168+ 6D9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6D96             >
 168+ 6D96 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6D97 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 168+ 6D9B 45 54       >
 168+ 6D9D             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6D9C D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6D9D             >
 168+ 6D9D 8C 6D       >                dw      last_NFA            // Link to previous definition Name
 168+ 6D9F             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6D9F CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6DA2             >
 168+ 6DA2             >
 168+ 6DA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6DA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6DA2             >
 168+ 6DA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6DA2 26          >                db      38
 169+ 6DA3                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 169+ 6DA3             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 169+ 6DA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6DA3             >
 169+ 6DA3             >                // dummy db directives used to calculate length of namec
 169+ 6DA3 43 4F 4E 54 >                db      "CONTEXT"
 169+ 6DA7 45 58 54    >
 169+ 6DAA             >len_NFA         defl    $ - temp_NFA
 169+ 6DAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6DA3             >
 169+ 6DA3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6DA4 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 169+ 6DA8 45 58 54    >
 169+ 6DAB             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6DAA D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6DAB             >
 169+ 6DAB 96 6D       >                dw      last_NFA            // Link to previous definition Name
 169+ 6DAD             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6DAD CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6DB0             >
 169+ 6DB0             >
 169+ 6DB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6DB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6DB0             >
 169+ 6DB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6DB0 28          >                db      40
 170+ 6DB1                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 170+ 6DB1             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 170+ 6DB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6DB1             >
 170+ 6DB1             >                // dummy db directives used to calculate length of namec
 170+ 6DB1 43 55 52 52 >                db      "CURRENT"
 170+ 6DB5 45 4E 54    >
 170+ 6DB8             >len_NFA         defl    $ - temp_NFA
 170+ 6DB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6DB1             >
 170+ 6DB1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6DB2 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 170+ 6DB6 45 4E 54    >
 170+ 6DB9             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6DB8 D4          >                db      {b $} | END_BIT     // msb as name end
 170+ 6DB9             >
 170+ 6DB9 A3 6D       >                dw      last_NFA            // Link to previous definition Name
 170+ 6DBB             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6DBB CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6DBE             >
 170+ 6DBE             >
 170+ 6DBE             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6DBE             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6DBE             >
 170+ 6DBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6DBE 2A          >                db      42
 171+ 6DBF                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 171+ 6DBF             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 171+ 6DBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6DBF             >
 171+ 6DBF             >                // dummy db directives used to calculate length of namec
 171+ 6DBF 53 54 41 54 >                db      "STATE"
 171+ 6DC3 45          >
 171+ 6DC4             >len_NFA         defl    $ - temp_NFA
 171+ 6DC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6DBF             >
 171+ 6DBF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6DC0 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 171+ 6DC4 45          >
 171+ 6DC5             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6DC4 C5          >                db      {b $} | END_BIT     // msb as name end
 171+ 6DC5             >
 171+ 6DC5 B1 6D       >                dw      last_NFA            // Link to previous definition Name
 171+ 6DC7             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6DC7 CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6DCA             >
 171+ 6DCA             >
 171+ 6DCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6DCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6DCA             >
 171+ 6DCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6DCA 2C          >                db      44
 172+ 6DCB                              User_Def BASE       , "BASE"      , 46 //
 172+ 6DCB             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 172+ 6DCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6DCB             >
 172+ 6DCB             >                // dummy db directives used to calculate length of namec
 172+ 6DCB 42 41 53 45 >                db      "BASE"
 172+ 6DCF             >len_NFA         defl    $ - temp_NFA
 172+ 6DCF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6DCB             >
 172+ 6DCB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6DCC 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 172+ 6DD0             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6DCF C5          >                db      {b $} | END_BIT     // msb as name end
 172+ 6DD0             >
 172+ 6DD0 BF 6D       >                dw      last_NFA            // Link to previous definition Name
 172+ 6DD2             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6DD2 CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6DD5             >
 172+ 6DD5             >
 172+ 6DD5             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6DD5             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6DD5             >
 172+ 6DD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6DD5 2E          >                db      46
 173+ 6DD6                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 173+ 6DD6             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 173+ 6DD6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6DD6             >
 173+ 6DD6             >                // dummy db directives used to calculate length of namec
 173+ 6DD6 44 50 4C    >                db      "DPL"
 173+ 6DD9             >len_NFA         defl    $ - temp_NFA
 173+ 6DD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6DD6             >
 173+ 6DD6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6DD7 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 173+ 6DDA             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6DD9 CC          >                db      {b $} | END_BIT     // msb as name end
 173+ 6DDA             >
 173+ 6DDA CB 6D       >                dw      last_NFA            // Link to previous definition Name
 173+ 6DDC             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6DDC CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6DDF             >
 173+ 6DDF             >
 173+ 6DDF             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6DDF             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6DDF             >
 173+ 6DDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6DDF 30          >                db      48
 174+ 6DE0                              User_Def FLD        , "FLD"       , 50 // output field width
 174+ 6DE0             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 174+ 6DE0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6DE0             >
 174+ 6DE0             >                // dummy db directives used to calculate length of namec
 174+ 6DE0 46 4C 44    >                db      "FLD"
 174+ 6DE3             >len_NFA         defl    $ - temp_NFA
 174+ 6DE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6DE0             >
 174+ 6DE0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6DE1 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 174+ 6DE4             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6DE3 C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6DE4             >
 174+ 6DE4 D6 6D       >                dw      last_NFA            // Link to previous definition Name
 174+ 6DE6             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6DE6 CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6DE9             >
 174+ 6DE9             >
 174+ 6DE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6DE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6DE9             >
 174+ 6DE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6DE9 32          >                db      50
 175+ 6DEA                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 175+ 6DEA             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 175+ 6DEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6DEA             >
 175+ 6DEA             >                // dummy db directives used to calculate length of namec
 175+ 6DEA 43 53 50    >                db      "CSP"
 175+ 6DED             >len_NFA         defl    $ - temp_NFA
 175+ 6DED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6DEA             >
 175+ 6DEA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6DEB 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 175+ 6DEE             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6DED D0          >                db      {b $} | END_BIT     // msb as name end
 175+ 6DEE             >
 175+ 6DEE E0 6D       >                dw      last_NFA            // Link to previous definition Name
 175+ 6DF0             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6DF0 CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6DF3             >
 175+ 6DF3             >
 175+ 6DF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6DF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6DF3             >
 175+ 6DF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6DF3 34          >                db      52
 176+ 6DF4                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 176+ 6DF4             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 176+ 6DF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6DF4             >
 176+ 6DF4             >                // dummy db directives used to calculate length of namec
 176+ 6DF4 52 23       >                db      "R#"
 176+ 6DF6             >len_NFA         defl    $ - temp_NFA
 176+ 6DF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6DF4             >
 176+ 6DF4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6DF5 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 176+ 6DF7             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6DF6 A3          >                db      {b $} | END_BIT     // msb as name end
 176+ 6DF7             >
 176+ 6DF7 EA 6D       >                dw      last_NFA            // Link to previous definition Name
 176+ 6DF9             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6DF9 CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6DFC             >
 176+ 6DFC             >
 176+ 6DFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6DFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6DFC             >
 176+ 6DFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6DFC 36          >                db      54
 177+ 6DFD                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 177+ 6DFD             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 177+ 6DFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6DFD             >
 177+ 6DFD             >                // dummy db directives used to calculate length of namec
 177+ 6DFD 48 4C 44    >                db      "HLD"
 177+ 6E00             >len_NFA         defl    $ - temp_NFA
 177+ 6E00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6DFD             >
 177+ 6DFD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6DFE 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 177+ 6E01             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6E00 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ 6E01             >
 177+ 6E01 F4 6D       >                dw      last_NFA            // Link to previous definition Name
 177+ 6E03             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6E03 CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6E06             >
 177+ 6E06             >
 177+ 6E06             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6E06             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6E06             >
 177+ 6E06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6E06 38          >                db      56
 178+ 6E07                              User_Def USE        , "USE"       , 58 // address of last used block
 178+ 6E07             >                New_Def  USE, "USE", User_Ptr, is_normal
 178+ 6E07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6E07             >
 178+ 6E07             >                // dummy db directives used to calculate length of namec
 178+ 6E07 55 53 45    >                db      "USE"
 178+ 6E0A             >len_NFA         defl    $ - temp_NFA
 178+ 6E0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6E07             >
 178+ 6E07 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6E08 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 178+ 6E0B             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6E0A C5          >                db      {b $} | END_BIT     // msb as name end
 178+ 6E0B             >
 178+ 6E0B FD 6D       >                dw      last_NFA            // Link to previous definition Name
 178+ 6E0D             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6E0D CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6E10             >
 178+ 6E10             >
 178+ 6E10             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6E10             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6E10             >
 178+ 6E10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6E10 3A          >                db      58
 179+ 6E11                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 179+ 6E11             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 179+ 6E11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6E11             >
 179+ 6E11             >                // dummy db directives used to calculate length of namec
 179+ 6E11 50 52 45 56 >                db      "PREV"
 179+ 6E15             >len_NFA         defl    $ - temp_NFA
 179+ 6E15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6E11             >
 179+ 6E11 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6E12 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 179+ 6E16             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6E15 D6          >                db      {b $} | END_BIT     // msb as name end
 179+ 6E16             >
 179+ 6E16 07 6E       >                dw      last_NFA            // Link to previous definition Name
 179+ 6E18             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6E18 CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6E1B             >
 179+ 6E1B             >
 179+ 6E1B             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6E1B             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6E1B             >
 179+ 6E1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6E1B 3C          >                db      60
 180+ 6E1C                              User_Def LP         , "LP"        , 62 // line printer (not used)
 180+ 6E1C             >                New_Def  LP, "LP", User_Ptr, is_normal
 180+ 6E1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6E1C             >
 180+ 6E1C             >                // dummy db directives used to calculate length of namec
 180+ 6E1C 4C 50       >                db      "LP"
 180+ 6E1E             >len_NFA         defl    $ - temp_NFA
 180+ 6E1E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6E1C             >
 180+ 6E1C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6E1D 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 180+ 6E1F             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6E1E D0          >                db      {b $} | END_BIT     // msb as name end
 180+ 6E1F             >
 180+ 6E1F 11 6E       >                dw      last_NFA            // Link to previous definition Name
 180+ 6E21             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6E21 CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6E24             >
 180+ 6E24             >
 180+ 6E24             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6E24             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6E24             >
 180+ 6E24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6E24 3E          >                db      62
 181+ 6E25                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 181+ 6E25             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 181+ 6E25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6E25             >
 181+ 6E25             >                // dummy db directives used to calculate length of namec
 181+ 6E25 50 4C 41 43 >                db      "PLACE"
 181+ 6E29 45          >
 181+ 6E2A             >len_NFA         defl    $ - temp_NFA
 181+ 6E2A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6E25             >
 181+ 6E25 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6E26 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 181+ 6E2A 45          >
 181+ 6E2B             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6E2A C5          >                db      {b $} | END_BIT     // msb as name end
 181+ 6E2B             >
 181+ 6E2B 1C 6E       >                dw      last_NFA            // Link to previous definition Name
 181+ 6E2D             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6E2D CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6E30             >
 181+ 6E30             >
 181+ 6E30             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6E30             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6E30             >
 181+ 6E30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6E30 40          >                db      64
 182+ 6E31                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 182+ 6E31             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 182+ 6E31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6E31             >
 182+ 6E31             >                // dummy db directives used to calculate length of namec
 182+ 6E31 53 4F 55 52 >                db      "SOURCE-ID"
 182+ 6E35 43 45 2D 49 >
 182+ 6E39 44          >
 182+ 6E3A             >len_NFA         defl    $ - temp_NFA
 182+ 6E3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6E31             >
 182+ 6E31 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6E32 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 182+ 6E36 43 45 2D 49 >
 182+ 6E3A 44          >
 182+ 6E3B             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6E3A C4          >                db      {b $} | END_BIT     // msb as name end
 182+ 6E3B             >
 182+ 6E3B 25 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6E3D             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6E3D CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6E40             >
 182+ 6E40             >
 182+ 6E40             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6E40             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6E40             >
 182+ 6E40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6E40 42          >                db      66
 183+ 6E41                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 183+ 6E41             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 183+ 6E41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6E41             >
 183+ 6E41             >                // dummy db directives used to calculate length of namec
 183+ 6E41 53 50 41 4E >                db      "SPAN"
 183+ 6E45             >len_NFA         defl    $ - temp_NFA
 183+ 6E45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6E41             >
 183+ 6E41 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6E42 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 183+ 6E46             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6E45 CE          >                db      {b $} | END_BIT     // msb as name end
 183+ 6E46             >
 183+ 6E46 31 6E       >                dw      last_NFA            // Link to previous definition Name
 183+ 6E48             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6E48 CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6E4B             >
 183+ 6E4B             >
 183+ 6E4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6E4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6E4B             >
 183+ 6E4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6E4B 44          >                db      68
 184+ 6E4C                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 184+ 6E4C             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 184+ 6E4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6E4C             >
 184+ 6E4C             >                // dummy db directives used to calculate length of namec
 184+ 6E4C 48 41 4E 44 >                db      "HANDLER"
 184+ 6E50 4C 45 52    >
 184+ 6E53             >len_NFA         defl    $ - temp_NFA
 184+ 6E53             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6E4C             >
 184+ 6E4C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6E4D 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 184+ 6E51 4C 45 52    >
 184+ 6E54             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6E53 D2          >                db      {b $} | END_BIT     // msb as name end
 184+ 6E54             >
 184+ 6E54 41 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6E56             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6E56 CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6E59             >
 184+ 6E59             >
 184+ 6E59             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6E59             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6E59             >
 184+ 6E59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6E59 46          >                db      70
 185+ 6E5A                              User_Def HP         , "HP"        , 72 // heap-pointer address
 185+ 6E5A             >                New_Def  HP, "HP", User_Ptr, is_normal
 185+ 6E5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ 6E5A             >
 185+ 6E5A             >                // dummy db directives used to calculate length of namec
 185+ 6E5A 48 50       >                db      "HP"
 185+ 6E5C             >len_NFA         defl    $ - temp_NFA
 185+ 6E5C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ 6E5A             >
 185+ 6E5A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ 6E5B 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 185+ 6E5D             >                org     $-1                 // alter last byte of Name just above to set
 185+ 6E5C D0          >                db      {b $} | END_BIT     // msb as name end
 185+ 6E5D             >
 185+ 6E5D 4C 6E       >                dw      last_NFA            // Link to previous definition Name
 185+ 6E5F             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6E5F CD 51 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6E62             >
 185+ 6E62             >
 185+ 6E62             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6E62             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6E62             >
 185+ 6E62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6E62 48          >                db      72
 186+ 6E63
 187+ 6E63              //  ______________________________________________________________________
 188+ 6E63              //
 189+ 6E63              // here         -- a
 190+ 6E63                              Colon_Def HERE, "HERE", is_normal
 190+ 6E63             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 190+ 6E63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 6E63             >
 190+ 6E63             >                // dummy db directives used to calculate length of namec
 190+ 6E63 48 45 52 45 >                db      "HERE"
 190+ 6E67             >len_NFA         defl    $ - temp_NFA
 190+ 6E67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 6E63             >
 190+ 6E63 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 6E64 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 190+ 6E68             >                org     $-1                 // alter last byte of Name just above to set
 190+ 6E67 C5          >                db      {b $} | END_BIT     // msb as name end
 190+ 6E68             >
 190+ 6E68 5A 6E       >                dw      last_NFA            // Link to previous definition Name
 190+ 6E6A             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 6E6A CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 190+ 6E6D             >
 190+ 6E6D             >
 190+ 6E6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 6E6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 6E6D             >
 190+ 6E6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 6E6D 2D 6D 0F 6B                  dw      DP, FETCH               // dp @
 192+ 6E71 4B 69                        dw      EXIT                    // ;
 193+ 6E73
 194+ 6E73              //  ______________________________________________________________________
 195+ 6E73              //
 196+ 6E73              // allot        n --
 197+ 6E73                              Colon_Def ALLOT, "ALLOT", is_normal
 197+ 6E73             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 197+ 6E73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 6E73             >
 197+ 6E73             >                // dummy db directives used to calculate length of namec
 197+ 6E73 41 4C 4C 4F >                db      "ALLOT"
 197+ 6E77 54          >
 197+ 6E78             >len_NFA         defl    $ - temp_NFA
 197+ 6E78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 6E73             >
 197+ 6E73 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 6E74 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 197+ 6E78 54          >
 197+ 6E79             >                org     $-1                 // alter last byte of Name just above to set
 197+ 6E78 D4          >                db      {b $} | END_BIT     // msb as name end
 197+ 6E79             >
 197+ 6E79 63 6E       >                dw      last_NFA            // Link to previous definition Name
 197+ 6E7B             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 6E7B CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 6E7E             >
 197+ 6E7E             >
 197+ 6E7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 6E7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 6E7E             >
 197+ 6E7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 6E7E 2D 6D F0 6A                  dw      DP,  PLUSSTORE          // dp +!
 199+ 6E82 4B 69                        dw      EXIT                    // ;
 200+ 6E84
 201+ 6E84              //  ______________________________________________________________________
 202+ 6E84              //
 203+ 6E84              // comma        n --
 204+ 6E84                              Colon_Def COMMA, ",", is_normal
 204+ 6E84             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 204+ 6E84             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204+ 6E84             >
 204+ 6E84             >                // dummy db directives used to calculate length of namec
 204+ 6E84 2C          >                db      ","
 204+ 6E85             >len_NFA         defl    $ - temp_NFA
 204+ 6E85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204+ 6E84             >
 204+ 6E84 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204+ 6E85 2C          >                db      ","               // name string in 7-bit ascii, but
 204+ 6E86             >                org     $-1                 // alter last byte of Name just above to set
 204+ 6E85 AC          >                db      {b $} | END_BIT     // msb as name end
 204+ 6E86             >
 204+ 6E86 73 6E       >                dw      last_NFA            // Link to previous definition Name
 204+ 6E88             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 204+ 6E88 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 204+ 6E8B             >
 204+ 6E8B             >
 204+ 6E8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 204+ 6E8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 204+ 6E8B             >
 204+ 6E8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205+ 6E8B 6A 6E 1A 6B                  dw      HERE, STORE             // here !
 206+ 6E8F 72 6C 7B 6E                  dw      TWO, ALLOT              // 2 allot
 207+ 6E93 4B 69                        dw      EXIT                    // ;
 208+ 6E95
 209+ 6E95              //  ______________________________________________________________________
 210+ 6E95              //
 211+ 6E95              // ccomma       c --
 212+ 6E95                              Colon_Def CCOMMA, "C,", is_normal
 212+ 6E95             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 212+ 6E95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 6E95             >
 212+ 6E95             >                // dummy db directives used to calculate length of namec
 212+ 6E95 43 2C       >                db      "C,"
 212+ 6E97             >len_NFA         defl    $ - temp_NFA
 212+ 6E97             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 6E95             >
 212+ 6E95 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 6E96 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 212+ 6E98             >                org     $-1                 // alter last byte of Name just above to set
 212+ 6E97 AC          >                db      {b $} | END_BIT     // msb as name end
 212+ 6E98             >
 212+ 6E98 84 6E       >                dw      last_NFA            // Link to previous definition Name
 212+ 6E9A             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 6E9A CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 212+ 6E9D             >
 212+ 6E9D             >
 212+ 6E9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 6E9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 6E9D             >
 212+ 6E9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 6E9D 6A 6E 32 6B                  dw      HERE, CSTORE            // here c!
 214+ 6EA1 69 6C 7B 6E                  dw      ONE, ALLOT              // 1 allot
 215+ 6EA5 4B 69                        dw      EXIT                    // ;
 216+ 6EA7
 217+ 6EA7              //  ______________________________________________________________________
 218+ 6EA7              //
 219+ 6EA7              // s>d          n -- d
 220+ 6EA7              // converts a single precision integer in a double precision
 221+ 6EA7                              New_Def S_TO_D, "S>D", is_code, is_normal
 221+ 6EA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 221+ 6EA7             >
 221+ 6EA7             >                // dummy db directives used to calculate length of namec
 221+ 6EA7 53 3E 44    >                db      "S>D"
 221+ 6EAA             >len_NFA         defl    $ - temp_NFA
 221+ 6EAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 221+ 6EA7             >
 221+ 6EA7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 221+ 6EA8 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 221+ 6EAB             >                org     $-1                 // alter last byte of Name just above to set
 221+ 6EAA C4          >                db      {b $} | END_BIT     // msb as name end
 221+ 6EAB             >
 221+ 6EAB 95 6E       >                dw      last_NFA            // Link to previous definition Name
 221+ 6EAD             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 221+ 6EAD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 221+ 6EAD ~           >
 221+ 6EAD ~           >
 221+ 6EAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 221+ 6EAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 221+ 6EAD             >
 221+ 6EAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 222+ 6EAD D1                           pop     de
 223+ 6EAE 21 00 00                     ld      hl, 0
 224+ 6EB1 7A                           ld      a, d
 225+ 6EB2 E6 80                        and     $80
 226+ 6EB4 28 01                        jr      z, S_to_D_Skip
 227+ 6EB6 2B                           dec     hl                  // $FFFF
 228+ 6EB7              S_to_D_Skip:
 229+ 6EB7 D5                           push    de
 230+ 6EB8 E5                           push    hl
 231+ 6EB9                              next
 231+ 6EB9 DD E9       >                jp      (ix)
 232+ 6EBB
 233+ 6EBB              //  ______________________________________________________________________
 234+ 6EBB              //
 235+ 6EBB              // -            n1 n2 -- n3
 236+ 6EBB              // subtraction
 237+ 6EBB                              New_Def SUBTRACT, "-", is_code, is_normal
 237+ 6EBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 237+ 6EBB             >
 237+ 6EBB             >                // dummy db directives used to calculate length of namec
 237+ 6EBB 2D          >                db      "-"
 237+ 6EBC             >len_NFA         defl    $ - temp_NFA
 237+ 6EBC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 237+ 6EBB             >
 237+ 6EBB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 237+ 6EBC 2D          >                db      "-"               // name string in 7-bit ascii, but
 237+ 6EBD             >                org     $-1                 // alter last byte of Name just above to set
 237+ 6EBC AD          >                db      {b $} | END_BIT     // msb as name end
 237+ 6EBD             >
 237+ 6EBD A7 6E       >                dw      last_NFA            // Link to previous definition Name
 237+ 6EBF             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 237+ 6EBF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 237+ 6EBF ~           >
 237+ 6EBF ~           >
 237+ 6EBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 237+ 6EBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 237+ 6EBF             >
 237+ 6EBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 238+ 6EBF D1                           pop     de
 239+ 6EC0 E1                           pop     hl
 240+ 6EC1 A7                           and     a
 241+ 6EC2 ED 52                        sbc     hl, de
 242+ 6EC4
 243+ 6EC4                              psh1
 243+ 6EC4 E5          >                push    hl
 243+ 6EC5 DD E9       >                jp      (ix)
 244+ 6EC7
 245+ 6EC7              //  ______________________________________________________________________
 246+ 6EC7              //
 247+ 6EC7              // =            n1 n2 -- n3
 248+ 6EC7              // equals
 249+ 6EC7                              Colon_Def EQUALS, "=", is_normal
 249+ 6EC7             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 249+ 6EC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 6EC7             >
 249+ 6EC7             >                // dummy db directives used to calculate length of namec
 249+ 6EC7 3D          >                db      "="
 249+ 6EC8             >len_NFA         defl    $ - temp_NFA
 249+ 6EC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 6EC7             >
 249+ 6EC7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 6EC8 3D          >                db      "="               // name string in 7-bit ascii, but
 249+ 6EC9             >                org     $-1                 // alter last byte of Name just above to set
 249+ 6EC8 BD          >                db      {b $} | END_BIT     // msb as name end
 249+ 6EC9             >
 249+ 6EC9 BB 6E       >                dw      last_NFA            // Link to previous definition Name
 249+ 6ECB             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 6ECB CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 249+ 6ECE             >
 249+ 6ECE             >
 249+ 6ECE             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 6ECE             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 6ECE             >
 249+ 6ECE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 250+ 6ECE BF 6E 88 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 251+ 6ED2 4B 69                        dw      EXIT                    // ;
 252+ 6ED4
 253+ 6ED4              //  ______________________________________________________________________
 254+ 6ED4              //
 255+ 6ED4              // u<           u1 u2 -- u3
 256+ 6ED4              // unsigned less-than
 257+ 6ED4                              New_Def ULESS, "U<", is_code, is_normal
 257+ 6ED4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 257+ 6ED4             >
 257+ 6ED4             >                // dummy db directives used to calculate length of namec
 257+ 6ED4 55 3C       >                db      "U<"
 257+ 6ED6             >len_NFA         defl    $ - temp_NFA
 257+ 6ED6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 257+ 6ED4             >
 257+ 6ED4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 257+ 6ED5 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 257+ 6ED7             >                org     $-1                 // alter last byte of Name just above to set
 257+ 6ED6 BC          >                db      {b $} | END_BIT     // msb as name end
 257+ 6ED7             >
 257+ 6ED7 C7 6E       >                dw      last_NFA            // Link to previous definition Name
 257+ 6ED9             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 257+ 6ED9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 257+ 6ED9 ~           >
 257+ 6ED9 ~           >
 257+ 6ED9             >                endif           ; ok        // for other definitions it "points" the correct handler
 257+ 6ED9             >                // Use of "; ok" to suppress "warning[fwdref]"
 257+ 6ED9             >
 257+ 6ED9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 258+ 6ED9 D1                           pop     de
 259+ 6EDA E1                           pop     hl
 260+ 6EDB A7                           and     a
 261+ 6EDC ED 52                        sbc     hl, de
 262+ 6EDE 21 FF FF                     ld      hl, -1
 263+ 6EE1 38 01                        jr      c, ULess_Skip
 264+ 6EE3 23                               inc     hl
 265+ 6EE4              ULess_Skip:
 266+ 6EE4
 267+ 6EE4                              psh1
 267+ 6EE4 E5          >                push    hl
 267+ 6EE5 DD E9       >                jp      (ix)
 268+ 6EE7
 269+ 6EE7              //  ______________________________________________________________________
 270+ 6EE7              //
 271+ 6EE7              // <           n1 n2 -- n3
 272+ 6EE7              // less-than
 273+ 6EE7                              New_Def LESS, "<", is_code, is_normal
 273+ 6EE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 273+ 6EE7             >
 273+ 6EE7             >                // dummy db directives used to calculate length of namec
 273+ 6EE7 3C          >                db      "<"
 273+ 6EE8             >len_NFA         defl    $ - temp_NFA
 273+ 6EE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 273+ 6EE7             >
 273+ 6EE7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 273+ 6EE8 3C          >                db      "<"               // name string in 7-bit ascii, but
 273+ 6EE9             >                org     $-1                 // alter last byte of Name just above to set
 273+ 6EE8 BC          >                db      {b $} | END_BIT     // msb as name end
 273+ 6EE9             >
 273+ 6EE9 D4 6E       >                dw      last_NFA            // Link to previous definition Name
 273+ 6EEB             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 273+ 6EEB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 273+ 6EEB ~           >
 273+ 6EEB ~           >
 273+ 6EEB             >                endif           ; ok        // for other definitions it "points" the correct handler
 273+ 6EEB             >                // Use of "; ok" to suppress "warning[fwdref]"
 273+ 6EEB             >
 273+ 6EEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 274+ 6EEB D1                           pop     de
 275+ 6EEC E1                           pop     hl
 276+ 6EED 7C                           ld      a, h
 277+ 6EEE EE 80                        xor     $80
 278+ 6EF0 67                           ld      h, a
 279+ 6EF1 7A                           ld      a, d
 280+ 6EF2 EE 80                        xor     $80
 281+ 6EF4 57                           ld      d, a
 282+ 6EF5              //              and     a
 283+ 6EF5 ED 52                        sbc     hl, de
 284+ 6EF7 ED 62                        sbc     hl, hl
 285+ 6EF9                              psh1
 285+ 6EF9 E5          >                push    hl
 285+ 6EFA DD E9       >                jp      (ix)
 286+ 6EFC
 287+ 6EFC              //  ______________________________________________________________________
 288+ 6EFC              //
 289+ 6EFC              // >            n1 n2 -- n3
 290+ 6EFC              // greater than
 291+ 6EFC                              Colon_Def GREATER, ">", is_normal
 291+ 6EFC             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 291+ 6EFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ 6EFC             >
 291+ 6EFC             >                // dummy db directives used to calculate length of namec
 291+ 6EFC 3E          >                db      ">"
 291+ 6EFD             >len_NFA         defl    $ - temp_NFA
 291+ 6EFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ 6EFC             >
 291+ 6EFC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ 6EFD 3E          >                db      ">"               // name string in 7-bit ascii, but
 291+ 6EFE             >                org     $-1                 // alter last byte of Name just above to set
 291+ 6EFD BE          >                db      {b $} | END_BIT     // msb as name end
 291+ 6EFE             >
 291+ 6EFE E7 6E       >                dw      last_NFA            // Link to previous definition Name
 291+ 6F00             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 6F00 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 291+ 6F03             >
 291+ 6F03             >
 291+ 6F03             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 6F03             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 6F03             >
 291+ 6F03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 6F03 83 6A EB 6E                  dw      SWAP, LESS              // swap <
 293+ 6F07 4B 69                        dw      EXIT                    // ;
 294+ 6F09              //  ______________________________________________________________________
 295+ 6F09              //
 296+ 6F09              // min          n1 n2 -- n3
 297+ 6F09              // minimum between n1 and n2
 298+ 6F09                              Colon_Def MIN, "MIN" , is_normal
 298+ 6F09             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 298+ 6F09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 298+ 6F09             >
 298+ 6F09             >                // dummy db directives used to calculate length of namec
 298+ 6F09 4D 49 4E    >                db      "MIN"
 298+ 6F0C             >len_NFA         defl    $ - temp_NFA
 298+ 6F0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 298+ 6F09             >
 298+ 6F09 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 298+ 6F0A 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 298+ 6F0D             >                org     $-1                 // alter last byte of Name just above to set
 298+ 6F0C CE          >                db      {b $} | END_BIT     // msb as name end
 298+ 6F0D             >
 298+ 6F0D FC 6E       >                dw      last_NFA            // Link to previous definition Name
 298+ 6F0F             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 298+ 6F0F CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 298+ 6F12             >
 298+ 6F12             >
 298+ 6F12             >                endif           ; ok        // for other definitions it "points" the correct handler
 298+ 6F12             >                // Use of "; ok" to suppress "warning[fwdref]"
 298+ 6F12             >
 298+ 6F12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 299+ 6F12 E3 6A                        dw      TWO_DUP                 // 2dup
 300+ 6F14 00 6F                        dw      GREATER                 // >
 301+ 6F16 1C 64                        dw      ZBRANCH
 302+ 6F18 04 00                        dw      Min_Skip - $   // if
 303+ 6F1A 83 6A                        dw          SWAP                //      swap
 304+ 6F1C              Min_Skip:                                       // endif
 305+ 6F1C 61 6A                        dw      DROP                    // drop
 306+ 6F1E 4B 69                        dw      EXIT                    // ;
 307+ 6F20
 308+ 6F20              //  ______________________________________________________________________
 309+ 6F20              //
 310+ 6F20              // max          n1 n2 -- n3
 311+ 6F20              // maximum between n1 and n2
 312+ 6F20                              Colon_Def MAX, "MAX", is_normal
 312+ 6F20             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 312+ 6F20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 312+ 6F20             >
 312+ 6F20             >                // dummy db directives used to calculate length of namec
 312+ 6F20 4D 41 58    >                db      "MAX"
 312+ 6F23             >len_NFA         defl    $ - temp_NFA
 312+ 6F23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 312+ 6F20             >
 312+ 6F20 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 312+ 6F21 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 312+ 6F24             >                org     $-1                 // alter last byte of Name just above to set
 312+ 6F23 D8          >                db      {b $} | END_BIT     // msb as name end
 312+ 6F24             >
 312+ 6F24 09 6F       >                dw      last_NFA            // Link to previous definition Name
 312+ 6F26             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 312+ 6F26 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 312+ 6F29             >
 312+ 6F29             >
 312+ 6F29             >                endif           ; ok        // for other definitions it "points" the correct handler
 312+ 6F29             >                // Use of "; ok" to suppress "warning[fwdref]"
 312+ 6F29             >
 312+ 6F29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 313+ 6F29 E3 6A                        dw      TWO_DUP                 // 2dup
 314+ 6F2B EB 6E                        dw      LESS                    // <
 315+ 6F2D 1C 64                        dw      ZBRANCH
 316+ 6F2F 04 00                        dw      Max_Skip - $   // if
 317+ 6F31 83 6A                        dw          SWAP                //      swap
 318+ 6F33              Max_Skip:                                       // endif
 319+ 6F33 61 6A                        dw      DROP                    // drop
 320+ 6F35 4B 69                        dw      EXIT                    // ;
 321+ 6F37
 322+ 6F37              //  ______________________________________________________________________
 323+ 6F37              //
 324+ 6F37              // ?dup         n -- 0 | n n
 325+ 6F37              // duplicate if not zero
 326+ 6F37                              New_Def QDUP, "?DUP", is_code, is_normal
 326+ 6F37             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 326+ 6F37             >
 326+ 6F37             >                // dummy db directives used to calculate length of namec
 326+ 6F37 3F 44 55 50 >                db      "?DUP"
 326+ 6F3B             >len_NFA         defl    $ - temp_NFA
 326+ 6F3B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 326+ 6F37             >
 326+ 6F37 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 326+ 6F38 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 326+ 6F3C             >                org     $-1                 // alter last byte of Name just above to set
 326+ 6F3B D0          >                db      {b $} | END_BIT     // msb as name end
 326+ 6F3C             >
 326+ 6F3C 20 6F       >                dw      last_NFA            // Link to previous definition Name
 326+ 6F3E             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 326+ 6F3E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 326+ 6F3E ~           >
 326+ 6F3E ~           >
 326+ 6F3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 326+ 6F3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 326+ 6F3E             >
 326+ 6F3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 327+ 6F3E              QDup_Ptr:
 328+ 6F3E E1                           pop     hl
 329+ 6F3F 7C                           ld      a, h
 330+ 6F40 B5                           or      l
 331+ 6F41 28 01                        jr      z, QDup_Skip
 332+ 6F43 E5                               push    hl
 333+ 6F44              QDup_Skip:
 334+ 6F44                              psh1
 334+ 6F44 E5          >                push    hl
 334+ 6F45 DD E9       >                jp      (ix)
 335+ 6F47
 336+ 6F47              //  ______________________________________________________________________
 337+ 6F47              //
 338+ 6F47              // -dup         n -- 0 | n n
 339+ 6F47              // duplicate if not zero
 340+ 6F47                              New_Def LDUP, "-DUP", is_code, is_normal
 340+ 6F47             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 340+ 6F47             >
 340+ 6F47             >                // dummy db directives used to calculate length of namec
 340+ 6F47 2D 44 55 50 >                db      "-DUP"
 340+ 6F4B             >len_NFA         defl    $ - temp_NFA
 340+ 6F4B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 340+ 6F47             >
 340+ 6F47 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 340+ 6F48 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 340+ 6F4C             >                org     $-1                 // alter last byte of Name just above to set
 340+ 6F4B D0          >                db      {b $} | END_BIT     // msb as name end
 340+ 6F4C             >
 340+ 6F4C 37 6F       >                dw      last_NFA            // Link to previous definition Name
 340+ 6F4E             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 340+ 6F4E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 340+ 6F4E ~           >
 340+ 6F4E ~           >
 340+ 6F4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 340+ 6F4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 340+ 6F4E             >
 340+ 6F4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 341+ 6F4E C3 3E 6F                     jp      QDup_Ptr
 342+ 6F51
 343+ 6F51              //  ______________________________________________________________________
 344+ 6F51              //
 345+ 6F51              // emit         c --
 346+ 6F51                              Colon_Def EMIT, "EMIT", is_normal
 346+ 6F51             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 346+ 6F51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 346+ 6F51             >
 346+ 6F51             >                // dummy db directives used to calculate length of namec
 346+ 6F51 45 4D 49 54 >                db      "EMIT"
 346+ 6F55             >len_NFA         defl    $ - temp_NFA
 346+ 6F55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 346+ 6F51             >
 346+ 6F51 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 346+ 6F52 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 346+ 6F56             >                org     $-1                 // alter last byte of Name just above to set
 346+ 6F55 D4          >                db      {b $} | END_BIT     // msb as name end
 346+ 6F56             >
 346+ 6F56 47 6F       >                dw      last_NFA            // Link to previous definition Name
 346+ 6F58             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 346+ 6F58 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 346+ 6F5B             >
 346+ 6F5B             >
 346+ 6F5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 346+ 6F5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 346+ 6F5B             >
 346+ 6F5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 347+ 6F5B 22 66                        dw      C_EMIT                      // (?emit)
 348+ 6F5D 3E 6F                        dw      QDUP                        // ?dup
 349+ 6F5F                                                                  // if
 350+ 6F5F 1C 64                        dw      ZBRANCH
 351+ 6F61 0A 00                        dw      Emit_Skip - $
 352+ 6F63 E7 65                        dw          EMITC                   //      emitc
 353+ 6F65 69 6C                        dw          ONE                     //      1
 354+ 6F67 88 6D F0 6A                  dw          OUT, PLUSSTORE        //      out +!
 355+ 6F6B              Emit_Skip:                                          // endif
 356+ 6F6B 4B 69                        dw      EXIT                        // ;
 357+ 6F6D
 358+ 6F6D              //  ______________________________________________________________________
 359+ 6F6D              //
 360+ 6F6D              // space        --
 361+ 6F6D                              Colon_Def SPACE, "SPACE", is_normal
 361+ 6F6D             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 361+ 6F6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 361+ 6F6D             >
 361+ 6F6D             >                // dummy db directives used to calculate length of namec
 361+ 6F6D 53 50 41 43 >                db      "SPACE"
 361+ 6F71 45          >
 361+ 6F72             >len_NFA         defl    $ - temp_NFA
 361+ 6F72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 361+ 6F6D             >
 361+ 6F6D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 361+ 6F6E 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 361+ 6F72 45          >
 361+ 6F73             >                org     $-1                 // alter last byte of Name just above to set
 361+ 6F72 C5          >                db      {b $} | END_BIT     // msb as name end
 361+ 6F73             >
 361+ 6F73 51 6F       >                dw      last_NFA            // Link to previous definition Name
 361+ 6F75             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 361+ 6F75 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 361+ 6F78             >
 361+ 6F78             >
 361+ 6F78             >                endif           ; ok        // for other definitions it "points" the correct handler
 361+ 6F78             >                // Use of "; ok" to suppress "warning[fwdref]"
 361+ 6F78             >
 361+ 6F78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 362+ 6F78 8F 6C 58 6F                  dw      BL, EMIT                // bl emit
 363+ 6F7C 4B 69                        dw      EXIT                    // ;
 364+ 6F7E
 365+ 6F7E              //  ______________________________________________________________________
 366+ 6F7E              //
 367+ 6F7E              // traverse     a n -- a
 368+ 6F7E              // A dictionary entry is structured as follows
 369+ 6F7E              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 370+ 6F7E              //      +1   word name, last character is toggled with $80
 371+ 6F7E              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 372+ 6F7E              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 373+ 6F7E              // PFA: +6+n "is_code", definitions have no PFA. // +5
 374+ 6F7E              //
 375+ 6F7E                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 375+ 6F7E             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 375+ 6F7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 375+ 6F7E             >
 375+ 6F7E             >                // dummy db directives used to calculate length of namec
 375+ 6F7E 54 52 41 56 >                db      "TRAVERSE"
 375+ 6F82 45 52 53 45 >
 375+ 6F86             >len_NFA         defl    $ - temp_NFA
 375+ 6F86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 375+ 6F7E             >
 375+ 6F7E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 375+ 6F7F 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 375+ 6F83 45 52 53 45 >
 375+ 6F87             >                org     $-1                 // alter last byte of Name just above to set
 375+ 6F86 C5          >                db      {b $} | END_BIT     // msb as name end
 375+ 6F87             >
 375+ 6F87 6D 6F       >                dw      last_NFA            // Link to previous definition Name
 375+ 6F89             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 375+ 6F89 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 375+ 6F8C             >
 375+ 6F8C             >
 375+ 6F8C             >                endif           ; ok        // for other definitions it "points" the correct handler
 375+ 6F8C             >                // Use of "; ok" to suppress "warning[fwdref]"
 375+ 6F8C             >
 375+ 6F8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 376+ 6F8C 83 6A                        dw      SWAP                    // swap
 377+ 6F8E              Traverse_Begin:                                 // begin
 378+ 6F8E 53 6A C6 69                  dw          OVER, PLUS          //      over +
 379+ 6F92 A5 63 7F 00                  dw          LIT, 127            //      127
 380+ 6F96 53 6A 26 6B                  dw          OVER, CFETCH        //      over @
 381+ 6F9A EB 6E                        dw          LESS                //      <
 382+ 6F9C                                                              // until
 383+ 6F9C 1C 64                        dw      ZBRANCH
 384+ 6F9E F0 FF                        dw      Traverse_Begin - $
 385+ 6FA0 6A 6A                        dw      NIP                     //  nip
 386+ 6FA2 4B 69                        dw      EXIT                    //  ;
 387+ 6FA4
 388+ 6FA4              //  ______________________________________________________________________
 389+ 6FA4              //
 390+ 6FA4              // latest       -- nfa
 391+ 6FA4                              Colon_Def LATEST, "LATEST", is_normal
 391+ 6FA4             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 391+ 6FA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 391+ 6FA4             >
 391+ 6FA4             >                // dummy db directives used to calculate length of namec
 391+ 6FA4 4C 41 54 45 >                db      "LATEST"
 391+ 6FA8 53 54       >
 391+ 6FAA             >len_NFA         defl    $ - temp_NFA
 391+ 6FAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 391+ 6FA4             >
 391+ 6FA4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 391+ 6FA5 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 391+ 6FA9 53 54       >
 391+ 6FAB             >                org     $-1                 // alter last byte of Name just above to set
 391+ 6FAA D4          >                db      {b $} | END_BIT     // msb as name end
 391+ 6FAB             >
 391+ 6FAB 7E 6F       >                dw      last_NFA            // Link to previous definition Name
 391+ 6FAD             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 391+ 6FAD CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 391+ 6FB0             >
 391+ 6FB0             >
 391+ 6FB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 391+ 6FB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 391+ 6FB0             >
 391+ 6FB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 392+ 6FB0 BB 6D                        dw      CURRENT                 // current
 393+ 6FB2 0F 6B 0F 6B                  dw      FETCH, FETCH            // @ @
 394+ 6FB6 4B 69                        dw      EXIT                    // ;
 395+ 6FB8
 396+ 6FB8              //  ______________________________________________________________________
 397+ 6FB8              //
 398+ 6FB8              // lfa          pfa -- lfa
 399+ 6FB8                              Colon_Def LFA, "LFA", is_normal
 399+ 6FB8             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 399+ 6FB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 399+ 6FB8             >
 399+ 6FB8             >                // dummy db directives used to calculate length of namec
 399+ 6FB8 4C 46 41    >                db      "LFA"
 399+ 6FBB             >len_NFA         defl    $ - temp_NFA
 399+ 6FBB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 399+ 6FB8             >
 399+ 6FB8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 399+ 6FB9 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 399+ 6FBC             >                org     $-1                 // alter last byte of Name just above to set
 399+ 6FBB C1          >                db      {b $} | END_BIT     // msb as name end
 399+ 6FBC             >
 399+ 6FBC A4 6F       >                dw      last_NFA            // Link to previous definition Name
 399+ 6FBE             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 399+ 6FBE CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 399+ 6FC1             >
 399+ 6FC1             >
 399+ 6FC1             >                endif           ; ok        // for other definitions it "points" the correct handler
 399+ 6FC1             >                // Use of "; ok" to suppress "warning[fwdref]"
 399+ 6FC1             >
 399+ 6FC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 400+ 6FC1 A5 63 05 00                  dw      LIT, 5                  // cell- --> 5
 401+ 6FC5 BF 6E                        dw      SUBTRACT                // cell- --> -
 402+ 6FC7 4B 69                        dw      EXIT                    // ;
 403+ 6FC9
 404+ 6FC9              //  ______________________________________________________________________
 405+ 6FC9              //
 406+ 6FC9              // cfa          pfa -- cfa
 407+ 6FC9                              Colon_Def CFA, "CFA", is_normal
 407+ 6FC9             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 407+ 6FC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 407+ 6FC9             >
 407+ 6FC9             >                // dummy db directives used to calculate length of namec
 407+ 6FC9 43 46 41    >                db      "CFA"
 407+ 6FCC             >len_NFA         defl    $ - temp_NFA
 407+ 6FCC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 407+ 6FC9             >
 407+ 6FC9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 407+ 6FCA 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 407+ 6FCD             >                org     $-1                 // alter last byte of Name just above to set
 407+ 6FCC C1          >                db      {b $} | END_BIT     // msb as name end
 407+ 6FCD             >
 407+ 6FCD B8 6F       >                dw      last_NFA            // Link to previous definition Name
 407+ 6FCF             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 407+ 6FCF CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 407+ 6FD2             >
 407+ 6FD2             >
 407+ 6FD2             >                endif           ; ok        // for other definitions it "points" the correct handler
 407+ 6FD2             >                // Use of "; ok" to suppress "warning[fwdref]"
 407+ 6FD2             >
 407+ 6FD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 408+ 6FD2              //              dw      CELL_MINUS              // cell-
 409+ 6FD2 7B 6C BF 6E                  dw      THREE, SUBTRACT         // 3 -
 410+ 6FD6 4B 69                        dw      EXIT                    // ;
 411+ 6FD8
 412+ 6FD8              //  ______________________________________________________________________
 413+ 6FD8              //
 414+ 6FD8              // nfa          pfa -- nfa
 415+ 6FD8                              Colon_Def NFA, "NFA", is_normal
 415+ 6FD8             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 415+ 6FD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 415+ 6FD8             >
 415+ 6FD8             >                // dummy db directives used to calculate length of namec
 415+ 6FD8 4E 46 41    >                db      "NFA"
 415+ 6FDB             >len_NFA         defl    $ - temp_NFA
 415+ 6FDB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 415+ 6FD8             >
 415+ 6FD8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 415+ 6FD9 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 415+ 6FDC             >                org     $-1                 // alter last byte of Name just above to set
 415+ 6FDB C1          >                db      {b $} | END_BIT     // msb as name end
 415+ 6FDC             >
 415+ 6FDC C9 6F       >                dw      last_NFA            // Link to previous definition Name
 415+ 6FDE             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 415+ 6FDE CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 415+ 6FE1             >
 415+ 6FE1             >
 415+ 6FE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 415+ 6FE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 415+ 6FE1             >
 415+ 6FE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 416+ 6FE1 A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 417+ 6FE5 BF 6E                        dw      SUBTRACT                // -
 418+ 6FE7 85 6C                        dw      NEG_ONE                 // -1
 419+ 6FE9 89 6F                        dw      TRAVERSE                // traverse
 420+ 6FEB 4B 69                        dw      EXIT                    // ;
 421+ 6FED
 422+ 6FED              //  ______________________________________________________________________
 423+ 6FED              //
 424+ 6FED              // pfa          nfa -- pfa
 425+ 6FED                              Colon_Def PFA, "PFA", is_normal
 425+ 6FED             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 425+ 6FED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 425+ 6FED             >
 425+ 6FED             >                // dummy db directives used to calculate length of namec
 425+ 6FED 50 46 41    >                db      "PFA"
 425+ 6FF0             >len_NFA         defl    $ - temp_NFA
 425+ 6FF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 425+ 6FED             >
 425+ 6FED 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 425+ 6FEE 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 425+ 6FF1             >                org     $-1                 // alter last byte of Name just above to set
 425+ 6FF0 C1          >                db      {b $} | END_BIT     // msb as name end
 425+ 6FF1             >
 425+ 6FF1 D8 6F       >                dw      last_NFA            // Link to previous definition Name
 425+ 6FF3             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 425+ 6FF3 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 425+ 6FF6             >
 425+ 6FF6             >
 425+ 6FF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 425+ 6FF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 425+ 6FF6             >
 425+ 6FF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 426+ 6FF6 69 6C                        dw      ONE                     // 1
 427+ 6FF8 89 6F                        dw      TRAVERSE                // traverse
 428+ 6FFA A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 429+ 6FFE C6 69                        dw      PLUS                    // +
 430+ 7000 4B 69                        dw      EXIT                    // ;
 431+ 7002
 432+ 7002              //  ______________________________________________________________________
 433+ 7002              //
 434+ 7002              // >body        cfa -- pfa
 435+ 7002                              Colon_Def TO_BODY, ">BODY", is_normal
 435+ 7002             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 435+ 7002             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 435+ 7002             >
 435+ 7002             >                // dummy db directives used to calculate length of namec
 435+ 7002 3E 42 4F 44 >                db      ">BODY"
 435+ 7006 59          >
 435+ 7007             >len_NFA         defl    $ - temp_NFA
 435+ 7007             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 435+ 7002             >
 435+ 7002 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 435+ 7003 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 435+ 7007 59          >
 435+ 7008             >                org     $-1                 // alter last byte of Name just above to set
 435+ 7007 D9          >                db      {b $} | END_BIT     // msb as name end
 435+ 7008             >
 435+ 7008 ED 6F       >                dw      last_NFA            // Link to previous definition Name
 435+ 700A             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 435+ 700A CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 435+ 700D             >
 435+ 700D             >
 435+ 700D             >                endif           ; ok        // for other definitions it "points" the correct handler
 435+ 700D             >                // Use of "; ok" to suppress "warning[fwdref]"
 435+ 700D             >
 435+ 700D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 436+ 700D 7B 6C C6 69                  dw      THREE, PLUS             // cell+ --> 3 +
 437+ 7011 4B 69                        dw      EXIT                    // ;
 438+ 7013
 439+ 7013              //  ______________________________________________________________________
 440+ 7013              //
 441+ 7013              // <name        cfa -- nfa
 442+ 7013                              Colon_Def TO_NAME, "<NAME", is_normal
 442+ 7013             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 442+ 7013             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ 7013             >
 442+ 7013             >                // dummy db directives used to calculate length of namec
 442+ 7013 3C 4E 41 4D >                db      "<NAME"
 442+ 7017 45          >
 442+ 7018             >len_NFA         defl    $ - temp_NFA
 442+ 7018             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ 7013             >
 442+ 7013 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ 7014 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 442+ 7018 45          >
 442+ 7019             >                org     $-1                 // alter last byte of Name just above to set
 442+ 7018 C5          >                db      {b $} | END_BIT     // msb as name end
 442+ 7019             >
 442+ 7019 02 70       >                dw      last_NFA            // Link to previous definition Name
 442+ 701B             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 701B CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 442+ 701E             >
 442+ 701E             >
 442+ 701E             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 701E             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 701E             >
 442+ 701E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 701E 0A 70                        dw      TO_BODY                 // >body
 444+ 7020 DE 6F                        dw      NFA                     // nfa
 445+ 7022 4B 69                        dw      EXIT                    // ;
 446+ 7024
 447+ 7024              //  ______________________________________________________________________
 448+ 7024              //
 449+ 7024              // !csp         --
 450+ 7024              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 451+ 7024                              Colon_Def STORE_CSP, "!CSP", is_normal
 451+ 7024             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 451+ 7024             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 451+ 7024             >
 451+ 7024             >                // dummy db directives used to calculate length of namec
 451+ 7024 21 43 53 50 >                db      "!CSP"
 451+ 7028             >len_NFA         defl    $ - temp_NFA
 451+ 7028             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 451+ 7024             >
 451+ 7024 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 451+ 7025 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 451+ 7029             >                org     $-1                 // alter last byte of Name just above to set
 451+ 7028 D0          >                db      {b $} | END_BIT     // msb as name end
 451+ 7029             >
 451+ 7029 13 70       >                dw      last_NFA            // Link to previous definition Name
 451+ 702B             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 451+ 702B CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 451+ 702E             >
 451+ 702E             >
 451+ 702E             >                endif           ; ok        // for other definitions it "points" the correct handler
 451+ 702E             >                // Use of "; ok" to suppress "warning[fwdref]"
 451+ 702E             >
 451+ 702E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 452+ 702E 1B 69                        dw      SPFETCH                 // sp@
 453+ 7030 F0 6D 1A 6B                  dw      CSP, STORE              // csp !
 454+ 7034 4B 69                        dw      EXIT                    // ;
 455+ 7036
 456+ 7036              //  ______________________________________________________________________
 457+ 7036              //
 458+ 7036              // ?error       f n --
 459+ 7036              // rase error n if flag f it true
 460+ 7036                              Colon_Def QERROR, "?ERROR", is_normal
 460+ 7036             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 460+ 7036             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 460+ 7036             >
 460+ 7036             >                // dummy db directives used to calculate length of namec
 460+ 7036 3F 45 52 52 >                db      "?ERROR"
 460+ 703A 4F 52       >
 460+ 703C             >len_NFA         defl    $ - temp_NFA
 460+ 703C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 460+ 7036             >
 460+ 7036 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 460+ 7037 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 460+ 703B 4F 52       >
 460+ 703D             >                org     $-1                 // alter last byte of Name just above to set
 460+ 703C D2          >                db      {b $} | END_BIT     // msb as name end
 460+ 703D             >
 460+ 703D 24 70       >                dw      last_NFA            // Link to previous definition Name
 460+ 703F             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 460+ 703F CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 460+ 7042             >
 460+ 7042             >
 460+ 7042             >                endif           ; ok        // for other definitions it "points" the correct handler
 460+ 7042             >                // Use of "; ok" to suppress "warning[fwdref]"
 460+ 7042             >
 460+ 7042             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 461+ 7042 83 6A                        dw      SWAP                    // swap
 462+ 7044                                                              // if
 463+ 7044 1C 64                        dw      ZBRANCH
 464+ 7046 08 00                        dw      QError_Else - $
 465+ 7048 DC 75                        dw          ERROR               //      error  ( is a forward-ref )
 466+ 704A                                                              // else
 467+ 704A 07 64                        dw      BRANCH
 468+ 704C 04 00                        dw      QError_Endif - $
 469+ 704E              QError_Else:
 470+ 704E 61 6A                        dw          DROP                //      drop
 471+ 7050              QError_Endif:                                   // endif
 472+ 7050 4B 69                        dw      EXIT                    // ;
 473+ 7052
 474+ 7052              //  ______________________________________________________________________
 475+ 7052              //
 476+ 7052              // ?comp       --
 477+ 7052              // raise msg #17 if not compiling
 478+ 7052                              Colon_Def QCOMP, "?COMP", is_normal
 478+ 7052             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 478+ 7052             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7052             >
 478+ 7052             >                // dummy db directives used to calculate length of namec
 478+ 7052 3F 43 4F 4D >                db      "?COMP"
 478+ 7056 50          >
 478+ 7057             >len_NFA         defl    $ - temp_NFA
 478+ 7057             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7052             >
 478+ 7052 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7053 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 478+ 7057 50          >
 478+ 7058             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7057 D0          >                db      {b $} | END_BIT     // msb as name end
 478+ 7058             >
 478+ 7058 36 70       >                dw      last_NFA            // Link to previous definition Name
 478+ 705A             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 705A CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 705D             >
 478+ 705D             >
 478+ 705D             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 705D             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 705D             >
 478+ 705D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 705D C7 6D 0F 6B                  dw      STATE, FETCH            // state @
 480+ 7061 88 69                        dw      ZEQUAL                  // 0=
 481+ 7063 A5 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 482+ 7067 3F 70                        dw      QERROR                  // ?error
 483+ 7069 4B 69                        dw      EXIT                    // ;
 484+ 706B
 485+ 706B              //  ______________________________________________________________________
 486+ 706B              //
 487+ 706B              // ?exec       --
 488+ 706B              // raise msg #18 if compiling
 489+ 706B                              Colon_Def QEXEC, "?EXEC", is_normal
 489+ 706B             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 489+ 706B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 489+ 706B             >
 489+ 706B             >                // dummy db directives used to calculate length of namec
 489+ 706B 3F 45 58 45 >                db      "?EXEC"
 489+ 706F 43          >
 489+ 7070             >len_NFA         defl    $ - temp_NFA
 489+ 7070             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 489+ 706B             >
 489+ 706B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 489+ 706C 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 489+ 7070 43          >
 489+ 7071             >                org     $-1                 // alter last byte of Name just above to set
 489+ 7070 C3          >                db      {b $} | END_BIT     // msb as name end
 489+ 7071             >
 489+ 7071 52 70       >                dw      last_NFA            // Link to previous definition Name
 489+ 7073             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 489+ 7073 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 489+ 7076             >
 489+ 7076             >
 489+ 7076             >                endif           ; ok        // for other definitions it "points" the correct handler
 489+ 7076             >                // Use of "; ok" to suppress "warning[fwdref]"
 489+ 7076             >
 489+ 7076             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 490+ 7076 C7 6D 0F 6B                  dw      STATE, FETCH            // state @
 491+ 707A A5 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 492+ 707E 3F 70                        dw      QERROR                  // ?error
 493+ 7080 4B 69                        dw      EXIT                    // ;
 494+ 7082
 495+ 7082              //  ______________________________________________________________________
 496+ 7082              //
 497+ 7082              // ?pairs       n1 n2 --
 498+ 7082              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 499+ 7082                              Colon_Def QPAIRS, "?PAIRS", is_normal
 499+ 7082             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 499+ 7082             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 499+ 7082             >
 499+ 7082             >                // dummy db directives used to calculate length of namec
 499+ 7082 3F 50 41 49 >                db      "?PAIRS"
 499+ 7086 52 53       >
 499+ 7088             >len_NFA         defl    $ - temp_NFA
 499+ 7088             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 499+ 7082             >
 499+ 7082 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 499+ 7083 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 499+ 7087 52 53       >
 499+ 7089             >                org     $-1                 // alter last byte of Name just above to set
 499+ 7088 D3          >                db      {b $} | END_BIT     // msb as name end
 499+ 7089             >
 499+ 7089 6B 70       >                dw      last_NFA            // Link to previous definition Name
 499+ 708B             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 499+ 708B CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 499+ 708E             >
 499+ 708E             >
 499+ 708E             >                endif           ; ok        // for other definitions it "points" the correct handler
 499+ 708E             >                // Use of "; ok" to suppress "warning[fwdref]"
 499+ 708E             >
 499+ 708E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 500+ 708E BF 6E                        dw      SUBTRACT                // -
 501+ 7090 A5 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 502+ 7094 3F 70                        dw      QERROR                  // ?error
 503+ 7096 4B 69                        dw      EXIT                    // ;
 504+ 7098
 505+ 7098              //  ______________________________________________________________________
 506+ 7098              //
 507+ 7098              // ?csp       --
 508+ 7098              // raise msg #20 if surrent SP in not what previously saved in CSP.
 509+ 7098              // Compiler relies on that for  syntax checking of structures
 510+ 7098                              Colon_Def QCSP, "?CSP", is_normal
 510+ 7098             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 510+ 7098             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 510+ 7098             >
 510+ 7098             >                // dummy db directives used to calculate length of namec
 510+ 7098 3F 43 53 50 >                db      "?CSP"
 510+ 709C             >len_NFA         defl    $ - temp_NFA
 510+ 709C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 510+ 7098             >
 510+ 7098 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 510+ 7099 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 510+ 709D             >                org     $-1                 // alter last byte of Name just above to set
 510+ 709C D0          >                db      {b $} | END_BIT     // msb as name end
 510+ 709D             >
 510+ 709D 82 70       >                dw      last_NFA            // Link to previous definition Name
 510+ 709F             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 510+ 709F CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 510+ 70A2             >
 510+ 70A2             >
 510+ 70A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 510+ 70A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 510+ 70A2             >
 510+ 70A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 511+ 70A2 1B 69                        dw      SPFETCH                 // sp@
 512+ 70A4 F0 6D 0F 6B                  dw      CSP, FETCH              // csp @
 513+ 70A8 BF 6E                        dw      SUBTRACT                // -
 514+ 70AA A5 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 515+ 70AE 3F 70                        dw      QERROR                  // ?error
 516+ 70B0 4B 69                        dw      EXIT                    // ;
 517+ 70B2
 518+ 70B2              //  ______________________________________________________________________
 519+ 70B2              //
 520+ 70B2              // ?loading      --
 521+ 70B2              // raise msg #22 if not loading
 522+ 70B2                              Colon_Def QLOADING, "?LOADING", is_normal
 522+ 70B2             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 522+ 70B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 70B2             >
 522+ 70B2             >                // dummy db directives used to calculate length of namec
 522+ 70B2 3F 4C 4F 41 >                db      "?LOADING"
 522+ 70B6 44 49 4E 47 >
 522+ 70BA             >len_NFA         defl    $ - temp_NFA
 522+ 70BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 70B2             >
 522+ 70B2 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 70B3 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 522+ 70B7 44 49 4E 47 >
 522+ 70BB             >                org     $-1                 // alter last byte of Name just above to set
 522+ 70BA C7          >                db      {b $} | END_BIT     // msb as name end
 522+ 70BB             >
 522+ 70BB 98 70       >                dw      last_NFA            // Link to previous definition Name
 522+ 70BD             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 70BD CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 522+ 70C0             >
 522+ 70C0             >
 522+ 70C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 70C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 70C0             >
 522+ 70C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 70C0 74 6D 0F 6B                  dw      BLK, FETCH              // blk @
 524+ 70C4 88 69                        dw      ZEQUAL                  // 0=
 525+ 70C6 A5 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 526+ 70CA 3F 70                        dw      QERROR                  // ?error
 527+ 70CC 4B 69                        dw      EXIT                    // ;
 528+ 70CE
 529+ 70CE              //  ______________________________________________________________________
 530+ 70CE              //
 531+ 70CE              // compile      --
 532+ 70CE              // compiles the following word
 533+ 70CE                              Colon_Def COMPILE, "COMPILE", is_normal
 533+ 70CE             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 533+ 70CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 533+ 70CE             >
 533+ 70CE             >                // dummy db directives used to calculate length of namec
 533+ 70CE 43 4F 4D 50 >                db      "COMPILE"
 533+ 70D2 49 4C 45    >
 533+ 70D5             >len_NFA         defl    $ - temp_NFA
 533+ 70D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 533+ 70CE             >
 533+ 70CE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 533+ 70CF 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 533+ 70D3 49 4C 45    >
 533+ 70D6             >                org     $-1                 // alter last byte of Name just above to set
 533+ 70D5 C5          >                db      {b $} | END_BIT     // msb as name end
 533+ 70D6             >
 533+ 70D6 B2 70       >                dw      last_NFA            // Link to previous definition Name
 533+ 70D8             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 533+ 70D8 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 533+ 70DB             >
 533+ 70DB             >
 533+ 70DB             >                endif           ; ok        // for other definitions it "points" the correct handler
 533+ 70DB             >                // Use of "; ok" to suppress "warning[fwdref]"
 533+ 70DB             >
 533+ 70DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 534+ 70DB 5A 70                        dw      QCOMP                   // ?comp
 535+ 70DD 6E 69                        dw      R_TO                    // r>
 536+ 70DF 8E 6A 05 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 537+ 70E3 5C 69                        dw      TO_R                    // >r
 538+ 70E5 0F 6B 88 6E                  dw      FETCH, COMMA            // @ ,
 539+ 70E9 4B 69                        dw      EXIT                    // ;
 540+ 70EB
 541+ 70EB              //  ______________________________________________________________________
 542+ 70EB              //
 543+ 70EB              // compile,     --
 544+ 70EB              // compiles the following word
 545+ 70EB                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 545+ 70EB             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 545+ 70EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 545+ 70EB             >
 545+ 70EB             >                // dummy db directives used to calculate length of namec
 545+ 70EB 43 4F 4D 50 >                db      "COMPILE,"
 545+ 70EF 49 4C 45 2C >
 545+ 70F3             >len_NFA         defl    $ - temp_NFA
 545+ 70F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 545+ 70EB             >
 545+ 70EB 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 545+ 70EC 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 545+ 70F0 49 4C 45 2C >
 545+ 70F4             >                org     $-1                 // alter last byte of Name just above to set
 545+ 70F3 AC          >                db      {b $} | END_BIT     // msb as name end
 545+ 70F4             >
 545+ 70F4 CE 70       >                dw      last_NFA            // Link to previous definition Name
 545+ 70F6             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 545+ 70F6 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 545+ 70F9             >
 545+ 70F9             >
 545+ 70F9             >                endif           ; ok        // for other definitions it "points" the correct handler
 545+ 70F9             >                // Use of "; ok" to suppress "warning[fwdref]"
 545+ 70F9             >
 545+ 70F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 546+ 70F9 5A 70                        dw      QCOMP                   // ?comp
 547+ 70FB 88 6E                        dw      COMMA                   // ,
 548+ 70FD 4B 69                        dw      EXIT                    // ;
 549+ 70FF
 550+ 70FF              //  ______________________________________________________________________
 551+ 70FF              //
 552+ 70FF              // [            --
 553+ 70FF              // stop compilation
 554+ 70FF                              Colon_Def SQUARED_OPEN, "[", is_immediate
 554+ 70FF             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 554+ 70FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 554+ 70FF             >
 554+ 70FF             >                // dummy db directives used to calculate length of namec
 554+ 70FF 5B          >                db      "["
 554+ 7100             >len_NFA         defl    $ - temp_NFA
 554+ 7100             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 554+ 70FF             >
 554+ 70FF C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 554+ 7100 5B          >                db      "["               // name string in 7-bit ascii, but
 554+ 7101             >                org     $-1                 // alter last byte of Name just above to set
 554+ 7100 DB          >                db      {b $} | END_BIT     // msb as name end
 554+ 7101             >
 554+ 7101 EB 70       >                dw      last_NFA            // Link to previous definition Name
 554+ 7103             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 554+ 7103 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 554+ 7106             >
 554+ 7106             >
 554+ 7106             >                endif           ; ok        // for other definitions it "points" the correct handler
 554+ 7106             >                // Use of "; ok" to suppress "warning[fwdref]"
 554+ 7106             >
 554+ 7106             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 555+ 7106 60 6C                        dw      ZERO                    // 0
 556+ 7108 C7 6D 1A 6B                  dw      STATE, STORE            // state !
 557+ 710C 4B 69                        dw      EXIT                    // ; immediate
 558+ 710E
 559+ 710E              //  ______________________________________________________________________
 560+ 710E              //
 561+ 710E              // ]            --
 562+ 710E              // start compilation
 563+ 710E                              Colon_Def SQUARED_CLOSE, "]", is_normal
 563+ 710E             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 563+ 710E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 563+ 710E             >
 563+ 710E             >                // dummy db directives used to calculate length of namec
 563+ 710E 5D          >                db      "]"
 563+ 710F             >len_NFA         defl    $ - temp_NFA
 563+ 710F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 563+ 710E             >
 563+ 710E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 563+ 710F 5D          >                db      "]"               // name string in 7-bit ascii, but
 563+ 7110             >                org     $-1                 // alter last byte of Name just above to set
 563+ 710F DD          >                db      {b $} | END_BIT     // msb as name end
 563+ 7110             >
 563+ 7110 FF 70       >                dw      last_NFA            // Link to previous definition Name
 563+ 7112             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 563+ 7112 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 563+ 7115             >
 563+ 7115             >
 563+ 7115             >                endif           ; ok        // for other definitions it "points" the correct handler
 563+ 7115             >                // Use of "; ok" to suppress "warning[fwdref]"
 563+ 7115             >
 563+ 7115             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 564+ 7115 A5 63 C0 00                  dw      LIT, $C0                // 192
 565+ 7119 C7 6D 1A 6B                  dw      STATE, STORE            // state !
 566+ 711D 4B 69                        dw      EXIT                    // ;
 567+ 711F
 568+ 711F              //  ______________________________________________________________________
 569+ 711F              //
 570+ 711F              // smudge       --
 571+ 711F              // toggle smudge bit of latest definition
 572+ 711F                              Colon_Def SMUDGE, "SMUDGE", is_normal
 572+ 711F             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 572+ 711F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 572+ 711F             >
 572+ 711F             >                // dummy db directives used to calculate length of namec
 572+ 711F 53 4D 55 44 >                db      "SMUDGE"
 572+ 7123 47 45       >
 572+ 7125             >len_NFA         defl    $ - temp_NFA
 572+ 7125             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 572+ 711F             >
 572+ 711F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 572+ 7120 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 572+ 7124 47 45       >
 572+ 7126             >                org     $-1                 // alter last byte of Name just above to set
 572+ 7125 C5          >                db      {b $} | END_BIT     // msb as name end
 572+ 7126             >
 572+ 7126 0E 71       >                dw      last_NFA            // Link to previous definition Name
 572+ 7128             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 572+ 7128 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 572+ 712B             >
 572+ 712B             >
 572+ 712B             >                endif           ; ok        // for other definitions it "points" the correct handler
 572+ 712B             >                // Use of "; ok" to suppress "warning[fwdref]"
 572+ 712B             >
 572+ 712B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 573+ 712B AD 6F                        dw      LATEST                  // latest
 574+ 712D A5 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 575+ 7131 04 6B                        dw      TOGGLE                  // toggle
 576+ 7133 4B 69                        dw      EXIT                    // ;
 577+ 7135
 578+ 7135              //  ______________________________________________________________________
 579+ 7135              //
 580+ 7135              // immediate    --
 581+ 7135              // make immediate the latest definition
 582+ 7135                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 582+ 7135             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 582+ 7135             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 582+ 7135             >
 582+ 7135             >                // dummy db directives used to calculate length of namec
 582+ 7135 49 4D 4D 45 >                db      "IMMEDIATE"
 582+ 7139 44 49 41 54 >
 582+ 713D 45          >
 582+ 713E             >len_NFA         defl    $ - temp_NFA
 582+ 713E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 582+ 7135             >
 582+ 7135 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 582+ 7136 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 582+ 713A 44 49 41 54 >
 582+ 713E 45          >
 582+ 713F             >                org     $-1                 // alter last byte of Name just above to set
 582+ 713E C5          >                db      {b $} | END_BIT     // msb as name end
 582+ 713F             >
 582+ 713F 1F 71       >                dw      last_NFA            // Link to previous definition Name
 582+ 7141             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 582+ 7141 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 582+ 7144             >
 582+ 7144             >
 582+ 7144             >                endif           ; ok        // for other definitions it "points" the correct handler
 582+ 7144             >                // Use of "; ok" to suppress "warning[fwdref]"
 582+ 7144             >
 582+ 7144             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 583+ 7144 AD 6F                        dw      LATEST                  // latest
 584+ 7146 A5 63 40 00                  dw      LIT, $40                // 64
 585+ 714A 04 6B                        dw      TOGGLE                  // toggle
 586+ 714C 4B 69                        dw      EXIT                    // ;
 587+ 714E
 588+ 714E              //  ______________________________________________________________________
 589+ 714E              //
 590+ 714E              // hex          --
 591+ 714E              // change numeration base
 592+ 714E                              Colon_Def HEX, "HEX", is_normal
 592+ 714E             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 592+ 714E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 592+ 714E             >
 592+ 714E             >                // dummy db directives used to calculate length of namec
 592+ 714E 48 45 58    >                db      "HEX"
 592+ 7151             >len_NFA         defl    $ - temp_NFA
 592+ 7151             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 592+ 714E             >
 592+ 714E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 592+ 714F 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 592+ 7152             >                org     $-1                 // alter last byte of Name just above to set
 592+ 7151 D8          >                db      {b $} | END_BIT     // msb as name end
 592+ 7152             >
 592+ 7152 35 71       >                dw      last_NFA            // Link to previous definition Name
 592+ 7154             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 592+ 7154 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 592+ 7157             >
 592+ 7157             >
 592+ 7157             >                endif           ; ok        // for other definitions it "points" the correct handler
 592+ 7157             >                // Use of "; ok" to suppress "warning[fwdref]"
 592+ 7157             >
 592+ 7157             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 593+ 7157 A5 63 10 00                  dw      LIT, 16                 // 16
 594+ 715B D2 6D 1A 6B                  dw      BASE, STORE             // base !
 595+ 715F 4B 69                        dw      EXIT                    // ;
 596+ 7161
 597+ 7161              //  ______________________________________________________________________
 598+ 7161              //
 599+ 7161              // decimal      --
 600+ 7161              // change numeration base
 601+ 7161                              Colon_Def DECIMAL, "DECIMAL", is_normal
 601+ 7161             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 601+ 7161             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ 7161             >
 601+ 7161             >                // dummy db directives used to calculate length of namec
 601+ 7161 44 45 43 49 >                db      "DECIMAL"
 601+ 7165 4D 41 4C    >
 601+ 7168             >len_NFA         defl    $ - temp_NFA
 601+ 7168             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ 7161             >
 601+ 7161 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ 7162 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 601+ 7166 4D 41 4C    >
 601+ 7169             >                org     $-1                 // alter last byte of Name just above to set
 601+ 7168 CC          >                db      {b $} | END_BIT     // msb as name end
 601+ 7169             >
 601+ 7169 4E 71       >                dw      last_NFA            // Link to previous definition Name
 601+ 716B             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 716B CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 601+ 716E             >
 601+ 716E             >
 601+ 716E             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 716E             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 716E             >
 601+ 716E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 716E A5 63 0A 00                  dw      LIT, 10                 // 10
 603+ 7172 D2 6D 1A 6B                  dw      BASE, STORE             // base !
 604+ 7176 4B 69                        dw      EXIT                    // ;
 605+ 7178
 606+ 7178              //  ______________________________________________________________________
 607+ 7178              //
 608+ 7178              // (;code)       --
 609+ 7178              // patch to CFA to call/jump to the "following code"
 610+ 7178                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 610+ 7178             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 610+ 7178             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 610+ 7178             >
 610+ 7178             >                // dummy db directives used to calculate length of namec
 610+ 7178 28 3B 43 4F >                db      "(;CODE)"
 610+ 717C 44 45 29    >
 610+ 717F             >len_NFA         defl    $ - temp_NFA
 610+ 717F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 610+ 7178             >
 610+ 7178 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 610+ 7179 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 610+ 717D 44 45 29    >
 610+ 7180             >                org     $-1                 // alter last byte of Name just above to set
 610+ 717F A9          >                db      {b $} | END_BIT     // msb as name end
 610+ 7180             >
 610+ 7180 61 71       >                dw      last_NFA            // Link to previous definition Name
 610+ 7182             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 610+ 7182 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 610+ 7185             >
 610+ 7185             >
 610+ 7185             >                endif           ; ok        // for other definitions it "points" the correct handler
 610+ 7185             >                // Use of "; ok" to suppress "warning[fwdref]"
 610+ 7185             >
 610+ 7185             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 611+ 7185 6E 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 612+ 7187 AD 6F                        dw      LATEST                  // latest   ( Word being defined in this moment )
 613+ 7189 F3 6F CF 6F                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 614+ 718D
 615+ 718D A5 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 616+ 7191 53 6A 32 6B                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 617+ 7195 E3 69                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 618+ 7197
 619+ 7197 1A 6B                        dw      STORE                   // !
 620+ 7199 4B 69                        dw      EXIT                    // ;
 621+ 719B
 622+ 719B              //  ______________________________________________________________________
 623+ 719B              //
 624+ 719B              // ;code        --
 625+ 719B                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 625+ 719B             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 625+ 719B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 625+ 719B             >
 625+ 719B             >                // dummy db directives used to calculate length of namec
 625+ 719B 3B 43 4F 44 >                db      ";CODE"
 625+ 719F 45          >
 625+ 71A0             >len_NFA         defl    $ - temp_NFA
 625+ 71A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 625+ 719B             >
 625+ 719B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 625+ 719C 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 625+ 71A0 45          >
 625+ 71A1             >                org     $-1                 // alter last byte of Name just above to set
 625+ 71A0 C5          >                db      {b $} | END_BIT     // msb as name end
 625+ 71A1             >
 625+ 71A1 78 71       >                dw      last_NFA            // Link to previous definition Name
 625+ 71A3             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 625+ 71A3 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 625+ 71A6             >
 625+ 71A6             >
 625+ 71A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 625+ 71A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 625+ 71A6             >
 625+ 71A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 626+ 71A6 9F 70                        dw      QCSP                    // ?csp
 627+ 71A8 D8 70                        dw      COMPILE                 // compile
 628+ 71AA 82 71                        dw      C_SEMICOLON_CODE        // (;code)
 629+ 71AC 03 71                        dw      SQUARED_OPEN            // [
 630+ 71AE 0B 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 631+ 71B0 4B 69                        dw      EXIT                    // ; immediate
 632+ 71B2
 633+ 71B2              //  ______________________________________________________________________
 634+ 71B2              //
 635+ 71B2              // <builds      --
 636+ 71B2                              Colon_Def CBUILDS, "<BUILDS", is_normal
 636+ 71B2             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 636+ 71B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 636+ 71B2             >
 636+ 71B2             >                // dummy db directives used to calculate length of namec
 636+ 71B2 3C 42 55 49 >                db      "<BUILDS"
 636+ 71B6 4C 44 53    >
 636+ 71B9             >len_NFA         defl    $ - temp_NFA
 636+ 71B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 636+ 71B2             >
 636+ 71B2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 636+ 71B3 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 636+ 71B7 4C 44 53    >
 636+ 71BA             >                org     $-1                 // alter last byte of Name just above to set
 636+ 71B9 D3          >                db      {b $} | END_BIT     // msb as name end
 636+ 71BA             >
 636+ 71BA 9B 71       >                dw      last_NFA            // Link to previous definition Name
 636+ 71BC             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 636+ 71BC CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 636+ 71BF             >
 636+ 71BF             >
 636+ 71BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 636+ 71BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 636+ 71BF             >
 636+ 71BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 637+ 71BF 60 6C                        dw      ZERO                    // 0
 638+ 71C1 1B 6C                        dw      CONSTANT                // constant
 639+ 71C3 4B 69                        dw      EXIT                    // ;
 640+ 71C5
 641+ 71C5              //  ______________________________________________________________________
 642+ 71C5              //
 643+ 71C5              // recurse      --
 644+ 71C5              //              Colon_Def RECURSE, "RECURSE", is_immediate
 645+ 71C5              //              dw      QCOMP                   // ?comp
 646+ 71C5              //              dw      LATEST                  // latest
 647+ 71C5              //              dw      PFA, CFA                // pfa cfa
 648+ 71C5              //              dw      COMMA                   // ,
 649+ 71C5              //              dw      EXIT                    // ; immediate
 650+ 71C5
 651+ 71C5              //  ______________________________________________________________________
 652+ 71C5              //
 653+ 71C5              // does>     --
 654+ 71C5                              Colon_Def DOES_TO, "DOES>", is_normal
 654+ 71C5             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 654+ 71C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 654+ 71C5             >
 654+ 71C5             >                // dummy db directives used to calculate length of namec
 654+ 71C5 44 4F 45 53 >                db      "DOES>"
 654+ 71C9 3E          >
 654+ 71CA             >len_NFA         defl    $ - temp_NFA
 654+ 71CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 654+ 71C5             >
 654+ 71C5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 654+ 71C6 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 654+ 71CA 3E          >
 654+ 71CB             >                org     $-1                 // alter last byte of Name just above to set
 654+ 71CA BE          >                db      {b $} | END_BIT     // msb as name end
 654+ 71CB             >
 654+ 71CB B2 71       >                dw      last_NFA            // Link to previous definition Name
 654+ 71CD             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 654+ 71CD CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 654+ 71D0             >
 654+ 71D0             >
 654+ 71D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 654+ 71D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 654+ 71D0             >
 654+ 71D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 655+ 71D0 6E 69                        dw      R_TO                    // r>
 656+ 71D2 AD 6F                        dw      LATEST                  // latest
 657+ 71D4 F3 6F                        dw      PFA                     // pfa
 658+ 71D6 1A 6B                        dw      STORE                   // !
 659+ 71D8 82 71                        dw      C_SEMICOLON_CODE        // ;code
 660+ 71DA              Does_Ptr:
 661+ 71DA                              // via call coded in CFA
 662+ 71DA                              ldhlrp
 662+ 71DA 2A 96 63    >                ld      hl,(RP_Pointer)
 663+ 71DD 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 664+ 71DE 70                           ld      (hl), b
 665+ 71DF 2B                           dec     hl
 666+ 71E0 71                           ld      (hl), c
 667+ 71E1                              ldrphl
 667+ 71E1 22 96 63    >                ld      (RP_Pointer),hl
 668+ 71E4 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 669+ 71E5
 670+ 71E5 4E                           ld      c, (hl)
 671+ 71E6 23                           inc     hl
 672+ 71E7 46                           ld      b, (hl)
 673+ 71E8 23                           inc     hl
 674+ 71E9
 675+ 71E9                              psh1
 675+ 71E9 E5          >                push    hl
 675+ 71EA DD E9       >                jp      (ix)
 676+ 71EC                              // SMUDGE !
 677+ 71EC
 678+ 71EC              //  ______________________________________________________________________
 679+ 71EC              //
 680+ 71EC              // count        a -- a2 n
 681+ 71EC              // expects a counted string at address a, returns string address and counter
 682+ 71EC                              Colon_Def COUNT, "COUNT", is_normal
 682+ 71EC             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 682+ 71EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 682+ 71EC             >
 682+ 71EC             >                // dummy db directives used to calculate length of namec
 682+ 71EC 43 4F 55 4E >                db      "COUNT"
 682+ 71F0 54          >
 682+ 71F1             >len_NFA         defl    $ - temp_NFA
 682+ 71F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 682+ 71EC             >
 682+ 71EC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 682+ 71ED 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 682+ 71F1 54          >
 682+ 71F2             >                org     $-1                 // alter last byte of Name just above to set
 682+ 71F1 D4          >                db      {b $} | END_BIT     // msb as name end
 682+ 71F2             >
 682+ 71F2 C5 71       >                dw      last_NFA            // Link to previous definition Name
 682+ 71F4             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 682+ 71F4 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 682+ 71F7             >
 682+ 71F7             >
 682+ 71F7             >                endif           ; ok        // for other definitions it "points" the correct handler
 682+ 71F7             >                // Use of "; ok" to suppress "warning[fwdref]"
 682+ 71F7             >
 682+ 71F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 683+ 71F7 8E 6A                        dw      DUP                     // dup
 684+ 71F9 E3 69                        dw      ONE_PLUS                // 1+
 685+ 71FB 83 6A 26 6B                  dw      SWAP, CFETCH             // swap @
 686+ 71FF 4B 69                        dw      EXIT                    // ;
 687+ 7201
 688+ 7201              //  ______________________________________________________________________
 689+ 7201              //
 690+ 7201              // bounds       a n -- a+n n
 691+ 7201              // given an address and a length ( a n ) calculate the bound addresses
 692+ 7201              // suitable for DO-LOOP
 693+ 7201                              Colon_Def BOUNDS, "BOUNDS", is_normal
 693+ 7201             >                New_Def  BOUNDS, "BOUNDS", Enter_Ptr, is_normal ; ok
 693+ 7201             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 693+ 7201             >
 693+ 7201             >                // dummy db directives used to calculate length of namec
 693+ 7201 42 4F 55 4E >                db      "BOUNDS"
 693+ 7205 44 53       >
 693+ 7207             >len_NFA         defl    $ - temp_NFA
 693+ 7207             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 693+ 7201             >
 693+ 7201 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 693+ 7202 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 693+ 7206 44 53       >
 693+ 7208             >                org     $-1                 // alter last byte of Name just above to set
 693+ 7207 D3          >                db      {b $} | END_BIT     // msb as name end
 693+ 7208             >
 693+ 7208 EC 71       >                dw      last_NFA            // Link to previous definition Name
 693+ 720A             >BOUNDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 693+ 720A CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 693+ 720D             >
 693+ 720D             >
 693+ 720D             >                endif           ; ok        // for other definitions it "points" the correct handler
 693+ 720D             >                // Use of "; ok" to suppress "warning[fwdref]"
 693+ 720D             >
 693+ 720D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 694+ 720D 53 6A C6 69                  dw      OVER, PLUS, SWAP        // over + swap
 694+ 7211 83 6A
 695+ 7213 4B 69                        dw      EXIT                    // ;
 696+ 7215
 697+ 7215              //  ______________________________________________________________________
 698+ 7215              //
 699+ 7215              // type         a n --
 700+ 7215              // Sends to current output channel n characters starting at address a.
 701+ 7215                              Colon_Def TYPE, "TYPE", is_normal
 701+ 7215             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 701+ 7215             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 701+ 7215             >
 701+ 7215             >                // dummy db directives used to calculate length of namec
 701+ 7215 54 59 50 45 >                db      "TYPE"
 701+ 7219             >len_NFA         defl    $ - temp_NFA
 701+ 7219             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 701+ 7215             >
 701+ 7215 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 701+ 7216 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 701+ 721A             >                org     $-1                 // alter last byte of Name just above to set
 701+ 7219 C5          >                db      {b $} | END_BIT     // msb as name end
 701+ 721A             >
 701+ 721A 01 72       >                dw      last_NFA            // Link to previous definition Name
 701+ 721C             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 701+ 721C CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 701+ 721F             >
 701+ 721F             >
 701+ 721F             >                endif           ; ok        // for other definitions it "points" the correct handler
 701+ 721F             >                // Use of "; ok" to suppress "warning[fwdref]"
 701+ 721F             >
 701+ 721F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 702+ 721F 0A 72                        dw      BOUNDS                  // bounds
 703+ 7221 45 64                        dw      C_Q_DO                  // ?do
 704+ 7223 0C 00                        dw      Type_Skip - $
 705+ 7225              Type_Loop:
 706+ 7225 78 64 26 6B                  dw          I, CFETCH           //      i c@
 707+ 7229 58 6F                        dw          EMIT                //      emit
 708+ 722B F8 63                        dw      C_LOOP                  // loop
 709+ 722D F8 FF                        dw      Type_Loop - $
 710+ 722F              Type_Skip:
 711+ 722F 4B 69                        dw      EXIT                    // ;
 712+ 7231
 713+ 7231              //  ______________________________________________________________________
 714+ 7231              //
 715+ 7231              // leave        --
 716+ 7231              // Compile (leave) to leave current LOOP and jump just after it
 717+ 7231                              Colon_Def LEAVE, "LEAVE", is_immediate
 717+ 7231             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 717+ 7231             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 717+ 7231             >
 717+ 7231             >                // dummy db directives used to calculate length of namec
 717+ 7231 4C 45 41 56 >                db      "LEAVE"
 717+ 7235 45          >
 717+ 7236             >len_NFA         defl    $ - temp_NFA
 717+ 7236             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 717+ 7231             >
 717+ 7231 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 717+ 7232 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 717+ 7236 45          >
 717+ 7237             >                org     $-1                 // alter last byte of Name just above to set
 717+ 7236 C5          >                db      {b $} | END_BIT     // msb as name end
 717+ 7237             >
 717+ 7237 15 72       >                dw      last_NFA            // Link to previous definition Name
 717+ 7239             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 717+ 7239 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 717+ 723C             >
 717+ 723C             >
 717+ 723C             >                endif           ; ok        // for other definitions it "points" the correct handler
 717+ 723C             >                // Use of "; ok" to suppress "warning[fwdref]"
 717+ 723C             >
 717+ 723C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 718+ 723C D8 70 2F 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 719+ 7240 6A 6E 5C 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 719+ 7244 60 6C 88 6E
 720+ 7248 60 6C 60 6C                  dw      ZERO, ZERO
 721+ 724C 1B 69 8E 6A                  dw      SPFETCH, DUP
 722+ 7250 05 6A 05 6A                  dw      CELL_PLUS, CELL_PLUS
 723+ 7254 75 6A                        dw      TUCK
 724+ 7256 F0 6D 0F 6B                  dw      CSP, FETCH
 725+ 725A 83 6A BF 6E                  dw      SWAP, SUBTRACT
 726+ 725E 51 68                        dw      CMOVE
 727+ 7260 F0 6D 0F 6B                  dw      CSP, FETCH, CELL_MINUS
 727+ 7264 10 6A
 728+ 7266 6E 69 53 6A                  dw      R_TO, OVER, STORE
 728+ 726A 1A 6B
 729+ 726C 10 6A 60 6C                  dw      CELL_MINUS, ZERO
 730+ 7270 83 6A 1A 6B                  dw      SWAP, STORE
 731+ 7274 4B 69                        dw      EXIT                    // ;
 732+ 7276
 733+ 7276              //  ______________________________________________________________________
 734+ 7276              //
 735+ 7276              // -trailing    a n1 -- a n2
 736+ 7276              // Assumes that an n1 bytes-long string is stored at address a
 737+ 7276              // and the string contains a space delimited word,
 738+ 7276              // Finds n2 as the position of the first character after the word.
 739+ 7276                              Colon_Def LTRAILING, "-TRAILING", is_normal
 739+ 7276             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 739+ 7276             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 739+ 7276             >
 739+ 7276             >                // dummy db directives used to calculate length of namec
 739+ 7276 2D 54 52 41 >                db      "-TRAILING"
 739+ 727A 49 4C 49 4E >
 739+ 727E 47          >
 739+ 727F             >len_NFA         defl    $ - temp_NFA
 739+ 727F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 739+ 7276             >
 739+ 7276 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 739+ 7277 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 739+ 727B 49 4C 49 4E >
 739+ 727F 47          >
 739+ 7280             >                org     $-1                 // alter last byte of Name just above to set
 739+ 727F C7          >                db      {b $} | END_BIT     // msb as name end
 739+ 7280             >
 739+ 7280 31 72       >                dw      last_NFA            // Link to previous definition Name
 739+ 7282             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 739+ 7282 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 739+ 7285             >
 739+ 7285             >
 739+ 7285             >                endif           ; ok        // for other definitions it "points" the correct handler
 739+ 7285             >                // Use of "; ok" to suppress "warning[fwdref]"
 739+ 7285             >
 739+ 7285             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 740+ 7285 8E 6A 60 6C                  dw      DUP, ZERO               // dup 0
 741+ 7289                                                              // do
 742+ 7289 45 64                        dw      C_Q_DO
 743+ 728B 20 00                        dw      LTrailing_Leave - $
 744+ 728D              LTrailing_Loop:
 745+ 728D E3 6A C6 69                  dw          TWO_DUP, PLUS       //      2dup +
 746+ 7291 ED 69                        dw          ONE_SUBTRACT        //      1-
 747+ 7293 26 6B                        dw          CFETCH              //      c@
 748+ 7295 8F 6C BF 6E                  dw          BL, SUBTRACT        //      bl -
 749+ 7299                                                              //      if
 750+ 7299 1C 64                        dw          ZBRANCH
 751+ 729B 0A 00                        dw          LTrailing_Else - $
 752+ 729D 2F 64                        dw              C_LEAVE         //          leave
 753+ 729F 0C 00                        dw              LTrailing_Leave - $
 754+ 72A1 07 64                        dw          BRANCH              //      else
 755+ 72A3 04 00                        dw          LTrailing_Endif - $
 756+ 72A5              LTrailing_Else:
 757+ 72A5 ED 69                        dw              ONE_SUBTRACT    //          1-
 758+ 72A7              LTrailing_Endif:                                //      endif
 759+ 72A7                                                              // loop
 760+ 72A7 F8 63                        dw      C_LOOP
 761+ 72A9 E4 FF                        dw      LTrailing_Loop - $
 762+ 72AB              LTrailing_Leave:
 763+ 72AB 4B 69                        dw      EXIT                    // ;
 764+ 72AD
 765+ 72AD              //  ______________________________________________________________________
 766+ 72AD              //
 767+ 72AD              // accept       a n1 -- n2
 768+ 72AD              // Accepts at most n1 characters from terminal and stores them at address a
 769+ 72AD              // CR stops input. A 'nul' is added as trailer.
 770+ 72AD              // n2 is the string length. n2 is kept in span user variable also.
 771+ 72AD                              Colon_Def ACCEPT, "ACCEPT", is_normal
 771+ 72AD             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 771+ 72AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 771+ 72AD             >
 771+ 72AD             >                // dummy db directives used to calculate length of namec
 771+ 72AD 41 43 43 45 >                db      "ACCEPT"
 771+ 72B1 50 54       >
 771+ 72B3             >len_NFA         defl    $ - temp_NFA
 771+ 72B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 771+ 72AD             >
 771+ 72AD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 771+ 72AE 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 771+ 72B2 50 54       >
 771+ 72B4             >                org     $-1                 // alter last byte of Name just above to set
 771+ 72B3 D4          >                db      {b $} | END_BIT     // msb as name end
 771+ 72B4             >
 771+ 72B4 76 72       >                dw      last_NFA            // Link to previous definition Name
 771+ 72B6             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 771+ 72B6 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 771+ 72B9             >
 771+ 72B9             >
 771+ 72B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 771+ 72B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 771+ 72B9             >
 771+ 72B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 772+ 72B9 53 6A C6 69                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 772+ 72BD 53 6A
 773+ 72BF 60 6C A7 6A                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 774+ 72C3                                                              // do
 775+ 72C3 45 64                        dw      C_Q_DO
 776+ 72C5 8A 00                        dw      Accept_Leave - $
 777+ 72C7              Accept_Loop:
 778+ 72C7 61 6A 86 66                  dw          DROP, KEY           //      drop key        ( a  c )
 779+ 72CB 8E 6A                        dw          DUP                 //      dup             ( a  c  c )
 780+ 72CD A5 63 0E 00                  dw          LIT, $0E            //      0E
 781+ 72D1 D0 6C                        dw          PLUS_ORIGIN         //      +origin
 782+ 72D3 0F 6B                        dw          FETCH               //      @               ( a  c  c  del )
 783+ 72D5 CB 6E                        dw          EQUALS              //      =               ( a  c  c==del )
 784+ 72D7                                                              //      if
 785+ 72D7 1C 64                        dw          ZBRANCH
 786+ 72D9 2C 00                        dw          Accept_Else_0 - $
 787+ 72DB 61 6A                        dw              DROP            //          drop        ( a  )
 788+ 72DD 8E 6A 78 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 788+ 72E1 CB 6E
 789+ 72E3 69 6C E9 68                  dw              ONE, AND_OP     //          1 and
 790+ 72E7 8E 6A                        dw              DUP             //          dup         ( a  a==i  a==i )
 791+ 72E9 6E 69                        dw              R_TO            //          r> 2 - + r>
 792+ 72EB 1B 6A C6 69                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 793+ 72EF 5C 69                        dw              TO_R            //
 794+ 72F1                                                              //          if
 795+ 72F1 1C 64                        dw              ZBRANCH
 796+ 72F3 0A 00                        dw              Accept_Else_1 - $
 797+ 72F5 A5 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 798+ 72F9                                                              //          else
 799+ 72F9 07 64                        dw              BRANCH
 800+ 72FB 06 00                        dw              Accept_Endif_1 - $
 801+ 72FD              Accept_Else_1:
 802+ 72FD A5 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 803+ 7301              Accept_Endif_1:                                 //          endif
 804+ 7301 07 64                        dw          BRANCH
 805+ 7303 2E 00                        dw          Accept_Endif_0 - $
 806+ 7305              Accept_Else_0:                                  //      else
 807+ 7305 8E 6A                        dw              DUP             //          dup         ( a  c  c )
 808+ 7307 A5 63 0D 00                  dw              LIT, 13         //          13
 809+ 730B CB 6E                        dw              EQUALS          //          =           ( a  c  c==CR )
 810+ 730D                                                              //          if
 811+ 730D 1C 64                        dw              ZBRANCH
 812+ 730F 0C 00                        dw              Accept_Else_2 - $
 813+ 7311 61 6A 8F 6C                  dw                  DROP, BL    //              drop bl ( a  bl )
 814+ 7315 60 6C                        dw                  ZERO        //              0       ( a  c  0 )
 815+ 7317                                                              //          else
 816+ 7317 07 64                        dw              BRANCH
 817+ 7319 04 00                        dw              Accept_Endif_2 - $
 818+ 731B              Accept_Else_2:
 819+ 731B 8E 6A                        dw                  DUP         //              dup     ( a  c  c )
 820+ 731D                                                              //          endif
 821+ 731D              Accept_Endif_2:
 822+ 731D 78 64 32 6B                  dw              I, CSTORE       //          i           ( a  c )
 823+ 7321 8E 6A 8F 6C                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 823+ 7325 EB 6E
 824+ 7327                                                              //          if
 825+ 7327 1C 64                        dw              ZBRANCH
 826+ 7329 08 00                        dw              Accept_Endif_3 - $
 827+ 732B 6E 69                        dw                  R_TO        //              r>
 828+ 732D ED 69                        dw                  ONE_SUBTRACT//              1-
 829+ 732F 5C 69                        dw                  TO_R        //              >r
 830+ 7331                                                              //          endif
 831+ 7331              Accept_Endif_3:
 832+ 7331              Accept_Endif_0:                                 //      endif
 833+ 7331 58 6F                        dw          EMIT                //      emit
 834+ 7333 60 6C 78 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 834+ 7337 E3 69
 835+ 7339 1A 6B                        dw          STORE               //          ( zero pad )
 836+ 733B 78 64                        dw          I                   //      i
 837+ 733D 78 64 26 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 837+ 7341 88 69
 838+ 7343 1C 64                        dw          ZBRANCH             //
 839+ 7345 06 00                        dw              Accept_Endif_4 - $
 840+ 7347 2F 64                        dw                  C_LEAVE     //              leave
 841+ 7349 06 00                        dw                  Accept_Leave - $
 842+ 734B              Accept_Endif_4:                                 //      endif
 843+ 734B                                                              // loop
 844+ 734B F8 63                        dw      C_LOOP
 845+ 734D 7A FF                        dw      Accept_Loop - $
 846+ 734F              Accept_Leave:
 847+ 734F 83 6A BF 6E                  dw      SWAP, SUBTRACT          // swap -
 848+ 7353 E3 69                        dw      ONE_PLUS                // 1+
 849+ 7355 8E 6A 48 6E                  dw      DUP, SPAN, STORE        // dup span !
 849+ 7359 1A 6B
 850+ 735B 4B 69                        dw      EXIT                    // ;
 851+ 735D
 852+ 735D              //  ______________________________________________________________________
 853+ 735D              //
 854+ 735D              // expect      a n --
 855+ 735D              // Accepts at most n1 characters from terminal and stores them at address a
 856+ 735D              // CR stops input. A 'nul' is added as trailer.
 857+ 735D              // n2 is the string length. n2 is kept in span user variable also.
 858+ 735D              //              Colon_Def EXPECT, "EXPECT", is_normal
 859+ 735D              //              dw      ACCEPT, DROP            // accept drop
 860+ 735D              //              dw      EXIT                    // ;
 861+ 735D
 862+ 735D              //  ______________________________________________________________________
 863+ 735D              //
 864+ 735D              // query        --
 865+ 735D              // Accept at most 80 character from console. CR stops.
 866+ 735D              // Text is stored in TIB. Variable IN is zeroed.
 867+ 735D                              Colon_Def QUERY, "QUERY", is_normal
 867+ 735D             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 867+ 735D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 867+ 735D             >
 867+ 735D             >                // dummy db directives used to calculate length of namec
 867+ 735D 51 55 45 52 >                db      "QUERY"
 867+ 7361 59          >
 867+ 7362             >len_NFA         defl    $ - temp_NFA
 867+ 7362             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 867+ 735D             >
 867+ 735D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 867+ 735E 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 867+ 7362 59          >
 867+ 7363             >                org     $-1                 // alter last byte of Name just above to set
 867+ 7362 D9          >                db      {b $} | END_BIT     // msb as name end
 867+ 7363             >
 867+ 7363 AD 72       >                dw      last_NFA            // Link to previous definition Name
 867+ 7365             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 867+ 7365 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 867+ 7368             >
 867+ 7368             >
 867+ 7368             >                endif           ; ok        // for other definitions it "points" the correct handler
 867+ 7368             >                // Use of "; ok" to suppress "warning[fwdref]"
 867+ 7368             >
 867+ 7368             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 868+ 7368 FE 6C 0F 6B                  dw      TIB, FETCH              // tib @
 869+ 736C A5 63 50 00                  dw      LIT, 80                 // 80
 870+ 7370 B6 72 61 6A                  dw      ACCEPT, DROP            // accept drop
 871+ 7374 60 6C 7E 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 871+ 7378 1A 6B
 872+ 737A 4B 69                        dw      EXIT                    // ;
 873+ 737C
 874+ 737C              //  ______________________________________________________________________
 875+ 737C              //
 876+ 737C              // fill        a n c --
 877+ 737C              // If n > 0, fills n locations starting from address a with the value c.
 878+ 737C                              New_Def FILL, "FILL", is_code, is_normal
 878+ 737C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 878+ 737C             >
 878+ 737C             >                // dummy db directives used to calculate length of namec
 878+ 737C 46 49 4C 4C >                db      "FILL"
 878+ 7380             >len_NFA         defl    $ - temp_NFA
 878+ 7380             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 878+ 737C             >
 878+ 737C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 878+ 737D 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 878+ 7381             >                org     $-1                 // alter last byte of Name just above to set
 878+ 7380 CC          >                db      {b $} | END_BIT     // msb as name end
 878+ 7381             >
 878+ 7381 5D 73       >                dw      last_NFA            // Link to previous definition Name
 878+ 7383             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 878+ 7383 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 878+ 7383 ~           >
 878+ 7383 ~           >
 878+ 7383             >                endif           ; ok        // for other definitions it "points" the correct handler
 878+ 7383             >                // Use of "; ok" to suppress "warning[fwdref]"
 878+ 7383             >
 878+ 7383             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 879+ 7383 D9                           exx
 880+ 7384 D1                           pop     de                  // de has character
 881+ 7385 C1                           pop     bc                  // bc has counter
 882+ 7386 E1                           pop     hl                  // hl has address, save Instruction Pointer
 883+ 7387              Fill_Loop:
 884+ 7387 78                               ld      a, b
 885+ 7388 B1                               or      c
 886+ 7389 28 05                        jr      z, Fill_While_End
 887+ 738B 73                               ld      (hl), e
 888+ 738C 0B                               dec     bc
 889+ 738D 23                               inc     hl
 890+ 738E 18 F7                        jr      Fill_Loop
 891+ 7390              Fill_While_End:
 892+ 7390 D9                           exx
 893+ 7391                              next
 893+ 7391 DD E9       >                jp      (ix)
 894+ 7393
 895+ 7393              //  ______________________________________________________________________
 896+ 7393              //
 897+ 7393              // erase        a n --
 898+ 7393              // If n > 0, fills n locations starting from address a with 'nul' characters.
 899+ 7393                              Colon_Def ERASE, "ERASE", is_normal
 899+ 7393             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 899+ 7393             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 899+ 7393             >
 899+ 7393             >                // dummy db directives used to calculate length of namec
 899+ 7393 45 52 41 53 >                db      "ERASE"
 899+ 7397 45          >
 899+ 7398             >len_NFA         defl    $ - temp_NFA
 899+ 7398             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 899+ 7393             >
 899+ 7393 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 899+ 7394 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 899+ 7398 45          >
 899+ 7399             >                org     $-1                 // alter last byte of Name just above to set
 899+ 7398 C5          >                db      {b $} | END_BIT     // msb as name end
 899+ 7399             >
 899+ 7399 7C 73       >                dw      last_NFA            // Link to previous definition Name
 899+ 739B             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 899+ 739B CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 899+ 739E             >
 899+ 739E             >
 899+ 739E             >                endif           ; ok        // for other definitions it "points" the correct handler
 899+ 739E             >                // Use of "; ok" to suppress "warning[fwdref]"
 899+ 739E             >
 899+ 739E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 900+ 739E 60 6C 83 73                  dw      ZERO, FILL              // 0 fill
 901+ 73A2 4B 69                        dw      EXIT                    // ;
 902+ 73A4
 903+ 73A4              //  ______________________________________________________________________
 904+ 73A4              //
 905+ 73A4              // blanks       a n --
 906+ 73A4              // If n > 0, fills n locations starting from address a with 'nul' characters.
 907+ 73A4                              Colon_Def BLANKS, "BLANKS", is_normal
 907+ 73A4             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 907+ 73A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 907+ 73A4             >
 907+ 73A4             >                // dummy db directives used to calculate length of namec
 907+ 73A4 42 4C 41 4E >                db      "BLANKS"
 907+ 73A8 4B 53       >
 907+ 73AA             >len_NFA         defl    $ - temp_NFA
 907+ 73AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 907+ 73A4             >
 907+ 73A4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 907+ 73A5 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 907+ 73A9 4B 53       >
 907+ 73AB             >                org     $-1                 // alter last byte of Name just above to set
 907+ 73AA D3          >                db      {b $} | END_BIT     // msb as name end
 907+ 73AB             >
 907+ 73AB 93 73       >                dw      last_NFA            // Link to previous definition Name
 907+ 73AD             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 907+ 73AD CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 907+ 73B0             >
 907+ 73B0             >
 907+ 73B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 907+ 73B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 907+ 73B0             >
 907+ 73B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 908+ 73B0 8F 6C 83 73                  dw      BL, FILL                // bl fill
 909+ 73B4 4B 69                        dw      EXIT                    // ;
 910+ 73B6
 911+ 73B6              //  ______________________________________________________________________
 912+ 73B6              //
 913+ 73B6              // hold         c --
 914+ 73B6              // Used between <# and #> to insert a character c in numeric formatting.
 915+ 73B6                              Colon_Def HOLD, "HOLD", is_normal
 915+ 73B6             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 915+ 73B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 915+ 73B6             >
 915+ 73B6             >                // dummy db directives used to calculate length of namec
 915+ 73B6 48 4F 4C 44 >                db      "HOLD"
 915+ 73BA             >len_NFA         defl    $ - temp_NFA
 915+ 73BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 915+ 73B6             >
 915+ 73B6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 915+ 73B7 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 915+ 73BB             >                org     $-1                 // alter last byte of Name just above to set
 915+ 73BA C4          >                db      {b $} | END_BIT     // msb as name end
 915+ 73BB             >
 915+ 73BB A4 73       >                dw      last_NFA            // Link to previous definition Name
 915+ 73BD             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 915+ 73BD CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 915+ 73C0             >
 915+ 73C0             >
 915+ 73C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 915+ 73C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 915+ 73C0             >
 915+ 73C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 916+ 73C0 85 6C                        dw      NEG_ONE                 // -1
 917+ 73C2 03 6E F0 6A                  dw      HLD, PLUSSTORE          // hld +!
 918+ 73C6 03 6E 0F 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 918+ 73CA 32 6B
 919+ 73CC 4B 69                        dw      EXIT                    // ;
 920+ 73CE
 921+ 73CE              //  ______________________________________________________________________
 922+ 73CE              //
 923+ 73CE              // pad         -- a
 924+ 73CE              // leaves the buffer text address. This is at a fixed distance over HERE.
 925+ 73CE                              Colon_Def PAD, "PAD", is_normal
 925+ 73CE             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 925+ 73CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 925+ 73CE             >
 925+ 73CE             >                // dummy db directives used to calculate length of namec
 925+ 73CE 50 41 44    >                db      "PAD"
 925+ 73D1             >len_NFA         defl    $ - temp_NFA
 925+ 73D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 925+ 73CE             >
 925+ 73CE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 925+ 73CF 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 925+ 73D2             >                org     $-1                 // alter last byte of Name just above to set
 925+ 73D1 C4          >                db      {b $} | END_BIT     // msb as name end
 925+ 73D2             >
 925+ 73D2 B6 73       >                dw      last_NFA            // Link to previous definition Name
 925+ 73D4             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 925+ 73D4 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 925+ 73D7             >
 925+ 73D7             >
 925+ 73D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 925+ 73D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 925+ 73D7             >
 925+ 73D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 926+ 73D7 6A 6E                        dw      HERE                    // here
 927+ 73D9 A5 63 44 00                  dw      LIT, 68                 // 68
 928+ 73DD C6 69                        dw      PLUS                    // +
 929+ 73DF 4B 69                        dw      EXIT                    // ;
 930+ 73E1
 931+ 73E1              //  ______________________________________________________________________
 932+ 73E1              //
 933+ 73E1              // word         c -- a
 934+ 73E1              // reads characters from input streams until it encouners a c delimiter.
 935+ 73E1              // Stores that packet so it starts from HERE
 936+ 73E1              // WORD leaves a counter as first byte and ends the packet with two spaces.
 937+ 73E1              // Other occurrences of c are ignored.
 938+ 73E1              // If BLK is zero, text is taken from terminal buffer TIB.
 939+ 73E1              // Otherwise text is taken from the disk-block given by BLK.
 940+ 73E1              // "in" variable is incremented of the number of character read.
 941+ 73E1              // The number of characters read is given by ENCLOSE.
 942+ 73E1                              Colon_Def WORD, "WORD", is_normal
 942+ 73E1             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 942+ 73E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 942+ 73E1             >
 942+ 73E1             >                // dummy db directives used to calculate length of namec
 942+ 73E1 57 4F 52 44 >                db      "WORD"
 942+ 73E5             >len_NFA         defl    $ - temp_NFA
 942+ 73E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 942+ 73E1             >
 942+ 73E1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 942+ 73E2 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 942+ 73E6             >                org     $-1                 // alter last byte of Name just above to set
 942+ 73E5 C4          >                db      {b $} | END_BIT     // msb as name end
 942+ 73E6             >
 942+ 73E6 CE 73       >                dw      last_NFA            // Link to previous definition Name
 942+ 73E8             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 942+ 73E8 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 942+ 73EB             >
 942+ 73EB             >
 942+ 73EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 942+ 73EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 942+ 73EB             >
 942+ 73EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 943+ 73EB 74 6D 0F 6B                  dw      BLK, FETCH              // blk @
 944+ 73EF                                                              // if
 945+ 73EF 1C 64                        dw      ZBRANCH
 946+ 73F1 0C 00                        dw      Word_Else - $
 947+ 73F3 74 6D 0F 6B                  dw          BLK, FETCH          //      blk @
 948+ 73F7 74 7D                        dw          BLOCK               //      block ( forward )
 949+ 73F9                                                              // else
 950+ 73F9 07 64                        dw      BRANCH
 951+ 73FB 06 00                        dw      Word_Endif - $
 952+ 73FD              Word_Else:
 953+ 73FD FE 6C 0F 6B                  dw         TIB, FETCH           //      tib @
 954+ 7401              Word_Endif:                                     // endif
 955+ 7401 7E 6D 0F 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 955+ 7405 C6 69
 956+ 7407 83 6A 58 65                  dw      SWAP, ENCLOSE           // swap enclose
 957+ 740B 6A 6E A5 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 957+ 740F 22 00 AD 73
 958+ 7413 7E 6D F0 6A                  dw      TO_IN, PLUSSTORE        // >in @ +
 959+ 7417 53 6A BF 6E                  dw      OVER, SUBTRACT, TO_R    // over - >r
 959+ 741B 5C 69
 960+ 741D 80 69 6A 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 960+ 7421 32 6B
 961+ 7423 C6 69                        dw      PLUS                    // +
 962+ 7425 6A 6E E3 69                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 962+ 7429 6E 69
 963+ 742B 51 68                        dw      CMOVE                   // cmove
 964+ 742D 6A 6E                        dw      HERE                    // here
 965+ 742F 4B 69                        dw      EXIT                    // ;
 966+ 7431
 967+ 7431              //  ______________________________________________________________________
 968+ 7431              //
 969+ 7431              // (.")         --
 970+ 7431              // Direct procedure compiled by ." and  .(  It executes TYPE.
 971+ 7431                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 971+ 7431             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 971+ 7431             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 971+ 7431             >
 971+ 7431             >                // dummy db directives used to calculate length of namec
 971+ 7431 28 2E 22 29 >                db      '(.")'
 971+ 7435             >len_NFA         defl    $ - temp_NFA
 971+ 7435             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 971+ 7431             >
 971+ 7431 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 971+ 7432 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 971+ 7436             >                org     $-1                 // alter last byte of Name just above to set
 971+ 7435 A9          >                db      {b $} | END_BIT     // msb as name end
 971+ 7436             >
 971+ 7436 E1 73       >                dw      last_NFA            // Link to previous definition Name
 971+ 7438             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 971+ 7438 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 971+ 743B             >
 971+ 743B             >
 971+ 743B             >                endif           ; ok        // for other definitions it "points" the correct handler
 971+ 743B             >                // Use of "; ok" to suppress "warning[fwdref]"
 971+ 743B             >
 971+ 743B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 972+ 743B 80 69 F4 71                  dw      R_OP, COUNT             // r count
 973+ 743F 8E 6A E3 69                  dw      DUP, ONE_PLUS           // dup 1+
 974+ 7443 6E 69 C6 69                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 974+ 7447 5C 69
 975+ 7449 1C 72                        dw      TYPE                    // type
 976+ 744B 4B 69                        dw      EXIT                    // ;
 977+ 744D
 978+ 744D              //  ______________________________________________________________________
 979+ 744D              //
 980+ 744D              // char         -- c
 981+ 744D              // get first character from next input word
 982+ 744D                              Colon_Def CHAR,  "CHAR", is_normal
 982+ 744D             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 982+ 744D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 982+ 744D             >
 982+ 744D             >                // dummy db directives used to calculate length of namec
 982+ 744D 43 48 41 52 >                db      "CHAR"
 982+ 7451             >len_NFA         defl    $ - temp_NFA
 982+ 7451             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 982+ 744D             >
 982+ 744D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 982+ 744E 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 982+ 7452             >                org     $-1                 // alter last byte of Name just above to set
 982+ 7451 D2          >                db      {b $} | END_BIT     // msb as name end
 982+ 7452             >
 982+ 7452 31 74       >                dw      last_NFA            // Link to previous definition Name
 982+ 7454             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 982+ 7454 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 982+ 7457             >
 982+ 7457             >
 982+ 7457             >                endif           ; ok        // for other definitions it "points" the correct handler
 982+ 7457             >                // Use of "; ok" to suppress "warning[fwdref]"
 982+ 7457             >
 982+ 7457             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 983+ 7457 8F 6C E8 73                  dw      BL, WORD                // bl word
 984+ 745B E3 69 26 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 985+ 745F 4B 69                        dw      EXIT                    // ;
 986+ 7461
 987+ 7461              //  ______________________________________________________________________
 988+ 7461              //
 989+ 7461              // ,"           --
 990+ 7461              // compiles a string terminated by " as a counted string from next input stream
 991+ 7461                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 991+ 7461             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 991+ 7461             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 991+ 7461             >
 991+ 7461             >                // dummy db directives used to calculate length of namec
 991+ 7461 2C 22       >                db      ',"'
 991+ 7463             >len_NFA         defl    $ - temp_NFA
 991+ 7463             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 991+ 7461             >
 991+ 7461 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 991+ 7462 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 991+ 7464             >                org     $-1                 // alter last byte of Name just above to set
 991+ 7463 A2          >                db      {b $} | END_BIT     // msb as name end
 991+ 7464             >
 991+ 7464 4D 74       >                dw      last_NFA            // Link to previous definition Name
 991+ 7466             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 991+ 7466 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 991+ 7469             >
 991+ 7469             >
 991+ 7469             >                endif           ; ok        // for other definitions it "points" the correct handler
 991+ 7469             >                // Use of "; ok" to suppress "warning[fwdref]"
 991+ 7469             >
 991+ 7469             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 992+ 7469 A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 993+ 746D E8 73                        dw      WORD                    // word
 994+ 746F 26 6B E3 69                  dw      CFETCH, ONE_PLUS        // c@ 1+
 995+ 7473 7B 6E                        dw      ALLOT                   // allot
 996+ 7475 60 6C 9A 6E                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
 997+ 7479 4B 69                        dw      EXIT
 998+ 747B
 999+ 747B              //  ______________________________________________________________________
1000+ 747B              //
1001+ 747B              // .c           c --
1002+ 747B              // intermediate general purpose string builder, used by ." and .(
1003+ 747B                              Colon_Def DOT_C,  ".C", is_immediate
1003+ 747B             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1003+ 747B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1003+ 747B             >
1003+ 747B             >                // dummy db directives used to calculate length of namec
1003+ 747B 2E 43       >                db      ".C"
1003+ 747D             >len_NFA         defl    $ - temp_NFA
1003+ 747D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1003+ 747B             >
1003+ 747B C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1003+ 747C 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1003+ 747E             >                org     $-1                 // alter last byte of Name just above to set
1003+ 747D C3          >                db      {b $} | END_BIT     // msb as name end
1003+ 747E             >
1003+ 747E 61 74       >                dw      last_NFA            // Link to previous definition Name
1003+ 7480             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1003+ 7480 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1003+ 7483             >
1003+ 7483             >
1003+ 7483             >                endif           ; ok        // for other definitions it "points" the correct handler
1003+ 7483             >                // Use of "; ok" to suppress "warning[fwdref]"
1003+ 7483             >
1003+ 7483             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1004+ 7483 C7 6D 0F 6B                  dw      STATE, FETCH            // state @
1005+ 7487                                                              // if
1006+ 7487 1C 64                        dw      ZBRANCH
1007+ 7489 12 00                        dw      Dot_C_Else - $
1008+ 748B D8 70 38 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1009+ 748F E8 73 26 6B                  dw          WORD, CFETCH        //      word c@
1010+ 7493 E3 69 7B 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1011+ 7497                                                              // else
1012+ 7497 07 64                        dw      BRANCH
1013+ 7499 08 00                        dw      Dot_C_Endif - $
1014+ 749B              Dot_C_Else:
1015+ 749B E8 73 F4 71                  dw          WORD, COUNT, TYPE   //      word count type
1015+ 749F 1C 72
1016+ 74A1              Dot_C_Endif:                                    // endif
1017+ 74A1 4B 69                        dw      EXIT                    ;
1018+ 74A3
1019+ 74A3              //  ______________________________________________________________________
1020+ 74A3              //
1021+ 74A3              // ."           c --
1022+ 74A3                              Colon_Def DOT_QUOTE,  '."', is_immediate
1022+ 74A3             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1022+ 74A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1022+ 74A3             >
1022+ 74A3             >                // dummy db directives used to calculate length of namec
1022+ 74A3 2E 22       >                db      '."'
1022+ 74A5             >len_NFA         defl    $ - temp_NFA
1022+ 74A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1022+ 74A3             >
1022+ 74A3 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1022+ 74A4 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1022+ 74A6             >                org     $-1                 // alter last byte of Name just above to set
1022+ 74A5 A2          >                db      {b $} | END_BIT     // msb as name end
1022+ 74A6             >
1022+ 74A6 7B 74       >                dw      last_NFA            // Link to previous definition Name
1022+ 74A8             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1022+ 74A8 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1022+ 74AB             >
1022+ 74AB             >
1022+ 74AB             >                endif           ; ok        // for other definitions it "points" the correct handler
1022+ 74AB             >                // Use of "; ok" to suppress "warning[fwdref]"
1022+ 74AB             >
1022+ 74AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1023+ 74AB A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1024+ 74AF 80 74                        dw      DOT_C                   // [compile] .c
1025+ 74B1 4B 69                        dw      EXIT                    // ; immediate
1026+ 74B3
1027+ 74B3              //  ______________________________________________________________________
1028+ 74B3              //
1029+ 74B3              // .(           c --
1030+ 74B3                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1030+ 74B3             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1030+ 74B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1030+ 74B3             >
1030+ 74B3             >                // dummy db directives used to calculate length of namec
1030+ 74B3 2E 28       >                db      ".("
1030+ 74B5             >len_NFA         defl    $ - temp_NFA
1030+ 74B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1030+ 74B3             >
1030+ 74B3 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1030+ 74B4 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1030+ 74B6             >                org     $-1                 // alter last byte of Name just above to set
1030+ 74B5 A8          >                db      {b $} | END_BIT     // msb as name end
1030+ 74B6             >
1030+ 74B6 A3 74       >                dw      last_NFA            // Link to previous definition Name
1030+ 74B8             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1030+ 74B8 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1030+ 74BB             >
1030+ 74BB             >
1030+ 74BB             >                endif           ; ok        // for other definitions it "points" the correct handler
1030+ 74BB             >                // Use of "; ok" to suppress "warning[fwdref]"
1030+ 74BB             >
1030+ 74BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1031+ 74BB A5 63 29 00                  dw      LIT, ")"                // [char] )
1032+ 74BF 80 74                        dw      DOT_C                   // [compile] .c
1033+ 74C1 4B 69                        dw      EXIT                    // ; immediate
1034+ 74C3
1035+ 74C3              //  ______________________________________________________________________
1036+ 74C3              //
1037+ 74C3              // (sgn)        a -- a f
1038+ 74C3              // determines if char in addr a is a sign (+ or -), and in that case increments
1039+ 74C3              // a flag. Returns f as the sign, true for negative, false for positive.
1040+ 74C3              // called by NUMBER and (EXP)
1041+ 74C3                              Colon_Def CSGN,  "(SGN)", is_normal
1041+ 74C3             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1041+ 74C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1041+ 74C3             >
1041+ 74C3             >                // dummy db directives used to calculate length of namec
1041+ 74C3 28 53 47 4E >                db      "(SGN)"
1041+ 74C7 29          >
1041+ 74C8             >len_NFA         defl    $ - temp_NFA
1041+ 74C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1041+ 74C3             >
1041+ 74C3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1041+ 74C4 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1041+ 74C8 29          >
1041+ 74C9             >                org     $-1                 // alter last byte of Name just above to set
1041+ 74C8 A9          >                db      {b $} | END_BIT     // msb as name end
1041+ 74C9             >
1041+ 74C9 B3 74       >                dw      last_NFA            // Link to previous definition Name
1041+ 74CB             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1041+ 74CB CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1041+ 74CE             >
1041+ 74CE             >
1041+ 74CE             >                endif           ; ok        // for other definitions it "points" the correct handler
1041+ 74CE             >                // Use of "; ok" to suppress "warning[fwdref]"
1041+ 74CE             >
1041+ 74CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1042+ 74CE 8E 6A E3 69                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1042+ 74D2 26 6B
1043+ 74D4 8E 6A A5 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1043+ 74D8 2D 00 CB 6E
1044+ 74DC                                                              // if
1045+ 74DC 1C 64                        dw      ZBRANCH
1046+ 74DE 12 00                        dw      CSgn_Else_0 - $
1047+ 74E0 61 6A                        dw          DROP                //      drop
1048+ 74E2 E3 69                        dw          ONE_PLUS            //      1+
1049+ 74E4 69 6C DC 6D                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1049+ 74E8 F0 6A
1050+ 74EA 69 6C                        dw          ONE                 //      1
1051+ 74EC                                                              // else
1052+ 74EC 07 64                        dw      BRANCH
1053+ 74EE 16 00                        dw      CSgn_Endif_0 - $
1054+ 74F0              CSgn_Else_0:
1055+ 74F0 A5 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1055+ 74F4 CB 6E
1056+ 74F6                                                              //      if
1057+ 74F6 1C 64                        dw          ZBRANCH
1058+ 74F8 0A 00                        dw          CSgn_Endif_1 - $
1059+ 74FA E3 69                        dw              ONE_PLUS        //          1+
1060+ 74FC 69 6C DC 6D                  dw              ONE, DPL        //          1 dpl
1061+ 7500 F0 6A                        dw              PLUSSTORE       //          +!
1062+ 7502              CSgn_Endif_1                                    //      endif
1063+ 7502 60 6C                        dw          ZERO                //      0
1064+ 7504              CSgn_Endif_0:                                   // endif
1065+ 7504 4B 69                        dw      EXIT
1066+ 7506
1067+ 7506              //  ______________________________________________________________________
1068+ 7506              //
1069+ 7506              // (number)     d a -- d1 a1
1070+ 7506              // using the current BASE parse characters stored in address a
1071+ 7506              // accumulating a double precision integer d
1072+ 7506              // the process stops at the first not-convertible character
1073+ 7506              // A double-number is kept in CPU registers as HLDE.
1074+ 7506              // On the stack a double number is treated as two single numbers
1075+ 7506              // where HL is on the top of the stack and DE is the second from top,
1076+ 7506              // so in the stack memory it appears as LHED.
1077+ 7506              // Instead, in 2VARIABLE a double number is stored as EDLH.
1078+ 7506                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1078+ 7506             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1078+ 7506             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1078+ 7506             >
1078+ 7506             >                // dummy db directives used to calculate length of namec
1078+ 7506 28 4E 55 4D >                db      "(NUMBER)"
1078+ 750A 42 45 52 29 >
1078+ 750E             >len_NFA         defl    $ - temp_NFA
1078+ 750E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1078+ 7506             >
1078+ 7506 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1078+ 7507 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1078+ 750B 42 45 52 29 >
1078+ 750F             >                org     $-1                 // alter last byte of Name just above to set
1078+ 750E A9          >                db      {b $} | END_BIT     // msb as name end
1078+ 750F             >
1078+ 750F C3 74       >                dw      last_NFA            // Link to previous definition Name
1078+ 7511             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1078+ 7511 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1078+ 7514             >
1078+ 7514             >
1078+ 7514             >                endif           ; ok        // for other definitions it "points" the correct handler
1078+ 7514             >                // Use of "; ok" to suppress "warning[fwdref]"
1078+ 7514             >
1078+ 7514             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1079+ 7514                                                              // begin
1080+ 7514              CNumber_Begin:
1081+ 7514 E3 69                        dw          ONE_PLUS            //      1+
1082+ 7516 8E 6A 5C 69                  dw          DUP, TO_R           //      dup >r
1083+ 751A 26 6B                        dw          CFETCH              //      @
1084+ 751C D2 6D 0F 6B                  dw          BASE, FETCH         //      base @
1085+ 7520 95 64                        dw          DIGIT               //      digit
1086+ 7522                                                              // while
1087+ 7522 1C 64                        dw      ZBRANCH
1088+ 7524 2C 00                        dw      CNumber_While_end - $
1089+ 7526 83 6A                        dw          SWAP                //      swap
1090+ 7528 D2 6D 0F 6B                  dw          BASE, FETCH         //      base @
1091+ 752C 80 68                        dw          UM_MUL              //      um*
1092+ 752E 61 6A 99 6A                  dw          DROP, ROT           //      drop rot
1093+ 7532 D2 6D 0F 6B                  dw          BASE, FETCH         //      base @
1094+ 7536 80 68                        dw          UM_MUL              //      um*
1095+ 7538 D1 69                        dw          DPLUS               //      d+
1096+ 753A DC 6D 0F 6B                  dw          DPL, FETCH          //      dpl @
1097+ 753E E3 69                        dw          ONE_PLUS            //      1+
1098+ 7540                                                              //      if
1099+ 7540 1C 64                        dw          ZBRANCH
1100+ 7542 08 00                        dw          CNumber_Endif - $
1101+ 7544 69 6C DC 6D                  dw              ONE, DPL        //          1 dpl
1102+ 7548 F0 6A                        dw              PLUSSTORE       //          +!
1103+ 754A              CNumber_Endif:                                  //      endif
1104+ 754A 6E 69                        dw             R_TO             //      r>  ( balance rp )
1105+ 754C 07 64                        dw      BRANCH
1106+ 754E C6 FF                        dw      CNumber_Begin - $
1107+ 7550              CNumber_While_end:                              // repeat
1108+ 7550 6E 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1109+ 7552 4B 69                        dw      EXIT                    // ;
1110+ 7554
1111+ 7554              //  ______________________________________________________________________
1112+ 7554              //
1113+ 7554              // number       a -- d
1114+ 7554                              Colon_Def NUMBER,  "NUMBER", is_normal
1114+ 7554             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1114+ 7554             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1114+ 7554             >
1114+ 7554             >                // dummy db directives used to calculate length of namec
1114+ 7554 4E 55 4D 42 >                db      "NUMBER"
1114+ 7558 45 52       >
1114+ 755A             >len_NFA         defl    $ - temp_NFA
1114+ 755A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1114+ 7554             >
1114+ 7554 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1114+ 7555 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1114+ 7559 45 52       >
1114+ 755B             >                org     $-1                 // alter last byte of Name just above to set
1114+ 755A D2          >                db      {b $} | END_BIT     // msb as name end
1114+ 755B             >
1114+ 755B 06 75       >                dw      last_NFA            // Link to previous definition Name
1114+ 755D             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1114+ 755D CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1114+ 7560             >
1114+ 7560             >
1114+ 7560             >                endif           ; ok        // for other definitions it "points" the correct handler
1114+ 7560             >                // Use of "; ok" to suppress "warning[fwdref]"
1114+ 7560             >
1114+ 7560             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1115+ 7560 60 6C 60 6C                  dw      ZERO, ZERO              // 0 0
1116+ 7564 99 6A                        dw      ROT                     // rot
1117+ 7566 CB 74 5C 69                  dw      CSGN, TO_R              // (sgn) >r
1118+ 756A 85 6C DC 6D                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1118+ 756E 1A 6B
1119+ 7570 11 75                        dw      CNUMBER                 // (number)
1120+ 7572 8E 6A 26 6B                  dw      DUP, CFETCH             // dup c@
1121+ 7576 A5 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1121+ 757A CB 6E
1122+ 757C                                                              // if
1123+ 757C 1C 64                        dw      ZBRANCH
1124+ 757E 0A 00                        dw      Number_Endif_1 - $
1125+ 7580 60 6C DC 6D                  dw          ZERO, DPL, STORE    //      0 dpl !
1125+ 7584 1A 6B
1126+ 7586 11 75                        dw          CNUMBER             //      (number)
1127+ 7588              Number_Endif_1:                                 // endif
1128+ 7588 26 6B 8F 6C                  dw      CFETCH, BL              // c@ bl
1129+ 758C BF 6E 60 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1129+ 7590 3F 70
1130+ 7592 6E 69                        dw      R_TO                    // r>
1131+ 7594                                                              // if
1132+ 7594 1C 64                        dw      ZBRANCH
1133+ 7596 04 00                        dw      Number_Endif_2 - $
1134+ 7598 3B 6A                        dw          DMINUS              //      dminus
1135+ 759A              Number_Endif_2:                                 // endif
1136+ 759A 4B 69                        dw      EXIT                    // ;
1137+ 759C
1138+ 759C              //  ______________________________________________________________________
1139+ 759C              //
1140+ 759C              // -find        a -- d
1141+ 759C                              Colon_Def LFIND,  "-FIND", is_normal
1141+ 759C             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1141+ 759C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1141+ 759C             >
1141+ 759C             >                // dummy db directives used to calculate length of namec
1141+ 759C 2D 46 49 4E >                db      "-FIND"
1141+ 75A0 44          >
1141+ 75A1             >len_NFA         defl    $ - temp_NFA
1141+ 75A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1141+ 759C             >
1141+ 759C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1141+ 759D 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1141+ 75A1 44          >
1141+ 75A2             >                org     $-1                 // alter last byte of Name just above to set
1141+ 75A1 C4          >                db      {b $} | END_BIT     // msb as name end
1141+ 75A2             >
1141+ 75A2 54 75       >                dw      last_NFA            // Link to previous definition Name
1141+ 75A4             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1141+ 75A4 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1141+ 75A7             >
1141+ 75A7             >
1141+ 75A7             >                endif           ; ok        // for other definitions it "points" the correct handler
1141+ 75A7             >                // Use of "; ok" to suppress "warning[fwdref]"
1141+ 75A7             >
1141+ 75A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1142+ 75A7 8F 6C E8 73                  dw      BL, WORD                // bl word
1143+ 75AB AD 6D 0F 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1143+ 75AF 0F 6B
1144+ 75B1 02 65                        dw      C_FIND                  // (find)
1145+ 75B3 3E 6F                        dw      QDUP                    // ?dup
1146+ 75B5 88 69                        dw      ZEQUAL                  // 0=
1147+ 75B7                                                              // if
1148+ 75B7 1C 64                        dw      ZBRANCH
1149+ 75B9 08 00                        dw      LFind_Endif - $
1150+ 75BB 6A 6E                        dw          HERE                //      here
1151+ 75BD AD 6F                        dw          LATEST              //      latest
1152+ 75BF 02 65                        dw          C_FIND              //      (find)
1153+ 75C1              LFind_Endif:                                    // endif
1154+ 75C1 4B 69                        dw      EXIT                    // ;
1155+ 75C3
1156+ 75C3              //  ______________________________________________________________________
1157+ 75C3              //
1158+ 75C3              // (abort)      --
1159+ 75C3                              Colon_Def CABORT,  "(ABORT)", is_normal
1159+ 75C3             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1159+ 75C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1159+ 75C3             >
1159+ 75C3             >                // dummy db directives used to calculate length of namec
1159+ 75C3 28 41 42 4F >                db      "(ABORT)"
1159+ 75C7 52 54 29    >
1159+ 75CA             >len_NFA         defl    $ - temp_NFA
1159+ 75CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1159+ 75C3             >
1159+ 75C3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1159+ 75C4 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1159+ 75C8 52 54 29    >
1159+ 75CB             >                org     $-1                 // alter last byte of Name just above to set
1159+ 75CA A9          >                db      {b $} | END_BIT     // msb as name end
1159+ 75CB             >
1159+ 75CB 9C 75       >                dw      last_NFA            // Link to previous definition Name
1159+ 75CD             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1159+ 75CD CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1159+ 75D0             >
1159+ 75D0             >
1159+ 75D0             >                endif           ; ok        // for other definitions it "points" the correct handler
1159+ 75D0             >                // Use of "; ok" to suppress "warning[fwdref]"
1159+ 75D0             >
1159+ 75D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1160+ 75D0 A9 78                        dw      ABORT                   // abort
1161+ 75D2 4B 69                        dw      EXIT                    // ;
1162+ 75D4
1163+ 75D4              //  ______________________________________________________________________
1164+ 75D4              //
1165+ 75D4              // error        n --
1166+ 75D4              // raise an error
1167+ 75D4              // if WARNING is 0, prints "MSG#n".
1168+ 75D4              // if WARNING is 1, prints line n of screen 4.
1169+ 75D4              // if WARNING is -1 does (ABORT) that normally does ABORT
1170+ 75D4              // value can be negative or beyond block 4.
1171+ 75D4                              Colon_Def ERROR,  "ERROR", is_normal
1171+ 75D4             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1171+ 75D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1171+ 75D4             >
1171+ 75D4             >                // dummy db directives used to calculate length of namec
1171+ 75D4 45 52 52 4F >                db      "ERROR"
1171+ 75D8 52          >
1171+ 75D9             >len_NFA         defl    $ - temp_NFA
1171+ 75D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1171+ 75D4             >
1171+ 75D4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1171+ 75D5 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1171+ 75D9 52          >
1171+ 75DA             >                org     $-1                 // alter last byte of Name just above to set
1171+ 75D9 D2          >                db      {b $} | END_BIT     // msb as name end
1171+ 75DA             >
1171+ 75DA C3 75       >                dw      last_NFA            // Link to previous definition Name
1171+ 75DC             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1171+ 75DC CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1171+ 75DF             >
1171+ 75DF             >
1171+ 75DF             >                endif           ; ok        // for other definitions it "points" the correct handler
1171+ 75DF             >                // Use of "; ok" to suppress "warning[fwdref]"
1171+ 75DF             >
1171+ 75DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1172+ 75DF 18 6D 0F 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1172+ 75E3 A2 69
1173+ 75E5                                                              // if
1174+ 75E5 1C 64                        dw      ZBRANCH
1175+ 75E7 04 00                        dw      Error_Endif_1 - $
1176+ 75E9 CD 75                        dw          CABORT              //      (abort)
1177+ 75EB              Error_Endif_1:                                  // endif
1178+ 75EB 6A 6E F4 71                  dw      HERE, COUNT, TYPE       // here count type
1178+ 75EF 1C 72
1179+ 75F1 38 74                        dw      C_DOT_QUOTE             // .( ? )
1180+ 75F3 02 3F 20                     db      2, "? "
1181+ 75F6 EC 7A                        dw      MESSAGE                 // message  ( forward )
1182+ 75F8 EB 6C 0F 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1182+ 75FC 28 69
1183+ 75FE 74 6D 0F 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1183+ 7602 3E 6F
1184+ 7604                                                              // if
1185+ 7604 1C 64                        dw      ZBRANCH
1186+ 7606 08 00                        dw      Error_Endif_2 - $
1187+ 7608 7E 6D 0F 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1187+ 760C 83 6A
1188+ 760E              Error_Endif_2:                                  // endif
1189+ 760E 67 78                        dw      QUIT                    // quit ( forward )
1190+ 7610 4B 69                        dw      EXIT                    // ;
1191+ 7612              //  ______________________________________________________________________
1192+ 7612              //
1193+ 7612              // id.          nfa --
1194+ 7612                              Colon_Def ID_DOT,  "ID.", is_normal
1194+ 7612             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1194+ 7612             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1194+ 7612             >
1194+ 7612             >                // dummy db directives used to calculate length of namec
1194+ 7612 49 44 2E    >                db      "ID."
1194+ 7615             >len_NFA         defl    $ - temp_NFA
1194+ 7615             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1194+ 7612             >
1194+ 7612 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1194+ 7613 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1194+ 7616             >                org     $-1                 // alter last byte of Name just above to set
1194+ 7615 AE          >                db      {b $} | END_BIT     // msb as name end
1194+ 7616             >
1194+ 7616 D4 75       >                dw      last_NFA            // Link to previous definition Name
1194+ 7618             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1194+ 7618 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1194+ 761B             >
1194+ 761B             >
1194+ 761B             >                endif           ; ok        // for other definitions it "points" the correct handler
1194+ 761B             >                // Use of "; ok" to suppress "warning[fwdref]"
1194+ 761B             >
1194+ 761B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1195+ 761B D4 73 A5 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1195+ 761F 20 00 A5 63
1195+ 7623 60 00
1196+ 7625 83 73                        dw      FILL                    // fill
1197+ 7627 8E 6A F3 6F                  dw      DUP, PFA, LFA           // dup pfa lfa
1197+ 762B BE 6F
1198+ 762D 53 6A BF 6E                  dw      OVER, SUBTRACT          // over -
1199+ 7631 D4 73 83 6A                  dw      PAD, SWAP               // pad swap
1200+ 7635 51 68                        dw      CMOVE                   // cmove
1201+ 7637 D4 73 F4 71                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1201+ 763B A5 63 1F 00
1202+ 763F E9 68                        dw      AND_OP                  // and  ( use only lower bits )
1203+ 7641 1C 72 75 6F                  dw      TYPE, SPACE             // type
1204+ 7645 4B 69                        dw      EXIT                    // ;
1205+ 7647
1206+ 7647              //  ______________________________________________________________________
1207+ 7647              //
1208+ 7647              // code         -- cccc
1209+ 7647                              Colon_Def CODE,  "CODE", is_normal
1209+ 7647             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1209+ 7647             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1209+ 7647             >
1209+ 7647             >                // dummy db directives used to calculate length of namec
1209+ 7647 43 4F 44 45 >                db      "CODE"
1209+ 764B             >len_NFA         defl    $ - temp_NFA
1209+ 764B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1209+ 7647             >
1209+ 7647 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1209+ 7648 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1209+ 764C             >                org     $-1                 // alter last byte of Name just above to set
1209+ 764B C5          >                db      {b $} | END_BIT     // msb as name end
1209+ 764C             >
1209+ 764C 12 76       >                dw      last_NFA            // Link to previous definition Name
1209+ 764E             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1209+ 764E CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1209+ 7651             >
1209+ 7651             >
1209+ 7651             >                endif           ; ok        // for other definitions it "points" the correct handler
1209+ 7651             >                // Use of "; ok" to suppress "warning[fwdref]"
1209+ 7651             >
1209+ 7651             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1210+ 7651 A4 75                        dw      LFIND                   // -find
1211+ 7653                                                              // if
1212+ 7653 1C 64                        dw      ZBRANCH
1213+ 7655 10 00                        dw      Code_Endif - $
1214+ 7657 61 6A                        dw          DROP                //      drop
1215+ 7659 1B 70 18 76                  dw          TO_NAME, ID_DOT     //      >name id.
1216+ 765D A5 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1216+ 7661 EC 7A
1217+ 7663 75 6F                        dw          SPACE               //      space
1218+ 7665              Code_Endif:                                     // endif
1219+ 7665 6A 6E                        dw      HERE                    // here
1220+ 7667                                                              // ( ---- here begins NFA ---- )
1221+ 7667 8E 6A 26 6B                  dw      DUP, CFETCH             // dup c@
1222+ 766B 0A 6D 0F 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1222+ 766F 0F 6F
1223+ 7671 E3 69 7B 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1224+ 7675 8E 6A                        dw      DUP                     // dup
1225+ 7677 A5 63                        dw      LIT
1226+ 7679 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1227+ 767B 04 6B                        dw      TOGGLE                  // toggle
1228+ 767D 6A 6E ED 69                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1229+ 7681 A5 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1229+ 7685 04 6B
1230+ 7687                                                              // ( ---- here is LFA ---- )
1231+ 7687 AD 6F 88 6E                  dw      LATEST, COMMA           // latest ,
1232+ 768B BB 6D 0F 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1232+ 768F 1A 6B
1233+ 7691                                                              // ( ---- here is LFA ---- )
1234+ 7691              //              dw      HERE, CELL_PLUS, COMMA  // ( CFA is empty and PFA yet to exist )
1235+ 7691 4B 69                        dw      EXIT                    // ;
1236+ 7693
1237+ 7693              //  ______________________________________________________________________
1238+ 7693              //
1239+ 7693              // create       -- cccc     ( compile time )
1240+ 7693              //              -- a        ( run time )
1241+ 7693                              Colon_Def CREATE,  "CREATE", is_normal
1241+ 7693             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1241+ 7693             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1241+ 7693             >
1241+ 7693             >                // dummy db directives used to calculate length of namec
1241+ 7693 43 52 45 41 >                db      "CREATE"
1241+ 7697 54 45       >
1241+ 7699             >len_NFA         defl    $ - temp_NFA
1241+ 7699             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1241+ 7693             >
1241+ 7693 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1241+ 7694 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1241+ 7698 54 45       >
1241+ 769A             >                org     $-1                 // alter last byte of Name just above to set
1241+ 7699 C5          >                db      {b $} | END_BIT     // msb as name end
1241+ 769A             >
1241+ 769A 47 76       >                dw      last_NFA            // Link to previous definition Name
1241+ 769C             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1241+ 769C CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1241+ 769F             >
1241+ 769F             >
1241+ 769F             >                endif           ; ok        // for other definitions it "points" the correct handler
1241+ 769F             >                // Use of "; ok" to suppress "warning[fwdref]"
1241+ 769F             >
1241+ 769F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1242+ 769F 4E 76 28 71                  dw      CODE, SMUDGE            // code smudge
1243+ 76A3 A5 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1243+ 76A7 9A 6E
1244+ 76A9 A5 63 3F 6C                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1244+ 76AD 88 6E
1245+ 76AF 82 71                        dw      C_SEMICOLON_CODE
1246+ 76B1                              // this routine is called from the call coded in CFA
1247+ 76B1              Create_Ptr:
1248+ 76B1
1249+ 76B1
1250+ 76B1
1251+ 76B1                              next
1251+ 76B1 DD E9       >                jp      (ix)
1252+ 76B3
1253+ 76B3              //  ______________________________________________________________________
1254+ 76B3              //
1255+ 76B3              // [compile]    -- cccc     ( compile time )
1256+ 76B3                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1256+ 76B3             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1256+ 76B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1256+ 76B3             >
1256+ 76B3             >                // dummy db directives used to calculate length of namec
1256+ 76B3 5B 43 4F 4D >                db      "[COMPILE]"
1256+ 76B7 50 49 4C 45 >
1256+ 76BB 5D          >
1256+ 76BC             >len_NFA         defl    $ - temp_NFA
1256+ 76BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1256+ 76B3             >
1256+ 76B3 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1256+ 76B4 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1256+ 76B8 50 49 4C 45 >
1256+ 76BC 5D          >
1256+ 76BD             >                org     $-1                 // alter last byte of Name just above to set
1256+ 76BC DD          >                db      {b $} | END_BIT     // msb as name end
1256+ 76BD             >
1256+ 76BD 93 76       >                dw      last_NFA            // Link to previous definition Name
1256+ 76BF             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1256+ 76BF CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1256+ 76C2             >
1256+ 76C2             >
1256+ 76C2             >                endif           ; ok        // for other definitions it "points" the correct handler
1256+ 76C2             >                // Use of "; ok" to suppress "warning[fwdref]"
1256+ 76C2             >
1256+ 76C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1257+ 76C2 A4 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1258+ 76C4 88 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1259+ 76C6 60 6C 3F 70                  dw      ZERO, QERROR            // 0 ?error
1260+ 76CA 61 6A                        dw      DROP                    // drop       (  cfa  )
1261+ 76CC 88 6E                        dw      COMMA                   // ,
1262+ 76CE 4B 69                        dw      EXIT                    // ; immediate
1263+ 76D0
1264+ 76D0              //  ______________________________________________________________________
1265+ 76D0              //
1266+ 76D0              // literal      n --      ( compile time )
1267+ 76D0                              Colon_Def LITERAL,  "LITERAL", is_immediate
1267+ 76D0             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1267+ 76D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1267+ 76D0             >
1267+ 76D0             >                // dummy db directives used to calculate length of namec
1267+ 76D0 4C 49 54 45 >                db      "LITERAL"
1267+ 76D4 52 41 4C    >
1267+ 76D7             >len_NFA         defl    $ - temp_NFA
1267+ 76D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1267+ 76D0             >
1267+ 76D0 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1267+ 76D1 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1267+ 76D5 52 41 4C    >
1267+ 76D8             >                org     $-1                 // alter last byte of Name just above to set
1267+ 76D7 CC          >                db      {b $} | END_BIT     // msb as name end
1267+ 76D8             >
1267+ 76D8 B3 76       >                dw      last_NFA            // Link to previous definition Name
1267+ 76DA             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1267+ 76DA CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1267+ 76DD             >
1267+ 76DD             >
1267+ 76DD             >                endif           ; ok        // for other definitions it "points" the correct handler
1267+ 76DD             >                // Use of "; ok" to suppress "warning[fwdref]"
1267+ 76DD             >
1267+ 76DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1268+ 76DD C7 6D 0F 6B                  dw      STATE, FETCH            // state @
1269+ 76E1                                                              // if
1270+ 76E1 1C 64                        dw      ZBRANCH
1271+ 76E3 08 00                        dw      Literal_Endif - $
1272+ 76E5 D8 70 A5 63                  dw          COMPILE, LIT        //      compile lit
1273+ 76E9 88 6E                        dw          COMMA               //      ,
1274+ 76EB              Literal_Endif:                                  // endif
1275+ 76EB 4B 69                        dw      EXIT                    // ; immediate
1276+ 76ED
1277+ 76ED              //  ______________________________________________________________________
1278+ 76ED              //
1279+ 76ED              // dliteral     n --      ( compile time )
1280+ 76ED                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1280+ 76ED             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1280+ 76ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1280+ 76ED             >
1280+ 76ED             >                // dummy db directives used to calculate length of namec
1280+ 76ED 44 4C 49 54 >                db      "DLITERAL"
1280+ 76F1 45 52 41 4C >
1280+ 76F5             >len_NFA         defl    $ - temp_NFA
1280+ 76F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1280+ 76ED             >
1280+ 76ED C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1280+ 76EE 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1280+ 76F2 45 52 41 4C >
1280+ 76F6             >                org     $-1                 // alter last byte of Name just above to set
1280+ 76F5 CC          >                db      {b $} | END_BIT     // msb as name end
1280+ 76F6             >
1280+ 76F6 D0 76       >                dw      last_NFA            // Link to previous definition Name
1280+ 76F8             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1280+ 76F8 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1280+ 76FB             >
1280+ 76FB             >
1280+ 76FB             >                endif           ; ok        // for other definitions it "points" the correct handler
1280+ 76FB             >                // Use of "; ok" to suppress "warning[fwdref]"
1280+ 76FB             >
1280+ 76FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1281+ 76FB C7 6D 0F 6B                  dw      STATE, FETCH            // state @
1282+ 76FF                                                              // if
1283+ 76FF 1C 64                        dw      ZBRANCH
1284+ 7701 08 00                        dw      DLiteral_Endif - $
1285+ 7703 83 6A                        dw          SWAP                //      swap
1286+ 7705 DA 76 DA 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1287+ 7709              DLiteral_Endif:                                 // endif
1288+ 7709 4B 69                        dw      EXIT                    // ; immediate
1289+ 770B
1290+ 770B              //  ______________________________________________________________________
1291+ 770B              //
1292+ 770B              // [char]       n --      ( compile time )
1293+ 770B              // inside colon definition, gets first character from next input word
1294+ 770B              // and compiles it as literal.
1295+ 770B                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1295+ 770B             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1295+ 770B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1295+ 770B             >
1295+ 770B             >                // dummy db directives used to calculate length of namec
1295+ 770B 5B 43 48 41 >                db      "[CHAR]"
1295+ 770F 52 5D       >
1295+ 7711             >len_NFA         defl    $ - temp_NFA
1295+ 7711             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1295+ 770B             >
1295+ 770B C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1295+ 770C 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1295+ 7710 52 5D       >
1295+ 7712             >                org     $-1                 // alter last byte of Name just above to set
1295+ 7711 DD          >                db      {b $} | END_BIT     // msb as name end
1295+ 7712             >
1295+ 7712 ED 76       >                dw      last_NFA            // Link to previous definition Name
1295+ 7714             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1295+ 7714 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1295+ 7717             >
1295+ 7717             >
1295+ 7717             >                endif           ; ok        // for other definitions it "points" the correct handler
1295+ 7717             >                // Use of "; ok" to suppress "warning[fwdref]"
1295+ 7717             >
1295+ 7717             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1296+ 7717 54 74 DA 76                  dw      CHAR, LITERAL           // char [compile] literal
1297+ 771B 4B 69                        dw      EXIT                    // ; immediate
1298+ 771D
1299+ 771D              //  ______________________________________________________________________
1300+ 771D              //
1301+ 771D              // 0x00         n --      ( compile time )
1302+ 771D                              Colon_Def NUL_WORD,  $00, is_immediate
1302+ 771D             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1302+ 771D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1302+ 771D             >
1302+ 771D             >                // dummy db directives used to calculate length of namec
1302+ 771D 00          >                db      $00
1302+ 771E             >len_NFA         defl    $ - temp_NFA
1302+ 771E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1302+ 771D             >
1302+ 771D C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1302+ 771E 00          >                db      $00               // name string in 7-bit ascii, but
1302+ 771F             >                org     $-1                 // alter last byte of Name just above to set
1302+ 771E 80          >                db      {b $} | END_BIT     // msb as name end
1302+ 771F             >
1302+ 771F 0B 77       >                dw      last_NFA            // Link to previous definition Name
1302+ 7721             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1302+ 7721 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1302+ 7724             >
1302+ 7724             >
1302+ 7724             >                endif           ; ok        // for other definitions it "points" the correct handler
1302+ 7724             >                // Use of "; ok" to suppress "warning[fwdref]"
1302+ 7724             >
1302+ 7724             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1303+ 7724 74 6D 0F 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1303+ 7728 69 6C
1304+ 772A 00 6F                        dw      GREATER                 // > if
1305+ 772C                                                              // if
1306+ 772C 1C 64                        dw      ZBRANCH
1307+ 772E 28 00                        dw      Nul_Else_1 - $
1308+ 7730 69 6C 74 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1308+ 7734 F0 6A
1309+ 7736 60 6C 7E 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
1309+ 773A 1A 6B
1310+ 773C 74 6D 0F 6B                  dw          BLK, FETCH          //      blk @
1311+ 7740 B4 6C                        dw          BSCR                //      b/scr
1312+ 7742 ED 69                        dw          ONE_SUBTRACT        //      1 -
1313+ 7744 E9 68                        dw          AND_OP              //      and  ( this is tricky )
1314+ 7746 88 69                        dw          ZEQUAL              //      0=
1315+ 7748                                                              //      if
1316+ 7748 1C 64                        dw          ZBRANCH
1317+ 774A 08 00                        dw          Nul_Endif_2 - $
1318+ 774C 73 70                        dw              QEXEC           //          ?exec
1319+ 774E 6E 69 61 6A                  dw              R_TO, DROP      //          r> drop
1320+ 7752              Nul_Endif_2:                                    //      endif
1321+ 7752 07 64                        dw      BRANCH
1322+ 7754 06 00                        dw      Nul_Endif_1 - $
1323+ 7756              Nul_Else_1:                                     // else
1324+ 7756 6E 69 61 6A                  dw          R_TO, DROP          //      r> drop
1325+ 775A              Nul_Endif_1:                                    // endif
1326+ 775A 4B 69                        dw      EXIT                    // ;
1327+ 775C
1328+ 775C              //  ______________________________________________________________________
1329+ 775C              //
1330+ 775C              // ?stack       --
1331+ 775C              // Raise error #1 if stack is empty and you pop it
1332+ 775C              // Raise error #7 if stack is full.
1333+ 775C              // This means SP must always stay between HERE and FFFF
1334+ 775C              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1335+ 775C              // for Next 8K MMU paging this is $DOE8
1336+ 775C                              Colon_Def QSTACK, "?STACK", is_normal
1336+ 775C             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1336+ 775C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1336+ 775C             >
1336+ 775C             >                // dummy db directives used to calculate length of namec
1336+ 775C 3F 53 54 41 >                db      "?STACK"
1336+ 7760 43 4B       >
1336+ 7762             >len_NFA         defl    $ - temp_NFA
1336+ 7762             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1336+ 775C             >
1336+ 775C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1336+ 775D 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1336+ 7761 43 4B       >
1336+ 7763             >                org     $-1                 // alter last byte of Name just above to set
1336+ 7762 CB          >                db      {b $} | END_BIT     // msb as name end
1336+ 7763             >
1336+ 7763 1D 77       >                dw      last_NFA            // Link to previous definition Name
1336+ 7765             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1336+ 7765 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1336+ 7768             >
1336+ 7768             >
1336+ 7768             >                endif           ; ok        // for other definitions it "points" the correct handler
1336+ 7768             >                // Use of "; ok" to suppress "warning[fwdref]"
1336+ 7768             >
1336+ 7768             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1337+ 7768 1B 69                        dw      SPFETCH                 // sp@
1338+ 776A EB 6C 0F 6B                  dw      S0, FETCH               // s0 @
1339+ 776E 83 6A D9 6E                  dw      SWAP, ULESS             // swap u<
1340+ 7772 69 6C 3F 70                  dw      ONE, QERROR             // 1 ?error
1341+ 7776 6A 6E                        dw      HERE                    // here
1342+ 7778 EB 6C 0F 6B                  dw      S0, FETCH, LESS         // s0 @ <
1342+ 777C EB 6E
1343+ 777E                                                              // if
1344+ 777E 1C 64                        dw      ZBRANCH
1345+ 7780 14 00                        dw      QStack_Endif - $
1346+ 7782 1B 69                        dw          SPFETCH             //      sp@
1347+ 7784 6A 6E A5 63                  dw          HERE, LIT, 128      //      here 128
1347+ 7788 80 00
1348+ 778A C6 69 D9 6E                  dw          PLUS, ULESS         //      plus u<
1349+ 778E A5 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1349+ 7792 3F 70
1350+ 7794              QStack_Endif:                                   // endif
1351+ 7794 4B 69                        dw      EXIT                    // ;
1352+ 7796
1353+ 7796
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
 112  7796                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
   1+ 7796              //  ______________________________________________________________________
   2+ 7796              //
   3+ 7796              //  L2.asm
   4+ 7796              //
   5+ 7796              //  Level-2
   6+ 7796              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 7796              //  ______________________________________________________________________
   8+ 7796
   9+ 7796
  10+ 7796              //  ______________________________________________________________________
  11+ 7796              //
  12+ 7796              // interpret    --
  13+ 7796              // This is the text interpreter.
  14+ 7796              // It executes or compiles, depending on STATE, the text coming from
  15+ 7796              // current input stream.
  16+ 7796              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 7796              // the word is interpreted as numeric and converted, using current BASE,
  18+ 7796              // leaving on top of stack a single or double precision number, depending
  19+ 7796              // on the presence of a decimal point.
  20+ 7796              // If the number conversion fails, the terminal is notified with ? followed
  21+ 7796              // by the offending word.
  22+ 7796                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 7796             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 7796             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 7796             >
  22+ 7796             >                // dummy db directives used to calculate length of namec
  22+ 7796 49 4E 54 45 >                db      "INTERPRET"
  22+ 779A 52 50 52 45 >
  22+ 779E 54          >
  22+ 779F             >len_NFA         defl    $ - temp_NFA
  22+ 779F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 7796             >
  22+ 7796 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 7797 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 779B 52 50 52 45 >
  22+ 779F 54          >
  22+ 77A0             >                org     $-1                 // alter last byte of Name just above to set
  22+ 779F D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 77A0             >
  22+ 77A0 5C 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 77A2             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 77A2 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 77A5             >
  22+ 77A5             >
  22+ 77A5             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 77A5             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 77A5             >
  22+ 77A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 77A5
  24+ 77A5              Interpret_Begin:                                        // begin
  25+ 77A5 A4 75                        dw          LFIND                       //      -find
  26+ 77A7                                                                      //      if
  27+ 77A7 1C 64                        dw          ZBRANCH
  28+ 77A9 1A 00                        dw          Interpret_Else_1 - $
  29+ 77AB C7 6D 0F 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 77AF EB 6E
  30+ 77B1                                                                      //          if
  31+ 77B1 1C 64                        dw              ZBRANCH
  32+ 77B3 08 00                        dw              Interpret_Else_2 - $
  33+ 77B5 F6 70                        dw                  COMPILE_XT          //              compile,
  34+ 77B7                                                                      //          else
  35+ 77B7 07 64                        dw              BRANCH
  36+ 77B9 06 00                        dw              Interpret_Endif_2 - $
  37+ 77BB              Interpret_Else_2:
  38+ 77BB B8 63 0B 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77BF              Interpret_Endif_2:                                      //          endif
  40+ 77BF                                                                      //      else
  41+ 77BF 07 64                        dw          BRANCH
  42+ 77C1 1A 00                        dw          Interpret_Endif_1 - $
  43+ 77C3              Interpret_Else_1:
  44+ 77C3 6A 6E 5D 75                  dw              HERE, NUMBER            //          here number
  45+ 77C7 DC 6D 0F 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77CB E3 69
  46+ 77CD                                                                      //          if
  47+ 77CD 1C 64                        dw              ZBRANCH
  48+ 77CF 08 00                        dw              Interpret_Else_3 - $
  49+ 77D1              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77D1              //                                                      //              if
  51+ 77D1              //              dw                  ZBRANCH
  52+ 77D1              //              dw                  Interpret_Endif_4 - $
  53+ 77D1              //              dw                      ONE, ZERO       //                  1 0
  54+ 77D1              //              dw                      TWO_DROP        //                  2drop
  55+ 77D1              //Interpret_Endif_4:                                      //              endif
  56+ 77D1 F8 76                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77D3                                                                      //          else
  58+ 77D3 07 64                        dw              BRANCH
  59+ 77D5 06 00                        dw              Interpret_Endif_3 - $
  60+ 77D7              Interpret_Else_3:
  61+ 77D7 61 6A                        dw                  DROP                //              drop
  62+ 77D9 DA 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77DB              Interpret_Endif_3:                                      //          endif
  64+ 77DB              Interpret_Endif_1:                                      //      endif
  65+ 77DB 65 77                        dw          QSTACK                      //      ?stack
  66+ 77DD 0B 67                        dw          QTERMINAL                   //      ?terminal
  67+ 77DF                                                                      //      if
  68+ 77DF 1C 64                        dw          ZBRANCH
  69+ 77E1 04 00                        dw          Interpret_Endif_5 - $
  70+ 77E3 CD 75                        dw              CABORT                  //          (abort)
  71+ 77E5              Interpret_Endif_5:                                      //      endif
  72+ 77E5 07 64                        dw      BRANCH
  73+ 77E7 BE FF                        dw      Interpret_Begin - $
  74+ 77E9 4B 69                        dw      EXIT                            // ;
  75+ 77EB
  76+ 77EB              //  ______________________________________________________________________
  77+ 77EB              //
  78+ 77EB              // vocabulary   -- cccc     ( compile time )
  79+ 77EB              // Defining word used in the form   VOCABULARY cccc
  80+ 77EB              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 77EB              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 77EB              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 77EB              // so new definitions can be inserted in that vocabulary.
  84+ 77EB                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 77EB             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 77EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 77EB             >
  84+ 77EB             >                // dummy db directives used to calculate length of namec
  84+ 77EB 56 4F 43 41 >                db      "VOCABULARY"
  84+ 77EF 42 55 4C 41 >
  84+ 77F3 52 59       >
  84+ 77F5             >len_NFA         defl    $ - temp_NFA
  84+ 77F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 77EB             >
  84+ 77EB 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 77EC 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 77F0 42 55 4C 41 >
  84+ 77F4 52 59       >
  84+ 77F6             >                org     $-1                 // alter last byte of Name just above to set
  84+ 77F5 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 77F6             >
  84+ 77F6 96 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 77F8             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 77F8 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 77FB             >
  84+ 77FB             >
  84+ 77FB             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 77FB             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 77FB             >
  84+ 77FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 77FB
  86+ 77FB BC 71                        dw      CBUILDS
  87+ 77FD
  88+ 77FD A5 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 7801 88 6E
  89+ 7803 BB 6D 0F 6B                  dw      CURRENT, FETCH          // current @
  90+ 7807 10 6A 88 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 780B 6A 6E                        dw      HERE                    // here
  92+ 780D 3C 6D 0F 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 7811 88 6E
  93+ 7813 3C 6D 1A 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 7817
  95+ 7817 CD 71                        dw      DOES_TO                 // does>
  96+ 7819              Vocabulary_Does:
  97+ 7819 05 6A                        dw      CELL_PLUS               // cell+
  98+ 781B AD 6D 1A 6B                  dw      CONTEXT, STORE          // context !
  99+ 781F 4B 69                        dw      EXIT                    // ;
 100+ 7821
 101+ 7821              //  ______________________________________________________________________
 102+ 7821              //
 103+ 7821              // forth        --
 104+ 7821              // Name of the first vocabulary.
 105+ 7821              // It makes FORTH the CONTEXT vocabulary.
 106+ 7821              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7821              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7821              // of a colon definition to be able to select the vocabulary.
 109+ 7821
 110+ 7821                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7821             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7821             >
 110+ 7821             >                // dummy db directives used to calculate length of namec
 110+ 7821 46 4F 52 54 >                db      "FORTH"
 110+ 7825 48          >
 110+ 7826             >len_NFA         defl    $ - temp_NFA
 110+ 7826             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7821             >
 110+ 7821 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 7822 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 7826 48          >
 110+ 7827             >                org     $-1                 // alter last byte of Name just above to set
 110+ 7826 C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 7827             >
 110+ 7827 EB 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 7829             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 7829 CD DA 71    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 782C             >
 110+ 782C             >
 110+ 782C             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 782C             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 782C             >
 110+ 782C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 782C 19 78                        dw      Vocabulary_Does
 112+ 782E 81 A0                        db      $81, $A0
 113+ 7830              Forth_Latest_Ptr:
 114+ 7830 A3 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 7832              Voclink_Ptr:
 116+ 7832 00 00                        dw      0
 117+ 7834              // Any new vocabulary is structured as follow:
 118+ 7834              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7834              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7834              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7834              //       at creations it points to the null-word of its parent vocabulary
 122+ 7834              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7834              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7834              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7834              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7834              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7834              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7834
 129+ 7834              //  ______________________________________________________________________
 130+ 7834              //
 131+ 7834              // definitions  --
 132+ 7834              // Used in the form  cccc DEFINITIONS
 133+ 7834              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7834              // vocabulary cccc.
 135+ 7834                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7834             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7834             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7834             >
 135+ 7834             >                // dummy db directives used to calculate length of namec
 135+ 7834 44 45 46 49 >                db      "DEFINITIONS"
 135+ 7838 4E 49 54 49 >
 135+ 783C 4F 4E 53    >
 135+ 783F             >len_NFA         defl    $ - temp_NFA
 135+ 783F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7834             >
 135+ 7834 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7835 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 7839 4E 49 54 49 >
 135+ 783D 4F 4E 53    >
 135+ 7840             >                org     $-1                 // alter last byte of Name just above to set
 135+ 783F D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7840             >
 135+ 7840 21 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 7842             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7842 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7845             >
 135+ 7845             >
 135+ 7845             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7845             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7845             >
 135+ 7845             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7845 AD 6D 0F 6B                  dw      CONTEXT, FETCH          // context @
 137+ 7849 BB 6D 1A 6B                  dw      CURRENT, STORE          // current !
 138+ 784D 4B 69                        dw      EXIT                    // ;
 139+ 784F
 140+ 784F              //  ______________________________________________________________________
 141+ 784F              //
 142+ 784F              // (            -- cccc )
 143+ 784F              // the following text is interpreted as a comment until a closing )
 144+ 784F                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 784F             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 784F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 784F             >
 144+ 784F             >                // dummy db directives used to calculate length of namec
 144+ 784F 28          >                db      "("
 144+ 7850             >len_NFA         defl    $ - temp_NFA
 144+ 7850             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 784F             >
 144+ 784F C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7850 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 7851             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7850 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 7851             >
 144+ 7851 34 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7853             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7853 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7856             >
 144+ 7856             >
 144+ 7856             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7856             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7856             >
 144+ 7856             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7856 A5 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 785A E8 73 61 6A                  dw      WORD, DROP              // word drop
 147+ 785E 4B 69                        dw      EXIT                    // ;
 148+ 7860
 149+ 7860              //  ______________________________________________________________________
 150+ 7860              //
 151+ 7860              // quit         --
 152+ 7860              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7860                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7860             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7860             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7860             >
 153+ 7860             >                // dummy db directives used to calculate length of namec
 153+ 7860 51 55 49 54 >                db      "QUIT"
 153+ 7864             >len_NFA         defl    $ - temp_NFA
 153+ 7864             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7860             >
 153+ 7860 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7861 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7865             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7864 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7865             >
 153+ 7865 4F 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7867             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7867 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 786A             >
 153+ 786A             >
 153+ 786A             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 786A             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 786A             >
 153+ 786A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 786A
 155+ 786A 3D 6E 0F 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 786E 8F 67 61 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 7872 60 6C 3D 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 7876 1A 6B
 158+ 7878 60 6C 74 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 787C 1A 6B
 159+ 787E 03 71                        dw      SQUARED_OPEN            // [compile] [
 160+ 7880                                                              // begin
 161+ 7880              Quit_Begin:
 162+ 7880 F4 6C 0F 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 7884 3E 69
 163+ 7886 FC 65                        dw      CR                      //      cr
 164+ 7888 65 73                        dw      QUERY                   //      query
 165+ 788A              Next_Breakpoint_1:
 166+ 788A A2 77                        dw      INTERPRET               //      interpret
 167+ 788C C7 6D 0F 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 7890 88 69
 168+ 7892                                                              //      if
 169+ 7892 1C 64                        dw      ZBRANCH
 170+ 7894 07 00                        dw      Quit_Endif - $
 171+ 7896 38 74                        dw          C_DOT_QUOTE
 172+ 7898 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 789B              Quit_Endif:                                     //      else
 174+ 789B                                                              // again
 175+ 789B 07 64                        dw      BRANCH
 176+ 789D E3 FF                        dw      Quit_Begin - $
 177+ 789F 4B 69                        dw      EXIT                    // ;
 178+ 78A1
 179+ 78A1              //  ______________________________________________________________________
 180+ 78A1              //
 181+ 78A1              // abort        --
 182+ 78A1                              Colon_Def ABORT, "ABORT", is_normal
 182+ 78A1             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 78A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 78A1             >
 182+ 78A1             >                // dummy db directives used to calculate length of namec
 182+ 78A1 41 42 4F 52 >                db      "ABORT"
 182+ 78A5 54          >
 182+ 78A6             >len_NFA         defl    $ - temp_NFA
 182+ 78A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 78A1             >
 182+ 78A1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 78A2 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 78A6 54          >
 182+ 78A7             >                org     $-1                 // alter last byte of Name just above to set
 182+ 78A6 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 78A7             >
 182+ 78A7 60 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 78A9             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 78A9 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 78AC             >
 182+ 78AC             >
 182+ 78AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 78AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 78AC             >
 182+ 78AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78AC EB 6C 0F 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 78B0 28 69
 184+ 78B2 6B 71                        dw      DECIMAL                 // decimal
 185+ 78B4 29 78                        dw      FORTH                   // [compile] forth
 186+ 78B6 42 78                        dw      DEFINITIONS             // definitions
 187+ 78B8              Autoexec_Ptr:
 188+ 78B8 B0 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78BA 67 78                        dw      QUIT                    // quit
 190+ 78BC 4B 69                        dw      EXIT                    // ;
 191+ 78BE
 192+ 78BE              //  ______________________________________________________________________
 193+ 78BE              //
 194+ 78BE              // warm         --
 195+ 78BE                              Colon_Def WARM, "WARM", is_normal
 195+ 78BE             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78BE             >
 195+ 78BE             >                // dummy db directives used to calculate length of namec
 195+ 78BE 57 41 52 4D >                db      "WARM"
 195+ 78C2             >len_NFA         defl    $ - temp_NFA
 195+ 78C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78BE             >
 195+ 78BE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78BF 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78C3             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78C2 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78C3             >
 195+ 78C3 A1 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78C5             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78C5 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78C8             >
 195+ 78C8             >
 195+ 78C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78C8             >
 195+ 78C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78C8 55 7C                        dw      BLK_INIT                // blk-init
 197+ 78CA 5E 84                        dw      SPLASH                  // splash
 198+ 78CC A5 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78D0 58 6F
 199+ 78D2 A9 78                        dw      ABORT                   // abort
 200+ 78D4 4B 69                        dw      EXIT                    // exit
 201+ 78D6
 202+ 78D6              //  ______________________________________________________________________
 203+ 78D6              //
 204+ 78D6              // cold         --
 205+ 78D6                              Colon_Def COLD, "COLD", is_normal
 205+ 78D6             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78D6             >
 205+ 78D6             >                // dummy db directives used to calculate length of namec
 205+ 78D6 43 4F 4C 44 >                db      "COLD"
 205+ 78DA             >len_NFA         defl    $ - temp_NFA
 205+ 78DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78D6             >
 205+ 78D6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78D7 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78DB             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78DA C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78DB             >
 205+ 78DB BE 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78DD             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78DD CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78E0             >
 205+ 78E0             >
 205+ 78E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78E0             >
 205+ 78E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78E0 A5 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78E4 A5 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78E8 0F 6B                        dw      FETCH                   // @
 209+ 78EA A5 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78EE C6 69
 210+ 78F0 A5 63 14 00                  dw      LIT, 20                 // 20
 211+ 78F4 51 68                        dw      CMOVE
 212+ 78F6 A5 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 78FA 0F 6B                        dw      FETCH                   // @
 214+ 78FC A5 63 30 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 7900 1A 6B                        dw      STORE                   // !
 216+ 7902 60 6C 6A 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 7906 1A 6B
 217+ 7908 48 6D 0F 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 790C 8E 6A
 218+ 790E 0D 6E 1A 6B                  dw      USE, STORE              // use !
 219+ 7912 18 6E 1A 6B                  dw      PREV, STORE             // prev !
 220+ 7916 A5 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 791A 2D 6E 1A 6B
 221+ 791E              //              dw      LIT, 8
 222+ 791E              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 791E 72 6C 5F 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 7922 1A 6B
 224+ 7924 C5 78        Warm_Start:     dw      WARM
 225+ 7926 DD 78        Cold_Start:     dw      COLD
 226+ 7928 4B 69                        dw      EXIT
 227+ 792A
 228+ 792A              //  ______________________________________________________________________
 229+ 792A              WarmRoutine:
 230+ 792A              ColdRoutine:
 231+ 792A DD 21 98 63                  ld      ix, Next_Ptr
 232+ 792E D9                           exx
 233+ 792F E5                           push    hl
 234+ 7930 D9                           exx
 235+ 7931
 236+ 7931 ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 7935 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 7939              //              nop
 239+ 7939 2A 7A 63                     ld      hl, (R0_origin)
 240+ 793C              //              nop
 241+ 793C                              ldrphl
 241+ 793C 22 96 63    >                ld      (RP_Pointer),hl
 242+ 793F 01 24 79                     ld      bc, Warm_Start
 243+ 7942 38 02                        jr      c, Warm_Skip
 244+ 7944 03                           inc     bc
 245+ 7945 03                           inc     bc
 246+ 7946              Warm_Skip:
 247+ 7946                              next
 247+ 7946 DD E9       >                jp      (ix)
 248+ 7948
 249+ 7948              //  ______________________________________________________________________
 250+ 7948              //
 251+ 7948              // basic        --
 252+ 7948                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7948             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7948             >
 252+ 7948             >                // dummy db directives used to calculate length of namec
 252+ 7948 42 41 53 49 >                db      "BASIC"
 252+ 794C 43          >
 252+ 794D             >len_NFA         defl    $ - temp_NFA
 252+ 794D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7948             >
 252+ 7948 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7949 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 794D 43          >
 252+ 794E             >                org     $-1                 // alter last byte of Name just above to set
 252+ 794D C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 794E             >
 252+ 794E D6 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 7950             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 7950 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 252+ 7950 ~           >
 252+ 7950 ~           >
 252+ 7950             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 7950             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 7950             >
 252+ 7950             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 7950 C1                           pop     bc
 254+ 7951 21 00 00                     ld      hl, 0
 255+ 7954 39                           add     hl, sp
 256+ 7955 ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 7959              //              nop
 258+ 7959 22 6E 63                     ld      (SP_Basic),hl
 259+ 795C D9                           exx
 260+ 795D E1                           pop     hl
 261+ 795E D9                           exx
 262+ 795F C9                           ret     // to Basic
 263+ 7960
 264+ 7960              //  ______________________________________________________________________
 265+ 7960              //
 266+ 7960              // +-           n1 n2 -- n3
 267+ 7960              // leaves n1 with the sign of n2 as n3.
 268+ 7960                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 7960             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 7960             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 7960             >
 268+ 7960             >                // dummy db directives used to calculate length of namec
 268+ 7960 2B 2D       >                db      "+-"
 268+ 7962             >len_NFA         defl    $ - temp_NFA
 268+ 7962             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 7960             >
 268+ 7960 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 7961 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 7963             >                org     $-1                 // alter last byte of Name just above to set
 268+ 7962 AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 7963             >
 268+ 7963 48 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 7965             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 7965 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7968             >
 268+ 7968             >
 268+ 7968             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7968             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7968             >
 268+ 7968             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7968 A2 69                        dw      ZLESS                   // 0<
 270+ 796A                                                              // if
 271+ 796A 1C 64                        dw      ZBRANCH
 272+ 796C 04 00                        dw      Plus_Minus_Endif - $
 273+ 796E 27 6A                        dw          MINUS               //      minus
 274+ 7970              Plus_Minus_Endif:                               // endif
 275+ 7970 4B 69                        dw      EXIT                    // ;
 276+ 7972
 277+ 7972              //  ______________________________________________________________________
 278+ 7972              //
 279+ 7972              // d+-          d1 n -- d2
 280+ 7972              // leaves d1 with the sign of n as d2.
 281+ 7972                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 7972             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 7972             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 7972             >
 281+ 7972             >                // dummy db directives used to calculate length of namec
 281+ 7972 44 2B 2D    >                db      "D+-"
 281+ 7975             >len_NFA         defl    $ - temp_NFA
 281+ 7975             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 7972             >
 281+ 7972 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 7973 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 7976             >                org     $-1                 // alter last byte of Name just above to set
 281+ 7975 AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 7976             >
 281+ 7976 60 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7978             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7978 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 797B             >
 281+ 797B             >
 281+ 797B             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 797B             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 797B             >
 281+ 797B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 797B A2 69                        dw      ZLESS                   // 0<
 283+ 797D                                                              // if
 284+ 797D 1C 64                        dw      ZBRANCH
 285+ 797F 04 00                        dw      DPlus_Minus_Endif - $
 286+ 7981 3B 6A                        dw          DMINUS              //      dminus
 287+ 7983              DPlus_Minus_Endif:                              // endif
 288+ 7983 4B 69                        dw      EXIT                    // ;
 289+ 7985
 290+ 7985              //  ______________________________________________________________________
 291+ 7985              //
 292+ 7985              // abs          n1 -- n2
 293+ 7985                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 7985             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 7985             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 7985             >
 293+ 7985             >                // dummy db directives used to calculate length of namec
 293+ 7985 41 42 53    >                db      "ABS"
 293+ 7988             >len_NFA         defl    $ - temp_NFA
 293+ 7988             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 7985             >
 293+ 7985 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 7986 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 7989             >                org     $-1                 // alter last byte of Name just above to set
 293+ 7988 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 7989             >
 293+ 7989 72 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 798B             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 798B CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 798E             >
 293+ 798E             >
 293+ 798E             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 798E             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 798E             >
 293+ 798E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 798E 8E 6A                        dw      DUP                     // dup
 295+ 7990 65 79                        dw      PLUS_MINUS              // +-
 296+ 7992 4B 69                        dw      EXIT                    // ;
 297+ 7994
 298+ 7994              //  ______________________________________________________________________
 299+ 7994              //
 300+ 7994              // dabs         d1 -- d2
 301+ 7994                              Colon_Def DABS, "DABS", is_normal
 301+ 7994             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 7994             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 7994             >
 301+ 7994             >                // dummy db directives used to calculate length of namec
 301+ 7994 44 41 42 53 >                db      "DABS"
 301+ 7998             >len_NFA         defl    $ - temp_NFA
 301+ 7998             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 7994             >
 301+ 7994 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 7995 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 7999             >                org     $-1                 // alter last byte of Name just above to set
 301+ 7998 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 7999             >
 301+ 7999 85 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 799B             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 799B CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 799E             >
 301+ 799E             >
 301+ 799E             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 799E             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 799E             >
 301+ 799E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 799E 8E 6A                        dw      DUP                     // dup
 303+ 79A0 78 79                        dw      DPLUS_MINUS             // d+-
 304+ 79A2 4B 69                        dw      EXIT                    // ;
 305+ 79A4
 306+ 79A4              //  ______________________________________________________________________
 307+ 79A4              //
 308+ 79A4              // m*           n1 n2 -- d
 309+ 79A4              // multiply two integer giving a double
 310+ 79A4                              Colon_Def MMUL, "M*", is_normal
 310+ 79A4             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 79A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 79A4             >
 310+ 79A4             >                // dummy db directives used to calculate length of namec
 310+ 79A4 4D 2A       >                db      "M*"
 310+ 79A6             >len_NFA         defl    $ - temp_NFA
 310+ 79A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 79A4             >
 310+ 79A4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 79A5 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 79A7             >                org     $-1                 // alter last byte of Name just above to set
 310+ 79A6 AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 79A7             >
 310+ 79A7 94 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 79A9             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 79A9 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 79AC             >
 310+ 79AC             >
 310+ 79AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 79AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 79AC             >
 310+ 79AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 79AC E3 6A 0A 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 79B0 5C 69
 312+ 79B2 8B 79 83 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 79B6 8B 79 80 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79BA 6E 69 78 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79BE 4B 69                        dw      EXIT                    // ;
 316+ 79C0
 317+ 79C0              //  ______________________________________________________________________
 318+ 79C0              //
 319+ 79C0              // sm/rem       d n -- q r
 320+ 79C0              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 79C0              // the remainder has the sign of d.
 322+ 79C0                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 79C0             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 79C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 79C0             >
 322+ 79C0             >                // dummy db directives used to calculate length of namec
 322+ 79C0 53 4D 2F 52 >                db      "SM/REM"
 322+ 79C4 45 4D       >
 322+ 79C6             >len_NFA         defl    $ - temp_NFA
 322+ 79C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 79C0             >
 322+ 79C0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 79C1 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 79C5 45 4D       >
 322+ 79C7             >                org     $-1                 // alter last byte of Name just above to set
 322+ 79C6 CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 79C7             >
 322+ 79C7 A4 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 79C9             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 79C9 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 79CC             >
 322+ 79CC             >
 322+ 79CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 79CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 79CC             >
 322+ 79CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 79CC 53 6A 5C 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 79D0 5C 69
 324+ 79D2 9B 79 80 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 79D6 8B 79
 325+ 79D8 AF 68                        dw      UMDIVMOD                // um/mod
 326+ 79DA 6E 69                        dw      R_TO                    // r>
 327+ 79DC 80 69 0A 69                  dw      R_OP, XOR_OP            // r xor
 328+ 79E0 65 79 83 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 79E4 6E 69                        dw      R_TO                    // r>
 330+ 79E6 65 79 83 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 79EA 4B 69                        dw      EXIT                    // ;
 332+ 79EC
 333+ 79EC              //  ______________________________________________________________________
 334+ 79EC              //
 335+ 79EC              // fm/mod       d n -- q r
 336+ 79EC              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 79EC              // the remainder has the sign of d.
 338+ 79EC                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 79EC             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 79EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 79EC             >
 338+ 79EC             >                // dummy db directives used to calculate length of namec
 338+ 79EC 46 4D 2F 4D >                db      "FM/MOD"
 338+ 79F0 4F 44       >
 338+ 79F2             >len_NFA         defl    $ - temp_NFA
 338+ 79F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 79EC             >
 338+ 79EC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 79ED 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 79F1 4F 44       >
 338+ 79F3             >                org     $-1                 // alter last byte of Name just above to set
 338+ 79F2 C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 79F3             >
 338+ 79F3 C0 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 79F5             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 79F5 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 79F8             >
 338+ 79F8             >
 338+ 79F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 79F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 79F8             >
 338+ 79F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 79F8 8E 6A 5C 69                  dw      DUP, TO_R               // dup >r
 340+ 79FC C9 79                        dw      SMDIVM
 341+ 79FE 53 6A 8E 6A                  dw      OVER, DUP
 342+ 7A02 88 69 88 69                  dw      ZEQUAL, ZEQUAL
 343+ 7A06 83 6A A2 69                  dw      SWAP, ZLESS
 344+ 7A0A 80 69 A2 69                  dw      R_OP, ZLESS
 345+ 7A0E 0A 69 E9 68                  dw      XOR_OP, AND_OP
 346+ 7A12 1C 64                        dw      ZBRANCH
 347+ 7A14 10 00                        dw      Fm_Mod_Else - $
 348+ 7A16 ED 69                        dw          ONE_SUBTRACT
 349+ 7A18 83 6A 6E 69                  dw          SWAP, R_TO
 350+ 7A1C C6 69 83 6A                  dw          PLUS, SWAP
 351+ 7A20 07 64                        dw      BRANCH
 352+ 7A22 06 00                        dw      Fm_Mod_Endif - $
 353+ 7A24              Fm_Mod_Else:
 354+ 7A24 6E 69 61 6A                  dw          R_TO, DROP
 355+ 7A28              Fm_Mod_Endif:
 356+ 7A28 4B 69                        dw      EXIT
 357+ 7A2A              //              dw      TWO_DUP                 // 2dup
 358+ 7A2A              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 7A2A              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 7A2A              //              dw      UMDIVMOD                // um/mod
 361+ 7A2A              //              dw      SWAP                    // swap
 362+ 7A2A              //              dw      II, ZLESS               // i'
 363+ 7A2A              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 7A2A              //              dw      R_TO                    // r>
 365+ 7A2A              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 7A2A              //              dw      R_OP                    // r@
 367+ 7A2A              //              dw      ZLESS                   // i'
 368+ 7A2A              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 7A2A              //              dw      R_TO                    // r>
 370+ 7A2A              //              dw      PLUS_MINUS              // +- swap
 371+ 7A2A              //              dw      EXIT                    // ;
 372+ 7A2A
 373+ 7A2A              //  ______________________________________________________________________
 374+ 7A2A              //
 375+ 7A2A              // m/mod        d n -- q r
 376+ 7A2A              // multiply two integer giving a double
 377+ 7A2A                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 7A2A             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 7A2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 7A2A             >
 377+ 7A2A             >                // dummy db directives used to calculate length of namec
 377+ 7A2A 4D 2F 4D 4F >                db      "M/MOD"
 377+ 7A2E 44          >
 377+ 7A2F             >len_NFA         defl    $ - temp_NFA
 377+ 7A2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 7A2A             >
 377+ 7A2A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 7A2B 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 7A2F 44          >
 377+ 7A30             >                org     $-1                 // alter last byte of Name just above to set
 377+ 7A2F C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 7A30             >
 377+ 7A30 EC 79       >                dw      last_NFA            // Link to previous definition Name
 377+ 7A32             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 7A32 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A35             >
 377+ 7A35             >
 377+ 7A35             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A35             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A35             >
 377+ 7A35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A35 C9 79                        dw      SMDIVM
 379+ 7A37 4B 69                        dw      EXIT                    // ;
 380+ 7A39
 381+ 7A39              //  ______________________________________________________________________
 382+ 7A39              //
 383+ 7A39              // m/           d n -- q
 384+ 7A39              // multiply two integer giving a double
 385+ 7A39                              Colon_Def MDIV, "M/", is_normal
 385+ 7A39             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A39             >
 385+ 7A39             >                // dummy db directives used to calculate length of namec
 385+ 7A39 4D 2F       >                db      "M/"
 385+ 7A3B             >len_NFA         defl    $ - temp_NFA
 385+ 7A3B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A39             >
 385+ 7A39 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A3A 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A3C             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A3B AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A3C             >
 385+ 7A3C 2A 7A       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A3E             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A3E CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A41             >
 385+ 7A41             >
 385+ 7A41             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A41             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A41             >
 385+ 7A41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A41 32 7A 6A 6A                  dw      MDIVM, NIP
 387+ 7A45 4B 69                        dw      EXIT                    // ;
 388+ 7A47
 389+ 7A47              //  ______________________________________________________________________
 390+ 7A47              //
 391+ 7A47              // *            n1 n2 -- n3
 392+ 7A47              // multiply two integer
 393+ 7A47                              Colon_Def MUL, "*", is_normal
 393+ 7A47             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A47             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A47             >
 393+ 7A47             >                // dummy db directives used to calculate length of namec
 393+ 7A47 2A          >                db      "*"
 393+ 7A48             >len_NFA         defl    $ - temp_NFA
 393+ 7A48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A47             >
 393+ 7A47 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A48 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A49             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A48 AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A49             >
 393+ 7A49 39 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A4B             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A4B CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A4E             >
 393+ 7A4E             >
 393+ 7A4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A4E             >
 393+ 7A4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A4E A9 79 61 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A52 4B 69                        dw      EXIT                    // ;
 396+ 7A54
 397+ 7A54              //  ______________________________________________________________________
 398+ 7A54              //
 399+ 7A54              // /mod         n1 n2 -- n3 n4
 400+ 7A54              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A54              // The remainder has the sign of n1
 402+ 7A54                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A54             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A54             >
 402+ 7A54             >                // dummy db directives used to calculate length of namec
 402+ 7A54 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A58             >len_NFA         defl    $ - temp_NFA
 402+ 7A58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A54             >
 402+ 7A54 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A55 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A59             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A58 C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A59             >
 402+ 7A59 47 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A5B             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A5B CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A5E             >
 402+ 7A5E             >
 402+ 7A5E             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A5E             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A5E             >
 402+ 7A5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A5E 5C 69 AD 6E                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A62 6E 69
 404+ 7A64 32 7A                        dw      MDIVM                   // m/mod
 405+ 7A66 4B 69                        dw      EXIT                    // ;
 406+ 7A68
 407+ 7A68              //  ______________________________________________________________________
 408+ 7A68              //
 409+ 7A68              // /            n1 n2 -- n3
 410+ 7A68              // division
 411+ 7A68                              Colon_Def DIV, "/", is_normal
 411+ 7A68             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A68             >
 411+ 7A68             >                // dummy db directives used to calculate length of namec
 411+ 7A68 2F          >                db      "/"
 411+ 7A69             >len_NFA         defl    $ - temp_NFA
 411+ 7A69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A68             >
 411+ 7A68 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A69 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A6A             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A69 AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A6A             >
 411+ 7A6A 54 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A6C             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A6C CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A6F             >
 411+ 7A6F             >
 411+ 7A6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A6F             >
 411+ 7A6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A6F 5B 7A 6A 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A73 4B 69                        dw      EXIT                    // ;
 414+ 7A75
 415+ 7A75              //  ______________________________________________________________________
 416+ 7A75              //
 417+ 7A75              // mod          n1 n2 -- n3
 418+ 7A75                              Colon_Def MOD, "MOD", is_normal
 418+ 7A75             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A75             >
 418+ 7A75             >                // dummy db directives used to calculate length of namec
 418+ 7A75 4D 4F 44    >                db      "MOD"
 418+ 7A78             >len_NFA         defl    $ - temp_NFA
 418+ 7A78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A75             >
 418+ 7A75 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A76 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A79             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A78 C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A79             >
 418+ 7A79 68 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A7B             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A7B CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A7E             >
 418+ 7A7E             >
 418+ 7A7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A7E             >
 418+ 7A7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A7E 5B 7A 61 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7A82 4B 69                        dw      EXIT                    // ;
 421+ 7A84
 422+ 7A84              //  ______________________________________________________________________
 423+ 7A84              //
 424+ 7A84              // */mod        n1 n2 n3 -- n4 n5
 425+ 7A84              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7A84              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7A84              // avoids loss of precision
 428+ 7A84                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7A84             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7A84             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7A84             >
 428+ 7A84             >                // dummy db directives used to calculate length of namec
 428+ 7A84 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7A88 44          >
 428+ 7A89             >len_NFA         defl    $ - temp_NFA
 428+ 7A89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7A84             >
 428+ 7A84 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7A85 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7A89 44          >
 428+ 7A8A             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7A89 C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7A8A             >
 428+ 7A8A 75 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7A8C             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7A8C CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7A8F             >
 428+ 7A8F             >
 428+ 7A8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7A8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7A8F             >
 428+ 7A8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7A8F 5C 69 A9 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7A93 6E 69 32 7A                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7A97 4B 69                        dw      EXIT                    // ;
 432+ 7A99
 433+ 7A99              //  ______________________________________________________________________
 434+ 7A99              //
 435+ 7A99              // */          n1 n2 n3 -- n4
 436+ 7A99              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7A99                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7A99             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7A99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7A99             >
 437+ 7A99             >                // dummy db directives used to calculate length of namec
 437+ 7A99 2A 2F       >                db      "*/"
 437+ 7A9B             >len_NFA         defl    $ - temp_NFA
 437+ 7A9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7A99             >
 437+ 7A99 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7A9A 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7A9C             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7A9B AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7A9C             >
 437+ 7A9C 84 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7A9E             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7A9E CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7AA1             >
 437+ 7AA1             >
 437+ 7AA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7AA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7AA1             >
 437+ 7AA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7AA1 8C 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7AA3 6A 6A                        dw     NIP                      // nip
 440+ 7AA5 4B 69                        dw     EXIT                     // ;
 441+ 7AA7
 442+ 7AA7
 443+ 7AA7              //  ______________________________________________________________________
 444+ 7AA7              //
 445+ 7AA7              // m/mod        ud1 u2 -- u3 ud4
 446+ 7AA7              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7AA7              // All terms are unsigned.
 448+ 7AA7              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7AA7              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7AA7              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7AA7              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7AA7              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7AA7              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7AA7              //              dw      EXIT                    // ;
 455+ 7AA7
 456+ 7AA7              //  ______________________________________________________________________
 457+ 7AA7              //
 458+ 7AA7              // (line)       n1 n2 -- a b
 459+ 7AA7              // sends the line n1 of block n2 to the disk buffer.
 460+ 7AA7              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7AA7                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7AA7             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7AA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7AA7             >
 461+ 7AA7             >                // dummy db directives used to calculate length of namec
 461+ 7AA7 28 4C 49 4E >                db      "(LINE)"
 461+ 7AAB 45 29       >
 461+ 7AAD             >len_NFA         defl    $ - temp_NFA
 461+ 7AAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7AA7             >
 461+ 7AA7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7AA8 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7AAC 45 29       >
 461+ 7AAE             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7AAD A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7AAE             >
 461+ 7AAE 99 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7AB0             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7AB0 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7AB3             >
 461+ 7AB3             >
 461+ 7AB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7AB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7AB3             >
 461+ 7AB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7AB3 5C 69                        dw      TO_R                    // >r
 463+ 7AB5 0B 6C                        dw      NOOP                    // noop
 464+ 7AB7 9A 6C                        dw      CL                      // c/l
 465+ 7AB9 A7 6C 8C 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7ABD 6E 69                        dw      R_TO                    // r>
 467+ 7ABF B4 6C 4B 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7AC3 C6 69
 468+ 7AC5 74 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7AC7 C6 69                        dw      PLUS                    // +
 470+ 7AC9 0B 6C                        dw      NOOP                    // noop
 471+ 7ACB 9A 6C                        dw      CL                      // c/l
 472+ 7ACD 4B 69                        dw      EXIT                    // ;
 473+ 7ACF
 474+ 7ACF              //  ______________________________________________________________________
 475+ 7ACF              //
 476+ 7ACF              // .line        n1 n2 --
 477+ 7ACF              // Sends to output line  n1  of screen n2.
 478+ 7ACF                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7ACF             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7ACF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7ACF             >
 478+ 7ACF             >                // dummy db directives used to calculate length of namec
 478+ 7ACF 2E 4C 49 4E >                db      ".LINE"
 478+ 7AD3 45          >
 478+ 7AD4             >len_NFA         defl    $ - temp_NFA
 478+ 7AD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7ACF             >
 478+ 7ACF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7AD0 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7AD4 45          >
 478+ 7AD5             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7AD4 C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7AD5             >
 478+ 7AD5 A7 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7AD7             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7AD7 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7ADA             >
 478+ 7ADA             >
 478+ 7ADA             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7ADA             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7ADA             >
 478+ 7ADA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7ADA B0 7A 82 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7ADE 1C 72
 480+ 7AE0 4B 69                        dw      EXIT                    // ;
 481+ 7AE2
 482+ 7AE2              //  ______________________________________________________________________
 483+ 7AE2              //
 484+ 7AE2              // message       n1 n2 --
 485+ 7AE2              // prints error message to current channel.
 486+ 7AE2              // if WARNING is 0, prints "MSG#n".
 487+ 7AE2              // if WARNING is 1, prints line n of screen 4.
 488+ 7AE2              // if WARNING is -1, see ERROR
 489+ 7AE2              // value can be negative or beyond block 4.
 490+ 7AE2                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7AE2             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7AE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7AE2             >
 490+ 7AE2             >                // dummy db directives used to calculate length of namec
 490+ 7AE2 4D 45 53 53 >                db      "MESSAGE"
 490+ 7AE6 41 47 45    >
 490+ 7AE9             >len_NFA         defl    $ - temp_NFA
 490+ 7AE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7AE2             >
 490+ 7AE2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7AE3 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7AE7 41 47 45    >
 490+ 7AEA             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7AE9 C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7AEA             >
 490+ 7AEA CF 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7AEC             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7AEC CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7AEF             >
 490+ 7AEF             >
 490+ 7AEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7AEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7AEF             >
 490+ 7AEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7AEF 18 6D 0F 6B                  dw      WARNING, FETCH          // warning @
 492+ 7AF3                                                              // if
 493+ 7AF3 1C 64                        dw      ZBRANCH
 494+ 7AF5 18 00                        dw      Message_Else - $
 495+ 7AF7 A5 63 04 00                  dw          LIT, 4              //      4
 496+ 7AFB 9F 6D 0F 6B                  dw          OFFSET, FETCH       //      offset @
 497+ 7AFF B4 6C 6C 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7B03 BF 6E
 498+ 7B05 D7 7A                        dw          DOT_LINE            //      .line
 499+ 7B07 75 6F                        dw          SPACE               //      space
 500+ 7B09                                                              // else
 501+ 7B09
 502+ 7B09 07 64                        dw      BRANCH
 503+ 7B0B 0B 00                        dw      Message_ENdif - $
 504+ 7B0D              Message_Else:
 505+ 7B0D 38 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7B0F 04 6D 73 67                  db          4, "msg#"
 506+ 7B13 23
 507+ 7B14 50 83                        dw          DOT                 //      .  ( forward )
 508+ 7B16              Message_ENdif:                                  // endif
 509+ 7B16 4B 69                        dw      EXIT                    // ;
 510+ 7B18
 511+ 7B18
 512+ 7B18              //  ______________________________________________________________________
 513+ 7B18              //
 514+ 7B18              // device
 515+ 7B18                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7B18             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7B18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7B18             >
 515+ 7B18             >                // dummy db directives used to calculate length of namec
 515+ 7B18 44 45 56 49 >                db      "DEVICE"
 515+ 7B1C 43 45       >
 515+ 7B1E             >len_NFA         defl    $ - temp_NFA
 515+ 7B1E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7B18             >
 515+ 7B18 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7B19 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7B1D 43 45       >
 515+ 7B1F             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7B1E C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7B1F             >
 515+ 7B1F E2 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7B21             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7B21 CD 3F 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7B24             >
 515+ 7B24             >
 515+ 7B24             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7B24             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7B24             >
 515+ 7B24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7B24 02 00       >                dw      2
 516+ 7B26
 517+ 7B26              //  ______________________________________________________________________
 518+ 7B26
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
 113  7B26                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
   1+ 7B26              //  ______________________________________________________________________
   2+ 7B26              //
   3+ 7B26              //  next-opt.asm
   4+ 7B26              //
   5+ 7B26              //  ZX Spectrum Next - peculiar definitions
   6+ 7B26              //  ______________________________________________________________________
   7+ 7B26
   8+ 7B26              //  ______________________________________________________________________
   9+ 7B26              //
  10+ 7B26              // reg@         n -- b
  11+ 7B26              // read Next REGister n giving byte b
  12+ 7B26              //
  13+ 7B26              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 7B26              //              dw      LIT, $243B
  15+ 7B26              //              dw      PSTORE
  16+ 7B26              //              dw      LIT, $253B
  17+ 7B26              //              dw      PFETCH
  18+ 7B26              //              dw      EXIT
  19+ 7B26                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 7B26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ 7B26             >
  19+ 7B26             >                // dummy db directives used to calculate length of namec
  19+ 7B26 52 45 47 40 >                db      "REG@"
  19+ 7B2A             >len_NFA         defl    $ - temp_NFA
  19+ 7B2A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ 7B26             >
  19+ 7B26 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ 7B27 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ 7B2B             >                org     $-1                 // alter last byte of Name just above to set
  19+ 7B2A C0          >                db      {b $} | END_BIT     // msb as name end
  19+ 7B2B             >
  19+ 7B2B 18 7B       >                dw      last_NFA            // Link to previous definition Name
  19+ 7B2D             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 7B2D ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 7B2D ~           >
  19+ 7B2D ~           >
  19+ 7B2D             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 7B2D             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 7B2D             >
  19+ 7B2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 7B2D D9                           exx
  21+ 7B2E 01 3B 24                     ld      bc, $243B
  22+ 7B31 E1                           pop     hl
  23+ 7B32 ED 69                        out     (c), l
  24+ 7B34 04                           inc     b
  25+ 7B35 ED 68                        in      l, (c)
  26+ 7B37 E5                           push    hl
  27+ 7B38 D9                           exx
  28+ 7B39                              next
  28+ 7B39 DD E9       >                jp      (ix)
  29+ 7B3B
  30+ 7B3B
  31+ 7B3B              //  ______________________________________________________________________
  32+ 7B3B              //
  33+ 7B3B              // reg!         b n --
  34+ 7B3B              // write value b to Next REGister n
  35+ 7B3B              //
  36+ 7B3B              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 7B3B              //              dw      LIT, $243B
  38+ 7B3B              //              dw      PSTORE
  39+ 7B3B              //              dw      LIT, $253B
  40+ 7B3B              //              dw      PSTORE
  41+ 7B3B              //              dw      EXIT
  42+ 7B3B                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 7B3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ 7B3B             >
  42+ 7B3B             >                // dummy db directives used to calculate length of namec
  42+ 7B3B 52 45 47 21 >                db      "REG!"
  42+ 7B3F             >len_NFA         defl    $ - temp_NFA
  42+ 7B3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ 7B3B             >
  42+ 7B3B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ 7B3C 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ 7B40             >                org     $-1                 // alter last byte of Name just above to set
  42+ 7B3F A1          >                db      {b $} | END_BIT     // msb as name end
  42+ 7B40             >
  42+ 7B40 26 7B       >                dw      last_NFA            // Link to previous definition Name
  42+ 7B42             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 7B42 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 7B42 ~           >
  42+ 7B42 ~           >
  42+ 7B42             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 7B42             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 7B42             >
  42+ 7B42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 7B42 D9                           exx
  44+ 7B43 01 3B 24                     ld      bc, $243B
  45+ 7B46 E1                           pop     hl
  46+ 7B47 ED 69                        out     (c), l
  47+ 7B49 04                           inc     b
  48+ 7B4A E1                           pop     hl
  49+ 7B4B ED 69                        out     (c), l
  50+ 7B4D D9                           exx
  51+ 7B4E                              next
  51+ 7B4E DD E9       >                jp      (ix)
  52+ 7B50
  53+ 7B50
  54+ 7B50              //  ______________________________________________________________________
  55+ 7B50              //
  56+ 7B50              // mmu7@        -- n
  57+ 7B50              // query current page in MMU7 8K-RAM : 0 and 223
  58+ 7B50
  59+ 7B50                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  59+ 7B50             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  59+ 7B50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59+ 7B50             >
  59+ 7B50             >                // dummy db directives used to calculate length of namec
  59+ 7B50 4D 4D 55 37 >                db      "MMU7@"
  59+ 7B54 40          >
  59+ 7B55             >len_NFA         defl    $ - temp_NFA
  59+ 7B55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59+ 7B50             >
  59+ 7B50 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59+ 7B51 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  59+ 7B55 40          >
  59+ 7B56             >                org     $-1                 // alter last byte of Name just above to set
  59+ 7B55 C0          >                db      {b $} | END_BIT     // msb as name end
  59+ 7B56             >
  59+ 7B56 3B 7B       >                dw      last_NFA            // Link to previous definition Name
  59+ 7B58             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  59+ 7B58 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  59+ 7B5B             >
  59+ 7B5B             >
  59+ 7B5B             >                endif           ; ok        // for other definitions it "points" the correct handler
  59+ 7B5B             >                // Use of "; ok" to suppress "warning[fwdref]"
  59+ 7B5B             >
  59+ 7B5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60+ 7B5B A5 63 57 00                  dw      LIT, 87, REG_FETCH
  60+ 7B5F 2D 7B
  61+ 7B61 4B 69                        dw      EXIT
  62+ 7B63
  63+ 7B63              //  ______________________________________________________________________
  64+ 7B63              //
  65+ 7B63              // mmu7!        n --
  66+ 7B63              // set MMU7 8K-RAM page to n given between 0 and 223
  67+ 7B63              // optimized version that uses NEXTREG n,A Z80n op-code.
  68+ 7B63
  69+ 7B63                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  69+ 7B63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ 7B63             >
  69+ 7B63             >                // dummy db directives used to calculate length of namec
  69+ 7B63 4D 4D 55 37 >                db      "MMU7!"
  69+ 7B67 21          >
  69+ 7B68             >len_NFA         defl    $ - temp_NFA
  69+ 7B68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ 7B63             >
  69+ 7B63 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ 7B64 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  69+ 7B68 21          >
  69+ 7B69             >                org     $-1                 // alter last byte of Name just above to set
  69+ 7B68 A1          >                db      {b $} | END_BIT     // msb as name end
  69+ 7B69             >
  69+ 7B69 50 7B       >                dw      last_NFA            // Link to previous definition Name
  69+ 7B6B             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 7B6B ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 7B6B ~           >
  69+ 7B6B ~           >
  69+ 7B6B             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 7B6B             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 7B6B             >
  69+ 7B6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 7B6B E1                           pop     hl
  71+ 7B6C 7D                           ld      a, l
  72+ 7B6D ED 92 57                     nextreg 87, a
  73+ 7B70
  74+ 7B70                              next
  74+ 7B70 DD E9       >                jp      (ix)
  75+ 7B72
  76+ 7B72              //  ______________________________________________________________________
  77+ 7B72              //
  78+ 7B72              // >far         ha -- a n
  79+ 7B72              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  80+ 7B72              // take lower bits of H and L as an offset from E000h
  81+ 7B72              // then return address  a  between E000h-FFFFh
  82+ 7B72              // and page number n  between 64-71 (40h-47h)
  83+ 7B72              // For example, in hex:
  84+ 7B72              //   0000 >FAR  gives  40.E000
  85+ 7B72              //   1FFF >FAR  gives  40.FFFF
  86+ 7B72              //   2000 >FAR  gives  41.E000
  87+ 7B72              //   3FFF >FAR  gives  41.FFFF
  88+ 7B72              //   EFFF >FAR  gives  47.EFFF
  89+ 7B72              //   FFFF >FAR  gives  47.FFFF
  90+ 7B72              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  91+ 7B72              //                pop     de
  92+ 7B72              //                ld      a, d
  93+ 7B72              //                and     $E0
  94+ 7B72              //                rlca
  95+ 7B72              //                rlca
  96+ 7B72              //                rlca
  97+ 7B72              //                add     $40
  98+ 7B72              //                ld      l, a
  99+ 7B72              //                ld      h, 0
 100+ 7B72              //                ld      a, d
 101+ 7B72              //                or      $E0
 102+ 7B72              //                ld      d, a
 103+ 7B72              //                push    hl
 104+ 7B72              //                push    de
 105+ 7B72              //                next
 106+ 7B72
 107+ 7B72              //  ______________________________________________________________________
 108+ 7B72              //
 109+ 7B72              // <far         a n  -- ha
 110+ 7B72              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 111+ 7B72              // reverse of >FAR: encodes a FAR address compressing
 112+ 7B72              // to bits 765 of H, lower bits of HL address offset from E000h
 113+ 7B72              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 114+ 7B72              //                pop     de                  // page number in e
 115+ 7B72              //                pop     hl                  // address in hl
 116+ 7B72              //                ld      a, e
 117+ 7B72              //                sub     $40                 // reduced to 0-7
 118+ 7B72              //                rrca
 119+ 7B72              //                rrca
 120+ 7B72              //                rrca
 121+ 7B72              //                ld      d, a                // save to d bits 765
 122+ 7B72              //                ld      a, h                // drops
 123+ 7B72              //                and     $1F
 124+ 7B72              //                or      d
 125+ 7B72              //                ld      h, a
 126+ 7B72              //
 127+ 7B72              //                psh1
 128+ 7B72
 129+ 7B72              //  ______________________________________________________________________
 130+ 7B72              //
 131+ 7B72              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 132+ 7B72              // NextZXOS call wrapper.
 133+ 7B72              //  n1 = hl register parameter value
 134+ 7B72              //  n2 = de register parameter value
 135+ 7B72              //  n3 = bc register parameter value
 136+ 7B72              //  n4 =  a register parameter value
 137+ 7B72              //   a = routine address in ROM 3
 138+ 7B72              // ----
 139+ 7B72              //  n5 = hl returned value
 140+ 7B72              //  n6 = de returned value
 141+ 7B72              //  n7 = bc returned value
 142+ 7B72              //  n8 =  a returned value
 143+ 7B72              //   f
 144+ 7B72                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 144+ 7B72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7B72             >
 144+ 7B72             >                // dummy db directives used to calculate length of namec
 144+ 7B72 4D 5F 50 33 >                db      "M_P3DOS"
 144+ 7B76 44 4F 53    >
 144+ 7B79             >len_NFA         defl    $ - temp_NFA
 144+ 7B79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7B72             >
 144+ 7B72 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7B73 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 144+ 7B77 44 4F 53    >
 144+ 7B7A             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7B79 D3          >                db      {b $} | END_BIT     // msb as name end
 144+ 7B7A             >
 144+ 7B7A 63 7B       >                dw      last_NFA            // Link to previous definition Name
 144+ 7B7C             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7B7C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 144+ 7B7C ~           >
 144+ 7B7C ~           >
 144+ 7B7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7B7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7B7C             >
 144+ 7B7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7B7C D1                           pop     de                  // dos call entry address in de
 146+ 7B7D E1                           pop     hl                  // a register
 147+ 7B7E 7D                           ld      a, l
 148+ 7B7F D9                           exx
 149+ 7B80 C1                           pop     bc
 150+ 7B81 D1                           pop     de
 151+ 7B82 E1                           pop     hl
 152+ 7B83 D9                           exx
 153+ 7B84
 154+ 7B84 C5                           push    bc
 155+ 7B85 DD E5                        push    ix
 156+ 7B87
 157+ 7B87              //              ld      (SP_Saved), sp
 158+ 7B87              //              ld      sp, Cold_origin - 5
 159+ 7B87 0E 07                        ld      c, 7                // use 7 RAM Bank
 160+ 7B89
 161+ 7B89 CF                           rst     08
 162+ 7B8A 94                           db      $94
 163+ 7B8B
 164+ 7B8B              //              ld      sp, (SP_Saved)
 165+ 7B8B              //              push    ix
 166+ 7B8B              //              pop     hl
 167+ 7B8B              //              ld      (IX_Echo), hl
 168+ 7B8B DD 22 90 63                  ld      (IX_Echo), ix
 169+ 7B8F              //              nop
 170+ 7B8F DD E1                        pop     ix
 171+ 7B91 E3                           ex      (sp), hl            // hl argument and retrieve bc
 172+ 7B92 D5                           push    de
 173+ 7B93 C5                           push    bc
 174+ 7B94 4D                           ld      c, l
 175+ 7B95 44                           ld      b, h
 176+ 7B96
 177+ 7B96 26 00                        ld      h, 0
 178+ 7B98 6F                           ld      l, a
 179+ 7B99 E5                           push    hl
 180+ 7B9A ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 181+ 7B9C 23                           inc     hl                  //  0 for OK ; 1 for ko
 182+ 7B9D
 183+ 7B9D                              psh1
 183+ 7B9D E5          >                push    hl
 183+ 7B9E DD E9       >                jp      (ix)
 184+ 7BA0
 185+ 7BA0              //  ______________________________________________________________________
 186+ 7BA0              //
 187+ 7BA0              // blk-fh
 188+ 7BA0                              Variable_Def BLK_FH,   "BLK-FH",   1
 188+ 7BA0             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 188+ 7BA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 7BA0             >
 188+ 7BA0             >                // dummy db directives used to calculate length of namec
 188+ 7BA0 42 4C 4B 2D >                db      "BLK-FH"
 188+ 7BA4 46 48       >
 188+ 7BA6             >len_NFA         defl    $ - temp_NFA
 188+ 7BA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 7BA0             >
 188+ 7BA0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 7BA1 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 188+ 7BA5 46 48       >
 188+ 7BA7             >                org     $-1                 // alter last byte of Name just above to set
 188+ 7BA6 C8          >                db      {b $} | END_BIT     // msb as name end
 188+ 7BA7             >
 188+ 7BA7 72 7B       >                dw      last_NFA            // Link to previous definition Name
 188+ 7BA9             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 7BA9 CD 3F 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 188+ 7BAC             >
 188+ 7BAC             >
 188+ 7BAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 7BAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 7BAC             >
 188+ 7BAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 7BAC 01 00       >                dw      1
 189+ 7BAE
 190+ 7BAE                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 190+ 7BAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 7BAE             >
 190+ 7BAE             >                // dummy db directives used to calculate length of namec
 190+ 7BAE 42 4C 4B 2D >                db      "BLK-FNAME"
 190+ 7BB2 46 4E 41 4D >
 190+ 7BB6 45          >
 190+ 7BB7             >len_NFA         defl    $ - temp_NFA
 190+ 7BB7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 7BAE             >
 190+ 7BAE 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 7BAF 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 190+ 7BB3 46 4E 41 4D >
 190+ 7BB7 45          >
 190+ 7BB8             >                org     $-1                 // alter last byte of Name just above to set
 190+ 7BB7 C5          >                db      {b $} | END_BIT     // msb as name end
 190+ 7BB8             >
 190+ 7BB8 A0 7B       >                dw      last_NFA            // Link to previous definition Name
 190+ 7BBA             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 7BBA CD B1 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 190+ 7BBD             >
 190+ 7BBD             >
 190+ 7BBD             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 7BBD             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 7BBD             >
 190+ 7BBD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 7BBD 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 191+ 7BC1 6F 63 6B 73
 191+ 7BC5 2D 36 34 2E
 191+ 7BC9 62 69 6E 00
 192+ 7BCD 00 00 00...                  ds      24
 193+ 7BE5
 194+ 7BE5              //  ______________________________________________________________________
 195+ 7BE5              //
 196+ 7BE5              // blk-seek     n --
 197+ 7BE5              // seek block n  within blocks!.bin  file
 198+ 7BE5                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 198+ 7BE5             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 198+ 7BE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 7BE5             >
 198+ 7BE5             >                // dummy db directives used to calculate length of namec
 198+ 7BE5 42 4C 4B 2D >                db      "BLK-SEEK"
 198+ 7BE9 53 45 45 4B >
 198+ 7BED             >len_NFA         defl    $ - temp_NFA
 198+ 7BED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 7BE5             >
 198+ 7BE5 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 7BE6 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 198+ 7BEA 53 45 45 4B >
 198+ 7BEE             >                org     $-1                 // alter last byte of Name just above to set
 198+ 7BED CB          >                db      {b $} | END_BIT     // msb as name end
 198+ 7BEE             >
 198+ 7BEE AE 7B       >                dw      last_NFA            // Link to previous definition Name
 198+ 7BF0             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 7BF0 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 198+ 7BF3             >
 198+ 7BF3             >
 198+ 7BF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 7BF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 7BF3             >
 198+ 7BF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 7BF3 A7 6C A9 79                  dw  BBUF, MMUL
 200+ 7BF7 A9 7B 0F 6B                  dw  BLK_FH, FETCH
 201+ 7BFB 6E 67                        dw  F_SEEK
 202+ 7BFD A5 63 2D 00                  dw  LIT, $2D, QERROR
 202+ 7C01 3F 70
 203+ 7C03 4B 69                        dw  EXIT
 204+ 7C05
 205+ 7C05              //  ______________________________________________________________________
 206+ 7C05              //
 207+ 7C05              // blk-read     n --
 208+ 7C05              // seek block n  within blocks!.bin  file
 209+ 7C05                              Colon_Def BLK_READ, "BLK-READ", is_normal
 209+ 7C05             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 209+ 7C05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 209+ 7C05             >
 209+ 7C05             >                // dummy db directives used to calculate length of namec
 209+ 7C05 42 4C 4B 2D >                db      "BLK-READ"
 209+ 7C09 52 45 41 44 >
 209+ 7C0D             >len_NFA         defl    $ - temp_NFA
 209+ 7C0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 209+ 7C05             >
 209+ 7C05 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 209+ 7C06 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 209+ 7C0A 52 45 41 44 >
 209+ 7C0E             >                org     $-1                 // alter last byte of Name just above to set
 209+ 7C0D C4          >                db      {b $} | END_BIT     // msb as name end
 209+ 7C0E             >
 209+ 7C0E E5 7B       >                dw      last_NFA            // Link to previous definition Name
 209+ 7C10             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 209+ 7C10 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 209+ 7C13             >
 209+ 7C13             >
 209+ 7C13             >                endif           ; ok        // for other definitions it "points" the correct handler
 209+ 7C13             >                // Use of "; ok" to suppress "warning[fwdref]"
 209+ 7C13             >
 209+ 7C13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 210+ 7C13 F0 7B                        dw  BLK_SEEK
 211+ 7C15 A7 6C                        dw  BBUF
 212+ 7C17 A9 7B 0F 6B                  dw  BLK_FH, FETCH
 213+ 7C1B D2 67                        dw  F_READ
 214+ 7C1D A5 63 2E 00                  dw  LIT, $2E, QERROR
 214+ 7C21 3F 70
 215+ 7C23 61 6A                        dw  DROP
 216+ 7C25 4B 69                        dw  EXIT
 217+ 7C27
 218+ 7C27              //  ______________________________________________________________________
 219+ 7C27              //
 220+ 7C27              // blk-write     n --
 221+ 7C27              // seek block n  within blocks!.bin  file
 222+ 7C27                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 222+ 7C27             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 222+ 7C27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 7C27             >
 222+ 7C27             >                // dummy db directives used to calculate length of namec
 222+ 7C27 42 4C 4B 2D >                db      "BLK-WRITE"
 222+ 7C2B 57 52 49 54 >
 222+ 7C2F 45          >
 222+ 7C30             >len_NFA         defl    $ - temp_NFA
 222+ 7C30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 7C27             >
 222+ 7C27 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 7C28 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 222+ 7C2C 57 52 49 54 >
 222+ 7C30 45          >
 222+ 7C31             >                org     $-1                 // alter last byte of Name just above to set
 222+ 7C30 C5          >                db      {b $} | END_BIT     // msb as name end
 222+ 7C31             >
 222+ 7C31 05 7C       >                dw      last_NFA            // Link to previous definition Name
 222+ 7C33             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 7C33 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 7C36             >
 222+ 7C36             >
 222+ 7C36             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 7C36             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 7C36             >
 222+ 7C36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 7C36 F0 7B                        dw  BLK_SEEK
 224+ 7C38 A7 6C                        dw  BBUF
 225+ 7C3A A9 7B 0F 6B                  dw  BLK_FH, FETCH
 226+ 7C3E EF 67                        dw  F_WRITE
 227+ 7C40 A5 63 2F 00                  dw  LIT, $2F, QERROR
 227+ 7C44 3F 70
 228+ 7C46 61 6A                        dw  DROP
 229+ 7C48 4B 69                        dw  EXIT
 230+ 7C4A
 231+ 7C4A              //  ______________________________________________________________________
 232+ 7C4A              //
 233+ 7C4A              // blk-init     n --
 234+ 7C4A              // seek block n  within blocks!.bin  file
 235+ 7C4A                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 235+ 7C4A             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 235+ 7C4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 235+ 7C4A             >
 235+ 7C4A             >                // dummy db directives used to calculate length of namec
 235+ 7C4A 42 4C 4B 2D >                db      "BLK-INIT"
 235+ 7C4E 49 4E 49 54 >
 235+ 7C52             >len_NFA         defl    $ - temp_NFA
 235+ 7C52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 235+ 7C4A             >
 235+ 7C4A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 235+ 7C4B 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 235+ 7C4F 49 4E 49 54 >
 235+ 7C53             >                org     $-1                 // alter last byte of Name just above to set
 235+ 7C52 D4          >                db      {b $} | END_BIT     // msb as name end
 235+ 7C53             >
 235+ 7C53 27 7C       >                dw      last_NFA            // Link to previous definition Name
 235+ 7C55             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 235+ 7C55 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 235+ 7C58             >
 235+ 7C58             >
 235+ 7C58             >                endif           ; ok        // for other definitions it "points" the correct handler
 235+ 7C58             >                // Use of "; ok" to suppress "warning[fwdref]"
 235+ 7C58             >
 235+ 7C58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 7C58 A9 7B 0F 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 236+ 7C5C 8F 67 61 6A
 237+ 7C60 BA 7B E3 69                  dw  BLK_FNAME, ONE_PLUS
 238+ 7C64 6A 6E 7B 6C                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 238+ 7C68 04 68
 239+ 7C6A A5 63 2C 00                  dw  LIT, $2C, QERROR
 239+ 7C6E 3F 70
 240+ 7C70 A9 7B 1A 6B                  dw  BLK_FH, STORE
 241+ 7C74 4B 69                        dw  EXIT
 242+ 7C76
 243+ 7C76              //  ______________________________________________________________________
 244+ 7C76              //
 245+ 7C76              // #sec
 246+ 7C76              // number of 512-Byte "sectors" available on thie sysstem.
 247+ 7C76              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 248+ 7C76
 249+ 7C76                              Constant_Def NSEC , "#SEC", 32767
 249+ 7C76             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 249+ 7C76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 7C76             >
 249+ 7C76             >                // dummy db directives used to calculate length of namec
 249+ 7C76 23 53 45 43 >                db      "#SEC"
 249+ 7C7A             >len_NFA         defl    $ - temp_NFA
 249+ 7C7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 7C76             >
 249+ 7C76 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 7C77 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 249+ 7C7B             >                org     $-1                 // alter last byte of Name just above to set
 249+ 7C7A C3          >                db      {b $} | END_BIT     // msb as name end
 249+ 7C7B             >
 249+ 7C7B 4A 7C       >                dw      last_NFA            // Link to previous definition Name
 249+ 7C7D             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 7C7D CD 24 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 249+ 7C80             >
 249+ 7C80             >
 249+ 7C80             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 7C80             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 7C80             >
 249+ 7C80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 7C80 FF 7F       >                dw      32767
 250+ 7C82
 251+ 7C82              //  ______________________________________________________________________
 252+ 7C82
 253+ 7C82
 254+ 7C82
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
 114  7C82                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
   1+ 7C82              //  ______________________________________________________________________
   2+ 7C82              //
   3+ 7C82              //  L3.asm
   4+ 7C82              //
   5+ 7C82              //  Continuation of L2.asm
   6+ 7C82              //  I/O Block definitions
   7+ 7C82              //  ______________________________________________________________________
   8+ 7C82
   9+ 7C82
  10+ 7C82              //  ______________________________________________________________________
  11+ 7C82              //
  12+ 7C82              // r/w          a n f --
  13+ 7C82              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C82                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C82             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C82             >
  14+ 7C82             >                // dummy db directives used to calculate length of namec
  14+ 7C82 52 2F 57    >                db      "R/W"
  14+ 7C85             >len_NFA         defl    $ - temp_NFA
  14+ 7C85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C82             >
  14+ 7C82 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C83 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C86             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C85 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C86             >
  14+ 7C86 76 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C88             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C88 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C8B             >
  14+ 7C8B             >
  14+ 7C8B             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C8B             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C8B             >
  14+ 7C8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C8B 5C 69                        dw      TO_R                    // >r
  16+ 7C8D ED 69                        dw      ONE_SUBTRACT            // 1-
  17+ 7C8F 8E 6A A2 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7C93 53 6A 7D 7C                  dw      OVER, NSEC              // over #sec
  19+ 7C97 ED 69 00 6F                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7C9B F9 68                        dw      OR_OP                   // or
  21+ 7C9D A5 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7CA1 3F 70
  22+ 7CA3 6E 69                        dw      R_TO                    // r>
  23+ 7CA5                                                              // if
  24+ 7CA5 1C 64                        dw      ZBRANCH
  25+ 7CA7 08 00                        dw      Read_Write_Else - $
  26+ 7CA9 10 7C                        dw          BLK_READ            //      blk-read
  27+ 7CAB 07 64                        dw      BRANCH
  28+ 7CAD 04 00                        dw      Read_Write_Endif - $
  29+ 7CAF              Read_Write_Else:                                // else
  30+ 7CAF 33 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CB1              Read_Write_Endif:                               // endif
  32+ 7CB1 4B 69                        dw      EXIT                    // ;
  33+ 7CB3
  34+ 7CB3
  35+ 7CB3              //  ______________________________________________________________________
  36+ 7CB3              //
  37+ 7CB3              // +buf        a1 -- a2 f
  38+ 7CB3              // advences to next buffer, cyclically rotating along them
  39+ 7CB3                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CB3             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CB3             >
  39+ 7CB3             >                // dummy db directives used to calculate length of namec
  39+ 7CB3 2B 42 55 46 >                db      "+BUF"
  39+ 7CB7             >len_NFA         defl    $ - temp_NFA
  39+ 7CB7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CB3             >
  39+ 7CB3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CB4 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CB8             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CB7 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CB8             >
  39+ 7CB8 82 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CBA             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CBA CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CBD             >
  39+ 7CBD             >
  39+ 7CBD             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CBD             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CBD             >
  39+ 7CBD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CBD A5 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CC1 C6 69
  41+ 7CC3 8E 6A 54 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CC7 0F 6B
  42+ 7CC9 CB 6E                        dw      EQUALS                  // =
  43+ 7CCB                                                              // if
  44+ 7CCB 1C 64                        dw      ZBRANCH
  45+ 7CCD 08 00                        dw      PBuf_Endif - $
  46+ 7CCF 61 6A                        dw          DROP                //      drop
  47+ 7CD1 48 6D 0F 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CD5              PBuf_Endif:                                     // endif
  49+ 7CD5 8E 6A 18 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CD9 0F 6B
  50+ 7CDB BF 6E                        dw      SUBTRACT                // -
  51+ 7CDD 4B 69                        dw      EXIT                    // ;
  52+ 7CDF
  53+ 7CDF              //  ______________________________________________________________________
  54+ 7CDF              //
  55+ 7CDF              // update       --
  56+ 7CDF              // mark the last used block to be written to disk
  57+ 7CDF                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CDF             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CDF             >
  57+ 7CDF             >                // dummy db directives used to calculate length of namec
  57+ 7CDF 55 50 44 41 >                db      "UPDATE"
  57+ 7CE3 54 45       >
  57+ 7CE5             >len_NFA         defl    $ - temp_NFA
  57+ 7CE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CDF             >
  57+ 7CDF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CE0 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CE4 54 45       >
  57+ 7CE6             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CE5 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CE6             >
  57+ 7CE6 B3 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CE8             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CE8 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CEB             >
  57+ 7CEB             >
  57+ 7CEB             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CEB             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CEB             >
  57+ 7CEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CEB 18 6E 0F 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7CEF 0F 6B
  59+ 7CF1 A5 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7CF5 F9 68
  60+ 7CF7 18 6E 0F 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7CFB 1A 6B
  61+ 7CFD 4B 69                        dw      EXIT                    // ;
  62+ 7CFF
  63+ 7CFF
  64+ 7CFF              //  ______________________________________________________________________
  65+ 7CFF              //
  66+ 7CFF              // empty-buffers --
  67+ 7CFF                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7CFF             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7CFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7CFF             >
  67+ 7CFF             >                // dummy db directives used to calculate length of namec
  67+ 7CFF 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7D03 59 2D 42 55 >
  67+ 7D07 46 46 45 52 >
  67+ 7D0B 53          >
  67+ 7D0C             >len_NFA         defl    $ - temp_NFA
  67+ 7D0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7CFF             >
  67+ 7CFF 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7D00 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7D04 59 2D 42 55 >
  67+ 7D08 46 46 45 52 >
  67+ 7D0C 53          >
  67+ 7D0D             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D0C D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D0D             >
  67+ 7D0D DF 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D0F             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D0F CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D12             >
  67+ 7D12             >
  67+ 7D12             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D12             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D12             >
  67+ 7D12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D12 48 6D 0F 6B                  dw      FIRST, FETCH            // first @
  69+ 7D16 54 6D 0F 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D1A 53 6A BF 6E                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D1E 9B 73
  71+ 7D20 4B 69                        dw      EXIT                    // ;
  72+ 7D22
  73+ 7D22              //  ______________________________________________________________________
  74+ 7D22              //
  75+ 7D22              // buffer       n -- a
  76+ 7D22              // read block n and gives the address to a buffer
  77+ 7D22              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D22              // disk before reading the block n.
  79+ 7D22
  80+ 7D22                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D22             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D22             >
  80+ 7D22             >                // dummy db directives used to calculate length of namec
  80+ 7D22 42 55 46 46 >                db      "BUFFER"
  80+ 7D26 45 52       >
  80+ 7D28             >len_NFA         defl    $ - temp_NFA
  80+ 7D28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D22             >
  80+ 7D22 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D23 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D27 45 52       >
  80+ 7D29             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D28 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D29             >
  80+ 7D29 FF 7C       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D2B             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D2B CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D2E             >
  80+ 7D2E             >
  80+ 7D2E             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D2E             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D2E             >
  80+ 7D2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D2E 0D 6E 0F 6B                  dw      USE, FETCH              // use @
  82+ 7D32 8E 6A 5C 69                  dw      DUP, TO_R               // dup >r
  83+ 7D36                                                              // begin
  84+ 7D36              Buffer_Begin:
  85+ 7D36 BA 7C                        dw          PBUF                //      +buf
  86+ 7D38                                                              // until
  87+ 7D38 1C 64                        dw      ZBRANCH
  88+ 7D3A FC FF                        dw      Buffer_Begin - $
  89+ 7D3C 0D 6E 1A 6B                  dw      USE, STORE              // use !
  90+ 7D40 80 69 0F 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D44 A2 69
  91+ 7D46                                                              // if
  92+ 7D46 1C 64                        dw      ZBRANCH
  93+ 7D48 14 00                        dw      Buffer_Endif - $
  94+ 7D4A 80 69 05 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D4E 80 69 0F 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D52 A5 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D56 E9 68                        dw          AND_OP              //      and
  98+ 7D58 60 6C 88 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D5C              Buffer_Endif:                                   // endif
 100+ 7D5C 80 69 1A 6B                  dw      R_OP, STORE             // r !
 101+ 7D60 80 69 18 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D64 1A 6B
 102+ 7D66 6E 69 05 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D6A 4B 69                        dw      EXIT                    // ;
 104+ 7D6C
 105+ 7D6C              //  ______________________________________________________________________
 106+ 7D6C              //
 107+ 7D6C              // block        n -- a
 108+ 7D6C              // Leaves the buffer address that contains the block n.
 109+ 7D6C              // If the block is not already present, it will be loaded from disk
 110+ 7D6C              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D6C              // disk before reading the block n.
 112+ 7D6C              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D6C
 114+ 7D6C                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D6C             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D6C             >
 114+ 7D6C             >                // dummy db directives used to calculate length of namec
 114+ 7D6C 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D70 4B          >
 114+ 7D71             >len_NFA         defl    $ - temp_NFA
 114+ 7D71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D6C             >
 114+ 7D6C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D6D 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D71 4B          >
 114+ 7D72             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D71 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D72             >
 114+ 7D72 22 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D74             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D74 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D77             >
 114+ 7D77             >
 114+ 7D77             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D77             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D77             >
 114+ 7D77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D77 9F 6D 0F 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D7B C6 69 5C 69                  dw      PLUS, TO_R              // + >r
 117+ 7D7F 18 6E 0F 6B                  dw      PREV, FETCH             // prev @
 118+ 7D83 8E 6A 0F 6B                  dw      DUP, FETCH              // dup @
 119+ 7D87 80 69 BF 6E                  dw      R_OP, SUBTRACT          // r -
 120+ 7D8B 8E 6A C6 69                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7D8F                                                              // if
 122+ 7D8F 1C 64                        dw        ZBRANCH
 123+ 7D91 32 00                        dw        Block_Endif_1 - $
 124+ 7D93              Block_Begin:                                    //      begin
 125+ 7D93 BA 7C 88 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7D97                                                              //          if
 127+ 7D97 1C 64                        dw          ZBRANCH
 128+ 7D99 12 00                        dw          Block_Endif_2 - $
 129+ 7D9B 61 6A                        dw              DROP            //              drop
 130+ 7D9D 80 69 2B 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7DA1 8E 6A                        dw              DUP             //              dup
 132+ 7DA3 80 69 69 6C                  dw              R_OP, ONE       //              r 1
 133+ 7DA7 88 7C                        dw              READ_WRITE      //              r/w
 134+ 7DA9 1B 6A                        dw              TWO_MINUS       //              2-
 135+ 7DAB              Block_Endif_2:                                  //          endif
 136+ 7DAB 8E 6A 0F 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DAF 80 69
 137+ 7DB1 BF 6E 8E 6A                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DB5 C6 69 88 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DB9                                                              //      until
 140+ 7DB9 1C 64                        dw        ZBRANCH
 141+ 7DBB D8 FF                        dw        Block_Begin - $
 142+ 7DBD 8E 6A 18 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DC1 1A 6B
 143+ 7DC3              Block_Endif_1:                                  // endif
 144+ 7DC3 6E 69 61 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DC7 05 6A
 145+ 7DC9 4B 69                        dw      EXIT                    // ;
 146+ 7DCB
 147+ 7DCB              //  ______________________________________________________________________
 148+ 7DCB              //
 149+ 7DCB              // #buff        -- n
 150+ 7DCB              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DCB                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DCB             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DCB             >
 151+ 7DCB             >                // dummy db directives used to calculate length of namec
 151+ 7DCB 23 42 55 46 >                db      "#BUFF"
 151+ 7DCF 46          >
 151+ 7DD0             >len_NFA         defl    $ - temp_NFA
 151+ 7DD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DCB             >
 151+ 7DCB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DCC 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DD0 46          >
 151+ 7DD1             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DD0 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DD1             >
 151+ 7DD1 6C 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DD3             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DD3 CD 24 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DD6             >
 151+ 7DD6             >
 151+ 7DD6             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DD6             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DD6             >
 151+ 7DD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DD6 07 00       >                dw      7
 152+ 7DD8
 153+ 7DD8              //  ______________________________________________________________________
 154+ 7DD8              //
 155+ 7DD8              // flush        --
 156+ 7DD8                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DD8             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DD8             >
 156+ 7DD8             >                // dummy db directives used to calculate length of namec
 156+ 7DD8 46 4C 55 53 >                db      "FLUSH"
 156+ 7DDC 48          >
 156+ 7DDD             >len_NFA         defl    $ - temp_NFA
 156+ 7DDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DD8             >
 156+ 7DD8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DD9 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DDD 48          >
 156+ 7DDE             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DDD C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DDE             >
 156+ 7DDE CB 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DE0             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DE0 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DE3             >
 156+ 7DE3             >
 156+ 7DE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DE3             >
 156+ 7DE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DE3 D3 7D E3 69                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DE7 60 6C
 158+ 7DE9              Flush_Do:                                       // do
 159+ 7DE9 70 64                        dw      C_DO
 160+ 7DEB 60 6C 2B 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7DEF 61 6A
 161+ 7DF1                                                              // loop
 162+ 7DF1 F8 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7DF5 A9 7B 0F 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7DF9 A1 67 61 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7DFD 4B 69                        dw      EXIT                    // exit
 166+ 7DFF
 167+ 7DFF              //  ______________________________________________________________________
 168+ 7DFF              //
 169+ 7DFF              // f_getline    a m fh -- n
 170+ 7DFF              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7DFF              // Address a is left for subsequent processing
 172+ 7DFF              // and n as the actual number of byte read, that is the length of line
 173+ 7DFF                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7DFF             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7DFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7DFF             >
 173+ 7DFF             >                // dummy db directives used to calculate length of namec
 173+ 7DFF 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7E03 54 4C 49 4E >
 173+ 7E07 45          >
 173+ 7E08             >len_NFA         defl    $ - temp_NFA
 173+ 7E08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7DFF             >
 173+ 7DFF 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7E00 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7E04 54 4C 49 4E >
 173+ 7E08 45          >
 173+ 7E09             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7E08 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7E09             >
 173+ 7E09 D8 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E0B             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E0B CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E0E             >
 173+ 7E0E             >
 173+ 7E0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E0E             >
 173+ 7E0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E0E 5C 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E10 75 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E12 80 69 B6 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E16 A5 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E1A 3F 70
 178+ 7E1C
 179+ 7E1C D3 6A 53 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E20 E3 69 83 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E24
 182+ 7E24 80 69 D2 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E28 A5 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E2C 3F 70
 184+ 7E2E                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E2E 1C 64                        dw      ZBRANCH
 186+ 7E30 3C 00                        dw      FGetline_Else - $
 187+ 7E32 A5 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E36 58 65
 188+ 7E38 61 6A 6A 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E3C 83 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E3E A5 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E42 58 65
 191+ 7E44 61 6A 6A 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E48 99 6A 0F 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E4C 8E 6A 48 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E50 1A 6B
 194+ 7E52 8E 6A 5C 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E56 D3 6A 6E 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E5A 60 6C D1 69                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E5E 6E 69 6E 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E62 A5 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E66 3F 70
 199+ 7E68                                                              // else
 200+ 7E68 07 64                        dw      BRANCH
 201+ 7E6A 0C 00                        dw      FGetline_Endif - $
 202+ 7E6C              FGetline_Else:
 203+ 7E6C 6E 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E6E D3 6A C7 6A                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E72 61 6A 60 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E76              FGetline_Endif:                                 // endif
 207+ 7E76 5C 69 8E 6A                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E7A 8E 6A
 208+ 7E7C E3 69 83 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E80 80 69 51 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7E84 E3 6A C6 69                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7E88 60 6C 83 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7E8C 10 6A 1A 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7E90 80 69 C6 69                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7E94 ED 69
 214+ 7E96 83 6A 80 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7E9A BF 6E
 215+ 7E9C AD 73                        dw      BLANKS                  // blanks
 216+ 7E9E 6E 69                        dw      R_TO                    // r>                   ( n )
 217+ 7EA0 4B 69                        dw      EXIT                    // ;
 218+ 7EA2
 219+ 7EA2              //  ______________________________________________________________________
 220+ 7EA2              //
 221+ 7EA2              // f_include    fh --
 222+ 7EA2              // Given a filehandle includes the source from file
 223+ 7EA2                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7EA2             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7EA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7EA2             >
 223+ 7EA2             >                // dummy db directives used to calculate length of namec
 223+ 7EA2 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7EA6 43 4C 55 44 >
 223+ 7EAA 45          >
 223+ 7EAB             >len_NFA         defl    $ - temp_NFA
 223+ 7EAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7EA2             >
 223+ 7EA2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7EA3 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7EA7 43 4C 55 44 >
 223+ 7EAB 45          >
 223+ 7EAC             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7EAB C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7EAC             >
 223+ 7EAC FF 7D       >                dw      last_NFA            // Link to previous definition Name
 223+ 7EAE             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7EAE CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7EB1             >
 223+ 7EB1             >
 223+ 7EB1             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7EB1             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7EB1             >
 223+ 7EB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7EB1 74 6D 0F 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7EB5 5C 69
 225+ 7EB7 7E 6D 0F 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7EBB 5C 69
 226+ 7EBD 3D 6E 0F 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7EC1 5C 69
 227+ 7EC3 80 69                        dw      R_OP                    // r
 228+ 7EC5                                                              // if
 229+ 7EC5 1C 64                        dw      ZBRANCH
 230+ 7EC7 20 00                        dw      FInclude_Else_1 - $
 231+ 7EC9 80 69 B6 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7ECD A5 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7ED1 3F 70
 233+ 7ED3 7E 6D 0F 6B                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7ED7 1B 6A                        dw          TWO_MINUS
 235+ 7ED9 48 6E 0F 6B                  dw          SPAN, FETCH         //      span @ -
 236+ 7EDD BF 6E                        dw          SUBTRACT
 237+ 7EDF AD 6E D1 69                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7EE3                                                              // else
 239+ 7EE3 07 64                        dw      BRANCH
 240+ 7EE5 06 00                        dw      FInclude_Endif_1 - $
 241+ 7EE7              FInclude_Else_1:
 242+ 7EE7 60 6C 60 6C                  dw          ZERO, ZERO          //      0 0
 243+ 7EEB                                                              // endif
 244+ 7EEB              FInclude_Endif_1:
 245+ 7EEB 5C 69 5C 69                  dw      TO_R, TO_R              // >r >r
 246+ 7EEF 3D 6E 1A 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7EF3              FInclude_Begin:                                 // begin
 248+ 7EF3 69 6C 74 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7EF7 A7 6C
 249+ 7EF9 E3 6A AD 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 250+ 7EFD 83 6A E3 69                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7F01 83 6A 10 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7F05 3D 6E 0F 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7F09 0B 7E                        dw          F_GETLINE           //      f_getline
 254+ 7F0B                                                              // while
 255+ 7F0B 1C 64                        dw      ZBRANCH
 256+ 7F0D 14 00                        dw      FInclude_Repeat - $
 257+ 7F0F 69 6C 74 6D                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7F13 1A 6B
 258+ 7F15 60 6C 7E 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7F19 1A 6B
 259+ 7F1B A2 77                        dw          INTERPRET           //      interpret
 260+ 7F1D 07 64                        dw      BRANCH
 261+ 7F1F D4 FF                        dw      FInclude_Begin - $
 262+ 7F21              FInclude_Repeat:                                // repeat
 263+ 7F21 3D 6E 0F 6B                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F25 60 6C 3D 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F29 1A 6B
 265+ 7F2B 8F 67                        dw      F_CLOSE                 // f_close
 266+ 7F2D A5 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F31 3F 70
 267+ 7F33 6E 69 6E 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F37 6E 69
 268+ 7F39 8E 6A 3D 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F3D 1A 6B
 269+ 7F3F                                                              // if
 270+ 7F3F 1C 64                        dw      ZBRANCH
 271+ 7F41 12 00                        dw      FInclude_Else_2 - $
 272+ 7F43 3D 6E 0F 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F47 6E 67                        dw          F_SEEK              //      f_seek
 274+ 7F49 A5 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F4D 3F 70
 275+ 7F4F                                                              // else
 276+ 7F4F 07 64                        dw      BRANCH
 277+ 7F51 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F53              FInclude_Else_2:
 279+ 7F53 C7 6A                        dw          TWO_DROP            //      2drop
 280+ 7F55              FInclude_Endif_2:                               // endif
 281+ 7F55 6E 69 7E 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F59 1A 6B
 282+ 7F5B 6E 69 74 6D                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F5F 1A 6B
 283+ 7F61 4B 69                        dw      EXIT                    // ;
 284+ 7F63
 285+ 7F63              //  ______________________________________________________________________
 286+ 7F63              //
 287+ 7F63              // open<         -- fh
 288+ 7F63              // Open the following filename and return it file-handle
 289+ 7F63              // Used in the form OPEN CCCC
 290+ 7F63                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F63             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F63             >
 290+ 7F63             >                // dummy db directives used to calculate length of namec
 290+ 7F63 4F 50 45 4E >                db      "OPEN<"
 290+ 7F67 3C          >
 290+ 7F68             >len_NFA         defl    $ - temp_NFA
 290+ 7F68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F63             >
 290+ 7F63 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F64 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F68 3C          >
 290+ 7F69             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F68 BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F69             >
 290+ 7F69 A2 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F6B             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F6B CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F6E             >
 290+ 7F6E             >
 290+ 7F6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F6E             >
 290+ 7F6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F6E 8F 6C                        dw      BL
 292+ 7F70 E8 73 F4 71                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F74 53 6A
 293+ 7F76 C6 69 60 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F7A 83 6A 1A 6B
 294+ 7F7E D4 73 69 6C                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7F82 04 68
 295+ 7F84 A5 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7F88 3F 70                        dw      QERROR                  // ?error
 297+ 7F8A 4B 69                        dw      EXIT                    // ;
 298+ 7F8C
 299+ 7F8C              //  ______________________________________________________________________
 300+ 7F8C              //
 301+ 7F8C              // include      -- cccc
 302+ 7F8C              // Include the following filename
 303+ 7F8C                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7F8C             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7F8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7F8C             >
 303+ 7F8C             >                // dummy db directives used to calculate length of namec
 303+ 7F8C 49 4E 43 4C >                db      "INCLUDE"
 303+ 7F90 55 44 45    >
 303+ 7F93             >len_NFA         defl    $ - temp_NFA
 303+ 7F93             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7F8C             >
 303+ 7F8C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7F8D 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7F91 55 44 45    >
 303+ 7F94             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7F93 C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7F94             >
 303+ 7F94 63 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7F96             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7F96 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7F99             >
 303+ 7F99             >
 303+ 7F99             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7F99             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7F99             >
 303+ 7F99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7F99 6B 7F                        dw      OPEN_FH                 // open
 305+ 7F9B 8E 6A AE 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7F9F 8F 67 61 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7FA3 4B 69                        dw      EXIT                    // ;
 308+ 7FA5
 309+ 7FA5              //  ______________________________________________________________________
 310+ 7FA5              //
 311+ 7FA5              // needs
 312+ 7FA5              // check for cccc exists in vocabulary
 313+ 7FA5              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7FA5
 315+ 7FA5              // temp filename cccc.f as counted string zero-padded
 316+ 7FA5                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7FA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7FA5             >
 316+ 7FA5             >                // dummy db directives used to calculate length of namec
 316+ 7FA5 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7FA9 53 2D 57    >
 316+ 7FAC             >len_NFA         defl    $ - temp_NFA
 316+ 7FAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7FA5             >
 316+ 7FA5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7FA6 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7FAA 53 2D 57    >
 316+ 7FAD             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7FAC D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7FAD             >
 316+ 7FAD 8C 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7FAF             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7FAF CD B1 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7FB2             >
 316+ 7FB2             >
 316+ 7FB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7FB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7FB2             >
 316+ 7FB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7FB2 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FD5              // temp complete path+filename
 319+ 7FD5                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FD5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FD5             >
 319+ 7FD5             >                // dummy db directives used to calculate length of namec
 319+ 7FD5 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FD9 53 2D 46 4E >
 319+ 7FDD             >len_NFA         defl    $ - temp_NFA
 319+ 7FDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FD5             >
 319+ 7FD5 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FD6 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FDA 53 2D 46 4E >
 319+ 7FDE             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FDD CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FDE             >
 319+ 7FDE A5 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FE0             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FE0 CD B1 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7FE3             >
 319+ 7FE3             >
 319+ 7FE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7FE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7FE3             >
 319+ 7FE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7FE3 00 00 00...                  ds      40
 321+ 800B              // constant path
 322+ 800B                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 800B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 800B             >
 322+ 800B             >                // dummy db directives used to calculate length of namec
 322+ 800B 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 800F 53 2D 49 4E >
 322+ 8013 43          >
 322+ 8014             >len_NFA         defl    $ - temp_NFA
 322+ 8014             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 800B             >
 322+ 800B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 800C 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 8010 53 2D 49 4E >
 322+ 8014 43          >
 322+ 8015             >                org     $-1                 // alter last byte of Name just above to set
 322+ 8014 C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 8015             >
 322+ 8015 D5 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 8017             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 8017 CD B1 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 801A             >
 322+ 801A             >
 322+ 801A             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 801A             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 801A             >
 322+ 801A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 801A 04 69 6E 63                  db      4, "inc/", 0
 323+ 801E 2F 00
 324+ 8020                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 8020             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 8020             >
 324+ 8020             >                // dummy db directives used to calculate length of namec
 324+ 8020 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 8024 53 2D 4C 49 >
 324+ 8028 42          >
 324+ 8029             >len_NFA         defl    $ - temp_NFA
 324+ 8029             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 8020             >
 324+ 8020 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 8021 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 8025 53 2D 4C 49 >
 324+ 8029 42          >
 324+ 802A             >                org     $-1                 // alter last byte of Name just above to set
 324+ 8029 C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 802A             >
 324+ 802A 0B 80       >                dw      last_NFA            // Link to previous definition Name
 324+ 802C             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 802C CD B1 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 802F             >
 324+ 802F             >
 324+ 802F             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 802F             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 802F             >
 324+ 802F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 802F 04 6C 69 62                  db      4, "lib/", 0
 325+ 8033 2F 00
 326+ 8035
 327+ 8035              // Concatenate path at a and filename and include it
 328+ 8035              // No error is issued if filename doesn't exist.
 329+ 8035                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 8035             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 8035             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 8035             >
 329+ 8035             >                // dummy db directives used to calculate length of namec
 329+ 8035 4E 45 45 44 >                db      "NEEDS/"
 329+ 8039 53 2F       >
 329+ 803B             >len_NFA         defl    $ - temp_NFA
 329+ 803B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 8035             >
 329+ 8035 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 8036 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 803A 53 2F       >
 329+ 803C             >                org     $-1                 // alter last byte of Name just above to set
 329+ 803B AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 803C             >
 329+ 803C 20 80       >                dw      last_NFA            // Link to previous definition Name
 329+ 803E             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 803E CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 8041             >
 329+ 8041             >
 329+ 8041             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 8041             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 8041             >
 329+ 8041             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 8041 F4 71 75 6A                  dw      COUNT, TUCK             // n a n
 331+ 8045 E0 7F 83 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 8049 51 68
 332+ 804B E0 7F C6 69                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 804F AF 7F E3 69                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 8053 83 6A
 334+ 8055 A5 63 23 00                  dw      LIT, 35
 335+ 8059 51 68                        dw      CMOVE
 336+ 805B E0 7F                        dw      NEEDS_FN
 337+ 805D D4 73 69 6C                  dw      PAD, ONE, F_OPEN
 337+ 8061 04 68
 338+ 8063 88 69                        dw      ZEQUAL
 339+ 8065 1C 64                        dw      ZBRANCH
 340+ 8067 08 00                        dw      Needs_1 - $
 341+ 8069 AE 7E                        dw          F_INCLUDE
 342+ 806B 07 64                        dw      BRANCH
 343+ 806D 04 00                        dw      Needs_2 - $
 344+ 806F              Needs_1:
 345+ 806F              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 806F              //              dw          LIT, 43, MESSAGE
 347+ 806F 61 6A                        dw          DROP
 348+ 8071              Needs_2:
 349+ 8071 4B 69                        dw      EXIT                    // ;
 350+ 8073
 351+ 8073
 352+ 8073                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 352+ 8073             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 8073             >
 352+ 8073             >                // dummy db directives used to calculate length of namec
 352+ 8073 4E 44 4F 4D >                db      "NDOM"
 352+ 8077             >len_NFA         defl    $ - temp_NFA
 352+ 8077             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 8073             >
 352+ 8073 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 8074 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 352+ 8078             >                org     $-1                 // alter last byte of Name just above to set
 352+ 8077 CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 8078             >
 352+ 8078 35 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 807A             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 807A CD B1 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 807D             >
 352+ 807D             >
 352+ 807D             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 807D             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 807D             >
 352+ 807D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 807D              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 354+ 807D 3A 3F 2F 2A                  db ':?/*|\<>"'
 354+ 8081 7C 5C 3C 3E
 354+ 8085 22
 355+ 8086
 356+ 8086                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 356+ 8086             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 356+ 8086             >
 356+ 8086             >                // dummy db directives used to calculate length of namec
 356+ 8086 4E 43 44 4D >                db      "NCDM"
 356+ 808A             >len_NFA         defl    $ - temp_NFA
 356+ 808A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 356+ 8086             >
 356+ 8086 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 356+ 8087 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 356+ 808B             >                org     $-1                 // alter last byte of Name just above to set
 356+ 808A CD          >                db      {b $} | END_BIT     // msb as name end
 356+ 808B             >
 356+ 808B 73 80       >                dw      last_NFA            // Link to previous definition Name
 356+ 808D             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 356+ 808D CD B1 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 356+ 8090             >
 356+ 8090             >
 356+ 8090             >                endif           ; ok        // for other definitions it "points" the correct handler
 356+ 8090             >                // Use of "; ok" to suppress "warning[fwdref]"
 356+ 8090             >
 356+ 8090             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 357+ 8090              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 358+ 8090 5F 5E 25 26                  db '_^%&$_{}~'
 358+ 8094 24 5F 7B 7D
 358+ 8098 7E
 359+ 8099
 360+ 8099
 361+ 8099              // Replace illegal character in filename using the map here above
 362+ 8099              // at the moment we need only  "
 363+ 8099                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 363+ 8099             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 363+ 8099             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 363+ 8099             >
 363+ 8099             >                // dummy db directives used to calculate length of namec
 363+ 8099 4E 45 45 44 >                db      "NEEDS-CH"
 363+ 809D 53 2D 43 48 >
 363+ 80A1             >len_NFA         defl    $ - temp_NFA
 363+ 80A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 363+ 8099             >
 363+ 8099 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 363+ 809A 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 363+ 809E 53 2D 43 48 >
 363+ 80A2             >                org     $-1                 // alter last byte of Name just above to set
 363+ 80A1 C8          >                db      {b $} | END_BIT     // msb as name end
 363+ 80A2             >
 363+ 80A2 86 80       >                dw      last_NFA            // Link to previous definition Name
 363+ 80A4             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 363+ 80A4 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 363+ 80A7             >
 363+ 80A7             >
 363+ 80A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 363+ 80A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 363+ 80A7             >
 363+ 80A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 364+ 80A7 F4 71 0A 72                  dw      COUNT, BOUNDS
 365+ 80AB 70 64                        dw      C_DO
 366+ 80AD              Needs_3:
 367+ 80AD 8D 80 7A 80                  dw          NCDM, NDOM, LIT, 9
 367+ 80B1 A5 63 09 00
 368+ 80B5 78 64 26 6B                  dw          I, CFETCH
 369+ 80B9 90 65                        dw          C_MAP
 370+ 80BB 78 64 32 6B                  dw          I, CSTORE
 371+ 80BF              Needs_4:
 372+ 80BF F8 63                        dw      C_LOOP
 373+ 80C1 EC FF                        dw      Needs_3 - $
 374+ 80C3 4B 69                        dw      EXIT
 375+ 80C5
 376+ 80C5
 377+ 80C5              // include  "path/cccc.f" if cccc is not defined
 378+ 80C5              // filename cccc.f is temporary stored at NEEDS-W
 379+ 80C5                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 379+ 80C5             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 379+ 80C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ 80C5             >
 379+ 80C5             >                // dummy db directives used to calculate length of namec
 379+ 80C5 4E 45 45 44 >                db      "NEEDS-F"
 379+ 80C9 53 2D 46    >
 379+ 80CC             >len_NFA         defl    $ - temp_NFA
 379+ 80CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ 80C5             >
 379+ 80C5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ 80C6 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 379+ 80CA 53 2D 46    >
 379+ 80CD             >                org     $-1                 // alter last byte of Name just above to set
 379+ 80CC C6          >                db      {b $} | END_BIT     // msb as name end
 379+ 80CD             >
 379+ 80CD 99 80       >                dw      last_NFA            // Link to previous definition Name
 379+ 80CF             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 80CF CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 379+ 80D2             >
 379+ 80D2             >
 379+ 80D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 80D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 80D2             >
 379+ 80D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 80D2 A4 75                        dw      LFIND
 381+ 80D4 1C 64                        dw      ZBRANCH
 382+ 80D6 0A 00                        dw      Needs_5 - $
 383+ 80D8
 384+ 80D8 61 6A C7 6A                  dw          DROP, TWO_DROP
 385+ 80DC 07 64                        dw      BRANCH
 386+ 80DE 2C 00                        dw      Needs_6 - $
 387+ 80E0              Needs_5:
 388+ 80E0 AF 7F                        dw          NEEDS_W
 389+ 80E2 A5 63 23 00                  dw          LIT, 35
 390+ 80E6 9B 73                        dw          ERASE                   // a
 391+ 80E8 6A 6E 26 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 391+ 80EC E3 69
 392+ 80EE 6A 6E 53 6A                  dw          HERE, OVER              // a n here n
 393+ 80F2 AF 7F 83 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 393+ 80F6 51 68
 394+ 80F8 AF 7F A4 80                  dw          NEEDS_W, NEEDS_CHECK
 395+ 80FC AF 7F C6 69                  dw          NEEDS_W, PLUS           // a a1+1
 396+ 8100 A5 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 397+ 8104 83 6A 1A 6B                  dw          SWAP, STORE             // a
 398+ 8108 3E 80                        dw          NEEDS_SLASH
 399+ 810A              Needs_6:
 400+ 810A 4B 69                        dw      EXIT
 401+ 810C
 402+ 810C
 403+ 810C              // check for cccc exists in vocabulary
 404+ 810C              // if it doesn't then  INCLUDE  inc/cccc.F
 405+ 810C              // search in inc subdirectory
 406+ 810C                              Colon_Def NEEDS, "NEEDS", is_normal
 406+ 810C             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 406+ 810C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ 810C             >
 406+ 810C             >                // dummy db directives used to calculate length of namec
 406+ 810C 4E 45 45 44 >                db      "NEEDS"
 406+ 8110 53          >
 406+ 8111             >len_NFA         defl    $ - temp_NFA
 406+ 8111             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ 810C             >
 406+ 810C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ 810D 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 406+ 8111 53          >
 406+ 8112             >                org     $-1                 // alter last byte of Name just above to set
 406+ 8111 D3          >                db      {b $} | END_BIT     // msb as name end
 406+ 8112             >
 406+ 8112 C5 80       >                dw      last_NFA            // Link to previous definition Name
 406+ 8114             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 8114 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 406+ 8117             >
 406+ 8117             >
 406+ 8117             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 8117             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 8117             >
 406+ 8117             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 8117 7E 6D 0F 6B                  dw      TO_IN, FETCH
 408+ 811B 8E 6A                        dw      DUP
 409+ 811D 17 80 CF 80                  dw      NEEDS_INC, NEEDS_PATH
 410+ 8121 7E 6D 1A 6B                  dw      TO_IN, STORE
 411+ 8125 2C 80 CF 80                  dw      NEEDS_LIB, NEEDS_PATH
 412+ 8129 7E 6D 1A 6B                  dw      TO_IN, STORE
 413+ 812D A4 75                        dw      LFIND
 414+ 812F 1C 64                        dw      ZBRANCH
 415+ 8131 08 00                        dw      Needs_10 - $
 416+ 8133 C7 6A                        dw          TWO_DROP
 417+ 8135 07 64                        dw      BRANCH
 418+ 8137 10 00                        dw      Needs_11 - $
 419+ 8139              Needs_10:
 420+ 8139 AF 7F F4 71                  dw      NEEDS_W, COUNT, TYPE, SPACE
 420+ 813D 1C 72 75 6F
 421+ 8141 A5 63 2B 00                  dw      LIT, 43, MESSAGE
 421+ 8145 EC 7A
 422+ 8147              Needs_11:
 423+ 8147 4B 69                        dw      EXIT
 424+ 8149
 425+ 8149
 426+ 8149              //  ______________________________________________________________________
 427+ 8149              //
 428+ 8149              // load+        n --
 429+ 8149                              Colon_Def LOAD_P, "LOAD+", is_normal
 429+ 8149             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 429+ 8149             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 429+ 8149             >
 429+ 8149             >                // dummy db directives used to calculate length of namec
 429+ 8149 4C 4F 41 44 >                db      "LOAD+"
 429+ 814D 2B          >
 429+ 814E             >len_NFA         defl    $ - temp_NFA
 429+ 814E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 429+ 8149             >
 429+ 8149 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 429+ 814A 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 429+ 814E 2B          >
 429+ 814F             >                org     $-1                 // alter last byte of Name just above to set
 429+ 814E AB          >                db      {b $} | END_BIT     // msb as name end
 429+ 814F             >
 429+ 814F 0C 81       >                dw      last_NFA            // Link to previous definition Name
 429+ 8151             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 429+ 8151 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 429+ 8154             >
 429+ 8154             >
 429+ 8154             >                endif           ; ok        // for other definitions it "points" the correct handler
 429+ 8154             >                // Use of "; ok" to suppress "warning[fwdref]"
 429+ 8154             >
 429+ 8154             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 430+ 8154 74 6D 0F 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 430+ 8158 5C 69
 431+ 815A 7E 6D 0F 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 431+ 815E 5C 69
 432+ 8160
 433+ 8160 60 6C 7E 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 433+ 8164 1A 6B
 434+ 8166 B4 6C 4B 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 434+ 816A 74 6D 1A 6B
 435+ 816E A2 77                        dw      INTERPRET               // interpret
 436+ 8170
 437+ 8170 6E 69 7E 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 437+ 8174 1A 6B
 438+ 8176 6E 69 74 6D                  dw      R_TO, BLK, STORE        // r> blk !
 438+ 817A 1A 6B
 439+ 817C 4B 69                        dw      EXIT                    // ;
 440+ 817E
 441+ 817E              //  ______________________________________________________________________
 442+ 817E              //
 443+ 817E              // -->          --
 444+ 817E                              Colon_Def LOAD_NEXT, "-->", is_immediate
 444+ 817E             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 444+ 817E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 444+ 817E             >
 444+ 817E             >                // dummy db directives used to calculate length of namec
 444+ 817E 2D 2D 3E    >                db      "-->"
 444+ 8181             >len_NFA         defl    $ - temp_NFA
 444+ 8181             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 444+ 817E             >
 444+ 817E C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 444+ 817F 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 444+ 8182             >                org     $-1                 // alter last byte of Name just above to set
 444+ 8181 BE          >                db      {b $} | END_BIT     // msb as name end
 444+ 8182             >
 444+ 8182 49 81       >                dw      last_NFA            // Link to previous definition Name
 444+ 8184             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 444+ 8184 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 444+ 8187             >
 444+ 8187             >
 444+ 8187             >                endif           ; ok        // for other definitions it "points" the correct handler
 444+ 8187             >                // Use of "; ok" to suppress "warning[fwdref]"
 444+ 8187             >
 444+ 8187             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 445+ 8187 BD 70                        dw      QLOADING                // ?loading
 446+ 8189 60 6C 7E 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 446+ 818D 1A 6B
 447+ 818F B4 6C                        dw      BSCR                    // b/scr
 448+ 8191 74 6D 0F 6B                  dw      BLK, FETCH              // blk @
 449+ 8195 53 6A                        dw      OVER                    // over
 450+ 8197 7B 7A                        dw      MOD                     // mod
 451+ 8199 BF 6E                        dw      SUBTRACT                // -
 452+ 819B 74 6D F0 6A                  dw      BLK, PLUSSTORE          // +!
 453+ 819F 4B 69                        dw      EXIT                    // ;
 454+ 81A1
 455+ 81A1              //  ______________________________________________________________________
 456+ 81A1              //
 457+ 81A1              // '            -- xt
 458+ 81A1                              Colon_Def TICK, "'", is_normal
 458+ 81A1             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 458+ 81A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 458+ 81A1             >
 458+ 81A1             >                // dummy db directives used to calculate length of namec
 458+ 81A1 27          >                db      "'"
 458+ 81A2             >len_NFA         defl    $ - temp_NFA
 458+ 81A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 458+ 81A1             >
 458+ 81A1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 458+ 81A2 27          >                db      "'"               // name string in 7-bit ascii, but
 458+ 81A3             >                org     $-1                 // alter last byte of Name just above to set
 458+ 81A2 A7          >                db      {b $} | END_BIT     // msb as name end
 458+ 81A3             >
 458+ 81A3 7E 81       >                dw      last_NFA            // Link to previous definition Name
 458+ 81A5             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 458+ 81A5 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 458+ 81A8             >
 458+ 81A8             >
 458+ 81A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 458+ 81A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 458+ 81A8             >
 458+ 81A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 459+ 81A8 A4 75                        dw      LFIND                   // -find
 460+ 81AA 88 69                        dw      ZEQUAL                  // 0=
 461+ 81AC 60 6C 3F 70                  dw      ZERO, QERROR            // 0 ?error
 462+ 81B0 61 6A                        dw      DROP                    // drop
 463+ 81B2 4B 69                        dw      EXIT                    // ;
 464+ 81B4
 465+ 81B4              //  ______________________________________________________________________
 466+ 81B4              //
 467+ 81B4              // forget       -- cccc
 468+ 81B4                              Colon_Def FORGET, "FORGET", is_normal
 468+ 81B4             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 468+ 81B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 468+ 81B4             >
 468+ 81B4             >                // dummy db directives used to calculate length of namec
 468+ 81B4 46 4F 52 47 >                db      "FORGET"
 468+ 81B8 45 54       >
 468+ 81BA             >len_NFA         defl    $ - temp_NFA
 468+ 81BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 468+ 81B4             >
 468+ 81B4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 468+ 81B5 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 468+ 81B9 45 54       >
 468+ 81BB             >                org     $-1                 // alter last byte of Name just above to set
 468+ 81BA D4          >                db      {b $} | END_BIT     // msb as name end
 468+ 81BB             >
 468+ 81BB A1 81       >                dw      last_NFA            // Link to previous definition Name
 468+ 81BD             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 468+ 81BD CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 468+ 81C0             >
 468+ 81C0             >
 468+ 81C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 468+ 81C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 468+ 81C0             >
 468+ 81C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 469+ 81C0 BB 6D 0F 6B                  dw      CURRENT, FETCH          // current @
 470+ 81C4 AD 6D 0F 6B                  dw      CONTEXT, FETCH          // context @
 471+ 81C8 BF 6E A5 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 471+ 81CC 17 00 3F 70
 472+ 81D0 A5 81 0A 70                  dw      TICK, TO_BODY           // ' >body
 473+ 81D4 8E 6A 24 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 473+ 81D8 0F 6B
 474+ 81DA D9 6E A5 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 474+ 81DE 15 00 3F 70
 475+ 81E2 8E 6A DE 6F                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 475+ 81E6 2D 6D 1A 6B
 476+ 81EA BE 6F 0F 6B                  dw      LFA, FETCH              // lfa @
 477+ 81EE AD 6D 0F 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 477+ 81F2 1A 6B
 478+ 81F4 4B 69                        dw      EXIT                    // ;
 479+ 81F6
 480+ 81F6              //  ______________________________________________________________________
 481+ 81F6              //
 482+ 81F6              // marker       -- cccc
 483+ 81F6                              Colon_Def MARKER, "MARKER", is_immediate
 483+ 81F6             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 483+ 81F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 483+ 81F6             >
 483+ 81F6             >                // dummy db directives used to calculate length of namec
 483+ 81F6 4D 41 52 4B >                db      "MARKER"
 483+ 81FA 45 52       >
 483+ 81FC             >len_NFA         defl    $ - temp_NFA
 483+ 81FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 483+ 81F6             >
 483+ 81F6 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 483+ 81F7 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 483+ 81FB 45 52       >
 483+ 81FD             >                org     $-1                 // alter last byte of Name just above to set
 483+ 81FC D2          >                db      {b $} | END_BIT     // msb as name end
 483+ 81FD             >
 483+ 81FD B4 81       >                dw      last_NFA            // Link to previous definition Name
 483+ 81FF             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 483+ 81FF CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 483+ 8202             >
 483+ 8202             >
 483+ 8202             >                endif           ; ok        // for other definitions it "points" the correct handler
 483+ 8202             >                // Use of "; ok" to suppress "warning[fwdref]"
 483+ 8202             >
 483+ 8202             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 484+ 8202 BC 71                        dw      CBUILDS
 485+ 8204 3C 6D 0F 6B                  dw      VOC_LINK, FETCH, COMMA
 485+ 8208 88 6E
 486+ 820A BB 6D 0F 6B                  dw      CURRENT, FETCH, COMMA
 486+ 820E 88 6E
 487+ 8210 AD 6D 0F 6B                  dw      CONTEXT, FETCH, COMMA
 487+ 8214 88 6E
 488+ 8216 AD 6F 88 6E                  dw      LATEST, COMMA
 489+ 821A AD 6F F3 6F                  dw      LATEST, PFA, LFA, FETCH, COMMA
 489+ 821E BE 6F 0F 6B
 489+ 8222 88 6E
 490+ 8224 CD 71                        dw      DOES_TO
 491+ 8226 8E 6A 0F 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 491+ 822A 3C 6D 1A 6B
 491+ 822E 05 6A
 492+ 8230 8E 6A 0F 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 492+ 8234 BB 6D 1A 6B
 492+ 8238 05 6A
 493+ 823A 8E 6A 0F 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 493+ 823E AD 6D 1A 6B
 493+ 8242 05 6A
 494+ 8244 8E 6A 0F 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 494+ 8248 2D 6D 1A 6B
 494+ 824C 05 6A
 495+ 824E 0F 6B BB 6D                  dw           FETCH, CURRENT, FETCH, STORE
 495+ 8252 0F 6B 1A 6B
 496+ 8256 4B 69                        dw      EXIT
 497+ 8258
 498+ 8258              //  ______________________________________________________________________
 499+ 8258              //
 500+ 8258              // spaces       n --
 501+ 8258                              Colon_Def SPACES, "SPACES", is_normal
 501+ 8258             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 501+ 8258             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 501+ 8258             >
 501+ 8258             >                // dummy db directives used to calculate length of namec
 501+ 8258 53 50 41 43 >                db      "SPACES"
 501+ 825C 45 53       >
 501+ 825E             >len_NFA         defl    $ - temp_NFA
 501+ 825E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 501+ 8258             >
 501+ 8258 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 501+ 8259 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 501+ 825D 45 53       >
 501+ 825F             >                org     $-1                 // alter last byte of Name just above to set
 501+ 825E D3          >                db      {b $} | END_BIT     // msb as name end
 501+ 825F             >
 501+ 825F F6 81       >                dw      last_NFA            // Link to previous definition Name
 501+ 8261             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 501+ 8261 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 501+ 8264             >
 501+ 8264             >
 501+ 8264             >                endif           ; ok        // for other definitions it "points" the correct handler
 501+ 8264             >                // Use of "; ok" to suppress "warning[fwdref]"
 501+ 8264             >
 501+ 8264             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 502+ 8264 60 6C 26 6F                  dw      ZERO, MAX
 503+ 8268 60 6C 45 64                  dw      ZERO, C_Q_DO
 504+ 826C 08 00                        dw      Spaces_Leave - $
 505+ 826E              Spaces_Loop:
 506+ 826E 75 6F                        dw          SPACE
 507+ 8270 F8 63                        dw      C_LOOP
 508+ 8272 FC FF                        dw      Spaces_Loop - $
 509+ 8274              Spaces_Leave:
 510+ 8274 4B 69                        dw      EXIT                    // ;
 511+ 8276
 512+ 8276              //  ______________________________________________________________________
 513+ 8276              //
 514+ 8276              // <#           --
 515+ 8276                              Colon_Def BEGIN_DASH, "<#", is_normal
 515+ 8276             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 515+ 8276             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 8276             >
 515+ 8276             >                // dummy db directives used to calculate length of namec
 515+ 8276 3C 23       >                db      "<#"
 515+ 8278             >len_NFA         defl    $ - temp_NFA
 515+ 8278             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 8276             >
 515+ 8276 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 8277 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 515+ 8279             >                org     $-1                 // alter last byte of Name just above to set
 515+ 8278 A3          >                db      {b $} | END_BIT     // msb as name end
 515+ 8279             >
 515+ 8279 58 82       >                dw      last_NFA            // Link to previous definition Name
 515+ 827B             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 827B CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 515+ 827E             >
 515+ 827E             >
 515+ 827E             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 827E             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 827E             >
 515+ 827E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 516+ 827E D4 73 03 6E                  dw      PAD, HLD, STORE
 516+ 8282 1A 6B
 517+ 8284 4B 69                        dw      EXIT
 518+ 8286
 519+ 8286              //  ______________________________________________________________________
 520+ 8286              //
 521+ 8286              // #>           --
 522+ 8286                              Colon_Def DASH_END, "#>", is_normal
 522+ 8286             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 522+ 8286             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 8286             >
 522+ 8286             >                // dummy db directives used to calculate length of namec
 522+ 8286 23 3E       >                db      "#>"
 522+ 8288             >len_NFA         defl    $ - temp_NFA
 522+ 8288             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 8286             >
 522+ 8286 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 8287 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 522+ 8289             >                org     $-1                 // alter last byte of Name just above to set
 522+ 8288 BE          >                db      {b $} | END_BIT     // msb as name end
 522+ 8289             >
 522+ 8289 76 82       >                dw      last_NFA            // Link to previous definition Name
 522+ 828B             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 828B CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 522+ 828E             >
 522+ 828E             >
 522+ 828E             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 828E             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 828E             >
 522+ 828E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 828E C7 6A                        dw      TWO_DROP
 524+ 8290 03 6E 0F 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 524+ 8294 D4 73 53 6A
 524+ 8298 BF 6E
 525+ 829A 4B 69                        dw      EXIT
 526+ 829C
 527+ 829C              //  ______________________________________________________________________
 528+ 829C              //
 529+ 829C              // sign         n d -- d
 530+ 829C                              Colon_Def SIGN, "SIGN", is_normal
 530+ 829C             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 530+ 829C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 530+ 829C             >
 530+ 829C             >                // dummy db directives used to calculate length of namec
 530+ 829C 53 49 47 4E >                db      "SIGN"
 530+ 82A0             >len_NFA         defl    $ - temp_NFA
 530+ 82A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 530+ 829C             >
 530+ 829C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 530+ 829D 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 530+ 82A1             >                org     $-1                 // alter last byte of Name just above to set
 530+ 82A0 CE          >                db      {b $} | END_BIT     // msb as name end
 530+ 82A1             >
 530+ 82A1 86 82       >                dw      last_NFA            // Link to previous definition Name
 530+ 82A3             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 530+ 82A3 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 530+ 82A6             >
 530+ 82A6             >
 530+ 82A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 530+ 82A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 530+ 82A6             >
 530+ 82A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 82A6 99 6A A2 69                  dw      ROT, ZLESS
 532+ 82AA 1C 64                        dw      ZBRANCH
 533+ 82AC 08 00                        dw      Sign_Endif - $
 534+ 82AE A5 63 2D 00                  dw          LIT, 45, HOLD
 534+ 82B2 BD 73
 535+ 82B4              Sign_Endif:
 536+ 82B4 4B 69                        dw      EXIT
 537+ 82B6
 538+ 82B6              //  ______________________________________________________________________
 539+ 82B6              //
 540+ 82B6              // #           d1 -- d2
 541+ 82B6                              Colon_Def DASH, "#", is_normal
 541+ 82B6             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 541+ 82B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 541+ 82B6             >
 541+ 82B6             >                // dummy db directives used to calculate length of namec
 541+ 82B6 23          >                db      "#"
 541+ 82B7             >len_NFA         defl    $ - temp_NFA
 541+ 82B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 541+ 82B6             >
 541+ 82B6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 541+ 82B7 23          >                db      "#"               // name string in 7-bit ascii, but
 541+ 82B8             >                org     $-1                 // alter last byte of Name just above to set
 541+ 82B7 A3          >                db      {b $} | END_BIT     // msb as name end
 541+ 82B8             >
 541+ 82B8 9C 82       >                dw      last_NFA            // Link to previous definition Name
 541+ 82BA             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 541+ 82BA CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 541+ 82BD             >
 541+ 82BD             >
 541+ 82BD             >                endif           ; ok        // for other definitions it "points" the correct handler
 541+ 82BD             >                // Use of "; ok" to suppress "warning[fwdref]"
 541+ 82BD             >
 541+ 82BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 542+ 82BD D2 6D 0F 6B                  dw      BASE, FETCH
 543+ 82C1
 544+ 82C1 5C 69                        dw      TO_R                    // >r           ( ud1 )
 545+ 82C3 60 6C 80 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 545+ 82C7 AF 68
 546+ 82C9 6E 69 83 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 546+ 82CD 5C 69
 547+ 82CF AF 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 548+ 82D1 6E 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 549+ 82D3
 550+ 82D3 99 6A                        dw      ROT
 551+ 82D5 A5 63 09 00                  dw      LIT, 9, OVER, LESS
 551+ 82D9 53 6A EB 6E
 552+ 82DD 1C 64                        dw      ZBRANCH
 553+ 82DF 08 00                        dw      Dash_Endif - $
 554+ 82E1 A5 63 07 00                  dw          LIT, 7, PLUS
 554+ 82E5 C6 69
 555+ 82E7              Dash_Endif:
 556+ 82E7
 557+ 82E7 A5 63 30 00                  dw      LIT, 48, PLUS, HOLD
 557+ 82EB C6 69 BD 73
 558+ 82EF 4B 69                        dw      EXIT
 559+ 82F1
 560+ 82F1              //  ______________________________________________________________________
 561+ 82F1              //
 562+ 82F1              // #s           d1 -- d2
 563+ 82F1                              Colon_Def DASHES, "#S", is_normal
 563+ 82F1             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 563+ 82F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 563+ 82F1             >
 563+ 82F1             >                // dummy db directives used to calculate length of namec
 563+ 82F1 23 53       >                db      "#S"
 563+ 82F3             >len_NFA         defl    $ - temp_NFA
 563+ 82F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 563+ 82F1             >
 563+ 82F1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 563+ 82F2 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 563+ 82F4             >                org     $-1                 // alter last byte of Name just above to set
 563+ 82F3 D3          >                db      {b $} | END_BIT     // msb as name end
 563+ 82F4             >
 563+ 82F4 B6 82       >                dw      last_NFA            // Link to previous definition Name
 563+ 82F6             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 563+ 82F6 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 563+ 82F9             >
 563+ 82F9             >
 563+ 82F9             >                endif           ; ok        // for other definitions it "points" the correct handler
 563+ 82F9             >                // Use of "; ok" to suppress "warning[fwdref]"
 563+ 82F9             >
 563+ 82F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 564+ 82F9              Dashes_Begin:
 565+ 82F9 BA 82 E3 6A                  dw      DASH, TWO_DUP
 566+ 82FD F9 68 88 69                  dw          OR_OP, ZEQUAL
 567+ 8301 1C 64                        dw      ZBRANCH
 568+ 8303 F6 FF                        dw      Dashes_Begin - $
 569+ 8305 4B 69                        dw      EXIT
 570+ 8307
 571+ 8307              //  ______________________________________________________________________
 572+ 8307              //
 573+ 8307              // d.r          d n --
 574+ 8307                              Colon_Def D_DOT_R, "D.R", is_normal
 574+ 8307             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 574+ 8307             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 574+ 8307             >
 574+ 8307             >                // dummy db directives used to calculate length of namec
 574+ 8307 44 2E 52    >                db      "D.R"
 574+ 830A             >len_NFA         defl    $ - temp_NFA
 574+ 830A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 574+ 8307             >
 574+ 8307 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 574+ 8308 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 574+ 830B             >                org     $-1                 // alter last byte of Name just above to set
 574+ 830A D2          >                db      {b $} | END_BIT     // msb as name end
 574+ 830B             >
 574+ 830B F1 82       >                dw      last_NFA            // Link to previous definition Name
 574+ 830D             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 574+ 830D CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 574+ 8310             >
 574+ 8310             >
 574+ 8310             >                endif           ; ok        // for other definitions it "points" the correct handler
 574+ 8310             >                // Use of "; ok" to suppress "warning[fwdref]"
 574+ 8310             >
 574+ 8310             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 575+ 8310 5C 69                        dw      TO_R
 576+ 8312 75 6A 9B 79                  dw      TUCK, DABS
 577+ 8316 7B 82 F6 82                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 577+ 831A A3 82 8B 82
 578+ 831E 6E 69                        dw      R_TO
 579+ 8320 53 6A BF 6E                  dw      OVER, SUBTRACT, SPACES, TYPE
 579+ 8324 61 82 1C 72
 580+ 8328 4B 69                        dw      EXIT
 581+ 832A
 582+ 832A              //  ______________________________________________________________________
 583+ 832A              //
 584+ 832A              // .r           n1 n2 --
 585+ 832A                              Colon_Def DOT_R, ".R", is_normal
 585+ 832A             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 585+ 832A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 585+ 832A             >
 585+ 832A             >                // dummy db directives used to calculate length of namec
 585+ 832A 2E 52       >                db      ".R"
 585+ 832C             >len_NFA         defl    $ - temp_NFA
 585+ 832C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 585+ 832A             >
 585+ 832A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 585+ 832B 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 585+ 832D             >                org     $-1                 // alter last byte of Name just above to set
 585+ 832C D2          >                db      {b $} | END_BIT     // msb as name end
 585+ 832D             >
 585+ 832D 07 83       >                dw      last_NFA            // Link to previous definition Name
 585+ 832F             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 585+ 832F CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 585+ 8332             >
 585+ 8332             >
 585+ 8332             >                endif           ; ok        // for other definitions it "points" the correct handler
 585+ 8332             >                // Use of "; ok" to suppress "warning[fwdref]"
 585+ 8332             >
 585+ 8332             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 586+ 8332 5C 69                        dw      TO_R
 587+ 8334 AD 6E 6E 69                  dw      S_TO_D, R_TO
 588+ 8338 0D 83                        dw      D_DOT_R
 589+ 833A 4B 69                        dw      EXIT
 590+ 833C
 591+ 833C              //  ______________________________________________________________________
 592+ 833C              //
 593+ 833C              // d.           d --
 594+ 833C                              Colon_Def D_DOT, "D.", is_normal
 594+ 833C             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 594+ 833C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ 833C             >
 594+ 833C             >                // dummy db directives used to calculate length of namec
 594+ 833C 44 2E       >                db      "D."
 594+ 833E             >len_NFA         defl    $ - temp_NFA
 594+ 833E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ 833C             >
 594+ 833C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ 833D 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 594+ 833F             >                org     $-1                 // alter last byte of Name just above to set
 594+ 833E AE          >                db      {b $} | END_BIT     // msb as name end
 594+ 833F             >
 594+ 833F 2A 83       >                dw      last_NFA            // Link to previous definition Name
 594+ 8341             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 8341 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 8344             >
 594+ 8344             >
 594+ 8344             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 8344             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 8344             >
 594+ 8344             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 8344 60 6C 0D 83                  dw      ZERO, D_DOT_R, SPACE
 595+ 8348 75 6F
 596+ 834A 4B 69                        dw      EXIT
 597+ 834C
 598+ 834C              //  ______________________________________________________________________
 599+ 834C              //
 600+ 834C              // .            n --
 601+ 834C                              Colon_Def DOT, ".", is_normal
 601+ 834C             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 601+ 834C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ 834C             >
 601+ 834C             >                // dummy db directives used to calculate length of namec
 601+ 834C 2E          >                db      "."
 601+ 834D             >len_NFA         defl    $ - temp_NFA
 601+ 834D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ 834C             >
 601+ 834C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ 834D 2E          >                db      "."               // name string in 7-bit ascii, but
 601+ 834E             >                org     $-1                 // alter last byte of Name just above to set
 601+ 834D AE          >                db      {b $} | END_BIT     // msb as name end
 601+ 834E             >
 601+ 834E 3C 83       >                dw      last_NFA            // Link to previous definition Name
 601+ 8350             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 8350 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 601+ 8353             >
 601+ 8353             >
 601+ 8353             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 8353             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 8353             >
 601+ 8353             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 8353 AD 6E 41 83                  dw      S_TO_D, D_DOT
 603+ 8357 4B 69                        dw      EXIT
 604+ 8359
 605+ 8359              //  ______________________________________________________________________
 606+ 8359              //
 607+ 8359              // ?            n --
 608+ 8359                              Colon_Def QUESTION, "?", is_normal
 608+ 8359             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 608+ 8359             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 608+ 8359             >
 608+ 8359             >                // dummy db directives used to calculate length of namec
 608+ 8359 3F          >                db      "?"
 608+ 835A             >len_NFA         defl    $ - temp_NFA
 608+ 835A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 608+ 8359             >
 608+ 8359 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 608+ 835A 3F          >                db      "?"               // name string in 7-bit ascii, but
 608+ 835B             >                org     $-1                 // alter last byte of Name just above to set
 608+ 835A BF          >                db      {b $} | END_BIT     // msb as name end
 608+ 835B             >
 608+ 835B 4C 83       >                dw      last_NFA            // Link to previous definition Name
 608+ 835D             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 608+ 835D CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 608+ 8360             >
 608+ 8360             >
 608+ 8360             >                endif           ; ok        // for other definitions it "points" the correct handler
 608+ 8360             >                // Use of "; ok" to suppress "warning[fwdref]"
 608+ 8360             >
 608+ 8360             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 609+ 8360 0F 6B 50 83                  dw      FETCH, DOT
 610+ 8364 4B 69                        dw      EXIT
 611+ 8366
 612+ 8366              //  ______________________________________________________________________
 613+ 8366              //
 614+ 8366              // u.           u --
 615+ 8366                              Colon_Def U_DOT, "U.", is_normal
 615+ 8366             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 615+ 8366             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 615+ 8366             >
 615+ 8366             >                // dummy db directives used to calculate length of namec
 615+ 8366 55 2E       >                db      "U."
 615+ 8368             >len_NFA         defl    $ - temp_NFA
 615+ 8368             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 615+ 8366             >
 615+ 8366 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 615+ 8367 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 615+ 8369             >                org     $-1                 // alter last byte of Name just above to set
 615+ 8368 AE          >                db      {b $} | END_BIT     // msb as name end
 615+ 8369             >
 615+ 8369 59 83       >                dw      last_NFA            // Link to previous definition Name
 615+ 836B             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 615+ 836B CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 615+ 836E             >
 615+ 836E             >
 615+ 836E             >                endif           ; ok        // for other definitions it "points" the correct handler
 615+ 836E             >                // Use of "; ok" to suppress "warning[fwdref]"
 615+ 836E             >
 615+ 836E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 616+ 836E 60 6C 41 83                  dw      ZERO, D_DOT
 617+ 8372 4B 69                        dw      EXIT
 618+ 8374
 619+ 8374              //  ______________________________________________________________________
 620+ 8374              //
 621+ 8374              // words        --
 622+ 8374                              Colon_Def WORDS, "WORDS", is_normal
 622+ 8374             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 622+ 8374             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 622+ 8374             >
 622+ 8374             >                // dummy db directives used to calculate length of namec
 622+ 8374 57 4F 52 44 >                db      "WORDS"
 622+ 8378 53          >
 622+ 8379             >len_NFA         defl    $ - temp_NFA
 622+ 8379             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 622+ 8374             >
 622+ 8374 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 622+ 8375 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 622+ 8379 53          >
 622+ 837A             >                org     $-1                 // alter last byte of Name just above to set
 622+ 8379 D3          >                db      {b $} | END_BIT     // msb as name end
 622+ 837A             >
 622+ 837A 66 83       >                dw      last_NFA            // Link to previous definition Name
 622+ 837C             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 622+ 837C CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 622+ 837F             >
 622+ 837F             >
 622+ 837F             >                endif           ; ok        // for other definitions it "points" the correct handler
 622+ 837F             >                // Use of "; ok" to suppress "warning[fwdref]"
 622+ 837F             >
 622+ 837F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 623+ 837F A5 63 80 00                  dw      LIT, 128, OUT, STORE
 623+ 8383 88 6D 1A 6B
 624+ 8387 AD 6D 0F 6B                  dw      CONTEXT, FETCH, FETCH
 624+ 838B 0F 6B
 625+ 838D              Words_Begin:
 626+ 838D 8E 6A 26 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 626+ 8391 A5 63 1F 00
 626+ 8395 E9 68
 627+ 8397 88 6D 0F 6B                  dw          OUT, FETCH, PLUS
 627+ 839B C6 69
 628+ 839D 9A 6C EB 6E                  dw          CL, LESS, ZEQUAL
 628+ 83A1 88 69
 629+ 83A3 1C 64                        dw          ZBRANCH
 630+ 83A5 0A 00                        dw          Words_Endif - $
 631+ 83A7 FC 65 60 6C                  dw              CR, ZERO, OUT, STORE
 631+ 83AB 88 6D 1A 6B
 632+ 83AF              Words_Endif:
 633+ 83AF 8E 6A 18 76                  dw          DUP, ID_DOT
 634+ 83B3 F3 6F BE 6F                  dw          PFA, LFA, FETCH
 634+ 83B7 0F 6B
 635+ 83B9 8E 6A 88 69                  dw          DUP, ZEQUAL
 636+ 83BD 0B 67 F9 68                  dw          QTERMINAL, OR_OP
 637+ 83C1 1C 64                        dw      ZBRANCH
 638+ 83C3 CA FF                        dw      Words_Begin - $
 639+ 83C5 61 6A                        dw      DROP
 640+ 83C7 4B 69                        dw      EXIT
 641+ 83C9
 642+ 83C9              //  ______________________________________________________________________
 643+ 83C9              //
 644+ 83C9              // list         n --
 645+ 83C9                              Colon_Def LIST, "LIST", is_normal
 645+ 83C9             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 645+ 83C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 645+ 83C9             >
 645+ 83C9             >                // dummy db directives used to calculate length of namec
 645+ 83C9 4C 49 53 54 >                db      "LIST"
 645+ 83CD             >len_NFA         defl    $ - temp_NFA
 645+ 83CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 645+ 83C9             >
 645+ 83C9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 645+ 83CA 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 645+ 83CE             >                org     $-1                 // alter last byte of Name just above to set
 645+ 83CD D4          >                db      {b $} | END_BIT     // msb as name end
 645+ 83CE             >
 645+ 83CE 74 83       >                dw      last_NFA            // Link to previous definition Name
 645+ 83D0             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 645+ 83D0 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 645+ 83D3             >
 645+ 83D3             >
 645+ 83D3             >                endif           ; ok        // for other definitions it "points" the correct handler
 645+ 83D3             >                // Use of "; ok" to suppress "warning[fwdref]"
 645+ 83D3             >
 645+ 83D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 646+ 83D3 6B 71 FC 65                  dw      DECIMAL, CR
 647+ 83D7 8E 6A 92 6D                  dw      DUP, SCR, STORE
 647+ 83DB 1A 6B
 648+ 83DD 38 74                        dw      C_DOT_QUOTE
 649+ 83DF 05 53 63 72                  db      5, "Scr# "
 649+ 83E3 23 20
 650+ 83E5 50 83                        dw      DOT
 651+ 83E7 C1 6C 60 6C                  dw      LSCR, ZERO, C_DO
 651+ 83EB 70 64
 652+ 83ED              List_Loop:
 653+ 83ED FC 65                        dw          CR
 654+ 83EF 78 64 7B 6C                  dw          I, THREE
 655+ 83F3 2F 83 75 6F                  dw          DOT_R, SPACE
 656+ 83F7 78 64 92 6D                  dw          I, SCR, FETCH, DOT_LINE
 656+ 83FB 0F 6B D7 7A
 657+ 83FF 0B 67                        dw          QTERMINAL
 658+ 8401 1C 64                        dw          ZBRANCH
 659+ 8403 06 00                        dw          List_Endif - $
 660+ 8405 2F 64                        dw              C_LEAVE
 661+ 8407 06 00                        dw              List_Leave - $
 662+ 8409              List_Endif:
 663+ 8409 F8 63                        dw      C_LOOP
 664+ 840B E2 FF                        dw      List_Loop - $
 665+ 840D              List_Leave:
 666+ 840D FC 65                        dw      CR
 667+ 840F 4B 69                        dw      EXIT
 668+ 8411
 669+ 8411              //  ______________________________________________________________________
 670+ 8411              //
 671+ 8411              // index        n1 n2 --
 672+ 8411                              Colon_Def INDEX, "INDEX", is_normal
 672+ 8411             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 672+ 8411             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 672+ 8411             >
 672+ 8411             >                // dummy db directives used to calculate length of namec
 672+ 8411 49 4E 44 45 >                db      "INDEX"
 672+ 8415 58          >
 672+ 8416             >len_NFA         defl    $ - temp_NFA
 672+ 8416             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 672+ 8411             >
 672+ 8411 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 672+ 8412 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 672+ 8416 58          >
 672+ 8417             >                org     $-1                 // alter last byte of Name just above to set
 672+ 8416 D8          >                db      {b $} | END_BIT     // msb as name end
 672+ 8417             >
 672+ 8417 C9 83       >                dw      last_NFA            // Link to previous definition Name
 672+ 8419             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 672+ 8419 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 672+ 841C             >
 672+ 841C             >
 672+ 841C             >                endif           ; ok        // for other definitions it "points" the correct handler
 672+ 841C             >                // Use of "; ok" to suppress "warning[fwdref]"
 672+ 841C             >
 672+ 841C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 673+ 841C E3 69 83 6A                  dw      ONE_PLUS, SWAP, C_DO
 673+ 8420 70 64
 674+ 8422              Index_Loop:
 675+ 8422 FC 65 78 64                  dw          CR, I, THREE
 675+ 8426 7B 6C
 676+ 8428 2F 83 75 6F                  dw          DOT_R, SPACE
 677+ 842C 60 6C 78 64                  dw          ZERO, I, DOT_LINE
 677+ 8430 D7 7A
 678+ 8432 0B 67                        dw          QTERMINAL
 679+ 8434 1C 64                        dw          ZBRANCH
 680+ 8436 06 00                        dw          Index_Endif - $
 681+ 8438 2F 64                        dw              C_LEAVE
 682+ 843A 06 00                        dw              Index_Leave - $
 683+ 843C              Index_Endif:
 684+ 843C F8 63                        dw      C_LOOP
 685+ 843E E4 FF                        dw      Index_Loop - $
 686+ 8440              Index_Leave:
 687+ 8440 FC 65                        dw      CR
 688+ 8442 4B 69                        dw      EXIT
 689+ 8444
 690+ 8444              //  ______________________________________________________________________
 691+ 8444              //
 692+ 8444              // cls          --
 693+ 8444                              Colon_Def CLS, "CLS", is_normal
 693+ 8444             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 693+ 8444             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 693+ 8444             >
 693+ 8444             >                // dummy db directives used to calculate length of namec
 693+ 8444 43 4C 53    >                db      "CLS"
 693+ 8447             >len_NFA         defl    $ - temp_NFA
 693+ 8447             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 693+ 8444             >
 693+ 8444 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 693+ 8445 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 693+ 8448             >                org     $-1                 // alter last byte of Name just above to set
 693+ 8447 D3          >                db      {b $} | END_BIT     // msb as name end
 693+ 8448             >
 693+ 8448 11 84       >                dw      last_NFA            // Link to previous definition Name
 693+ 844A             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 693+ 844A CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 693+ 844D             >
 693+ 844D             >
 693+ 844D             >                endif           ; ok        // for other definitions it "points" the correct handler
 693+ 844D             >                // Use of "; ok" to suppress "warning[fwdref]"
 693+ 844D             >
 693+ 844D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 694+ 844D A5 63 0E 00                  dw      LIT, $0E, EMITC
 694+ 8451 E7 65
 695+ 8453 4B 69                        dw      EXIT
 696+ 8455
 697+ 8455              //  ______________________________________________________________________
 698+ 8455              //
 699+ 8455              // splash       --
 700+ 8455                              Colon_Def SPLASH, "SPLASH", is_normal
 700+ 8455             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 700+ 8455             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 700+ 8455             >
 700+ 8455             >                // dummy db directives used to calculate length of namec
 700+ 8455 53 50 4C 41 >                db      "SPLASH"
 700+ 8459 53 48       >
 700+ 845B             >len_NFA         defl    $ - temp_NFA
 700+ 845B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 700+ 8455             >
 700+ 8455 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 700+ 8456 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 700+ 845A 53 48       >
 700+ 845C             >                org     $-1                 // alter last byte of Name just above to set
 700+ 845B C8          >                db      {b $} | END_BIT     // msb as name end
 700+ 845C             >
 700+ 845C 44 84       >                dw      last_NFA            // Link to previous definition Name
 700+ 845E             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 700+ 845E CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 700+ 8461             >
 700+ 8461             >
 700+ 8461             >                endif           ; ok        // for other definitions it "points" the correct handler
 700+ 8461             >                // Use of "; ok" to suppress "warning[fwdref]"
 700+ 8461             >
 700+ 8461             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 701+ 8461 4A 84                        dw      CLS
 702+ 8463 38 74                        dw      C_DOT_QUOTE
 703+ 8465 58                           db      88
 704+ 8466 76 2D 46 6F                  db      "v-Forth 1.52 NextZXOS version", 13    // 29
 704+ 846A 72 74 68 20
 704+ 846E 31 2E 35 32
 704+ 8472 20 4E 65 78
 704+ 8476 74 5A 58 4F
 704+ 847A 53 20 76 65
 704+ 847E 72 73 69 6F
 704+ 8482 6E 0D
 705+ 8484 44 69 72 65                  db      "Direct Threaded - build 20220425", 13  // 31
 705+ 8488 63 74 20 54
 705+ 848C 68 72 65 61
 705+ 8490 64 65 64 20
 705+ 8494 2D 20 62 75
 705+ 8498 69 6C 64 20
 705+ 849C 32 30 32 32
 705+ 84A0 30 34 32 35
 705+ 84A4 0D
 706+ 84A5 31 39 39 30                  db      "1990-2022 Matteo Vitturi", 13        // 25
 706+ 84A9 2D 32 30 32
 706+ 84AD 32 20 4D 61
 706+ 84B1 74 74 65 6F
 706+ 84B5 20 56 69 74
 706+ 84B9 74 75 72 69
 706+ 84BD 0D
 707+ 84BE 4B 69                        dw      EXIT
 708+ 84C0
 709+ 84C0              //  ______________________________________________________________________
 710+ 84C0              //
 711+ 84C0              // video        --
 712+ 84C0                              Colon_Def VIDEO, "VIDEO", is_normal
 712+ 84C0             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 712+ 84C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 712+ 84C0             >
 712+ 84C0             >                // dummy db directives used to calculate length of namec
 712+ 84C0 56 49 44 45 >                db      "VIDEO"
 712+ 84C4 4F          >
 712+ 84C5             >len_NFA         defl    $ - temp_NFA
 712+ 84C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 712+ 84C0             >
 712+ 84C0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 712+ 84C1 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 712+ 84C5 4F          >
 712+ 84C6             >                org     $-1                 // alter last byte of Name just above to set
 712+ 84C5 CF          >                db      {b $} | END_BIT     // msb as name end
 712+ 84C6             >
 712+ 84C6 55 84       >                dw      last_NFA            // Link to previous definition Name
 712+ 84C8             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 712+ 84C8 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 712+ 84CB             >
 712+ 84CB             >
 712+ 84CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 712+ 84CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 712+ 84CB             >
 712+ 84CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 713+ 84CB 72 6C 8E 6A                  dw      TWO, DUP, DEVICE, STORE
 713+ 84CF 21 7B 1A 6B
 714+ 84D3 4D 67                        dw      SELECT
 715+ 84D5 4B 69                        dw      EXIT
 716+ 84D7
 717+ 84D7              //  ______________________________________________________________________
 718+ 84D7              //
 719+ 84D7              // accept-      a n1 -- n2
 720+ 84D7                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 720+ 84D7             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 720+ 84D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 720+ 84D7             >
 720+ 84D7             >                // dummy db directives used to calculate length of namec
 720+ 84D7 41 43 43 45 >                db      "ACCEPT-"
 720+ 84DB 50 54 2D    >
 720+ 84DE             >len_NFA         defl    $ - temp_NFA
 720+ 84DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 720+ 84D7             >
 720+ 84D7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 720+ 84D8 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 720+ 84DC 50 54 2D    >
 720+ 84DF             >                org     $-1                 // alter last byte of Name just above to set
 720+ 84DE AD          >                db      {b $} | END_BIT     // msb as name end
 720+ 84DF             >
 720+ 84DF C0 84       >                dw      last_NFA            // Link to previous definition Name
 720+ 84E1             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 720+ 84E1 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 720+ 84E4             >
 720+ 84E4             >
 720+ 84E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 720+ 84E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 720+ 84E4             >
 720+ 84E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 721+ 84E4 5C 69                        dw      TO_R
 722+ 84E6 60 6C                        dw      ZERO
 723+ 84E8 83 6A                        dw      SWAP
 724+ 84EA 8E 6A                        dw      DUP
 725+ 84EC 6E 69                        dw      R_TO
 726+ 84EE C6 69                        dw      PLUS
 727+ 84F0 83 6A                        dw      SWAP
 728+ 84F2 70 64                        dw      C_DO
 729+ 84F4              AcceptN_Loop:
 730+ 84F4 58 7B                        dw          MMU7_FETCH
 731+ 84F6 2A 67                        dw          INKEY
 732+ 84F8 83 6A 6B 7B                  dw          SWAP, MMU7_STORE
 733+ 84FC 8E 6A 88 69                  dw          DUP, ZEQUAL
 734+ 8500 1C 64                        dw          ZBRANCH
 735+ 8502 06 00                        dw          AcceptN_Endif_1 - $
 736+ 8504 C8 84 67 78                  dw              VIDEO, QUIT
 737+ 8508              AcceptN_Endif_1:
 738+ 8508 8E 6A A5 63                  dw          DUP, LIT, 13, EQUALS
 738+ 850C 0D 00 CB 6E
 739+ 8510 1C 64                        dw          ZBRANCH
 740+ 8512 06 00                        dw          AcceptN_Endif_2 - $
 741+ 8514 61 6A 60 6C                  dw              DROP, ZERO
 742+ 8518              AcceptN_Endif_2:
 743+ 8518 8E 6A A5 63                  dw          DUP, LIT, 10, EQUALS
 743+ 851C 0A 00 CB 6E
 744+ 8520 1C 64                        dw          ZBRANCH
 745+ 8522 06 00                        dw          AcceptN_Endif_3 - $
 746+ 8524 61 6A 60 6C                  dw              DROP, ZERO
 747+ 8528              AcceptN_Endif_3:
 748+ 8528 78 64 32 6B                  dw          I, CSTORE, ONE_PLUS
 748+ 852C E3 69
 749+ 852E
 750+ 852E 78 64 26 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 750+ 8532 88 69
 751+ 8534 1C 64                        dw          ZBRANCH
 752+ 8536 06 00                        dw              AcceptN_Endif_4 - $
 753+ 8538 2F 64                        dw                  C_LEAVE     //              leave
 754+ 853A 06 00                        dw                  AcceptN_Leave - $
 755+ 853C              AcceptN_Endif_4:                                 //      endif
 756+ 853C
 757+ 853C F8 63                        dw      C_LOOP
 758+ 853E B6 FF                        dw      AcceptN_Loop -$
 759+ 8540              AcceptN_Leave:
 760+ 8540 4B 69                        dw      EXIT
 761+ 8542
 762+ 8542              //  ______________________________________________________________________
 763+ 8542              //
 764+ 8542              // load-        n --
 765+ 8542              // Provided that a stream n is OPEN# via the standart BASIC
 766+ 8542              // it accepts text from stream #n to the normal INTERPRET
 767+ 8542              // up to now, text-file must end with QUIT
 768+ 8542                              Colon_Def LOAD_N, "LOAD-", is_normal
 768+ 8542             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 768+ 8542             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 768+ 8542             >
 768+ 8542             >                // dummy db directives used to calculate length of namec
 768+ 8542 4C 4F 41 44 >                db      "LOAD-"
 768+ 8546 2D          >
 768+ 8547             >len_NFA         defl    $ - temp_NFA
 768+ 8547             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 768+ 8542             >
 768+ 8542 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 768+ 8543 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 768+ 8547 2D          >
 768+ 8548             >                org     $-1                 // alter last byte of Name just above to set
 768+ 8547 AD          >                db      {b $} | END_BIT     // msb as name end
 768+ 8548             >
 768+ 8548 D7 84       >                dw      last_NFA            // Link to previous definition Name
 768+ 854A             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 768+ 854A CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 768+ 854D             >
 768+ 854D             >
 768+ 854D             >                endif           ; ok        // for other definitions it "points" the correct handler
 768+ 854D             >                // Use of "; ok" to suppress "warning[fwdref]"
 768+ 854D             >
 768+ 854D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 769+ 854D 3D 6E 1A 6B                  dw      SOURCE_ID, STORE
 770+ 8551              Load_N_Begin:
 771+ 8551 FE 6C 0F 6B                  dw          TIB, FETCH
 772+ 8555 8E 6A A5 63                  dw          DUP, LIT, 80
 772+ 8559 50 00
 773+ 855B E3 6A AD 73                  dw          TWO_DUP, BLANKS
 774+ 855F 3D 6E 0F 6B                  dw          SOURCE_ID, FETCH
 775+ 8563 8B 79 8E 6A                  dw          ABS_OP, DUP, DEVICE, STORE
 775+ 8567 21 7B 1A 6B
 776+ 856B 4D 67                        dw          SELECT
 777+ 856D E1 84                        dw          ACCEPT_N
 778+ 856F C8 84                        dw          VIDEO
 779+ 8571 C7 6A                        dw          TWO_DROP
 780+ 8573 60 6C 74 6D                  dw          ZERO, BLK, STORE
 780+ 8577 1A 6B
 781+ 8579 60 6C 7E 6D                  dw          ZERO, TO_IN, STORE
 781+ 857D 1A 6B
 782+ 857F A2 77                        dw          INTERPRET
 783+ 8581 0B 67                        dw          QTERMINAL
 784+ 8583 1C 64                        dw      ZBRANCH
 785+ 8585 CC FF                        dw      Load_N_Begin - $
 786+ 8587 4B 69                        dw      EXIT
 787+ 8589
 788+ 8589              //  ______________________________________________________________________
 789+ 8589              //
 790+ 8589              // load         n --
 791+ 8589              // if n is positive, it loads screen #n (as usual)
 792+ 8589              // if n is negative, it connects stream #n to the normal INTERPRET
 793+ 8589              // this second way is useful if you want to load any kind of file
 794+ 8589              // provied that it is OPEN# the usual BASIC way.
 795+ 8589                              Colon_Def LOAD, "LOAD", is_normal
 795+ 8589             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 795+ 8589             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 795+ 8589             >
 795+ 8589             >                // dummy db directives used to calculate length of namec
 795+ 8589 4C 4F 41 44 >                db      "LOAD"
 795+ 858D             >len_NFA         defl    $ - temp_NFA
 795+ 858D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 795+ 8589             >
 795+ 8589 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 795+ 858A 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 795+ 858E             >                org     $-1                 // alter last byte of Name just above to set
 795+ 858D C4          >                db      {b $} | END_BIT     // msb as name end
 795+ 858E             >
 795+ 858E 42 85       >                dw      last_NFA            // Link to previous definition Name
 795+ 8590             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 795+ 8590 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 795+ 8593             >
 795+ 8593             >
 795+ 8593             >                endif           ; ok        // for other definitions it "points" the correct handler
 795+ 8593             >                // Use of "; ok" to suppress "warning[fwdref]"
 795+ 8593             >
 795+ 8593             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 796+ 8593 8E 6A A2 69                  dw      DUP, ZLESS
 797+ 8597 1C 64                        dw      ZBRANCH
 798+ 8599 08 00                        dw      Load_Else - $
 799+ 859B 4A 85                        dw          LOAD_N
 800+ 859D 07 64                        dw      BRANCH
 801+ 859F 04 00                        dw      Load_Endif - $
 802+ 85A1              Load_Else:
 803+ 85A1 51 81                        dw          LOAD_P
 804+ 85A3              Load_Endif:
 805+ 85A3 4B 69                        dw      EXIT
 806+ 85A5
 807+ 85A5
 808+ 85A5              //  ______________________________________________________________________
 809+ 85A5              //
 810+ 85A5              // autoexec     --
 811+ 85A5              // this word is called the first time the Forth system boot to
 812+ 85A5              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 813+ 85A5                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 813+ 85A5             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 813+ 85A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 813+ 85A5             >
 813+ 85A5             >                // dummy db directives used to calculate length of namec
 813+ 85A5 41 55 54 4F >                db      "AUTOEXEC"
 813+ 85A9 45 58 45 43 >
 813+ 85AD             >len_NFA         defl    $ - temp_NFA
 813+ 85AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 813+ 85A5             >
 813+ 85A5 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 813+ 85A6 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 813+ 85AA 45 58 45 43 >
 813+ 85AE             >                org     $-1                 // alter last byte of Name just above to set
 813+ 85AD C3          >                db      {b $} | END_BIT     // msb as name end
 813+ 85AE             >
 813+ 85AE 89 85       >                dw      last_NFA            // Link to previous definition Name
 813+ 85B0             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 813+ 85B0 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 813+ 85B3             >
 813+ 85B3             >
 813+ 85B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 813+ 85B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 813+ 85B3             >
 813+ 85B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 814+ 85B3 A5 63 0B 00                  dw      LIT, 11
 815+ 85B7 A5 63 0B 6C                  dw      LIT, NOOP
 816+ 85BB A5 63 B8 78                  dw      LIT, Autoexec_Ptr
 817+ 85BF 1A 6B                        dw      STORE
 818+ 85C1 90 85                        dw      LOAD
 819+ 85C3 67 78                        dw      QUIT
 820+ 85C5 4B 69                        dw      EXIT
 821+ 85C7
 822+ 85C7
 823+ 85C7              //  ______________________________________________________________________
 824+ 85C7              //
 825+ 85C7              // bye     --
 826+ 85C7              //
 827+ 85C7                              Colon_Def BYE, "BYE", is_normal
 827+ 85C7             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 827+ 85C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 827+ 85C7             >
 827+ 85C7             >                // dummy db directives used to calculate length of namec
 827+ 85C7 42 59 45    >                db      "BYE"
 827+ 85CA             >len_NFA         defl    $ - temp_NFA
 827+ 85CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 827+ 85C7             >
 827+ 85C7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 827+ 85C8 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 827+ 85CB             >                org     $-1                 // alter last byte of Name just above to set
 827+ 85CA C5          >                db      {b $} | END_BIT     // msb as name end
 827+ 85CB             >
 827+ 85CB A5 85       >                dw      last_NFA            // Link to previous definition Name
 827+ 85CD             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 827+ 85CD CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 827+ 85D0             >
 827+ 85D0             >
 827+ 85D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 827+ 85D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 827+ 85D0             >
 827+ 85D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 828+ 85D0 E0 7D                        dw      FLUSH
 829+ 85D2 0F 7D                        dw      EMPTY_BUFFERS
 830+ 85D4 A9 7B 0F 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 830+ 85D8 8F 67 61 6A
 831+ 85DC 60 6C D0 6C                  dw      ZERO, PLUS_ORIGIN
 832+ 85E0 50 79                        dw      BASIC
 833+ 85E2
 834+ 85E2              //  ______________________________________________________________________
 835+ 85E2              //
 836+ 85E2              // invv     --
 837+ 85E2              //
 838+ 85E2              //              Colon_Def INVV, "INVV", is_normal
 839+ 85E2              //              dw      LIT, 20, EMITC, ONE, EMITC
 840+ 85E2              //              dw      EXIT
 841+ 85E2
 842+ 85E2              //  ______________________________________________________________________
 843+ 85E2              //
 844+ 85E2              // truv     --
 845+ 85E2              //
 846+ 85E2              //              Colon_Def TRUV, "TRUV", is_normal
 847+ 85E2              //              dw      LIT, 20, EMITC, ZERO, EMITC
 848+ 85E2              //              dw      EXIT
 849+ 85E2
 850+ 85E2              //  ______________________________________________________________________
 851+ 85E2              //
 852+ 85E2              // mark     --
 853+ 85E2              //
 854+ 85E2              //              Colon_Def MARK, "MARK", is_normal
 855+ 85E2              //              dw      INVV, TYPE, TRUV
 856+ 85E2              //              dw      EXIT
 857+ 85E2
 858+ 85E2              //  ______________________________________________________________________
 859+ 85E2              //
 860+ 85E2              // back     --
 861+ 85E2              //
 862+ 85E2                              Colon_Def BACK, "BACK", is_normal
 862+ 85E2             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 862+ 85E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 862+ 85E2             >
 862+ 85E2             >                // dummy db directives used to calculate length of namec
 862+ 85E2 42 41 43 4B >                db      "BACK"
 862+ 85E6             >len_NFA         defl    $ - temp_NFA
 862+ 85E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 862+ 85E2             >
 862+ 85E2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 862+ 85E3 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 862+ 85E7             >                org     $-1                 // alter last byte of Name just above to set
 862+ 85E6 CB          >                db      {b $} | END_BIT     // msb as name end
 862+ 85E7             >
 862+ 85E7 C7 85       >                dw      last_NFA            // Link to previous definition Name
 862+ 85E9             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 862+ 85E9 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 862+ 85EC             >
 862+ 85EC             >
 862+ 85EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 862+ 85EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 862+ 85EC             >
 862+ 85EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 863+ 85EC 6A 6E BF 6E                  dw      HERE, SUBTRACT, COMMA
 863+ 85F0 88 6E
 864+ 85F2 4B 69                        dw      EXIT
 865+ 85F4
 866+ 85F4              //  ______________________________________________________________________
 867+ 85F4              //
 868+ 85F4              // if          ( -- a 2 ) \ compile-time
 869+ 85F4              // IF ... THEN
 870+ 85F4              // IF ... ELSE ... ENDIF
 871+ 85F4                              Colon_Def IF, "IF", is_immediate
 871+ 85F4             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 871+ 85F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 871+ 85F4             >
 871+ 85F4             >                // dummy db directives used to calculate length of namec
 871+ 85F4 49 46       >                db      "IF"
 871+ 85F6             >len_NFA         defl    $ - temp_NFA
 871+ 85F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 871+ 85F4             >
 871+ 85F4 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 871+ 85F5 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 871+ 85F7             >                org     $-1                 // alter last byte of Name just above to set
 871+ 85F6 C6          >                db      {b $} | END_BIT     // msb as name end
 871+ 85F7             >
 871+ 85F7 E2 85       >                dw      last_NFA            // Link to previous definition Name
 871+ 85F9             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 871+ 85F9 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 871+ 85FC             >
 871+ 85FC             >
 871+ 85FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 871+ 85FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 871+ 85FC             >
 871+ 85FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 872+ 85FC D8 70 1C 64                  dw      COMPILE, ZBRANCH
 873+ 8600 6A 6E 60 6C                  dw      HERE, ZERO, COMMA
 873+ 8604 88 6E
 874+ 8606 72 6C                        dw      TWO
 875+ 8608 4B 69                        dw      EXIT
 876+ 860A
 877+ 860A              //  ______________________________________________________________________
 878+ 860A              //
 879+ 860A              // then        ( a 2 -- ) \ compile-time
 880+ 860A              //
 881+ 860A                              Colon_Def THEN, "THEN", is_immediate
 881+ 860A             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 881+ 860A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 881+ 860A             >
 881+ 860A             >                // dummy db directives used to calculate length of namec
 881+ 860A 54 48 45 4E >                db      "THEN"
 881+ 860E             >len_NFA         defl    $ - temp_NFA
 881+ 860E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 881+ 860A             >
 881+ 860A C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 881+ 860B 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 881+ 860F             >                org     $-1                 // alter last byte of Name just above to set
 881+ 860E CE          >                db      {b $} | END_BIT     // msb as name end
 881+ 860F             >
 881+ 860F F4 85       >                dw      last_NFA            // Link to previous definition Name
 881+ 8611             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 881+ 8611 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 881+ 8614             >
 881+ 8614             >
 881+ 8614             >                endif           ; ok        // for other definitions it "points" the correct handler
 881+ 8614             >                // Use of "; ok" to suppress "warning[fwdref]"
 881+ 8614             >
 881+ 8614             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 882+ 8614 5A 70                        dw      QCOMP
 883+ 8616 72 6C 8B 70                  dw      TWO, QPAIRS
 884+ 861A 6A 6E 53 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 884+ 861E BF 6E 83 6A
 884+ 8622 1A 6B
 885+ 8624 4B 69                        dw      EXIT
 886+ 8626
 887+ 8626              //  ______________________________________________________________________
 888+ 8626              //
 889+ 8626              // endif       ( a 2 -- ) \ compile-time
 890+ 8626              //
 891+ 8626                              Colon_Def ENDIF, "ENDIF", is_immediate
 891+ 8626             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 891+ 8626             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 891+ 8626             >
 891+ 8626             >                // dummy db directives used to calculate length of namec
 891+ 8626 45 4E 44 49 >                db      "ENDIF"
 891+ 862A 46          >
 891+ 862B             >len_NFA         defl    $ - temp_NFA
 891+ 862B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 891+ 8626             >
 891+ 8626 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 891+ 8627 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 891+ 862B 46          >
 891+ 862C             >                org     $-1                 // alter last byte of Name just above to set
 891+ 862B C6          >                db      {b $} | END_BIT     // msb as name end
 891+ 862C             >
 891+ 862C 0A 86       >                dw      last_NFA            // Link to previous definition Name
 891+ 862E             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 891+ 862E CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 891+ 8631             >
 891+ 8631             >
 891+ 8631             >                endif           ; ok        // for other definitions it "points" the correct handler
 891+ 8631             >                // Use of "; ok" to suppress "warning[fwdref]"
 891+ 8631             >
 891+ 8631             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 892+ 8631 11 86                        dw      THEN
 893+ 8633 4B 69                        dw      EXIT
 894+ 8635
 895+ 8635              //  ______________________________________________________________________
 896+ 8635              //
 897+ 8635              // else        ( a1 2 -- a2 2 ) \ compile-time
 898+ 8635              //
 899+ 8635                              Colon_Def ELSE, "ELSE", is_immediate
 899+ 8635             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 899+ 8635             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 899+ 8635             >
 899+ 8635             >                // dummy db directives used to calculate length of namec
 899+ 8635 45 4C 53 45 >                db      "ELSE"
 899+ 8639             >len_NFA         defl    $ - temp_NFA
 899+ 8639             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 899+ 8635             >
 899+ 8635 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 899+ 8636 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 899+ 863A             >                org     $-1                 // alter last byte of Name just above to set
 899+ 8639 C5          >                db      {b $} | END_BIT     // msb as name end
 899+ 863A             >
 899+ 863A 26 86       >                dw      last_NFA            // Link to previous definition Name
 899+ 863C             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 899+ 863C CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 899+ 863F             >
 899+ 863F             >
 899+ 863F             >                endif           ; ok        // for other definitions it "points" the correct handler
 899+ 863F             >                // Use of "; ok" to suppress "warning[fwdref]"
 899+ 863F             >
 899+ 863F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 900+ 863F 5A 70                        dw      QCOMP
 901+ 8641 72 6C 8B 70                  dw      TWO, QPAIRS
 902+ 8645 D8 70 07 64                  dw      COMPILE, BRANCH
 903+ 8649 6A 6E 60 6C                  dw      HERE, ZERO, COMMA
 903+ 864D 88 6E
 904+ 864F 83 6A 72 6C                  dw      SWAP, TWO, THEN
 904+ 8653 11 86
 905+ 8655 72 6C                        dw      TWO
 906+ 8657 4B 69                        dw      EXIT
 907+ 8659
 908+ 8659              //  ______________________________________________________________________
 909+ 8659              //
 910+ 8659              // begin        ( -- a 1 ) \ compile-time
 911+ 8659              // BEGIN ... AGAIN
 912+ 8659              // BEGIN ... f UNTIL
 913+ 8659              // BEGIN ... f WHILE ... REPEAT
 914+ 8659                              Colon_Def BEGIN, "BEGIN", is_immediate
 914+ 8659             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 914+ 8659             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 914+ 8659             >
 914+ 8659             >                // dummy db directives used to calculate length of namec
 914+ 8659 42 45 47 49 >                db      "BEGIN"
 914+ 865D 4E          >
 914+ 865E             >len_NFA         defl    $ - temp_NFA
 914+ 865E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 914+ 8659             >
 914+ 8659 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 914+ 865A 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 914+ 865E 4E          >
 914+ 865F             >                org     $-1                 // alter last byte of Name just above to set
 914+ 865E CE          >                db      {b $} | END_BIT     // msb as name end
 914+ 865F             >
 914+ 865F 35 86       >                dw      last_NFA            // Link to previous definition Name
 914+ 8661             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 914+ 8661 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 914+ 8664             >
 914+ 8664             >
 914+ 8664             >                endif           ; ok        // for other definitions it "points" the correct handler
 914+ 8664             >                // Use of "; ok" to suppress "warning[fwdref]"
 914+ 8664             >
 914+ 8664             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 915+ 8664 5A 70                        dw      QCOMP
 916+ 8666 6A 6E                        dw      HERE
 917+ 8668 72 6C                        dw      TWO
 918+ 866A 4B 69                        dw      EXIT
 919+ 866C
 920+ 866C              //  ______________________________________________________________________
 921+ 866C              //
 922+ 866C              // again        ( a 1 -- ) \ compile-time
 923+ 866C                              Colon_Def AGAIN, "AGAIN", is_immediate
 923+ 866C             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 923+ 866C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 923+ 866C             >
 923+ 866C             >                // dummy db directives used to calculate length of namec
 923+ 866C 41 47 41 49 >                db      "AGAIN"
 923+ 8670 4E          >
 923+ 8671             >len_NFA         defl    $ - temp_NFA
 923+ 8671             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 923+ 866C             >
 923+ 866C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 923+ 866D 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 923+ 8671 4E          >
 923+ 8672             >                org     $-1                 // alter last byte of Name just above to set
 923+ 8671 CE          >                db      {b $} | END_BIT     // msb as name end
 923+ 8672             >
 923+ 8672 59 86       >                dw      last_NFA            // Link to previous definition Name
 923+ 8674             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 923+ 8674 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 923+ 8677             >
 923+ 8677             >
 923+ 8677             >                endif           ; ok        // for other definitions it "points" the correct handler
 923+ 8677             >                // Use of "; ok" to suppress "warning[fwdref]"
 923+ 8677             >
 923+ 8677             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 924+ 8677 5A 70                        dw      QCOMP
 925+ 8679 72 6C 8B 70                  dw      TWO, QPAIRS
 926+ 867D D8 70 07 64                  dw      COMPILE, BRANCH
 927+ 8681 E9 85                        dw      BACK
 928+ 8683 4B 69                        dw      EXIT
 929+ 8685
 930+ 8685              //  ______________________________________________________________________
 931+ 8685              //
 932+ 8685              // until        ( a 1 -- ) \ compile-time
 933+ 8685                              Colon_Def UNTIL, "UNTIL", is_immediate
 933+ 8685             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 933+ 8685             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 933+ 8685             >
 933+ 8685             >                // dummy db directives used to calculate length of namec
 933+ 8685 55 4E 54 49 >                db      "UNTIL"
 933+ 8689 4C          >
 933+ 868A             >len_NFA         defl    $ - temp_NFA
 933+ 868A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 933+ 8685             >
 933+ 8685 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 933+ 8686 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 933+ 868A 4C          >
 933+ 868B             >                org     $-1                 // alter last byte of Name just above to set
 933+ 868A CC          >                db      {b $} | END_BIT     // msb as name end
 933+ 868B             >
 933+ 868B 6C 86       >                dw      last_NFA            // Link to previous definition Name
 933+ 868D             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 933+ 868D CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 933+ 8690             >
 933+ 8690             >
 933+ 8690             >                endif           ; ok        // for other definitions it "points" the correct handler
 933+ 8690             >                // Use of "; ok" to suppress "warning[fwdref]"
 933+ 8690             >
 933+ 8690             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 934+ 8690 5A 70                        dw      QCOMP
 935+ 8692 72 6C 8B 70                  dw      TWO, QPAIRS
 936+ 8696 D8 70 1C 64                  dw      COMPILE, ZBRANCH
 937+ 869A E9 85                        dw      BACK
 938+ 869C 4B 69                        dw      EXIT
 939+ 869E
 940+ 869E              //  ______________________________________________________________________
 941+ 869E              //
 942+ 869E              // end          ( a 1 -- ) \ compile-time
 943+ 869E                              Colon_Def END, "END", is_immediate
 943+ 869E             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 943+ 869E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 943+ 869E             >
 943+ 869E             >                // dummy db directives used to calculate length of namec
 943+ 869E 45 4E 44    >                db      "END"
 943+ 86A1             >len_NFA         defl    $ - temp_NFA
 943+ 86A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 943+ 869E             >
 943+ 869E C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 943+ 869F 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 943+ 86A2             >                org     $-1                 // alter last byte of Name just above to set
 943+ 86A1 C4          >                db      {b $} | END_BIT     // msb as name end
 943+ 86A2             >
 943+ 86A2 85 86       >                dw      last_NFA            // Link to previous definition Name
 943+ 86A4             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 943+ 86A4 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 943+ 86A7             >
 943+ 86A7             >
 943+ 86A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 943+ 86A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 943+ 86A7             >
 943+ 86A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 944+ 86A7 8D 86                        dw      UNTIL
 945+ 86A9 4B 69                        dw      EXIT
 946+ 86AB
 947+ 86AB              //  ______________________________________________________________________
 948+ 86AB              //
 949+ 86AB              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 950+ 86AB                              Colon_Def WHILE, "WHILE", is_immediate
 950+ 86AB             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 950+ 86AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 950+ 86AB             >
 950+ 86AB             >                // dummy db directives used to calculate length of namec
 950+ 86AB 57 48 49 4C >                db      "WHILE"
 950+ 86AF 45          >
 950+ 86B0             >len_NFA         defl    $ - temp_NFA
 950+ 86B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 950+ 86AB             >
 950+ 86AB C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 950+ 86AC 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 950+ 86B0 45          >
 950+ 86B1             >                org     $-1                 // alter last byte of Name just above to set
 950+ 86B0 C5          >                db      {b $} | END_BIT     // msb as name end
 950+ 86B1             >
 950+ 86B1 9E 86       >                dw      last_NFA            // Link to previous definition Name
 950+ 86B3             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 950+ 86B3 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 950+ 86B6             >
 950+ 86B6             >
 950+ 86B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 950+ 86B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 950+ 86B6             >
 950+ 86B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 951+ 86B6 F9 85                        dw      IF
 952+ 86B8              //              dw      TWO_PLUS // ( that is 4 )
 953+ 86B8 D3 6A                        dw      TWO_SWAP
 954+ 86BA 4B 69                        dw      EXIT
 955+ 86BC
 956+ 86BC              //  ______________________________________________________________________
 957+ 86BC              //
 958+ 86BC              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 959+ 86BC                              Colon_Def REPEAT, "REPEAT", is_immediate
 959+ 86BC             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 959+ 86BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 959+ 86BC             >
 959+ 86BC             >                // dummy db directives used to calculate length of namec
 959+ 86BC 52 45 50 45 >                db      "REPEAT"
 959+ 86C0 41 54       >
 959+ 86C2             >len_NFA         defl    $ - temp_NFA
 959+ 86C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 959+ 86BC             >
 959+ 86BC C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 959+ 86BD 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 959+ 86C1 41 54       >
 959+ 86C3             >                org     $-1                 // alter last byte of Name just above to set
 959+ 86C2 D4          >                db      {b $} | END_BIT     // msb as name end
 959+ 86C3             >
 959+ 86C3 AB 86       >                dw      last_NFA            // Link to previous definition Name
 959+ 86C5             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 959+ 86C5 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 959+ 86C8             >
 959+ 86C8             >
 959+ 86C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 959+ 86C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 959+ 86C8             >
 959+ 86C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 960+ 86C8 74 86                        dw      AGAIN
 961+ 86CA              //              dw      TWO_MINUS
 962+ 86CA 11 86                        dw      THEN
 963+ 86CC 4B 69                        dw      EXIT
 964+ 86CE
 965+ 86CE              //  ______________________________________________________________________
 966+ 86CE              //
 967+ 86CE              // ?do-
 968+ 86CE              // special version of "BACK" used by ?DO and LOOP
 969+ 86CE                              Colon_Def C_DO_BACK, "?DO-", is_normal
 969+ 86CE             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 969+ 86CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 969+ 86CE             >
 969+ 86CE             >                // dummy db directives used to calculate length of namec
 969+ 86CE 3F 44 4F 2D >                db      "?DO-"
 969+ 86D2             >len_NFA         defl    $ - temp_NFA
 969+ 86D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 969+ 86CE             >
 969+ 86CE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 969+ 86CF 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 969+ 86D3             >                org     $-1                 // alter last byte of Name just above to set
 969+ 86D2 AD          >                db      {b $} | END_BIT     // msb as name end
 969+ 86D3             >
 969+ 86D3 BC 86       >                dw      last_NFA            // Link to previous definition Name
 969+ 86D5             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 969+ 86D5 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 969+ 86D8             >
 969+ 86D8             >
 969+ 86D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 969+ 86D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 969+ 86D8             >
 969+ 86D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 970+ 86D8 E9 85                        dw      BACK
 971+ 86DA              CDoBack_Begin:
 972+ 86DA 1B 69 F0 6D                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 972+ 86DE 0F 6B BF 6E
 973+ 86E2 1C 64                        dw      ZBRANCH
 974+ 86E4 0A 00                        dw      CDoBack_While - $
 975+ 86E6 F7 69 11 86                  dw          TWO_PLUS, THEN
 976+ 86EA 07 64                        dw      BRANCH
 977+ 86EC EE FF                        dw      CDoBack_Begin - $
 978+ 86EE              CDoBack_While:
 979+ 86EE 9F 70 F0 6D                  dw      QCSP, CSP, STORE
 979+ 86F2 1A 6B
 980+ 86F4 4B 69                        dw      EXIT
 981+ 86F6
 982+ 86F6              //  ______________________________________________________________________
 983+ 86F6              //
 984+ 86F6              // do
 985+ 86F6              // DO  ... LOOP
 986+ 86F6              // DO  ... n +LOOP
 987+ 86F6              // ?DO ... LOOP
 988+ 86F6              // ?DO ... n +LOOP
 989+ 86F6                              Colon_Def DO, "DO", is_immediate
 989+ 86F6             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 989+ 86F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 989+ 86F6             >
 989+ 86F6             >                // dummy db directives used to calculate length of namec
 989+ 86F6 44 4F       >                db      "DO"
 989+ 86F8             >len_NFA         defl    $ - temp_NFA
 989+ 86F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 989+ 86F6             >
 989+ 86F6 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 989+ 86F7 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 989+ 86F9             >                org     $-1                 // alter last byte of Name just above to set
 989+ 86F8 CF          >                db      {b $} | END_BIT     // msb as name end
 989+ 86F9             >
 989+ 86F9 CE 86       >                dw      last_NFA            // Link to previous definition Name
 989+ 86FB             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 989+ 86FB CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 989+ 86FE             >
 989+ 86FE             >
 989+ 86FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 989+ 86FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 989+ 86FE             >
 989+ 86FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 990+ 86FE D8 70 70 64                  dw      COMPILE, C_DO
 991+ 8702 F0 6D 0F 6B                  dw      CSP, FETCH, STORE_CSP
 991+ 8706 2B 70
 992+ 8708 6A 6E 7B 6C                  dw      HERE, THREE
 993+ 870C 4B 69                        dw      EXIT
 994+ 870E
 995+ 870E              //  ______________________________________________________________________
 996+ 870E              //
 997+ 870E              // loop
 998+ 870E                              Colon_Def LOOP, "LOOP", is_immediate
 998+ 870E             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 998+ 870E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 998+ 870E             >
 998+ 870E             >                // dummy db directives used to calculate length of namec
 998+ 870E 4C 4F 4F 50 >                db      "LOOP"
 998+ 8712             >len_NFA         defl    $ - temp_NFA
 998+ 8712             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 998+ 870E             >
 998+ 870E C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 998+ 870F 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 998+ 8713             >                org     $-1                 // alter last byte of Name just above to set
 998+ 8712 D0          >                db      {b $} | END_BIT     // msb as name end
 998+ 8713             >
 998+ 8713 F6 86       >                dw      last_NFA            // Link to previous definition Name
 998+ 8715             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 998+ 8715 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 998+ 8718             >
 998+ 8718             >
 998+ 8718             >                endif           ; ok        // for other definitions it "points" the correct handler
 998+ 8718             >                // Use of "; ok" to suppress "warning[fwdref]"
 998+ 8718             >
 998+ 8718             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 999+ 8718 7B 6C 8B 70                  dw      THREE, QPAIRS
1000+ 871C D8 70 F8 63                  dw      COMPILE, C_LOOP
1001+ 8720 D5 86                        dw      C_DO_BACK
1002+ 8722 4B 69                        dw      EXIT
1003+ 8724
1004+ 8724              //  ______________________________________________________________________
1005+ 8724              //
1006+ 8724              // +loop
1007+ 8724                              Colon_Def PLOOP, "+LOOP", is_immediate
1007+ 8724             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1007+ 8724             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1007+ 8724             >
1007+ 8724             >                // dummy db directives used to calculate length of namec
1007+ 8724 2B 4C 4F 4F >                db      "+LOOP"
1007+ 8728 50          >
1007+ 8729             >len_NFA         defl    $ - temp_NFA
1007+ 8729             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1007+ 8724             >
1007+ 8724 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1007+ 8725 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1007+ 8729 50          >
1007+ 872A             >                org     $-1                 // alter last byte of Name just above to set
1007+ 8729 D0          >                db      {b $} | END_BIT     // msb as name end
1007+ 872A             >
1007+ 872A 0E 87       >                dw      last_NFA            // Link to previous definition Name
1007+ 872C             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1007+ 872C CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1007+ 872F             >
1007+ 872F             >
1007+ 872F             >                endif           ; ok        // for other definitions it "points" the correct handler
1007+ 872F             >                // Use of "; ok" to suppress "warning[fwdref]"
1007+ 872F             >
1007+ 872F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1008+ 872F 7B 6C 8B 70                  dw      THREE, QPAIRS
1009+ 8733 D8 70 C3 63                  dw      COMPILE, C_PLOOP
1010+ 8737 D5 86                        dw      C_DO_BACK
1011+ 8739 4B 69                        dw      EXIT
1012+ 873B
1013+ 873B              //  ______________________________________________________________________
1014+ 873B              //
1015+ 873B              // ?do
1016+ 873B                              Colon_Def QDO, "?DO", is_immediate
1016+ 873B             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1016+ 873B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1016+ 873B             >
1016+ 873B             >                // dummy db directives used to calculate length of namec
1016+ 873B 3F 44 4F    >                db      "?DO"
1016+ 873E             >len_NFA         defl    $ - temp_NFA
1016+ 873E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1016+ 873B             >
1016+ 873B C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1016+ 873C 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1016+ 873F             >                org     $-1                 // alter last byte of Name just above to set
1016+ 873E CF          >                db      {b $} | END_BIT     // msb as name end
1016+ 873F             >
1016+ 873F 24 87       >                dw      last_NFA            // Link to previous definition Name
1016+ 8741             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1016+ 8741 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1016+ 8744             >
1016+ 8744             >
1016+ 8744             >                endif           ; ok        // for other definitions it "points" the correct handler
1016+ 8744             >                // Use of "; ok" to suppress "warning[fwdref]"
1016+ 8744             >
1016+ 8744             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1017+ 8744 D8 70 45 64                  dw      COMPILE, C_Q_DO
1018+ 8748 F0 6D 0F 6B                  dw      CSP, FETCH, STORE_CSP
1018+ 874C 2B 70
1019+ 874E 6A 6E 60 6C                  dw      HERE, ZERO, COMMA, ZERO
1019+ 8752 88 6E 60 6C
1020+ 8756 6A 6E 7B 6C                  dw      HERE, THREE
1021+ 875A 4B 69                        dw      EXIT
1022+ 875C
1023+ 875C              Latest_Definition:
1024+ 875C              //  ______________________________________________________________________
1025+ 875C              //
1026+ 875C              // \
1027+ 875C                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1027+ 875C             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1027+ 875C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1027+ 875C             >
1027+ 875C             >                // dummy db directives used to calculate length of namec
1027+ 875C 5C          >                db      "\\"
1027+ 875D             >len_NFA         defl    $ - temp_NFA
1027+ 875D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1027+ 875C             >
1027+ 875C C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1027+ 875D 5C          >                db      "\\"               // name string in 7-bit ascii, but
1027+ 875E             >                org     $-1                 // alter last byte of Name just above to set
1027+ 875D DC          >                db      {b $} | END_BIT     // msb as name end
1027+ 875E             >
1027+ 875E 3B 87       >                dw      last_NFA            // Link to previous definition Name
1027+ 8760             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1027+ 8760 CD E4 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1027+ 8763             >
1027+ 8763             >
1027+ 8763             >                endif           ; ok        // for other definitions it "points" the correct handler
1027+ 8763             >                // Use of "; ok" to suppress "warning[fwdref]"
1027+ 8763             >
1027+ 8763             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1028+ 8763 74 6D 0F 6B                  dw      BLK, FETCH
1029+ 8767 1C 64                        dw      ZBRANCH
1030+ 8769 30 00                        dw      Backslash_Else_1 - $
1031+ 876B 74 6D 0F 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1031+ 876F 69 6C 00 6F
1032+ 8773 1C 64                        dw          ZBRANCH
1033+ 8775 18 00                        dw          Backslash_Else_2 - $
1034+ 8777 7E 6D 0F 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1034+ 877B 9A 6C 7B 7A
1034+ 877F 9A 6C
1035+ 8781 83 6A BF 6E                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1035+ 8785 7E 6D F0 6A
1036+ 8789 07 64                        dw          BRANCH
1037+ 878B 0A 00                        dw          Backslash_Endif_2 - $
1038+ 878D              Backslash_Else_2:
1039+ 878D A7 6C 10 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1039+ 8791 7E 6D 1A 6B
1040+ 8795              Backslash_Endif_2:
1041+ 8795 07 64                        dw      BRANCH
1042+ 8797 0A 00                        dw      Backslash_Endif_1 - $
1043+ 8799              Backslash_Else_1:
1044+ 8799 A5 63 50 00                  dw          LIT, 80, TO_IN, STORE
1044+ 879D 7E 6D 1A 6B
1045+ 87A1              Backslash_Endif_1:
1046+ 87A1 4B 69                        dw      EXIT
1047+ 87A3
1048+ 87A3              Fence_Word:
1049+ 87A3              //  ______________________________________________________________________
1050+ 87A3              //
1051+ 87A3
1052+ 87A3 00           Here_Dictionary db      0
1053+ 87A4
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
 115  87A4
 116  87A4              // now we save the compiled file so we can either run it or debug it
 117  87A4                              SAVENEX OPEN "output/main.nex", ORIGIN
 118  87A4                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 119  87A4                              SAVENEX CFG  0
 120  87A4                              SAVENEX BANK 2, 0
 121  87A4                              SAVENEX AUTO
 122  87A4                              SAVENEX CLOSE
 123  87A4
 124  87A4              //              PAGE 7 ;set 7 page to current slot
 125  87A4              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 126  87A4              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 127  87A4
 128  87A4                              SAVETAP "output/F15f.tap", CODE, "forth15f", ORIGIN, 10000
 129  87A4
 130  87A4                              SAVEBIN "output/forth15f.bin", ORIGIN, 10000
 131  87A4
 132  87A4                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
