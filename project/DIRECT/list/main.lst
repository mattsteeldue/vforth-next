# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.6 NextZXOS version
   7  0000              //  build 20211119
   8  0000              //
   9  0000              //  Direct-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2021
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000              //ORIGIN          equ     $8CC1                   // for binary comparison
  69  0000                              endif
  70  0000              //  ______________________________________________________________________
  71  0000
  72  0000                              if (  0 == DEBUGGING )
  73  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  74  0000                              endif
  75  0000              //  ______________________________________________________________________
  76  0000
  77  0000                              if (  1 == DEBUGGING )
  78  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  79  0000                              endif
  80  0000              //  ______________________________________________________________________
  81  0000
  82  0000                              DEVICE  ZXSPECTRUMNEXT
  83  0000
  84  0000                              ORG     ORIGIN
  85  62E6
  86  62E6                              if ( -1 == DEBUGGING )
  87  62E6 00 00 00...                  ds 128                            // for binary comparison
  88  62EA                              endif
  89  6366
  90  6366              //  ______________________________________________________________________
  91  6366              //
  92  6366              //  Naming convention for Label vs Forth correspondance
  93  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  94  6366              //    - Leading "0" is converted into "Z_"
  95  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  96  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  97  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  98  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  99  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 100  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 101  6366              //    - Equal sign "=" is converted in EQUAL
 102  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 103  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 104  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 105  6366              //    - Exclamation mark "!" is converted in STORE
 106  6366              //    - At-Sign "@" is converted in FETCH
 107  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 108  6366
 109  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~
 125+ 6366 ~
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
 110  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 F9 78                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 F9 78                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 79 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 C0 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 C0 87        DP_origin       dw      Fence_Word
  39+ 6386 01 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E
 100+ 639E
 101+ 639E
 102+ 639E
 103+ 639E E9                           jp      (hl)                // and jump to it
 104+ 639F                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 639F
 106+ 639F              //  ______________________________________________________________________
 107+ 639F              //
 108+ 639F              // lit          -- x
 109+ 639F              // puts on top of stack the value of the following word.
 110+ 639F              // it is compiled in colon definition before a literal number
 111+ 639F
 112+ 639F                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 639F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 639F             >
 112+ 639F             >                // dummy db directives used to calculate length of namec
 112+ 639F 4C 49 54    >                db      "LIT"
 112+ 63A2             >len_NFA         defl    $ - temp_NFA
 112+ 63A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 639F             >
 112+ 639F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A0 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A3             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A2 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A3             >
 112+ 63A3 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A5             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 112+ 63A5 ~           >
 112+ 63A5 ~           >
 112+ 63A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63A5             >
 112+ 63A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63A5
 114+ 63A5 0A                           ld      a, (bc)
 115+ 63A6 03                           inc     bc
 116+ 63A7 6F                           ld      l, a
 117+ 63A8 0A                           ld      a, (bc)
 118+ 63A9 03                           inc     bc
 119+ 63AA 67                           ld      h, a
 120+ 63AB                              psh1
 120+ 63AB E5          >                push    hl
 120+ 63AC DD E9       >                jp      (ix)
 121+ 63AE
 122+ 63AE              //  ______________________________________________________________________
 123+ 63AE              //
 124+ 63AE              // execute      i*x xt -- j*x
 125+ 63AE              // execution token. usually xt is given by CFA
 126+ 63AE
 127+ 63AE                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63AE             >
 127+ 63AE             >                // dummy db directives used to calculate length of namec
 127+ 63AE 45 58 45 43 >                db      "EXECUTE"
 127+ 63B2 55 54 45    >
 127+ 63B5             >len_NFA         defl    $ - temp_NFA
 127+ 63B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63AE             >
 127+ 63AE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63AF 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B3 55 54 45    >
 127+ 63B6             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63B5 C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63B6             >
 127+ 63B6 9F 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63B8             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 127+ 63B8 ~           >
 127+ 63B8 ~           >
 127+ 63B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63B8             >
 127+ 63B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63B8 E1                           pop     hl
 129+ 63B9 E9                           jp      (hl)
 130+ 63BA              //              jr      Exec_Ptr
 131+ 63BA
 132+ 63BA
 133+ 63BA              //  ______________________________________________________________________
 134+ 63BA              //
 135+ 63BA              // branch       --
 136+ 63BA              // unconditional branch in colon definition using the following cell as an offset from current IP value
 137+ 63BA              // compiled by ELSE, AGAIN and some other immediate words
 138+ 63BA
 139+ 63BA                              New_Def BRANCH, "BRANCH", is_code, is_normal
 139+ 63BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 63BA             >
 139+ 63BA             >                // dummy db directives used to calculate length of namec
 139+ 63BA 42 52 41 4E >                db      "BRANCH"
 139+ 63BE 43 48       >
 139+ 63C0             >len_NFA         defl    $ - temp_NFA
 139+ 63C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 63BA             >
 139+ 63BA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 63BB 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 139+ 63BF 43 48       >
 139+ 63C1             >                org     $-1                 // alter last byte of Name just above to set
 139+ 63C0 C8          >                db      {b $} | END_BIT     // msb as name end
 139+ 63C1             >
 139+ 63C1 AE 63       >                dw      last_NFA            // Link to previous definition Name
 139+ 63C3             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 63C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 139+ 63C3 ~           >
 139+ 63C3 ~           >
 139+ 63C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 63C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 63C3             >
 139+ 63C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 140+ 63C3              Branch_Ptr:
 141+ 63C3 60                           ld      h, b
 142+ 63C4 69                           ld      l, c
 143+ 63C5 5E                           ld      e, (hl)
 144+ 63C6 23                           inc     hl
 145+ 63C7 56                           ld      d, (hl)
 146+ 63C8 2B                           dec     hl                  // offset is calculated from current IP
 147+ 63C9 19                           add     hl, de
 148+ 63CA 4D                           ld      c, l
 149+ 63CB 44                           ld      b, h
 150+ 63CC                              next
 150+ 63CC DD E9       >                jp      (ix)
 151+ 63CE
 152+ 63CE
 153+ 63CE              //  ______________________________________________________________________
 154+ 63CE              //
 155+ 63CE              // 0branch      f --
 156+ 63CE              // conditional branch if the top-of-stack is ZERO or FALSE.
 157+ 63CE              // compiled by IF, UNTIL and some other immediate words
 158+ 63CE
 159+ 63CE                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 159+ 63CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 63CE             >
 159+ 63CE             >                // dummy db directives used to calculate length of namec
 159+ 63CE 30 42 52 41 >                db      "0BRANCH"
 159+ 63D2 4E 43 48    >
 159+ 63D5             >len_NFA         defl    $ - temp_NFA
 159+ 63D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 63CE             >
 159+ 63CE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 63CF 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 159+ 63D3 4E 43 48    >
 159+ 63D6             >                org     $-1                 // alter last byte of Name just above to set
 159+ 63D5 C8          >                db      {b $} | END_BIT     // msb as name end
 159+ 63D6             >
 159+ 63D6 BA 63       >                dw      last_NFA            // Link to previous definition Name
 159+ 63D8             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 63D8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 159+ 63D8 ~           >
 159+ 63D8 ~           >
 159+ 63D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 63D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 63D8             >
 159+ 63D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 63D8              ZBranch_Ptr:
 161+ 63D8 E1                           pop     hl
 162+ 63D9 7D                           ld      a, l
 163+ 63DA B4                           or      h
 164+ 63DB CA C3 63                     jp      z, Branch_Ptr
 165+ 63DE 03                           inc     bc                  // if not branch, skip offset cell.
 166+ 63DF 03                           inc     bc
 167+ 63E0                              next
 167+ 63E0 DD E9       >                jp      (ix)
 168+ 63E2
 169+ 63E2              //  ______________________________________________________________________
 170+ 63E2              //
 171+ 63E2              // (+loop)       --
 172+ 63E2              // compiled by +LOOP. it uses the top two values of return-stack to
 173+ 63E2              // keep track of index and limit, they are accessed via I and I'
 174+ 63E2                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 174+ 63E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 63E2             >
 174+ 63E2             >                // dummy db directives used to calculate length of namec
 174+ 63E2 28 2B 4C 4F >                db      "(+LOOP)"
 174+ 63E6 4F 50 29    >
 174+ 63E9             >len_NFA         defl    $ - temp_NFA
 174+ 63E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 63E2             >
 174+ 63E2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 63E3 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 174+ 63E7 4F 50 29    >
 174+ 63EA             >                org     $-1                 // alter last byte of Name just above to set
 174+ 63E9 A9          >                db      {b $} | END_BIT     // msb as name end
 174+ 63EA             >
 174+ 63EA CE 63       >                dw      last_NFA            // Link to previous definition Name
 174+ 63EC             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 63EC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 174+ 63EC ~           >
 174+ 63EC ~           >
 174+ 63EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 63EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 63EC             >
 174+ 63EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 63EC
 176+ 63EC              Loop_Ptr:
 177+ 63EC D9                           exx
 178+ 63ED                              ldhlrp                      // ld hl,rp macro 30h +Origin
 178+ 63ED 2A 96 63    >                ld      hl,(RP_Pointer)
 179+ 63F0
 180+ 63F0 C1                           pop     bc                  // bc is increment
 181+ 63F1
 182+ 63F1 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 183+ 63F2 7B                           ld      a, e                // de keeps index before increment.
 184+ 63F3 81                           add     c
 185+ 63F4 77                           ld      (hl), a
 186+ 63F5 23                           inc     hl
 187+ 63F6 56                           ld      d, (hl)
 188+ 63F7 7A                           ld      a, d
 189+ 63F8 88                           adc     b
 190+ 63F9 77                           ld      (hl),a
 191+ 63FA 23                           inc     hl
 192+ 63FB
 193+ 63FB 7B                           ld      a, e
 194+ 63FC 96                           sub     (hl)
 195+ 63FD 5F                           ld      e, a
 196+ 63FE 23                           inc     hl
 197+ 63FF 7A                           ld      a, d
 198+ 6400 9E                           sbc     (hl)
 199+ 6401 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 200+ 6402
 201+ 6402 EB                           ex      de, hl
 202+ 6403 09                           add     hl, bc
 203+ 6404
 204+ 6404 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 205+ 6406 28 01                        jr      z, Loop_NegativeIncrement
 206+ 6408 3F                               ccf
 207+ 6409              Loop_NegativeIncrement:
 208+ 6409 38 04                        jr      c, Loop_Endif
 209+ 640B D9                               exx
 210+ 640C C3 C3 63                         jp      Branch_Ptr      // perform branch consuming following cell
 211+ 640F              Loop_Endif:
 212+ 640F EB                           ex      de, hl
 213+ 6410 23                           inc     hl
 214+ 6411                              ldrphl                      // ld rp,hl macro 30h +Origin
 214+ 6411 22 96 63    >                ld      (RP_Pointer),hl
 215+ 6414 D9                           exx
 216+ 6415 03                           inc     bc                  // skip branch-style offset
 217+ 6416 03                           inc     bc
 218+ 6417                              next
 218+ 6417 DD E9       >                jp      (ix)
 219+ 6419
 220+ 6419              //  ______________________________________________________________________
 221+ 6419              //
 222+ 6419              // (loop)       n --
 223+ 6419              // same as (LOOP) but index is incremented by 1
 224+ 6419              // compiled by LOOP.
 225+ 6419                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 225+ 6419             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ 6419             >
 225+ 6419             >                // dummy db directives used to calculate length of namec
 225+ 6419 28 4C 4F 4F >                db      "(LOOP)"
 225+ 641D 50 29       >
 225+ 641F             >len_NFA         defl    $ - temp_NFA
 225+ 641F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ 6419             >
 225+ 6419 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ 641A 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 225+ 641E 50 29       >
 225+ 6420             >                org     $-1                 // alter last byte of Name just above to set
 225+ 641F A9          >                db      {b $} | END_BIT     // msb as name end
 225+ 6420             >
 225+ 6420 E2 63       >                dw      last_NFA            // Link to previous definition Name
 225+ 6422             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 6422 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 225+ 6422 ~           >
 225+ 6422 ~           >
 225+ 6422             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 6422             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 6422             >
 225+ 6422             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 6422 ED 8A 00 01                  push    1
 227+ 6426 C3 EC 63                     jp      Loop_Ptr
 228+ 6429
 229+ 6429              //  ______________________________________________________________________
 230+ 6429              //
 231+ 6429              // (?do)        lim ind --
 232+ 6429              // compiled by ?DO to make a loop checking for lim == ind first
 233+ 6429              // at run-time (?DO) must be followed by a BRANCH offset
 234+ 6429              // used to skip the loop if lim == ind
 235+ 6429                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 235+ 6429             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 235+ 6429             >
 235+ 6429             >                // dummy db directives used to calculate length of namec
 235+ 6429 28 3F 44 4F >                db      "(?DO)"
 235+ 642D 29          >
 235+ 642E             >len_NFA         defl    $ - temp_NFA
 235+ 642E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 235+ 6429             >
 235+ 6429 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 235+ 642A 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 235+ 642E 29          >
 235+ 642F             >                org     $-1                 // alter last byte of Name just above to set
 235+ 642E A9          >                db      {b $} | END_BIT     // msb as name end
 235+ 642F             >
 235+ 642F 19 64       >                dw      last_NFA            // Link to previous definition Name
 235+ 6431             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 235+ 6431 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 235+ 6431 ~           >
 235+ 6431 ~           >
 235+ 6431             >                endif           ; ok        // for other definitions it "points" the correct handler
 235+ 6431             >                // Use of "; ok" to suppress "warning[fwdref]"
 235+ 6431             >
 235+ 6431             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 6431 D1                           pop     de                  // de has the index
 237+ 6432 E1                           pop     hl                  // hl has the limit
 238+ 6433 E5                           push    hl
 239+ 6434 D5                           push    de
 240+ 6435 A7                           and     a                   // reset carry flag
 241+ 6436 ED 52                        sbc     hl, de              // compute limit - index
 242+ 6438 20 05                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 243+ 643A D1                               pop     de
 244+ 643B E1                               pop     hl
 245+ 643C
 246+ 643C C3 C3 63                         jp      Branch_Ptr          // perform branch consuming following cell
 247+ 643F              Do_Ptr:
 248+ 643F                              ldhlrp                      // prepare RP
 248+ 643F 2A 96 63    >                ld      hl,(RP_Pointer)
 249+ 6442 2B                           dec     hl
 250+ 6443 2B                           dec     hl
 251+ 6444 2B                           dec     hl
 252+ 6445 2B                           dec     hl
 253+ 6446                              ldrphl
 253+ 6446 22 96 63    >                ld      (RP_Pointer),hl
 254+ 6449
 255+ 6449                              // store index as top RP
 256+ 6449 D1                           pop     de
 257+ 644A 73                           ld      (hl), e
 258+ 644B 23                           inc     hl
 259+ 644C 72                           ld      (hl), d
 260+ 644D 23                           inc     hl
 261+ 644E                              // stores lim as second from top RP
 262+ 644E D1                           pop     de
 263+ 644F 73                           ld      (hl), e
 264+ 6450 23                           inc     hl
 265+ 6451 72                           ld      (hl), d
 266+ 6452
 267+ 6452                              // skip branch-style offseet
 268+ 6452 03                           inc     bc
 269+ 6453 03                           inc     bc
 270+ 6454                              next
 270+ 6454 DD E9       >                jp      (ix)
 271+ 6456
 272+ 6456              //  ______________________________________________________________________
 273+ 6456              //
 274+ 6456              // (do)        lim ind --
 275+ 6456              // compiled by DO to make a loop checking for lim == ind first
 276+ 6456              // this is a simpler version of (?DO)
 277+ 6456                              New_Def C_DO, "(DO)", is_code, is_normal
 277+ 6456             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 277+ 6456             >
 277+ 6456             >                // dummy db directives used to calculate length of namec
 277+ 6456 28 44 4F 29 >                db      "(DO)"
 277+ 645A             >len_NFA         defl    $ - temp_NFA
 277+ 645A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 277+ 6456             >
 277+ 6456 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 277+ 6457 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 277+ 645B             >                org     $-1                 // alter last byte of Name just above to set
 277+ 645A A9          >                db      {b $} | END_BIT     // msb as name end
 277+ 645B             >
 277+ 645B 29 64       >                dw      last_NFA            // Link to previous definition Name
 277+ 645D             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 277+ 645D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 277+ 645D ~           >
 277+ 645D ~           >
 277+ 645D             >                endif           ; ok        // for other definitions it "points" the correct handler
 277+ 645D             >                // Use of "; ok" to suppress "warning[fwdref]"
 277+ 645D             >
 277+ 645D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 278+ 645D 0B                           dec     bc                  // prepare IP beforehand
 279+ 645E 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 280+ 645F C3 3F 64                     jp      Do_Ptr
 281+ 6462
 282+ 6462              //  ______________________________________________________________________
 283+ 6462              //
 284+ 6462              // i            -- n
 285+ 6462              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 286+ 6462              // the current value of the index-loop
 287+ 6462                              New_Def I, "I", is_code, is_normal
 287+ 6462             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 287+ 6462             >
 287+ 6462             >                // dummy db directives used to calculate length of namec
 287+ 6462 49          >                db      "I"
 287+ 6463             >len_NFA         defl    $ - temp_NFA
 287+ 6463             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 287+ 6462             >
 287+ 6462 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 287+ 6463 49          >                db      "I"               // name string in 7-bit ascii, but
 287+ 6464             >                org     $-1                 // alter last byte of Name just above to set
 287+ 6463 C9          >                db      {b $} | END_BIT     // msb as name end
 287+ 6464             >
 287+ 6464 56 64       >                dw      last_NFA            // Link to previous definition Name
 287+ 6466             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 287+ 6466 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 287+ 6466 ~           >
 287+ 6466 ~           >
 287+ 6466             >                endif           ; ok        // for other definitions it "points" the correct handler
 287+ 6466             >                // Use of "; ok" to suppress "warning[fwdref]"
 287+ 6466             >
 287+ 6466             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 288+ 6466              I_Ptr:
 289+ 6466
 290+ 6466                              ldhlrp
 290+ 6466 2A 96 63    >                ld      hl,(RP_Pointer)
 291+ 6469              I_Ptr_prime
 292+ 6469 5E                           ld      e, (hl)
 293+ 646A 23                           inc     hl
 294+ 646B 56                           ld      d, (hl)
 295+ 646C D5                           push    de
 296+ 646D                              next
 296+ 646D DD E9       >                jp      (ix)
 297+ 646F
 298+ 646F
 299+ 646F              //  ______________________________________________________________________
 300+ 646F              //
 301+ 646F              // i'            -- n
 302+ 646F              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 303+ 646F              // the limit of the index-loop
 304+ 646F
 305+ 646F                              New_Def II, "I'", is_code, is_normal
 305+ 646F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 305+ 646F             >
 305+ 646F             >                // dummy db directives used to calculate length of namec
 305+ 646F 49 27       >                db      "I'"
 305+ 6471             >len_NFA         defl    $ - temp_NFA
 305+ 6471             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 305+ 646F             >
 305+ 646F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 305+ 6470 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 305+ 6472             >                org     $-1                 // alter last byte of Name just above to set
 305+ 6471 A7          >                db      {b $} | END_BIT     // msb as name end
 305+ 6472             >
 305+ 6472 62 64       >                dw      last_NFA            // Link to previous definition Name
 305+ 6474             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 305+ 6474 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 305+ 6474 ~           >
 305+ 6474 ~           >
 305+ 6474             >                endif           ; ok        // for other definitions it "points" the correct handler
 305+ 6474             >                // Use of "; ok" to suppress "warning[fwdref]"
 305+ 6474             >
 305+ 6474             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 306+ 6474                              ldhlrp
 306+ 6474 2A 96 63    >                ld      hl,(RP_Pointer)
 307+ 6477 23                           inc     hl
 308+ 6478 23                           inc     hl
 309+ 6479 18 EE                        jr      I_Ptr_prime
 310+ 647B
 311+ 647B
 312+ 647B              //  ______________________________________________________________________
 313+ 647B              //
 314+ 647B              // digit        c n -- u 1  |  0
 315+ 647B              // convert a character c using base n
 316+ 647B              // returns a unsigned number and a true flag
 317+ 647B              // or just a false flag if the conversion fails
 318+ 647B                              New_Def DIGIT, "DIGIT", is_code, is_normal
 318+ 647B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ 647B             >
 318+ 647B             >                // dummy db directives used to calculate length of namec
 318+ 647B 44 49 47 49 >                db      "DIGIT"
 318+ 647F 54          >
 318+ 6480             >len_NFA         defl    $ - temp_NFA
 318+ 6480             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ 647B             >
 318+ 647B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ 647C 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 318+ 6480 54          >
 318+ 6481             >                org     $-1                 // alter last byte of Name just above to set
 318+ 6480 D4          >                db      {b $} | END_BIT     // msb as name end
 318+ 6481             >
 318+ 6481 6F 64       >                dw      last_NFA            // Link to previous definition Name
 318+ 6483             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 6483 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 318+ 6483 ~           >
 318+ 6483 ~           >
 318+ 6483             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 6483             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 6483             >
 318+ 6483             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 6483 E1                           pop     hl                  // l has the base
 320+ 6484 D1                           pop     de                  // e has the digit
 321+ 6485 7B                           ld      a, e
 322+ 6486 FE 60                        cp      $60                 // check if lowercase
 323+ 6488 38 02                        jr      c, Digit_Uppercase
 324+ 648A D6 20                            sub     $20                 // quick'n'dirty uppercase
 325+ 648C              Digit_Uppercase:
 326+ 648C D6 30                        sub     $30
 327+ 648E 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 328+ 6490 FE 0A                            cp      $0A
 329+ 6492 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 330+ 6494 D6 07                                sub     7                   // try hex and subtract 7
 331+ 6496 FE 0A                                cp      $0A
 332+ 6498 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 333+ 649A
 334+ 649A              Digit_Decimal:
 335+ 649A                              // compare digit
 336+ 649A BD                           cp      l                   // compare with base
 337+ 649B
 338+ 649B 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 339+ 649D 5F                               ld      e, a                // digit is returned as second from TOS
 340+ 649E 21 01 00                         ld      hl, 1
 341+ 64A1
 342+ 64A1                                  psh2
 342+ 64A1 D5          >                push    de
 342+ 64A2 E5          >                push    hl
 342+ 64A3 DD E9       >                jp      (ix)
 343+ 64A5              Digit_Fail:
 344+ 64A5 21 00 00                     ld      hl, 0
 345+ 64A8                              psh1
 345+ 64A8 E5          >                push    hl
 345+ 64A9 DD E9       >                jp      (ix)
 346+ 64AB
 347+ 64AB              //  ______________________________________________________________________
 348+ 64AB              //
 349+ 64AB              //  parametric uppercase routine
 350+ 64AB              //  depending on the following op-code the routine can be by-passed
 351+ 64AB              //  changing the behaviour of some callers.
 352+ 64AB              //  If it is "ret" then the system is Case-Sensitive
 353+ 64AB              //  If it is "Nop" then the system is Case-Insensitive
 354+ 64AB              //  Only A register is touched.
 355+ 64AB 00           Case_Sensitive: nop                         // Default is case-insensitive.
 356+ 64AC              Case_Upper:
 357+ 64AC FE 61                        cp      LC_A_CHAR           // lower-case "a"
 358+ 64AE D8                           ret     c                   // no change if A < "a"
 359+ 64AF FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 360+ 64B1 D0                           ret     nc                  // no change if A > "z"
 361+ 64B2 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 362+ 64B4 C9                           ret
 363+ 64B5
 364+ 64B5              //  ______________________________________________________________________
 365+ 64B5              //
 366+ 64B5              //  caseon      --
 367+ 64B5              // set system case-sensitivity on
 368+ 64B5              // it patches a RET/NOP at the beginning of the uppercase-routine
 369+ 64B5                              New_Def CASEON, "CASEON", is_code, is_normal
 369+ 64B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ 64B5             >
 369+ 64B5             >                // dummy db directives used to calculate length of namec
 369+ 64B5 43 41 53 45 >                db      "CASEON"
 369+ 64B9 4F 4E       >
 369+ 64BB             >len_NFA         defl    $ - temp_NFA
 369+ 64BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ 64B5             >
 369+ 64B5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ 64B6 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 369+ 64BA 4F 4E       >
 369+ 64BC             >                org     $-1                 // alter last byte of Name just above to set
 369+ 64BB CE          >                db      {b $} | END_BIT     // msb as name end
 369+ 64BC             >
 369+ 64BC 7B 64       >                dw      last_NFA            // Link to previous definition Name
 369+ 64BE             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 64BE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 369+ 64BE ~           >
 369+ 64BE ~           >
 369+ 64BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 64BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 64BE             >
 369+ 64BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 64BE 3E C9                        ld      a, $C9              // "ret"
 371+ 64C0 32 AB 64                     ld      (Case_Sensitive), a
 372+ 64C3                              next
 372+ 64C3 DD E9       >                jp      (ix)
 373+ 64C5
 374+ 64C5              //  ______________________________________________________________________
 375+ 64C5              //
 376+ 64C5              //  caseoff     --
 377+ 64C5              // set system case-sensitivity on
 378+ 64C5              // it patches a RET/NOP at the beginning of the uppercase-routine
 379+ 64C5                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 379+ 64C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ 64C5             >
 379+ 64C5             >                // dummy db directives used to calculate length of namec
 379+ 64C5 43 41 53 45 >                db      "CASEOFF"
 379+ 64C9 4F 46 46    >
 379+ 64CC             >len_NFA         defl    $ - temp_NFA
 379+ 64CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ 64C5             >
 379+ 64C5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ 64C6 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 379+ 64CA 4F 46 46    >
 379+ 64CD             >                org     $-1                 // alter last byte of Name just above to set
 379+ 64CC C6          >                db      {b $} | END_BIT     // msb as name end
 379+ 64CD             >
 379+ 64CD B5 64       >                dw      last_NFA            // Link to previous definition Name
 379+ 64CF             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 64CF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 379+ 64CF ~           >
 379+ 64CF ~           >
 379+ 64CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 64CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 64CF             >
 379+ 64CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 64CF 3E 00                        ld      a, $00              // "nop"
 381+ 64D1 32 AB 64                     ld      (Case_Sensitive), a
 382+ 64D4                              next
 382+ 64D4 DD E9       >                jp      (ix)
 383+ 64D6
 384+ 64D6              //  ______________________________________________________________________
 385+ 64D6              //
 386+ 64D6              //  upper       c1 -- c1 | c2
 387+ 64D6              // character on top of stack is forced to Uppercase.
 388+ 64D6                              New_Def UPPER, "UPPER", is_code, is_normal
 388+ 64D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ 64D6             >
 388+ 64D6             >                // dummy db directives used to calculate length of namec
 388+ 64D6 55 50 50 45 >                db      "UPPER"
 388+ 64DA 52          >
 388+ 64DB             >len_NFA         defl    $ - temp_NFA
 388+ 64DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ 64D6             >
 388+ 64D6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ 64D7 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 388+ 64DB 52          >
 388+ 64DC             >                org     $-1                 // alter last byte of Name just above to set
 388+ 64DB D2          >                db      {b $} | END_BIT     // msb as name end
 388+ 64DC             >
 388+ 64DC C5 64       >                dw      last_NFA            // Link to previous definition Name
 388+ 64DE             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 64DE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 388+ 64DE ~           >
 388+ 64DE ~           >
 388+ 64DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 64DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 64DE             >
 388+ 64DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 64DE E1                           pop     hl
 390+ 64DF 7D                           ld      a, l
 391+ 64E0 CD AC 64                     call    Case_Upper
 392+ 64E3 6F                           ld      l, a
 393+ 64E4
 394+ 64E4                              psh1
 394+ 64E4 E5          >                push    hl
 394+ 64E5 DD E9       >                jp      (ix)
 395+ 64E7
 396+ 64E7              //  ______________________________________________________________________
 397+ 64E7              //
 398+ 64E7              // (find)       addr voc -- addr 0 | cfa b 1
 399+ 64E7              // vocabulary search,
 400+ 64E7              // - voc is starting word's NFA
 401+ 64E7              // - addr is the string to be searched for
 402+ 64E7              // On success, it returns the CFA of found word, the first NFA byte
 403+ 64E7              // (which contains length and some flags) and a true flag.
 404+ 64E7              // On fail, a false flag  (no more: leaves addr unchanged)
 405+ 64E7                              New_Def C_FIND, "(FIND)", is_code, is_normal
 405+ 64E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 405+ 64E7             >
 405+ 64E7             >                // dummy db directives used to calculate length of namec
 405+ 64E7 28 46 49 4E >                db      "(FIND)"
 405+ 64EB 44 29       >
 405+ 64ED             >len_NFA         defl    $ - temp_NFA
 405+ 64ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 405+ 64E7             >
 405+ 64E7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 405+ 64E8 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 405+ 64EC 44 29       >
 405+ 64EE             >                org     $-1                 // alter last byte of Name just above to set
 405+ 64ED A9          >                db      {b $} | END_BIT     // msb as name end
 405+ 64EE             >
 405+ 64EE D6 64       >                dw      last_NFA            // Link to previous definition Name
 405+ 64F0             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 405+ 64F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 405+ 64F0 ~           >
 405+ 64F0 ~           >
 405+ 64F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 405+ 64F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 405+ 64F0             >
 405+ 64F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 406+ 64F0                                                              // de has dictionary pointer
 407+ 64F0 D1                               pop     de
 408+ 64F1              Find_VocabularyLoop:
 409+ 64F1 E1                               pop     hl                  // string pointer to search for
 410+ 64F2 E5                               push    hl                  // keep it on stack too for the end.
 411+ 64F3 1A                               ld      a, (de)             // save NFA length byte
 412+ 64F4 08                               ex      af,af'              // for later use (!)
 413+ 64F5 1A                               ld      a, (de)             // reload NFA length byte
 414+ 64F6 AE                               xor     (hl)                // check if same length
 415+ 64F7 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 416+ 64F9                                  // word an text haven't the same length, skip to next vocabulary entry
 417+ 64F9 20 2C                            jr      nz, Find_DifferentLenght
 418+ 64FB
 419+ 64FB              Find_ThisWord:  // begin loop
 420+ 64FB 23                                   inc     hl
 421+ 64FC 13                                   inc     de
 422+ 64FD 1A                                   ld      a, (de)
 423+ 64FE                                      // case insensitive option - begin
 424+ 64FE C5                                   push    bc
 425+ 64FF E6 80                                and     $80                 // split A in msb and the rest
 426+ 6501 47                                   ld      b, a
 427+ 6502 1A                                   ld      a, (de)
 428+ 6503 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 429+ 6505 CD AB 64                             call    Case_Sensitive      // uppercase routine
 430+ 6508 4F                                   ld      c, a
 431+ 6509 7E                                   ld      a, (hl)
 432+ 650A CD AB 64                             call    Case_Sensitive      // uppercase routine
 433+ 650D A9                                   xor     c
 434+ 650E A8                                   xor     b
 435+ 650F C1                                   pop     bc
 436+ 6510                                      // case insensitive option - end
 437+ 6510 87                                   add     a                   // ignore msb during compare
 438+ 6511 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 439+ 6513
 440+ 6513                                  // loop back until last byte msb is found set
 441+ 6513                                  // that bit marks the ending char of this word
 442+ 6513 30 E6                            jr      nc, Find_ThisWord
 443+ 6515
 444+ 6515                                  // match found !
 445+ 6515 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 446+ 6518 19                                   add     hl, de
 447+ 6519 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 448+ 651A 08                                   ex      af, af'             // retrieve NFA byte (!)
 449+ 651B 5F                                   ld      e, a
 450+ 651C 16 00                                ld      d, 0
 451+ 651E
 452+ 651E
 453+ 651E 21 01 00                             ld      hl, 1
 454+ 6521                                      psh2
 454+ 6521 D5          >                push    de
 454+ 6522 E5          >                push    hl
 454+ 6523 DD E9       >                jp      (ix)
 455+ 6525
 456+ 6525              Find_DidntMatch: // didn't match (*)
 457+ 6525 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 458+ 6527
 459+ 6527              Find_DifferentLenght:
 460+ 6527                              // consume chars until the end of the word
 461+ 6527                              // that is last byte msb is found set
 462+ 6527 13                               inc     de
 463+ 6528 1A                               ld      a, (de)
 464+ 6529 87                               add     a, a
 465+ 652A 30 FB                        jr      nc, Find_DifferentLenght
 466+ 652C
 467+ 652C              Find_WordEnd:   // word-end  found (**)
 468+ 652C                              // take LFA and use it
 469+ 652C 13                           inc     de
 470+ 652D EB                           ex      de, hl
 471+ 652E 5E                           ld      e, (hl)
 472+ 652F 23                           inc     hl
 473+ 6530 56                           ld      d, (hl)
 474+ 6531 7A                           ld      a, d
 475+ 6532 B3                           or      e
 476+ 6533
 477+ 6533                          // loop until end of vocabulary
 478+ 6533 20 BC                    jr      nz, Find_VocabularyLoop
 479+ 6535
 480+ 6535 E1                       pop     hl              // with this, it leaves addr unchanged
 481+ 6536 21 00 00                 ld      hl, FALSE_FLAG
 482+ 6539
 483+ 6539                          psh1
 483+ 6539 E5          >                push    hl
 483+ 653A DD E9       >                jp      (ix)
 484+ 653C
 485+ 653C              //  ______________________________________________________________________
 486+ 653C              //
 487+ 653C              // enclose      a c -- a  n1 n2 n3
 488+ 653C              // starting from a, using delimiter c, determines the offsets:
 489+ 653C              //   n1   the first character non-delimiter
 490+ 653C              //   n2   the first delimiter after the text
 491+ 653C              //   n3   the first character non enclosed.
 492+ 653C              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 493+ 653C              // an uncoditional delimiter.
 494+ 653C              // Examples:
 495+ 653C              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 496+ 653C              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 497+ 653C              // iii:	c  c  'nul'          -- 2  3  2
 498+ 653C                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 498+ 653C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 498+ 653C             >
 498+ 653C             >                // dummy db directives used to calculate length of namec
 498+ 653C 45 4E 43 4C >                db      "ENCLOSE"
 498+ 6540 4F 53 45    >
 498+ 6543             >len_NFA         defl    $ - temp_NFA
 498+ 6543             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 498+ 653C             >
 498+ 653C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 498+ 653D 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 498+ 6541 4F 53 45    >
 498+ 6544             >                org     $-1                 // alter last byte of Name just above to set
 498+ 6543 C5          >                db      {b $} | END_BIT     // msb as name end
 498+ 6544             >
 498+ 6544 E7 64       >                dw      last_NFA            // Link to previous definition Name
 498+ 6546             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 498+ 6546 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 498+ 6546 ~           >
 498+ 6546 ~           >
 498+ 6546             >                endif           ; ok        // for other definitions it "points" the correct handler
 498+ 6546             >                // Use of "; ok" to suppress "warning[fwdref]"
 498+ 6546             >
 498+ 6546             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 499+ 6546 D1                           pop     de                  //  e has the character
 500+ 6547 E1                           pop     hl                  // hl has the string address
 501+ 6548 E5                           push    hl
 502+ 6549 7B                           ld      a, e
 503+ 654A 11 FF FF                     ld      de, -1              // let's start from -1
 504+ 654D 2B                           dec     hl
 505+ 654E              Enclose_NonDelimiter:
 506+ 654E                              // find first non delimiter
 507+ 654E 23                               inc     hl
 508+ 654F 13                               inc     de
 509+ 6550 BE                               cp      (hl)
 510+ 6551 28 FB                        jr      z, Enclose_NonDelimiter
 511+ 6553 D5                           push    de
 512+ 6554
 513+ 6554 C5                           push    bc                  // save Instruction Pointer
 514+ 6555
 515+ 6555 4F                           ld      c, a                // save char
 516+ 6556 7E                           ld      a, (hl)
 517+ 6557 A7                           and     a                   // stop if 0x00
 518+ 6558 20 07                        jr      nz, Enclose_NextChar
 519+ 655A
 520+ 655A                              /// case iii. no more character in string
 521+ 655A C1                               pop     bc                  // restore Instruction Pointer
 522+ 655B 13                               inc     de
 523+ 655C D5                               push    de
 524+ 655D 1B                               dec     de
 525+ 655E D5                               push    de
 526+ 655F                                  next
 526+ 655F DD E9       >                jp      (ix)
 527+ 6561              Enclose_NextChar:
 528+ 6561 79                               ld      a, c
 529+ 6562 23                               inc     hl
 530+ 6563 13                               inc     de
 531+ 6564 BE                               cp      (hl)
 532+ 6565 20 06                            jr      nz, Enclose_NonSeparator
 533+ 6567
 534+ 6567                                      // case i. first non enclosed
 535+ 6567 C1                                   pop     bc                  // restore Instruction Pointer
 536+ 6568 D5                                   push    de
 537+ 6569 13                                   inc     de
 538+ 656A D5                                   push    de
 539+ 656B                                      next
 539+ 656B DD E9       >                jp      (ix)
 540+ 656D              Enclose_NonSeparator:
 541+ 656D 7E                               ld      a, (hl)
 542+ 656E A7                               and     a
 543+ 656F 20 F0                        jr      nz, Enclose_NextChar
 544+ 6571
 545+ 6571                              // case ii. separator & terminator
 546+ 6571 C1                           pop     bc                  // restore Instruction Pointer
 547+ 6572 D5                           push    de
 548+ 6573 D5                           push    de
 549+ 6574                              next
 549+ 6574 DD E9       >                jp      (ix)
 550+ 6576
 551+ 6576              //  ______________________________________________________________________
 552+ 6576              //
 553+ 6576              // (map)        a2 a1 n c1 -- c2
 554+ 6576              // translate character c1 using mapping string a2 and a2
 555+ 6576              // if c1 is not present within string a1 then
 556+ 6576              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 557+ 6576                              New_Def C_MAP, "(MAP)", is_code, is_normal
 557+ 6576             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 557+ 6576             >
 557+ 6576             >                // dummy db directives used to calculate length of namec
 557+ 6576 28 4D 41 50 >                db      "(MAP)"
 557+ 657A 29          >
 557+ 657B             >len_NFA         defl    $ - temp_NFA
 557+ 657B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 557+ 6576             >
 557+ 6576 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 557+ 6577 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 557+ 657B 29          >
 557+ 657C             >                org     $-1                 // alter last byte of Name just above to set
 557+ 657B A9          >                db      {b $} | END_BIT     // msb as name end
 557+ 657C             >
 557+ 657C 3C 65       >                dw      last_NFA            // Link to previous definition Name
 557+ 657E             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 557+ 657E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 557+ 657E ~           >
 557+ 657E ~           >
 557+ 657E             >                endif           ; ok        // for other definitions it "points" the correct handler
 557+ 657E             >                // Use of "; ok" to suppress "warning[fwdref]"
 557+ 657E             >
 557+ 657E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 558+ 657E D9                           exx
 559+ 657F E1                           pop     hl
 560+ 6580 7D                           ld      a, l
 561+ 6581 C1                           pop     bc
 562+ 6582 E1                           pop     hl
 563+ 6583 50                           ld      d, b
 564+ 6584 59                           ld      e, c
 565+ 6585 ED B1                        cpir
 566+ 6587 E1                           pop     hl
 567+ 6588 20 05                        jr      nz, C_Map_Then
 567+ 658A
 568+ 658A 19                               add     hl, de
 569+ 658B 2B                               dec     hl
 570+ 658C ED 42                            sbc     hl, bc
 571+ 658E 7E                               ld      a, (hl)
 572+ 658F              C_Map_Then:
 573+ 658F 6F                           ld      l, a
 574+ 6590 26 00                        ld      h, 0
 575+ 6592 E5                           push    hl
 576+ 6593 D9                           exx
 577+ 6594                              next
 577+ 6594 DD E9       >                jp      (ix)
 578+ 6596
 579+ 6596              //  ______________________________________________________________________
 580+ 6596              //
 581+ 6596              // (compare)    a1 a2 n -- b
 582+ 6596              // this word performs a lexicographic compare of n bytes of text at address a1
 583+ 6596              // with n bytes of text at address a2. It returns numeric a value:
 584+ 6596              //  0 : if strings are equal
 585+ 6596              // +1 : if string at a1 greater than string at a2
 586+ 6596              // -1 : if string at a1 less than string at a2
 587+ 6596              // strings can be 256 bytes in length at most.
 588+ 6596                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 588+ 6596             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 588+ 6596             >
 588+ 6596             >                // dummy db directives used to calculate length of namec
 588+ 6596 28 43 4F 4D >                db      "(COMPARE)"
 588+ 659A 50 41 52 45 >
 588+ 659E 29          >
 588+ 659F             >len_NFA         defl    $ - temp_NFA
 588+ 659F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 588+ 6596             >
 588+ 6596 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 588+ 6597 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 588+ 659B 50 41 52 45 >
 588+ 659F 29          >
 588+ 65A0             >                org     $-1                 // alter last byte of Name just above to set
 588+ 659F A9          >                db      {b $} | END_BIT     // msb as name end
 588+ 65A0             >
 588+ 65A0 76 65       >                dw      last_NFA            // Link to previous definition Name
 588+ 65A2             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 588+ 65A2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 588+ 65A2 ~           >
 588+ 65A2 ~           >
 588+ 65A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 588+ 65A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 588+ 65A2             >
 588+ 65A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 589+ 65A2 D9                           exx
 590+ 65A3 E1                           pop     hl                  // Number of bytes
 591+ 65A4 7D                           ld      a, l
 592+ 65A5 E1                           pop     hl                  // hl points string a2
 593+ 65A6 D1                           pop     de                  // hl points string a1
 594+ 65A7              //              push    bc                  // Instruction pointer on stack
 595+ 65A7 47                           ld      b, a
 596+ 65A8              C_Compare_Loop:
 597+ 65A8 7E                               ld      a, (hl)
 598+ 65A9 CD AB 64                         call    Case_Sensitive
 599+ 65AC 4F                               ld      c, a
 600+ 65AD 1A                               ld      a, (de)
 601+ 65AE CD AB 64                         call    Case_Sensitive
 602+ 65B1 B9                               cp      c
 603+ 65B2 13                               inc     de
 604+ 65B3 23                               inc     hl
 605+ 65B4 28 0E                            jr      z, C_Compare_Equal
 606+ 65B6 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 607+ 65B8 21 01 00                                 ld      hl, 1               // a1 gt a2
 608+ 65BB 18 03                                jr      C_Compare_Then      // Else
 609+ 65BD              C_Compare_NotLessThan:
 610+ 65BD 21 FF FF                                 ld      hl, -1              // a1 lt a2
 611+ 65C0              C_Compare_Then:                                 // Endif
 612+ 65C0              //                      pop     bc              // restore Instruction Pointer
 613+ 65C0 E5                                   push    hl
 614+ 65C1 D9                                   exx
 615+ 65C2
 616+ 65C2                                      next
 616+ 65C2 DD E9       >                jp      (ix)
 617+ 65C4
 618+ 65C4              C_Compare_Equal:
 619+ 65C4 10 E2                        djnz    C_Compare_Loop
 620+ 65C6 21 00 00                     ld      hl, 0               // a1 eq a2
 621+ 65C9              //              pop     bc                  // restore Instruction Pointer
 622+ 65C9 E5                           push    hl
 623+ 65CA D9                           exx
 624+ 65CB
 625+ 65CB                              next
 625+ 65CB DD E9       >                jp      (ix)
 626+ 65CD
 627+ 65CD              //  ______________________________________________________________________
 628+ 65CD              //
 629+ 65CD              // emitc        c --
 630+ 65CD              // low level emit, calls ROM routine at #10 to send a character to
 631+ 65CD              // the the current channel (see SELECT to change stream-channel)
 632+ 65CD                              New_Def EMITC, "EMITC", is_code, is_normal
 632+ 65CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 632+ 65CD             >
 632+ 65CD             >                // dummy db directives used to calculate length of namec
 632+ 65CD 45 4D 49 54 >                db      "EMITC"
 632+ 65D1 43          >
 632+ 65D2             >len_NFA         defl    $ - temp_NFA
 632+ 65D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 632+ 65CD             >
 632+ 65CD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 632+ 65CE 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 632+ 65D2 43          >
 632+ 65D3             >                org     $-1                 // alter last byte of Name just above to set
 632+ 65D2 C3          >                db      {b $} | END_BIT     // msb as name end
 632+ 65D3             >
 632+ 65D3 96 65       >                dw      last_NFA            // Link to previous definition Name
 632+ 65D5             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 632+ 65D5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 632+ 65D5 ~           >
 632+ 65D5 ~           >
 632+ 65D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 632+ 65D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 632+ 65D5             >
 632+ 65D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 633+ 65D5 E1                           pop     hl
 634+ 65D6 7D                           ld      a, l
 635+ 65D7              Emitc_Ptr:
 636+ 65D7 C5                           push    bc
 637+ 65D8 DD E5                        push    ix
 638+ 65DA D7                           rst     $10
 639+ 65DB DD E1                        pop     ix
 640+ 65DD C1                           pop     bc
 641+ 65DE 3E FF                        ld      a, 255            // max possible
 642+ 65E0 32 8C 5C                     ld      (SCR_CT), a
 643+ 65E3
 644+ 65E3                              next
 644+ 65E3 DD E9       >                jp      (ix)
 645+ 65E5
 646+ 65E5              Emitc_Vec:
 647+ 65E5 28 66                        dw      C_Emit_Printable  // comma
 648+ 65E7 2E 66                        dw      C_Emit_Bel        // bel
 649+ 65E9 28 66                        dw      C_Emit_Printable  // bs
 650+ 65EB 43 66                        dw      C_Emit_Tab        // tab
 651+ 65ED 28 66                        dw      C_Emit_Printable  // cr
 652+ 65EF 49 66                        dw      C_Emit_NL         // lf (unix newline)
 653+ 65F1 28 66                        dw      C_Emit_Printable  // blank
 654+ 65F3 28 66                        dw      C_Emit_Printable  // blank
 655+ 65F5
 656+ 65F5              Emit_Selector_Start:
 657+ 65F5 06                           db      $06                 // comma
 658+ 65F6 07                           db      $07                 // bel
 659+ 65F7 08                           db      $08                 // bs
 660+ 65F8 09                           db      $09                 // tab
 661+ 65F9 0D                           db      $0D                 // cr
 662+ 65FA 0A                           db      $0A                 // lf (unix newline)
 663+ 65FB 20                           db      $20
 664+ 65FC              Emit_Selector_End:
 665+ 65FC 20                           db      $20
 666+ 65FD
 667+ 65FD              //  ______________________________________________________________________
 668+ 65FD              //
 669+ 65FD              // (?emit)      c1 -- c2 | c1
 670+ 65FD              // decode a character to be sent via EMIT
 671+ 65FD              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 672+ 65FD              // the routine should resolve anything and convert the character anyway.
 673+ 65FD                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 673+ 65FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 673+ 65FD             >
 673+ 65FD             >                // dummy db directives used to calculate length of namec
 673+ 65FD 28 3F 45 4D >                db      "(?EMIT)"
 673+ 6601 49 54 29    >
 673+ 6604             >len_NFA         defl    $ - temp_NFA
 673+ 6604             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 673+ 65FD             >
 673+ 65FD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 673+ 65FE 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 673+ 6602 49 54 29    >
 673+ 6605             >                org     $-1                 // alter last byte of Name just above to set
 673+ 6604 A9          >                db      {b $} | END_BIT     // msb as name end
 673+ 6605             >
 673+ 6605 CD 65       >                dw      last_NFA            // Link to previous definition Name
 673+ 6607             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 673+ 6607 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 673+ 6607 ~           >
 673+ 6607 ~           >
 673+ 6607             >                endif           ; ok        // for other definitions it "points" the correct handler
 673+ 6607             >                // Use of "; ok" to suppress "warning[fwdref]"
 673+ 6607             >
 673+ 6607             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 674+ 6607 D1                           pop     de
 675+ 6608 7B                           ld      a, e                //  de has c1
 676+ 6609 E6 7F                        and     $7F                 // 7-bit ascii only
 677+ 660B C5                           push    bc                  // save Instruction Pointer
 678+ 660C 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 679+ 660F 21 FC 65                     ld      hl, Emit_Selector_End
 680+ 6612 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 681+ 6614 20 0B                        jr      nz, C_Emit_Not_Found
 682+ 6616                                  // Found then decode it
 683+ 6616 21 E5 65                         ld      hl, Emitc_Vec
 684+ 6619 09                               add     hl, bc
 685+ 661A 09                               add     hl, bc
 686+ 661B 5E                               ld      e, (hl)
 687+ 661C 23                               inc     hl
 688+ 661D 56                               ld      d, (hl)
 689+ 661E EB                               ex      de, hl
 690+ 661F C1                               pop     bc                  // restore Instruction Pointer
 691+ 6620 E9                               jp      (hl)                // one of the following labels
 692+ 6621              C_Emit_Not_Found:
 693+ 6621 C1                           pop     bc                  // restore Instruction Pointer
 694+ 6622 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 695+ 6624 30 02                        jr      nc, C_Emit_Printable
 696+ 6626 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 697+ 6628              C_Emit_Printable:
 698+ 6628 6F                           ld      l, a
 699+ 6629 26 00                        ld      h, 0
 700+ 662B
 701+ 662B                              psh1
 701+ 662B E5          >                push    hl
 701+ 662C DD E9       >                jp      (ix)
 702+ 662E
 703+ 662E              C_Emit_Bel:
 704+ 662E C5                           push    bc                  // save Instruction Pointer
 705+ 662F 11 00 01                     ld      de, $0100
 706+ 6632 21 00 02                     ld      hl, $0200
 707+ 6635 DD E5                        push    ix                  // save Next Pointer
 708+ 6637 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 709+ 663A DD E1                        pop     ix                  // restore Next Pointer
 710+ 663C C1                           pop     bc                  // restore Instruction Pointer
 711+ 663D 21 00 00                     ld      hl, NUL_CHAR
 712+ 6640
 713+ 6640                              psh1
 713+ 6640 E5          >                push    hl
 713+ 6641 DD E9       >                jp      (ix)
 714+ 6643
 715+ 6643 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 716+ 6646
 717+ 6646                              psh1
 717+ 6646 E5          >                push    hl
 717+ 6647 DD E9       >                jp      (ix)
 718+ 6649
 719+ 6649 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 720+ 664C
 721+ 664C                              psh1
 721+ 664C E5          >                push    hl
 721+ 664D DD E9       >                jp      (ix)
 722+ 664F
 723+ 664F              //  ______________________________________________________________________
 724+ 664F
 725+ 664F              Key_Table:
 726+ 664F E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 727+ 6650 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 728+ 6651 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 729+ 6652 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 730+ 6653 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 731+ 6654 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 732+ 6655 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 733+ 6656 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 734+ 6657 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 735+ 6658 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 736+ 6659 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 737+ 665A              Key_MapTo:
 738+ 665A 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 739+ 665B 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 740+ 665C 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 741+ 665D 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 742+ 665E 5D                           db      $5D                 //  6: SYMBOL+U : ]
 743+ 665F 5B                           db      $5B                 //  5: SYMBOL+Y : [
 744+ 6660 7D                           db      $7D                 //  4: SYMBOL+G : }
 745+ 6661 7B                           db      $7B                 //  3: SYMBOL+F : {
 746+ 6662 5C                           db      $5C                 //  2: SYMBOl+D : //
 747+ 6663 7C                           db      $7C                 //  1: SYMBOL+S : |
 748+ 6664 7E                           db      $7E                 //  0: SYMBOL+A : ~
 749+ 6665
 750+ 6665              //  ______________________________________________________________________
 751+ 6665              //
 752+ 6665              // key          -- c
 753+ 6665              // wait for a keypress
 754+ 6665              // This definition need Standard ROM Interrupt to be served
 755+ 6665
 756+ 6665                              New_Def KEY, "KEY", is_code, is_normal
 756+ 6665             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 756+ 6665             >
 756+ 6665             >                // dummy db directives used to calculate length of namec
 756+ 6665 4B 45 59    >                db      "KEY"
 756+ 6668             >len_NFA         defl    $ - temp_NFA
 756+ 6668             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 756+ 6665             >
 756+ 6665 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 756+ 6666 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 756+ 6669             >                org     $-1                 // alter last byte of Name just above to set
 756+ 6668 D9          >                db      {b $} | END_BIT     // msb as name end
 756+ 6669             >
 756+ 6669 FD 65       >                dw      last_NFA            // Link to previous definition Name
 756+ 666B             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 756+ 666B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 756+ 666B ~           >
 756+ 666B ~           >
 756+ 666B             >                endif           ; ok        // for other definitions it "points" the correct handler
 756+ 666B             >                // Use of "; ok" to suppress "warning[fwdref]"
 756+ 666B             >
 756+ 666B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 757+ 666B
 758+ 666B C5                           push    bc                  // save Instruction Pointer
 759+ 666C DD E5                        push    ix
 760+ 666E
 761+ 666E ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 762+ 6672 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 763+ 6675 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 764+ 6679
 765+ 6679              Key_Wait:
 766+ 6679 76                               halt
 767+ 667A 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 768+ 667C CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 769+ 667F
 770+ 667F                                  // software-flash: flips face every 320 ms
 771+ 667F 3E 10                            ld      a, $10              // Timing based
 772+ 6681 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 773+ 6684
 774+ 6684 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 775+ 6687 20 0C                            jr      nz, Key_Cursor
 776+ 6689 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 777+ 668C FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 778+ 6690 28 03                                jr      z, Key_Cursor
 779+ 6692 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 780+ 6695              Key_Cursor:
 781+ 6695 D7                               rst     $10
 782+ 6696 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 783+ 6698 D7                               rst     $10
 784+ 6699
 785+ 6699 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 786+ 669D 28 DA                        jr      z, Key_Wait
 787+ 669F
 788+ 669F 76                           halt    // this is to sync flashing cursor.
 789+ 66A0
 790+ 66A0 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 791+ 66A2 D7                           rst     $10
 792+ 66A3 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 793+ 66A5 D7                           rst     $10
 794+ 66A6 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 795+ 66A9
 796+ 66A9                              // decode character from above table
 797+ 66A9 21 4F 66                     ld      hl, Key_Table
 798+ 66AC 01 0B 00                     ld      bc, $000B
 799+ 66AF ED B1                        cpir
 800+ 66B1 20 05                        jr      nz, Key_DontMap
 801+ 66B3 21 5A 66                         ld      hl, Key_MapTo
 802+ 66B6 09                               add     hl, bc
 803+ 66B7 7E                               ld      a, (hl)
 804+ 66B8 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 805+ 66BA 20 09                        jr      nz, Key_NoCapsLock
 806+ 66BC 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 807+ 66BF 7E                               ld      a, (hl)
 808+ 66C0 EE 08                            xor     $08
 809+ 66C2 77                               ld      (hl), a
 810+ 66C3 3E 00                            ld      a, NUL_CHAR
 811+ 66C5 6F           Key_NoCapsLock: ld      l, a
 812+ 66C6 26 00                        ld      h, 0                // Prepare TOS
 813+ 66C8
 814+ 66C8 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 815+ 66CB 1F                           rra
 816+ 66CC 1F                           rra
 817+ 66CD 1F                           rra
 818+ 66CE F6 18                        or      $18                 // quick'n'dirty click
 819+ 66D0 D3 FE                        out     ($fe), a
 820+ 66D2 06 00                        ld      b, 0
 821+ 66D4 10 FE                        djnz    $                   // wait loop
 822+ 66D6 EE 18                        xor     $18
 823+ 66D8 D3 FE                        out     ($fe), a
 824+ 66DA
 825+ 66DA ED 7B 92 63                  ld      sp, (SP_Saved)
 826+ 66DE
 827+ 66DE DD E1                        pop     ix
 828+ 66E0 C1                           pop     bc                  // Restore Instruction Pointer
 829+ 66E1
 830+ 66E1                              psh1
 830+ 66E1 E5          >                push    hl
 830+ 66E2 DD E9       >                jp      (ix)
 831+ 66E4
 832+ 66E4              //  ______________________________________________________________________
 833+ 66E4              //
 834+ 66E4              // ?terminal    -- FALSE | TRUE
 835+ 66E4              // test for BREAK keypress
 836+ 66E4                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 836+ 66E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 836+ 66E4             >
 836+ 66E4             >                // dummy db directives used to calculate length of namec
 836+ 66E4 3F 54 45 52 >                db      "?TERMINAL"
 836+ 66E8 4D 49 4E 41 >
 836+ 66EC 4C          >
 836+ 66ED             >len_NFA         defl    $ - temp_NFA
 836+ 66ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 836+ 66E4             >
 836+ 66E4 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 836+ 66E5 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 836+ 66E9 4D 49 4E 41 >
 836+ 66ED 4C          >
 836+ 66EE             >                org     $-1                 // alter last byte of Name just above to set
 836+ 66ED CC          >                db      {b $} | END_BIT     // msb as name end
 836+ 66EE             >
 836+ 66EE 65 66       >                dw      last_NFA            // Link to previous definition Name
 836+ 66F0             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 836+ 66F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 836+ 66F0 ~           >
 836+ 66F0 ~           >
 836+ 66F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 836+ 66F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 836+ 66F0             >
 836+ 66F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 837+ 66F0 21 00 00                     ld      hl, 0
 838+ 66F3 ED 73 92 63                  ld      (SP_Saved), sp
 839+ 66F7 31 61 63                     ld      sp, Cold_origin - 5
 840+ 66FA CD 54 1F                     call    $1F54
 841+ 66FD ED 7B 92 63                  ld      sp, (SP_Saved)
 842+ 6701
 843+ 6701 38 01                        jr      c, QTerminal_NoBreak
 844+ 6703 2B                               dec     hl                  // quick TRUE_FLAG
 845+ 6704              QTerminal_NoBreak:
 846+ 6704
 847+ 6704                              psh1
 847+ 6704 E5          >                push    hl
 847+ 6705 DD E9       >                jp      (ix)
 848+ 6707
 849+ 6707
 850+ 6707              //  ______________________________________________________________________
 851+ 6707              //
 852+ 6707              // ZX Spectrum Next - Low Level disk primitives.
 853+ 6707              // this include is "here" for backward compatibility
 854+ 6707
 855+ 6707                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
   1++6707              //  ______________________________________________________________________
   2++6707              //
   3++6707              //  next-opt.asm
   4++6707              //
   5++6707              //  ZX Spectrum Next - peculiar definitions
   6++6707              //  ______________________________________________________________________
   7++6707
   8++6707              //  ______________________________________________________________________
   9++6707              //
  10++6707              // f_seek       d u -- f
  11++6707              // Seek to position d in file-handle u.
  12++6707              // Return a false-flag 0 on success, True flag on error
  13++6707                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++6707             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++6707             >
  13++6707             >                // dummy db directives used to calculate length of namec
  13++6707 46 5F 53 45 >                db      "F_SEEK"
  13++670B 45 4B       >
  13++670D             >len_NFA         defl    $ - temp_NFA
  13++670D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++6707             >
  13++6707 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++6708 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++670C 45 4B       >
  13++670E             >                org     $-1                 // alter last byte of Name just above to set
  13++670D CB          >                db      {b $} | END_BIT     // msb as name end
  13++670E             >
  13++670E E4 66       >                dw      last_NFA            // Link to previous definition Name
  13++6710             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++6710 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++6710 ~           >
  13++6710 ~           >
  13++6710             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++6710             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++6710             >
  13++6710             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++6710 E1                           pop     hl                  // file-handle
  15++6711 7D                           ld      a, l                // file-handle
  16++6712 60                           ld      h, b                // save Intruction Pointer
  17++6713 69                           ld      l, c
  18++6714 C1                           pop     bc                  // bc has high-word of d
  19++6715 D1                           pop     de
  20++6716 DD E5                        push    ix
  21++6718 E5                           push    hl                  // save Instruction Pointer
  22++6719 DD 21 00 00                  ld      ix, 0
  23++671D CF                           rst     $08
  24++671E 9F                           db      $9F
  25++671F              F_Seek_Exit:
  26++671F C1                           pop     bc                  // restore Instruction Pointer
  27++6720 DD E1                        pop     ix
  28++6722 ED 62                        sbc     hl, hl              // to get 0 or -1
  29++6724
  30++6724                              psh1
  30++6724 E5          >                push    hl
  30++6725 DD E9       >                jp      (ix)
  31++6727
  32++6727              //  ______________________________________________________________________
  33++6727              //
  34++6727              // f_close      u -- f
  35++6727              // Close file-handle u.
  36++6727              // Return 0 on success, True flag on error
  37++6727
  38++6727                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++6727             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++6727             >
  38++6727             >                // dummy db directives used to calculate length of namec
  38++6727 46 5F 43 4C >                db      "F_CLOSE"
  38++672B 4F 53 45    >
  38++672E             >len_NFA         defl    $ - temp_NFA
  38++672E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++6727             >
  38++6727 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++6728 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++672C 4F 53 45    >
  38++672F             >                org     $-1                 // alter last byte of Name just above to set
  38++672E C5          >                db      {b $} | END_BIT     // msb as name end
  38++672F             >
  38++672F 07 67       >                dw      last_NFA            // Link to previous definition Name
  38++6731             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++6731 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  38++6731 ~           >
  38++6731 ~           >
  38++6731             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++6731             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++6731             >
  38++6731             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++6731
  40++6731 E1                           pop     hl
  41++6732 7D                           ld      a, l                // file-handle
  42++6733 DD E5                        push    ix
  43++6735 C5                           push    bc                  // Save Instruction pointer
  44++6736 CF                           rst     $08
  45++6737 9B                           db      $9B
  46++6738 18 E5                        jr      F_Seek_Exit
  47++673A              //              pop     bc
  48++673A              //              pop     ix
  49++673A              //              sbc     hl, hl
  50++673A              //              psh1
  51++673A
  52++673A              //  ______________________________________________________________________
  53++673A              //
  54++673A              // f_sync      u -- f
  55++673A              // Close file-handle u.
  56++673A              // Return 0 on success, True flag on error
  57++673A
  58++673A                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++673A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++673A             >
  58++673A             >                // dummy db directives used to calculate length of namec
  58++673A 46 5F 53 59 >                db      "F_SYNC"
  58++673E 4E 43       >
  58++6740             >len_NFA         defl    $ - temp_NFA
  58++6740             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++673A             >
  58++673A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++673B 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++673F 4E 43       >
  58++6741             >                org     $-1                 // alter last byte of Name just above to set
  58++6740 C3          >                db      {b $} | END_BIT     // msb as name end
  58++6741             >
  58++6741 27 67       >                dw      last_NFA            // Link to previous definition Name
  58++6743             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++6743 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  58++6743 ~           >
  58++6743 ~           >
  58++6743             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++6743             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++6743             >
  58++6743             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++6743 E1                           pop     hl
  60++6744 7D                           ld      a, l                // file-handle
  61++6745 DD E5                        push    ix
  62++6747 C5                           push    bc
  63++6748 CF                           rst     $08
  64++6749 9C                           db      $9C
  65++674A 18 D3                        jr      F_Seek_Exit
  66++674C              //              pop     bc
  67++674C              //              pop     ix
  68++674C              //              sbc     hl, hl
  69++674C              //              psh1
  70++674C
  71++674C              //  ______________________________________________________________________
  72++674C              //
  73++674C              // f_fgetpos    u -- d f
  74++674C              // Seek to position d in file-handle u.
  75++674C              // Return a false-flag 0 on success, True flag on error
  76++674C                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++674C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++674C             >
  76++674C             >                // dummy db directives used to calculate length of namec
  76++674C 46 5F 46 47 >                db      "F_FGETPOS"
  76++6750 45 54 50 4F >
  76++6754 53          >
  76++6755             >len_NFA         defl    $ - temp_NFA
  76++6755             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++674C             >
  76++674C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++674D 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++6751 45 54 50 4F >
  76++6755 53          >
  76++6756             >                org     $-1                 // alter last byte of Name just above to set
  76++6755 D3          >                db      {b $} | END_BIT     // msb as name end
  76++6756             >
  76++6756 3A 67       >                dw      last_NFA            // Link to previous definition Name
  76++6758             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++6758 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  76++6758 ~           >
  76++6758 ~           >
  76++6758             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++6758             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++6758             >
  76++6758             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++6758 E1                           pop     hl
  78++6759 7D                           ld      a, l                // file-handle
  79++675A DD E5                        push    ix
  80++675C C5                           push    bc
  81++675D CF                           rst     $08
  82++675E A0                           db      $A0
  83++675F E1                           pop     hl                  // restore Instruction Pointer
  84++6760 DD E1                        pop     ix
  85++6762 D5                           push    de
  86++6763 C5                           push    bc
  87++6764 44                           ld      b, h                // restore Instruction Pointer
  88++6765 4D                           ld      c, l
  89++6766 ED 62                        sbc     hl, hl
  90++6768
  91++6768                              psh1
  91++6768 E5          >                push    hl
  91++6769 DD E9       >                jp      (ix)
  92++676B
  93++676B              //  ______________________________________________________________________
  94++676B              //
  95++676B              // f_read       a b u -- n f
  96++676B              // Read b bytes from file-handle u to address a
  97++676B              // Return the actual number n of bytes read
  98++676B              // Return 0 on success, True flag on error
  99++676B                              New_Def F_READ, "F_READ", is_code, is_normal
  99++676B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++676B             >
  99++676B             >                // dummy db directives used to calculate length of namec
  99++676B 46 5F 52 45 >                db      "F_READ"
  99++676F 41 44       >
  99++6771             >len_NFA         defl    $ - temp_NFA
  99++6771             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++676B             >
  99++676B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++676C 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++6770 41 44       >
  99++6772             >                org     $-1                 // alter last byte of Name just above to set
  99++6771 C4          >                db      {b $} | END_BIT     // msb as name end
  99++6772             >
  99++6772 4C 67       >                dw      last_NFA            // Link to previous definition Name
  99++6774             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++6774 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  99++6774 ~           >
  99++6774 ~           >
  99++6774             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++6774             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++6774             >
  99++6774             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++6774
 101++6774 50                           ld      d, b
 102++6775 59                           ld      e, c
 103++6776 E1                           pop     hl
 104++6777 7D                           ld      a, l                // file-handle
 105++6778 C1                           pop     bc                  // bc has bytes to read
 106++6779 DD E3                        ex      (sp), ix            // ix has address
 107++677B D5                           push    de                  // Save Instruction pointer
 108++677C CF                           rst     $08
 109++677D 9D                           db      $9D
 110++677E              F_Read_Exit:
 111++677E C1                           pop     bc                  // Restore Instruction pointer
 112++677F DD E1                        pop     ix                  // Restore ix
 113++6781 D5                           push    de                  // bytes written
 114++6782 ED 62                        sbc     hl, hl
 115++6784
 116++6784                              psh1
 116++6784 E5          >                push    hl
 116++6785 DD E9       >                jp      (ix)
 117++6787
 118++6787              //  ______________________________________________________________________
 119++6787              //
 120++6787              // f_write      a b u -- n f
 121++6787              // Write bytes currently stored at address a to file-handle u.
 122++6787              // Return the actual n bytes written and 0 on success, True flag on error.
 123++6787                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++6787             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++6787             >
 123++6787             >                // dummy db directives used to calculate length of namec
 123++6787 46 5F 57 52 >                db      "F_WRITE"
 123++678B 49 54 45    >
 123++678E             >len_NFA         defl    $ - temp_NFA
 123++678E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++6787             >
 123++6787 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++6788 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++678C 49 54 45    >
 123++678F             >                org     $-1                 // alter last byte of Name just above to set
 123++678E C5          >                db      {b $} | END_BIT     // msb as name end
 123++678F             >
 123++678F 6B 67       >                dw      last_NFA            // Link to previous definition Name
 123++6791             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++6791 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 123++6791 ~           >
 123++6791 ~           >
 123++6791             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++6791             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++6791             >
 123++6791             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++6791
 125++6791 50                           ld      d, b
 126++6792 59                           ld      e, c
 127++6793 E1                           pop     hl
 128++6794 7D                           ld      a, l                // file-handle
 129++6795 C1                           pop     bc                  // bc has bytes to read
 130++6796 DD E3                        ex      (sp), ix            // ix has address
 131++6798 D5                           push    de                  // Save Instruction pointer
 132++6799 CF                           rst     $08
 133++679A 9E                           db      $9E
 134++679B 18 E1                        jr F_Read_Exit
 135++679D              //              pop     bc                  // Restore Instruction pointer
 136++679D              //              pop     ix                  // Restore ix
 137++679D              //              push    de                  // bytes written
 138++679D              //              sbc     hl, hl
 139++679D              //
 140++679D              //              psh1
 141++679D
 142++679D              //  ______________________________________________________________________
 143++679D              //
 144++679D              // f_open       a1 a2 b -- u f
 145++679D              // open a file
 146++679D              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++679D              // a2 is address to an 8-byte header data used in some cases.
 148++679D              // b is access mode-byte, that is a combination of:
 149++679D              // any/all of:
 150++679D              //   esx_mode_read          $01 request read access
 151++679D              //   esx_mode_write         $02 request write access
 152++679D              //   esx_mode_use_header    $40 read/write +3DOS header
 153++679D              // plus one of:
 154++679D              //   esx_mode_open_exist    $00 only open existing file
 155++679D              //   esx_mode_open_creat    $08 open existing or create file
 156++679D              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++679D              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++679D              // Return file-handle u and 0 on success, True flag on error
 159++679D                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++679D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++679D             >
 159++679D             >                // dummy db directives used to calculate length of namec
 159++679D 46 5F 4F 50 >                db      "F_OPEN"
 159++67A1 45 4E       >
 159++67A3             >len_NFA         defl    $ - temp_NFA
 159++67A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++679D             >
 159++679D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++679E 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++67A2 45 4E       >
 159++67A4             >                org     $-1                 // alter last byte of Name just above to set
 159++67A3 CE          >                db      {b $} | END_BIT     // msb as name end
 159++67A4             >
 159++67A4 87 67       >                dw      last_NFA            // Link to previous definition Name
 159++67A6             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++67A6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 159++67A6 ~           >
 159++67A6 ~           >
 159++67A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++67A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++67A6             >
 159++67A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++67A6 60                           ld      h, b                // Save Instruction pointer
 161++67A7 69                           ld      l, c
 162++67A8 C1                           pop     bc                  // file-mode
 163++67A9 41                           ld      b, c                // file-mode
 164++67AA D1                           pop     de                  // 8-bytes buffer if any
 165++67AB DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++67AD E5                           push    hl                  // Save Instruction pointer
 167++67AE 3E 2A                        ld      a, "*"
 168++67B0 CF                           rst     $08
 169++67B1 9A                           db      $9A
 170++67B2              F_Open_Exit:
 171++67B2 C1                           pop     bc
 172++67B3 DD E1                        pop     ix
 173++67B5 ED 62                        sbc     hl, hl
 174++67B7 5F                           ld      e, a
 175++67B8 16 00                        ld      d, 0
 176++67BA
 177++67BA
 178++67BA                              psh2
 178++67BA D5          >                push    de
 178++67BB E5          >                push    hl
 178++67BC DD E9       >                jp      (ix)
 179++67BE
 180++67BE              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 181++67BE              //   \ FILENAME 1+ PAD 1 F_OPEN
 182++67BE              //   \ DROP
 183++67BE              //   \ F_CLOSE
 184++67BE
 185++67BE
 186++67BE              //  ______________________________________________________________________
 187++67BE              //
 188++67BE              // f_opendir    a1 a2 b -- u f
 189++67BE              // open a file
 190++67BE                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 190++67BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190++67BE             >
 190++67BE             >                // dummy db directives used to calculate length of namec
 190++67BE 46 5F 4F 50 >                db      "F_OPENDIR"
 190++67C2 45 4E 44 49 >
 190++67C6 52          >
 190++67C7             >len_NFA         defl    $ - temp_NFA
 190++67C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190++67BE             >
 190++67BE 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190++67BF 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 190++67C3 45 4E 44 49 >
 190++67C7 52          >
 190++67C8             >                org     $-1                 // alter last byte of Name just above to set
 190++67C7 D2          >                db      {b $} | END_BIT     // msb as name end
 190++67C8             >
 190++67C8 9D 67       >                dw      last_NFA            // Link to previous definition Name
 190++67CA             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190++67CA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190++67CA ~           >
 190++67CA ~           >
 190++67CA             >                endif           ; ok        // for other definitions it "points" the correct handler
 190++67CA             >                // Use of "; ok" to suppress "warning[fwdref]"
 190++67CA             >
 190++67CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191++67CA DD E3                        ex      (sp), ix            // filespec nul-terminated
 192++67CC C5                           push    bc                  // Save Instruction pointer
 193++67CD 06 10                        ld      b, $10              // file-mode
 194++67CF 3E 43                        ld      a, "C"
 195++67D1 CF                           rst     $08
 196++67D2 A3                           db      $A3
 197++67D3 18 DD                        jr      F_Open_Exit
 198++67D5
 199++67D5
 200++67D5              //  ______________________________________________________________________
 201++67D5              //
 202++67D5              // f_readdir    a1 a2 b -- u f
 203++67D5              // open a file
 204++67D5                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 204++67D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204++67D5             >
 204++67D5             >                // dummy db directives used to calculate length of namec
 204++67D5 46 5F 52 45 >                db      "F_READDIR"
 204++67D9 41 44 44 49 >
 204++67DD 52          >
 204++67DE             >len_NFA         defl    $ - temp_NFA
 204++67DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204++67D5             >
 204++67D5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204++67D6 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 204++67DA 41 44 44 49 >
 204++67DE 52          >
 204++67DF             >                org     $-1                 // alter last byte of Name just above to set
 204++67DE D2          >                db      {b $} | END_BIT     // msb as name end
 204++67DF             >
 204++67DF BE 67       >                dw      last_NFA            // Link to previous definition Name
 204++67E1             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 204++67E1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 204++67E1 ~           >
 204++67E1 ~           >
 204++67E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 204++67E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 204++67E1             >
 204++67E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205++67E1 E1                           pop     hl
 206++67E2 7D                           ld      a, l
 207++67E3 D1                           pop     de
 208++67E4 DD E3                        ex      (sp), ix            // filespec nul-terminated
 209++67E6 C5                           push    bc                  // Save Instruction pointer
 210++67E7 CF                           rst     $08
 211++67E8 A4                           db      $A4
 212++67E9 18 C7                        jr      F_Open_Exit
 213++67EB
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
 856+ 67EB
 857+ 67EB
 858+ 67EB              //  ______________________________________________________________________
 859+ 67EB              //
 860+ 67EB              // cr           --
 861+ 67EB              // send a CR via EMITC
 862+ 67EB                              New_Def CR, "CR", is_code, is_normal
 862+ 67EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 862+ 67EB             >
 862+ 67EB             >                // dummy db directives used to calculate length of namec
 862+ 67EB 43 52       >                db      "CR"
 862+ 67ED             >len_NFA         defl    $ - temp_NFA
 862+ 67ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 862+ 67EB             >
 862+ 67EB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 862+ 67EC 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 862+ 67EE             >                org     $-1                 // alter last byte of Name just above to set
 862+ 67ED D2          >                db      {b $} | END_BIT     // msb as name end
 862+ 67EE             >
 862+ 67EE D5 67       >                dw      last_NFA            // Link to previous definition Name
 862+ 67F0             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 862+ 67F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 862+ 67F0 ~           >
 862+ 67F0 ~           >
 862+ 67F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 862+ 67F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 862+ 67F0             >
 862+ 67F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 863+ 67F0
 864+ 67F0 3E 0D                        ld      a, CR_CHAR
 865+ 67F2 C3 D7 65                     jp      Emitc_Ptr
 866+ 67F5
 867+ 67F5              //  ______________________________________________________________________
 868+ 67F5              //
 869+ 67F5              // cmove    a1 a2 u --
 870+ 67F5              // If u > 0, moves memory content starting at address a1 for n bytes long
 871+ 67F5              // storing then starting at address addr2.
 872+ 67F5              // The content of a1 is moved first. See CMOVE> also.
 873+ 67F5                              New_Def CMOVE, "CMOVE", is_code, is_normal
 873+ 67F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 873+ 67F5             >
 873+ 67F5             >                // dummy db directives used to calculate length of namec
 873+ 67F5 43 4D 4F 56 >                db      "CMOVE"
 873+ 67F9 45          >
 873+ 67FA             >len_NFA         defl    $ - temp_NFA
 873+ 67FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 873+ 67F5             >
 873+ 67F5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 873+ 67F6 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 873+ 67FA 45          >
 873+ 67FB             >                org     $-1                 // alter last byte of Name just above to set
 873+ 67FA C5          >                db      {b $} | END_BIT     // msb as name end
 873+ 67FB             >
 873+ 67FB EB 67       >                dw      last_NFA            // Link to previous definition Name
 873+ 67FD             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 873+ 67FD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 873+ 67FD ~           >
 873+ 67FD ~           >
 873+ 67FD             >                endif           ; ok        // for other definitions it "points" the correct handler
 873+ 67FD             >                // Use of "; ok" to suppress "warning[fwdref]"
 873+ 67FD             >
 873+ 67FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 874+ 67FD D9                           exx
 875+ 67FE
 876+ 67FE C1                           pop     bc                  // bc has counter
 877+ 67FF D1                           pop     de                  // de now has dest
 878+ 6800 E1                           pop     hl                 // hl has source, save Instruction Pointer
 879+ 6801 78                           ld      a, b
 880+ 6802 B1                           or      c
 881+ 6803 28 02                        jr      z, Cmove_NoMove
 882+ 6805 ED B0                            ldir
 883+ 6807              Cmove_NoMove:
 884+ 6807 D9                           exx
 885+ 6808
 886+ 6808                              next
 886+ 6808 DD E9       >                jp      (ix)
 887+ 680A
 888+ 680A              //  ______________________________________________________________________
 889+ 680A              //
 890+ 680A              // cmove>    a1 a2 u --
 891+ 680A              // If u > 0, moves memory content starting at address a1 for n bytes long
 892+ 680A              // storing then starting at address addr2.
 893+ 680A              // The content of a1 is moved last. See cmove.
 894+ 680A                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 894+ 680A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 894+ 680A             >
 894+ 680A             >                // dummy db directives used to calculate length of namec
 894+ 680A 43 4D 4F 56 >                db      "CMOVE>"
 894+ 680E 45 3E       >
 894+ 6810             >len_NFA         defl    $ - temp_NFA
 894+ 6810             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 894+ 680A             >
 894+ 680A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 894+ 680B 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 894+ 680F 45 3E       >
 894+ 6811             >                org     $-1                 // alter last byte of Name just above to set
 894+ 6810 BE          >                db      {b $} | END_BIT     // msb as name end
 894+ 6811             >
 894+ 6811 F5 67       >                dw      last_NFA            // Link to previous definition Name
 894+ 6813             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 894+ 6813 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 894+ 6813 ~           >
 894+ 6813 ~           >
 894+ 6813             >                endif           ; ok        // for other definitions it "points" the correct handler
 894+ 6813             >                // Use of "; ok" to suppress "warning[fwdref]"
 894+ 6813             >
 894+ 6813             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 895+ 6813 D9                           exx
 896+ 6814
 897+ 6814 C1                           pop     bc                  // bc has counter
 898+ 6815 D1                           pop     de                  // de has dest
 899+ 6816 E1                           pop     hl                  // hl has source, save Instruction Pointer
 900+ 6817 78                           ld      a, b
 901+ 6818 B1                           or      c
 902+ 6819 28 08                        jr      z, CmoveV_NoMove
 903+ 681B EB                               ex      de, hl              // compute address to
 904+ 681C 09                               add     hl, bc              // operate backward
 905+ 681D 2B                               dec     hl
 906+ 681E EB                               ex      de, hl
 907+ 681F 09                               add     hl, bc
 908+ 6820 2B                               dec     hl
 909+ 6821 ED B8                            lddr                        // backward
 910+ 6823              CmoveV_NoMove:
 911+ 6823 D9                           exx
 912+ 6824
 913+ 6824                              next
 913+ 6824 DD E9       >                jp      (ix)
 914+ 6826
 915+ 6826              //  ______________________________________________________________________
 916+ 6826              //
 917+ 6826              // um*      u1 u2 -- ud
 918+ 6826              // Unsigned multiplication
 919+ 6826              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 920+ 6826              // On the stack a double number is treated as two single numbers
 921+ 6826              // where DE is on the top of the stack and HL is the second from top,
 922+ 6826              // Instead, in 2VARIABLE a double number is stored as EDLH.
 923+ 6826              // this definition could use "MUL" Z80N new op-code.
 924+ 6826                              New_Def UM_MUL, "UM*", is_code, is_normal
 924+ 6826             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 924+ 6826             >
 924+ 6826             >                // dummy db directives used to calculate length of namec
 924+ 6826 55 4D 2A    >                db      "UM*"
 924+ 6829             >len_NFA         defl    $ - temp_NFA
 924+ 6829             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 924+ 6826             >
 924+ 6826 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 924+ 6827 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 924+ 682A             >                org     $-1                 // alter last byte of Name just above to set
 924+ 6829 AA          >                db      {b $} | END_BIT     // msb as name end
 924+ 682A             >
 924+ 682A 0A 68       >                dw      last_NFA            // Link to previous definition Name
 924+ 682C             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 924+ 682C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 924+ 682C ~           >
 924+ 682C ~           >
 924+ 682C             >                endif           ; ok        // for other definitions it "points" the correct handler
 924+ 682C             >                // Use of "; ok" to suppress "warning[fwdref]"
 924+ 682C             >
 924+ 682C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 925+ 682C D9                           exx
 926+ 682D D1                           pop     de                    // de has u2 operand
 927+ 682E E1                           pop     hl                    // hl has u1 operand
 928+ 682F 45                           ld      b, l
 929+ 6830 4B                           ld      c, e
 930+ 6831 5D                           ld      e, l
 931+ 6832 6A                           ld      l, d
 932+ 6833 E5                           push    hl
 933+ 6834 69                           ld      l, c
 934+ 6835 ED 30                        mul
 935+ 6837 EB                           ex      de, hl
 936+ 6838 ED 30                        mul
 937+ 683A AF                           xor     a
 938+ 683B 19                           add     hl, de
 939+ 683C 8F                           adc     a
 940+ 683D 59                           ld      e, c
 941+ 683E 50                           ld      d, b
 942+ 683F ED 30                        mul
 943+ 6841 47                           ld      b, a
 944+ 6842 4C                           ld      c, h
 945+ 6843 7A                           ld      a, d
 946+ 6844 85                           add     l
 947+ 6845 67                           ld      h, a
 948+ 6846 6B                           ld      l, e
 949+ 6847 D1                           pop     de
 950+ 6848 ED 30                        mul
 951+ 684A EB                           ex      de, hl
 952+ 684B ED 4A                        adc     hl, bc
 953+ 684D D5                           push    de
 954+ 684E E5                           push    hl
 955+ 684F D9                           exx
 956+ 6850                              next
 956+ 6850 DD E9       >                jp      (ix)
 957+ 6852
 958+ 6852              //  ______________________________________________________________________
 959+ 6852              //
 960+ 6852              // um/mod      ud u1 -- q r
 961+ 6852              // divides ud into u1 giving quotient q and remainder r
 962+ 6852              // algorithm takes 16 bit at a time starting from msb
 963+ 6852              // DE grows from lsb upward with quotient result
 964+ 6852              // HL keeps the remainder at each stage of division
 965+ 6852              // each loop 'lowers' the next binary digit to form the current dividend
 966+ 6852                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
 966+ 6852             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 966+ 6852             >
 966+ 6852             >                // dummy db directives used to calculate length of namec
 966+ 6852 55 4D 2F 4D >                db      "UM/MOD"
 966+ 6856 4F 44       >
 966+ 6858             >len_NFA         defl    $ - temp_NFA
 966+ 6858             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 966+ 6852             >
 966+ 6852 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 966+ 6853 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
 966+ 6857 4F 44       >
 966+ 6859             >                org     $-1                 // alter last byte of Name just above to set
 966+ 6858 C4          >                db      {b $} | END_BIT     // msb as name end
 966+ 6859             >
 966+ 6859 26 68       >                dw      last_NFA            // Link to previous definition Name
 966+ 685B             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 966+ 685B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 966+ 685B ~           >
 966+ 685B ~           >
 966+ 685B             >                endif           ; ok        // for other definitions it "points" the correct handler
 966+ 685B             >                // Use of "; ok" to suppress "warning[fwdref]"
 966+ 685B             >
 966+ 685B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 967+ 685B D9                           exx
 968+ 685C C1                           pop     bc                      // divisor
 969+ 685D
 970+ 685D E1                           pop     hl                      // < high part
 971+ 685E D1                           pop     de                      // < low part and
 972+ 685F
 973+ 685F 7D                           ld      a, l                    // check without changing arguments
 974+ 6860 91                           sub     c                       // if divisor is greater than high part
 975+ 6861 7C                           ld      a, h                    // so quotient will be in range
 976+ 6862 98                           sbc     a, b
 977+ 6863 30 23                        jr      nc, Um_DivMod_OutOfRange
 978+ 6865 3E 10                            ld      a, 16
 979+ 6867              Um_DivMod_Loop:
 980+ 6867 A7                                   and     a
 981+ 6868 CB 13                                rl      e
 982+ 686A CB 12                                rl      d
 983+ 686C CB 15                                rl      l
 984+ 686E CB 14                                rl      h
 985+ 6870 30 05                                jr      nc, Um_DivMod_Carry
 986+ 6872 A7                                       and     a
 987+ 6873 ED 42                                    sbc     hl, bc
 988+ 6875 18 07                                jr      Um_DivMod_Endif    // else
 989+ 6877              Um_DivMod_Carry:
 990+ 6877 A7                                       and     a
 991+ 6878 ED 42                                    sbc     hl, bc
 992+ 687A 30 02                                    jr      nc, Um_DivMod_Endif
 993+ 687C 09                                           add     hl, bc
 994+ 687D 1B                                           dec     de
 995+ 687E              Um_DivMod_Endif:                                   // endif
 996+ 687E 13                                   inc     de
 997+ 687F 3D                                   dec     a
 998+ 6880 20 E5                            jr      nz, Um_DivMod_Loop
 999+ 6882 EB                               ex      de, hl
1000+ 6883              Um_DivMod_Bailout:
1001+ 6883 D5                               push    de                  // de := remanider
1002+ 6884 E5                               push    hl                  // hl := quotient
1003+ 6885 D9                               exx
1004+ 6886                                  next
1004+ 6886 DD E9       >                jp      (ix)
1005+ 6888
1006+ 6888              Um_DivMod_OutOfRange:
1007+ 6888 21 FF FF                     ld      hl, -1
1008+ 688B 54                           ld      d, h
1009+ 688C 5D                           ld      e, l
1010+ 688D 18 F4                        jr      Um_DivMod_Bailout
1011+ 688F
1012+ 688F              //  ______________________________________________________________________
1013+ 688F              //
1014+ 688F              // and          n1 n2 -- n3
1015+ 688F              // bit logical AND. Returns n3 as n1 & n2
1016+ 688F                              New_Def AND_OP, "AND", is_code, is_normal
1016+ 688F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1016+ 688F             >
1016+ 688F             >                // dummy db directives used to calculate length of namec
1016+ 688F 41 4E 44    >                db      "AND"
1016+ 6892             >len_NFA         defl    $ - temp_NFA
1016+ 6892             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1016+ 688F             >
1016+ 688F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1016+ 6890 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1016+ 6893             >                org     $-1                 // alter last byte of Name just above to set
1016+ 6892 C4          >                db      {b $} | END_BIT     // msb as name end
1016+ 6893             >
1016+ 6893 52 68       >                dw      last_NFA            // Link to previous definition Name
1016+ 6895             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1016+ 6895 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1016+ 6895 ~           >
1016+ 6895 ~           >
1016+ 6895             >                endif           ; ok        // for other definitions it "points" the correct handler
1016+ 6895             >                // Use of "; ok" to suppress "warning[fwdref]"
1016+ 6895             >
1016+ 6895             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1017+ 6895 D1                           pop     de
1018+ 6896 E1                           pop     hl
1019+ 6897 7B                           ld      a, e
1020+ 6898 A5                           and     l
1021+ 6899 6F                           ld      l, a
1022+ 689A 7A                           ld      a, d
1023+ 689B A4                           and     h
1024+ 689C 67                           ld      h, a
1025+ 689D
1026+ 689D                              psh1
1026+ 689D E5          >                push    hl
1026+ 689E DD E9       >                jp      (ix)
1027+ 68A0
1028+ 68A0              //  ______________________________________________________________________
1029+ 68A0              //
1030+ 68A0              // or           n1 n2 -- n3
1031+ 68A0              // bit logical OR. Returns n3 as n1 | n2
1032+ 68A0                              New_Def OR_OP, "OR", is_code, is_normal
1032+ 68A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1032+ 68A0             >
1032+ 68A0             >                // dummy db directives used to calculate length of namec
1032+ 68A0 4F 52       >                db      "OR"
1032+ 68A2             >len_NFA         defl    $ - temp_NFA
1032+ 68A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1032+ 68A0             >
1032+ 68A0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1032+ 68A1 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1032+ 68A3             >                org     $-1                 // alter last byte of Name just above to set
1032+ 68A2 D2          >                db      {b $} | END_BIT     // msb as name end
1032+ 68A3             >
1032+ 68A3 8F 68       >                dw      last_NFA            // Link to previous definition Name
1032+ 68A5             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1032+ 68A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1032+ 68A5 ~           >
1032+ 68A5 ~           >
1032+ 68A5             >                endif           ; ok        // for other definitions it "points" the correct handler
1032+ 68A5             >                // Use of "; ok" to suppress "warning[fwdref]"
1032+ 68A5             >
1032+ 68A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1033+ 68A5 D1                           pop     de
1034+ 68A6 E1                           pop     hl
1035+ 68A7 7B                           ld      a, e
1036+ 68A8 B5                           or      l
1037+ 68A9 6F                           ld      l, a
1038+ 68AA 7A                           ld      a, d
1039+ 68AB B4                           or      h
1040+ 68AC 67                           ld      h, a
1041+ 68AD
1042+ 68AD                              psh1
1042+ 68AD E5          >                push    hl
1042+ 68AE DD E9       >                jp      (ix)
1043+ 68B0
1044+ 68B0              //  ______________________________________________________________________
1045+ 68B0              //
1046+ 68B0              // xor          n1 n2 -- n3
1047+ 68B0              // bit logical OR. Returns n3 as n1 ^ n2
1048+ 68B0                              New_Def XOR_OP, "XOR", is_code, is_normal
1048+ 68B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1048+ 68B0             >
1048+ 68B0             >                // dummy db directives used to calculate length of namec
1048+ 68B0 58 4F 52    >                db      "XOR"
1048+ 68B3             >len_NFA         defl    $ - temp_NFA
1048+ 68B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1048+ 68B0             >
1048+ 68B0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1048+ 68B1 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1048+ 68B4             >                org     $-1                 // alter last byte of Name just above to set
1048+ 68B3 D2          >                db      {b $} | END_BIT     // msb as name end
1048+ 68B4             >
1048+ 68B4 A0 68       >                dw      last_NFA            // Link to previous definition Name
1048+ 68B6             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1048+ 68B6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1048+ 68B6 ~           >
1048+ 68B6 ~           >
1048+ 68B6             >                endif           ; ok        // for other definitions it "points" the correct handler
1048+ 68B6             >                // Use of "; ok" to suppress "warning[fwdref]"
1048+ 68B6             >
1048+ 68B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1049+ 68B6 D1                           pop     de
1050+ 68B7 E1                           pop     hl
1051+ 68B8 7B                           ld      a, e
1052+ 68B9 AD                           xor     l
1053+ 68BA 6F                           ld      l, a
1054+ 68BB 7A                           ld      a, d
1055+ 68BC AC                           xor     h
1056+ 68BD 67                           ld      h, a
1057+ 68BE
1058+ 68BE                              psh1
1058+ 68BE E5          >                push    hl
1058+ 68BF DD E9       >                jp      (ix)
1059+ 68C1
1060+ 68C1              //  ______________________________________________________________________
1061+ 68C1              //
1062+ 68C1              // sp@      -- a
1063+ 68C1              // returns on top of stack the value of SP before execution
1064+ 68C1                              New_Def SPFETCH, "SP@", is_code, is_normal
1064+ 68C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1064+ 68C1             >
1064+ 68C1             >                // dummy db directives used to calculate length of namec
1064+ 68C1 53 50 40    >                db      "SP@"
1064+ 68C4             >len_NFA         defl    $ - temp_NFA
1064+ 68C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1064+ 68C1             >
1064+ 68C1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1064+ 68C2 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1064+ 68C5             >                org     $-1                 // alter last byte of Name just above to set
1064+ 68C4 C0          >                db      {b $} | END_BIT     // msb as name end
1064+ 68C5             >
1064+ 68C5 B0 68       >                dw      last_NFA            // Link to previous definition Name
1064+ 68C7             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1064+ 68C7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1064+ 68C7 ~           >
1064+ 68C7 ~           >
1064+ 68C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1064+ 68C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1064+ 68C7             >
1064+ 68C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1065+ 68C7
1066+ 68C7 21 00 00                     ld      hl, 0
1067+ 68CA 39                           add     hl, sp
1068+ 68CB
1069+ 68CB                              psh1
1069+ 68CB E5          >                push    hl
1069+ 68CC DD E9       >                jp      (ix)
1070+ 68CE
1071+ 68CE              //  ______________________________________________________________________
1072+ 68CE              //
1073+ 68CE              // sp!      a --
1074+ 68CE              // restore SP to the initial value passed
1075+ 68CE              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1076+ 68CE                              New_Def SPSTORE, "SP!", is_code, is_normal
1076+ 68CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1076+ 68CE             >
1076+ 68CE             >                // dummy db directives used to calculate length of namec
1076+ 68CE 53 50 21    >                db      "SP!"
1076+ 68D1             >len_NFA         defl    $ - temp_NFA
1076+ 68D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1076+ 68CE             >
1076+ 68CE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1076+ 68CF 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1076+ 68D2             >                org     $-1                 // alter last byte of Name just above to set
1076+ 68D1 A1          >                db      {b $} | END_BIT     // msb as name end
1076+ 68D2             >
1076+ 68D2 C1 68       >                dw      last_NFA            // Link to previous definition Name
1076+ 68D4             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1076+ 68D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1076+ 68D4 ~           >
1076+ 68D4 ~           >
1076+ 68D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1076+ 68D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1076+ 68D4             >
1076+ 68D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1077+ 68D4 E1                           pop     hl
1078+ 68D5 F9                           ld      sp, hl
1079+ 68D6
1080+ 68D6                              next
1080+ 68D6 DD E9       >                jp      (ix)
1081+ 68D8
1082+ 68D8              //  ______________________________________________________________________
1083+ 68D8              //
1084+ 68D8              // rp@      -- a
1085+ 68D8              // returns on top of stack the value of Return-Pointer
1086+ 68D8                              New_Def RPFETCH, "RP@", is_code, is_normal
1086+ 68D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1086+ 68D8             >
1086+ 68D8             >                // dummy db directives used to calculate length of namec
1086+ 68D8 52 50 40    >                db      "RP@"
1086+ 68DB             >len_NFA         defl    $ - temp_NFA
1086+ 68DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1086+ 68D8             >
1086+ 68D8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1086+ 68D9 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1086+ 68DC             >                org     $-1                 // alter last byte of Name just above to set
1086+ 68DB C0          >                db      {b $} | END_BIT     // msb as name end
1086+ 68DC             >
1086+ 68DC CE 68       >                dw      last_NFA            // Link to previous definition Name
1086+ 68DE             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1086+ 68DE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1086+ 68DE ~           >
1086+ 68DE ~           >
1086+ 68DE             >                endif           ; ok        // for other definitions it "points" the correct handler
1086+ 68DE             >                // Use of "; ok" to suppress "warning[fwdref]"
1086+ 68DE             >
1086+ 68DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1087+ 68DE
1088+ 68DE                              ldhlrp
1088+ 68DE 2A 96 63    >                ld      hl,(RP_Pointer)
1089+ 68E1
1090+ 68E1                              psh1
1090+ 68E1 E5          >                push    hl
1090+ 68E2 DD E9       >                jp      (ix)
1091+ 68E4
1092+ 68E4              //  ______________________________________________________________________
1093+ 68E4              //
1094+ 68E4              // rp!      a --
1095+ 68E4              // restore RP to the initial value passed
1096+ 68E4              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1097+ 68E4                              New_Def RPSTORE, "RP!", is_code, is_normal
1097+ 68E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1097+ 68E4             >
1097+ 68E4             >                // dummy db directives used to calculate length of namec
1097+ 68E4 52 50 21    >                db      "RP!"
1097+ 68E7             >len_NFA         defl    $ - temp_NFA
1097+ 68E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1097+ 68E4             >
1097+ 68E4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1097+ 68E5 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1097+ 68E8             >                org     $-1                 // alter last byte of Name just above to set
1097+ 68E7 A1          >                db      {b $} | END_BIT     // msb as name end
1097+ 68E8             >
1097+ 68E8 D8 68       >                dw      last_NFA            // Link to previous definition Name
1097+ 68EA             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1097+ 68EA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1097+ 68EA ~           >
1097+ 68EA ~           >
1097+ 68EA             >                endif           ; ok        // for other definitions it "points" the correct handler
1097+ 68EA             >                // Use of "; ok" to suppress "warning[fwdref]"
1097+ 68EA             >
1097+ 68EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1098+ 68EA E1                           pop     hl
1099+ 68EB                              ldrphl
1099+ 68EB 22 96 63    >                ld      (RP_Pointer),hl
1100+ 68EE
1101+ 68EE                              next
1101+ 68EE DD E9       >                jp      (ix)
1102+ 68F0
1103+ 68F0              //  ______________________________________________________________________
1104+ 68F0              //
1105+ 68F0              // exit       --
1106+ 68F0              // exits back to the caller word
1107+ 68F0                              New_Def EXIT, "EXIT", is_code, is_normal
1107+ 68F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1107+ 68F0             >
1107+ 68F0             >                // dummy db directives used to calculate length of namec
1107+ 68F0 45 58 49 54 >                db      "EXIT"
1107+ 68F4             >len_NFA         defl    $ - temp_NFA
1107+ 68F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1107+ 68F0             >
1107+ 68F0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1107+ 68F1 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1107+ 68F5             >                org     $-1                 // alter last byte of Name just above to set
1107+ 68F4 D4          >                db      {b $} | END_BIT     // msb as name end
1107+ 68F5             >
1107+ 68F5 E4 68       >                dw      last_NFA            // Link to previous definition Name
1107+ 68F7             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1107+ 68F7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1107+ 68F7 ~           >
1107+ 68F7 ~           >
1107+ 68F7             >                endif           ; ok        // for other definitions it "points" the correct handler
1107+ 68F7             >                // Use of "; ok" to suppress "warning[fwdref]"
1107+ 68F7             >
1107+ 68F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1108+ 68F7                              ldhlrp                      // Get Return Stack Pointer
1108+ 68F7 2A 96 63    >                ld      hl,(RP_Pointer)
1109+ 68FA 4E                           ld      c, (hl)             // pop Instruction Pointer
1110+ 68FB 23                           inc     hl                  // from Return Stack
1111+ 68FC 46                           ld      b, (hl)
1112+ 68FD 23                           inc     hl
1113+ 68FE                              ldrphl                      // Set Return Stack Pointer
1113+ 68FE 22 96 63    >                ld      (RP_Pointer),hl
1114+ 6901                              next
1114+ 6901 DD E9       >                jp      (ix)
1115+ 6903
1116+ 6903              //  ______________________________________________________________________
1117+ 6903              //
1118+ 6903              // lastl      --
1119+ 6903              // exits back to the caller word
1120+ 6903              //              New_Def EXIT, "LASTL", is_code, is_normal
1121+ 6903              //              ldhlrp                      // Get Return Stack Pointer
1122+ 6903              //              ld      e, (hl)             // pop Instruction Pointer
1123+ 6903              //              inc     hl                  // from Return Stack
1124+ 6903              //              ld      d, (hl)
1125+ 6903              //              inc     hl
1126+ 6903              //              ld      (hl), e
1127+ 6903              //              inc     hl
1128+ 6903              //              ld      (hl), d
1129+ 6903              //              next
1130+ 6903
1131+ 6903              //  ______________________________________________________________________
1132+ 6903              //
1133+ 6903              // (leave)        --
1134+ 6903              // compiled by LEAVE
1135+ 6903              // this forces to exit from loop and jump past
1136+ 6903                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
1136+ 6903             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1136+ 6903             >
1136+ 6903             >                // dummy db directives used to calculate length of namec
1136+ 6903 28 4C 45 41 >                db      "(LEAVE)"
1136+ 6907 56 45 29    >
1136+ 690A             >len_NFA         defl    $ - temp_NFA
1136+ 690A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1136+ 6903             >
1136+ 6903 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1136+ 6904 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
1136+ 6908 56 45 29    >
1136+ 690B             >                org     $-1                 // alter last byte of Name just above to set
1136+ 690A A9          >                db      {b $} | END_BIT     // msb as name end
1136+ 690B             >
1136+ 690B F0 68       >                dw      last_NFA            // Link to previous definition Name
1136+ 690D             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1136+ 690D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1136+ 690D ~           >
1136+ 690D ~           >
1136+ 690D             >                endif           ; ok        // for other definitions it "points" the correct handler
1136+ 690D             >                // Use of "; ok" to suppress "warning[fwdref]"
1136+ 690D             >
1136+ 690D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1137+ 690D
1138+ 690D                              ldhlrp
1138+ 690D 2A 96 63    >                ld      hl,(RP_Pointer)
1139+ 6910 11 04 00                     ld      de, 4
1140+ 6913 19                           add     hl, de
1141+ 6914                              ldrphl
1141+ 6914 22 96 63    >                ld      (RP_Pointer),hl
1142+ 6917
1143+ 6917 C3 C3 63                     jp      Branch_Ptr       // perform branch consuming following cell
1144+ 691A                              next
1144+ 691A DD E9       >                jp      (ix)
1145+ 691C
1146+ 691C              //  ______________________________________________________________________
1147+ 691C              //
1148+ 691C              // >r      n --
1149+ 691C              // pop from calculator-stack and push into return-stack
1150+ 691C                              New_Def TO_R, ">R", is_code, is_normal
1150+ 691C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1150+ 691C             >
1150+ 691C             >                // dummy db directives used to calculate length of namec
1150+ 691C 3E 52       >                db      ">R"
1150+ 691E             >len_NFA         defl    $ - temp_NFA
1150+ 691E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1150+ 691C             >
1150+ 691C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1150+ 691D 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1150+ 691F             >                org     $-1                 // alter last byte of Name just above to set
1150+ 691E D2          >                db      {b $} | END_BIT     // msb as name end
1150+ 691F             >
1150+ 691F 03 69       >                dw      last_NFA            // Link to previous definition Name
1150+ 6921             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1150+ 6921 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1150+ 6921 ~           >
1150+ 6921 ~           >
1150+ 6921             >                endif           ; ok        // for other definitions it "points" the correct handler
1150+ 6921             >                // Use of "; ok" to suppress "warning[fwdref]"
1150+ 6921             >
1150+ 6921             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1151+ 6921 D1                           pop     de
1152+ 6922                              ldhlrp
1152+ 6922 2A 96 63    >                ld      hl,(RP_Pointer)
1153+ 6925 2B                           dec     hl
1154+ 6926 72                           ld      (hl), d             // store current TOS
1155+ 6927 2B                           dec     hl                  // to Return Stack
1156+ 6928 73                           ld      (hl), e
1157+ 6929                              ldrphl
1157+ 6929 22 96 63    >                ld      (RP_Pointer),hl
1158+ 692C
1159+ 692C                              next
1159+ 692C DD E9       >                jp      (ix)
1160+ 692E
1161+ 692E              //  ______________________________________________________________________
1162+ 692E              //
1163+ 692E              // r>      -- n
1164+ 692E              // pop from return-stack and push into calculator-stack
1165+ 692E                              New_Def R_TO, "R>", is_code, is_normal
1165+ 692E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1165+ 692E             >
1165+ 692E             >                // dummy db directives used to calculate length of namec
1165+ 692E 52 3E       >                db      "R>"
1165+ 6930             >len_NFA         defl    $ - temp_NFA
1165+ 6930             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1165+ 692E             >
1165+ 692E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1165+ 692F 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1165+ 6931             >                org     $-1                 // alter last byte of Name just above to set
1165+ 6930 BE          >                db      {b $} | END_BIT     // msb as name end
1165+ 6931             >
1165+ 6931 1C 69       >                dw      last_NFA            // Link to previous definition Name
1165+ 6933             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1165+ 6933 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1165+ 6933 ~           >
1165+ 6933 ~           >
1165+ 6933             >                endif           ; ok        // for other definitions it "points" the correct handler
1165+ 6933             >                // Use of "; ok" to suppress "warning[fwdref]"
1165+ 6933             >
1165+ 6933             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1166+ 6933
1167+ 6933                              ldhlrp
1167+ 6933 2A 96 63    >                ld      hl,(RP_Pointer)
1168+ 6936 5E                           ld      e, (hl)             // retrieve from Return Stack
1169+ 6937 23                           inc     hl
1170+ 6938 56                           ld      d, (hl)
1171+ 6939 23                           inc     hl
1172+ 693A                              ldrphl
1172+ 693A 22 96 63    >                ld      (RP_Pointer),hl
1173+ 693D D5                           push    de
1174+ 693E                              next
1174+ 693E DD E9       >                jp      (ix)
1175+ 6940
1176+ 6940              //  ______________________________________________________________________
1177+ 6940              //
1178+ 6940              // r            -- n
1179+ 6940              // return on top of stack the value of top of return-stack
1180+ 6940              // Since this is the same as I, we alter R's CFA to jump there
1181+ 6940                              New_Def R_OP, "R@", is_code, is_normal
1181+ 6940             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1181+ 6940             >
1181+ 6940             >                // dummy db directives used to calculate length of namec
1181+ 6940 52 40       >                db      "R@"
1181+ 6942             >len_NFA         defl    $ - temp_NFA
1181+ 6942             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1181+ 6940             >
1181+ 6940 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1181+ 6941 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1181+ 6943             >                org     $-1                 // alter last byte of Name just above to set
1181+ 6942 C0          >                db      {b $} | END_BIT     // msb as name end
1181+ 6943             >
1181+ 6943 2E 69       >                dw      last_NFA            // Link to previous definition Name
1181+ 6945             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1181+ 6945 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1181+ 6945 ~           >
1181+ 6945 ~           >
1181+ 6945             >                endif           ; ok        // for other definitions it "points" the correct handler
1181+ 6945             >                // Use of "; ok" to suppress "warning[fwdref]"
1181+ 6945             >
1181+ 6945             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1182+ 6945 C3 66 64                     jp      I_Ptr
1183+ 6948
1184+ 6948              //  ______________________________________________________________________
1185+ 6948              //
1186+ 6948              // r            -- n
1187+ 6948              // return on top of stack the value of top of return-stack
1188+ 6948              // Since this is the same as I, we alter R's CFA to jump there
1189+ 6948                              New_Def R_OLD, "R", is_code, is_normal
1189+ 6948             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1189+ 6948             >
1189+ 6948             >                // dummy db directives used to calculate length of namec
1189+ 6948 52          >                db      "R"
1189+ 6949             >len_NFA         defl    $ - temp_NFA
1189+ 6949             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1189+ 6948             >
1189+ 6948 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1189+ 6949 52          >                db      "R"               // name string in 7-bit ascii, but
1189+ 694A             >                org     $-1                 // alter last byte of Name just above to set
1189+ 6949 D2          >                db      {b $} | END_BIT     // msb as name end
1189+ 694A             >
1189+ 694A 40 69       >                dw      last_NFA            // Link to previous definition Name
1189+ 694C             >R_OLD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1189+ 694C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1189+ 694C ~           >
1189+ 694C ~           >
1189+ 694C             >                endif           ; ok        // for other definitions it "points" the correct handler
1189+ 694C             >                // Use of "; ok" to suppress "warning[fwdref]"
1189+ 694C             >
1189+ 694C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1190+ 694C C3 66 64                     jp      I_Ptr
1191+ 694F
1192+ 694F              //  ______________________________________________________________________
1193+ 694F              //
1194+ 694F              // 0=           n -- f
1195+ 694F              // true (non zero) if n is zero, false (0) elsewere
1196+ 694F                              New_Def ZEQUAL, "0=", is_code, is_normal
1196+ 694F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1196+ 694F             >
1196+ 694F             >                // dummy db directives used to calculate length of namec
1196+ 694F 30 3D       >                db      "0="
1196+ 6951             >len_NFA         defl    $ - temp_NFA
1196+ 6951             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1196+ 694F             >
1196+ 694F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1196+ 6950 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1196+ 6952             >                org     $-1                 // alter last byte of Name just above to set
1196+ 6951 BD          >                db      {b $} | END_BIT     // msb as name end
1196+ 6952             >
1196+ 6952 48 69       >                dw      last_NFA            // Link to previous definition Name
1196+ 6954             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1196+ 6954 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1196+ 6954 ~           >
1196+ 6954 ~           >
1196+ 6954             >                endif           ; ok        // for other definitions it "points" the correct handler
1196+ 6954             >                // Use of "; ok" to suppress "warning[fwdref]"
1196+ 6954             >
1196+ 6954             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1197+ 6954              Zero_Equal:
1198+ 6954 E1                           pop     hl
1199+ 6955 7D                           ld      a, l
1200+ 6956 B4                           or      h
1201+ 6957 21 00 00                     ld      hl, FALSE_FLAG
1202+ 695A 20 01                        jr      nz, ZEqual_Skip
1203+ 695C 2B                               dec     hl
1204+ 695D              ZEqual_Skip:
1205+ 695D                              psh1
1205+ 695D E5          >                push    hl
1205+ 695E DD E9       >                jp      (ix)
1206+ 6960
1207+ 6960              //  ______________________________________________________________________
1208+ 6960              //
1209+ 6960              // not         a1 -- a2
1210+ 6960              // increment by 2 top of stack
1211+ 6960                              New_Def NOT_OP, "NOT", is_code, is_normal
1211+ 6960             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1211+ 6960             >
1211+ 6960             >                // dummy db directives used to calculate length of namec
1211+ 6960 4E 4F 54    >                db      "NOT"
1211+ 6963             >len_NFA         defl    $ - temp_NFA
1211+ 6963             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1211+ 6960             >
1211+ 6960 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1211+ 6961 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1211+ 6964             >                org     $-1                 // alter last byte of Name just above to set
1211+ 6963 D4          >                db      {b $} | END_BIT     // msb as name end
1211+ 6964             >
1211+ 6964 4F 69       >                dw      last_NFA            // Link to previous definition Name
1211+ 6966             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1211+ 6966 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1211+ 6966 ~           >
1211+ 6966 ~           >
1211+ 6966             >                endif           ; ok        // for other definitions it "points" the correct handler
1211+ 6966             >                // Use of "; ok" to suppress "warning[fwdref]"
1211+ 6966             >
1211+ 6966             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1212+ 6966 C3 54 69                     jp      Zero_Equal
1213+ 6969
1214+ 6969              //  ______________________________________________________________________
1215+ 6969              //
1216+ 6969              // 0<           n -- f
1217+ 6969              // true (non zero) if n is less than zero, false (0) elsewere
1218+ 6969                              New_Def ZLESS, "0<", is_code, is_normal
1218+ 6969             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1218+ 6969             >
1218+ 6969             >                // dummy db directives used to calculate length of namec
1218+ 6969 30 3C       >                db      "0<"
1218+ 696B             >len_NFA         defl    $ - temp_NFA
1218+ 696B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1218+ 6969             >
1218+ 6969 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1218+ 696A 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1218+ 696C             >                org     $-1                 // alter last byte of Name just above to set
1218+ 696B BC          >                db      {b $} | END_BIT     // msb as name end
1218+ 696C             >
1218+ 696C 60 69       >                dw      last_NFA            // Link to previous definition Name
1218+ 696E             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1218+ 696E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1218+ 696E ~           >
1218+ 696E ~           >
1218+ 696E             >                endif           ; ok        // for other definitions it "points" the correct handler
1218+ 696E             >                // Use of "; ok" to suppress "warning[fwdref]"
1218+ 696E             >
1218+ 696E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1219+ 696E E1                           pop     hl
1220+ 696F 29                           add     hl, hl
1221+ 6970 21 00 00                     ld      hl, 0
1222+ 6973 30 01                        jr      nc, ZLess_Skip
1223+ 6975 2B                               dec     hl
1224+ 6976              ZLess_Skip:
1225+ 6976                              psh1
1225+ 6976 E5          >                push    hl
1225+ 6977 DD E9       >                jp      (ix)
1226+ 6979
1227+ 6979              //  ______________________________________________________________________
1228+ 6979              //
1229+ 6979              // 0>           n -- f
1230+ 6979              // true (non zero) if n is less than zero, false (0) elsewere
1231+ 6979                              New_Def ZGREATER, "0>", is_code, is_normal
1231+ 6979             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1231+ 6979             >
1231+ 6979             >                // dummy db directives used to calculate length of namec
1231+ 6979 30 3E       >                db      "0>"
1231+ 697B             >len_NFA         defl    $ - temp_NFA
1231+ 697B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1231+ 6979             >
1231+ 6979 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1231+ 697A 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1231+ 697C             >                org     $-1                 // alter last byte of Name just above to set
1231+ 697B BE          >                db      {b $} | END_BIT     // msb as name end
1231+ 697C             >
1231+ 697C 69 69       >                dw      last_NFA            // Link to previous definition Name
1231+ 697E             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1231+ 697E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1231+ 697E ~           >
1231+ 697E ~           >
1231+ 697E             >                endif           ; ok        // for other definitions it "points" the correct handler
1231+ 697E             >                // Use of "; ok" to suppress "warning[fwdref]"
1231+ 697E             >
1231+ 697E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1232+ 697E E1                           pop     hl
1233+ 697F 7D                           ld      a, l
1234+ 6980 B4                           or      h
1235+ 6981 29                           add     hl, hl
1236+ 6982 21 00 00                     ld      hl, FALSE_FLAG
1237+ 6985 38 04                        jr      c, ZGreater_Skip
1238+ 6987 A7                               and     a
1239+ 6988 28 01                            jr      z, ZGreater_Skip
1240+ 698A 2B                                   dec     hl
1241+ 698B              ZGreater_Skip:
1242+ 698B                              psh1
1242+ 698B E5          >                push    hl
1242+ 698C DD E9       >                jp      (ix)
1243+ 698E
1244+ 698E              //  ______________________________________________________________________
1245+ 698E              //
1246+ 698E              // +            n1 n2 -- n3
1247+ 698E              // returns the unsigned sum of two top values
1248+ 698E                              New_Def PLUS, "+", is_code, is_normal
1248+ 698E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1248+ 698E             >
1248+ 698E             >                // dummy db directives used to calculate length of namec
1248+ 698E 2B          >                db      "+"
1248+ 698F             >len_NFA         defl    $ - temp_NFA
1248+ 698F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1248+ 698E             >
1248+ 698E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1248+ 698F 2B          >                db      "+"               // name string in 7-bit ascii, but
1248+ 6990             >                org     $-1                 // alter last byte of Name just above to set
1248+ 698F AB          >                db      {b $} | END_BIT     // msb as name end
1248+ 6990             >
1248+ 6990 79 69       >                dw      last_NFA            // Link to previous definition Name
1248+ 6992             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1248+ 6992 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1248+ 6992 ~           >
1248+ 6992 ~           >
1248+ 6992             >                endif           ; ok        // for other definitions it "points" the correct handler
1248+ 6992             >                // Use of "; ok" to suppress "warning[fwdref]"
1248+ 6992             >
1248+ 6992             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1249+ 6992 E1                           pop     hl
1250+ 6993 D1                           pop     de
1251+ 6994 19                           add     hl, de
1252+ 6995
1253+ 6995                              psh1
1253+ 6995 E5          >                push    hl
1253+ 6996 DD E9       >                jp      (ix)
1254+ 6998
1255+ 6998
1256+ 6998              //  ______________________________________________________________________
1257+ 6998              //
1258+ 6998              // d+           d1 d2 -- d3
1259+ 6998              // returns the unsigned sum of two top double-numbers
1260+ 6998              //      d2  d1
1261+ 6998              //      h l h l
1262+ 6998              // SP   LHEDLHED
1263+ 6998              // SP  +01234567
1264+ 6998                              New_Def DPLUS, "D+", is_code, is_normal
1264+ 6998             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1264+ 6998             >
1264+ 6998             >                // dummy db directives used to calculate length of namec
1264+ 6998 44 2B       >                db      "D+"
1264+ 699A             >len_NFA         defl    $ - temp_NFA
1264+ 699A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1264+ 6998             >
1264+ 6998 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1264+ 6999 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1264+ 699B             >                org     $-1                 // alter last byte of Name just above to set
1264+ 699A AB          >                db      {b $} | END_BIT     // msb as name end
1264+ 699B             >
1264+ 699B 8E 69       >                dw      last_NFA            // Link to previous definition Name
1264+ 699D             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1264+ 699D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1264+ 699D ~           >
1264+ 699D ~           >
1264+ 699D             >                endif           ; ok        // for other definitions it "points" the correct handler
1264+ 699D             >                // Use of "; ok" to suppress "warning[fwdref]"
1264+ 699D             >
1264+ 699D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1265+ 699D
1266+ 699D D9                           exx
1267+ 699E C1                           pop     bc                  // bc := d2.H
1268+ 699F D1                           pop     de                  // hl := d2.L
1269+ 69A0 E1                           pop     hl                  // d1.H
1270+ 69A1 E3                           ex      (sp), hl            // d1.L
1271+ 69A2 19                           add     hl, de              // hl := d2.L + d1.L
1272+ 69A3 E3                           ex      (sp), hl            // d1.H
1273+ 69A4 ED 4A                        adc     hl, bc              // d1.H + d2.H
1274+ 69A6 E5                           push    hl
1275+ 69A7 D9                           exx
1276+ 69A8                              next
1276+ 69A8 DD E9       >                jp      (ix)
1277+ 69AA
1278+ 69AA              //  ______________________________________________________________________
1279+ 69AA              //
1280+ 69AA              // 1+           n1 -- n2
1281+ 69AA              // increment by 1 top of stack
1282+ 69AA                              New_Def ONE_PLUS, "1+", is_code, is_normal
1282+ 69AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1282+ 69AA             >
1282+ 69AA             >                // dummy db directives used to calculate length of namec
1282+ 69AA 31 2B       >                db      "1+"
1282+ 69AC             >len_NFA         defl    $ - temp_NFA
1282+ 69AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1282+ 69AA             >
1282+ 69AA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1282+ 69AB 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1282+ 69AD             >                org     $-1                 // alter last byte of Name just above to set
1282+ 69AC AB          >                db      {b $} | END_BIT     // msb as name end
1282+ 69AD             >
1282+ 69AD 98 69       >                dw      last_NFA            // Link to previous definition Name
1282+ 69AF             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1282+ 69AF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1282+ 69AF ~           >
1282+ 69AF ~           >
1282+ 69AF             >                endif           ; ok        // for other definitions it "points" the correct handler
1282+ 69AF             >                // Use of "; ok" to suppress "warning[fwdref]"
1282+ 69AF             >
1282+ 69AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1283+ 69AF E1                           pop     hl
1284+ 69B0 23                           inc     hl
1285+ 69B1
1286+ 69B1                              psh1
1286+ 69B1 E5          >                push    hl
1286+ 69B2 DD E9       >                jp      (ix)
1287+ 69B4
1288+ 69B4              //  ______________________________________________________________________
1289+ 69B4              //
1290+ 69B4              // 1-           n1 -- n2
1291+ 69B4              // decrement by 1 top of stack
1292+ 69B4                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1292+ 69B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1292+ 69B4             >
1292+ 69B4             >                // dummy db directives used to calculate length of namec
1292+ 69B4 31 2D       >                db      "1-"
1292+ 69B6             >len_NFA         defl    $ - temp_NFA
1292+ 69B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1292+ 69B4             >
1292+ 69B4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1292+ 69B5 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1292+ 69B7             >                org     $-1                 // alter last byte of Name just above to set
1292+ 69B6 AD          >                db      {b $} | END_BIT     // msb as name end
1292+ 69B7             >
1292+ 69B7 AA 69       >                dw      last_NFA            // Link to previous definition Name
1292+ 69B9             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1292+ 69B9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1292+ 69B9 ~           >
1292+ 69B9 ~           >
1292+ 69B9             >                endif           ; ok        // for other definitions it "points" the correct handler
1292+ 69B9             >                // Use of "; ok" to suppress "warning[fwdref]"
1292+ 69B9             >
1292+ 69B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1293+ 69B9 E1                           pop     hl
1294+ 69BA 2B                           dec     hl
1295+ 69BB
1296+ 69BB                              psh1
1296+ 69BB E5          >                push    hl
1296+ 69BC DD E9       >                jp      (ix)
1297+ 69BE
1298+ 69BE              //  ______________________________________________________________________
1299+ 69BE              //
1300+ 69BE              // 2+           n1 -- n2
1301+ 69BE              // increment by 2 top of stack
1302+ 69BE                              New_Def TWO_PLUS, "2+", is_code, is_normal
1302+ 69BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1302+ 69BE             >
1302+ 69BE             >                // dummy db directives used to calculate length of namec
1302+ 69BE 32 2B       >                db      "2+"
1302+ 69C0             >len_NFA         defl    $ - temp_NFA
1302+ 69C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1302+ 69BE             >
1302+ 69BE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1302+ 69BF 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1302+ 69C1             >                org     $-1                 // alter last byte of Name just above to set
1302+ 69C0 AB          >                db      {b $} | END_BIT     // msb as name end
1302+ 69C1             >
1302+ 69C1 B4 69       >                dw      last_NFA            // Link to previous definition Name
1302+ 69C3             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1302+ 69C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1302+ 69C3 ~           >
1302+ 69C3 ~           >
1302+ 69C3             >                endif           ; ok        // for other definitions it "points" the correct handler
1302+ 69C3             >                // Use of "; ok" to suppress "warning[fwdref]"
1302+ 69C3             >
1302+ 69C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1303+ 69C3              Two_Plus:
1304+ 69C3 E1                           pop     hl
1305+ 69C4 23                           inc     hl
1306+ 69C5 23                           inc     hl
1307+ 69C6
1308+ 69C6                              psh1
1308+ 69C6 E5          >                push    hl
1308+ 69C7 DD E9       >                jp      (ix)
1309+ 69C9
1310+ 69C9              //  ______________________________________________________________________
1311+ 69C9              //
1312+ 69C9              // cell+        a1 -- a2
1313+ 69C9              // increment by 2 top of stack
1314+ 69C9                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1314+ 69C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1314+ 69C9             >
1314+ 69C9             >                // dummy db directives used to calculate length of namec
1314+ 69C9 43 45 4C 4C >                db      "CELL+"
1314+ 69CD 2B          >
1314+ 69CE             >len_NFA         defl    $ - temp_NFA
1314+ 69CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1314+ 69C9             >
1314+ 69C9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1314+ 69CA 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1314+ 69CE 2B          >
1314+ 69CF             >                org     $-1                 // alter last byte of Name just above to set
1314+ 69CE AB          >                db      {b $} | END_BIT     // msb as name end
1314+ 69CF             >
1314+ 69CF BE 69       >                dw      last_NFA            // Link to previous definition Name
1314+ 69D1             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1314+ 69D1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1314+ 69D1 ~           >
1314+ 69D1 ~           >
1314+ 69D1             >                endif           ; ok        // for other definitions it "points" the correct handler
1314+ 69D1             >                // Use of "; ok" to suppress "warning[fwdref]"
1314+ 69D1             >
1314+ 69D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1315+ 69D1 C3 C3 69                     jp      Two_Plus
1316+ 69D4
1317+ 69D4              //  ______________________________________________________________________
1318+ 69D4              //
1319+ 69D4              // align        a1 -- a2
1320+ 69D4              // align memory : not used
1321+ 69D4              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1322+ 69D4              //            next
1323+ 69D4
1324+ 69D4              //  ______________________________________________________________________
1325+ 69D4              //
1326+ 69D4              // cell-        a1 -- a2
1327+ 69D4              // decrement by 2 top of stack
1328+ 69D4                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1328+ 69D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1328+ 69D4             >
1328+ 69D4             >                // dummy db directives used to calculate length of namec
1328+ 69D4 43 45 4C 4C >                db      "CELL-"
1328+ 69D8 2D          >
1328+ 69D9             >len_NFA         defl    $ - temp_NFA
1328+ 69D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1328+ 69D4             >
1328+ 69D4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1328+ 69D5 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1328+ 69D9 2D          >
1328+ 69DA             >                org     $-1                 // alter last byte of Name just above to set
1328+ 69D9 AD          >                db      {b $} | END_BIT     // msb as name end
1328+ 69DA             >
1328+ 69DA C9 69       >                dw      last_NFA            // Link to previous definition Name
1328+ 69DC             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1328+ 69DC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1328+ 69DC ~           >
1328+ 69DC ~           >
1328+ 69DC             >                endif           ; ok        // for other definitions it "points" the correct handler
1328+ 69DC             >                // Use of "; ok" to suppress "warning[fwdref]"
1328+ 69DC             >
1328+ 69DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1329+ 69DC              CellMinus:
1330+ 69DC E1                           pop     hl
1331+ 69DD 2B                           dec     hl
1332+ 69DE 2B                           dec     hl
1333+ 69DF
1334+ 69DF                              psh1
1334+ 69DF E5          >                push    hl
1334+ 69E0 DD E9       >                jp      (ix)
1335+ 69E2
1336+ 69E2              //  ______________________________________________________________________
1337+ 69E2              //
1338+ 69E2              // 2-           a1 -- a2
1339+ 69E2              // decrement by 2 top of stack
1340+ 69E2                              New_Def TWO_MINUS, "2-", is_code, is_normal
1340+ 69E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1340+ 69E2             >
1340+ 69E2             >                // dummy db directives used to calculate length of namec
1340+ 69E2 32 2D       >                db      "2-"
1340+ 69E4             >len_NFA         defl    $ - temp_NFA
1340+ 69E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1340+ 69E2             >
1340+ 69E2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1340+ 69E3 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1340+ 69E5             >                org     $-1                 // alter last byte of Name just above to set
1340+ 69E4 AD          >                db      {b $} | END_BIT     // msb as name end
1340+ 69E5             >
1340+ 69E5 D4 69       >                dw      last_NFA            // Link to previous definition Name
1340+ 69E7             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1340+ 69E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1340+ 69E7 ~           >
1340+ 69E7 ~           >
1340+ 69E7             >                endif           ; ok        // for other definitions it "points" the correct handler
1340+ 69E7             >                // Use of "; ok" to suppress "warning[fwdref]"
1340+ 69E7             >
1340+ 69E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1341+ 69E7 C3 DC 69                     jp      CellMinus
1342+ 69EA
1343+ 69EA              //  ______________________________________________________________________
1344+ 69EA              //
1345+ 69EA              // negate       n1 -- n2
1346+ 69EA              // change the sign of number
1347+ 69EA                              New_Def MINUS, "NEGATE", is_code, is_normal
1347+ 69EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1347+ 69EA             >
1347+ 69EA             >                // dummy db directives used to calculate length of namec
1347+ 69EA 4E 45 47 41 >                db      "NEGATE"
1347+ 69EE 54 45       >
1347+ 69F0             >len_NFA         defl    $ - temp_NFA
1347+ 69F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1347+ 69EA             >
1347+ 69EA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1347+ 69EB 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1347+ 69EF 54 45       >
1347+ 69F1             >                org     $-1                 // alter last byte of Name just above to set
1347+ 69F0 C5          >                db      {b $} | END_BIT     // msb as name end
1347+ 69F1             >
1347+ 69F1 E2 69       >                dw      last_NFA            // Link to previous definition Name
1347+ 69F3             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1347+ 69F3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1347+ 69F3 ~           >
1347+ 69F3 ~           >
1347+ 69F3             >                endif           ; ok        // for other definitions it "points" the correct handler
1347+ 69F3             >                // Use of "; ok" to suppress "warning[fwdref]"
1347+ 69F3             >
1347+ 69F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1348+ 69F3 21 00 00                     ld      hl, 0               // subtract from 0
1349+ 69F6 D1                           pop     de
1350+ 69F7 B7                           or      a
1351+ 69F8 ED 52                        sbc     hl, de
1352+ 69FA
1353+ 69FA                              psh1
1353+ 69FA E5          >                push    hl
1353+ 69FB DD E9       >                jp      (ix)
1354+ 69FD
1355+ 69FD              //  ______________________________________________________________________
1356+ 69FD              //
1357+ 69FD              // dnegate      d1 -- d2
1358+ 69FD              // change the sign of a double number
1359+ 69FD                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1359+ 69FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1359+ 69FD             >
1359+ 69FD             >                // dummy db directives used to calculate length of namec
1359+ 69FD 44 4E 45 47 >                db      "DNEGATE"
1359+ 6A01 41 54 45    >
1359+ 6A04             >len_NFA         defl    $ - temp_NFA
1359+ 6A04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1359+ 69FD             >
1359+ 69FD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1359+ 69FE 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1359+ 6A02 41 54 45    >
1359+ 6A05             >                org     $-1                 // alter last byte of Name just above to set
1359+ 6A04 C5          >                db      {b $} | END_BIT     // msb as name end
1359+ 6A05             >
1359+ 6A05 EA 69       >                dw      last_NFA            // Link to previous definition Name
1359+ 6A07             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1359+ 6A07 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1359+ 6A07 ~           >
1359+ 6A07 ~           >
1359+ 6A07             >                endif           ; ok        // for other definitions it "points" the correct handler
1359+ 6A07             >                // Use of "; ok" to suppress "warning[fwdref]"
1359+ 6A07             >
1359+ 6A07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1360+ 6A07 D9                           exx
1361+ 6A08 C1                           pop     bc                  // d1.H
1362+ 6A09 D1                           pop     de                  // d1.L
1363+ 6A0A AF                           xor     a
1364+ 6A0B 67                           ld      h, a
1365+ 6A0C 6F                           ld      l, a
1366+ 6A0D ED 52                        sbc     hl, de              // subtact from zero
1367+ 6A0F E5                           push    hl                  // > d2-L
1368+ 6A10 67                           ld      h, a
1369+ 6A11 6F                           ld      l, a
1370+ 6A12 ED 42                        sbc     hl, bc              // subtract from zero with carry
1371+ 6A14                                                          // > d2-H
1372+ 6A14 E5                           push    hl
1373+ 6A15 D9                           exx
1374+ 6A16                              next
1374+ 6A16 DD E9       >                jp      (ix)
1375+ 6A18
1376+ 6A18              //  ______________________________________________________________________
1377+ 6A18              //
1378+ 6A18              // over         n1 n2 -- n1 n2 n1
1379+ 6A18              // copy the second value of stack and put it on top.
1380+ 6A18                              New_Def OVER, "OVER", is_code, is_normal
1380+ 6A18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1380+ 6A18             >
1380+ 6A18             >                // dummy db directives used to calculate length of namec
1380+ 6A18 4F 56 45 52 >                db      "OVER"
1380+ 6A1C             >len_NFA         defl    $ - temp_NFA
1380+ 6A1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1380+ 6A18             >
1380+ 6A18 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1380+ 6A19 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1380+ 6A1D             >                org     $-1                 // alter last byte of Name just above to set
1380+ 6A1C D2          >                db      {b $} | END_BIT     // msb as name end
1380+ 6A1D             >
1380+ 6A1D FD 69       >                dw      last_NFA            // Link to previous definition Name
1380+ 6A1F             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1380+ 6A1F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1380+ 6A1F ~           >
1380+ 6A1F ~           >
1380+ 6A1F             >                endif           ; ok        // for other definitions it "points" the correct handler
1380+ 6A1F             >                // Use of "; ok" to suppress "warning[fwdref]"
1380+ 6A1F             >
1380+ 6A1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1381+ 6A1F D1                           pop     de                  //   n2
1382+ 6A20 E1                           pop     hl                  // < n1
1383+ 6A21 E5                           push    hl                  // > n1
1384+ 6A22 D5                           push    de                  // > n2
1385+ 6A23 E5                           push    hl                  // > n1
1386+ 6A24                              next
1386+ 6A24 DD E9       >                jp      (ix)
1387+ 6A26
1388+ 6A26              //  ______________________________________________________________________
1389+ 6A26              //
1390+ 6A26              // drop         n1 --
1391+ 6A26              // drops the top of stack
1392+ 6A26                              New_Def DROP, "DROP", is_code, is_normal
1392+ 6A26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1392+ 6A26             >
1392+ 6A26             >                // dummy db directives used to calculate length of namec
1392+ 6A26 44 52 4F 50 >                db      "DROP"
1392+ 6A2A             >len_NFA         defl    $ - temp_NFA
1392+ 6A2A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1392+ 6A26             >
1392+ 6A26 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1392+ 6A27 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1392+ 6A2B             >                org     $-1                 // alter last byte of Name just above to set
1392+ 6A2A D0          >                db      {b $} | END_BIT     // msb as name end
1392+ 6A2B             >
1392+ 6A2B 18 6A       >                dw      last_NFA            // Link to previous definition Name
1392+ 6A2D             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1392+ 6A2D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1392+ 6A2D ~           >
1392+ 6A2D ~           >
1392+ 6A2D             >                endif           ; ok        // for other definitions it "points" the correct handler
1392+ 6A2D             >                // Use of "; ok" to suppress "warning[fwdref]"
1392+ 6A2D             >
1392+ 6A2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1393+ 6A2D E1                           pop     hl                  // < n1 and discard previous TOS
1394+ 6A2E                              next
1394+ 6A2E DD E9       >                jp      (ix)
1395+ 6A30
1396+ 6A30              //  ______________________________________________________________________
1397+ 6A30              //
1398+ 6A30              // nip          n1 n2 -- n2
1399+ 6A30              // drops the second elemento on the stack
1400+ 6A30                              New_Def NIP, "NIP", is_code, is_normal
1400+ 6A30             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1400+ 6A30             >
1400+ 6A30             >                // dummy db directives used to calculate length of namec
1400+ 6A30 4E 49 50    >                db      "NIP"
1400+ 6A33             >len_NFA         defl    $ - temp_NFA
1400+ 6A33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1400+ 6A30             >
1400+ 6A30 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1400+ 6A31 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1400+ 6A34             >                org     $-1                 // alter last byte of Name just above to set
1400+ 6A33 D0          >                db      {b $} | END_BIT     // msb as name end
1400+ 6A34             >
1400+ 6A34 26 6A       >                dw      last_NFA            // Link to previous definition Name
1400+ 6A36             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1400+ 6A36 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1400+ 6A36 ~           >
1400+ 6A36 ~           >
1400+ 6A36             >                endif           ; ok        // for other definitions it "points" the correct handler
1400+ 6A36             >                // Use of "; ok" to suppress "warning[fwdref]"
1400+ 6A36             >
1400+ 6A36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1401+ 6A36
1402+ 6A36 E1                           pop     hl                  // < n1 discarded
1403+ 6A37 E3                           ex      (sp), hl
1404+ 6A38                              next
1404+ 6A38 DD E9       >                jp      (ix)
1405+ 6A3A
1406+ 6A3A              //  ______________________________________________________________________
1407+ 6A3A              //
1408+ 6A3A              // tuck         n1 n2 -- n2 n1 n2
1409+ 6A3A              // copy the top element after the second.
1410+ 6A3A                              New_Def TUCK, "TUCK", is_code, is_normal
1410+ 6A3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1410+ 6A3A             >
1410+ 6A3A             >                // dummy db directives used to calculate length of namec
1410+ 6A3A 54 55 43 4B >                db      "TUCK"
1410+ 6A3E             >len_NFA         defl    $ - temp_NFA
1410+ 6A3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1410+ 6A3A             >
1410+ 6A3A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1410+ 6A3B 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1410+ 6A3F             >                org     $-1                 // alter last byte of Name just above to set
1410+ 6A3E CB          >                db      {b $} | END_BIT     // msb as name end
1410+ 6A3F             >
1410+ 6A3F 30 6A       >                dw      last_NFA            // Link to previous definition Name
1410+ 6A41             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1410+ 6A41 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1410+ 6A41 ~           >
1410+ 6A41 ~           >
1410+ 6A41             >                endif           ; ok        // for other definitions it "points" the correct handler
1410+ 6A41             >                // Use of "; ok" to suppress "warning[fwdref]"
1410+ 6A41             >
1410+ 6A41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1411+ 6A41 E1                           pop     hl
1412+ 6A42 D1                           pop     de                  // < n1
1413+ 6A43 E5                           push    hl                  // > n2  and TOS
1414+ 6A44 D5                           push    de                  // > n1
1415+ 6A45 E5                           push    hl
1416+ 6A46                              next
1416+ 6A46 DD E9       >                jp      (ix)
1417+ 6A48
1418+ 6A48              //  ______________________________________________________________________
1419+ 6A48              //
1420+ 6A48              // swap         n1 n2 -- n2 n1
1421+ 6A48              // swaps the two values on top of stack
1422+ 6A48                              New_Def SWAP, "SWAP", is_code, is_normal
1422+ 6A48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1422+ 6A48             >
1422+ 6A48             >                // dummy db directives used to calculate length of namec
1422+ 6A48 53 57 41 50 >                db      "SWAP"
1422+ 6A4C             >len_NFA         defl    $ - temp_NFA
1422+ 6A4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1422+ 6A48             >
1422+ 6A48 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1422+ 6A49 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1422+ 6A4D             >                org     $-1                 // alter last byte of Name just above to set
1422+ 6A4C D0          >                db      {b $} | END_BIT     // msb as name end
1422+ 6A4D             >
1422+ 6A4D 3A 6A       >                dw      last_NFA            // Link to previous definition Name
1422+ 6A4F             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1422+ 6A4F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1422+ 6A4F ~           >
1422+ 6A4F ~           >
1422+ 6A4F             >                endif           ; ok        // for other definitions it "points" the correct handler
1422+ 6A4F             >                // Use of "; ok" to suppress "warning[fwdref]"
1422+ 6A4F             >
1422+ 6A4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1423+ 6A4F E1                           pop     hl                  // < n1
1424+ 6A50 E3                           ex      (sp),hl             // > n2
1425+ 6A51 E5                           push    hl                  // copy n1 to TOS
1426+ 6A52                              next
1426+ 6A52 DD E9       >                jp      (ix)
1427+ 6A54
1428+ 6A54              //  ______________________________________________________________________
1429+ 6A54              //
1430+ 6A54              // dup         n -- n n
1431+ 6A54              // duplicates the top value of stack
1432+ 6A54                              New_Def DUP, "DUP", is_code, is_normal
1432+ 6A54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1432+ 6A54             >
1432+ 6A54             >                // dummy db directives used to calculate length of namec
1432+ 6A54 44 55 50    >                db      "DUP"
1432+ 6A57             >len_NFA         defl    $ - temp_NFA
1432+ 6A57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1432+ 6A54             >
1432+ 6A54 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1432+ 6A55 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1432+ 6A58             >                org     $-1                 // alter last byte of Name just above to set
1432+ 6A57 D0          >                db      {b $} | END_BIT     // msb as name end
1432+ 6A58             >
1432+ 6A58 48 6A       >                dw      last_NFA            // Link to previous definition Name
1432+ 6A5A             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1432+ 6A5A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1432+ 6A5A ~           >
1432+ 6A5A ~           >
1432+ 6A5A             >                endif           ; ok        // for other definitions it "points" the correct handler
1432+ 6A5A             >                // Use of "; ok" to suppress "warning[fwdref]"
1432+ 6A5A             >
1432+ 6A5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1433+ 6A5A E1                           pop     hl
1434+ 6A5B E5                           push    hl                  // > n duplicate TOS
1435+ 6A5C E5                           push    hl
1436+ 6A5D                              next
1436+ 6A5D DD E9       >                jp      (ix)
1437+ 6A5F
1438+ 6A5F              //  ______________________________________________________________________
1439+ 6A5F              //
1440+ 6A5F              // rot         n1 n2 n3 -- n2 n3 n1
1441+ 6A5F              // Rotates the 3 top values of stack by picking the 3rd in access-order
1442+ 6A5F              // and putting it on top. The other two are shifted down one place.
1443+ 6A5F                              New_Def ROT, "ROT", is_code, is_normal
1443+ 6A5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1443+ 6A5F             >
1443+ 6A5F             >                // dummy db directives used to calculate length of namec
1443+ 6A5F 52 4F 54    >                db      "ROT"
1443+ 6A62             >len_NFA         defl    $ - temp_NFA
1443+ 6A62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1443+ 6A5F             >
1443+ 6A5F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1443+ 6A60 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1443+ 6A63             >                org     $-1                 // alter last byte of Name just above to set
1443+ 6A62 D4          >                db      {b $} | END_BIT     // msb as name end
1443+ 6A63             >
1443+ 6A63 54 6A       >                dw      last_NFA            // Link to previous definition Name
1443+ 6A65             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1443+ 6A65 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1443+ 6A65 ~           >
1443+ 6A65 ~           >
1443+ 6A65             >                endif           ; ok        // for other definitions it "points" the correct handler
1443+ 6A65             >                // Use of "; ok" to suppress "warning[fwdref]"
1443+ 6A65             >
1443+ 6A65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1444+ 6A65 D1                           pop     de                  // < n3
1445+ 6A66 E1                           pop     hl                  // < n2
1446+ 6A67 E3                           ex      (sp),hl             // > n2 < n1
1447+ 6A68 D5                           push    de                  // > n3
1448+ 6A69 E5                           push    hl                  // copy n1 to TOS
1449+ 6A6A                              next
1449+ 6A6A DD E9       >                jp      (ix)
1450+ 6A6C
1451+ 6A6C              //  ______________________________________________________________________
1452+ 6A6C              //
1453+ 6A6C              // -rot         n1 n2 n3 -- n3 n1 n2
1454+ 6A6C              // Rotates the 3 top values of stack by picking the 1st in access-order
1455+ 6A6C              // and putting back to 3rd place. The other two are shifted down one place.
1456+ 6A6C                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1456+ 6A6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1456+ 6A6C             >
1456+ 6A6C             >                // dummy db directives used to calculate length of namec
1456+ 6A6C 2D 52 4F 54 >                db      "-ROT"
1456+ 6A70             >len_NFA         defl    $ - temp_NFA
1456+ 6A70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1456+ 6A6C             >
1456+ 6A6C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1456+ 6A6D 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1456+ 6A71             >                org     $-1                 // alter last byte of Name just above to set
1456+ 6A70 D4          >                db      {b $} | END_BIT     // msb as name end
1456+ 6A71             >
1456+ 6A71 5F 6A       >                dw      last_NFA            // Link to previous definition Name
1456+ 6A73             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1456+ 6A73 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1456+ 6A73 ~           >
1456+ 6A73 ~           >
1456+ 6A73             >                endif           ; ok        // for other definitions it "points" the correct handler
1456+ 6A73             >                // Use of "; ok" to suppress "warning[fwdref]"
1456+ 6A73             >
1456+ 6A73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1457+ 6A73 E1                           pop     hl                  // < n3
1458+ 6A74 D1                           pop     de                  // < n2
1459+ 6A75 E3                           ex      (sp),hl             // > n3 < n1
1460+ 6A76 E5                           push    hl                  // > n1
1461+ 6A77 D5                           push    de                  // copy n3 to TOS
1462+ 6A78                              next
1462+ 6A78 DD E9       >                jp      (ix)
1463+ 6A7A
1464+ 6A7A              //  ______________________________________________________________________
1465+ 6A7A              //
1466+ 6A7A              // pick        n1 -- nx
1467+ 6A7A              // picks the nth element from TOS
1468+ 6A7A                              New_Def PICK, "PICK", is_code, is_normal
1468+ 6A7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1468+ 6A7A             >
1468+ 6A7A             >                // dummy db directives used to calculate length of namec
1468+ 6A7A 50 49 43 4B >                db      "PICK"
1468+ 6A7E             >len_NFA         defl    $ - temp_NFA
1468+ 6A7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1468+ 6A7A             >
1468+ 6A7A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1468+ 6A7B 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1468+ 6A7F             >                org     $-1                 // alter last byte of Name just above to set
1468+ 6A7E CB          >                db      {b $} | END_BIT     // msb as name end
1468+ 6A7F             >
1468+ 6A7F 6C 6A       >                dw      last_NFA            // Link to previous definition Name
1468+ 6A81             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1468+ 6A81 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1468+ 6A81 ~           >
1468+ 6A81 ~           >
1468+ 6A81             >                endif           ; ok        // for other definitions it "points" the correct handler
1468+ 6A81             >                // Use of "; ok" to suppress "warning[fwdref]"
1468+ 6A81             >
1468+ 6A81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1469+ 6A81 E1                           pop     hl                  // take TOS as index
1470+ 6A82 29                           add     hl, hl              // as cells
1471+ 6A83 39                           add     hl, sp              // from Stack Pointer
1472+ 6A84 7E                           ld      a, (hl)             // replace TOS
1473+ 6A85 23                           inc     hl
1474+ 6A86 66                           ld      h, (hl)
1475+ 6A87 6F                           ld      l, a
1476+ 6A88
1477+ 6A88                              psh1
1477+ 6A88 E5          >                push    hl
1477+ 6A89 DD E9       >                jp      (ix)
1478+ 6A8B
1479+ 6A8B
1480+ 6A8B              //  ______________________________________________________________________
1481+ 6A8B              //
1482+ 6A8B              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1483+ 6A8B              // picks the nth element from TOS
1484+ 6A8B              //              New_Def ROLL, "ROLL", is_code, is_normal
1485+ 6A8B              //              exx                     // we need all registers free
1486+ 6A8B              //              pop     hl              // number of cells to roll
1487+ 6A8B              //              ld      a, h
1488+ 6A8B              //              or       l
1489+ 6A8B              //              jr      z, Roll_Zero
1490+ 6A8B              //                  add     hl, hl              // number of bytes to move
1491+ 6A8B              //                  ld      b, h
1492+ 6A8B              //                  ld      c, l
1493+ 6A8B              //                  add     hl, sp          // address of n1
1494+ 6A8B              //                  ld      a, (hl)         // take n1 into a and a,
1495+ 6A8B              //                  inc     hl
1496+ 6A8B              //                  ex      af, af'
1497+ 6A8B              //                  ld      a, (hl)         // take n1 into a and a,
1498+ 6A8B              //                  ld      d, h
1499+ 6A8B              //                  ld      e, l
1500+ 6A8B              //                  dec     hl
1501+ 6A8B              //                  dec     hl
1502+ 6A8B              //                  lddr
1503+ 6A8B              //                  ex      de, hl
1504+ 6A8B              //                  ld      (hl), a
1505+ 6A8B              //                  dec     hl
1506+ 6A8B              //                  ex      af, af'
1507+ 6A8B              //                  ld      (hl), a
1508+ 6A8B              //Roll_Zero:
1509+ 6A8B              //              exx
1510+ 6A8B              //              next
1511+ 6A8B
1512+ 6A8B
1513+ 6A8B              //  ______________________________________________________________________
1514+ 6A8B              //
1515+ 6A8B              // 2over        d1 d2 -- d1 d2 d1
1516+ 6A8B              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1517+ 6A8B              // copy the second double of stack and put on top.
1518+ 6A8B              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1519+ 6A8B              //
1520+ 6A8B              //              ld      hl, 7
1521+ 6A8B              //              add     hl, sp
1522+ 6A8B              //              ld      d, (hl)
1523+ 6A8B              //              dec     hl
1524+ 6A8B              //              ld      e, (hl)             // d1-L
1525+ 6A8B              //              push    de
1526+ 6A8B              //              dec     hl
1527+ 6A8B              //              ld      d, (hl)
1528+ 6A8B              //              dec     hl
1529+ 6A8B              //              ld      e, (hl)             // d1-H
1530+ 6A8B              //              push    de
1531+ 6A8B              //              next
1532+ 6A8B
1533+ 6A8B              //  ______________________________________________________________________
1534+ 6A8B              //
1535+ 6A8B              // 2drop        d --
1536+ 6A8B              //              n1 n2 --
1537+ 6A8B              // drops the top double from stack
1538+ 6A8B                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1538+ 6A8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1538+ 6A8B             >
1538+ 6A8B             >                // dummy db directives used to calculate length of namec
1538+ 6A8B 32 44 52 4F >                db      "2DROP"
1538+ 6A8F 50          >
1538+ 6A90             >len_NFA         defl    $ - temp_NFA
1538+ 6A90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1538+ 6A8B             >
1538+ 6A8B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1538+ 6A8C 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1538+ 6A90 50          >
1538+ 6A91             >                org     $-1                 // alter last byte of Name just above to set
1538+ 6A90 D0          >                db      {b $} | END_BIT     // msb as name end
1538+ 6A91             >
1538+ 6A91 7A 6A       >                dw      last_NFA            // Link to previous definition Name
1538+ 6A93             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1538+ 6A93 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1538+ 6A93 ~           >
1538+ 6A93 ~           >
1538+ 6A93             >                endif           ; ok        // for other definitions it "points" the correct handler
1538+ 6A93             >                // Use of "; ok" to suppress "warning[fwdref]"
1538+ 6A93             >
1538+ 6A93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1539+ 6A93 E1                           pop     hl
1540+ 6A94 E1                           pop     hl
1541+ 6A95                              next
1541+ 6A95 DD E9       >                jp      (ix)
1542+ 6A97
1543+ 6A97              //  ______________________________________________________________________
1544+ 6A97              //
1545+ 6A97              // 2nip         d1 d2 -- d2
1546+ 6A97              //              n1 n2 n3 n4 -- n3 n4
1547+ 6A97              // drops the second double on the stack
1548+ 6A97              //              New_Def TWO_NIP, 4, "2nip"
1549+ 6A97              //              ...
1550+ 6A97
1551+ 6A97              //  ______________________________________________________________________
1552+ 6A97              //
1553+ 6A97              // 2tuck         d1 d2 -- d2 d1 d2
1554+ 6A97              // copy the top element after the second.
1555+ 6A97              //              New_Def TWO_TUCK, 5, "2tuck"
1556+ 6A97              //              ...
1557+ 6A97
1558+ 6A97              //  ______________________________________________________________________
1559+ 6A97              //
1560+ 6A97              // 2swap         d1 d2 -- d2 d1
1561+ 6A97              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1562+ 6A97              // swaps the two doubles on top of stack
1563+ 6A97                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1563+ 6A97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1563+ 6A97             >
1563+ 6A97             >                // dummy db directives used to calculate length of namec
1563+ 6A97 32 53 57 41 >                db      "2SWAP"
1563+ 6A9B 50          >
1563+ 6A9C             >len_NFA         defl    $ - temp_NFA
1563+ 6A9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1563+ 6A97             >
1563+ 6A97 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1563+ 6A98 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1563+ 6A9C 50          >
1563+ 6A9D             >                org     $-1                 // alter last byte of Name just above to set
1563+ 6A9C D0          >                db      {b $} | END_BIT     // msb as name end
1563+ 6A9D             >
1563+ 6A9D 8B 6A       >                dw      last_NFA            // Link to previous definition Name
1563+ 6A9F             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1563+ 6A9F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1563+ 6A9F ~           >
1563+ 6A9F ~           >
1563+ 6A9F             >                endif           ; ok        // for other definitions it "points" the correct handler
1563+ 6A9F             >                // Use of "; ok" to suppress "warning[fwdref]"
1563+ 6A9F             >
1563+ 6A9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1564+ 6A9F F1                           pop     af                  //   d2-H
1565+ 6AA0 E1                           pop     hl                  // < d2-L
1566+ 6AA1 D1                           pop     de                  // < d1-H
1567+ 6AA2 E3                           ex      (sp), hl            // < d1-L > d2-L
1568+ 6AA3 F5                           push    af                  // > d2-H
1569+ 6AA4 E5                           push    hl                  // > d1-L
1570+ 6AA5 D5                           push    de
1571+ 6AA6
1572+ 6AA6                              next
1572+ 6AA6 DD E9       >                jp      (ix)
1573+ 6AA8
1574+ 6AA8              //  ______________________________________________________________________
1575+ 6AA8              //
1576+ 6AA8              // 2dup         d -- d d
1577+ 6AA8              //              n1 n2 -- n1 n2 n1 n2
1578+ 6AA8              // duplicates the top double of stack
1579+ 6AA8                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1579+ 6AA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1579+ 6AA8             >
1579+ 6AA8             >                // dummy db directives used to calculate length of namec
1579+ 6AA8 32 44 55 50 >                db      "2DUP"
1579+ 6AAC             >len_NFA         defl    $ - temp_NFA
1579+ 6AAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1579+ 6AA8             >
1579+ 6AA8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1579+ 6AA9 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1579+ 6AAD             >                org     $-1                 // alter last byte of Name just above to set
1579+ 6AAC D0          >                db      {b $} | END_BIT     // msb as name end
1579+ 6AAD             >
1579+ 6AAD 97 6A       >                dw      last_NFA            // Link to previous definition Name
1579+ 6AAF             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1579+ 6AAF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1579+ 6AAF ~           >
1579+ 6AAF ~           >
1579+ 6AAF             >                endif           ; ok        // for other definitions it "points" the correct handler
1579+ 6AAF             >                // Use of "; ok" to suppress "warning[fwdref]"
1579+ 6AAF             >
1579+ 6AAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1580+ 6AAF E1                           pop     hl                  // < d-H
1581+ 6AB0 D1                           pop     de                  // < d-L
1582+ 6AB1 D5                           push    de                  // < d-L
1583+ 6AB2 E5                           push    hl                  // > d-H
1584+ 6AB3 D5                           push    de                  // > d-L
1585+ 6AB4 E5                           push    hl                  // > d-H
1586+ 6AB5                              next
1586+ 6AB5 DD E9       >                jp      (ix)
1587+ 6AB7
1588+ 6AB7              //  ______________________________________________________________________
1589+ 6AB7              //
1590+ 6AB7              // 2rot         d1 d2 d3 -- d2 d3 d1
1591+ 6AB7              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1592+ 6AB7              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1593+ 6AB7              // and putting it on top. The other two are shifted down one place.
1594+ 6AB7              //              New_Def TWO?ROT, 4, "2rot"
1595+ 6AB7              //              ...
1596+ 6AB7              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1597+ 6AB7              //
1598+ 6AB7              //      d3  |d2  |d1  |
1599+ 6AB7              //      h l |h l |h l |
1600+ 6AB7              // SP   LHED|LHED|LHED|
1601+ 6AB7              // SP  +0123|4567|89ab|
1602+ 6AB7              //              ld      hl, $000B
1603+ 6AB7              //              add     hl, sp
1604+ 6AB7              //              ld      d, (hl)
1605+ 6AB7              //              dec     hl
1606+ 6AB7              //              ld      e, (hl)
1607+ 6AB7              //              dec     hl
1608+ 6AB7              //              push    de
1609+ 6AB7              //              ld      d, (hl)
1610+ 6AB7              //              dec     hl
1611+ 6AB7              //              ld      e, (hl)
1612+ 6AB7              //              dec     hl
1613+ 6AB7              //              push    de
1614+ 6AB7
1615+ 6AB7              //      d1  |d3  |d2  |d1  |
1616+ 6AB7              //      h l |h l |h l |h l |
1617+ 6AB7              // SP   LHED|LHED|LHED|LHED|
1618+ 6AB7              // SP       +0123|4567|89ab|
1619+ 6AB7
1620+ 6AB7              //              ld      d, h
1621+ 6AB7              //              ld      e, l
1622+ 6AB7              //              inc     de
1623+ 6AB7              //              inc     de
1624+ 6AB7              //              inc     de
1625+ 6AB7              //              inc     de
1626+ 6AB7              //              push    bc
1627+ 6AB7              //              ld      bc, $000C
1628+ 6AB7              //              lddr
1629+ 6AB7              //              pop     bc
1630+ 6AB7              //              pop     de
1631+ 6AB7              //              pop     de
1632+ 6AB7              //
1633+ 6AB7              //              next
1634+ 6AB7
1635+ 6AB7
1636+ 6AB7              //  ______________________________________________________________________
1637+ 6AB7              //
1638+ 6AB7              // +!           n a --
1639+ 6AB7              // Sums to the content of address a the number n.
1640+ 6AB7              // It is the same of  a @ n + a !
1641+ 6AB7                              New_Def PLUSSTORE, "+!", is_code, is_normal
1641+ 6AB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1641+ 6AB7             >
1641+ 6AB7             >                // dummy db directives used to calculate length of namec
1641+ 6AB7 2B 21       >                db      "+!"
1641+ 6AB9             >len_NFA         defl    $ - temp_NFA
1641+ 6AB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1641+ 6AB7             >
1641+ 6AB7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1641+ 6AB8 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1641+ 6ABA             >                org     $-1                 // alter last byte of Name just above to set
1641+ 6AB9 A1          >                db      {b $} | END_BIT     // msb as name end
1641+ 6ABA             >
1641+ 6ABA A8 6A       >                dw      last_NFA            // Link to previous definition Name
1641+ 6ABC             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1641+ 6ABC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1641+ 6ABC ~           >
1641+ 6ABC ~           >
1641+ 6ABC             >                endif           ; ok        // for other definitions it "points" the correct handler
1641+ 6ABC             >                // Use of "; ok" to suppress "warning[fwdref]"
1641+ 6ABC             >
1641+ 6ABC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1642+ 6ABC E1                           pop     hl                  // hl is the address
1643+ 6ABD D1                           pop     de                  // de is the number
1644+ 6ABE 7E                           ld      a, (hl)
1645+ 6ABF 83                           add     e
1646+ 6AC0 77                           ld      (hl), a
1647+ 6AC1 23                           inc     hl
1648+ 6AC2 7E                           ld      a, (hl)
1649+ 6AC3 8A                           adc     d
1650+ 6AC4 77                           ld      (hl), a
1651+ 6AC5
1652+ 6AC5                              next
1652+ 6AC5 DD E9       >                jp      (ix)
1653+ 6AC7
1654+ 6AC7              //  ______________________________________________________________________
1655+ 6AC7              //
1656+ 6AC7              // toggle       a n --
1657+ 6AC7              // Complements (xor) the byte at addrress  a  with the model n.
1658+ 6AC7                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1658+ 6AC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1658+ 6AC7             >
1658+ 6AC7             >                // dummy db directives used to calculate length of namec
1658+ 6AC7 54 4F 47 47 >                db      "TOGGLE"
1658+ 6ACB 4C 45       >
1658+ 6ACD             >len_NFA         defl    $ - temp_NFA
1658+ 6ACD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1658+ 6AC7             >
1658+ 6AC7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1658+ 6AC8 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1658+ 6ACC 4C 45       >
1658+ 6ACE             >                org     $-1                 // alter last byte of Name just above to set
1658+ 6ACD C5          >                db      {b $} | END_BIT     // msb as name end
1658+ 6ACE             >
1658+ 6ACE B7 6A       >                dw      last_NFA            // Link to previous definition Name
1658+ 6AD0             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1658+ 6AD0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1658+ 6AD0 ~           >
1658+ 6AD0 ~           >
1658+ 6AD0             >                endif           ; ok        // for other definitions it "points" the correct handler
1658+ 6AD0             >                // Use of "; ok" to suppress "warning[fwdref]"
1658+ 6AD0             >
1658+ 6AD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1659+ 6AD0 D1                           pop     de
1660+ 6AD1 E1                           pop     hl
1661+ 6AD2 7E                           ld      a, (hl)
1662+ 6AD3 AB                           xor     e
1663+ 6AD4 77                           ld      (hl), a
1664+ 6AD5
1665+ 6AD5                              next
1665+ 6AD5 DD E9       >                jp      (ix)
1666+ 6AD7
1667+ 6AD7              //  ______________________________________________________________________
1668+ 6AD7              //
1669+ 6AD7              // @            a -- n
1670+ 6AD7              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1671+ 6AD7                              New_Def FETCH, "@", is_code, is_normal
1671+ 6AD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1671+ 6AD7             >
1671+ 6AD7             >                // dummy db directives used to calculate length of namec
1671+ 6AD7 40          >                db      "@"
1671+ 6AD8             >len_NFA         defl    $ - temp_NFA
1671+ 6AD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1671+ 6AD7             >
1671+ 6AD7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1671+ 6AD8 40          >                db      "@"               // name string in 7-bit ascii, but
1671+ 6AD9             >                org     $-1                 // alter last byte of Name just above to set
1671+ 6AD8 C0          >                db      {b $} | END_BIT     // msb as name end
1671+ 6AD9             >
1671+ 6AD9 C7 6A       >                dw      last_NFA            // Link to previous definition Name
1671+ 6ADB             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1671+ 6ADB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1671+ 6ADB ~           >
1671+ 6ADB ~           >
1671+ 6ADB             >                endif           ; ok        // for other definitions it "points" the correct handler
1671+ 6ADB             >                // Use of "; ok" to suppress "warning[fwdref]"
1671+ 6ADB             >
1671+ 6ADB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1672+ 6ADB E1                           pop     hl
1673+ 6ADC 5E                           ld      e, (hl)             // low-byte
1674+ 6ADD 23                           inc     hl
1675+ 6ADE 56                           ld      d, (hl)             // high-byte
1676+ 6ADF D5                           push    de
1677+ 6AE0                              next
1677+ 6AE0 DD E9       >                jp      (ix)
1678+ 6AE2
1679+ 6AE2              //  ______________________________________________________________________
1680+ 6AE2              //
1681+ 6AE2              // !            n a --
1682+ 6AE2              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1683+ 6AE2                              New_Def STORE, "!", is_code, is_normal
1683+ 6AE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1683+ 6AE2             >
1683+ 6AE2             >                // dummy db directives used to calculate length of namec
1683+ 6AE2 21          >                db      "!"
1683+ 6AE3             >len_NFA         defl    $ - temp_NFA
1683+ 6AE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1683+ 6AE2             >
1683+ 6AE2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1683+ 6AE3 21          >                db      "!"               // name string in 7-bit ascii, but
1683+ 6AE4             >                org     $-1                 // alter last byte of Name just above to set
1683+ 6AE3 A1          >                db      {b $} | END_BIT     // msb as name end
1683+ 6AE4             >
1683+ 6AE4 D7 6A       >                dw      last_NFA            // Link to previous definition Name
1683+ 6AE6             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1683+ 6AE6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1683+ 6AE6 ~           >
1683+ 6AE6 ~           >
1683+ 6AE6             >                endif           ; ok        // for other definitions it "points" the correct handler
1683+ 6AE6             >                // Use of "; ok" to suppress "warning[fwdref]"
1683+ 6AE6             >
1683+ 6AE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1684+ 6AE6 E1                           pop     hl                  // address
1685+ 6AE7 D1                           pop     de                  // < n
1686+ 6AE8 73                           ld      (hl), e             // low-byte
1687+ 6AE9 23                           inc     hl
1688+ 6AEA 72                           ld      (hl), d             // high-byte
1689+ 6AEB
1690+ 6AEB                              next
1690+ 6AEB DD E9       >                jp      (ix)
1691+ 6AED
1692+ 6AED              //  ______________________________________________________________________
1693+ 6AED              //
1694+ 6AED              // c@           a -- c
1695+ 6AED              // fetch a character n from address a
1696+ 6AED                              New_Def CFETCH, "C@", is_code, is_normal
1696+ 6AED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1696+ 6AED             >
1696+ 6AED             >                // dummy db directives used to calculate length of namec
1696+ 6AED 43 40       >                db      "C@"
1696+ 6AEF             >len_NFA         defl    $ - temp_NFA
1696+ 6AEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1696+ 6AED             >
1696+ 6AED 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1696+ 6AEE 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1696+ 6AF0             >                org     $-1                 // alter last byte of Name just above to set
1696+ 6AEF C0          >                db      {b $} | END_BIT     // msb as name end
1696+ 6AF0             >
1696+ 6AF0 E2 6A       >                dw      last_NFA            // Link to previous definition Name
1696+ 6AF2             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1696+ 6AF2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1696+ 6AF2 ~           >
1696+ 6AF2 ~           >
1696+ 6AF2             >                endif           ; ok        // for other definitions it "points" the correct handler
1696+ 6AF2             >                // Use of "; ok" to suppress "warning[fwdref]"
1696+ 6AF2             >
1696+ 6AF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1697+ 6AF2 E1                           pop     hl
1698+ 6AF3 6E                           ld      l, (hl)             // low-byte
1699+ 6AF4 26 00                        ld      h, 0
1700+ 6AF6
1701+ 6AF6                              psh1
1701+ 6AF6 E5          >                push    hl
1701+ 6AF7 DD E9       >                jp      (ix)
1702+ 6AF9
1703+ 6AF9              //  ______________________________________________________________________
1704+ 6AF9              //
1705+ 6AF9              // c!           c a --
1706+ 6AF9              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1707+ 6AF9                              New_Def CSTORE, "C!", is_code, is_normal
1707+ 6AF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1707+ 6AF9             >
1707+ 6AF9             >                // dummy db directives used to calculate length of namec
1707+ 6AF9 43 21       >                db      "C!"
1707+ 6AFB             >len_NFA         defl    $ - temp_NFA
1707+ 6AFB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1707+ 6AF9             >
1707+ 6AF9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1707+ 6AFA 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1707+ 6AFC             >                org     $-1                 // alter last byte of Name just above to set
1707+ 6AFB A1          >                db      {b $} | END_BIT     // msb as name end
1707+ 6AFC             >
1707+ 6AFC ED 6A       >                dw      last_NFA            // Link to previous definition Name
1707+ 6AFE             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1707+ 6AFE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1707+ 6AFE ~           >
1707+ 6AFE ~           >
1707+ 6AFE             >                endif           ; ok        // for other definitions it "points" the correct handler
1707+ 6AFE             >                // Use of "; ok" to suppress "warning[fwdref]"
1707+ 6AFE             >
1707+ 6AFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1708+ 6AFE E1                           pop     hl                  // < address
1709+ 6AFF D1                           pop     de
1710+ 6B00 73                           ld      (hl), e             // low-byte
1711+ 6B01
1712+ 6B01                              next
1712+ 6B01 DD E9       >                jp      (ix)
1713+ 6B03
1714+ 6B03              //  ______________________________________________________________________
1715+ 6B03              //
1716+ 6B03              // 2@           a -- d
1717+ 6B03              // fetch a 32 bits number d from address a and leaves it on top of the
1718+ 6B03              // stack as two single numbers, high part as top of the stack.
1719+ 6B03              // A double number is normally kept in CPU registers as HLDE.
1720+ 6B03              // On stack a double number is treated as two single numbers
1721+ 6B03              // where BC is on the top of the stack and HL is the second from top,
1722+ 6B03              // so the sign of the number can be checked on top of stack
1723+ 6B03              // and in the stack memory it appears as LHED.
1724+ 6B03                              New_Def TWO_FETCH, "2@", is_code, is_normal
1724+ 6B03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1724+ 6B03             >
1724+ 6B03             >                // dummy db directives used to calculate length of namec
1724+ 6B03 32 40       >                db      "2@"
1724+ 6B05             >len_NFA         defl    $ - temp_NFA
1724+ 6B05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1724+ 6B03             >
1724+ 6B03 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1724+ 6B04 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1724+ 6B06             >                org     $-1                 // alter last byte of Name just above to set
1724+ 6B05 C0          >                db      {b $} | END_BIT     // msb as name end
1724+ 6B06             >
1724+ 6B06 F9 6A       >                dw      last_NFA            // Link to previous definition Name
1724+ 6B08             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1724+ 6B08 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1724+ 6B08 ~           >
1724+ 6B08 ~           >
1724+ 6B08             >                endif           ; ok        // for other definitions it "points" the correct handler
1724+ 6B08             >                // Use of "; ok" to suppress "warning[fwdref]"
1724+ 6B08             >
1724+ 6B08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1725+ 6B08 E1                           pop     hl                  // address
1726+ 6B09 5E                           ld      e, (hl)             // low-byte
1727+ 6B0A 23                           inc     hl
1728+ 6B0B 56                           ld      d, (hl)             // high-byte
1729+ 6B0C 23                           inc     hl
1730+ 6B0D 7E                           ld      a, (hl)             // low-byte
1731+ 6B0E 23                           inc     hl
1732+ 6B0F 66                           ld      h, (hl)             // high-byte
1733+ 6B10 6F                           ld      l, a
1734+ 6B11 E5                           push    hl
1735+ 6B12 D5                           push    de
1736+ 6B13                              next
1736+ 6B13 DD E9       >                jp      (ix)
1737+ 6B15
1738+ 6B15              //  ______________________________________________________________________
1739+ 6B15              //
1740+ 6B15              // 2!           d a --
1741+ 6B15              // stores a 32 bits number d from address a and leaves it on top of the
1742+ 6B15              // stack as two single numbers, high part as top of the stack.
1743+ 6B15              // A double number is normally kept in CPU registers as HLDE.
1744+ 6B15              // On stack a double number is treated as two single numbers
1745+ 6B15              // where BC is on the top of the stack and HL is the second from top,
1746+ 6B15              // so the sign of the number can be checked on top of stack
1747+ 6B15              // and in the stack memory it appears as LHED.
1748+ 6B15                              New_Def TWO_STORE, "2!", is_code, is_normal
1748+ 6B15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1748+ 6B15             >
1748+ 6B15             >                // dummy db directives used to calculate length of namec
1748+ 6B15 32 21       >                db      "2!"
1748+ 6B17             >len_NFA         defl    $ - temp_NFA
1748+ 6B17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1748+ 6B15             >
1748+ 6B15 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1748+ 6B16 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1748+ 6B18             >                org     $-1                 // alter last byte of Name just above to set
1748+ 6B17 A1          >                db      {b $} | END_BIT     // msb as name end
1748+ 6B18             >
1748+ 6B18 03 6B       >                dw      last_NFA            // Link to previous definition Name
1748+ 6B1A             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1748+ 6B1A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1748+ 6B1A ~           >
1748+ 6B1A ~           >
1748+ 6B1A             >                endif           ; ok        // for other definitions it "points" the correct handler
1748+ 6B1A             >                // Use of "; ok" to suppress "warning[fwdref]"
1748+ 6B1A             >
1748+ 6B1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1749+ 6B1A D9                           exx
1750+ 6B1B E1                           pop     hl                  // address
1751+ 6B1C C1                           pop     bc                  // < high-part
1752+ 6B1D D1                           pop     de                  // < low-part > Instruction Pointer
1753+ 6B1E 71                           ld      (hl), c
1754+ 6B1F 23                           inc     hl
1755+ 6B20 70                           ld      (hl), b
1756+ 6B21 23                           inc     hl
1757+ 6B22 73                           ld      (hl), e
1758+ 6B23 23                           inc     hl
1759+ 6B24 72                           ld      (hl), d
1760+ 6B25 D9                           exx
1761+ 6B26                              next
1761+ 6B26 DD E9       >                jp      (ix)
1762+ 6B28
1763+ 6B28              //  ______________________________________________________________________
1764+ 6B28              //
1765+ 6B28              // p@           a -- c
1766+ 6B28              // Read one byte from port a and leave the result on top of stack
1767+ 6B28                              New_Def PFETCH, "P@", is_code, is_normal
1767+ 6B28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1767+ 6B28             >
1767+ 6B28             >                // dummy db directives used to calculate length of namec
1767+ 6B28 50 40       >                db      "P@"
1767+ 6B2A             >len_NFA         defl    $ - temp_NFA
1767+ 6B2A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1767+ 6B28             >
1767+ 6B28 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1767+ 6B29 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1767+ 6B2B             >                org     $-1                 // alter last byte of Name just above to set
1767+ 6B2A C0          >                db      {b $} | END_BIT     // msb as name end
1767+ 6B2B             >
1767+ 6B2B 15 6B       >                dw      last_NFA            // Link to previous definition Name
1767+ 6B2D             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1767+ 6B2D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1767+ 6B2D ~           >
1767+ 6B2D ~           >
1767+ 6B2D             >                endif           ; ok        // for other definitions it "points" the correct handler
1767+ 6B2D             >                // Use of "; ok" to suppress "warning[fwdref]"
1767+ 6B2D             >
1767+ 6B2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1768+ 6B2D D9                           exx
1769+ 6B2E C1                           pop     bc
1770+ 6B2F 26 00                        ld      h, 0
1771+ 6B31 ED 68                        in      l, (c)
1772+ 6B33 E5                           push    hl
1773+ 6B34 D9                           exx
1774+ 6B35                              next
1774+ 6B35 DD E9       >                jp      (ix)
1775+ 6B37
1776+ 6B37              //  ______________________________________________________________________
1777+ 6B37              //
1778+ 6B37              // p!           c a --
1779+ 6B37              // Send one byte (top of stack) to port a
1780+ 6B37                              New_Def PSTORE, "P!", is_code, is_normal
1780+ 6B37             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1780+ 6B37             >
1780+ 6B37             >                // dummy db directives used to calculate length of namec
1780+ 6B37 50 21       >                db      "P!"
1780+ 6B39             >len_NFA         defl    $ - temp_NFA
1780+ 6B39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1780+ 6B37             >
1780+ 6B37 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1780+ 6B38 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1780+ 6B3A             >                org     $-1                 // alter last byte of Name just above to set
1780+ 6B39 A1          >                db      {b $} | END_BIT     // msb as name end
1780+ 6B3A             >
1780+ 6B3A 28 6B       >                dw      last_NFA            // Link to previous definition Name
1780+ 6B3C             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1780+ 6B3C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1780+ 6B3C ~           >
1780+ 6B3C ~           >
1780+ 6B3C             >                endif           ; ok        // for other definitions it "points" the correct handler
1780+ 6B3C             >                // Use of "; ok" to suppress "warning[fwdref]"
1780+ 6B3C             >
1780+ 6B3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1781+ 6B3C D9                           exx
1782+ 6B3D C1                           pop     bc
1783+ 6B3E E1                           pop     hl                  // < c
1784+ 6B3F ED 69                        out     (c), l              // low-byte
1785+ 6B41 D9                           exx
1786+ 6B42                              next
1786+ 6B42 DD E9       >                jp      (ix)
1787+ 6B44
1788+ 6B44
1789+ 6B44              //  ______________________________________________________________________
1790+ 6B44              //
1791+ 6B44              // 2*           n1 -- n2
1792+ 6B44              // doubles the number at top of stack
1793+ 6B44                              New_Def TWO_MUL, "2*", is_code, is_normal
1793+ 6B44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1793+ 6B44             >
1793+ 6B44             >                // dummy db directives used to calculate length of namec
1793+ 6B44 32 2A       >                db      "2*"
1793+ 6B46             >len_NFA         defl    $ - temp_NFA
1793+ 6B46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1793+ 6B44             >
1793+ 6B44 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1793+ 6B45 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1793+ 6B47             >                org     $-1                 // alter last byte of Name just above to set
1793+ 6B46 AA          >                db      {b $} | END_BIT     // msb as name end
1793+ 6B47             >
1793+ 6B47 37 6B       >                dw      last_NFA            // Link to previous definition Name
1793+ 6B49             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1793+ 6B49 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1793+ 6B49 ~           >
1793+ 6B49 ~           >
1793+ 6B49             >                endif           ; ok        // for other definitions it "points" the correct handler
1793+ 6B49             >                // Use of "; ok" to suppress "warning[fwdref]"
1793+ 6B49             >
1793+ 6B49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1794+ 6B49              Two_Mul_Ptr:
1795+ 6B49 E1                           pop     hl
1796+ 6B4A 29                           add     hl, hl
1797+ 6B4B
1798+ 6B4B                              psh1
1798+ 6B4B E5          >                push    hl
1798+ 6B4C DD E9       >                jp      (ix)
1799+ 6B4E
1800+ 6B4E              //  ______________________________________________________________________
1801+ 6B4E              //
1802+ 6B4E              // 2/           n1 -- n2
1803+ 6B4E              // halves the top of stack, sign is unchanged
1804+ 6B4E                              New_Def TWO_DIV, "2/", is_code, is_normal
1804+ 6B4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1804+ 6B4E             >
1804+ 6B4E             >                // dummy db directives used to calculate length of namec
1804+ 6B4E 32 2F       >                db      "2/"
1804+ 6B50             >len_NFA         defl    $ - temp_NFA
1804+ 6B50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1804+ 6B4E             >
1804+ 6B4E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1804+ 6B4F 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1804+ 6B51             >                org     $-1                 // alter last byte of Name just above to set
1804+ 6B50 AF          >                db      {b $} | END_BIT     // msb as name end
1804+ 6B51             >
1804+ 6B51 44 6B       >                dw      last_NFA            // Link to previous definition Name
1804+ 6B53             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1804+ 6B53 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1804+ 6B53 ~           >
1804+ 6B53 ~           >
1804+ 6B53             >                endif           ; ok        // for other definitions it "points" the correct handler
1804+ 6B53             >                // Use of "; ok" to suppress "warning[fwdref]"
1804+ 6B53             >
1804+ 6B53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1805+ 6B53 E1                           pop     hl
1806+ 6B54 CB 2C                        sra     h
1807+ 6B56 CB 1D                        rr      l
1808+ 6B58
1809+ 6B58                              psh1
1809+ 6B58 E5          >                push    hl
1809+ 6B59 DD E9       >                jp      (ix)
1810+ 6B5B
1811+ 6B5B              //  ______________________________________________________________________
1812+ 6B5B              //
1813+ 6B5B              // lshift       n1 u -- n2
1814+ 6B5B              // bit left shift of u bits
1815+ 6B5B                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1815+ 6B5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1815+ 6B5B             >
1815+ 6B5B             >                // dummy db directives used to calculate length of namec
1815+ 6B5B 4C 53 48 49 >                db      "LSHIFT"
1815+ 6B5F 46 54       >
1815+ 6B61             >len_NFA         defl    $ - temp_NFA
1815+ 6B61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1815+ 6B5B             >
1815+ 6B5B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1815+ 6B5C 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1815+ 6B60 46 54       >
1815+ 6B62             >                org     $-1                 // alter last byte of Name just above to set
1815+ 6B61 D4          >                db      {b $} | END_BIT     // msb as name end
1815+ 6B62             >
1815+ 6B62 4E 6B       >                dw      last_NFA            // Link to previous definition Name
1815+ 6B64             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1815+ 6B64 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1815+ 6B64 ~           >
1815+ 6B64 ~           >
1815+ 6B64             >                endif           ; ok        // for other definitions it "points" the correct handler
1815+ 6B64             >                // Use of "; ok" to suppress "warning[fwdref]"
1815+ 6B64             >
1815+ 6B64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1816+ 6B64 D1                           pop     de
1817+ 6B65
1818+ 6B65 E1                           pop     hl
1819+ 6B66 7B                           ld      a, e
1820+ 6B67 B7                           or      a
1821+ 6B68 28 04                        jr      z, Lshift_Zero
1822+ 6B6A              Lshift_Loop:
1823+ 6B6A 29                                   add     hl, hl
1824+ 6B6B 3D                                   dec     a
1825+ 6B6C 20 FC                            jr      nz, Lshift_Loop
1826+ 6B6E              Lshift_Zero:
1827+ 6B6E
1828+ 6B6E
1829+ 6B6E                              psh1
1829+ 6B6E E5          >                push    hl
1829+ 6B6F DD E9       >                jp      (ix)
1830+ 6B71
1831+ 6B71              //  ______________________________________________________________________
1832+ 6B71              //
1833+ 6B71              // rshift       n1 u -- n2
1834+ 6B71              // bit right shift of u bits
1835+ 6B71                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1835+ 6B71             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1835+ 6B71             >
1835+ 6B71             >                // dummy db directives used to calculate length of namec
1835+ 6B71 52 53 48 49 >                db      "RSHIFT"
1835+ 6B75 46 54       >
1835+ 6B77             >len_NFA         defl    $ - temp_NFA
1835+ 6B77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1835+ 6B71             >
1835+ 6B71 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1835+ 6B72 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1835+ 6B76 46 54       >
1835+ 6B78             >                org     $-1                 // alter last byte of Name just above to set
1835+ 6B77 D4          >                db      {b $} | END_BIT     // msb as name end
1835+ 6B78             >
1835+ 6B78 5B 6B       >                dw      last_NFA            // Link to previous definition Name
1835+ 6B7A             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1835+ 6B7A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1835+ 6B7A ~           >
1835+ 6B7A ~           >
1835+ 6B7A             >                endif           ; ok        // for other definitions it "points" the correct handler
1835+ 6B7A             >                // Use of "; ok" to suppress "warning[fwdref]"
1835+ 6B7A             >
1835+ 6B7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1836+ 6B7A D1                           pop     de
1837+ 6B7B
1838+ 6B7B E1                           pop     hl
1839+ 6B7C 7B                           ld      a, e
1840+ 6B7D B7                           or      a
1841+ 6B7E 28 07                        jr      z, Rshift_Zero
1842+ 6B80              Rshift_Loop:
1843+ 6B80 CB 3C                                srl     h
1844+ 6B82 CB 1D                                rr      l
1845+ 6B84 3D                                   dec     a
1846+ 6B85 20 F9                            jr      nz, Rshift_Loop
1847+ 6B87              Rshift_Zero:
1848+ 6B87
1849+ 6B87
1850+ 6B87                              psh1
1850+ 6B87 E5          >                push    hl
1850+ 6B88 DD E9       >                jp      (ix)
1851+ 6B8A
1852+ 6B8A              //  ______________________________________________________________________
1853+ 6B8A              //
1854+ 6B8A              // cells        n1 -- n2
1855+ 6B8A              // decrement by 2 top of stack
1856+ 6B8A                              New_Def CELLS, "CELLS", is_code, is_normal
1856+ 6B8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1856+ 6B8A             >
1856+ 6B8A             >                // dummy db directives used to calculate length of namec
1856+ 6B8A 43 45 4C 4C >                db      "CELLS"
1856+ 6B8E 53          >
1856+ 6B8F             >len_NFA         defl    $ - temp_NFA
1856+ 6B8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1856+ 6B8A             >
1856+ 6B8A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1856+ 6B8B 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1856+ 6B8F 53          >
1856+ 6B90             >                org     $-1                 // alter last byte of Name just above to set
1856+ 6B8F D3          >                db      {b $} | END_BIT     // msb as name end
1856+ 6B90             >
1856+ 6B90 71 6B       >                dw      last_NFA            // Link to previous definition Name
1856+ 6B92             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1856+ 6B92 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1856+ 6B92 ~           >
1856+ 6B92 ~           >
1856+ 6B92             >                endif           ; ok        // for other definitions it "points" the correct handler
1856+ 6B92             >                // Use of "; ok" to suppress "warning[fwdref]"
1856+ 6B92             >
1856+ 6B92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1857+ 6B92 C3 49 6B                     jp      Two_Mul_Ptr
1858+ 6B95
1859+ 6B95
1860+ 6B95              //  ______________________________________________________________________
1861+ 6B95
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
 111  6B95                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
   1+ 6B95              //  ______________________________________________________________________
   2+ 6B95              //
   3+ 6B95              //  L1.asm
   4+ 6B95              //
   5+ 6B95              //  Level-1 definitions and derivate
   6+ 6B95              //  ______________________________________________________________________
   7+ 6B95
   8+ 6B95              //  ______________________________________________________________________
   9+ 6B95              //
  10+ 6B95              // :            -- cccc     ( compile time )
  11+ 6B95              //              i*x -- j*x  ( run time )
  12+ 6B95              // Colon Definition
  13+ 6B95                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6B95             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6B95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6B95             >
  13+ 6B95             >                // dummy db directives used to calculate length of namec
  13+ 6B95 3A          >                db      ":"
  13+ 6B96             >len_NFA         defl    $ - temp_NFA
  13+ 6B96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6B95             >
  13+ 6B95 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6B96 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6B97             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6B96 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6B97             >
  13+ 6B97 8A 6B       >                dw      last_NFA            // Link to previous definition Name
  13+ 6B99             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6B99 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6B9C             >
  13+ 6B9C             >
  13+ 6B9C             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6B9C             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6B9C             >
  13+ 6B9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6B9C
  15+ 6B9C 42 70                        dw      QEXEC                   // ?exec
  16+ 6B9E FA 6F                        dw      STORE_CSP               // !csp
  17+ 6BA0 85 6D DB 6A                  dw      CURRENT, FETCH          // current @
  18+ 6BA4 77 6D E6 6A                  dw      CONTEXT, STORE          // context !
  19+ 6BA8 6B 76                        dw      CREATE                  // create  ( forward )
  20+ 6BAA F7 70                        dw      SMUDGE                  // dmudge
  21+ 6BAC E1 70                        dw      SQUARED_CLOSE           // ]
  22+ 6BAE 51 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6BB0                                                              // ... immediate
  24+ 6BB0              Enter_Ptr:
  25+ 6BB0                              // via call coded in CFA
  26+ 6BB0                              ldhlrp
  26+ 6BB0 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6BB3 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6BB4 70                           ld      (hl), b
  29+ 6BB5 2B                           dec     hl
  30+ 6BB6 71                           ld      (hl), c
  31+ 6BB7                              ldrphl
  31+ 6BB7 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6BBA
  33+ 6BBA
  34+ 6BBA C1                           pop     bc                  // points to PFA of "this" word
  35+ 6BBB                              next
  35+ 6BBB DD E9       >                jp      (ix)
  36+ 6BBD
  37+ 6BBD              //  ______________________________________________________________________
  38+ 6BBD              //
  39+ 6BBD              // ;            --
  40+ 6BBD              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6BBD                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6BBD             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6BBD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6BBD             >
  41+ 6BBD             >                // dummy db directives used to calculate length of namec
  41+ 6BBD 3B          >                db      ";"
  41+ 6BBE             >len_NFA         defl    $ - temp_NFA
  41+ 6BBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6BBD             >
  41+ 6BBD C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6BBE 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6BBF             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6BBE BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6BBF             >
  41+ 6BBF 95 6B       >                dw      last_NFA            // Link to previous definition Name
  41+ 6BC1             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6BC1 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6BC4             >
  41+ 6BC4             >
  41+ 6BC4             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6BC4             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6BC4             >
  41+ 6BC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6BC4
  43+ 6BC4 6E 70                        dw      QCSP                    // ?csp
  44+ 6BC6 A7 70 F7 68                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6BCA F7 70                        dw      SMUDGE                  // smudge
  46+ 6BCC D2 70                        dw      SQUARED_OPEN            // [
  47+ 6BCE F7 68                        dw      EXIT                    // ; immediate
  48+ 6BD0
  49+ 6BD0              //  ______________________________________________________________________
  50+ 6BD0              //
  51+ 6BD0              // noop         --
  52+ 6BD0
  53+ 6BD0                              Colon_Def NOOP, "NOOP", is_normal
  53+ 6BD0             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 6BD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6BD0             >
  53+ 6BD0             >                // dummy db directives used to calculate length of namec
  53+ 6BD0 4E 4F 4F 50 >                db      "NOOP"
  53+ 6BD4             >len_NFA         defl    $ - temp_NFA
  53+ 6BD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6BD0             >
  53+ 6BD0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6BD1 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6BD5             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6BD4 D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6BD5             >
  53+ 6BD5 BD 6B       >                dw      last_NFA            // Link to previous definition Name
  53+ 6BD7             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6BD7 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 6BDA             >
  53+ 6BDA             >
  53+ 6BDA             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6BDA             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6BDA             >
  53+ 6BDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6BDA F7 68                        dw      EXIT
  55+ 6BDC
  56+ 6BDC              //  ______________________________________________________________________
  57+ 6BDC              //
  58+ 6BDC              // constant     n -- cccc     ( compile time )
  59+ 6BDC              //              -- n          ( run time )
  60+ 6BDC              // Constant definition.
  61+ 6BDC                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6BDC             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6BDC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6BDC             >
  61+ 6BDC             >                // dummy db directives used to calculate length of namec
  61+ 6BDC 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6BE0 54 41 4E 54 >
  61+ 6BE4             >len_NFA         defl    $ - temp_NFA
  61+ 6BE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6BDC             >
  61+ 6BDC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6BDD 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6BE1 54 41 4E 54 >
  61+ 6BE5             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6BE4 D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6BE5             >
  61+ 6BE5 D0 6B       >                dw      last_NFA            // Link to previous definition Name
  61+ 6BE7             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6BE7 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6BEA             >
  61+ 6BEA             >
  61+ 6BEA             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6BEA             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6BEA             >
  61+ 6BEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6BEA
  63+ 6BEA 6B 76                        dw      CREATE                  // create
  64+ 6BEC 52 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6BEE 51 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6BF0              Constant_Ptr:
  67+ 6BF0
  68+ 6BF0
  69+ 6BF0 E1                           pop     hl
  70+ 6BF1
  71+ 6BF1 5E                           ld      e, (hl)
  72+ 6BF2 23                           inc     hl
  73+ 6BF3 56                           ld      d, (hl)
  74+ 6BF4 D5                           push    de
  75+ 6BF5                              next
  75+ 6BF5 DD E9       >                jp      (ix)
  76+ 6BF7
  77+ 6BF7              //  ______________________________________________________________________
  78+ 6BF7              //
  79+ 6BF7              // variable     n -- cccc     ( compile time )
  80+ 6BF7              //              -- a          ( run time )
  81+ 6BF7              // Variable definition, n is the initial value.
  82+ 6BF7                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6BF7             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6BF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6BF7             >
  82+ 6BF7             >                // dummy db directives used to calculate length of namec
  82+ 6BF7 56 41 52 49 >                db      "VARIABLE"
  82+ 6BFB 41 42 4C 45 >
  82+ 6BFF             >len_NFA         defl    $ - temp_NFA
  82+ 6BFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6BF7             >
  82+ 6BF7 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6BF8 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6BFC 41 42 4C 45 >
  82+ 6C00             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6BFF C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6C00             >
  82+ 6C00 DC 6B       >                dw      last_NFA            // Link to previous definition Name
  82+ 6C02             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6C02 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6C05             >
  82+ 6C05             >
  82+ 6C05             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6C05             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6C05             >
  82+ 6C05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6C05
  84+ 6C05 E7 6B                        dw      CONSTANT                // constant
  85+ 6C07 51 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6C09              Variable_Ptr:
  87+ 6C09
  88+ 6C09
  89+ 6C09
  90+ 6C09
  91+ 6C09                              next
  91+ 6C09 DD E9       >                jp      (ix)
  92+ 6C0B
  93+ 6C0B              //  ______________________________________________________________________
  94+ 6C0B              //
  95+ 6C0B              // user         b -- cccc     ( compile time )
  96+ 6C0B              //              -- a          ( run time )
  97+ 6C0B              // User variable definition
  98+ 6C0B                              Colon_Def USER, "USER", is_normal
  98+ 6C0B             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6C0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6C0B             >
  98+ 6C0B             >                // dummy db directives used to calculate length of namec
  98+ 6C0B 55 53 45 52 >                db      "USER"
  98+ 6C0F             >len_NFA         defl    $ - temp_NFA
  98+ 6C0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6C0B             >
  98+ 6C0B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6C0C 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6C10             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6C0F D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6C10             >
  98+ 6C10 F7 6B       >                dw      last_NFA            // Link to previous definition Name
  98+ 6C12             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6C12 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6C15             >
  98+ 6C15             >
  98+ 6C15             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6C15             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6C15             >
  98+ 6C15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6C15
 100+ 6C15 6B 76                        dw      CREATE                  // create
 101+ 6C17 64 6E                        dw      CCOMMA                  // c,
 102+ 6C19 51 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6C1B
 104+ 6C1B
 105+ 6C1B              User_Ptr:
 106+ 6C1B                              // via call coded in CFA
 107+ 6C1B E1                           pop     hl
 108+ 6C1C
 109+ 6C1C 5E                           ld      e, (hl)
 110+ 6C1D 16 00                        ld      d, 0
 111+ 6C1F 2A 94 63                     ld      hl, (USER_Pointer)
 112+ 6C22 19                           add     hl, de
 113+ 6C23
 114+ 6C23                              psh1
 114+ 6C23 E5          >                push    hl
 114+ 6C24 DD E9       >                jp      (ix)
 115+ 6C26
 116+ 6C26              //  ______________________________________________________________________
 117+ 6C26              //
 118+ 6C26                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6C26             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6C26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6C26             >
 118+ 6C26             >                // dummy db directives used to calculate length of namec
 118+ 6C26 30          >                db      "0"
 118+ 6C27             >len_NFA         defl    $ - temp_NFA
 118+ 6C27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6C26             >
 118+ 6C26 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6C27 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6C28             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6C27 B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6C28             >
 118+ 6C28 0B 6C       >                dw      last_NFA            // Link to previous definition Name
 118+ 6C2A             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6C2A CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6C2D             >
 118+ 6C2D             >
 118+ 6C2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6C2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6C2D             >
 118+ 6C2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6C2D 00 00       >                dw      0
 119+ 6C2F                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6C2F             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6C2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6C2F             >
 119+ 6C2F             >                // dummy db directives used to calculate length of namec
 119+ 6C2F 31          >                db      "1"
 119+ 6C30             >len_NFA         defl    $ - temp_NFA
 119+ 6C30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6C2F             >
 119+ 6C2F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6C30 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6C31             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6C30 B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6C31             >
 119+ 6C31 26 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6C33             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6C33 CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6C36             >
 119+ 6C36             >
 119+ 6C36             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6C36             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6C36             >
 119+ 6C36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6C36 01 00       >                dw      1
 120+ 6C38                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6C38             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6C38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6C38             >
 120+ 6C38             >                // dummy db directives used to calculate length of namec
 120+ 6C38 32          >                db      "2"
 120+ 6C39             >len_NFA         defl    $ - temp_NFA
 120+ 6C39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6C38             >
 120+ 6C38 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6C39 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6C3A             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6C39 B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6C3A             >
 120+ 6C3A 2F 6C       >                dw      last_NFA            // Link to previous definition Name
 120+ 6C3C             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6C3C CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6C3F             >
 120+ 6C3F             >
 120+ 6C3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6C3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6C3F             >
 120+ 6C3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6C3F 02 00       >                dw      2
 121+ 6C41                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6C41             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6C41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6C41             >
 121+ 6C41             >                // dummy db directives used to calculate length of namec
 121+ 6C41 33          >                db      "3"
 121+ 6C42             >len_NFA         defl    $ - temp_NFA
 121+ 6C42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6C41             >
 121+ 6C41 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6C42 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6C43             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6C42 B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6C43             >
 121+ 6C43 38 6C       >                dw      last_NFA            // Link to previous definition Name
 121+ 6C45             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6C45 CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6C48             >
 121+ 6C48             >
 121+ 6C48             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6C48             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6C48             >
 121+ 6C48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6C48 03 00       >                dw      3
 122+ 6C4A                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6C4A             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6C4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6C4A             >
 122+ 6C4A             >                // dummy db directives used to calculate length of namec
 122+ 6C4A 2D 31       >                db      "-1"
 122+ 6C4C             >len_NFA         defl    $ - temp_NFA
 122+ 6C4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6C4A             >
 122+ 6C4A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6C4B 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6C4D             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6C4C B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6C4D             >
 122+ 6C4D 41 6C       >                dw      last_NFA            // Link to previous definition Name
 122+ 6C4F             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6C4F CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6C52             >
 122+ 6C52             >
 122+ 6C52             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6C52             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6C52             >
 122+ 6C52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6C52 FF FF       >                dw      -1
 123+ 6C54                              Constant_Def BL         ,   "BL"    , $20
 123+ 6C54             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6C54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6C54             >
 123+ 6C54             >                // dummy db directives used to calculate length of namec
 123+ 6C54 42 4C       >                db      "BL"
 123+ 6C56             >len_NFA         defl    $ - temp_NFA
 123+ 6C56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6C54             >
 123+ 6C54 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6C55 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6C57             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6C56 CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6C57             >
 123+ 6C57 4A 6C       >                dw      last_NFA            // Link to previous definition Name
 123+ 6C59             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6C59 CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6C5C             >
 123+ 6C5C             >
 123+ 6C5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6C5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6C5C             >
 123+ 6C5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6C5C 20 00       >                dw      $20
 124+ 6C5E                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6C5E             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6C5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6C5E             >
 124+ 6C5E             >                // dummy db directives used to calculate length of namec
 124+ 6C5E 43 2F 4C    >                db      "C/L"
 124+ 6C61             >len_NFA         defl    $ - temp_NFA
 124+ 6C61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6C5E             >
 124+ 6C5E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6C5F 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6C62             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6C61 CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6C62             >
 124+ 6C62 54 6C       >                dw      last_NFA            // Link to previous definition Name
 124+ 6C64             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6C64 CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6C67             >
 124+ 6C67             >
 124+ 6C67             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6C67             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6C67             >
 124+ 6C67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6C67 40 00       >                dw      64
 125+ 6C69                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6C69             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6C69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6C69             >
 125+ 6C69             >                // dummy db directives used to calculate length of namec
 125+ 6C69 42 2F 42 55 >                db      "B/BUF"
 125+ 6C6D 46          >
 125+ 6C6E             >len_NFA         defl    $ - temp_NFA
 125+ 6C6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6C69             >
 125+ 6C69 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6C6A 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6C6E 46          >
 125+ 6C6F             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6C6E C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6C6F             >
 125+ 6C6F 5E 6C       >                dw      last_NFA            // Link to previous definition Name
 125+ 6C71             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6C71 CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6C74             >
 125+ 6C74             >
 125+ 6C74             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6C74             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6C74             >
 125+ 6C74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6C74 00 02       >                dw      512
 126+ 6C76                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6C76             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6C76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6C76             >
 126+ 6C76             >                // dummy db directives used to calculate length of namec
 126+ 6C76 42 2F 53 43 >                db      "B/SCR"
 126+ 6C7A 52          >
 126+ 6C7B             >len_NFA         defl    $ - temp_NFA
 126+ 6C7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6C76             >
 126+ 6C76 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6C77 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6C7B 52          >
 126+ 6C7C             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6C7B D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6C7C             >
 126+ 6C7C 69 6C       >                dw      last_NFA            // Link to previous definition Name
 126+ 6C7E             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6C7E CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6C81             >
 126+ 6C81             >
 126+ 6C81             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6C81             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6C81             >
 126+ 6C81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6C81 02 00       >                dw      2
 127+ 6C83                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6C83             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6C83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6C83             >
 127+ 6C83             >                // dummy db directives used to calculate length of namec
 127+ 6C83 4C 2F 53 43 >                db      "L/SCR"
 127+ 6C87 52          >
 127+ 6C88             >len_NFA         defl    $ - temp_NFA
 127+ 6C88             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6C83             >
 127+ 6C83 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6C84 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6C88 52          >
 127+ 6C89             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6C88 D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6C89             >
 127+ 6C89 76 6C       >                dw      last_NFA            // Link to previous definition Name
 127+ 6C8B             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6C8B CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6C8E             >
 127+ 6C8E             >
 127+ 6C8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6C8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6C8E             >
 127+ 6C8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6C8E 10 00       >                dw      16
 128+ 6C90
 129+ 6C90              //  ______________________________________________________________________
 130+ 6C90              //
 131+ 6C90              // +origin         --
 132+ 6C90              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 133+ 6C90              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 134+ 6C90              //              dw      PLUS                    // +
 135+ 6C90              //              dw      EXIT                    // ;
 136+ 6C90                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 136+ 6C90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 136+ 6C90             >
 136+ 6C90             >                // dummy db directives used to calculate length of namec
 136+ 6C90 2B 4F 52 49 >                db      "+ORIGIN"
 136+ 6C94 47 49 4E    >
 136+ 6C97             >len_NFA         defl    $ - temp_NFA
 136+ 6C97             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 136+ 6C90             >
 136+ 6C90 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 136+ 6C91 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 136+ 6C95 47 49 4E    >
 136+ 6C98             >                org     $-1                 // alter last byte of Name just above to set
 136+ 6C97 CE          >                db      {b $} | END_BIT     // msb as name end
 136+ 6C98             >
 136+ 6C98 83 6C       >                dw      last_NFA            // Link to previous definition Name
 136+ 6C9A             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 136+ 6C9A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 136+ 6C9A ~           >
 136+ 6C9A ~           >
 136+ 6C9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 136+ 6C9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 136+ 6C9A             >
 136+ 6C9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 137+ 6C9A E1                           pop     hl
 138+ 6C9B 11 66 63                     ld      de, Cold_origin
 139+ 6C9E 19                           add     hl, de
 140+ 6C9F E5                           push    hl
 141+ 6CA0                              next
 141+ 6CA0 DD E9       >                jp      (ix)
 142+ 6CA2
 143+ 6CA2
 144+ 6CA2              //  ______________________________________________________________________
 145+ 6CA2              //
 146+ 6CA2                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 146+ 6CA2             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 146+ 6CA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 6CA2             >
 146+ 6CA2             >                // dummy db directives used to calculate length of namec
 146+ 6CA2 28 4E 45 58 >                db      "(NEXT)"
 146+ 6CA6 54 29       >
 146+ 6CA8             >len_NFA         defl    $ - temp_NFA
 146+ 6CA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 6CA2             >
 146+ 6CA2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 6CA3 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 146+ 6CA7 54 29       >
 146+ 6CA9             >                org     $-1                 // alter last byte of Name just above to set
 146+ 6CA8 A9          >                db      {b $} | END_BIT     // msb as name end
 146+ 6CA9             >
 146+ 6CA9 90 6C       >                dw      last_NFA            // Link to previous definition Name
 146+ 6CAB             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 6CAB CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 146+ 6CAE             >
 146+ 6CAE             >
 146+ 6CAE             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 6CAE             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 6CAE             >
 146+ 6CAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 6CAE 98 63       >                dw      Next_Ptr
 147+ 6CB0
 148+ 6CB0              //  ______________________________________________________________________
 149+ 6CB0              //
 150+ 6CB0
 151+ 6CB0                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 151+ 6CB0             >                New_Def  S0, "S0", User_Ptr, is_normal
 151+ 6CB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6CB0             >
 151+ 6CB0             >                // dummy db directives used to calculate length of namec
 151+ 6CB0 53 30       >                db      "S0"
 151+ 6CB2             >len_NFA         defl    $ - temp_NFA
 151+ 6CB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6CB0             >
 151+ 6CB0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6CB1 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 151+ 6CB3             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6CB2 B0          >                db      {b $} | END_BIT     // msb as name end
 151+ 6CB3             >
 151+ 6CB3 A2 6C       >                dw      last_NFA            // Link to previous definition Name
 151+ 6CB5             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6CB5 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6CB8             >
 151+ 6CB8             >
 151+ 6CB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6CB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6CB8             >
 151+ 6CB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6CB8 06          >                db      06
 152+ 6CB9                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 152+ 6CB9             >                New_Def  R0, "R0", User_Ptr, is_normal
 152+ 6CB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6CB9             >
 152+ 6CB9             >                // dummy db directives used to calculate length of namec
 152+ 6CB9 52 30       >                db      "R0"
 152+ 6CBB             >len_NFA         defl    $ - temp_NFA
 152+ 6CBB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6CB9             >
 152+ 6CB9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6CBA 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 152+ 6CBC             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6CBB B0          >                db      {b $} | END_BIT     // msb as name end
 152+ 6CBC             >
 152+ 6CBC B0 6C       >                dw      last_NFA            // Link to previous definition Name
 152+ 6CBE             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6CBE CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6CC1             >
 152+ 6CC1             >
 152+ 6CC1             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6CC1             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6CC1             >
 152+ 6CC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6CC1 08          >                db      08
 153+ 6CC2                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 153+ 6CC2             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 153+ 6CC2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6CC2             >
 153+ 6CC2             >                // dummy db directives used to calculate length of namec
 153+ 6CC2 54 49 42    >                db      "TIB"
 153+ 6CC5             >len_NFA         defl    $ - temp_NFA
 153+ 6CC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6CC2             >
 153+ 6CC2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6CC3 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 153+ 6CC6             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6CC5 C2          >                db      {b $} | END_BIT     // msb as name end
 153+ 6CC6             >
 153+ 6CC6 B9 6C       >                dw      last_NFA            // Link to previous definition Name
 153+ 6CC8             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6CC8 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6CCB             >
 153+ 6CCB             >
 153+ 6CCB             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6CCB             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6CCB             >
 153+ 6CCB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6CCB 0A          >                db      10
 154+ 6CCC                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 154+ 6CCC             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 154+ 6CCC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6CCC             >
 154+ 6CCC             >                // dummy db directives used to calculate length of namec
 154+ 6CCC 57 49 44 54 >                db      "WIDTH"
 154+ 6CD0 48          >
 154+ 6CD1             >len_NFA         defl    $ - temp_NFA
 154+ 6CD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6CCC             >
 154+ 6CCC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6CCD 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 154+ 6CD1 48          >
 154+ 6CD2             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6CD1 C8          >                db      {b $} | END_BIT     // msb as name end
 154+ 6CD2             >
 154+ 6CD2 C2 6C       >                dw      last_NFA            // Link to previous definition Name
 154+ 6CD4             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6CD4 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6CD7             >
 154+ 6CD7             >
 154+ 6CD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6CD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6CD7             >
 154+ 6CD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6CD7 0C          >                db      12
 155+ 6CD8                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 155+ 6CD8             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 155+ 6CD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6CD8             >
 155+ 6CD8             >                // dummy db directives used to calculate length of namec
 155+ 6CD8 57 41 52 4E >                db      "WARNING"
 155+ 6CDC 49 4E 47    >
 155+ 6CDF             >len_NFA         defl    $ - temp_NFA
 155+ 6CDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6CD8             >
 155+ 6CD8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6CD9 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 155+ 6CDD 49 4E 47    >
 155+ 6CE0             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6CDF C7          >                db      {b $} | END_BIT     // msb as name end
 155+ 6CE0             >
 155+ 6CE0 CC 6C       >                dw      last_NFA            // Link to previous definition Name
 155+ 6CE2             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6CE2 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6CE5             >
 155+ 6CE5             >
 155+ 6CE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6CE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6CE5             >
 155+ 6CE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6CE5 0E          >                db      14
 156+ 6CE6                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 156+ 6CE6             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 156+ 6CE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6CE6             >
 156+ 6CE6             >                // dummy db directives used to calculate length of namec
 156+ 6CE6 46 45 4E 43 >                db      "FENCE"
 156+ 6CEA 45          >
 156+ 6CEB             >len_NFA         defl    $ - temp_NFA
 156+ 6CEB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6CE6             >
 156+ 6CE6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6CE7 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 156+ 6CEB 45          >
 156+ 6CEC             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6CEB C5          >                db      {b $} | END_BIT     // msb as name end
 156+ 6CEC             >
 156+ 6CEC D8 6C       >                dw      last_NFA            // Link to previous definition Name
 156+ 6CEE             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6CEE CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6CF1             >
 156+ 6CF1             >
 156+ 6CF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6CF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6CF1             >
 156+ 6CF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6CF1 10          >                db      16
 157+ 6CF2                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 157+ 6CF2             >                New_Def  DP, "DP", User_Ptr, is_normal
 157+ 6CF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6CF2             >
 157+ 6CF2             >                // dummy db directives used to calculate length of namec
 157+ 6CF2 44 50       >                db      "DP"
 157+ 6CF4             >len_NFA         defl    $ - temp_NFA
 157+ 6CF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6CF2             >
 157+ 6CF2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6CF3 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 157+ 6CF5             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6CF4 D0          >                db      {b $} | END_BIT     // msb as name end
 157+ 6CF5             >
 157+ 6CF5 E6 6C       >                dw      last_NFA            // Link to previous definition Name
 157+ 6CF7             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6CF7 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6CFA             >
 157+ 6CFA             >
 157+ 6CFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6CFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6CFA             >
 157+ 6CFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6CFA 12          >                db      18
 158+ 6CFB                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 158+ 6CFB             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 158+ 6CFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6CFB             >
 158+ 6CFB             >                // dummy db directives used to calculate length of namec
 158+ 6CFB 56 4F 43 2D >                db      "VOC-LINK"
 158+ 6CFF 4C 49 4E 4B >
 158+ 6D03             >len_NFA         defl    $ - temp_NFA
 158+ 6D03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6CFB             >
 158+ 6CFB 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6CFC 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 158+ 6D00 4C 49 4E 4B >
 158+ 6D04             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6D03 CB          >                db      {b $} | END_BIT     // msb as name end
 158+ 6D04             >
 158+ 6D04 F2 6C       >                dw      last_NFA            // Link to previous definition Name
 158+ 6D06             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6D06 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6D09             >
 158+ 6D09             >
 158+ 6D09             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6D09             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6D09             >
 158+ 6D09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6D09 14          >                db      20
 159+ 6D0A                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 159+ 6D0A             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 159+ 6D0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6D0A             >
 159+ 6D0A             >                // dummy db directives used to calculate length of namec
 159+ 6D0A 46 49 52 53 >                db      "FIRST"
 159+ 6D0E 54          >
 159+ 6D0F             >len_NFA         defl    $ - temp_NFA
 159+ 6D0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6D0A             >
 159+ 6D0A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6D0B 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 159+ 6D0F 54          >
 159+ 6D10             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6D0F D4          >                db      {b $} | END_BIT     // msb as name end
 159+ 6D10             >
 159+ 6D10 FB 6C       >                dw      last_NFA            // Link to previous definition Name
 159+ 6D12             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6D12 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6D15             >
 159+ 6D15             >
 159+ 6D15             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6D15             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6D15             >
 159+ 6D15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6D15 16          >                db      22
 160+ 6D16                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 160+ 6D16             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 160+ 6D16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6D16             >
 160+ 6D16             >                // dummy db directives used to calculate length of namec
 160+ 6D16 4C 49 4D 49 >                db      "LIMIT"
 160+ 6D1A 54          >
 160+ 6D1B             >len_NFA         defl    $ - temp_NFA
 160+ 6D1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6D16             >
 160+ 6D16 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6D17 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 160+ 6D1B 54          >
 160+ 6D1C             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6D1B D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6D1C             >
 160+ 6D1C 0A 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6D1E             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6D1E CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6D21             >
 160+ 6D21             >
 160+ 6D21             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6D21             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6D21             >
 160+ 6D21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6D21 18          >                db      24
 161+ 6D22                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 161+ 6D22             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 161+ 6D22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6D22             >
 161+ 6D22             >                // dummy db directives used to calculate length of namec
 161+ 6D22 45 58 50    >                db      "EXP"
 161+ 6D25             >len_NFA         defl    $ - temp_NFA
 161+ 6D25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6D22             >
 161+ 6D22 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6D23 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 161+ 6D26             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6D25 D0          >                db      {b $} | END_BIT     // msb as name end
 161+ 6D26             >
 161+ 6D26 16 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6D28             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6D28 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6D2B             >
 161+ 6D2B             >
 161+ 6D2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6D2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6D2B             >
 161+ 6D2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6D2B 1A          >                db      26
 162+ 6D2C                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 162+ 6D2C             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 162+ 6D2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6D2C             >
 162+ 6D2C             >                // dummy db directives used to calculate length of namec
 162+ 6D2C 4E 4D 4F 44 >                db      "NMODE"
 162+ 6D30 45          >
 162+ 6D31             >len_NFA         defl    $ - temp_NFA
 162+ 6D31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6D2C             >
 162+ 6D2C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6D2D 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 162+ 6D31 45          >
 162+ 6D32             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6D31 C5          >                db      {b $} | END_BIT     // msb as name end
 162+ 6D32             >
 162+ 6D32 22 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6D34             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6D34 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6D37             >
 162+ 6D37             >
 162+ 6D37             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6D37             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6D37             >
 162+ 6D37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6D37 1C          >                db      28
 163+ 6D38                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 163+ 6D38             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 163+ 6D38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6D38             >
 163+ 6D38             >                // dummy db directives used to calculate length of namec
 163+ 6D38 42 4C 4B    >                db      "BLK"
 163+ 6D3B             >len_NFA         defl    $ - temp_NFA
 163+ 6D3B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6D38             >
 163+ 6D38 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6D39 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 163+ 6D3C             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6D3B CB          >                db      {b $} | END_BIT     // msb as name end
 163+ 6D3C             >
 163+ 6D3C 2C 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6D3E             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6D3E CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6D41             >
 163+ 6D41             >
 163+ 6D41             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6D41             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6D41             >
 163+ 6D41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6D41 1E          >                db      30
 164+ 6D42                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 164+ 6D42             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 164+ 6D42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6D42             >
 164+ 6D42             >                // dummy db directives used to calculate length of namec
 164+ 6D42 3E 49 4E    >                db      ">IN"
 164+ 6D45             >len_NFA         defl    $ - temp_NFA
 164+ 6D45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6D42             >
 164+ 6D42 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6D43 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 164+ 6D46             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6D45 CE          >                db      {b $} | END_BIT     // msb as name end
 164+ 6D46             >
 164+ 6D46 38 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6D48             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6D48 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6D4B             >
 164+ 6D4B             >
 164+ 6D4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6D4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6D4B             >
 164+ 6D4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6D4B 20          >                db      32
 165+ 6D4C                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 165+ 6D4C             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 165+ 6D4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6D4C             >
 165+ 6D4C             >                // dummy db directives used to calculate length of namec
 165+ 6D4C 4F 55 54    >                db      "OUT"
 165+ 6D4F             >len_NFA         defl    $ - temp_NFA
 165+ 6D4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6D4C             >
 165+ 6D4C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6D4D 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 165+ 6D50             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6D4F D4          >                db      {b $} | END_BIT     // msb as name end
 165+ 6D50             >
 165+ 6D50 42 6D       >                dw      last_NFA            // Link to previous definition Name
 165+ 6D52             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6D52 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6D55             >
 165+ 6D55             >
 165+ 6D55             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6D55             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6D55             >
 165+ 6D55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6D55 22          >                db      34
 166+ 6D56                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 166+ 6D56             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 166+ 6D56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6D56             >
 166+ 6D56             >                // dummy db directives used to calculate length of namec
 166+ 6D56 53 43 52    >                db      "SCR"
 166+ 6D59             >len_NFA         defl    $ - temp_NFA
 166+ 6D59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6D56             >
 166+ 6D56 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6D57 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 166+ 6D5A             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6D59 D2          >                db      {b $} | END_BIT     // msb as name end
 166+ 6D5A             >
 166+ 6D5A 4C 6D       >                dw      last_NFA            // Link to previous definition Name
 166+ 6D5C             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6D5C CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6D5F             >
 166+ 6D5F             >
 166+ 6D5F             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6D5F             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6D5F             >
 166+ 6D5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6D5F 24          >                db      36
 167+ 6D60                              User_Def OFFSET     , "OFFSET"    , 38 //
 167+ 6D60             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 167+ 6D60             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6D60             >
 167+ 6D60             >                // dummy db directives used to calculate length of namec
 167+ 6D60 4F 46 46 53 >                db      "OFFSET"
 167+ 6D64 45 54       >
 167+ 6D66             >len_NFA         defl    $ - temp_NFA
 167+ 6D66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6D60             >
 167+ 6D60 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6D61 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 167+ 6D65 45 54       >
 167+ 6D67             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6D66 D4          >                db      {b $} | END_BIT     // msb as name end
 167+ 6D67             >
 167+ 6D67 56 6D       >                dw      last_NFA            // Link to previous definition Name
 167+ 6D69             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6D69 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6D6C             >
 167+ 6D6C             >
 167+ 6D6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6D6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6D6C             >
 167+ 6D6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6D6C 26          >                db      38
 168+ 6D6D                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 168+ 6D6D             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 168+ 6D6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6D6D             >
 168+ 6D6D             >                // dummy db directives used to calculate length of namec
 168+ 6D6D 43 4F 4E 54 >                db      "CONTEXT"
 168+ 6D71 45 58 54    >
 168+ 6D74             >len_NFA         defl    $ - temp_NFA
 168+ 6D74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6D6D             >
 168+ 6D6D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6D6E 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 168+ 6D72 45 58 54    >
 168+ 6D75             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6D74 D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6D75             >
 168+ 6D75 60 6D       >                dw      last_NFA            // Link to previous definition Name
 168+ 6D77             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6D77 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6D7A             >
 168+ 6D7A             >
 168+ 6D7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6D7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6D7A             >
 168+ 6D7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6D7A 28          >                db      40
 169+ 6D7B                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 169+ 6D7B             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 169+ 6D7B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6D7B             >
 169+ 6D7B             >                // dummy db directives used to calculate length of namec
 169+ 6D7B 43 55 52 52 >                db      "CURRENT"
 169+ 6D7F 45 4E 54    >
 169+ 6D82             >len_NFA         defl    $ - temp_NFA
 169+ 6D82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6D7B             >
 169+ 6D7B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6D7C 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 169+ 6D80 45 4E 54    >
 169+ 6D83             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6D82 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6D83             >
 169+ 6D83 6D 6D       >                dw      last_NFA            // Link to previous definition Name
 169+ 6D85             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6D85 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6D88             >
 169+ 6D88             >
 169+ 6D88             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6D88             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6D88             >
 169+ 6D88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6D88 2A          >                db      42
 170+ 6D89                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 170+ 6D89             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 170+ 6D89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6D89             >
 170+ 6D89             >                // dummy db directives used to calculate length of namec
 170+ 6D89 53 54 41 54 >                db      "STATE"
 170+ 6D8D 45          >
 170+ 6D8E             >len_NFA         defl    $ - temp_NFA
 170+ 6D8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6D89             >
 170+ 6D89 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6D8A 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 170+ 6D8E 45          >
 170+ 6D8F             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6D8E C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 6D8F             >
 170+ 6D8F 7B 6D       >                dw      last_NFA            // Link to previous definition Name
 170+ 6D91             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6D91 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6D94             >
 170+ 6D94             >
 170+ 6D94             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6D94             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6D94             >
 170+ 6D94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6D94 2C          >                db      44
 171+ 6D95                              User_Def BASE       , "BASE"      , 46 //
 171+ 6D95             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 171+ 6D95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6D95             >
 171+ 6D95             >                // dummy db directives used to calculate length of namec
 171+ 6D95 42 41 53 45 >                db      "BASE"
 171+ 6D99             >len_NFA         defl    $ - temp_NFA
 171+ 6D99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6D95             >
 171+ 6D95 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6D96 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 171+ 6D9A             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6D99 C5          >                db      {b $} | END_BIT     // msb as name end
 171+ 6D9A             >
 171+ 6D9A 89 6D       >                dw      last_NFA            // Link to previous definition Name
 171+ 6D9C             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6D9C CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6D9F             >
 171+ 6D9F             >
 171+ 6D9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6D9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6D9F             >
 171+ 6D9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6D9F 2E          >                db      46
 172+ 6DA0                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 172+ 6DA0             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 172+ 6DA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6DA0             >
 172+ 6DA0             >                // dummy db directives used to calculate length of namec
 172+ 6DA0 44 50 4C    >                db      "DPL"
 172+ 6DA3             >len_NFA         defl    $ - temp_NFA
 172+ 6DA3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6DA0             >
 172+ 6DA0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6DA1 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 172+ 6DA4             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6DA3 CC          >                db      {b $} | END_BIT     // msb as name end
 172+ 6DA4             >
 172+ 6DA4 95 6D       >                dw      last_NFA            // Link to previous definition Name
 172+ 6DA6             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6DA6 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6DA9             >
 172+ 6DA9             >
 172+ 6DA9             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6DA9             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6DA9             >
 172+ 6DA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6DA9 30          >                db      48
 173+ 6DAA                              User_Def FLD        , "FLD"       , 50 // output field width
 173+ 6DAA             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 173+ 6DAA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6DAA             >
 173+ 6DAA             >                // dummy db directives used to calculate length of namec
 173+ 6DAA 46 4C 44    >                db      "FLD"
 173+ 6DAD             >len_NFA         defl    $ - temp_NFA
 173+ 6DAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6DAA             >
 173+ 6DAA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6DAB 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 173+ 6DAE             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6DAD C4          >                db      {b $} | END_BIT     // msb as name end
 173+ 6DAE             >
 173+ 6DAE A0 6D       >                dw      last_NFA            // Link to previous definition Name
 173+ 6DB0             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6DB0 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6DB3             >
 173+ 6DB3             >
 173+ 6DB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6DB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6DB3             >
 173+ 6DB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6DB3 32          >                db      50
 174+ 6DB4                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 174+ 6DB4             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 174+ 6DB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6DB4             >
 174+ 6DB4             >                // dummy db directives used to calculate length of namec
 174+ 6DB4 43 53 50    >                db      "CSP"
 174+ 6DB7             >len_NFA         defl    $ - temp_NFA
 174+ 6DB7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6DB4             >
 174+ 6DB4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6DB5 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 174+ 6DB8             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6DB7 D0          >                db      {b $} | END_BIT     // msb as name end
 174+ 6DB8             >
 174+ 6DB8 AA 6D       >                dw      last_NFA            // Link to previous definition Name
 174+ 6DBA             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6DBA CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6DBD             >
 174+ 6DBD             >
 174+ 6DBD             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6DBD             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6DBD             >
 174+ 6DBD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6DBD 34          >                db      52
 175+ 6DBE                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 175+ 6DBE             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 175+ 6DBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6DBE             >
 175+ 6DBE             >                // dummy db directives used to calculate length of namec
 175+ 6DBE 52 23       >                db      "R#"
 175+ 6DC0             >len_NFA         defl    $ - temp_NFA
 175+ 6DC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6DBE             >
 175+ 6DBE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6DBF 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 175+ 6DC1             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6DC0 A3          >                db      {b $} | END_BIT     // msb as name end
 175+ 6DC1             >
 175+ 6DC1 B4 6D       >                dw      last_NFA            // Link to previous definition Name
 175+ 6DC3             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6DC3 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6DC6             >
 175+ 6DC6             >
 175+ 6DC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6DC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6DC6             >
 175+ 6DC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6DC6 36          >                db      54
 176+ 6DC7                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 176+ 6DC7             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 176+ 6DC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6DC7             >
 176+ 6DC7             >                // dummy db directives used to calculate length of namec
 176+ 6DC7 48 4C 44    >                db      "HLD"
 176+ 6DCA             >len_NFA         defl    $ - temp_NFA
 176+ 6DCA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6DC7             >
 176+ 6DC7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6DC8 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 176+ 6DCB             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6DCA C4          >                db      {b $} | END_BIT     // msb as name end
 176+ 6DCB             >
 176+ 6DCB BE 6D       >                dw      last_NFA            // Link to previous definition Name
 176+ 6DCD             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6DCD CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6DD0             >
 176+ 6DD0             >
 176+ 6DD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6DD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6DD0             >
 176+ 6DD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6DD0 38          >                db      56
 177+ 6DD1                              User_Def USE        , "USE"       , 58 // address of last used block
 177+ 6DD1             >                New_Def  USE, "USE", User_Ptr, is_normal
 177+ 6DD1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6DD1             >
 177+ 6DD1             >                // dummy db directives used to calculate length of namec
 177+ 6DD1 55 53 45    >                db      "USE"
 177+ 6DD4             >len_NFA         defl    $ - temp_NFA
 177+ 6DD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6DD1             >
 177+ 6DD1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6DD2 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 177+ 6DD5             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6DD4 C5          >                db      {b $} | END_BIT     // msb as name end
 177+ 6DD5             >
 177+ 6DD5 C7 6D       >                dw      last_NFA            // Link to previous definition Name
 177+ 6DD7             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6DD7 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6DDA             >
 177+ 6DDA             >
 177+ 6DDA             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6DDA             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6DDA             >
 177+ 6DDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6DDA 3A          >                db      58
 178+ 6DDB                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 178+ 6DDB             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 178+ 6DDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6DDB             >
 178+ 6DDB             >                // dummy db directives used to calculate length of namec
 178+ 6DDB 50 52 45 56 >                db      "PREV"
 178+ 6DDF             >len_NFA         defl    $ - temp_NFA
 178+ 6DDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6DDB             >
 178+ 6DDB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6DDC 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 178+ 6DE0             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6DDF D6          >                db      {b $} | END_BIT     // msb as name end
 178+ 6DE0             >
 178+ 6DE0 D1 6D       >                dw      last_NFA            // Link to previous definition Name
 178+ 6DE2             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6DE2 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6DE5             >
 178+ 6DE5             >
 178+ 6DE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6DE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6DE5             >
 178+ 6DE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6DE5 3C          >                db      60
 179+ 6DE6                              User_Def LP         , "LP"        , 62 // line printer (not used)
 179+ 6DE6             >                New_Def  LP, "LP", User_Ptr, is_normal
 179+ 6DE6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6DE6             >
 179+ 6DE6             >                // dummy db directives used to calculate length of namec
 179+ 6DE6 4C 50       >                db      "LP"
 179+ 6DE8             >len_NFA         defl    $ - temp_NFA
 179+ 6DE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6DE6             >
 179+ 6DE6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6DE7 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 179+ 6DE9             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6DE8 D0          >                db      {b $} | END_BIT     // msb as name end
 179+ 6DE9             >
 179+ 6DE9 DB 6D       >                dw      last_NFA            // Link to previous definition Name
 179+ 6DEB             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6DEB CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6DEE             >
 179+ 6DEE             >
 179+ 6DEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6DEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6DEE             >
 179+ 6DEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6DEE 3E          >                db      62
 180+ 6DEF                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 180+ 6DEF             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 180+ 6DEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6DEF             >
 180+ 6DEF             >                // dummy db directives used to calculate length of namec
 180+ 6DEF 50 4C 41 43 >                db      "PLACE"
 180+ 6DF3 45          >
 180+ 6DF4             >len_NFA         defl    $ - temp_NFA
 180+ 6DF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6DEF             >
 180+ 6DEF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6DF0 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 180+ 6DF4 45          >
 180+ 6DF5             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6DF4 C5          >                db      {b $} | END_BIT     // msb as name end
 180+ 6DF5             >
 180+ 6DF5 E6 6D       >                dw      last_NFA            // Link to previous definition Name
 180+ 6DF7             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6DF7 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6DFA             >
 180+ 6DFA             >
 180+ 6DFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6DFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6DFA             >
 180+ 6DFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6DFA 40          >                db      64
 181+ 6DFB                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 181+ 6DFB             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 181+ 6DFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6DFB             >
 181+ 6DFB             >                // dummy db directives used to calculate length of namec
 181+ 6DFB 53 4F 55 52 >                db      "SOURCE-ID"
 181+ 6DFF 43 45 2D 49 >
 181+ 6E03 44          >
 181+ 6E04             >len_NFA         defl    $ - temp_NFA
 181+ 6E04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6DFB             >
 181+ 6DFB 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6DFC 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 181+ 6E00 43 45 2D 49 >
 181+ 6E04 44          >
 181+ 6E05             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6E04 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ 6E05             >
 181+ 6E05 EF 6D       >                dw      last_NFA            // Link to previous definition Name
 181+ 6E07             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6E07 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6E0A             >
 181+ 6E0A             >
 181+ 6E0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6E0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6E0A             >
 181+ 6E0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6E0A 42          >                db      66
 182+ 6E0B                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 182+ 6E0B             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 182+ 6E0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6E0B             >
 182+ 6E0B             >                // dummy db directives used to calculate length of namec
 182+ 6E0B 53 50 41 4E >                db      "SPAN"
 182+ 6E0F             >len_NFA         defl    $ - temp_NFA
 182+ 6E0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6E0B             >
 182+ 6E0B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6E0C 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 182+ 6E10             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6E0F CE          >                db      {b $} | END_BIT     // msb as name end
 182+ 6E10             >
 182+ 6E10 FB 6D       >                dw      last_NFA            // Link to previous definition Name
 182+ 6E12             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6E12 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6E15             >
 182+ 6E15             >
 182+ 6E15             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6E15             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6E15             >
 182+ 6E15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6E15 44          >                db      68
 183+ 6E16                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 183+ 6E16             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 183+ 6E16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6E16             >
 183+ 6E16             >                // dummy db directives used to calculate length of namec
 183+ 6E16 48 41 4E 44 >                db      "HANDLER"
 183+ 6E1A 4C 45 52    >
 183+ 6E1D             >len_NFA         defl    $ - temp_NFA
 183+ 6E1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6E16             >
 183+ 6E16 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6E17 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 183+ 6E1B 4C 45 52    >
 183+ 6E1E             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6E1D D2          >                db      {b $} | END_BIT     // msb as name end
 183+ 6E1E             >
 183+ 6E1E 0B 6E       >                dw      last_NFA            // Link to previous definition Name
 183+ 6E20             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6E20 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6E23             >
 183+ 6E23             >
 183+ 6E23             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6E23             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6E23             >
 183+ 6E23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6E23 46          >                db      70
 184+ 6E24                              User_Def HP         , "HP"        , 72 // heap-pointer address
 184+ 6E24             >                New_Def  HP, "HP", User_Ptr, is_normal
 184+ 6E24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6E24             >
 184+ 6E24             >                // dummy db directives used to calculate length of namec
 184+ 6E24 48 50       >                db      "HP"
 184+ 6E26             >len_NFA         defl    $ - temp_NFA
 184+ 6E26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6E24             >
 184+ 6E24 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6E25 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 184+ 6E27             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6E26 D0          >                db      {b $} | END_BIT     // msb as name end
 184+ 6E27             >
 184+ 6E27 16 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6E29             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6E29 CD 1B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6E2C             >
 184+ 6E2C             >
 184+ 6E2C             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6E2C             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6E2C             >
 184+ 6E2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6E2C 48          >                db      72
 185+ 6E2D
 186+ 6E2D              //  ______________________________________________________________________
 187+ 6E2D              //
 188+ 6E2D              // here         -- a
 189+ 6E2D                              Colon_Def HERE, "HERE", is_normal
 189+ 6E2D             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 189+ 6E2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 189+ 6E2D             >
 189+ 6E2D             >                // dummy db directives used to calculate length of namec
 189+ 6E2D 48 45 52 45 >                db      "HERE"
 189+ 6E31             >len_NFA         defl    $ - temp_NFA
 189+ 6E31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 189+ 6E2D             >
 189+ 6E2D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 189+ 6E2E 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 189+ 6E32             >                org     $-1                 // alter last byte of Name just above to set
 189+ 6E31 C5          >                db      {b $} | END_BIT     // msb as name end
 189+ 6E32             >
 189+ 6E32 24 6E       >                dw      last_NFA            // Link to previous definition Name
 189+ 6E34             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 189+ 6E34 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 189+ 6E37             >
 189+ 6E37             >
 189+ 6E37             >                endif           ; ok        // for other definitions it "points" the correct handler
 189+ 6E37             >                // Use of "; ok" to suppress "warning[fwdref]"
 189+ 6E37             >
 189+ 6E37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 190+ 6E37 F7 6C DB 6A                  dw      DP, FETCH               // dp @
 191+ 6E3B F7 68                        dw      EXIT                    // ;
 192+ 6E3D
 193+ 6E3D              //  ______________________________________________________________________
 194+ 6E3D              //
 195+ 6E3D              // allot        n --
 196+ 6E3D                              Colon_Def ALLOT, "ALLOT", is_normal
 196+ 6E3D             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 196+ 6E3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 196+ 6E3D             >
 196+ 6E3D             >                // dummy db directives used to calculate length of namec
 196+ 6E3D 41 4C 4C 4F >                db      "ALLOT"
 196+ 6E41 54          >
 196+ 6E42             >len_NFA         defl    $ - temp_NFA
 196+ 6E42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 196+ 6E3D             >
 196+ 6E3D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 196+ 6E3E 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 196+ 6E42 54          >
 196+ 6E43             >                org     $-1                 // alter last byte of Name just above to set
 196+ 6E42 D4          >                db      {b $} | END_BIT     // msb as name end
 196+ 6E43             >
 196+ 6E43 2D 6E       >                dw      last_NFA            // Link to previous definition Name
 196+ 6E45             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 196+ 6E45 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 196+ 6E48             >
 196+ 6E48             >
 196+ 6E48             >                endif           ; ok        // for other definitions it "points" the correct handler
 196+ 6E48             >                // Use of "; ok" to suppress "warning[fwdref]"
 196+ 6E48             >
 196+ 6E48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 197+ 6E48 F7 6C BC 6A                  dw      DP,  PLUSSTORE          // dp +!
 198+ 6E4C F7 68                        dw      EXIT                    // ;
 199+ 6E4E
 200+ 6E4E              //  ______________________________________________________________________
 201+ 6E4E              //
 202+ 6E4E              // comma        n --
 203+ 6E4E                              Colon_Def COMMA, ",", is_normal
 203+ 6E4E             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 203+ 6E4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 203+ 6E4E             >
 203+ 6E4E             >                // dummy db directives used to calculate length of namec
 203+ 6E4E 2C          >                db      ","
 203+ 6E4F             >len_NFA         defl    $ - temp_NFA
 203+ 6E4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 203+ 6E4E             >
 203+ 6E4E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 203+ 6E4F 2C          >                db      ","               // name string in 7-bit ascii, but
 203+ 6E50             >                org     $-1                 // alter last byte of Name just above to set
 203+ 6E4F AC          >                db      {b $} | END_BIT     // msb as name end
 203+ 6E50             >
 203+ 6E50 3D 6E       >                dw      last_NFA            // Link to previous definition Name
 203+ 6E52             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 203+ 6E52 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 203+ 6E55             >
 203+ 6E55             >
 203+ 6E55             >                endif           ; ok        // for other definitions it "points" the correct handler
 203+ 6E55             >                // Use of "; ok" to suppress "warning[fwdref]"
 203+ 6E55             >
 203+ 6E55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 204+ 6E55 34 6E E6 6A                  dw      HERE, STORE             // here !
 205+ 6E59 3C 6C 45 6E                  dw      TWO, ALLOT              // 2 allot
 206+ 6E5D F7 68                        dw      EXIT                    // ;
 207+ 6E5F
 208+ 6E5F              //  ______________________________________________________________________
 209+ 6E5F              //
 210+ 6E5F              // ccomma       c --
 211+ 6E5F                              Colon_Def CCOMMA, "C,", is_normal
 211+ 6E5F             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 211+ 6E5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 211+ 6E5F             >
 211+ 6E5F             >                // dummy db directives used to calculate length of namec
 211+ 6E5F 43 2C       >                db      "C,"
 211+ 6E61             >len_NFA         defl    $ - temp_NFA
 211+ 6E61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 211+ 6E5F             >
 211+ 6E5F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 211+ 6E60 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 211+ 6E62             >                org     $-1                 // alter last byte of Name just above to set
 211+ 6E61 AC          >                db      {b $} | END_BIT     // msb as name end
 211+ 6E62             >
 211+ 6E62 4E 6E       >                dw      last_NFA            // Link to previous definition Name
 211+ 6E64             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 211+ 6E64 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 211+ 6E67             >
 211+ 6E67             >
 211+ 6E67             >                endif           ; ok        // for other definitions it "points" the correct handler
 211+ 6E67             >                // Use of "; ok" to suppress "warning[fwdref]"
 211+ 6E67             >
 211+ 6E67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 212+ 6E67 34 6E FE 6A                  dw      HERE, CSTORE            // here c!
 213+ 6E6B 33 6C 45 6E                  dw      ONE, ALLOT              // 1 allot
 214+ 6E6F F7 68                        dw      EXIT                    // ;
 215+ 6E71
 216+ 6E71              //  ______________________________________________________________________
 217+ 6E71              //
 218+ 6E71              // s>d          n -- d
 219+ 6E71              // converts a single precision integer in a double precision
 220+ 6E71                              New_Def S_TO_D, "S>D", is_code, is_normal
 220+ 6E71             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 6E71             >
 220+ 6E71             >                // dummy db directives used to calculate length of namec
 220+ 6E71 53 3E 44    >                db      "S>D"
 220+ 6E74             >len_NFA         defl    $ - temp_NFA
 220+ 6E74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 6E71             >
 220+ 6E71 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 6E72 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 220+ 6E75             >                org     $-1                 // alter last byte of Name just above to set
 220+ 6E74 C4          >                db      {b $} | END_BIT     // msb as name end
 220+ 6E75             >
 220+ 6E75 5F 6E       >                dw      last_NFA            // Link to previous definition Name
 220+ 6E77             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 6E77 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 220+ 6E77 ~           >
 220+ 6E77 ~           >
 220+ 6E77             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 6E77             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 6E77             >
 220+ 6E77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 6E77 D1                           pop     de
 222+ 6E78 21 00 00                     ld      hl, 0
 223+ 6E7B 7A                           ld      a, d
 224+ 6E7C E6 80                        and     $80
 225+ 6E7E 28 01                        jr      z, S_to_D_Skip
 226+ 6E80 2B                           dec     hl                  // $FFFF
 227+ 6E81              S_to_D_Skip:
 228+ 6E81 D5                           push    de
 229+ 6E82 E5                           push    hl
 230+ 6E83                              next
 230+ 6E83 DD E9       >                jp      (ix)
 231+ 6E85
 232+ 6E85              //  ______________________________________________________________________
 233+ 6E85              //
 234+ 6E85              // -            n1 n2 -- n3
 235+ 6E85              // subtraction
 236+ 6E85                              New_Def SUBTRACT, "-", is_code, is_normal
 236+ 6E85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236+ 6E85             >
 236+ 6E85             >                // dummy db directives used to calculate length of namec
 236+ 6E85 2D          >                db      "-"
 236+ 6E86             >len_NFA         defl    $ - temp_NFA
 236+ 6E86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236+ 6E85             >
 236+ 6E85 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236+ 6E86 2D          >                db      "-"               // name string in 7-bit ascii, but
 236+ 6E87             >                org     $-1                 // alter last byte of Name just above to set
 236+ 6E86 AD          >                db      {b $} | END_BIT     // msb as name end
 236+ 6E87             >
 236+ 6E87 71 6E       >                dw      last_NFA            // Link to previous definition Name
 236+ 6E89             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 236+ 6E89 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 236+ 6E89 ~           >
 236+ 6E89 ~           >
 236+ 6E89             >                endif           ; ok        // for other definitions it "points" the correct handler
 236+ 6E89             >                // Use of "; ok" to suppress "warning[fwdref]"
 236+ 6E89             >
 236+ 6E89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 6E89 D1                           pop     de
 238+ 6E8A E1                           pop     hl
 239+ 6E8B A7                           and     a
 240+ 6E8C ED 52                        sbc     hl, de
 241+ 6E8E
 242+ 6E8E                              psh1
 242+ 6E8E E5          >                push    hl
 242+ 6E8F DD E9       >                jp      (ix)
 243+ 6E91
 244+ 6E91              //  ______________________________________________________________________
 245+ 6E91              //
 246+ 6E91              // =            n1 n2 -- n3
 247+ 6E91              // equals
 248+ 6E91                              Colon_Def EQUALS, "=", is_normal
 248+ 6E91             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 248+ 6E91             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 6E91             >
 248+ 6E91             >                // dummy db directives used to calculate length of namec
 248+ 6E91 3D          >                db      "="
 248+ 6E92             >len_NFA         defl    $ - temp_NFA
 248+ 6E92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 6E91             >
 248+ 6E91 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 6E92 3D          >                db      "="               // name string in 7-bit ascii, but
 248+ 6E93             >                org     $-1                 // alter last byte of Name just above to set
 248+ 6E92 BD          >                db      {b $} | END_BIT     // msb as name end
 248+ 6E93             >
 248+ 6E93 85 6E       >                dw      last_NFA            // Link to previous definition Name
 248+ 6E95             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 6E95 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 248+ 6E98             >
 248+ 6E98             >
 248+ 6E98             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 6E98             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 6E98             >
 248+ 6E98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 6E98 89 6E 54 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 250+ 6E9C F7 68                        dw      EXIT                    // ;
 251+ 6E9E
 252+ 6E9E              //  ______________________________________________________________________
 253+ 6E9E              //
 254+ 6E9E              // u<           u1 u2 -- u3
 255+ 6E9E              // unsigned less-than
 256+ 6E9E                              New_Def ULESS, "U<", is_code, is_normal
 256+ 6E9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 256+ 6E9E             >
 256+ 6E9E             >                // dummy db directives used to calculate length of namec
 256+ 6E9E 55 3C       >                db      "U<"
 256+ 6EA0             >len_NFA         defl    $ - temp_NFA
 256+ 6EA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 256+ 6E9E             >
 256+ 6E9E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 256+ 6E9F 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 256+ 6EA1             >                org     $-1                 // alter last byte of Name just above to set
 256+ 6EA0 BC          >                db      {b $} | END_BIT     // msb as name end
 256+ 6EA1             >
 256+ 6EA1 91 6E       >                dw      last_NFA            // Link to previous definition Name
 256+ 6EA3             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 256+ 6EA3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 256+ 6EA3 ~           >
 256+ 6EA3 ~           >
 256+ 6EA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 256+ 6EA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 256+ 6EA3             >
 256+ 6EA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 257+ 6EA3 D1                           pop     de
 258+ 6EA4 E1                           pop     hl
 259+ 6EA5 A7                           and     a
 260+ 6EA6 ED 52                        sbc     hl, de
 261+ 6EA8 21 FF FF                     ld      hl, -1
 262+ 6EAB 38 01                        jr      c, ULess_Skip
 263+ 6EAD 23                               inc     hl
 264+ 6EAE              ULess_Skip:
 265+ 6EAE
 266+ 6EAE                              psh1
 266+ 6EAE E5          >                push    hl
 266+ 6EAF DD E9       >                jp      (ix)
 267+ 6EB1
 268+ 6EB1              //  ______________________________________________________________________
 269+ 6EB1              //
 270+ 6EB1              // <           n1 n2 -- n3
 271+ 6EB1              // less-than
 272+ 6EB1                              New_Def LESS, "<", is_code, is_normal
 272+ 6EB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 272+ 6EB1             >
 272+ 6EB1             >                // dummy db directives used to calculate length of namec
 272+ 6EB1 3C          >                db      "<"
 272+ 6EB2             >len_NFA         defl    $ - temp_NFA
 272+ 6EB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 272+ 6EB1             >
 272+ 6EB1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 272+ 6EB2 3C          >                db      "<"               // name string in 7-bit ascii, but
 272+ 6EB3             >                org     $-1                 // alter last byte of Name just above to set
 272+ 6EB2 BC          >                db      {b $} | END_BIT     // msb as name end
 272+ 6EB3             >
 272+ 6EB3 9E 6E       >                dw      last_NFA            // Link to previous definition Name
 272+ 6EB5             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 272+ 6EB5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 272+ 6EB5 ~           >
 272+ 6EB5 ~           >
 272+ 6EB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 272+ 6EB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 272+ 6EB5             >
 272+ 6EB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 273+ 6EB5 D1                           pop     de
 274+ 6EB6 E1                           pop     hl
 275+ 6EB7 7C                           ld      a, h
 276+ 6EB8 EE 80                        xor     $80
 277+ 6EBA 67                           ld      h, a
 278+ 6EBB 7A                           ld      a, d
 279+ 6EBC EE 80                        xor     $80
 280+ 6EBE 57                           ld      d, a
 281+ 6EBF A7                           and     a
 282+ 6EC0 ED 52                        sbc     hl, de
 283+ 6EC2 21 FF FF                     ld      hl, -1
 284+ 6EC5 38 01                        jr      c, Less_Skip
 285+ 6EC7 23                               inc     hl
 286+ 6EC8              Less_Skip:
 287+ 6EC8
 288+ 6EC8                              psh1
 288+ 6EC8 E5          >                push    hl
 288+ 6EC9 DD E9       >                jp      (ix)
 289+ 6ECB
 290+ 6ECB              //  ______________________________________________________________________
 291+ 6ECB              //
 292+ 6ECB              // >            n1 n2 -- n3
 293+ 6ECB              // greater than
 294+ 6ECB                              Colon_Def GREATER, ">", is_normal
 294+ 6ECB             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 294+ 6ECB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ 6ECB             >
 294+ 6ECB             >                // dummy db directives used to calculate length of namec
 294+ 6ECB 3E          >                db      ">"
 294+ 6ECC             >len_NFA         defl    $ - temp_NFA
 294+ 6ECC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ 6ECB             >
 294+ 6ECB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ 6ECC 3E          >                db      ">"               // name string in 7-bit ascii, but
 294+ 6ECD             >                org     $-1                 // alter last byte of Name just above to set
 294+ 6ECC BE          >                db      {b $} | END_BIT     // msb as name end
 294+ 6ECD             >
 294+ 6ECD B1 6E       >                dw      last_NFA            // Link to previous definition Name
 294+ 6ECF             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 6ECF CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 6ED2             >
 294+ 6ED2             >
 294+ 6ED2             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 6ED2             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 6ED2             >
 294+ 6ED2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 6ED2 4F 6A B5 6E                  dw      SWAP, LESS              // swap <
 296+ 6ED6 F7 68                        dw      EXIT                    // ;
 297+ 6ED8              //  ______________________________________________________________________
 298+ 6ED8              //
 299+ 6ED8              // min          n1 n2 -- n3
 300+ 6ED8              // minimum between n1 and n2
 301+ 6ED8                              Colon_Def MIN, "MIN" , is_normal
 301+ 6ED8             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 301+ 6ED8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 6ED8             >
 301+ 6ED8             >                // dummy db directives used to calculate length of namec
 301+ 6ED8 4D 49 4E    >                db      "MIN"
 301+ 6EDB             >len_NFA         defl    $ - temp_NFA
 301+ 6EDB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 6ED8             >
 301+ 6ED8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 6ED9 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 301+ 6EDC             >                org     $-1                 // alter last byte of Name just above to set
 301+ 6EDB CE          >                db      {b $} | END_BIT     // msb as name end
 301+ 6EDC             >
 301+ 6EDC CB 6E       >                dw      last_NFA            // Link to previous definition Name
 301+ 6EDE             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 6EDE CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 6EE1             >
 301+ 6EE1             >
 301+ 6EE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 6EE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 6EE1             >
 301+ 6EE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 6EE1 AF 6A                        dw      TWO_DUP                 // 2dup
 303+ 6EE3 CF 6E                        dw      GREATER                 // >
 304+ 6EE5 D8 63                        dw      ZBRANCH
 305+ 6EE7 04 00                        dw      Min_Skip - $   // if
 306+ 6EE9 4F 6A                        dw          SWAP                //      swap
 307+ 6EEB              Min_Skip:                                       // endif
 308+ 6EEB 2D 6A                        dw      DROP                    // drop
 309+ 6EED F7 68                        dw      EXIT                    // ;
 310+ 6EEF
 311+ 6EEF              //  ______________________________________________________________________
 312+ 6EEF              //
 313+ 6EEF              // max          n1 n2 -- n3
 314+ 6EEF              // maximum between n1 and n2
 315+ 6EEF                              Colon_Def MAX, "MAX", is_normal
 315+ 6EEF             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 315+ 6EEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 315+ 6EEF             >
 315+ 6EEF             >                // dummy db directives used to calculate length of namec
 315+ 6EEF 4D 41 58    >                db      "MAX"
 315+ 6EF2             >len_NFA         defl    $ - temp_NFA
 315+ 6EF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 315+ 6EEF             >
 315+ 6EEF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 315+ 6EF0 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 315+ 6EF3             >                org     $-1                 // alter last byte of Name just above to set
 315+ 6EF2 D8          >                db      {b $} | END_BIT     // msb as name end
 315+ 6EF3             >
 315+ 6EF3 D8 6E       >                dw      last_NFA            // Link to previous definition Name
 315+ 6EF5             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 315+ 6EF5 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 315+ 6EF8             >
 315+ 6EF8             >
 315+ 6EF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 315+ 6EF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 315+ 6EF8             >
 315+ 6EF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 316+ 6EF8 AF 6A                        dw      TWO_DUP                 // 2dup
 317+ 6EFA B5 6E                        dw      LESS                    // <
 318+ 6EFC D8 63                        dw      ZBRANCH
 319+ 6EFE 04 00                        dw      Max_Skip - $   // if
 320+ 6F00 4F 6A                        dw          SWAP                //      swap
 321+ 6F02              Max_Skip:                                       // endif
 322+ 6F02 2D 6A                        dw      DROP                    // drop
 323+ 6F04 F7 68                        dw      EXIT                    // ;
 324+ 6F06
 325+ 6F06              //  ______________________________________________________________________
 326+ 6F06              //
 327+ 6F06              // ?dup         n -- 0 | n n
 328+ 6F06              // duplicate if not zero
 329+ 6F06                              New_Def QDUP, "?DUP", is_code, is_normal
 329+ 6F06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 6F06             >
 329+ 6F06             >                // dummy db directives used to calculate length of namec
 329+ 6F06 3F 44 55 50 >                db      "?DUP"
 329+ 6F0A             >len_NFA         defl    $ - temp_NFA
 329+ 6F0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 6F06             >
 329+ 6F06 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 6F07 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 329+ 6F0B             >                org     $-1                 // alter last byte of Name just above to set
 329+ 6F0A D0          >                db      {b $} | END_BIT     // msb as name end
 329+ 6F0B             >
 329+ 6F0B EF 6E       >                dw      last_NFA            // Link to previous definition Name
 329+ 6F0D             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 6F0D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 329+ 6F0D ~           >
 329+ 6F0D ~           >
 329+ 6F0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 6F0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 6F0D             >
 329+ 6F0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 6F0D              QDup_Ptr:
 331+ 6F0D E1                           pop     hl
 332+ 6F0E 7C                           ld      a, h
 333+ 6F0F B5                           or      l
 334+ 6F10 28 01                        jr      z, QDup_Skip
 335+ 6F12 E5                               push    hl
 336+ 6F13              QDup_Skip:
 337+ 6F13                              psh1
 337+ 6F13 E5          >                push    hl
 337+ 6F14 DD E9       >                jp      (ix)
 338+ 6F16
 339+ 6F16              //  ______________________________________________________________________
 340+ 6F16              //
 341+ 6F16              // -dup         n -- 0 | n n
 342+ 6F16              // duplicate if not zero
 343+ 6F16                              New_Def LDUP, "-DUP", is_code, is_normal
 343+ 6F16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 343+ 6F16             >
 343+ 6F16             >                // dummy db directives used to calculate length of namec
 343+ 6F16 2D 44 55 50 >                db      "-DUP"
 343+ 6F1A             >len_NFA         defl    $ - temp_NFA
 343+ 6F1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 343+ 6F16             >
 343+ 6F16 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 343+ 6F17 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 343+ 6F1B             >                org     $-1                 // alter last byte of Name just above to set
 343+ 6F1A D0          >                db      {b $} | END_BIT     // msb as name end
 343+ 6F1B             >
 343+ 6F1B 06 6F       >                dw      last_NFA            // Link to previous definition Name
 343+ 6F1D             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 343+ 6F1D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 343+ 6F1D ~           >
 343+ 6F1D ~           >
 343+ 6F1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 343+ 6F1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 343+ 6F1D             >
 343+ 6F1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 344+ 6F1D C3 0D 6F                     jp      QDup_Ptr
 345+ 6F20
 346+ 6F20              //  ______________________________________________________________________
 347+ 6F20              //
 348+ 6F20              // emit         c --
 349+ 6F20                              Colon_Def EMIT, "EMIT", is_normal
 349+ 6F20             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 349+ 6F20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 349+ 6F20             >
 349+ 6F20             >                // dummy db directives used to calculate length of namec
 349+ 6F20 45 4D 49 54 >                db      "EMIT"
 349+ 6F24             >len_NFA         defl    $ - temp_NFA
 349+ 6F24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 349+ 6F20             >
 349+ 6F20 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 349+ 6F21 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 349+ 6F25             >                org     $-1                 // alter last byte of Name just above to set
 349+ 6F24 D4          >                db      {b $} | END_BIT     // msb as name end
 349+ 6F25             >
 349+ 6F25 16 6F       >                dw      last_NFA            // Link to previous definition Name
 349+ 6F27             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 349+ 6F27 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 349+ 6F2A             >
 349+ 6F2A             >
 349+ 6F2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 349+ 6F2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 349+ 6F2A             >
 349+ 6F2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 350+ 6F2A 07 66                        dw      C_EMIT                      // (?emit)
 351+ 6F2C 0D 6F                        dw      QDUP                        // ?dup
 352+ 6F2E                                                                  // if
 353+ 6F2E D8 63                        dw      ZBRANCH
 354+ 6F30 0A 00                        dw      Emit_Skip - $
 355+ 6F32 D5 65                        dw          EMITC                   //      emitc
 356+ 6F34 33 6C                        dw          ONE                     //      1
 357+ 6F36 52 6D BC 6A                  dw          OUT, PLUSSTORE        //      out +!
 358+ 6F3A              Emit_Skip:                                          // endif
 359+ 6F3A F7 68                        dw      EXIT                        // ;
 360+ 6F3C
 361+ 6F3C              //  ______________________________________________________________________
 362+ 6F3C              //
 363+ 6F3C              // space        --
 364+ 6F3C                              Colon_Def SPACE, "SPACE", is_normal
 364+ 6F3C             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 364+ 6F3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ 6F3C             >
 364+ 6F3C             >                // dummy db directives used to calculate length of namec
 364+ 6F3C 53 50 41 43 >                db      "SPACE"
 364+ 6F40 45          >
 364+ 6F41             >len_NFA         defl    $ - temp_NFA
 364+ 6F41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ 6F3C             >
 364+ 6F3C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ 6F3D 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 364+ 6F41 45          >
 364+ 6F42             >                org     $-1                 // alter last byte of Name just above to set
 364+ 6F41 C5          >                db      {b $} | END_BIT     // msb as name end
 364+ 6F42             >
 364+ 6F42 20 6F       >                dw      last_NFA            // Link to previous definition Name
 364+ 6F44             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 6F44 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 364+ 6F47             >
 364+ 6F47             >
 364+ 6F47             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 6F47             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 6F47             >
 364+ 6F47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 6F47 59 6C 27 6F                  dw      BL, EMIT                // bl emit
 366+ 6F4B F7 68                        dw      EXIT                    // ;
 367+ 6F4D
 368+ 6F4D              //  ______________________________________________________________________
 369+ 6F4D              //
 370+ 6F4D              // traverse     a n -- a
 371+ 6F4D              // A dictionary entry is structured as follows
 372+ 6F4D              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 373+ 6F4D              //      +1   word name, last character is toggled with $80
 374+ 6F4D              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 375+ 6F4D              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 376+ 6F4D              // PFA: +6+n "is_code", definitions have no PFA. // +5
 377+ 6F4D              //
 378+ 6F4D                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 378+ 6F4D             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 378+ 6F4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 378+ 6F4D             >
 378+ 6F4D             >                // dummy db directives used to calculate length of namec
 378+ 6F4D 54 52 41 56 >                db      "TRAVERSE"
 378+ 6F51 45 52 53 45 >
 378+ 6F55             >len_NFA         defl    $ - temp_NFA
 378+ 6F55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 378+ 6F4D             >
 378+ 6F4D 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 378+ 6F4E 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 378+ 6F52 45 52 53 45 >
 378+ 6F56             >                org     $-1                 // alter last byte of Name just above to set
 378+ 6F55 C5          >                db      {b $} | END_BIT     // msb as name end
 378+ 6F56             >
 378+ 6F56 3C 6F       >                dw      last_NFA            // Link to previous definition Name
 378+ 6F58             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 378+ 6F58 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 378+ 6F5B             >
 378+ 6F5B             >
 378+ 6F5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 378+ 6F5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 378+ 6F5B             >
 378+ 6F5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 379+ 6F5B 4F 6A                        dw      SWAP                    // swap
 380+ 6F5D              Traverse_Begin:                                 // begin
 381+ 6F5D 1F 6A 92 69                  dw          OVER, PLUS          //      over +
 382+ 6F61 A5 63 7F 00                  dw          LIT, 127            //      127
 383+ 6F65 1F 6A F2 6A                  dw          OVER, CFETCH        //      over @
 384+ 6F69 B5 6E                        dw          LESS                //      <
 385+ 6F6B                                                              // until
 386+ 6F6B D8 63                        dw      ZBRANCH
 387+ 6F6D F0 FF                        dw      Traverse_Begin - $
 388+ 6F6F 36 6A                        dw      NIP                     //  nip
 389+ 6F71 F7 68                        dw      EXIT                    //  ;
 390+ 6F73
 391+ 6F73              //  ______________________________________________________________________
 392+ 6F73              //
 393+ 6F73              // latest       -- nfa
 394+ 6F73                              Colon_Def LATEST, "LATEST", is_normal
 394+ 6F73             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 394+ 6F73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 394+ 6F73             >
 394+ 6F73             >                // dummy db directives used to calculate length of namec
 394+ 6F73 4C 41 54 45 >                db      "LATEST"
 394+ 6F77 53 54       >
 394+ 6F79             >len_NFA         defl    $ - temp_NFA
 394+ 6F79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 394+ 6F73             >
 394+ 6F73 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 394+ 6F74 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 394+ 6F78 53 54       >
 394+ 6F7A             >                org     $-1                 // alter last byte of Name just above to set
 394+ 6F79 D4          >                db      {b $} | END_BIT     // msb as name end
 394+ 6F7A             >
 394+ 6F7A 4D 6F       >                dw      last_NFA            // Link to previous definition Name
 394+ 6F7C             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 394+ 6F7C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 394+ 6F7F             >
 394+ 6F7F             >
 394+ 6F7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 394+ 6F7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 394+ 6F7F             >
 394+ 6F7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 395+ 6F7F 85 6D                        dw      CURRENT                 // current
 396+ 6F81 DB 6A DB 6A                  dw      FETCH, FETCH            // @ @
 397+ 6F85 F7 68                        dw      EXIT                    // ;
 398+ 6F87
 399+ 6F87              //  ______________________________________________________________________
 400+ 6F87              //
 401+ 6F87              // lfa          pfa -- lfa
 402+ 6F87                              Colon_Def LFA, "LFA", is_normal
 402+ 6F87             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 402+ 6F87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 6F87             >
 402+ 6F87             >                // dummy db directives used to calculate length of namec
 402+ 6F87 4C 46 41    >                db      "LFA"
 402+ 6F8A             >len_NFA         defl    $ - temp_NFA
 402+ 6F8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 6F87             >
 402+ 6F87 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 6F88 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 402+ 6F8B             >                org     $-1                 // alter last byte of Name just above to set
 402+ 6F8A C1          >                db      {b $} | END_BIT     // msb as name end
 402+ 6F8B             >
 402+ 6F8B 73 6F       >                dw      last_NFA            // Link to previous definition Name
 402+ 6F8D             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 6F8D CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 6F90             >
 402+ 6F90             >
 402+ 6F90             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 6F90             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 6F90             >
 402+ 6F90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 6F90 A5 63 05 00                  dw      LIT, 5                  // cell- --> 5
 404+ 6F94 89 6E                        dw      SUBTRACT                // cell- --> -
 405+ 6F96 F7 68                        dw      EXIT                    // ;
 406+ 6F98
 407+ 6F98              //  ______________________________________________________________________
 408+ 6F98              //
 409+ 6F98              // cfa          pfa -- cfa
 410+ 6F98                              Colon_Def CFA, "CFA", is_normal
 410+ 6F98             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 410+ 6F98             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 410+ 6F98             >
 410+ 6F98             >                // dummy db directives used to calculate length of namec
 410+ 6F98 43 46 41    >                db      "CFA"
 410+ 6F9B             >len_NFA         defl    $ - temp_NFA
 410+ 6F9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 410+ 6F98             >
 410+ 6F98 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 410+ 6F99 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 410+ 6F9C             >                org     $-1                 // alter last byte of Name just above to set
 410+ 6F9B C1          >                db      {b $} | END_BIT     // msb as name end
 410+ 6F9C             >
 410+ 6F9C 87 6F       >                dw      last_NFA            // Link to previous definition Name
 410+ 6F9E             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 410+ 6F9E CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 410+ 6FA1             >
 410+ 6FA1             >
 410+ 6FA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 410+ 6FA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 410+ 6FA1             >
 410+ 6FA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 411+ 6FA1              //              dw      CELL_MINUS              // cell-
 412+ 6FA1 45 6C 89 6E                  dw      THREE, SUBTRACT         // 3 -
 413+ 6FA5 F7 68                        dw      EXIT                    // ;
 414+ 6FA7
 415+ 6FA7              //  ______________________________________________________________________
 416+ 6FA7              //
 417+ 6FA7              // nfa          pfa -- nfa
 418+ 6FA7                              Colon_Def NFA, "NFA", is_normal
 418+ 6FA7             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 418+ 6FA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 6FA7             >
 418+ 6FA7             >                // dummy db directives used to calculate length of namec
 418+ 6FA7 4E 46 41    >                db      "NFA"
 418+ 6FAA             >len_NFA         defl    $ - temp_NFA
 418+ 6FAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 6FA7             >
 418+ 6FA7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 6FA8 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 418+ 6FAB             >                org     $-1                 // alter last byte of Name just above to set
 418+ 6FAA C1          >                db      {b $} | END_BIT     // msb as name end
 418+ 6FAB             >
 418+ 6FAB 98 6F       >                dw      last_NFA            // Link to previous definition Name
 418+ 6FAD             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 6FAD CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 6FB0             >
 418+ 6FB0             >
 418+ 6FB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 6FB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 6FB0             >
 418+ 6FB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 6FB0 A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 420+ 6FB4 89 6E                        dw      SUBTRACT                // -
 421+ 6FB6 4F 6C                        dw      NEG_ONE                 // -1
 422+ 6FB8 58 6F                        dw      TRAVERSE                // traverse
 423+ 6FBA F7 68                        dw      EXIT                    // ;
 424+ 6FBC
 425+ 6FBC              //  ______________________________________________________________________
 426+ 6FBC              //
 427+ 6FBC              // pfa          nfa -- pfa
 428+ 6FBC                              Colon_Def PFA, "PFA", is_normal
 428+ 6FBC             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 428+ 6FBC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 6FBC             >
 428+ 6FBC             >                // dummy db directives used to calculate length of namec
 428+ 6FBC 50 46 41    >                db      "PFA"
 428+ 6FBF             >len_NFA         defl    $ - temp_NFA
 428+ 6FBF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 6FBC             >
 428+ 6FBC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 6FBD 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 428+ 6FC0             >                org     $-1                 // alter last byte of Name just above to set
 428+ 6FBF C1          >                db      {b $} | END_BIT     // msb as name end
 428+ 6FC0             >
 428+ 6FC0 A7 6F       >                dw      last_NFA            // Link to previous definition Name
 428+ 6FC2             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 6FC2 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 6FC5             >
 428+ 6FC5             >
 428+ 6FC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 6FC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 6FC5             >
 428+ 6FC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 6FC5 33 6C                        dw      ONE                     // 1
 430+ 6FC7 58 6F                        dw      TRAVERSE                // traverse
 431+ 6FC9 A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 432+ 6FCD 92 69                        dw      PLUS                    // +
 433+ 6FCF F7 68                        dw      EXIT                    // ;
 434+ 6FD1
 435+ 6FD1              //  ______________________________________________________________________
 436+ 6FD1              //
 437+ 6FD1              // >body        cfa -- pfa
 438+ 6FD1                              Colon_Def TO_BODY, ">BODY", is_normal
 438+ 6FD1             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 438+ 6FD1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 438+ 6FD1             >
 438+ 6FD1             >                // dummy db directives used to calculate length of namec
 438+ 6FD1 3E 42 4F 44 >                db      ">BODY"
 438+ 6FD5 59          >
 438+ 6FD6             >len_NFA         defl    $ - temp_NFA
 438+ 6FD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 438+ 6FD1             >
 438+ 6FD1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 438+ 6FD2 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 438+ 6FD6 59          >
 438+ 6FD7             >                org     $-1                 // alter last byte of Name just above to set
 438+ 6FD6 D9          >                db      {b $} | END_BIT     // msb as name end
 438+ 6FD7             >
 438+ 6FD7 BC 6F       >                dw      last_NFA            // Link to previous definition Name
 438+ 6FD9             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 438+ 6FD9 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 438+ 6FDC             >
 438+ 6FDC             >
 438+ 6FDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 438+ 6FDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 438+ 6FDC             >
 438+ 6FDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 439+ 6FDC 45 6C 92 69                  dw      THREE, PLUS             // cell+ --> 3 +
 440+ 6FE0 F7 68                        dw      EXIT                    // ;
 441+ 6FE2
 442+ 6FE2              //  ______________________________________________________________________
 443+ 6FE2              //
 444+ 6FE2              // <name        cfa -- nfa
 445+ 6FE2                              Colon_Def TO_NAME, "<NAME", is_normal
 445+ 6FE2             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 445+ 6FE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ 6FE2             >
 445+ 6FE2             >                // dummy db directives used to calculate length of namec
 445+ 6FE2 3C 4E 41 4D >                db      "<NAME"
 445+ 6FE6 45          >
 445+ 6FE7             >len_NFA         defl    $ - temp_NFA
 445+ 6FE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ 6FE2             >
 445+ 6FE2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ 6FE3 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 445+ 6FE7 45          >
 445+ 6FE8             >                org     $-1                 // alter last byte of Name just above to set
 445+ 6FE7 C5          >                db      {b $} | END_BIT     // msb as name end
 445+ 6FE8             >
 445+ 6FE8 D1 6F       >                dw      last_NFA            // Link to previous definition Name
 445+ 6FEA             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 6FEA CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 445+ 6FED             >
 445+ 6FED             >
 445+ 6FED             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 6FED             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 6FED             >
 445+ 6FED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 6FED D9 6F                        dw      TO_BODY                 // >body
 447+ 6FEF AD 6F                        dw      NFA                     // nfa
 448+ 6FF1 F7 68                        dw      EXIT                    // ;
 449+ 6FF3
 450+ 6FF3              //  ______________________________________________________________________
 451+ 6FF3              //
 452+ 6FF3              // !csp         --
 453+ 6FF3              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 454+ 6FF3                              Colon_Def STORE_CSP, "!CSP", is_normal
 454+ 6FF3             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 454+ 6FF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 454+ 6FF3             >
 454+ 6FF3             >                // dummy db directives used to calculate length of namec
 454+ 6FF3 21 43 53 50 >                db      "!CSP"
 454+ 6FF7             >len_NFA         defl    $ - temp_NFA
 454+ 6FF7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 454+ 6FF3             >
 454+ 6FF3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 454+ 6FF4 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 454+ 6FF8             >                org     $-1                 // alter last byte of Name just above to set
 454+ 6FF7 D0          >                db      {b $} | END_BIT     // msb as name end
 454+ 6FF8             >
 454+ 6FF8 E2 6F       >                dw      last_NFA            // Link to previous definition Name
 454+ 6FFA             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 454+ 6FFA CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 454+ 6FFD             >
 454+ 6FFD             >
 454+ 6FFD             >                endif           ; ok        // for other definitions it "points" the correct handler
 454+ 6FFD             >                // Use of "; ok" to suppress "warning[fwdref]"
 454+ 6FFD             >
 454+ 6FFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 455+ 6FFD C7 68                        dw      SPFETCH                 // sp@
 456+ 6FFF BA 6D E6 6A                  dw      CSP, STORE              // csp !
 457+ 7003 F7 68                        dw      EXIT                    // ;
 458+ 7005
 459+ 7005              //  ______________________________________________________________________
 460+ 7005              //
 461+ 7005              // ?error       f n --
 462+ 7005              // rase error n if flag f it true
 463+ 7005                              Colon_Def QERROR, "?ERROR", is_normal
 463+ 7005             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 463+ 7005             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 463+ 7005             >
 463+ 7005             >                // dummy db directives used to calculate length of namec
 463+ 7005 3F 45 52 52 >                db      "?ERROR"
 463+ 7009 4F 52       >
 463+ 700B             >len_NFA         defl    $ - temp_NFA
 463+ 700B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 463+ 7005             >
 463+ 7005 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 463+ 7006 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 463+ 700A 4F 52       >
 463+ 700C             >                org     $-1                 // alter last byte of Name just above to set
 463+ 700B D2          >                db      {b $} | END_BIT     // msb as name end
 463+ 700C             >
 463+ 700C F3 6F       >                dw      last_NFA            // Link to previous definition Name
 463+ 700E             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 463+ 700E CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 463+ 7011             >
 463+ 7011             >
 463+ 7011             >                endif           ; ok        // for other definitions it "points" the correct handler
 463+ 7011             >                // Use of "; ok" to suppress "warning[fwdref]"
 463+ 7011             >
 463+ 7011             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 464+ 7011 4F 6A                        dw      SWAP                    // swap
 465+ 7013                                                              // if
 466+ 7013 D8 63                        dw      ZBRANCH
 467+ 7015 08 00                        dw      QError_Else - $
 468+ 7017 AB 75                        dw          ERROR               //      error  ( is a forward-ref )
 469+ 7019                                                              // else
 470+ 7019 C3 63                        dw      BRANCH
 471+ 701B 04 00                        dw      QError_Endif - $
 472+ 701D              QError_Else:
 473+ 701D 2D 6A                        dw          DROP                //      drop
 474+ 701F              QError_Endif:                                   // endif
 475+ 701F F7 68                        dw      EXIT                    // ;
 476+ 7021
 477+ 7021              //  ______________________________________________________________________
 478+ 7021              //
 479+ 7021              // ?comp       --
 480+ 7021              // raise msg #17 if not compiling
 481+ 7021                              Colon_Def QCOMP, "?COMP", is_normal
 481+ 7021             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 481+ 7021             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ 7021             >
 481+ 7021             >                // dummy db directives used to calculate length of namec
 481+ 7021 3F 43 4F 4D >                db      "?COMP"
 481+ 7025 50          >
 481+ 7026             >len_NFA         defl    $ - temp_NFA
 481+ 7026             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ 7021             >
 481+ 7021 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ 7022 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 481+ 7026 50          >
 481+ 7027             >                org     $-1                 // alter last byte of Name just above to set
 481+ 7026 D0          >                db      {b $} | END_BIT     // msb as name end
 481+ 7027             >
 481+ 7027 05 70       >                dw      last_NFA            // Link to previous definition Name
 481+ 7029             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 7029 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 702C             >
 481+ 702C             >
 481+ 702C             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 702C             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 702C             >
 481+ 702C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 702C 91 6D DB 6A                  dw      STATE, FETCH            // state @
 483+ 7030 54 69                        dw      ZEQUAL                  // 0=
 484+ 7032 A5 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 485+ 7036 0E 70                        dw      QERROR                  // ?error
 486+ 7038 F7 68                        dw      EXIT                    // ;
 487+ 703A
 488+ 703A              //  ______________________________________________________________________
 489+ 703A              //
 490+ 703A              // ?exec       --
 491+ 703A              // raise msg #18 if compiling
 492+ 703A                              Colon_Def QEXEC, "?EXEC", is_normal
 492+ 703A             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 492+ 703A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ 703A             >
 492+ 703A             >                // dummy db directives used to calculate length of namec
 492+ 703A 3F 45 58 45 >                db      "?EXEC"
 492+ 703E 43          >
 492+ 703F             >len_NFA         defl    $ - temp_NFA
 492+ 703F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ 703A             >
 492+ 703A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ 703B 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 492+ 703F 43          >
 492+ 7040             >                org     $-1                 // alter last byte of Name just above to set
 492+ 703F C3          >                db      {b $} | END_BIT     // msb as name end
 492+ 7040             >
 492+ 7040 21 70       >                dw      last_NFA            // Link to previous definition Name
 492+ 7042             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 7042 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 492+ 7045             >
 492+ 7045             >
 492+ 7045             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 7045             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 7045             >
 492+ 7045             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 7045 91 6D DB 6A                  dw      STATE, FETCH            // state @
 494+ 7049 A5 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 495+ 704D 0E 70                        dw      QERROR                  // ?error
 496+ 704F F7 68                        dw      EXIT                    // ;
 497+ 7051
 498+ 7051              //  ______________________________________________________________________
 499+ 7051              //
 500+ 7051              // ?pairs       n1 n2 --
 501+ 7051              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 502+ 7051                              Colon_Def QPAIRS, "?PAIRS", is_normal
 502+ 7051             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 502+ 7051             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 502+ 7051             >
 502+ 7051             >                // dummy db directives used to calculate length of namec
 502+ 7051 3F 50 41 49 >                db      "?PAIRS"
 502+ 7055 52 53       >
 502+ 7057             >len_NFA         defl    $ - temp_NFA
 502+ 7057             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 502+ 7051             >
 502+ 7051 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 502+ 7052 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 502+ 7056 52 53       >
 502+ 7058             >                org     $-1                 // alter last byte of Name just above to set
 502+ 7057 D3          >                db      {b $} | END_BIT     // msb as name end
 502+ 7058             >
 502+ 7058 3A 70       >                dw      last_NFA            // Link to previous definition Name
 502+ 705A             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 502+ 705A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 502+ 705D             >
 502+ 705D             >
 502+ 705D             >                endif           ; ok        // for other definitions it "points" the correct handler
 502+ 705D             >                // Use of "; ok" to suppress "warning[fwdref]"
 502+ 705D             >
 502+ 705D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 503+ 705D 89 6E                        dw      SUBTRACT                // -
 504+ 705F A5 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 505+ 7063 0E 70                        dw      QERROR                  // ?error
 506+ 7065 F7 68                        dw      EXIT                    // ;
 507+ 7067
 508+ 7067              //  ______________________________________________________________________
 509+ 7067              //
 510+ 7067              // ?csp       --
 511+ 7067              // raise msg #20 if surrent SP in not what previously saved in CSP.
 512+ 7067              // Compiler relies on that for  syntax checking of structures
 513+ 7067                              Colon_Def QCSP, "?CSP", is_normal
 513+ 7067             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 513+ 7067             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 513+ 7067             >
 513+ 7067             >                // dummy db directives used to calculate length of namec
 513+ 7067 3F 43 53 50 >                db      "?CSP"
 513+ 706B             >len_NFA         defl    $ - temp_NFA
 513+ 706B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 513+ 7067             >
 513+ 7067 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 513+ 7068 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 513+ 706C             >                org     $-1                 // alter last byte of Name just above to set
 513+ 706B D0          >                db      {b $} | END_BIT     // msb as name end
 513+ 706C             >
 513+ 706C 51 70       >                dw      last_NFA            // Link to previous definition Name
 513+ 706E             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 513+ 706E CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 513+ 7071             >
 513+ 7071             >
 513+ 7071             >                endif           ; ok        // for other definitions it "points" the correct handler
 513+ 7071             >                // Use of "; ok" to suppress "warning[fwdref]"
 513+ 7071             >
 513+ 7071             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 514+ 7071 C7 68                        dw      SPFETCH                 // sp@
 515+ 7073 BA 6D DB 6A                  dw      CSP, FETCH              // csp @
 516+ 7077 89 6E                        dw      SUBTRACT                // -
 517+ 7079 A5 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 518+ 707D 0E 70                        dw      QERROR                  // ?error
 519+ 707F F7 68                        dw      EXIT                    // ;
 520+ 7081
 521+ 7081              //  ______________________________________________________________________
 522+ 7081              //
 523+ 7081              // ?loading      --
 524+ 7081              // raise msg #22 if not loading
 525+ 7081                              Colon_Def QLOADING, "?LOADING", is_normal
 525+ 7081             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 525+ 7081             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 525+ 7081             >
 525+ 7081             >                // dummy db directives used to calculate length of namec
 525+ 7081 3F 4C 4F 41 >                db      "?LOADING"
 525+ 7085 44 49 4E 47 >
 525+ 7089             >len_NFA         defl    $ - temp_NFA
 525+ 7089             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 525+ 7081             >
 525+ 7081 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 525+ 7082 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 525+ 7086 44 49 4E 47 >
 525+ 708A             >                org     $-1                 // alter last byte of Name just above to set
 525+ 7089 C7          >                db      {b $} | END_BIT     // msb as name end
 525+ 708A             >
 525+ 708A 67 70       >                dw      last_NFA            // Link to previous definition Name
 525+ 708C             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 525+ 708C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 525+ 708F             >
 525+ 708F             >
 525+ 708F             >                endif           ; ok        // for other definitions it "points" the correct handler
 525+ 708F             >                // Use of "; ok" to suppress "warning[fwdref]"
 525+ 708F             >
 525+ 708F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 526+ 708F 3E 6D DB 6A                  dw      BLK, FETCH              // blk @
 527+ 7093 54 69                        dw      ZEQUAL                  // 0=
 528+ 7095 A5 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 529+ 7099 0E 70                        dw      QERROR                  // ?error
 530+ 709B F7 68                        dw      EXIT                    // ;
 531+ 709D
 532+ 709D              //  ______________________________________________________________________
 533+ 709D              //
 534+ 709D              // compile      --
 535+ 709D              // compiles the following word
 536+ 709D                              Colon_Def COMPILE, "COMPILE", is_normal
 536+ 709D             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 536+ 709D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 536+ 709D             >
 536+ 709D             >                // dummy db directives used to calculate length of namec
 536+ 709D 43 4F 4D 50 >                db      "COMPILE"
 536+ 70A1 49 4C 45    >
 536+ 70A4             >len_NFA         defl    $ - temp_NFA
 536+ 70A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 536+ 709D             >
 536+ 709D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 536+ 709E 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 536+ 70A2 49 4C 45    >
 536+ 70A5             >                org     $-1                 // alter last byte of Name just above to set
 536+ 70A4 C5          >                db      {b $} | END_BIT     // msb as name end
 536+ 70A5             >
 536+ 70A5 81 70       >                dw      last_NFA            // Link to previous definition Name
 536+ 70A7             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 536+ 70A7 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 536+ 70AA             >
 536+ 70AA             >
 536+ 70AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 536+ 70AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 536+ 70AA             >
 536+ 70AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 537+ 70AA 29 70                        dw      QCOMP                   // ?comp
 538+ 70AC 33 69                        dw      R_TO                    // r>
 539+ 70AE 5A 6A D1 69                  dw      DUP, CELL_PLUS          // dup, cell+
 540+ 70B2 21 69                        dw      TO_R                    // >r
 541+ 70B4 DB 6A 52 6E                  dw      FETCH, COMMA            // @ ,
 542+ 70B8 F7 68                        dw      EXIT                    // ;
 543+ 70BA
 544+ 70BA              //  ______________________________________________________________________
 545+ 70BA              //
 546+ 70BA              // compile,     --
 547+ 70BA              // compiles the following word
 548+ 70BA                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 548+ 70BA             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 548+ 70BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 548+ 70BA             >
 548+ 70BA             >                // dummy db directives used to calculate length of namec
 548+ 70BA 43 4F 4D 50 >                db      "COMPILE,"
 548+ 70BE 49 4C 45 2C >
 548+ 70C2             >len_NFA         defl    $ - temp_NFA
 548+ 70C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 548+ 70BA             >
 548+ 70BA 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 548+ 70BB 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 548+ 70BF 49 4C 45 2C >
 548+ 70C3             >                org     $-1                 // alter last byte of Name just above to set
 548+ 70C2 AC          >                db      {b $} | END_BIT     // msb as name end
 548+ 70C3             >
 548+ 70C3 9D 70       >                dw      last_NFA            // Link to previous definition Name
 548+ 70C5             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 548+ 70C5 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 548+ 70C8             >
 548+ 70C8             >
 548+ 70C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 548+ 70C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 548+ 70C8             >
 548+ 70C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 549+ 70C8 29 70                        dw      QCOMP                   // ?comp
 550+ 70CA 52 6E                        dw      COMMA                   // ,
 551+ 70CC F7 68                        dw      EXIT                    // ;
 552+ 70CE
 553+ 70CE              //  ______________________________________________________________________
 554+ 70CE              //
 555+ 70CE              // [            --
 556+ 70CE              // stop compilation
 557+ 70CE                              Colon_Def SQUARED_OPEN, "[", is_immediate
 557+ 70CE             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 557+ 70CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 557+ 70CE             >
 557+ 70CE             >                // dummy db directives used to calculate length of namec
 557+ 70CE 5B          >                db      "["
 557+ 70CF             >len_NFA         defl    $ - temp_NFA
 557+ 70CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 557+ 70CE             >
 557+ 70CE C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 557+ 70CF 5B          >                db      "["               // name string in 7-bit ascii, but
 557+ 70D0             >                org     $-1                 // alter last byte of Name just above to set
 557+ 70CF DB          >                db      {b $} | END_BIT     // msb as name end
 557+ 70D0             >
 557+ 70D0 BA 70       >                dw      last_NFA            // Link to previous definition Name
 557+ 70D2             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 557+ 70D2 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 557+ 70D5             >
 557+ 70D5             >
 557+ 70D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 557+ 70D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 557+ 70D5             >
 557+ 70D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 558+ 70D5 2A 6C                        dw      ZERO                    // 0
 559+ 70D7 91 6D E6 6A                  dw      STATE, STORE            // state !
 560+ 70DB F7 68                        dw      EXIT                    // ; immediate
 561+ 70DD
 562+ 70DD              //  ______________________________________________________________________
 563+ 70DD              //
 564+ 70DD              // ]            --
 565+ 70DD              // start compilation
 566+ 70DD                              Colon_Def SQUARED_CLOSE, "]", is_normal
 566+ 70DD             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 566+ 70DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ 70DD             >
 566+ 70DD             >                // dummy db directives used to calculate length of namec
 566+ 70DD 5D          >                db      "]"
 566+ 70DE             >len_NFA         defl    $ - temp_NFA
 566+ 70DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ 70DD             >
 566+ 70DD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ 70DE 5D          >                db      "]"               // name string in 7-bit ascii, but
 566+ 70DF             >                org     $-1                 // alter last byte of Name just above to set
 566+ 70DE DD          >                db      {b $} | END_BIT     // msb as name end
 566+ 70DF             >
 566+ 70DF CE 70       >                dw      last_NFA            // Link to previous definition Name
 566+ 70E1             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 70E1 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 70E4             >
 566+ 70E4             >
 566+ 70E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 70E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 70E4             >
 566+ 70E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 70E4 A5 63 C0 00                  dw      LIT, $C0                // 192
 568+ 70E8 91 6D E6 6A                  dw      STATE, STORE            // state !
 569+ 70EC F7 68                        dw      EXIT                    // ;
 570+ 70EE
 571+ 70EE              //  ______________________________________________________________________
 572+ 70EE              //
 573+ 70EE              // smudge       --
 574+ 70EE              // toggle smudge bit of latest definition
 575+ 70EE                              Colon_Def SMUDGE, "SMUDGE", is_normal
 575+ 70EE             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 575+ 70EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ 70EE             >
 575+ 70EE             >                // dummy db directives used to calculate length of namec
 575+ 70EE 53 4D 55 44 >                db      "SMUDGE"
 575+ 70F2 47 45       >
 575+ 70F4             >len_NFA         defl    $ - temp_NFA
 575+ 70F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ 70EE             >
 575+ 70EE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ 70EF 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 575+ 70F3 47 45       >
 575+ 70F5             >                org     $-1                 // alter last byte of Name just above to set
 575+ 70F4 C5          >                db      {b $} | END_BIT     // msb as name end
 575+ 70F5             >
 575+ 70F5 DD 70       >                dw      last_NFA            // Link to previous definition Name
 575+ 70F7             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 70F7 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 575+ 70FA             >
 575+ 70FA             >
 575+ 70FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 70FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 70FA             >
 575+ 70FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 70FA 7C 6F                        dw      LATEST                  // latest
 577+ 70FC A5 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 578+ 7100 D0 6A                        dw      TOGGLE                  // toggle
 579+ 7102 F7 68                        dw      EXIT                    // ;
 580+ 7104
 581+ 7104              //  ______________________________________________________________________
 582+ 7104              //
 583+ 7104              // immediate    --
 584+ 7104              // make immediate the latest definition
 585+ 7104                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 585+ 7104             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 585+ 7104             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 585+ 7104             >
 585+ 7104             >                // dummy db directives used to calculate length of namec
 585+ 7104 49 4D 4D 45 >                db      "IMMEDIATE"
 585+ 7108 44 49 41 54 >
 585+ 710C 45          >
 585+ 710D             >len_NFA         defl    $ - temp_NFA
 585+ 710D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 585+ 7104             >
 585+ 7104 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 585+ 7105 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 585+ 7109 44 49 41 54 >
 585+ 710D 45          >
 585+ 710E             >                org     $-1                 // alter last byte of Name just above to set
 585+ 710D C5          >                db      {b $} | END_BIT     // msb as name end
 585+ 710E             >
 585+ 710E EE 70       >                dw      last_NFA            // Link to previous definition Name
 585+ 7110             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 585+ 7110 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 585+ 7113             >
 585+ 7113             >
 585+ 7113             >                endif           ; ok        // for other definitions it "points" the correct handler
 585+ 7113             >                // Use of "; ok" to suppress "warning[fwdref]"
 585+ 7113             >
 585+ 7113             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 586+ 7113 7C 6F                        dw      LATEST                  // latest
 587+ 7115 A5 63 40 00                  dw      LIT, $40                // 64
 588+ 7119 D0 6A                        dw      TOGGLE                  // toggle
 589+ 711B F7 68                        dw      EXIT                    // ;
 590+ 711D
 591+ 711D              //  ______________________________________________________________________
 592+ 711D              //
 593+ 711D              // hex          --
 594+ 711D              // change numeration base
 595+ 711D                              Colon_Def HEX, "HEX", is_normal
 595+ 711D             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 595+ 711D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 595+ 711D             >
 595+ 711D             >                // dummy db directives used to calculate length of namec
 595+ 711D 48 45 58    >                db      "HEX"
 595+ 7120             >len_NFA         defl    $ - temp_NFA
 595+ 7120             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 595+ 711D             >
 595+ 711D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 595+ 711E 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 595+ 7121             >                org     $-1                 // alter last byte of Name just above to set
 595+ 7120 D8          >                db      {b $} | END_BIT     // msb as name end
 595+ 7121             >
 595+ 7121 04 71       >                dw      last_NFA            // Link to previous definition Name
 595+ 7123             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 595+ 7123 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 595+ 7126             >
 595+ 7126             >
 595+ 7126             >                endif           ; ok        // for other definitions it "points" the correct handler
 595+ 7126             >                // Use of "; ok" to suppress "warning[fwdref]"
 595+ 7126             >
 595+ 7126             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 596+ 7126 A5 63 10 00                  dw      LIT, 16                 // 16
 597+ 712A 9C 6D E6 6A                  dw      BASE, STORE             // base !
 598+ 712E F7 68                        dw      EXIT                    // ;
 599+ 7130
 600+ 7130              //  ______________________________________________________________________
 601+ 7130              //
 602+ 7130              // decimal      --
 603+ 7130              // change numeration base
 604+ 7130                              Colon_Def DECIMAL, "DECIMAL", is_normal
 604+ 7130             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 604+ 7130             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 604+ 7130             >
 604+ 7130             >                // dummy db directives used to calculate length of namec
 604+ 7130 44 45 43 49 >                db      "DECIMAL"
 604+ 7134 4D 41 4C    >
 604+ 7137             >len_NFA         defl    $ - temp_NFA
 604+ 7137             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 604+ 7130             >
 604+ 7130 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 604+ 7131 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 604+ 7135 4D 41 4C    >
 604+ 7138             >                org     $-1                 // alter last byte of Name just above to set
 604+ 7137 CC          >                db      {b $} | END_BIT     // msb as name end
 604+ 7138             >
 604+ 7138 1D 71       >                dw      last_NFA            // Link to previous definition Name
 604+ 713A             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 604+ 713A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 604+ 713D             >
 604+ 713D             >
 604+ 713D             >                endif           ; ok        // for other definitions it "points" the correct handler
 604+ 713D             >                // Use of "; ok" to suppress "warning[fwdref]"
 604+ 713D             >
 604+ 713D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 605+ 713D A5 63 0A 00                  dw      LIT, 10                 // 10
 606+ 7141 9C 6D E6 6A                  dw      BASE, STORE             // base !
 607+ 7145 F7 68                        dw      EXIT                    // ;
 608+ 7147
 609+ 7147              //  ______________________________________________________________________
 610+ 7147              //
 611+ 7147              // (;code)       --
 612+ 7147              // patch to CFA to call/jump to the "following code"
 613+ 7147                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 613+ 7147             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 613+ 7147             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 613+ 7147             >
 613+ 7147             >                // dummy db directives used to calculate length of namec
 613+ 7147 28 3B 43 4F >                db      "(;CODE)"
 613+ 714B 44 45 29    >
 613+ 714E             >len_NFA         defl    $ - temp_NFA
 613+ 714E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 613+ 7147             >
 613+ 7147 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 613+ 7148 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 613+ 714C 44 45 29    >
 613+ 714F             >                org     $-1                 // alter last byte of Name just above to set
 613+ 714E A9          >                db      {b $} | END_BIT     // msb as name end
 613+ 714F             >
 613+ 714F 30 71       >                dw      last_NFA            // Link to previous definition Name
 613+ 7151             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 613+ 7151 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 613+ 7154             >
 613+ 7154             >
 613+ 7154             >                endif           ; ok        // for other definitions it "points" the correct handler
 613+ 7154             >                // Use of "; ok" to suppress "warning[fwdref]"
 613+ 7154             >
 613+ 7154             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 614+ 7154 33 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 615+ 7156 7C 6F                        dw      LATEST                  // latest   ( Word being defined in this moment )
 616+ 7158 C2 6F 9E 6F                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 617+ 715C
 618+ 715C A5 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 619+ 7160 1F 6A FE 6A                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 620+ 7164 AF 69                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 621+ 7166
 622+ 7166 E6 6A                        dw      STORE                   // !
 623+ 7168 F7 68                        dw      EXIT                    // ;
 624+ 716A
 625+ 716A              //  ______________________________________________________________________
 626+ 716A              //
 627+ 716A              // ;code        --
 628+ 716A                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 628+ 716A             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 628+ 716A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 628+ 716A             >
 628+ 716A             >                // dummy db directives used to calculate length of namec
 628+ 716A 3B 43 4F 44 >                db      ";CODE"
 628+ 716E 45          >
 628+ 716F             >len_NFA         defl    $ - temp_NFA
 628+ 716F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 628+ 716A             >
 628+ 716A C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 628+ 716B 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 628+ 716F 45          >
 628+ 7170             >                org     $-1                 // alter last byte of Name just above to set
 628+ 716F C5          >                db      {b $} | END_BIT     // msb as name end
 628+ 7170             >
 628+ 7170 47 71       >                dw      last_NFA            // Link to previous definition Name
 628+ 7172             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 628+ 7172 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 628+ 7175             >
 628+ 7175             >
 628+ 7175             >                endif           ; ok        // for other definitions it "points" the correct handler
 628+ 7175             >                // Use of "; ok" to suppress "warning[fwdref]"
 628+ 7175             >
 628+ 7175             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 629+ 7175 6E 70                        dw      QCSP                    // ?csp
 630+ 7177 A7 70                        dw      COMPILE                 // compile
 631+ 7179 51 71                        dw      C_SEMICOLON_CODE        // (;code)
 632+ 717B D2 70                        dw      SQUARED_OPEN            // [
 633+ 717D D7 6B                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 634+ 717F F7 68                        dw      EXIT                    // ; immediate
 635+ 7181
 636+ 7181              //  ______________________________________________________________________
 637+ 7181              //
 638+ 7181              // <builds      --
 639+ 7181                              Colon_Def CBUILDS, "<BUILDS", is_normal
 639+ 7181             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 639+ 7181             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 639+ 7181             >
 639+ 7181             >                // dummy db directives used to calculate length of namec
 639+ 7181 3C 42 55 49 >                db      "<BUILDS"
 639+ 7185 4C 44 53    >
 639+ 7188             >len_NFA         defl    $ - temp_NFA
 639+ 7188             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 639+ 7181             >
 639+ 7181 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 639+ 7182 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 639+ 7186 4C 44 53    >
 639+ 7189             >                org     $-1                 // alter last byte of Name just above to set
 639+ 7188 D3          >                db      {b $} | END_BIT     // msb as name end
 639+ 7189             >
 639+ 7189 6A 71       >                dw      last_NFA            // Link to previous definition Name
 639+ 718B             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 639+ 718B CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 639+ 718E             >
 639+ 718E             >
 639+ 718E             >                endif           ; ok        // for other definitions it "points" the correct handler
 639+ 718E             >                // Use of "; ok" to suppress "warning[fwdref]"
 639+ 718E             >
 639+ 718E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 640+ 718E 2A 6C                        dw      ZERO                    // 0
 641+ 7190 E7 6B                        dw      CONSTANT                // constant
 642+ 7192 F7 68                        dw      EXIT                    // ;
 643+ 7194
 644+ 7194              //  ______________________________________________________________________
 645+ 7194              //
 646+ 7194              // recurse      --
 647+ 7194              //              Colon_Def RECURSE, "RECURSE", is_immediate
 648+ 7194              //              dw      QCOMP                   // ?comp
 649+ 7194              //              dw      LATEST                  // latest
 650+ 7194              //              dw      PFA, CFA                // pfa cfa
 651+ 7194              //              dw      COMMA                   // ,
 652+ 7194              //              dw      EXIT                    // ; immediate
 653+ 7194
 654+ 7194              //  ______________________________________________________________________
 655+ 7194              //
 656+ 7194              // does>     --
 657+ 7194                              Colon_Def DOES_TO, "DOES>", is_normal
 657+ 7194             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 657+ 7194             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 657+ 7194             >
 657+ 7194             >                // dummy db directives used to calculate length of namec
 657+ 7194 44 4F 45 53 >                db      "DOES>"
 657+ 7198 3E          >
 657+ 7199             >len_NFA         defl    $ - temp_NFA
 657+ 7199             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 657+ 7194             >
 657+ 7194 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 657+ 7195 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 657+ 7199 3E          >
 657+ 719A             >                org     $-1                 // alter last byte of Name just above to set
 657+ 7199 BE          >                db      {b $} | END_BIT     // msb as name end
 657+ 719A             >
 657+ 719A 81 71       >                dw      last_NFA            // Link to previous definition Name
 657+ 719C             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 657+ 719C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 657+ 719F             >
 657+ 719F             >
 657+ 719F             >                endif           ; ok        // for other definitions it "points" the correct handler
 657+ 719F             >                // Use of "; ok" to suppress "warning[fwdref]"
 657+ 719F             >
 657+ 719F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 658+ 719F 33 69                        dw      R_TO                    // r>
 659+ 71A1 7C 6F                        dw      LATEST                  // latest
 660+ 71A3 C2 6F                        dw      PFA                     // pfa
 661+ 71A5 E6 6A                        dw      STORE                   // !
 662+ 71A7 51 71                        dw      C_SEMICOLON_CODE        // ;code
 663+ 71A9              Does_Ptr:
 664+ 71A9                              // via call coded in CFA
 665+ 71A9                              ldhlrp
 665+ 71A9 2A 96 63    >                ld      hl,(RP_Pointer)
 666+ 71AC 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 667+ 71AD 70                           ld      (hl), b
 668+ 71AE 2B                           dec     hl
 669+ 71AF 71                           ld      (hl), c
 670+ 71B0                              ldrphl
 670+ 71B0 22 96 63    >                ld      (RP_Pointer),hl
 671+ 71B3 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 672+ 71B4
 673+ 71B4 4E                           ld      c, (hl)
 674+ 71B5 23                           inc     hl
 675+ 71B6 46                           ld      b, (hl)
 676+ 71B7 23                           inc     hl
 677+ 71B8
 678+ 71B8                              psh1
 678+ 71B8 E5          >                push    hl
 678+ 71B9 DD E9       >                jp      (ix)
 679+ 71BB                              // SMUDGE !
 680+ 71BB
 681+ 71BB              //  ______________________________________________________________________
 682+ 71BB              //
 683+ 71BB              // count        a -- a2 n
 684+ 71BB              // expects a counted string at address a, returns string address and counter
 685+ 71BB                              Colon_Def COUNT, "COUNT", is_normal
 685+ 71BB             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 685+ 71BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 685+ 71BB             >
 685+ 71BB             >                // dummy db directives used to calculate length of namec
 685+ 71BB 43 4F 55 4E >                db      "COUNT"
 685+ 71BF 54          >
 685+ 71C0             >len_NFA         defl    $ - temp_NFA
 685+ 71C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 685+ 71BB             >
 685+ 71BB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 685+ 71BC 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 685+ 71C0 54          >
 685+ 71C1             >                org     $-1                 // alter last byte of Name just above to set
 685+ 71C0 D4          >                db      {b $} | END_BIT     // msb as name end
 685+ 71C1             >
 685+ 71C1 94 71       >                dw      last_NFA            // Link to previous definition Name
 685+ 71C3             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 685+ 71C3 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 685+ 71C6             >
 685+ 71C6             >
 685+ 71C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 685+ 71C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 685+ 71C6             >
 685+ 71C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 686+ 71C6 5A 6A                        dw      DUP                     // dup
 687+ 71C8 AF 69                        dw      ONE_PLUS                // 1+
 688+ 71CA 4F 6A F2 6A                  dw      SWAP, CFETCH             // swap @
 689+ 71CE F7 68                        dw      EXIT                    // ;
 690+ 71D0
 691+ 71D0              //  ______________________________________________________________________
 692+ 71D0              //
 693+ 71D0              // bounds       a n -- a+n n
 694+ 71D0              // given an address and a length ( a n ) calculate the bound addresses
 695+ 71D0              // suitable for DO-LOOP
 696+ 71D0                              Colon_Def BOUNDS, "BOUNDS", is_normal
 696+ 71D0             >                New_Def  BOUNDS, "BOUNDS", Enter_Ptr, is_normal ; ok
 696+ 71D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 696+ 71D0             >
 696+ 71D0             >                // dummy db directives used to calculate length of namec
 696+ 71D0 42 4F 55 4E >                db      "BOUNDS"
 696+ 71D4 44 53       >
 696+ 71D6             >len_NFA         defl    $ - temp_NFA
 696+ 71D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 696+ 71D0             >
 696+ 71D0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 696+ 71D1 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 696+ 71D5 44 53       >
 696+ 71D7             >                org     $-1                 // alter last byte of Name just above to set
 696+ 71D6 D3          >                db      {b $} | END_BIT     // msb as name end
 696+ 71D7             >
 696+ 71D7 BB 71       >                dw      last_NFA            // Link to previous definition Name
 696+ 71D9             >BOUNDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 696+ 71D9 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 696+ 71DC             >
 696+ 71DC             >
 696+ 71DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 696+ 71DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 696+ 71DC             >
 696+ 71DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 697+ 71DC 1F 6A 92 69                  dw      OVER, PLUS, SWAP        // over + swap
 697+ 71E0 4F 6A
 698+ 71E2 F7 68                        dw      EXIT                    // ;
 699+ 71E4
 700+ 71E4              //  ______________________________________________________________________
 701+ 71E4              //
 702+ 71E4              // type         a n --
 703+ 71E4              // Sends to current output channel n characters starting at address a.
 704+ 71E4                              Colon_Def TYPE, "TYPE", is_normal
 704+ 71E4             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 704+ 71E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 704+ 71E4             >
 704+ 71E4             >                // dummy db directives used to calculate length of namec
 704+ 71E4 54 59 50 45 >                db      "TYPE"
 704+ 71E8             >len_NFA         defl    $ - temp_NFA
 704+ 71E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 704+ 71E4             >
 704+ 71E4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 704+ 71E5 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 704+ 71E9             >                org     $-1                 // alter last byte of Name just above to set
 704+ 71E8 C5          >                db      {b $} | END_BIT     // msb as name end
 704+ 71E9             >
 704+ 71E9 D0 71       >                dw      last_NFA            // Link to previous definition Name
 704+ 71EB             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 704+ 71EB CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 704+ 71EE             >
 704+ 71EE             >
 704+ 71EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 704+ 71EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 704+ 71EE             >
 704+ 71EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 705+ 71EE D9 71                        dw      BOUNDS                  // bounds
 706+ 71F0 31 64                        dw      C_Q_DO                  // ?do
 707+ 71F2 0C 00                        dw      Type_Skip - $
 708+ 71F4              Type_Loop:
 709+ 71F4 66 64 F2 6A                  dw          I, CFETCH           //      i c@
 710+ 71F8 27 6F                        dw          EMIT                //      emit
 711+ 71FA 22 64                        dw      C_LOOP                  // loop
 712+ 71FC F8 FF                        dw      Type_Loop - $
 713+ 71FE              Type_Skip:
 714+ 71FE F7 68                        dw      EXIT                    // ;
 715+ 7200
 716+ 7200              //  ______________________________________________________________________
 717+ 7200              //
 718+ 7200              // leave        --
 719+ 7200              // Compile (leave) to leave current LOOP and jump just after it
 720+ 7200                              Colon_Def LEAVE, "LEAVE", is_immediate
 720+ 7200             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 720+ 7200             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 720+ 7200             >
 720+ 7200             >                // dummy db directives used to calculate length of namec
 720+ 7200 4C 45 41 56 >                db      "LEAVE"
 720+ 7204 45          >
 720+ 7205             >len_NFA         defl    $ - temp_NFA
 720+ 7205             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 720+ 7200             >
 720+ 7200 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 720+ 7201 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 720+ 7205 45          >
 720+ 7206             >                org     $-1                 // alter last byte of Name just above to set
 720+ 7205 C5          >                db      {b $} | END_BIT     // msb as name end
 720+ 7206             >
 720+ 7206 E4 71       >                dw      last_NFA            // Link to previous definition Name
 720+ 7208             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 720+ 7208 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 720+ 720B             >
 720+ 720B             >
 720+ 720B             >                endif           ; ok        // for other definitions it "points" the correct handler
 720+ 720B             >                // Use of "; ok" to suppress "warning[fwdref]"
 720+ 720B             >
 720+ 720B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 721+ 720B A7 70 0D 69                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 722+ 720F 34 6E 21 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 722+ 7213 2A 6C 52 6E
 723+ 7217 2A 6C 2A 6C                  dw      ZERO, ZERO
 724+ 721B C7 68 5A 6A                  dw      SPFETCH, DUP
 725+ 721F D1 69 D1 69                  dw      CELL_PLUS, CELL_PLUS
 726+ 7223 41 6A                        dw      TUCK
 727+ 7225 BA 6D DB 6A                  dw      CSP, FETCH
 728+ 7229 4F 6A 89 6E                  dw      SWAP, SUBTRACT
 729+ 722D FD 67                        dw      CMOVE
 730+ 722F BA 6D DB 6A                  dw      CSP, FETCH, CELL_MINUS
 730+ 7233 DC 69
 731+ 7235 33 69 1F 6A                  dw      R_TO, OVER, STORE
 731+ 7239 E6 6A
 732+ 723B DC 69 2A 6C                  dw      CELL_MINUS, ZERO
 733+ 723F 4F 6A E6 6A                  dw      SWAP, STORE
 734+ 7243 F7 68                        dw      EXIT                    // ;
 735+ 7245
 736+ 7245              //  ______________________________________________________________________
 737+ 7245              //
 738+ 7245              // -trailing    a n1 -- a n2
 739+ 7245              // Assumes that an n1 bytes-long string is stored at address a
 740+ 7245              // and the string contains a space delimited word,
 741+ 7245              // Finds n2 as the position of the first character after the word.
 742+ 7245                              Colon_Def LTRAILING, "-TRAILING", is_normal
 742+ 7245             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 742+ 7245             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 742+ 7245             >
 742+ 7245             >                // dummy db directives used to calculate length of namec
 742+ 7245 2D 54 52 41 >                db      "-TRAILING"
 742+ 7249 49 4C 49 4E >
 742+ 724D 47          >
 742+ 724E             >len_NFA         defl    $ - temp_NFA
 742+ 724E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 742+ 7245             >
 742+ 7245 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 742+ 7246 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 742+ 724A 49 4C 49 4E >
 742+ 724E 47          >
 742+ 724F             >                org     $-1                 // alter last byte of Name just above to set
 742+ 724E C7          >                db      {b $} | END_BIT     // msb as name end
 742+ 724F             >
 742+ 724F 00 72       >                dw      last_NFA            // Link to previous definition Name
 742+ 7251             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 742+ 7251 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 742+ 7254             >
 742+ 7254             >
 742+ 7254             >                endif           ; ok        // for other definitions it "points" the correct handler
 742+ 7254             >                // Use of "; ok" to suppress "warning[fwdref]"
 742+ 7254             >
 742+ 7254             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 743+ 7254 5A 6A 2A 6C                  dw      DUP, ZERO               // dup 0
 744+ 7258                                                              // do
 745+ 7258 31 64                        dw      C_Q_DO
 746+ 725A 20 00                        dw      LTrailing_Leave - $
 747+ 725C              LTrailing_Loop:
 748+ 725C AF 6A 92 69                  dw          TWO_DUP, PLUS       //      2dup +
 749+ 7260 B9 69                        dw          ONE_SUBTRACT        //      1-
 750+ 7262 F2 6A                        dw          CFETCH              //      c@
 751+ 7264 59 6C 89 6E                  dw          BL, SUBTRACT        //      bl -
 752+ 7268                                                              //      if
 753+ 7268 D8 63                        dw          ZBRANCH
 754+ 726A 0A 00                        dw          LTrailing_Else - $
 755+ 726C 0D 69                        dw              C_LEAVE         //          leave
 756+ 726E 0C 00                        dw              LTrailing_Leave - $
 757+ 7270 C3 63                        dw          BRANCH              //      else
 758+ 7272 04 00                        dw          LTrailing_Endif - $
 759+ 7274              LTrailing_Else:
 760+ 7274 B9 69                        dw              ONE_SUBTRACT    //          1-
 761+ 7276              LTrailing_Endif:                                //      endif
 762+ 7276                                                              // loop
 763+ 7276 22 64                        dw      C_LOOP
 764+ 7278 E4 FF                        dw      LTrailing_Loop - $
 765+ 727A              LTrailing_Leave:
 766+ 727A F7 68                        dw      EXIT                    // ;
 767+ 727C
 768+ 727C              //  ______________________________________________________________________
 769+ 727C              //
 770+ 727C              // accept       a n1 -- n2
 771+ 727C              // Accepts at most n1 characters from terminal and stores them at address a
 772+ 727C              // CR stops input. A 'nul' is added as trailer.
 773+ 727C              // n2 is the string length. n2 is kept in span user variable also.
 774+ 727C                              Colon_Def ACCEPT, "ACCEPT", is_normal
 774+ 727C             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 774+ 727C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 774+ 727C             >
 774+ 727C             >                // dummy db directives used to calculate length of namec
 774+ 727C 41 43 43 45 >                db      "ACCEPT"
 774+ 7280 50 54       >
 774+ 7282             >len_NFA         defl    $ - temp_NFA
 774+ 7282             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 774+ 727C             >
 774+ 727C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 774+ 727D 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 774+ 7281 50 54       >
 774+ 7283             >                org     $-1                 // alter last byte of Name just above to set
 774+ 7282 D4          >                db      {b $} | END_BIT     // msb as name end
 774+ 7283             >
 774+ 7283 45 72       >                dw      last_NFA            // Link to previous definition Name
 774+ 7285             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 774+ 7285 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 774+ 7288             >
 774+ 7288             >
 774+ 7288             >                endif           ; ok        // for other definitions it "points" the correct handler
 774+ 7288             >                // Use of "; ok" to suppress "warning[fwdref]"
 774+ 7288             >
 774+ 7288             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 775+ 7288 1F 6A 92 69                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 775+ 728C 1F 6A
 776+ 728E 2A 6C 73 6A                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 777+ 7292                                                              // do
 778+ 7292 31 64                        dw      C_Q_DO
 779+ 7294 8A 00                        dw      Accept_Leave - $
 780+ 7296              Accept_Loop:
 781+ 7296 2D 6A 6B 66                  dw          DROP, KEY           //      drop key        ( a  c )
 782+ 729A 5A 6A                        dw          DUP                 //      dup             ( a  c  c )
 783+ 729C A5 63 0E 00                  dw          LIT, $0E            //      0E
 784+ 72A0 9A 6C                        dw          PLUS_ORIGIN         //      +origin
 785+ 72A2 DB 6A                        dw          FETCH               //      @               ( a  c  c  del )
 786+ 72A4 95 6E                        dw          EQUALS              //      =               ( a  c  c==del )
 787+ 72A6                                                              //      if
 788+ 72A6 D8 63                        dw          ZBRANCH
 789+ 72A8 2C 00                        dw          Accept_Else_0 - $
 790+ 72AA 2D 6A                        dw              DROP            //          drop        ( a  )
 791+ 72AC 5A 6A 66 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 791+ 72B0 95 6E
 792+ 72B2 33 6C 95 68                  dw              ONE, AND_OP     //          1 and
 793+ 72B6 5A 6A                        dw              DUP             //          dup         ( a  a==i  a==i )
 794+ 72B8 33 69                        dw              R_TO            //          r> 2 - + r>
 795+ 72BA E7 69 92 69                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 796+ 72BE 21 69                        dw              TO_R            //
 797+ 72C0                                                              //          if
 798+ 72C0 D8 63                        dw              ZBRANCH
 799+ 72C2 0A 00                        dw              Accept_Else_1 - $
 800+ 72C4 A5 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 801+ 72C8                                                              //          else
 802+ 72C8 C3 63                        dw              BRANCH
 803+ 72CA 06 00                        dw              Accept_Endif_1 - $
 804+ 72CC              Accept_Else_1:
 805+ 72CC A5 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 806+ 72D0              Accept_Endif_1:                                 //          endif
 807+ 72D0 C3 63                        dw          BRANCH
 808+ 72D2 2E 00                        dw          Accept_Endif_0 - $
 809+ 72D4              Accept_Else_0:                                  //      else
 810+ 72D4 5A 6A                        dw              DUP             //          dup         ( a  c  c )
 811+ 72D6 A5 63 0D 00                  dw              LIT, 13         //          13
 812+ 72DA 95 6E                        dw              EQUALS          //          =           ( a  c  c==CR )
 813+ 72DC                                                              //          if
 814+ 72DC D8 63                        dw              ZBRANCH
 815+ 72DE 0C 00                        dw              Accept_Else_2 - $
 816+ 72E0 2D 6A 59 6C                  dw                  DROP, BL    //              drop bl ( a  bl )
 817+ 72E4 2A 6C                        dw                  ZERO        //              0       ( a  c  0 )
 818+ 72E6                                                              //          else
 819+ 72E6 C3 63                        dw              BRANCH
 820+ 72E8 04 00                        dw              Accept_Endif_2 - $
 821+ 72EA              Accept_Else_2:
 822+ 72EA 5A 6A                        dw                  DUP         //              dup     ( a  c  c )
 823+ 72EC                                                              //          endif
 824+ 72EC              Accept_Endif_2:
 825+ 72EC 66 64 FE 6A                  dw              I, CSTORE       //          i           ( a  c )
 826+ 72F0 5A 6A 59 6C                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 826+ 72F4 B5 6E
 827+ 72F6                                                              //          if
 828+ 72F6 D8 63                        dw              ZBRANCH
 829+ 72F8 08 00                        dw              Accept_Endif_3 - $
 830+ 72FA 33 69                        dw                  R_TO        //              r>
 831+ 72FC B9 69                        dw                  ONE_SUBTRACT//              1-
 832+ 72FE 21 69                        dw                  TO_R        //              >r
 833+ 7300                                                              //          endif
 834+ 7300              Accept_Endif_3:
 835+ 7300              Accept_Endif_0:                                 //      endif
 836+ 7300 27 6F                        dw          EMIT                //      emit
 837+ 7302 2A 6C 66 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 837+ 7306 AF 69
 838+ 7308 E6 6A                        dw          STORE               //          ( zero pad )
 839+ 730A 66 64                        dw          I                   //      i
 840+ 730C 66 64 F2 6A                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 840+ 7310 54 69
 841+ 7312 D8 63                        dw          ZBRANCH             //
 842+ 7314 06 00                        dw              Accept_Endif_4 - $
 843+ 7316 0D 69                        dw                  C_LEAVE     //              leave
 844+ 7318 06 00                        dw                  Accept_Leave - $
 845+ 731A              Accept_Endif_4:                                 //      endif
 846+ 731A                                                              // loop
 847+ 731A 22 64                        dw      C_LOOP
 848+ 731C 7A FF                        dw      Accept_Loop - $
 849+ 731E              Accept_Leave:
 850+ 731E 4F 6A 89 6E                  dw      SWAP, SUBTRACT          // swap -
 851+ 7322 AF 69                        dw      ONE_PLUS                // 1+
 852+ 7324 5A 6A 12 6E                  dw      DUP, SPAN, STORE        // dup span !
 852+ 7328 E6 6A
 853+ 732A F7 68                        dw      EXIT                    // ;
 854+ 732C
 855+ 732C              //  ______________________________________________________________________
 856+ 732C              //
 857+ 732C              // expect      a n --
 858+ 732C              // Accepts at most n1 characters from terminal and stores them at address a
 859+ 732C              // CR stops input. A 'nul' is added as trailer.
 860+ 732C              // n2 is the string length. n2 is kept in span user variable also.
 861+ 732C              //              Colon_Def EXPECT, "EXPECT", is_normal
 862+ 732C              //              dw      ACCEPT, DROP            // accept drop
 863+ 732C              //              dw      EXIT                    // ;
 864+ 732C
 865+ 732C              //  ______________________________________________________________________
 866+ 732C              //
 867+ 732C              // query        --
 868+ 732C              // Accept at most 80 character from console. CR stops.
 869+ 732C              // Text is stored in TIB. Variable IN is zeroed.
 870+ 732C                              Colon_Def QUERY, "QUERY", is_normal
 870+ 732C             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 870+ 732C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 870+ 732C             >
 870+ 732C             >                // dummy db directives used to calculate length of namec
 870+ 732C 51 55 45 52 >                db      "QUERY"
 870+ 7330 59          >
 870+ 7331             >len_NFA         defl    $ - temp_NFA
 870+ 7331             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 870+ 732C             >
 870+ 732C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 870+ 732D 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 870+ 7331 59          >
 870+ 7332             >                org     $-1                 // alter last byte of Name just above to set
 870+ 7331 D9          >                db      {b $} | END_BIT     // msb as name end
 870+ 7332             >
 870+ 7332 7C 72       >                dw      last_NFA            // Link to previous definition Name
 870+ 7334             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 870+ 7334 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 870+ 7337             >
 870+ 7337             >
 870+ 7337             >                endif           ; ok        // for other definitions it "points" the correct handler
 870+ 7337             >                // Use of "; ok" to suppress "warning[fwdref]"
 870+ 7337             >
 870+ 7337             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 871+ 7337 C8 6C DB 6A                  dw      TIB, FETCH              // tib @
 872+ 733B A5 63 50 00                  dw      LIT, 80                 // 80
 873+ 733F 85 72 2D 6A                  dw      ACCEPT, DROP            // accept drop
 874+ 7343 2A 6C 48 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 874+ 7347 E6 6A
 875+ 7349 F7 68                        dw      EXIT                    // ;
 876+ 734B
 877+ 734B              //  ______________________________________________________________________
 878+ 734B              //
 879+ 734B              // fill        a n c --
 880+ 734B              // If n > 0, fills n locations starting from address a with the value c.
 881+ 734B                              New_Def FILL, "FILL", is_code, is_normal
 881+ 734B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 881+ 734B             >
 881+ 734B             >                // dummy db directives used to calculate length of namec
 881+ 734B 46 49 4C 4C >                db      "FILL"
 881+ 734F             >len_NFA         defl    $ - temp_NFA
 881+ 734F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 881+ 734B             >
 881+ 734B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 881+ 734C 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 881+ 7350             >                org     $-1                 // alter last byte of Name just above to set
 881+ 734F CC          >                db      {b $} | END_BIT     // msb as name end
 881+ 7350             >
 881+ 7350 2C 73       >                dw      last_NFA            // Link to previous definition Name
 881+ 7352             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 881+ 7352 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 881+ 7352 ~           >
 881+ 7352 ~           >
 881+ 7352             >                endif           ; ok        // for other definitions it "points" the correct handler
 881+ 7352             >                // Use of "; ok" to suppress "warning[fwdref]"
 881+ 7352             >
 881+ 7352             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 882+ 7352 D9                           exx
 883+ 7353 D1                           pop     de                  // de has character
 884+ 7354 C1                           pop     bc                  // bc has counter
 885+ 7355 E1                           pop     hl                  // hl has address, save Instruction Pointer
 886+ 7356              Fill_Loop:
 887+ 7356 78                               ld      a, b
 888+ 7357 B1                               or      c
 889+ 7358 28 05                        jr      z, Fill_While_End
 890+ 735A 73                               ld      (hl), e
 891+ 735B 0B                               dec     bc
 892+ 735C 23                               inc     hl
 893+ 735D 18 F7                        jr      Fill_Loop
 894+ 735F              Fill_While_End:
 895+ 735F D9                           exx
 896+ 7360                              next
 896+ 7360 DD E9       >                jp      (ix)
 897+ 7362
 898+ 7362              //  ______________________________________________________________________
 899+ 7362              //
 900+ 7362              // erase        a n --
 901+ 7362              // If n > 0, fills n locations starting from address a with 'nul' characters.
 902+ 7362                              Colon_Def ERASE, "ERASE", is_normal
 902+ 7362             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 902+ 7362             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 902+ 7362             >
 902+ 7362             >                // dummy db directives used to calculate length of namec
 902+ 7362 45 52 41 53 >                db      "ERASE"
 902+ 7366 45          >
 902+ 7367             >len_NFA         defl    $ - temp_NFA
 902+ 7367             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 902+ 7362             >
 902+ 7362 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 902+ 7363 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 902+ 7367 45          >
 902+ 7368             >                org     $-1                 // alter last byte of Name just above to set
 902+ 7367 C5          >                db      {b $} | END_BIT     // msb as name end
 902+ 7368             >
 902+ 7368 4B 73       >                dw      last_NFA            // Link to previous definition Name
 902+ 736A             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 902+ 736A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 902+ 736D             >
 902+ 736D             >
 902+ 736D             >                endif           ; ok        // for other definitions it "points" the correct handler
 902+ 736D             >                // Use of "; ok" to suppress "warning[fwdref]"
 902+ 736D             >
 902+ 736D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 903+ 736D 2A 6C 52 73                  dw      ZERO, FILL              // 0 fill
 904+ 7371 F7 68                        dw      EXIT                    // ;
 905+ 7373
 906+ 7373              //  ______________________________________________________________________
 907+ 7373              //
 908+ 7373              // blanks       a n --
 909+ 7373              // If n > 0, fills n locations starting from address a with 'nul' characters.
 910+ 7373                              Colon_Def BLANKS, "BLANKS", is_normal
 910+ 7373             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 910+ 7373             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 910+ 7373             >
 910+ 7373             >                // dummy db directives used to calculate length of namec
 910+ 7373 42 4C 41 4E >                db      "BLANKS"
 910+ 7377 4B 53       >
 910+ 7379             >len_NFA         defl    $ - temp_NFA
 910+ 7379             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 910+ 7373             >
 910+ 7373 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 910+ 7374 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 910+ 7378 4B 53       >
 910+ 737A             >                org     $-1                 // alter last byte of Name just above to set
 910+ 7379 D3          >                db      {b $} | END_BIT     // msb as name end
 910+ 737A             >
 910+ 737A 62 73       >                dw      last_NFA            // Link to previous definition Name
 910+ 737C             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 910+ 737C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 910+ 737F             >
 910+ 737F             >
 910+ 737F             >                endif           ; ok        // for other definitions it "points" the correct handler
 910+ 737F             >                // Use of "; ok" to suppress "warning[fwdref]"
 910+ 737F             >
 910+ 737F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 911+ 737F 59 6C 52 73                  dw      BL, FILL                // bl fill
 912+ 7383 F7 68                        dw      EXIT                    // ;
 913+ 7385
 914+ 7385              //  ______________________________________________________________________
 915+ 7385              //
 916+ 7385              // hold         c --
 917+ 7385              // Used between <# and #> to insert a character c in numeric formatting.
 918+ 7385                              Colon_Def HOLD, "HOLD", is_normal
 918+ 7385             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 918+ 7385             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 918+ 7385             >
 918+ 7385             >                // dummy db directives used to calculate length of namec
 918+ 7385 48 4F 4C 44 >                db      "HOLD"
 918+ 7389             >len_NFA         defl    $ - temp_NFA
 918+ 7389             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 918+ 7385             >
 918+ 7385 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 918+ 7386 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 918+ 738A             >                org     $-1                 // alter last byte of Name just above to set
 918+ 7389 C4          >                db      {b $} | END_BIT     // msb as name end
 918+ 738A             >
 918+ 738A 73 73       >                dw      last_NFA            // Link to previous definition Name
 918+ 738C             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 918+ 738C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 918+ 738F             >
 918+ 738F             >
 918+ 738F             >                endif           ; ok        // for other definitions it "points" the correct handler
 918+ 738F             >                // Use of "; ok" to suppress "warning[fwdref]"
 918+ 738F             >
 918+ 738F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 919+ 738F 4F 6C                        dw      NEG_ONE                 // -1
 920+ 7391 CD 6D BC 6A                  dw      HLD, PLUSSTORE          // hld +!
 921+ 7395 CD 6D DB 6A                  dw      HLD, FETCH, CSTORE      // hld @ c!
 921+ 7399 FE 6A
 922+ 739B F7 68                        dw      EXIT                    // ;
 923+ 739D
 924+ 739D              //  ______________________________________________________________________
 925+ 739D              //
 926+ 739D              // pad         -- a
 927+ 739D              // leaves the buffer text address. This is at a fixed distance over HERE.
 928+ 739D                              Colon_Def PAD, "PAD", is_normal
 928+ 739D             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 928+ 739D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 928+ 739D             >
 928+ 739D             >                // dummy db directives used to calculate length of namec
 928+ 739D 50 41 44    >                db      "PAD"
 928+ 73A0             >len_NFA         defl    $ - temp_NFA
 928+ 73A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 928+ 739D             >
 928+ 739D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 928+ 739E 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 928+ 73A1             >                org     $-1                 // alter last byte of Name just above to set
 928+ 73A0 C4          >                db      {b $} | END_BIT     // msb as name end
 928+ 73A1             >
 928+ 73A1 85 73       >                dw      last_NFA            // Link to previous definition Name
 928+ 73A3             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 928+ 73A3 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 928+ 73A6             >
 928+ 73A6             >
 928+ 73A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 928+ 73A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 928+ 73A6             >
 928+ 73A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 929+ 73A6 34 6E                        dw      HERE                    // here
 930+ 73A8 A5 63 44 00                  dw      LIT, 68                 // 68
 931+ 73AC 92 69                        dw      PLUS                    // +
 932+ 73AE F7 68                        dw      EXIT                    // ;
 933+ 73B0
 934+ 73B0              //  ______________________________________________________________________
 935+ 73B0              //
 936+ 73B0              // word         c -- a
 937+ 73B0              // reads characters from input streams until it encouners a c delimiter.
 938+ 73B0              // Stores that packet so it starts from HERE
 939+ 73B0              // WORD leaves a counter as first byte and ends the packet with two spaces.
 940+ 73B0              // Other occurrences of c are ignored.
 941+ 73B0              // If BLK is zero, text is taken from terminal buffer TIB.
 942+ 73B0              // Otherwise text is taken from the disk-block given by BLK.
 943+ 73B0              // "in" variable is incremented of the number of character read.
 944+ 73B0              // The number of characters read is given by ENCLOSE.
 945+ 73B0                              Colon_Def WORD, "WORD", is_normal
 945+ 73B0             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 945+ 73B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 945+ 73B0             >
 945+ 73B0             >                // dummy db directives used to calculate length of namec
 945+ 73B0 57 4F 52 44 >                db      "WORD"
 945+ 73B4             >len_NFA         defl    $ - temp_NFA
 945+ 73B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 945+ 73B0             >
 945+ 73B0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 945+ 73B1 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 945+ 73B5             >                org     $-1                 // alter last byte of Name just above to set
 945+ 73B4 C4          >                db      {b $} | END_BIT     // msb as name end
 945+ 73B5             >
 945+ 73B5 9D 73       >                dw      last_NFA            // Link to previous definition Name
 945+ 73B7             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 945+ 73B7 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 945+ 73BA             >
 945+ 73BA             >
 945+ 73BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 945+ 73BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 945+ 73BA             >
 945+ 73BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 946+ 73BA 3E 6D DB 6A                  dw      BLK, FETCH              // blk @
 947+ 73BE                                                              // if
 948+ 73BE D8 63                        dw      ZBRANCH
 949+ 73C0 0C 00                        dw      Word_Else - $
 950+ 73C2 3E 6D DB 6A                  dw          BLK, FETCH          //      blk @
 951+ 73C6 93 7D                        dw          BLOCK               //      block ( forward )
 952+ 73C8                                                              // else
 953+ 73C8 C3 63                        dw      BRANCH
 954+ 73CA 06 00                        dw      Word_Endif - $
 955+ 73CC              Word_Else:
 956+ 73CC C8 6C DB 6A                  dw         TIB, FETCH           //      tib @
 957+ 73D0              Word_Endif:                                     // endif
 958+ 73D0 48 6D DB 6A                  dw      TO_IN, FETCH, PLUS      // >in @ +
 958+ 73D4 92 69
 959+ 73D6 4F 6A 46 65                  dw      SWAP, ENCLOSE           // swap enclose
 960+ 73DA 34 6E A5 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 960+ 73DE 22 00 7C 73
 961+ 73E2 48 6D BC 6A                  dw      TO_IN, PLUSSTORE        // >in @ +
 962+ 73E6 1F 6A 89 6E                  dw      OVER, SUBTRACT, TO_R    // over - >r
 962+ 73EA 21 69
 963+ 73EC 45 69 34 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 963+ 73F0 FE 6A
 964+ 73F2 92 69                        dw      PLUS                    // +
 965+ 73F4 34 6E AF 69                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 965+ 73F8 33 69
 966+ 73FA FD 67                        dw      CMOVE                   // cmove
 967+ 73FC 34 6E                        dw      HERE                    // here
 968+ 73FE F7 68                        dw      EXIT                    // ;
 969+ 7400
 970+ 7400              //  ______________________________________________________________________
 971+ 7400              //
 972+ 7400              // (.")         --
 973+ 7400              // Direct procedure compiled by ." and  .(  It executes TYPE.
 974+ 7400                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 974+ 7400             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 974+ 7400             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 974+ 7400             >
 974+ 7400             >                // dummy db directives used to calculate length of namec
 974+ 7400 28 2E 22 29 >                db      '(.")'
 974+ 7404             >len_NFA         defl    $ - temp_NFA
 974+ 7404             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 974+ 7400             >
 974+ 7400 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 974+ 7401 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 974+ 7405             >                org     $-1                 // alter last byte of Name just above to set
 974+ 7404 A9          >                db      {b $} | END_BIT     // msb as name end
 974+ 7405             >
 974+ 7405 B0 73       >                dw      last_NFA            // Link to previous definition Name
 974+ 7407             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 974+ 7407 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 974+ 740A             >
 974+ 740A             >
 974+ 740A             >                endif           ; ok        // for other definitions it "points" the correct handler
 974+ 740A             >                // Use of "; ok" to suppress "warning[fwdref]"
 974+ 740A             >
 974+ 740A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 975+ 740A 45 69 C3 71                  dw      R_OP, COUNT             // r count
 976+ 740E 5A 6A AF 69                  dw      DUP, ONE_PLUS           // dup 1+
 977+ 7412 33 69 92 69                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 977+ 7416 21 69
 978+ 7418 EB 71                        dw      TYPE                    // type
 979+ 741A F7 68                        dw      EXIT                    // ;
 980+ 741C
 981+ 741C              //  ______________________________________________________________________
 982+ 741C              //
 983+ 741C              // char         -- c
 984+ 741C              // get first character from next input word
 985+ 741C                              Colon_Def CHAR,  "CHAR", is_normal
 985+ 741C             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 985+ 741C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 985+ 741C             >
 985+ 741C             >                // dummy db directives used to calculate length of namec
 985+ 741C 43 48 41 52 >                db      "CHAR"
 985+ 7420             >len_NFA         defl    $ - temp_NFA
 985+ 7420             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 985+ 741C             >
 985+ 741C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 985+ 741D 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 985+ 7421             >                org     $-1                 // alter last byte of Name just above to set
 985+ 7420 D2          >                db      {b $} | END_BIT     // msb as name end
 985+ 7421             >
 985+ 7421 00 74       >                dw      last_NFA            // Link to previous definition Name
 985+ 7423             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 985+ 7423 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 985+ 7426             >
 985+ 7426             >
 985+ 7426             >                endif           ; ok        // for other definitions it "points" the correct handler
 985+ 7426             >                // Use of "; ok" to suppress "warning[fwdref]"
 985+ 7426             >
 985+ 7426             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 986+ 7426 59 6C B7 73                  dw      BL, WORD                // bl word
 987+ 742A AF 69 F2 6A                  dw      ONE_PLUS, CFETCH        // 1+ c@
 988+ 742E F7 68                        dw      EXIT                    // ;
 989+ 7430
 990+ 7430              //  ______________________________________________________________________
 991+ 7430              //
 992+ 7430              // ,"           --
 993+ 7430              // compiles a string terminated by " as a counted string from next input stream
 994+ 7430                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 994+ 7430             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 994+ 7430             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 994+ 7430             >
 994+ 7430             >                // dummy db directives used to calculate length of namec
 994+ 7430 2C 22       >                db      ',"'
 994+ 7432             >len_NFA         defl    $ - temp_NFA
 994+ 7432             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 994+ 7430             >
 994+ 7430 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 994+ 7431 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 994+ 7433             >                org     $-1                 // alter last byte of Name just above to set
 994+ 7432 A2          >                db      {b $} | END_BIT     // msb as name end
 994+ 7433             >
 994+ 7433 1C 74       >                dw      last_NFA            // Link to previous definition Name
 994+ 7435             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 994+ 7435 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 994+ 7438             >
 994+ 7438             >
 994+ 7438             >                endif           ; ok        // for other definitions it "points" the correct handler
 994+ 7438             >                // Use of "; ok" to suppress "warning[fwdref]"
 994+ 7438             >
 994+ 7438             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 995+ 7438 A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 996+ 743C B7 73                        dw      WORD                    // word
 997+ 743E F2 6A AF 69                  dw      CFETCH, ONE_PLUS        // c@ 1+
 998+ 7442 45 6E                        dw      ALLOT                   // allot
 999+ 7444 2A 6C 64 6E                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1000+ 7448 F7 68                        dw      EXIT
1001+ 744A
1002+ 744A              //  ______________________________________________________________________
1003+ 744A              //
1004+ 744A              // .c           c --
1005+ 744A              // intermediate general purpose string builder, used by ." and .(
1006+ 744A                              Colon_Def DOT_C,  ".C", is_immediate
1006+ 744A             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1006+ 744A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1006+ 744A             >
1006+ 744A             >                // dummy db directives used to calculate length of namec
1006+ 744A 2E 43       >                db      ".C"
1006+ 744C             >len_NFA         defl    $ - temp_NFA
1006+ 744C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1006+ 744A             >
1006+ 744A C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1006+ 744B 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1006+ 744D             >                org     $-1                 // alter last byte of Name just above to set
1006+ 744C C3          >                db      {b $} | END_BIT     // msb as name end
1006+ 744D             >
1006+ 744D 30 74       >                dw      last_NFA            // Link to previous definition Name
1006+ 744F             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1006+ 744F CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1006+ 7452             >
1006+ 7452             >
1006+ 7452             >                endif           ; ok        // for other definitions it "points" the correct handler
1006+ 7452             >                // Use of "; ok" to suppress "warning[fwdref]"
1006+ 7452             >
1006+ 7452             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1007+ 7452 91 6D DB 6A                  dw      STATE, FETCH            // state @
1008+ 7456                                                              // if
1009+ 7456 D8 63                        dw      ZBRANCH
1010+ 7458 12 00                        dw      Dot_C_Else - $
1011+ 745A A7 70 07 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1012+ 745E B7 73 F2 6A                  dw          WORD, CFETCH        //      word c@
1013+ 7462 AF 69 45 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1014+ 7466                                                              // else
1015+ 7466 C3 63                        dw      BRANCH
1016+ 7468 08 00                        dw      Dot_C_Endif - $
1017+ 746A              Dot_C_Else:
1018+ 746A B7 73 C3 71                  dw          WORD, COUNT, TYPE   //      word count type
1018+ 746E EB 71
1019+ 7470              Dot_C_Endif:                                    // endif
1020+ 7470 F7 68                        dw      EXIT                    ;
1021+ 7472
1022+ 7472              //  ______________________________________________________________________
1023+ 7472              //
1024+ 7472              // ."           c --
1025+ 7472                              Colon_Def DOT_QUOTE,  '."', is_immediate
1025+ 7472             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1025+ 7472             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1025+ 7472             >
1025+ 7472             >                // dummy db directives used to calculate length of namec
1025+ 7472 2E 22       >                db      '."'
1025+ 7474             >len_NFA         defl    $ - temp_NFA
1025+ 7474             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1025+ 7472             >
1025+ 7472 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1025+ 7473 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1025+ 7475             >                org     $-1                 // alter last byte of Name just above to set
1025+ 7474 A2          >                db      {b $} | END_BIT     // msb as name end
1025+ 7475             >
1025+ 7475 4A 74       >                dw      last_NFA            // Link to previous definition Name
1025+ 7477             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1025+ 7477 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1025+ 747A             >
1025+ 747A             >
1025+ 747A             >                endif           ; ok        // for other definitions it "points" the correct handler
1025+ 747A             >                // Use of "; ok" to suppress "warning[fwdref]"
1025+ 747A             >
1025+ 747A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1026+ 747A A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1027+ 747E 4F 74                        dw      DOT_C                   // [compile] .c
1028+ 7480 F7 68                        dw      EXIT                    // ; immediate
1029+ 7482
1030+ 7482              //  ______________________________________________________________________
1031+ 7482              //
1032+ 7482              // .(           c --
1033+ 7482                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1033+ 7482             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1033+ 7482             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1033+ 7482             >
1033+ 7482             >                // dummy db directives used to calculate length of namec
1033+ 7482 2E 28       >                db      ".("
1033+ 7484             >len_NFA         defl    $ - temp_NFA
1033+ 7484             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1033+ 7482             >
1033+ 7482 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1033+ 7483 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1033+ 7485             >                org     $-1                 // alter last byte of Name just above to set
1033+ 7484 A8          >                db      {b $} | END_BIT     // msb as name end
1033+ 7485             >
1033+ 7485 72 74       >                dw      last_NFA            // Link to previous definition Name
1033+ 7487             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1033+ 7487 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1033+ 748A             >
1033+ 748A             >
1033+ 748A             >                endif           ; ok        // for other definitions it "points" the correct handler
1033+ 748A             >                // Use of "; ok" to suppress "warning[fwdref]"
1033+ 748A             >
1033+ 748A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1034+ 748A A5 63 29 00                  dw      LIT, ")"                // [char] )
1035+ 748E 4F 74                        dw      DOT_C                   // [compile] .c
1036+ 7490 F7 68                        dw      EXIT                    // ; immediate
1037+ 7492
1038+ 7492              //  ______________________________________________________________________
1039+ 7492              //
1040+ 7492              // (sgn)        a -- a f
1041+ 7492              // determines if char in addr a is a sign (+ or -), and in that case increments
1042+ 7492              // a flag. Returns f as the sign, true for negative, false for positive.
1043+ 7492              // called by NUMBER and (EXP)
1044+ 7492                              Colon_Def CSGN,  "(SGN)", is_normal
1044+ 7492             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1044+ 7492             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1044+ 7492             >
1044+ 7492             >                // dummy db directives used to calculate length of namec
1044+ 7492 28 53 47 4E >                db      "(SGN)"
1044+ 7496 29          >
1044+ 7497             >len_NFA         defl    $ - temp_NFA
1044+ 7497             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1044+ 7492             >
1044+ 7492 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1044+ 7493 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1044+ 7497 29          >
1044+ 7498             >                org     $-1                 // alter last byte of Name just above to set
1044+ 7497 A9          >                db      {b $} | END_BIT     // msb as name end
1044+ 7498             >
1044+ 7498 82 74       >                dw      last_NFA            // Link to previous definition Name
1044+ 749A             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1044+ 749A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1044+ 749D             >
1044+ 749D             >
1044+ 749D             >                endif           ; ok        // for other definitions it "points" the correct handler
1044+ 749D             >                // Use of "; ok" to suppress "warning[fwdref]"
1044+ 749D             >
1044+ 749D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1045+ 749D 5A 6A AF 69                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1045+ 74A1 F2 6A
1046+ 74A3 5A 6A A5 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1046+ 74A7 2D 00 95 6E
1047+ 74AB                                                              // if
1048+ 74AB D8 63                        dw      ZBRANCH
1049+ 74AD 12 00                        dw      CSgn_Else_0 - $
1050+ 74AF 2D 6A                        dw          DROP                //      drop
1051+ 74B1 AF 69                        dw          ONE_PLUS            //      1+
1052+ 74B3 33 6C A6 6D                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1052+ 74B7 BC 6A
1053+ 74B9 33 6C                        dw          ONE                 //      1
1054+ 74BB                                                              // else
1055+ 74BB C3 63                        dw      BRANCH
1056+ 74BD 16 00                        dw      CSgn_Endif_0 - $
1057+ 74BF              CSgn_Else_0:
1058+ 74BF A5 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1058+ 74C3 95 6E
1059+ 74C5                                                              //      if
1060+ 74C5 D8 63                        dw          ZBRANCH
1061+ 74C7 0A 00                        dw          CSgn_Endif_1 - $
1062+ 74C9 AF 69                        dw              ONE_PLUS        //          1+
1063+ 74CB 33 6C A6 6D                  dw              ONE, DPL        //          1 dpl
1064+ 74CF BC 6A                        dw              PLUSSTORE       //          +!
1065+ 74D1              CSgn_Endif_1                                    //      endif
1066+ 74D1 2A 6C                        dw          ZERO                //      0
1067+ 74D3              CSgn_Endif_0:                                   // endif
1068+ 74D3 F7 68                        dw      EXIT
1069+ 74D5
1070+ 74D5              //  ______________________________________________________________________
1071+ 74D5              //
1072+ 74D5              // (number)     d a -- d1 a1
1073+ 74D5              // using the current BASE parse characters stored in address a
1074+ 74D5              // accumulating a double precision integer d
1075+ 74D5              // the process stops at the first not-convertible character
1076+ 74D5              // A double-number is kept in CPU registers as HLDE.
1077+ 74D5              // On the stack a double number is treated as two single numbers
1078+ 74D5              // where HL is on the top of the stack and DE is the second from top,
1079+ 74D5              // so in the stack memory it appears as LHED.
1080+ 74D5              // Instead, in 2VARIABLE a double number is stored as EDLH.
1081+ 74D5                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1081+ 74D5             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1081+ 74D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1081+ 74D5             >
1081+ 74D5             >                // dummy db directives used to calculate length of namec
1081+ 74D5 28 4E 55 4D >                db      "(NUMBER)"
1081+ 74D9 42 45 52 29 >
1081+ 74DD             >len_NFA         defl    $ - temp_NFA
1081+ 74DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1081+ 74D5             >
1081+ 74D5 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1081+ 74D6 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1081+ 74DA 42 45 52 29 >
1081+ 74DE             >                org     $-1                 // alter last byte of Name just above to set
1081+ 74DD A9          >                db      {b $} | END_BIT     // msb as name end
1081+ 74DE             >
1081+ 74DE 92 74       >                dw      last_NFA            // Link to previous definition Name
1081+ 74E0             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1081+ 74E0 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1081+ 74E3             >
1081+ 74E3             >
1081+ 74E3             >                endif           ; ok        // for other definitions it "points" the correct handler
1081+ 74E3             >                // Use of "; ok" to suppress "warning[fwdref]"
1081+ 74E3             >
1081+ 74E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1082+ 74E3                                                              // begin
1083+ 74E3              CNumber_Begin:
1084+ 74E3 AF 69                        dw          ONE_PLUS            //      1+
1085+ 74E5 5A 6A 21 69                  dw          DUP, TO_R           //      dup >r
1086+ 74E9 F2 6A                        dw          CFETCH              //      @
1087+ 74EB 9C 6D DB 6A                  dw          BASE, FETCH         //      base @
1088+ 74EF 83 64                        dw          DIGIT               //      digit
1089+ 74F1                                                              // while
1090+ 74F1 D8 63                        dw      ZBRANCH
1091+ 74F3 2C 00                        dw      CNumber_While_end - $
1092+ 74F5 4F 6A                        dw          SWAP                //      swap
1093+ 74F7 9C 6D DB 6A                  dw          BASE, FETCH         //      base @
1094+ 74FB 2C 68                        dw          UM_MUL              //      um*
1095+ 74FD 2D 6A 65 6A                  dw          DROP, ROT           //      drop rot
1096+ 7501 9C 6D DB 6A                  dw          BASE, FETCH         //      base @
1097+ 7505 2C 68                        dw          UM_MUL              //      um*
1098+ 7507 9D 69                        dw          DPLUS               //      d+
1099+ 7509 A6 6D DB 6A                  dw          DPL, FETCH          //      dpl @
1100+ 750D AF 69                        dw          ONE_PLUS            //      1+
1101+ 750F                                                              //      if
1102+ 750F D8 63                        dw          ZBRANCH
1103+ 7511 08 00                        dw          CNumber_Endif - $
1104+ 7513 33 6C A6 6D                  dw              ONE, DPL        //          1 dpl
1105+ 7517 BC 6A                        dw              PLUSSTORE       //          +!
1106+ 7519              CNumber_Endif:                                  //      endif
1107+ 7519 33 69                        dw             R_TO             //      r>  ( balance rp )
1108+ 751B C3 63                        dw      BRANCH
1109+ 751D C6 FF                        dw      CNumber_Begin - $
1110+ 751F              CNumber_While_end:                              // repeat
1111+ 751F 33 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1112+ 7521 F7 68                        dw      EXIT                    // ;
1113+ 7523
1114+ 7523              //  ______________________________________________________________________
1115+ 7523              //
1116+ 7523              // number       a -- d
1117+ 7523                              Colon_Def NUMBER,  "NUMBER", is_normal
1117+ 7523             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1117+ 7523             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1117+ 7523             >
1117+ 7523             >                // dummy db directives used to calculate length of namec
1117+ 7523 4E 55 4D 42 >                db      "NUMBER"
1117+ 7527 45 52       >
1117+ 7529             >len_NFA         defl    $ - temp_NFA
1117+ 7529             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1117+ 7523             >
1117+ 7523 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1117+ 7524 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1117+ 7528 45 52       >
1117+ 752A             >                org     $-1                 // alter last byte of Name just above to set
1117+ 7529 D2          >                db      {b $} | END_BIT     // msb as name end
1117+ 752A             >
1117+ 752A D5 74       >                dw      last_NFA            // Link to previous definition Name
1117+ 752C             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1117+ 752C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1117+ 752F             >
1117+ 752F             >
1117+ 752F             >                endif           ; ok        // for other definitions it "points" the correct handler
1117+ 752F             >                // Use of "; ok" to suppress "warning[fwdref]"
1117+ 752F             >
1117+ 752F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1118+ 752F 2A 6C 2A 6C                  dw      ZERO, ZERO              // 0 0
1119+ 7533 65 6A                        dw      ROT                     // rot
1120+ 7535 9A 74 21 69                  dw      CSGN, TO_R              // (sgn) >r
1121+ 7539 4F 6C A6 6D                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1121+ 753D E6 6A
1122+ 753F E0 74                        dw      CNUMBER                 // (number)
1123+ 7541 5A 6A F2 6A                  dw      DUP, CFETCH             // dup c@
1124+ 7545 A5 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1124+ 7549 95 6E
1125+ 754B                                                              // if
1126+ 754B D8 63                        dw      ZBRANCH
1127+ 754D 0A 00                        dw      Number_Endif_1 - $
1128+ 754F 2A 6C A6 6D                  dw          ZERO, DPL, STORE    //      0 dpl !
1128+ 7553 E6 6A
1129+ 7555 E0 74                        dw          CNUMBER             //      (number)
1130+ 7557              Number_Endif_1:                                 // endif
1131+ 7557 F2 6A 59 6C                  dw      CFETCH, BL              // c@ bl
1132+ 755B 89 6E 2A 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1132+ 755F 0E 70
1133+ 7561 33 69                        dw      R_TO                    // r>
1134+ 7563                                                              // if
1135+ 7563 D8 63                        dw      ZBRANCH
1136+ 7565 04 00                        dw      Number_Endif_2 - $
1137+ 7567 07 6A                        dw          DMINUS              //      dminus
1138+ 7569              Number_Endif_2:                                 // endif
1139+ 7569 F7 68                        dw      EXIT                    // ;
1140+ 756B
1141+ 756B              //  ______________________________________________________________________
1142+ 756B              //
1143+ 756B              // -find        a -- d
1144+ 756B                              Colon_Def LFIND,  "-FIND", is_normal
1144+ 756B             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1144+ 756B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1144+ 756B             >
1144+ 756B             >                // dummy db directives used to calculate length of namec
1144+ 756B 2D 46 49 4E >                db      "-FIND"
1144+ 756F 44          >
1144+ 7570             >len_NFA         defl    $ - temp_NFA
1144+ 7570             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1144+ 756B             >
1144+ 756B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1144+ 756C 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1144+ 7570 44          >
1144+ 7571             >                org     $-1                 // alter last byte of Name just above to set
1144+ 7570 C4          >                db      {b $} | END_BIT     // msb as name end
1144+ 7571             >
1144+ 7571 23 75       >                dw      last_NFA            // Link to previous definition Name
1144+ 7573             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1144+ 7573 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1144+ 7576             >
1144+ 7576             >
1144+ 7576             >                endif           ; ok        // for other definitions it "points" the correct handler
1144+ 7576             >                // Use of "; ok" to suppress "warning[fwdref]"
1144+ 7576             >
1144+ 7576             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1145+ 7576 59 6C B7 73                  dw      BL, WORD                // bl word
1146+ 757A 77 6D DB 6A                  dw      CONTEXT, FETCH, FETCH   // context @ @
1146+ 757E DB 6A
1147+ 7580 F0 64                        dw      C_FIND                  // (find)
1148+ 7582 0D 6F                        dw      QDUP                    // ?dup
1149+ 7584 54 69                        dw      ZEQUAL                  // 0=
1150+ 7586                                                              // if
1151+ 7586 D8 63                        dw      ZBRANCH
1152+ 7588 08 00                        dw      LFind_Endif - $
1153+ 758A 34 6E                        dw          HERE                //      here
1154+ 758C 7C 6F                        dw          LATEST              //      latest
1155+ 758E F0 64                        dw          C_FIND              //      (find)
1156+ 7590              LFind_Endif:                                    // endif
1157+ 7590 F7 68                        dw      EXIT                    // ;
1158+ 7592
1159+ 7592              //  ______________________________________________________________________
1160+ 7592              //
1161+ 7592              // (abort)      --
1162+ 7592                              Colon_Def CABORT,  "(ABORT)", is_normal
1162+ 7592             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1162+ 7592             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1162+ 7592             >
1162+ 7592             >                // dummy db directives used to calculate length of namec
1162+ 7592 28 41 42 4F >                db      "(ABORT)"
1162+ 7596 52 54 29    >
1162+ 7599             >len_NFA         defl    $ - temp_NFA
1162+ 7599             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1162+ 7592             >
1162+ 7592 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1162+ 7593 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1162+ 7597 52 54 29    >
1162+ 759A             >                org     $-1                 // alter last byte of Name just above to set
1162+ 7599 A9          >                db      {b $} | END_BIT     // msb as name end
1162+ 759A             >
1162+ 759A 6B 75       >                dw      last_NFA            // Link to previous definition Name
1162+ 759C             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1162+ 759C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1162+ 759F             >
1162+ 759F             >
1162+ 759F             >                endif           ; ok        // for other definitions it "points" the correct handler
1162+ 759F             >                // Use of "; ok" to suppress "warning[fwdref]"
1162+ 759F             >
1162+ 759F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1163+ 759F 78 78                        dw      ABORT                   // abort
1164+ 75A1 F7 68                        dw      EXIT                    // ;
1165+ 75A3
1166+ 75A3              //  ______________________________________________________________________
1167+ 75A3              //
1168+ 75A3              // error        n --
1169+ 75A3              // raise an error
1170+ 75A3              // if WARNING is 0, prints "MSG#n".
1171+ 75A3              // if WARNING is 1, prints line n of screen 4.
1172+ 75A3              // if WARNING is -1 does (ABORT) that normally does ABORT
1173+ 75A3              // value can be negative or beyond block 4.
1174+ 75A3                              Colon_Def ERROR,  "ERROR", is_normal
1174+ 75A3             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1174+ 75A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1174+ 75A3             >
1174+ 75A3             >                // dummy db directives used to calculate length of namec
1174+ 75A3 45 52 52 4F >                db      "ERROR"
1174+ 75A7 52          >
1174+ 75A8             >len_NFA         defl    $ - temp_NFA
1174+ 75A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1174+ 75A3             >
1174+ 75A3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1174+ 75A4 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1174+ 75A8 52          >
1174+ 75A9             >                org     $-1                 // alter last byte of Name just above to set
1174+ 75A8 D2          >                db      {b $} | END_BIT     // msb as name end
1174+ 75A9             >
1174+ 75A9 92 75       >                dw      last_NFA            // Link to previous definition Name
1174+ 75AB             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1174+ 75AB CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1174+ 75AE             >
1174+ 75AE             >
1174+ 75AE             >                endif           ; ok        // for other definitions it "points" the correct handler
1174+ 75AE             >                // Use of "; ok" to suppress "warning[fwdref]"
1174+ 75AE             >
1174+ 75AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1175+ 75AE E2 6C DB 6A                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1175+ 75B2 6E 69
1176+ 75B4                                                              // if
1177+ 75B4 D8 63                        dw      ZBRANCH
1178+ 75B6 04 00                        dw      Error_Endif_1 - $
1179+ 75B8 9C 75                        dw          CABORT              //      (abort)
1180+ 75BA              Error_Endif_1:                                  // endif
1181+ 75BA 34 6E C3 71                  dw      HERE, COUNT, TYPE       // here count type
1181+ 75BE EB 71
1182+ 75C0 07 74                        dw      C_DOT_QUOTE             // .( ? )
1183+ 75C2 02 3F 20                     db      2, "? "
1184+ 75C5 BB 7A                        dw      MESSAGE                 // message  ( forward )
1185+ 75C7 B5 6C DB 6A                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1185+ 75CB D4 68
1186+ 75CD 3E 6D DB 6A                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1186+ 75D1 0D 6F
1187+ 75D3                                                              // if
1188+ 75D3 D8 63                        dw      ZBRANCH
1189+ 75D5 08 00                        dw      Error_Endif_2 - $
1190+ 75D7 48 6D DB 6A                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1190+ 75DB 4F 6A
1191+ 75DD              Error_Endif_2:                                  // endif
1192+ 75DD 36 78                        dw      QUIT                    // quit ( forward )
1193+ 75DF F7 68                        dw      EXIT                    // ;
1194+ 75E1              //  ______________________________________________________________________
1195+ 75E1              //
1196+ 75E1              // id.          nfa --
1197+ 75E1                              Colon_Def ID_DOT,  "ID.", is_normal
1197+ 75E1             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1197+ 75E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1197+ 75E1             >
1197+ 75E1             >                // dummy db directives used to calculate length of namec
1197+ 75E1 49 44 2E    >                db      "ID."
1197+ 75E4             >len_NFA         defl    $ - temp_NFA
1197+ 75E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1197+ 75E1             >
1197+ 75E1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1197+ 75E2 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1197+ 75E5             >                org     $-1                 // alter last byte of Name just above to set
1197+ 75E4 AE          >                db      {b $} | END_BIT     // msb as name end
1197+ 75E5             >
1197+ 75E5 A3 75       >                dw      last_NFA            // Link to previous definition Name
1197+ 75E7             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1197+ 75E7 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1197+ 75EA             >
1197+ 75EA             >
1197+ 75EA             >                endif           ; ok        // for other definitions it "points" the correct handler
1197+ 75EA             >                // Use of "; ok" to suppress "warning[fwdref]"
1197+ 75EA             >
1197+ 75EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1198+ 75EA A3 73 A5 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1198+ 75EE 20 00 A5 63
1198+ 75F2 60 00
1199+ 75F4 52 73                        dw      FILL                    // fill
1200+ 75F6 5A 6A C2 6F                  dw      DUP, PFA, LFA           // dup pfa lfa
1200+ 75FA 8D 6F
1201+ 75FC 1F 6A 89 6E                  dw      OVER, SUBTRACT          // over -
1202+ 7600 A3 73 4F 6A                  dw      PAD, SWAP               // pad swap
1203+ 7604 FD 67                        dw      CMOVE                   // cmove
1204+ 7606 A3 73 C3 71                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1204+ 760A A5 63 1F 00
1205+ 760E 95 68                        dw      AND_OP                  // and  ( use only lower bits )
1206+ 7610 EB 71 44 6F                  dw      TYPE, SPACE             // type
1207+ 7614 F7 68                        dw      EXIT                    // ;
1208+ 7616
1209+ 7616              //  ______________________________________________________________________
1210+ 7616              //
1211+ 7616              // code         -- cccc
1212+ 7616                              Colon_Def CODE,  "CODE", is_normal
1212+ 7616             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1212+ 7616             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ 7616             >
1212+ 7616             >                // dummy db directives used to calculate length of namec
1212+ 7616 43 4F 44 45 >                db      "CODE"
1212+ 761A             >len_NFA         defl    $ - temp_NFA
1212+ 761A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ 7616             >
1212+ 7616 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ 7617 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1212+ 761B             >                org     $-1                 // alter last byte of Name just above to set
1212+ 761A C5          >                db      {b $} | END_BIT     // msb as name end
1212+ 761B             >
1212+ 761B E1 75       >                dw      last_NFA            // Link to previous definition Name
1212+ 761D             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 761D CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1212+ 7620             >
1212+ 7620             >
1212+ 7620             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 7620             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 7620             >
1212+ 7620             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 7620 73 75                        dw      LFIND                   // -find
1214+ 7622                                                              // if
1215+ 7622 D8 63                        dw      ZBRANCH
1216+ 7624 10 00                        dw      Code_Endif - $
1217+ 7626 2D 6A                        dw          DROP                //      drop
1218+ 7628 EA 6F E7 75                  dw          TO_NAME, ID_DOT     //      >name id.
1219+ 762C A5 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1219+ 7630 BB 7A
1220+ 7632 44 6F                        dw          SPACE               //      space
1221+ 7634              Code_Endif:                                     // endif
1222+ 7634 34 6E                        dw      HERE                    // here
1223+ 7636                                                              // ( ---- here begins NFA ---- )
1224+ 7636 5A 6A F2 6A                  dw      DUP, CFETCH             // dup c@
1225+ 763A D4 6C DB 6A                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1225+ 763E DE 6E
1226+ 7640 AF 69 45 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1227+ 7644 5A 6A                        dw      DUP                     // dup
1228+ 7646 A5 63                        dw      LIT
1229+ 7648 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1230+ 764A D0 6A                        dw      TOGGLE                  // toggle
1231+ 764C 34 6E B9 69                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1232+ 7650 A5 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1232+ 7654 D0 6A
1233+ 7656                                                              // ( ---- here is LFA ---- )
1234+ 7656 7C 6F 52 6E                  dw      LATEST, COMMA           // latest ,
1235+ 765A 85 6D DB 6A                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1235+ 765E E6 6A
1236+ 7660                                                              // ( ---- here is LFA ---- )
1237+ 7660              //              dw      HERE, CELL_PLUS, COMMA  // ( CFA is empty and PFA yet to exist )
1238+ 7660 F7 68                        dw      EXIT                    // ;
1239+ 7662
1240+ 7662              //  ______________________________________________________________________
1241+ 7662              //
1242+ 7662              // create       -- cccc     ( compile time )
1243+ 7662              //              -- a        ( run time )
1244+ 7662                              Colon_Def CREATE,  "CREATE", is_normal
1244+ 7662             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1244+ 7662             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1244+ 7662             >
1244+ 7662             >                // dummy db directives used to calculate length of namec
1244+ 7662 43 52 45 41 >                db      "CREATE"
1244+ 7666 54 45       >
1244+ 7668             >len_NFA         defl    $ - temp_NFA
1244+ 7668             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1244+ 7662             >
1244+ 7662 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1244+ 7663 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1244+ 7667 54 45       >
1244+ 7669             >                org     $-1                 // alter last byte of Name just above to set
1244+ 7668 C5          >                db      {b $} | END_BIT     // msb as name end
1244+ 7669             >
1244+ 7669 16 76       >                dw      last_NFA            // Link to previous definition Name
1244+ 766B             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1244+ 766B CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1244+ 766E             >
1244+ 766E             >
1244+ 766E             >                endif           ; ok        // for other definitions it "points" the correct handler
1244+ 766E             >                // Use of "; ok" to suppress "warning[fwdref]"
1244+ 766E             >
1244+ 766E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1245+ 766E 1D 76 F7 70                  dw      CODE, SMUDGE            // code smudge
1246+ 7672 A5 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1246+ 7676 64 6E
1247+ 7678 A5 63 09 6C                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1247+ 767C 52 6E
1248+ 767E 51 71                        dw      C_SEMICOLON_CODE
1249+ 7680                              // this routine is called from the call coded in CFA
1250+ 7680              Create_Ptr:
1251+ 7680
1252+ 7680
1253+ 7680
1254+ 7680                              next
1254+ 7680 DD E9       >                jp      (ix)
1255+ 7682
1256+ 7682              //  ______________________________________________________________________
1257+ 7682              //
1258+ 7682              // [compile]    -- cccc     ( compile time )
1259+ 7682                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1259+ 7682             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1259+ 7682             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1259+ 7682             >
1259+ 7682             >                // dummy db directives used to calculate length of namec
1259+ 7682 5B 43 4F 4D >                db      "[COMPILE]"
1259+ 7686 50 49 4C 45 >
1259+ 768A 5D          >
1259+ 768B             >len_NFA         defl    $ - temp_NFA
1259+ 768B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1259+ 7682             >
1259+ 7682 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1259+ 7683 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1259+ 7687 50 49 4C 45 >
1259+ 768B 5D          >
1259+ 768C             >                org     $-1                 // alter last byte of Name just above to set
1259+ 768B DD          >                db      {b $} | END_BIT     // msb as name end
1259+ 768C             >
1259+ 768C 62 76       >                dw      last_NFA            // Link to previous definition Name
1259+ 768E             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1259+ 768E CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1259+ 7691             >
1259+ 7691             >
1259+ 7691             >                endif           ; ok        // for other definitions it "points" the correct handler
1259+ 7691             >                // Use of "; ok" to suppress "warning[fwdref]"
1259+ 7691             >
1259+ 7691             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1260+ 7691 73 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1261+ 7693 54 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1262+ 7695 2A 6C 0E 70                  dw      ZERO, QERROR            // 0 ?error
1263+ 7699 2D 6A                        dw      DROP                    // drop       (  cfa  )
1264+ 769B 52 6E                        dw      COMMA                   // ,
1265+ 769D F7 68                        dw      EXIT                    // ; immediate
1266+ 769F
1267+ 769F              //  ______________________________________________________________________
1268+ 769F              //
1269+ 769F              // literal      n --      ( compile time )
1270+ 769F                              Colon_Def LITERAL,  "LITERAL", is_immediate
1270+ 769F             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1270+ 769F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1270+ 769F             >
1270+ 769F             >                // dummy db directives used to calculate length of namec
1270+ 769F 4C 49 54 45 >                db      "LITERAL"
1270+ 76A3 52 41 4C    >
1270+ 76A6             >len_NFA         defl    $ - temp_NFA
1270+ 76A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1270+ 769F             >
1270+ 769F C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1270+ 76A0 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1270+ 76A4 52 41 4C    >
1270+ 76A7             >                org     $-1                 // alter last byte of Name just above to set
1270+ 76A6 CC          >                db      {b $} | END_BIT     // msb as name end
1270+ 76A7             >
1270+ 76A7 82 76       >                dw      last_NFA            // Link to previous definition Name
1270+ 76A9             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1270+ 76A9 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1270+ 76AC             >
1270+ 76AC             >
1270+ 76AC             >                endif           ; ok        // for other definitions it "points" the correct handler
1270+ 76AC             >                // Use of "; ok" to suppress "warning[fwdref]"
1270+ 76AC             >
1270+ 76AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1271+ 76AC 91 6D DB 6A                  dw      STATE, FETCH            // state @
1272+ 76B0                                                              // if
1273+ 76B0 D8 63                        dw      ZBRANCH
1274+ 76B2 08 00                        dw      Literal_Endif - $
1275+ 76B4 A7 70 A5 63                  dw          COMPILE, LIT        //      compile lit
1276+ 76B8 52 6E                        dw          COMMA               //      ,
1277+ 76BA              Literal_Endif:                                  // endif
1278+ 76BA F7 68                        dw      EXIT                    // ; immediate
1279+ 76BC
1280+ 76BC              //  ______________________________________________________________________
1281+ 76BC              //
1282+ 76BC              // dliteral     n --      ( compile time )
1283+ 76BC                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1283+ 76BC             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1283+ 76BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1283+ 76BC             >
1283+ 76BC             >                // dummy db directives used to calculate length of namec
1283+ 76BC 44 4C 49 54 >                db      "DLITERAL"
1283+ 76C0 45 52 41 4C >
1283+ 76C4             >len_NFA         defl    $ - temp_NFA
1283+ 76C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1283+ 76BC             >
1283+ 76BC C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1283+ 76BD 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1283+ 76C1 45 52 41 4C >
1283+ 76C5             >                org     $-1                 // alter last byte of Name just above to set
1283+ 76C4 CC          >                db      {b $} | END_BIT     // msb as name end
1283+ 76C5             >
1283+ 76C5 9F 76       >                dw      last_NFA            // Link to previous definition Name
1283+ 76C7             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1283+ 76C7 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1283+ 76CA             >
1283+ 76CA             >
1283+ 76CA             >                endif           ; ok        // for other definitions it "points" the correct handler
1283+ 76CA             >                // Use of "; ok" to suppress "warning[fwdref]"
1283+ 76CA             >
1283+ 76CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1284+ 76CA 91 6D DB 6A                  dw      STATE, FETCH            // state @
1285+ 76CE                                                              // if
1286+ 76CE D8 63                        dw      ZBRANCH
1287+ 76D0 08 00                        dw      DLiteral_Endif - $
1288+ 76D2 4F 6A                        dw          SWAP                //      swap
1289+ 76D4 A9 76 A9 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1290+ 76D8              DLiteral_Endif:                                 // endif
1291+ 76D8 F7 68                        dw      EXIT                    // ; immediate
1292+ 76DA
1293+ 76DA              //  ______________________________________________________________________
1294+ 76DA              //
1295+ 76DA              // [char]       n --      ( compile time )
1296+ 76DA              // inside colon definition, gets first character from next input word
1297+ 76DA              // and compiles it as literal.
1298+ 76DA                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1298+ 76DA             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1298+ 76DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1298+ 76DA             >
1298+ 76DA             >                // dummy db directives used to calculate length of namec
1298+ 76DA 5B 43 48 41 >                db      "[CHAR]"
1298+ 76DE 52 5D       >
1298+ 76E0             >len_NFA         defl    $ - temp_NFA
1298+ 76E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1298+ 76DA             >
1298+ 76DA C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1298+ 76DB 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1298+ 76DF 52 5D       >
1298+ 76E1             >                org     $-1                 // alter last byte of Name just above to set
1298+ 76E0 DD          >                db      {b $} | END_BIT     // msb as name end
1298+ 76E1             >
1298+ 76E1 BC 76       >                dw      last_NFA            // Link to previous definition Name
1298+ 76E3             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1298+ 76E3 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1298+ 76E6             >
1298+ 76E6             >
1298+ 76E6             >                endif           ; ok        // for other definitions it "points" the correct handler
1298+ 76E6             >                // Use of "; ok" to suppress "warning[fwdref]"
1298+ 76E6             >
1298+ 76E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1299+ 76E6 23 74 A9 76                  dw      CHAR, LITERAL           // char [compile] literal
1300+ 76EA F7 68                        dw      EXIT                    // ; immediate
1301+ 76EC
1302+ 76EC              //  ______________________________________________________________________
1303+ 76EC              //
1304+ 76EC              // 0x00         n --      ( compile time )
1305+ 76EC                              Colon_Def NUL_WORD,  $00, is_immediate
1305+ 76EC             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1305+ 76EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1305+ 76EC             >
1305+ 76EC             >                // dummy db directives used to calculate length of namec
1305+ 76EC 00          >                db      $00
1305+ 76ED             >len_NFA         defl    $ - temp_NFA
1305+ 76ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1305+ 76EC             >
1305+ 76EC C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1305+ 76ED 00          >                db      $00               // name string in 7-bit ascii, but
1305+ 76EE             >                org     $-1                 // alter last byte of Name just above to set
1305+ 76ED 80          >                db      {b $} | END_BIT     // msb as name end
1305+ 76EE             >
1305+ 76EE DA 76       >                dw      last_NFA            // Link to previous definition Name
1305+ 76F0             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1305+ 76F0 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1305+ 76F3             >
1305+ 76F3             >
1305+ 76F3             >                endif           ; ok        // for other definitions it "points" the correct handler
1305+ 76F3             >                // Use of "; ok" to suppress "warning[fwdref]"
1305+ 76F3             >
1305+ 76F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1306+ 76F3 3E 6D DB 6A                  dw      BLK, FETCH, ONE         // blk @ 1
1306+ 76F7 33 6C
1307+ 76F9 CF 6E                        dw      GREATER                 // > if
1308+ 76FB                                                              // if
1309+ 76FB D8 63                        dw      ZBRANCH
1310+ 76FD 28 00                        dw      Nul_Else_1 - $
1311+ 76FF 33 6C 3E 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1311+ 7703 BC 6A
1312+ 7705 2A 6C 48 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
1312+ 7709 E6 6A
1313+ 770B 3E 6D DB 6A                  dw          BLK, FETCH          //      blk @
1314+ 770F 7E 6C                        dw          BSCR                //      b/scr
1315+ 7711 B9 69                        dw          ONE_SUBTRACT        //      1 -
1316+ 7713 95 68                        dw          AND_OP              //      and  ( this is tricky )
1317+ 7715 54 69                        dw          ZEQUAL              //      0=
1318+ 7717                                                              //      if
1319+ 7717 D8 63                        dw          ZBRANCH
1320+ 7719 08 00                        dw          Nul_Endif_2 - $
1321+ 771B 42 70                        dw              QEXEC           //          ?exec
1322+ 771D 33 69 2D 6A                  dw              R_TO, DROP      //          r> drop
1323+ 7721              Nul_Endif_2:                                    //      endif
1324+ 7721 C3 63                        dw      BRANCH
1325+ 7723 06 00                        dw      Nul_Endif_1 - $
1326+ 7725              Nul_Else_1:                                     // else
1327+ 7725 33 69 2D 6A                  dw          R_TO, DROP          //      r> drop
1328+ 7729              Nul_Endif_1:                                    // endif
1329+ 7729 F7 68                        dw      EXIT                    // ;
1330+ 772B
1331+ 772B              //  ______________________________________________________________________
1332+ 772B              //
1333+ 772B              // ?stack       --
1334+ 772B              // Raise error #1 if stack is empty and you pop it
1335+ 772B              // Raise error #7 if stack is full.
1336+ 772B              // This means SP must always stay between HERE and FFFF
1337+ 772B              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1338+ 772B              // for Next 8K MMU paging this is $DOE8
1339+ 772B                              Colon_Def QSTACK, "?STACK", is_normal
1339+ 772B             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1339+ 772B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1339+ 772B             >
1339+ 772B             >                // dummy db directives used to calculate length of namec
1339+ 772B 3F 53 54 41 >                db      "?STACK"
1339+ 772F 43 4B       >
1339+ 7731             >len_NFA         defl    $ - temp_NFA
1339+ 7731             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1339+ 772B             >
1339+ 772B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1339+ 772C 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1339+ 7730 43 4B       >
1339+ 7732             >                org     $-1                 // alter last byte of Name just above to set
1339+ 7731 CB          >                db      {b $} | END_BIT     // msb as name end
1339+ 7732             >
1339+ 7732 EC 76       >                dw      last_NFA            // Link to previous definition Name
1339+ 7734             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1339+ 7734 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1339+ 7737             >
1339+ 7737             >
1339+ 7737             >                endif           ; ok        // for other definitions it "points" the correct handler
1339+ 7737             >                // Use of "; ok" to suppress "warning[fwdref]"
1339+ 7737             >
1339+ 7737             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1340+ 7737 C7 68                        dw      SPFETCH                 // sp@
1341+ 7739 B5 6C DB 6A                  dw      S0, FETCH               // s0 @
1342+ 773D 4F 6A A3 6E                  dw      SWAP, ULESS             // swap u<
1343+ 7741 33 6C 0E 70                  dw      ONE, QERROR             // 1 ?error
1344+ 7745 34 6E                        dw      HERE                    // here
1345+ 7747 B5 6C DB 6A                  dw      S0, FETCH, LESS         // s0 @ <
1345+ 774B B5 6E
1346+ 774D                                                              // if
1347+ 774D D8 63                        dw      ZBRANCH
1348+ 774F 14 00                        dw      QStack_Endif - $
1349+ 7751 C7 68                        dw          SPFETCH             //      sp@
1350+ 7753 34 6E A5 63                  dw          HERE, LIT, 128      //      here 128
1350+ 7757 80 00
1351+ 7759 92 69 A3 6E                  dw          PLUS, ULESS         //      plus u<
1352+ 775D A5 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1352+ 7761 0E 70
1353+ 7763              QStack_Endif:                                   // endif
1354+ 7763 F7 68                        dw      EXIT                    // ;
1355+ 7765
1356+ 7765
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
 112  7765                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
   1+ 7765              //  ______________________________________________________________________
   2+ 7765              //
   3+ 7765              //  L2.asm
   4+ 7765              //
   5+ 7765              //  Level-2
   6+ 7765              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 7765              //  ______________________________________________________________________
   8+ 7765
   9+ 7765
  10+ 7765              //  ______________________________________________________________________
  11+ 7765              //
  12+ 7765              // interpret    --
  13+ 7765              // This is the text interpreter.
  14+ 7765              // It executes or compiles, depending on STATE, the text coming from
  15+ 7765              // current input stream.
  16+ 7765              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 7765              // the word is interpreted as numeric and converted, using current BASE,
  18+ 7765              // leaving on top of stack a single or double precision number, depending
  19+ 7765              // on the presence of a decimal point.
  20+ 7765              // If the number conversion fails, the terminal is notified with ? followed
  21+ 7765              // by the offending word.
  22+ 7765                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 7765             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 7765             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 7765             >
  22+ 7765             >                // dummy db directives used to calculate length of namec
  22+ 7765 49 4E 54 45 >                db      "INTERPRET"
  22+ 7769 52 50 52 45 >
  22+ 776D 54          >
  22+ 776E             >len_NFA         defl    $ - temp_NFA
  22+ 776E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 7765             >
  22+ 7765 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 7766 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 776A 52 50 52 45 >
  22+ 776E 54          >
  22+ 776F             >                org     $-1                 // alter last byte of Name just above to set
  22+ 776E D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 776F             >
  22+ 776F 2B 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 7771             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 7771 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 7774             >
  22+ 7774             >
  22+ 7774             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 7774             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 7774             >
  22+ 7774             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 7774
  24+ 7774              Interpret_Begin:                                        // begin
  25+ 7774 73 75                        dw          LFIND                       //      -find
  26+ 7776                                                                      //      if
  27+ 7776 D8 63                        dw          ZBRANCH
  28+ 7778 1A 00                        dw          Interpret_Else_1 - $
  29+ 777A 91 6D DB 6A                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 777E B5 6E
  30+ 7780                                                                      //          if
  31+ 7780 D8 63                        dw              ZBRANCH
  32+ 7782 08 00                        dw              Interpret_Else_2 - $
  33+ 7784 C5 70                        dw                  COMPILE_XT          //              compile,
  34+ 7786                                                                      //          else
  35+ 7786 C3 63                        dw              BRANCH
  36+ 7788 06 00                        dw              Interpret_Endif_2 - $
  37+ 778A              Interpret_Else_2:
  38+ 778A B8 63 D7 6B                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 778E              Interpret_Endif_2:                                      //          endif
  40+ 778E                                                                      //      else
  41+ 778E C3 63                        dw          BRANCH
  42+ 7790 1A 00                        dw          Interpret_Endif_1 - $
  43+ 7792              Interpret_Else_1:
  44+ 7792 34 6E 2C 75                  dw              HERE, NUMBER            //          here number
  45+ 7796 A6 6D DB 6A                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 779A AF 69
  46+ 779C                                                                      //          if
  47+ 779C D8 63                        dw              ZBRANCH
  48+ 779E 08 00                        dw              Interpret_Else_3 - $
  49+ 77A0              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77A0              //                                                      //              if
  51+ 77A0              //              dw                  ZBRANCH
  52+ 77A0              //              dw                  Interpret_Endif_4 - $
  53+ 77A0              //              dw                      ONE, ZERO       //                  1 0
  54+ 77A0              //              dw                      TWO_DROP        //                  2drop
  55+ 77A0              //Interpret_Endif_4:                                      //              endif
  56+ 77A0 C7 76                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77A2                                                                      //          else
  58+ 77A2 C3 63                        dw              BRANCH
  59+ 77A4 06 00                        dw              Interpret_Endif_3 - $
  60+ 77A6              Interpret_Else_3:
  61+ 77A6 2D 6A                        dw                  DROP                //              drop
  62+ 77A8 A9 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77AA              Interpret_Endif_3:                                      //          endif
  64+ 77AA              Interpret_Endif_1:                                      //      endif
  65+ 77AA 34 77                        dw          QSTACK                      //      ?stack
  66+ 77AC F0 66                        dw          QTERMINAL                   //      ?terminal
  67+ 77AE                                                                      //      if
  68+ 77AE D8 63                        dw          ZBRANCH
  69+ 77B0 04 00                        dw          Interpret_Endif_5 - $
  70+ 77B2 9C 75                        dw              CABORT                  //          (abort)
  71+ 77B4              Interpret_Endif_5:                                      //      endif
  72+ 77B4 C3 63                        dw      BRANCH
  73+ 77B6 BE FF                        dw      Interpret_Begin - $
  74+ 77B8 F7 68                        dw      EXIT                            // ;
  75+ 77BA
  76+ 77BA              //  ______________________________________________________________________
  77+ 77BA              //
  78+ 77BA              // vocabulary   -- cccc     ( compile time )
  79+ 77BA              // Defining word used in the form   VOCABULARY cccc
  80+ 77BA              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 77BA              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 77BA              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 77BA              // so new definitions can be inserted in that vocabulary.
  84+ 77BA                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 77BA             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 77BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 77BA             >
  84+ 77BA             >                // dummy db directives used to calculate length of namec
  84+ 77BA 56 4F 43 41 >                db      "VOCABULARY"
  84+ 77BE 42 55 4C 41 >
  84+ 77C2 52 59       >
  84+ 77C4             >len_NFA         defl    $ - temp_NFA
  84+ 77C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 77BA             >
  84+ 77BA 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 77BB 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 77BF 42 55 4C 41 >
  84+ 77C3 52 59       >
  84+ 77C5             >                org     $-1                 // alter last byte of Name just above to set
  84+ 77C4 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 77C5             >
  84+ 77C5 65 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 77C7             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 77C7 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 77CA             >
  84+ 77CA             >
  84+ 77CA             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 77CA             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 77CA             >
  84+ 77CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 77CA
  86+ 77CA 8B 71                        dw      CBUILDS
  87+ 77CC
  88+ 77CC A5 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 77D0 52 6E
  89+ 77D2 85 6D DB 6A                  dw      CURRENT, FETCH          // current @
  90+ 77D6 DC 69 52 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 77DA 34 6E                        dw      HERE                    // here
  92+ 77DC 06 6D DB 6A                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 77E0 52 6E
  93+ 77E2 06 6D E6 6A                  dw      VOC_LINK, STORE         // voc-link !
  94+ 77E6
  95+ 77E6 9C 71                        dw      DOES_TO                 // does>
  96+ 77E8              Vocabulary_Does:
  97+ 77E8 D1 69                        dw      CELL_PLUS               // cell+
  98+ 77EA 77 6D E6 6A                  dw      CONTEXT, STORE          // context !
  99+ 77EE F7 68                        dw      EXIT                    // ;
 100+ 77F0
 101+ 77F0              //  ______________________________________________________________________
 102+ 77F0              //
 103+ 77F0              // forth        --
 104+ 77F0              // Name of the first vocabulary.
 105+ 77F0              // It makes FORTH the CONTEXT vocabulary.
 106+ 77F0              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 77F0              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 77F0              // of a colon definition to be able to select the vocabulary.
 109+ 77F0
 110+ 77F0                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 77F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 77F0             >
 110+ 77F0             >                // dummy db directives used to calculate length of namec
 110+ 77F0 46 4F 52 54 >                db      "FORTH"
 110+ 77F4 48          >
 110+ 77F5             >len_NFA         defl    $ - temp_NFA
 110+ 77F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 77F0             >
 110+ 77F0 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 77F1 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 77F5 48          >
 110+ 77F6             >                org     $-1                 // alter last byte of Name just above to set
 110+ 77F5 C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 77F6             >
 110+ 77F6 BA 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 77F8             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 77F8 CD A9 71    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 77FB             >
 110+ 77FB             >
 110+ 77FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 77FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 77FB             >
 110+ 77FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 77FB E8 77                        dw      Vocabulary_Does
 112+ 77FD 81 A0                        db      $81, $A0
 113+ 77FF              Forth_Latest_Ptr:
 114+ 77FF C0 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 7801              Voclink_Ptr:
 116+ 7801 00 00                        dw      0
 117+ 7803              // Any new vocabulary is structured as follow:
 118+ 7803              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7803              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7803              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7803              //       at creations it points to the null-word of its parent vocabulary
 122+ 7803              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7803              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7803              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7803              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7803              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7803              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7803
 129+ 7803              //  ______________________________________________________________________
 130+ 7803              //
 131+ 7803              // definitions  --
 132+ 7803              // Used in the form  cccc DEFINITIONS
 133+ 7803              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7803              // vocabulary cccc.
 135+ 7803                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7803             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7803             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7803             >
 135+ 7803             >                // dummy db directives used to calculate length of namec
 135+ 7803 44 45 46 49 >                db      "DEFINITIONS"
 135+ 7807 4E 49 54 49 >
 135+ 780B 4F 4E 53    >
 135+ 780E             >len_NFA         defl    $ - temp_NFA
 135+ 780E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7803             >
 135+ 7803 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7804 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 7808 4E 49 54 49 >
 135+ 780C 4F 4E 53    >
 135+ 780F             >                org     $-1                 // alter last byte of Name just above to set
 135+ 780E D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 780F             >
 135+ 780F F0 77       >                dw      last_NFA            // Link to previous definition Name
 135+ 7811             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7811 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7814             >
 135+ 7814             >
 135+ 7814             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7814             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7814             >
 135+ 7814             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7814 77 6D DB 6A                  dw      CONTEXT, FETCH          // context @
 137+ 7818 85 6D E6 6A                  dw      CURRENT, STORE          // current !
 138+ 781C F7 68                        dw      EXIT                    // ;
 139+ 781E
 140+ 781E              //  ______________________________________________________________________
 141+ 781E              //
 142+ 781E              // (            -- cccc )
 143+ 781E              // the following text is interpreted as a comment until a closing )
 144+ 781E                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 781E             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 781E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 781E             >
 144+ 781E             >                // dummy db directives used to calculate length of namec
 144+ 781E 28          >                db      "("
 144+ 781F             >len_NFA         defl    $ - temp_NFA
 144+ 781F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 781E             >
 144+ 781E C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 781F 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 7820             >                org     $-1                 // alter last byte of Name just above to set
 144+ 781F A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 7820             >
 144+ 7820 03 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7822             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7822 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7825             >
 144+ 7825             >
 144+ 7825             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7825             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7825             >
 144+ 7825             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7825 A5 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 7829 B7 73 2D 6A                  dw      WORD, DROP              // word drop
 147+ 782D F7 68                        dw      EXIT                    // ;
 148+ 782F
 149+ 782F              //  ______________________________________________________________________
 150+ 782F              //
 151+ 782F              // quit         --
 152+ 782F              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 782F                              Colon_Def QUIT, "QUIT", is_normal
 153+ 782F             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 782F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 782F             >
 153+ 782F             >                // dummy db directives used to calculate length of namec
 153+ 782F 51 55 49 54 >                db      "QUIT"
 153+ 7833             >len_NFA         defl    $ - temp_NFA
 153+ 7833             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 782F             >
 153+ 782F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7830 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7834             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7833 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7834             >
 153+ 7834 1E 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7836             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7836 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 7839             >
 153+ 7839             >
 153+ 7839             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 7839             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 7839             >
 153+ 7839             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 7839
 155+ 7839 07 6E DB 6A                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 783D 31 67 2D 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 7841 2A 6C 07 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 7845 E6 6A
 158+ 7847 2A 6C 3E 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 784B E6 6A
 159+ 784D D2 70                        dw      SQUARED_OPEN            // [compile] [
 160+ 784F                                                              // begin
 161+ 784F              Quit_Begin:
 162+ 784F BE 6C DB 6A                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 7853 EA 68
 163+ 7855 F0 67                        dw      CR                      //      cr
 164+ 7857 34 73                        dw      QUERY                   //      query
 165+ 7859              Next_Breakpoint_1:
 166+ 7859 71 77                        dw      INTERPRET               //      interpret
 167+ 785B 91 6D DB 6A                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 785F 54 69
 168+ 7861                                                              //      if
 169+ 7861 D8 63                        dw      ZBRANCH
 170+ 7863 07 00                        dw      Quit_Endif - $
 171+ 7865 07 74                        dw          C_DOT_QUOTE
 172+ 7867 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 786A              Quit_Endif:                                     //      else
 174+ 786A                                                              // again
 175+ 786A C3 63                        dw      BRANCH
 176+ 786C E3 FF                        dw      Quit_Begin - $
 177+ 786E F7 68                        dw      EXIT                    // ;
 178+ 7870
 179+ 7870              //  ______________________________________________________________________
 180+ 7870              //
 181+ 7870              // abort        --
 182+ 7870                              Colon_Def ABORT, "ABORT", is_normal
 182+ 7870             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 7870             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 7870             >
 182+ 7870             >                // dummy db directives used to calculate length of namec
 182+ 7870 41 42 4F 52 >                db      "ABORT"
 182+ 7874 54          >
 182+ 7875             >len_NFA         defl    $ - temp_NFA
 182+ 7875             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 7870             >
 182+ 7870 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 7871 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 7875 54          >
 182+ 7876             >                org     $-1                 // alter last byte of Name just above to set
 182+ 7875 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 7876             >
 182+ 7876 2F 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 7878             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 7878 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 787B             >
 182+ 787B             >
 182+ 787B             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 787B             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 787B             >
 182+ 787B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 787B B5 6C DB 6A                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 787F D4 68
 184+ 7881 3A 71                        dw      DECIMAL                 // decimal
 185+ 7883 F8 77                        dw      FORTH                   // [compile] forth
 186+ 7885 11 78                        dw      DEFINITIONS             // definitions
 187+ 7887              Autoexec_Ptr:
 188+ 7887 CD 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 7889 36 78                        dw      QUIT                    // quit
 190+ 788B F7 68                        dw      EXIT                    // ;
 191+ 788D
 192+ 788D              //  ______________________________________________________________________
 193+ 788D              //
 194+ 788D              // warm         --
 195+ 788D                              Colon_Def WARM, "WARM", is_normal
 195+ 788D             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 788D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 788D             >
 195+ 788D             >                // dummy db directives used to calculate length of namec
 195+ 788D 57 41 52 4D >                db      "WARM"
 195+ 7891             >len_NFA         defl    $ - temp_NFA
 195+ 7891             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 788D             >
 195+ 788D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 788E 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 7892             >                org     $-1                 // alter last byte of Name just above to set
 195+ 7891 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 7892             >
 195+ 7892 70 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 7894             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 7894 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 7897             >
 195+ 7897             >
 195+ 7897             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 7897             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 7897             >
 195+ 7897             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 7897 74 7C                        dw      BLK_INIT                // blk-init
 197+ 7899 7D 84                        dw      SPLASH                  // splash
 198+ 789B A5 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 789F 27 6F
 199+ 78A1 78 78                        dw      ABORT                   // abort
 200+ 78A3 F7 68                        dw      EXIT                    // exit
 201+ 78A5
 202+ 78A5              //  ______________________________________________________________________
 203+ 78A5              //
 204+ 78A5              // cold         --
 205+ 78A5                              Colon_Def COLD, "COLD", is_normal
 205+ 78A5             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78A5             >
 205+ 78A5             >                // dummy db directives used to calculate length of namec
 205+ 78A5 43 4F 4C 44 >                db      "COLD"
 205+ 78A9             >len_NFA         defl    $ - temp_NFA
 205+ 78A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78A5             >
 205+ 78A5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78A6 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78AA             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78A9 C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78AA             >
 205+ 78AA 8D 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78AC             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78AC CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78AF             >
 205+ 78AF             >
 205+ 78AF             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78AF             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78AF             >
 205+ 78AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78AF A5 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78B3 A5 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78B7 DB 6A                        dw      FETCH                   // @
 209+ 78B9 A5 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78BD 92 69
 210+ 78BF A5 63 14 00                  dw      LIT, 20                 // 20
 211+ 78C3 FD 67                        dw      CMOVE
 212+ 78C5 A5 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 78C9 DB 6A                        dw      FETCH                   // @
 214+ 78CB A5 63 FF 77                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 78CF E6 6A                        dw      STORE                   // !
 216+ 78D1 2A 6C 34 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 78D5 E6 6A
 217+ 78D7 12 6D DB 6A                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 78DB 5A 6A
 218+ 78DD D7 6D E6 6A                  dw      USE, STORE              // use !
 219+ 78E1 E2 6D E6 6A                  dw      PREV, STORE             // prev !
 220+ 78E5 A5 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 78E9 F7 6D E6 6A
 221+ 78ED              //              dw      LIT, 8
 222+ 78ED              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 78ED 3C 6C 29 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 78F1 E6 6A
 224+ 78F3 94 78        Warm_Start:     dw      WARM
 225+ 78F5 AC 78        Cold_Start:     dw      COLD
 226+ 78F7 F7 68                        dw      EXIT
 227+ 78F9
 228+ 78F9              //  ______________________________________________________________________
 229+ 78F9              WarmRoutine:
 230+ 78F9              ColdRoutine:
 231+ 78F9 DD 21 98 63                  ld      ix, Next_Ptr
 232+ 78FD D9                           exx
 233+ 78FE E5                           push    hl
 234+ 78FF D9                           exx
 235+ 7900
 236+ 7900 ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 7904 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 7908              //              nop
 239+ 7908 2A 7A 63                     ld      hl, (R0_origin)
 240+ 790B              //              nop
 241+ 790B                              ldrphl
 241+ 790B 22 96 63    >                ld      (RP_Pointer),hl
 242+ 790E 01 F3 78                     ld      bc, Warm_Start
 243+ 7911 38 02                        jr      c, Warm_Skip
 244+ 7913 03                           inc     bc
 245+ 7914 03                           inc     bc
 246+ 7915              Warm_Skip:
 247+ 7915                              next
 247+ 7915 DD E9       >                jp      (ix)
 248+ 7917
 249+ 7917              //  ______________________________________________________________________
 250+ 7917              //
 251+ 7917              // basic        --
 252+ 7917                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7917             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7917             >
 252+ 7917             >                // dummy db directives used to calculate length of namec
 252+ 7917 42 41 53 49 >                db      "BASIC"
 252+ 791B 43          >
 252+ 791C             >len_NFA         defl    $ - temp_NFA
 252+ 791C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7917             >
 252+ 7917 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7918 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 791C 43          >
 252+ 791D             >                org     $-1                 // alter last byte of Name just above to set
 252+ 791C C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 791D             >
 252+ 791D A5 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 791F             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 791F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 252+ 791F ~           >
 252+ 791F ~           >
 252+ 791F             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 791F             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 791F             >
 252+ 791F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 791F C1                           pop     bc
 254+ 7920 21 00 00                     ld      hl, 0
 255+ 7923 39                           add     hl, sp
 256+ 7924 ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 7928              //              nop
 258+ 7928 22 6E 63                     ld      (SP_Basic),hl
 259+ 792B D9                           exx
 260+ 792C E1                           pop     hl
 261+ 792D D9                           exx
 262+ 792E C9                           ret     // to Basic
 263+ 792F
 264+ 792F              //  ______________________________________________________________________
 265+ 792F              //
 266+ 792F              // +-           n1 n2 -- n3
 267+ 792F              // leaves n1 with the sign of n2 as n3.
 268+ 792F                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 792F             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 792F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 792F             >
 268+ 792F             >                // dummy db directives used to calculate length of namec
 268+ 792F 2B 2D       >                db      "+-"
 268+ 7931             >len_NFA         defl    $ - temp_NFA
 268+ 7931             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 792F             >
 268+ 792F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 7930 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 7932             >                org     $-1                 // alter last byte of Name just above to set
 268+ 7931 AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 7932             >
 268+ 7932 17 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 7934             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 7934 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7937             >
 268+ 7937             >
 268+ 7937             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7937             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7937             >
 268+ 7937             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7937 6E 69                        dw      ZLESS                   // 0<
 270+ 7939                                                              // if
 271+ 7939 D8 63                        dw      ZBRANCH
 272+ 793B 04 00                        dw      Plus_Minus_Endif - $
 273+ 793D F3 69                        dw          MINUS               //      minus
 274+ 793F              Plus_Minus_Endif:                               // endif
 275+ 793F F7 68                        dw      EXIT                    // ;
 276+ 7941
 277+ 7941              //  ______________________________________________________________________
 278+ 7941              //
 279+ 7941              // d+-          d1 n -- d2
 280+ 7941              // leaves d1 with the sign of n as d2.
 281+ 7941                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 7941             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 7941             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 7941             >
 281+ 7941             >                // dummy db directives used to calculate length of namec
 281+ 7941 44 2B 2D    >                db      "D+-"
 281+ 7944             >len_NFA         defl    $ - temp_NFA
 281+ 7944             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 7941             >
 281+ 7941 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 7942 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 7945             >                org     $-1                 // alter last byte of Name just above to set
 281+ 7944 AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 7945             >
 281+ 7945 2F 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7947             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7947 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 794A             >
 281+ 794A             >
 281+ 794A             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 794A             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 794A             >
 281+ 794A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 794A 6E 69                        dw      ZLESS                   // 0<
 283+ 794C                                                              // if
 284+ 794C D8 63                        dw      ZBRANCH
 285+ 794E 04 00                        dw      DPlus_Minus_Endif - $
 286+ 7950 07 6A                        dw          DMINUS              //      dminus
 287+ 7952              DPlus_Minus_Endif:                              // endif
 288+ 7952 F7 68                        dw      EXIT                    // ;
 289+ 7954
 290+ 7954              //  ______________________________________________________________________
 291+ 7954              //
 292+ 7954              // abs          n1 -- n2
 293+ 7954                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 7954             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 7954             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 7954             >
 293+ 7954             >                // dummy db directives used to calculate length of namec
 293+ 7954 41 42 53    >                db      "ABS"
 293+ 7957             >len_NFA         defl    $ - temp_NFA
 293+ 7957             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 7954             >
 293+ 7954 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 7955 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 7958             >                org     $-1                 // alter last byte of Name just above to set
 293+ 7957 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 7958             >
 293+ 7958 41 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 795A             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 795A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 795D             >
 293+ 795D             >
 293+ 795D             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 795D             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 795D             >
 293+ 795D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 795D 5A 6A                        dw      DUP                     // dup
 295+ 795F 34 79                        dw      PLUS_MINUS              // +-
 296+ 7961 F7 68                        dw      EXIT                    // ;
 297+ 7963
 298+ 7963              //  ______________________________________________________________________
 299+ 7963              //
 300+ 7963              // dabs         d1 -- d2
 301+ 7963                              Colon_Def DABS, "DABS", is_normal
 301+ 7963             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 7963             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 7963             >
 301+ 7963             >                // dummy db directives used to calculate length of namec
 301+ 7963 44 41 42 53 >                db      "DABS"
 301+ 7967             >len_NFA         defl    $ - temp_NFA
 301+ 7967             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 7963             >
 301+ 7963 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 7964 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 7968             >                org     $-1                 // alter last byte of Name just above to set
 301+ 7967 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 7968             >
 301+ 7968 54 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 796A             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 796A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 796D             >
 301+ 796D             >
 301+ 796D             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 796D             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 796D             >
 301+ 796D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 796D 5A 6A                        dw      DUP                     // dup
 303+ 796F 47 79                        dw      DPLUS_MINUS             // d+-
 304+ 7971 F7 68                        dw      EXIT                    // ;
 305+ 7973
 306+ 7973              //  ______________________________________________________________________
 307+ 7973              //
 308+ 7973              // m*           n1 n2 -- d
 309+ 7973              // multiply two integer giving a double
 310+ 7973                              Colon_Def MMUL, "M*", is_normal
 310+ 7973             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 7973             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 7973             >
 310+ 7973             >                // dummy db directives used to calculate length of namec
 310+ 7973 4D 2A       >                db      "M*"
 310+ 7975             >len_NFA         defl    $ - temp_NFA
 310+ 7975             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 7973             >
 310+ 7973 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 7974 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 7976             >                org     $-1                 // alter last byte of Name just above to set
 310+ 7975 AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 7976             >
 310+ 7976 63 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 7978             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 7978 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 797B             >
 310+ 797B             >
 310+ 797B             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 797B             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 797B             >
 310+ 797B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 797B AF 6A B6 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 797F 21 69
 312+ 7981 5A 79 4F 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 7985 5A 79 2C 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 7989 33 69 47 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 798D F7 68                        dw      EXIT                    // ;
 316+ 798F
 317+ 798F              //  ______________________________________________________________________
 318+ 798F              //
 319+ 798F              // sm/rem       d n -- q r
 320+ 798F              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 798F              // the remainder has the sign of d.
 322+ 798F                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 798F             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 798F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 798F             >
 322+ 798F             >                // dummy db directives used to calculate length of namec
 322+ 798F 53 4D 2F 52 >                db      "SM/REM"
 322+ 7993 45 4D       >
 322+ 7995             >len_NFA         defl    $ - temp_NFA
 322+ 7995             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 798F             >
 322+ 798F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 7990 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 7994 45 4D       >
 322+ 7996             >                org     $-1                 // alter last byte of Name just above to set
 322+ 7995 CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 7996             >
 322+ 7996 73 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 7998             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 7998 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 799B             >
 322+ 799B             >
 322+ 799B             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 799B             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 799B             >
 322+ 799B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 799B 1F 6A 21 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 799F 21 69
 324+ 79A1 6A 79 45 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 79A5 5A 79
 325+ 79A7 5B 68                        dw      UMDIVMOD                // um/mod
 326+ 79A9 33 69                        dw      R_TO                    // r>
 327+ 79AB 45 69 B6 68                  dw      R_OP, XOR_OP            // r xor
 328+ 79AF 34 79 4F 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 79B3 33 69                        dw      R_TO                    // r>
 330+ 79B5 34 79 4F 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 79B9 F7 68                        dw      EXIT                    // ;
 332+ 79BB
 333+ 79BB              //  ______________________________________________________________________
 334+ 79BB              //
 335+ 79BB              // fm/mod       d n -- q r
 336+ 79BB              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 79BB              // the remainder has the sign of d.
 338+ 79BB                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 79BB             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 79BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 79BB             >
 338+ 79BB             >                // dummy db directives used to calculate length of namec
 338+ 79BB 46 4D 2F 4D >                db      "FM/MOD"
 338+ 79BF 4F 44       >
 338+ 79C1             >len_NFA         defl    $ - temp_NFA
 338+ 79C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 79BB             >
 338+ 79BB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 79BC 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 79C0 4F 44       >
 338+ 79C2             >                org     $-1                 // alter last byte of Name just above to set
 338+ 79C1 C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 79C2             >
 338+ 79C2 8F 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 79C4             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 79C4 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 79C7             >
 338+ 79C7             >
 338+ 79C7             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 79C7             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 79C7             >
 338+ 79C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 79C7 5A 6A 21 69                  dw      DUP, TO_R               // dup >r
 340+ 79CB 98 79                        dw      SMDIVM
 341+ 79CD 1F 6A 5A 6A                  dw      OVER, DUP
 342+ 79D1 54 69 54 69                  dw      ZEQUAL, ZEQUAL
 343+ 79D5 4F 6A 6E 69                  dw      SWAP, ZLESS
 344+ 79D9 45 69 6E 69                  dw      R_OP, ZLESS
 345+ 79DD B6 68 95 68                  dw      XOR_OP, AND_OP
 346+ 79E1 D8 63                        dw      ZBRANCH
 347+ 79E3 10 00                        dw      Fm_Mod_Else - $
 348+ 79E5 B9 69                        dw          ONE_SUBTRACT
 349+ 79E7 4F 6A 33 69                  dw          SWAP, R_TO
 350+ 79EB 92 69 4F 6A                  dw          PLUS, SWAP
 351+ 79EF C3 63                        dw      BRANCH
 352+ 79F1 06 00                        dw      Fm_Mod_Endif - $
 353+ 79F3              Fm_Mod_Else:
 354+ 79F3 33 69 2D 6A                  dw          R_TO, DROP
 355+ 79F7              Fm_Mod_Endif:
 356+ 79F7 F7 68                        dw      EXIT
 357+ 79F9              //              dw      TWO_DUP                 // 2dup
 358+ 79F9              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 79F9              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 79F9              //              dw      UMDIVMOD                // um/mod
 361+ 79F9              //              dw      SWAP                    // swap
 362+ 79F9              //              dw      II, ZLESS               // i'
 363+ 79F9              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 79F9              //              dw      R_TO                    // r>
 365+ 79F9              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 79F9              //              dw      R_OP                    // r@
 367+ 79F9              //              dw      ZLESS                   // i'
 368+ 79F9              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 79F9              //              dw      R_TO                    // r>
 370+ 79F9              //              dw      PLUS_MINUS              // +- swap
 371+ 79F9              //              dw      EXIT                    // ;
 372+ 79F9
 373+ 79F9              //  ______________________________________________________________________
 374+ 79F9              //
 375+ 79F9              // m/mod        d n -- q r
 376+ 79F9              // multiply two integer giving a double
 377+ 79F9                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 79F9             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 79F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 79F9             >
 377+ 79F9             >                // dummy db directives used to calculate length of namec
 377+ 79F9 4D 2F 4D 4F >                db      "M/MOD"
 377+ 79FD 44          >
 377+ 79FE             >len_NFA         defl    $ - temp_NFA
 377+ 79FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 79F9             >
 377+ 79F9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 79FA 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 79FE 44          >
 377+ 79FF             >                org     $-1                 // alter last byte of Name just above to set
 377+ 79FE C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 79FF             >
 377+ 79FF BB 79       >                dw      last_NFA            // Link to previous definition Name
 377+ 7A01             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 7A01 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A04             >
 377+ 7A04             >
 377+ 7A04             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A04             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A04             >
 377+ 7A04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A04 98 79                        dw      SMDIVM
 379+ 7A06 F7 68                        dw      EXIT                    // ;
 380+ 7A08
 381+ 7A08              //  ______________________________________________________________________
 382+ 7A08              //
 383+ 7A08              // m/           d n -- q
 384+ 7A08              // multiply two integer giving a double
 385+ 7A08                              Colon_Def MDIV, "M/", is_normal
 385+ 7A08             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A08             >
 385+ 7A08             >                // dummy db directives used to calculate length of namec
 385+ 7A08 4D 2F       >                db      "M/"
 385+ 7A0A             >len_NFA         defl    $ - temp_NFA
 385+ 7A0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A08             >
 385+ 7A08 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A09 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A0B             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A0A AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A0B             >
 385+ 7A0B F9 79       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A0D             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A0D CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A10             >
 385+ 7A10             >
 385+ 7A10             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A10             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A10             >
 385+ 7A10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A10 01 7A 36 6A                  dw      MDIVM, NIP
 387+ 7A14 F7 68                        dw      EXIT                    // ;
 388+ 7A16
 389+ 7A16              //  ______________________________________________________________________
 390+ 7A16              //
 391+ 7A16              // *            n1 n2 -- n3
 392+ 7A16              // multiply two integer
 393+ 7A16                              Colon_Def MUL, "*", is_normal
 393+ 7A16             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A16             >
 393+ 7A16             >                // dummy db directives used to calculate length of namec
 393+ 7A16 2A          >                db      "*"
 393+ 7A17             >len_NFA         defl    $ - temp_NFA
 393+ 7A17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A16             >
 393+ 7A16 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A17 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A18             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A17 AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A18             >
 393+ 7A18 08 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A1A             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A1A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A1D             >
 393+ 7A1D             >
 393+ 7A1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A1D             >
 393+ 7A1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A1D 78 79 2D 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A21 F7 68                        dw      EXIT                    // ;
 396+ 7A23
 397+ 7A23              //  ______________________________________________________________________
 398+ 7A23              //
 399+ 7A23              // /mod         n1 n2 -- n3 n4
 400+ 7A23              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A23              // The remainder has the sign of n1
 402+ 7A23                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A23             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A23             >
 402+ 7A23             >                // dummy db directives used to calculate length of namec
 402+ 7A23 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A27             >len_NFA         defl    $ - temp_NFA
 402+ 7A27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A23             >
 402+ 7A23 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A24 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A28             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A27 C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A28             >
 402+ 7A28 16 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A2A             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A2A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A2D             >
 402+ 7A2D             >
 402+ 7A2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A2D             >
 402+ 7A2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A2D 21 69 77 6E                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A31 33 69
 404+ 7A33 01 7A                        dw      MDIVM                   // m/mod
 405+ 7A35 F7 68                        dw      EXIT                    // ;
 406+ 7A37
 407+ 7A37              //  ______________________________________________________________________
 408+ 7A37              //
 409+ 7A37              // /            n1 n2 -- n3
 410+ 7A37              // division
 411+ 7A37                              Colon_Def DIV, "/", is_normal
 411+ 7A37             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A37             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A37             >
 411+ 7A37             >                // dummy db directives used to calculate length of namec
 411+ 7A37 2F          >                db      "/"
 411+ 7A38             >len_NFA         defl    $ - temp_NFA
 411+ 7A38             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A37             >
 411+ 7A37 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A38 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A39             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A38 AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A39             >
 411+ 7A39 23 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A3B             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A3B CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A3E             >
 411+ 7A3E             >
 411+ 7A3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A3E             >
 411+ 7A3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A3E 2A 7A 36 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A42 F7 68                        dw      EXIT                    // ;
 414+ 7A44
 415+ 7A44              //  ______________________________________________________________________
 416+ 7A44              //
 417+ 7A44              // mod          n1 n2 -- n3
 418+ 7A44                              Colon_Def MOD, "MOD", is_normal
 418+ 7A44             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A44             >
 418+ 7A44             >                // dummy db directives used to calculate length of namec
 418+ 7A44 4D 4F 44    >                db      "MOD"
 418+ 7A47             >len_NFA         defl    $ - temp_NFA
 418+ 7A47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A44             >
 418+ 7A44 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A45 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A48             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A47 C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A48             >
 418+ 7A48 37 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A4A             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A4A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A4D             >
 418+ 7A4D             >
 418+ 7A4D             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A4D             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A4D             >
 418+ 7A4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A4D 2A 7A 2D 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7A51 F7 68                        dw      EXIT                    // ;
 421+ 7A53
 422+ 7A53              //  ______________________________________________________________________
 423+ 7A53              //
 424+ 7A53              // */mod        n1 n2 n3 -- n4 n5
 425+ 7A53              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7A53              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7A53              // avoids loss of precision
 428+ 7A53                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7A53             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7A53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7A53             >
 428+ 7A53             >                // dummy db directives used to calculate length of namec
 428+ 7A53 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7A57 44          >
 428+ 7A58             >len_NFA         defl    $ - temp_NFA
 428+ 7A58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7A53             >
 428+ 7A53 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7A54 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7A58 44          >
 428+ 7A59             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7A58 C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7A59             >
 428+ 7A59 44 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7A5B             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7A5B CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7A5E             >
 428+ 7A5E             >
 428+ 7A5E             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7A5E             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7A5E             >
 428+ 7A5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7A5E 21 69 78 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7A62 33 69 01 7A                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7A66 F7 68                        dw      EXIT                    // ;
 432+ 7A68
 433+ 7A68              //  ______________________________________________________________________
 434+ 7A68              //
 435+ 7A68              // */          n1 n2 n3 -- n4
 436+ 7A68              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7A68                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7A68             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7A68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7A68             >
 437+ 7A68             >                // dummy db directives used to calculate length of namec
 437+ 7A68 2A 2F       >                db      "*/"
 437+ 7A6A             >len_NFA         defl    $ - temp_NFA
 437+ 7A6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7A68             >
 437+ 7A68 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7A69 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7A6B             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7A6A AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7A6B             >
 437+ 7A6B 53 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7A6D             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7A6D CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7A70             >
 437+ 7A70             >
 437+ 7A70             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7A70             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7A70             >
 437+ 7A70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7A70 5B 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7A72 36 6A                        dw     NIP                      // nip
 440+ 7A74 F7 68                        dw     EXIT                     // ;
 441+ 7A76
 442+ 7A76
 443+ 7A76              //  ______________________________________________________________________
 444+ 7A76              //
 445+ 7A76              // m/mod        ud1 u2 -- u3 ud4
 446+ 7A76              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7A76              // All terms are unsigned.
 448+ 7A76              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7A76              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7A76              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7A76              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7A76              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7A76              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7A76              //              dw      EXIT                    // ;
 455+ 7A76
 456+ 7A76              //  ______________________________________________________________________
 457+ 7A76              //
 458+ 7A76              // (line)       n1 n2 -- a b
 459+ 7A76              // sends the line n1 of block n2 to the disk buffer.
 460+ 7A76              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7A76                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7A76             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7A76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7A76             >
 461+ 7A76             >                // dummy db directives used to calculate length of namec
 461+ 7A76 28 4C 49 4E >                db      "(LINE)"
 461+ 7A7A 45 29       >
 461+ 7A7C             >len_NFA         defl    $ - temp_NFA
 461+ 7A7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7A76             >
 461+ 7A76 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7A77 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7A7B 45 29       >
 461+ 7A7D             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7A7C A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7A7D             >
 461+ 7A7D 68 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7A7F             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7A7F CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7A82             >
 461+ 7A82             >
 461+ 7A82             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7A82             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7A82             >
 461+ 7A82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7A82 21 69                        dw      TO_R                    // >r
 463+ 7A84 D7 6B                        dw      NOOP                    // noop
 464+ 7A86 64 6C                        dw      CL                      // c/l
 465+ 7A88 71 6C 5B 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7A8C 33 69                        dw      R_TO                    // r>
 467+ 7A8E 7E 6C 1A 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7A92 92 69
 468+ 7A94 93 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7A96 92 69                        dw      PLUS                    // +
 470+ 7A98 D7 6B                        dw      NOOP                    // noop
 471+ 7A9A 64 6C                        dw      CL                      // c/l
 472+ 7A9C F7 68                        dw      EXIT                    // ;
 473+ 7A9E
 474+ 7A9E              //  ______________________________________________________________________
 475+ 7A9E              //
 476+ 7A9E              // .line        n1 n2 --
 477+ 7A9E              // Sends to output line  n1  of screen n2.
 478+ 7A9E                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7A9E             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7A9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7A9E             >
 478+ 7A9E             >                // dummy db directives used to calculate length of namec
 478+ 7A9E 2E 4C 49 4E >                db      ".LINE"
 478+ 7AA2 45          >
 478+ 7AA3             >len_NFA         defl    $ - temp_NFA
 478+ 7AA3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7A9E             >
 478+ 7A9E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7A9F 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7AA3 45          >
 478+ 7AA4             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7AA3 C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7AA4             >
 478+ 7AA4 76 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7AA6             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7AA6 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7AA9             >
 478+ 7AA9             >
 478+ 7AA9             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7AA9             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7AA9             >
 478+ 7AA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7AA9 7F 7A 51 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7AAD EB 71
 480+ 7AAF F7 68                        dw      EXIT                    // ;
 481+ 7AB1
 482+ 7AB1              //  ______________________________________________________________________
 483+ 7AB1              //
 484+ 7AB1              // message       n1 n2 --
 485+ 7AB1              // prints error message to current channel.
 486+ 7AB1              // if WARNING is 0, prints "MSG#n".
 487+ 7AB1              // if WARNING is 1, prints line n of screen 4.
 488+ 7AB1              // if WARNING is -1, see ERROR
 489+ 7AB1              // value can be negative or beyond block 4.
 490+ 7AB1                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7AB1             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7AB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7AB1             >
 490+ 7AB1             >                // dummy db directives used to calculate length of namec
 490+ 7AB1 4D 45 53 53 >                db      "MESSAGE"
 490+ 7AB5 41 47 45    >
 490+ 7AB8             >len_NFA         defl    $ - temp_NFA
 490+ 7AB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7AB1             >
 490+ 7AB1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7AB2 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7AB6 41 47 45    >
 490+ 7AB9             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7AB8 C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7AB9             >
 490+ 7AB9 9E 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7ABB             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7ABB CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7ABE             >
 490+ 7ABE             >
 490+ 7ABE             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7ABE             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7ABE             >
 490+ 7ABE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7ABE E2 6C DB 6A                  dw      WARNING, FETCH          // warning @
 492+ 7AC2                                                              // if
 493+ 7AC2 D8 63                        dw      ZBRANCH
 494+ 7AC4 18 00                        dw      Message_Else - $
 495+ 7AC6 A5 63 04 00                  dw          LIT, 4              //      4
 496+ 7ACA 69 6D DB 6A                  dw          OFFSET, FETCH       //      offset @
 497+ 7ACE 7E 6C 3B 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7AD2 89 6E
 498+ 7AD4 A6 7A                        dw          DOT_LINE            //      .line
 499+ 7AD6 44 6F                        dw          SPACE               //      space
 500+ 7AD8                                                              // else
 501+ 7AD8
 502+ 7AD8 C3 63                        dw      BRANCH
 503+ 7ADA 0B 00                        dw      Message_ENdif - $
 504+ 7ADC              Message_Else:
 505+ 7ADC 07 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7ADE 04 6D 73 67                  db          4, "msg#"
 506+ 7AE2 23
 507+ 7AE3 6F 83                        dw          DOT                 //      .  ( forward )
 508+ 7AE5              Message_ENdif:                                  // endif
 509+ 7AE5 F7 68                        dw      EXIT                    // ;
 510+ 7AE7
 511+ 7AE7
 512+ 7AE7              //  ______________________________________________________________________
 513+ 7AE7              //
 514+ 7AE7              // device
 515+ 7AE7                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7AE7             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7AE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7AE7             >
 515+ 7AE7             >                // dummy db directives used to calculate length of namec
 515+ 7AE7 44 45 56 49 >                db      "DEVICE"
 515+ 7AEB 43 45       >
 515+ 7AED             >len_NFA         defl    $ - temp_NFA
 515+ 7AED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7AE7             >
 515+ 7AE7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7AE8 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7AEC 43 45       >
 515+ 7AEE             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7AED C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7AEE             >
 515+ 7AEE B1 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7AF0             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7AF0 CD 09 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7AF3             >
 515+ 7AF3             >
 515+ 7AF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7AF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7AF3             >
 515+ 7AF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7AF3 02 00       >                dw      2
 516+ 7AF5
 517+ 7AF5              //  ______________________________________________________________________
 518+ 7AF5              //
 519+ 7AF5              // inkey        -- c | 0
 520+ 7AF5              // call ROM inkey$ routine, returns c or "zero".
 521+ 7AF5
 522+ 7AF5                              New_Def INKEY, "INKEY", is_code, is_normal
 522+ 7AF5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 7AF5             >
 522+ 7AF5             >                // dummy db directives used to calculate length of namec
 522+ 7AF5 49 4E 4B 45 >                db      "INKEY"
 522+ 7AF9 59          >
 522+ 7AFA             >len_NFA         defl    $ - temp_NFA
 522+ 7AFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 7AF5             >
 522+ 7AF5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 7AF6 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 522+ 7AFA 59          >
 522+ 7AFB             >                org     $-1                 // alter last byte of Name just above to set
 522+ 7AFA D9          >                db      {b $} | END_BIT     // msb as name end
 522+ 7AFB             >
 522+ 7AFB E7 7A       >                dw      last_NFA            // Link to previous definition Name
 522+ 7AFD             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 7AFD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 522+ 7AFD ~           >
 522+ 7AFD ~           >
 522+ 7AFD             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 7AFD             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 7AFD             >
 522+ 7AFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 7AFD
 524+ 7AFD C5                           push    bc
 525+ 7AFE ED 73 92 63                  ld      (SP_Saved), sp
 526+ 7B02 31 61 63                     ld      sp, Cold_origin - 5
 527+ 7B05 DD E5                        push    ix
 528+ 7B07 CD E6 15                     call    $15E6                   // instead of 15E9
 529+ 7B0A DD E1                        pop     ix
 530+ 7B0C ED 7B 92 63                  ld      sp, (SP_Saved)
 531+ 7B10 6F                           ld      l, a
 532+ 7B11 26 00                        ld      h, 0
 533+ 7B13 C1                           pop     bc
 534+ 7B14                              psh1
 534+ 7B14 E5          >                push    hl
 534+ 7B15 DD E9       >                jp      (ix)
 535+ 7B17
 536+ 7B17              //  ______________________________________________________________________
 537+ 7B17              //
 538+ 7B17              // select      n --
 539+ 7B17              // selects the given channel number
 540+ 7B17
 541+ 7B17                              New_Def SELECT, "SELECT", is_code, is_normal
 541+ 7B17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 541+ 7B17             >
 541+ 7B17             >                // dummy db directives used to calculate length of namec
 541+ 7B17 53 45 4C 45 >                db      "SELECT"
 541+ 7B1B 43 54       >
 541+ 7B1D             >len_NFA         defl    $ - temp_NFA
 541+ 7B1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 541+ 7B17             >
 541+ 7B17 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 541+ 7B18 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 541+ 7B1C 43 54       >
 541+ 7B1E             >                org     $-1                 // alter last byte of Name just above to set
 541+ 7B1D D4          >                db      {b $} | END_BIT     // msb as name end
 541+ 7B1E             >
 541+ 7B1E F5 7A       >                dw      last_NFA            // Link to previous definition Name
 541+ 7B20             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 541+ 7B20 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 541+ 7B20 ~           >
 541+ 7B20 ~           >
 541+ 7B20             >                endif           ; ok        // for other definitions it "points" the correct handler
 541+ 7B20             >                // Use of "; ok" to suppress "warning[fwdref]"
 541+ 7B20             >
 541+ 7B20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 542+ 7B20 E1                           pop     hl
 543+ 7B21 C5                           push    bc
 544+ 7B22 7D                           ld      a, l
 545+ 7B23 ED 73 92 63                  ld      (SP_Saved), sp
 546+ 7B27 31 61 63                     ld      sp, Cold_origin - 5
 547+ 7B2A DD E5                        push    ix
 548+ 7B2C CD 01 16                     call    $1601
 549+ 7B2F DD E1                        pop     ix
 550+ 7B31 ED 7B 92 63                  ld      sp, (SP_Saved)
 551+ 7B35 C1                           pop     bc
 552+ 7B36
 553+ 7B36                              next
 553+ 7B36 DD E9       >                jp      (ix)
 554+ 7B38
 555+ 7B38              //  ______________________________________________________________________
 556+ 7B38
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
 113  7B38                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
   1+ 7B38              //  ______________________________________________________________________
   2+ 7B38              //
   3+ 7B38              //  next-opt.asm
   4+ 7B38              //
   5+ 7B38              //  ZX Spectrum Next - peculiar definitions
   6+ 7B38              //  ______________________________________________________________________
   7+ 7B38
   8+ 7B38              //  ______________________________________________________________________
   9+ 7B38              //
  10+ 7B38              // reg@         n -- b
  11+ 7B38              // read Next REGister n giving byte b
  12+ 7B38              //
  13+ 7B38              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 7B38              //              dw      LIT, $243B
  15+ 7B38              //              dw      PSTORE
  16+ 7B38              //              dw      LIT, $253B
  17+ 7B38              //              dw      PFETCH
  18+ 7B38              //              dw      EXIT
  19+ 7B38                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 7B38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ 7B38             >
  19+ 7B38             >                // dummy db directives used to calculate length of namec
  19+ 7B38 52 45 47 40 >                db      "REG@"
  19+ 7B3C             >len_NFA         defl    $ - temp_NFA
  19+ 7B3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ 7B38             >
  19+ 7B38 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ 7B39 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ 7B3D             >                org     $-1                 // alter last byte of Name just above to set
  19+ 7B3C C0          >                db      {b $} | END_BIT     // msb as name end
  19+ 7B3D             >
  19+ 7B3D 17 7B       >                dw      last_NFA            // Link to previous definition Name
  19+ 7B3F             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 7B3F ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 7B3F ~           >
  19+ 7B3F ~           >
  19+ 7B3F             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 7B3F             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 7B3F             >
  19+ 7B3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 7B3F D9                           exx
  21+ 7B40 01 3B 24                     ld      bc, $243B
  22+ 7B43 E1                           pop     hl
  23+ 7B44 ED 69                        out     (c), l
  24+ 7B46 04                           inc     b
  25+ 7B47 ED 68                        in      l, (c)
  26+ 7B49 E5                           push    hl
  27+ 7B4A D9                           exx
  28+ 7B4B                              next
  28+ 7B4B DD E9       >                jp      (ix)
  29+ 7B4D
  30+ 7B4D
  31+ 7B4D              //  ______________________________________________________________________
  32+ 7B4D              //
  33+ 7B4D              // reg!         b n --
  34+ 7B4D              // write value b to Next REGister n
  35+ 7B4D              //
  36+ 7B4D              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 7B4D              //              dw      LIT, $243B
  38+ 7B4D              //              dw      PSTORE
  39+ 7B4D              //              dw      LIT, $253B
  40+ 7B4D              //              dw      PSTORE
  41+ 7B4D              //              dw      EXIT
  42+ 7B4D                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 7B4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ 7B4D             >
  42+ 7B4D             >                // dummy db directives used to calculate length of namec
  42+ 7B4D 52 45 47 21 >                db      "REG!"
  42+ 7B51             >len_NFA         defl    $ - temp_NFA
  42+ 7B51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ 7B4D             >
  42+ 7B4D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ 7B4E 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ 7B52             >                org     $-1                 // alter last byte of Name just above to set
  42+ 7B51 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ 7B52             >
  42+ 7B52 38 7B       >                dw      last_NFA            // Link to previous definition Name
  42+ 7B54             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 7B54 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 7B54 ~           >
  42+ 7B54 ~           >
  42+ 7B54             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 7B54             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 7B54             >
  42+ 7B54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 7B54 D9                           exx
  44+ 7B55 01 3B 24                     ld      bc, $243B
  45+ 7B58 E1                           pop     hl
  46+ 7B59 ED 69                        out     (c), l
  47+ 7B5B 04                           inc     b
  48+ 7B5C E1                           pop     hl
  49+ 7B5D ED 69                        out     (c), l
  50+ 7B5F D9                           exx
  51+ 7B60                              next
  51+ 7B60 DD E9       >                jp      (ix)
  52+ 7B62
  53+ 7B62
  54+ 7B62              //  ______________________________________________________________________
  55+ 7B62              //
  56+ 7B62              // mmu7@        -- n
  57+ 7B62              // query current page in MMU7 8K-RAM : 0 and 223
  58+ 7B62
  59+ 7B62                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  59+ 7B62             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  59+ 7B62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59+ 7B62             >
  59+ 7B62             >                // dummy db directives used to calculate length of namec
  59+ 7B62 4D 4D 55 37 >                db      "MMU7@"
  59+ 7B66 40          >
  59+ 7B67             >len_NFA         defl    $ - temp_NFA
  59+ 7B67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59+ 7B62             >
  59+ 7B62 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59+ 7B63 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  59+ 7B67 40          >
  59+ 7B68             >                org     $-1                 // alter last byte of Name just above to set
  59+ 7B67 C0          >                db      {b $} | END_BIT     // msb as name end
  59+ 7B68             >
  59+ 7B68 4D 7B       >                dw      last_NFA            // Link to previous definition Name
  59+ 7B6A             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  59+ 7B6A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  59+ 7B6D             >
  59+ 7B6D             >
  59+ 7B6D             >                endif           ; ok        // for other definitions it "points" the correct handler
  59+ 7B6D             >                // Use of "; ok" to suppress "warning[fwdref]"
  59+ 7B6D             >
  59+ 7B6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60+ 7B6D A5 63 57 00                  dw      LIT, 87, REG_FETCH
  60+ 7B71 3F 7B
  61+ 7B73 F7 68                        dw      EXIT
  62+ 7B75
  63+ 7B75              //  ______________________________________________________________________
  64+ 7B75              //
  65+ 7B75              // mmu7!        n --
  66+ 7B75              // set MMU7 8K-RAM page to n given between 0 and 223
  67+ 7B75              // optimized version that uses NEXTREG n,A Z80n op-code.
  68+ 7B75
  69+ 7B75                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  69+ 7B75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ 7B75             >
  69+ 7B75             >                // dummy db directives used to calculate length of namec
  69+ 7B75 4D 4D 55 37 >                db      "MMU7!"
  69+ 7B79 21          >
  69+ 7B7A             >len_NFA         defl    $ - temp_NFA
  69+ 7B7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ 7B75             >
  69+ 7B75 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ 7B76 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  69+ 7B7A 21          >
  69+ 7B7B             >                org     $-1                 // alter last byte of Name just above to set
  69+ 7B7A A1          >                db      {b $} | END_BIT     // msb as name end
  69+ 7B7B             >
  69+ 7B7B 62 7B       >                dw      last_NFA            // Link to previous definition Name
  69+ 7B7D             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 7B7D ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 7B7D ~           >
  69+ 7B7D ~           >
  69+ 7B7D             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 7B7D             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 7B7D             >
  69+ 7B7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 7B7D E1                           pop     hl
  71+ 7B7E 7D                           ld      a, l
  72+ 7B7F ED 92 57                     nextreg 87, a
  73+ 7B82
  74+ 7B82                              next
  74+ 7B82 DD E9       >                jp      (ix)
  75+ 7B84
  76+ 7B84              //  ______________________________________________________________________
  77+ 7B84              //
  78+ 7B84              // >far         ha -- a n
  79+ 7B84              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  80+ 7B84              // take lower bits of H and L as an offset from E000h
  81+ 7B84              // then return address  a  between E000h-FFFFh
  82+ 7B84              // and page number n  between 64-71 (40h-47h)
  83+ 7B84              // For example, in hex:
  84+ 7B84              //   0000 >FAR  gives  40.E000
  85+ 7B84              //   1FFF >FAR  gives  40.FFFF
  86+ 7B84              //   2000 >FAR  gives  41.E000
  87+ 7B84              //   3FFF >FAR  gives  41.FFFF
  88+ 7B84              //   EFFF >FAR  gives  47.EFFF
  89+ 7B84              //   FFFF >FAR  gives  47.FFFF
  90+ 7B84              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  91+ 7B84              //                pop     de
  92+ 7B84              //                ld      a, d
  93+ 7B84              //                and     $E0
  94+ 7B84              //                rlca
  95+ 7B84              //                rlca
  96+ 7B84              //                rlca
  97+ 7B84              //                add     $40
  98+ 7B84              //                ld      l, a
  99+ 7B84              //                ld      h, 0
 100+ 7B84              //                ld      a, d
 101+ 7B84              //                or      $E0
 102+ 7B84              //                ld      d, a
 103+ 7B84              //                push    hl
 104+ 7B84              //                push    de
 105+ 7B84              //                next
 106+ 7B84
 107+ 7B84              //  ______________________________________________________________________
 108+ 7B84              //
 109+ 7B84              // <far         a n  -- ha
 110+ 7B84              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 111+ 7B84              // reverse of >FAR: encodes a FAR address compressing
 112+ 7B84              // to bits 765 of H, lower bits of HL address offset from E000h
 113+ 7B84              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 114+ 7B84              //                pop     de                  // page number in e
 115+ 7B84              //                pop     hl                  // address in hl
 116+ 7B84              //                ld      a, e
 117+ 7B84              //                sub     $40                 // reduced to 0-7
 118+ 7B84              //                rrca
 119+ 7B84              //                rrca
 120+ 7B84              //                rrca
 121+ 7B84              //                ld      d, a                // save to d bits 765
 122+ 7B84              //                ld      a, h                // drops
 123+ 7B84              //                and     $1F
 124+ 7B84              //                or      d
 125+ 7B84              //                ld      h, a
 126+ 7B84              //
 127+ 7B84              //                psh1
 128+ 7B84
 129+ 7B84              //  ______________________________________________________________________
 130+ 7B84              //
 131+ 7B84              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 132+ 7B84              // NextZXOS call wrapper.
 133+ 7B84              //  n1 = hl register parameter value
 134+ 7B84              //  n2 = de register parameter value
 135+ 7B84              //  n3 = bc register parameter value
 136+ 7B84              //  n4 =  a register parameter value
 137+ 7B84              //   a = routine address in ROM 3
 138+ 7B84              // ----
 139+ 7B84              //  n5 = hl returned value
 140+ 7B84              //  n6 = de returned value
 141+ 7B84              //  n7 = bc returned value
 142+ 7B84              //  n8 =  a returned value
 143+ 7B84              //   f
 144+ 7B84                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 144+ 7B84             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7B84             >
 144+ 7B84             >                // dummy db directives used to calculate length of namec
 144+ 7B84 4D 5F 50 33 >                db      "M_P3DOS"
 144+ 7B88 44 4F 53    >
 144+ 7B8B             >len_NFA         defl    $ - temp_NFA
 144+ 7B8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7B84             >
 144+ 7B84 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7B85 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 144+ 7B89 44 4F 53    >
 144+ 7B8C             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7B8B D3          >                db      {b $} | END_BIT     // msb as name end
 144+ 7B8C             >
 144+ 7B8C 75 7B       >                dw      last_NFA            // Link to previous definition Name
 144+ 7B8E             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7B8E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 144+ 7B8E ~           >
 144+ 7B8E ~           >
 144+ 7B8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7B8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7B8E             >
 144+ 7B8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7B8E D1                           pop     de                  // dos call entry address in de
 146+ 7B8F E1                           pop     hl                  // a register
 147+ 7B90 7D                           ld      a, l
 148+ 7B91 D9                           exx
 149+ 7B92 C1                           pop     bc
 150+ 7B93 D1                           pop     de
 151+ 7B94 E1                           pop     hl
 152+ 7B95 D9                           exx
 153+ 7B96
 154+ 7B96 C5                           push    bc
 155+ 7B97 DD E5                        push    ix
 156+ 7B99
 157+ 7B99 ED 73 92 63                  ld      (SP_Saved), sp
 158+ 7B9D 31 61 63                     ld      sp, Cold_origin - 5
 159+ 7BA0 0E 07                        ld      c, 7                // use 7 RAM Bank
 160+ 7BA2
 161+ 7BA2 CF                           rst     08
 162+ 7BA3 94                           db      $94
 163+ 7BA4
 164+ 7BA4 ED 7B 92 63                  ld      sp, (SP_Saved)
 165+ 7BA8 DD E5                        push    ix
 166+ 7BAA E1                           pop     hl
 167+ 7BAB 22 90 63                     ld      (IX_Echo), hl
 168+ 7BAE              //              nop
 169+ 7BAE DD E1                        pop     ix
 170+ 7BB0 E3                           ex      (sp), hl            // hl argument and retrieve bc
 171+ 7BB1 D5                           push    de
 172+ 7BB2 C5                           push    bc
 173+ 7BB3 4D                           ld      c, l
 174+ 7BB4 44                           ld      b, h
 175+ 7BB5
 176+ 7BB5 26 00                        ld      h, 0
 177+ 7BB7 6F                           ld      l, a
 178+ 7BB8 E5                           push    hl
 179+ 7BB9 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 180+ 7BBB 23                           inc     hl                  //  0 for OK ; 1 for ko
 181+ 7BBC
 182+ 7BBC                              psh1
 182+ 7BBC E5          >                push    hl
 182+ 7BBD DD E9       >                jp      (ix)
 183+ 7BBF
 184+ 7BBF              //  ______________________________________________________________________
 185+ 7BBF              //
 186+ 7BBF              // blk-fh
 187+ 7BBF                              Variable_Def BLK_FH,   "BLK-FH",   1
 187+ 7BBF             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 187+ 7BBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ 7BBF             >
 187+ 7BBF             >                // dummy db directives used to calculate length of namec
 187+ 7BBF 42 4C 4B 2D >                db      "BLK-FH"
 187+ 7BC3 46 48       >
 187+ 7BC5             >len_NFA         defl    $ - temp_NFA
 187+ 7BC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ 7BBF             >
 187+ 7BBF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ 7BC0 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 187+ 7BC4 46 48       >
 187+ 7BC6             >                org     $-1                 // alter last byte of Name just above to set
 187+ 7BC5 C8          >                db      {b $} | END_BIT     // msb as name end
 187+ 7BC6             >
 187+ 7BC6 84 7B       >                dw      last_NFA            // Link to previous definition Name
 187+ 7BC8             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 7BC8 CD 09 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 187+ 7BCB             >
 187+ 7BCB             >
 187+ 7BCB             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 7BCB             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 7BCB             >
 187+ 7BCB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 7BCB 01 00       >                dw      1
 188+ 7BCD
 189+ 7BCD                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 189+ 7BCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 189+ 7BCD             >
 189+ 7BCD             >                // dummy db directives used to calculate length of namec
 189+ 7BCD 42 4C 4B 2D >                db      "BLK-FNAME"
 189+ 7BD1 46 4E 41 4D >
 189+ 7BD5 45          >
 189+ 7BD6             >len_NFA         defl    $ - temp_NFA
 189+ 7BD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 189+ 7BCD             >
 189+ 7BCD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 189+ 7BCE 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 189+ 7BD2 46 4E 41 4D >
 189+ 7BD6 45          >
 189+ 7BD7             >                org     $-1                 // alter last byte of Name just above to set
 189+ 7BD6 C5          >                db      {b $} | END_BIT     // msb as name end
 189+ 7BD7             >
 189+ 7BD7 BF 7B       >                dw      last_NFA            // Link to previous definition Name
 189+ 7BD9             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 189+ 7BD9 CD 80 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 189+ 7BDC             >
 189+ 7BDC             >
 189+ 7BDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 189+ 7BDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 189+ 7BDC             >
 189+ 7BDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 190+ 7BDC 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 190+ 7BE0 6F 63 6B 73
 190+ 7BE4 2D 36 34 2E
 190+ 7BE8 62 69 6E 00
 191+ 7BEC 00 00 00...                  ds      24
 192+ 7C04
 193+ 7C04              //  ______________________________________________________________________
 194+ 7C04              //
 195+ 7C04              // blk-seek     n --
 196+ 7C04              // seek block n  within blocks!.bin  file
 197+ 7C04                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 197+ 7C04             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 197+ 7C04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 7C04             >
 197+ 7C04             >                // dummy db directives used to calculate length of namec
 197+ 7C04 42 4C 4B 2D >                db      "BLK-SEEK"
 197+ 7C08 53 45 45 4B >
 197+ 7C0C             >len_NFA         defl    $ - temp_NFA
 197+ 7C0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 7C04             >
 197+ 7C04 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 7C05 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 197+ 7C09 53 45 45 4B >
 197+ 7C0D             >                org     $-1                 // alter last byte of Name just above to set
 197+ 7C0C CB          >                db      {b $} | END_BIT     // msb as name end
 197+ 7C0D             >
 197+ 7C0D CD 7B       >                dw      last_NFA            // Link to previous definition Name
 197+ 7C0F             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 7C0F CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 7C12             >
 197+ 7C12             >
 197+ 7C12             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 7C12             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 7C12             >
 197+ 7C12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 7C12 71 6C 78 79                  dw  BBUF, MMUL
 199+ 7C16 C8 7B DB 6A                  dw  BLK_FH, FETCH
 200+ 7C1A 10 67                        dw  F_SEEK
 201+ 7C1C A5 63 2D 00                  dw  LIT, $2D, QERROR
 201+ 7C20 0E 70
 202+ 7C22 F7 68                        dw  EXIT
 203+ 7C24
 204+ 7C24              //  ______________________________________________________________________
 205+ 7C24              //
 206+ 7C24              // blk-read     n --
 207+ 7C24              // seek block n  within blocks!.bin  file
 208+ 7C24                              Colon_Def BLK_READ, "BLK-READ", is_normal
 208+ 7C24             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 208+ 7C24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 208+ 7C24             >
 208+ 7C24             >                // dummy db directives used to calculate length of namec
 208+ 7C24 42 4C 4B 2D >                db      "BLK-READ"
 208+ 7C28 52 45 41 44 >
 208+ 7C2C             >len_NFA         defl    $ - temp_NFA
 208+ 7C2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 208+ 7C24             >
 208+ 7C24 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 208+ 7C25 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 208+ 7C29 52 45 41 44 >
 208+ 7C2D             >                org     $-1                 // alter last byte of Name just above to set
 208+ 7C2C C4          >                db      {b $} | END_BIT     // msb as name end
 208+ 7C2D             >
 208+ 7C2D 04 7C       >                dw      last_NFA            // Link to previous definition Name
 208+ 7C2F             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 208+ 7C2F CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 208+ 7C32             >
 208+ 7C32             >
 208+ 7C32             >                endif           ; ok        // for other definitions it "points" the correct handler
 208+ 7C32             >                // Use of "; ok" to suppress "warning[fwdref]"
 208+ 7C32             >
 208+ 7C32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 209+ 7C32 0F 7C                        dw  BLK_SEEK
 210+ 7C34 71 6C                        dw  BBUF
 211+ 7C36 C8 7B DB 6A                  dw  BLK_FH, FETCH
 212+ 7C3A 74 67                        dw  F_READ
 213+ 7C3C A5 63 2E 00                  dw  LIT, $2E, QERROR
 213+ 7C40 0E 70
 214+ 7C42 2D 6A                        dw  DROP
 215+ 7C44 F7 68                        dw  EXIT
 216+ 7C46
 217+ 7C46              //  ______________________________________________________________________
 218+ 7C46              //
 219+ 7C46              // blk-write     n --
 220+ 7C46              // seek block n  within blocks!.bin  file
 221+ 7C46                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 221+ 7C46             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 221+ 7C46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 221+ 7C46             >
 221+ 7C46             >                // dummy db directives used to calculate length of namec
 221+ 7C46 42 4C 4B 2D >                db      "BLK-WRITE"
 221+ 7C4A 57 52 49 54 >
 221+ 7C4E 45          >
 221+ 7C4F             >len_NFA         defl    $ - temp_NFA
 221+ 7C4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 221+ 7C46             >
 221+ 7C46 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 221+ 7C47 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 221+ 7C4B 57 52 49 54 >
 221+ 7C4F 45          >
 221+ 7C50             >                org     $-1                 // alter last byte of Name just above to set
 221+ 7C4F C5          >                db      {b $} | END_BIT     // msb as name end
 221+ 7C50             >
 221+ 7C50 24 7C       >                dw      last_NFA            // Link to previous definition Name
 221+ 7C52             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 221+ 7C52 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 221+ 7C55             >
 221+ 7C55             >
 221+ 7C55             >                endif           ; ok        // for other definitions it "points" the correct handler
 221+ 7C55             >                // Use of "; ok" to suppress "warning[fwdref]"
 221+ 7C55             >
 221+ 7C55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 222+ 7C55 0F 7C                        dw  BLK_SEEK
 223+ 7C57 71 6C                        dw  BBUF
 224+ 7C59 C8 7B DB 6A                  dw  BLK_FH, FETCH
 225+ 7C5D 91 67                        dw  F_WRITE
 226+ 7C5F A5 63 2F 00                  dw  LIT, $2F, QERROR
 226+ 7C63 0E 70
 227+ 7C65 2D 6A                        dw  DROP
 228+ 7C67 F7 68                        dw  EXIT
 229+ 7C69
 230+ 7C69              //  ______________________________________________________________________
 231+ 7C69              //
 232+ 7C69              // blk-init     n --
 233+ 7C69              // seek block n  within blocks!.bin  file
 234+ 7C69                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 234+ 7C69             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 234+ 7C69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 234+ 7C69             >
 234+ 7C69             >                // dummy db directives used to calculate length of namec
 234+ 7C69 42 4C 4B 2D >                db      "BLK-INIT"
 234+ 7C6D 49 4E 49 54 >
 234+ 7C71             >len_NFA         defl    $ - temp_NFA
 234+ 7C71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 234+ 7C69             >
 234+ 7C69 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 234+ 7C6A 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 234+ 7C6E 49 4E 49 54 >
 234+ 7C72             >                org     $-1                 // alter last byte of Name just above to set
 234+ 7C71 D4          >                db      {b $} | END_BIT     // msb as name end
 234+ 7C72             >
 234+ 7C72 46 7C       >                dw      last_NFA            // Link to previous definition Name
 234+ 7C74             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 234+ 7C74 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 234+ 7C77             >
 234+ 7C77             >
 234+ 7C77             >                endif           ; ok        // for other definitions it "points" the correct handler
 234+ 7C77             >                // Use of "; ok" to suppress "warning[fwdref]"
 234+ 7C77             >
 234+ 7C77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 235+ 7C77 C8 7B DB 6A                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 235+ 7C7B 31 67 2D 6A
 236+ 7C7F D9 7B AF 69                  dw  BLK_FNAME, ONE_PLUS
 237+ 7C83 34 6E 45 6C                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 237+ 7C87 A6 67
 238+ 7C89 A5 63 2C 00                  dw  LIT, $2C, QERROR
 238+ 7C8D 0E 70
 239+ 7C8F C8 7B E6 6A                  dw  BLK_FH, STORE
 240+ 7C93 F7 68                        dw  EXIT
 241+ 7C95
 242+ 7C95              //  ______________________________________________________________________
 243+ 7C95              //
 244+ 7C95              // #sec
 245+ 7C95              // number of 512-Byte "sectors" available on thie sysstem.
 246+ 7C95              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 247+ 7C95
 248+ 7C95                              Constant_Def NSEC , "#SEC", 32767
 248+ 7C95             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 248+ 7C95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 7C95             >
 248+ 7C95             >                // dummy db directives used to calculate length of namec
 248+ 7C95 23 53 45 43 >                db      "#SEC"
 248+ 7C99             >len_NFA         defl    $ - temp_NFA
 248+ 7C99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 7C95             >
 248+ 7C95 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 7C96 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 248+ 7C9A             >                org     $-1                 // alter last byte of Name just above to set
 248+ 7C99 C3          >                db      {b $} | END_BIT     // msb as name end
 248+ 7C9A             >
 248+ 7C9A 69 7C       >                dw      last_NFA            // Link to previous definition Name
 248+ 7C9C             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 7C9C CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 248+ 7C9F             >
 248+ 7C9F             >
 248+ 7C9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 7C9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 7C9F             >
 248+ 7C9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 248+ 7C9F FF 7F       >                dw      32767
 249+ 7CA1
 250+ 7CA1              //  ______________________________________________________________________
 251+ 7CA1
 252+ 7CA1
 253+ 7CA1
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
 114  7CA1                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
   1+ 7CA1              //  ______________________________________________________________________
   2+ 7CA1              //
   3+ 7CA1              //  L3.asm
   4+ 7CA1              //
   5+ 7CA1              //  Continuation of L2.asm
   6+ 7CA1              //  I/O Block definitions
   7+ 7CA1              //  ______________________________________________________________________
   8+ 7CA1
   9+ 7CA1
  10+ 7CA1              //  ______________________________________________________________________
  11+ 7CA1              //
  12+ 7CA1              // r/w          a n f --
  13+ 7CA1              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7CA1                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7CA1             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7CA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7CA1             >
  14+ 7CA1             >                // dummy db directives used to calculate length of namec
  14+ 7CA1 52 2F 57    >                db      "R/W"
  14+ 7CA4             >len_NFA         defl    $ - temp_NFA
  14+ 7CA4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7CA1             >
  14+ 7CA1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7CA2 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7CA5             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7CA4 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7CA5             >
  14+ 7CA5 95 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7CA7             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7CA7 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7CAA             >
  14+ 7CAA             >
  14+ 7CAA             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7CAA             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7CAA             >
  14+ 7CAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7CAA 21 69                        dw      TO_R                    // >r
  16+ 7CAC B9 69                        dw      ONE_SUBTRACT            // 1-
  17+ 7CAE 5A 6A 6E 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7CB2 1F 6A 9C 7C                  dw      OVER, NSEC              // over #sec
  19+ 7CB6 B9 69 CF 6E                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7CBA A5 68                        dw      OR_OP                   // or
  21+ 7CBC A5 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7CC0 0E 70
  22+ 7CC2 33 69                        dw      R_TO                    // r>
  23+ 7CC4                                                              // if
  24+ 7CC4 D8 63                        dw      ZBRANCH
  25+ 7CC6 08 00                        dw      Read_Write_Else - $
  26+ 7CC8 2F 7C                        dw          BLK_READ            //      blk-read
  27+ 7CCA C3 63                        dw      BRANCH
  28+ 7CCC 04 00                        dw      Read_Write_Endif - $
  29+ 7CCE              Read_Write_Else:                                // else
  30+ 7CCE 52 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CD0              Read_Write_Endif:                               // endif
  32+ 7CD0 F7 68                        dw      EXIT                    // ;
  33+ 7CD2
  34+ 7CD2
  35+ 7CD2              //  ______________________________________________________________________
  36+ 7CD2              //
  37+ 7CD2              // +buf        a1 -- a2 f
  38+ 7CD2              // advences to next buffer, cyclically rotating along them
  39+ 7CD2                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CD2             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CD2             >
  39+ 7CD2             >                // dummy db directives used to calculate length of namec
  39+ 7CD2 2B 42 55 46 >                db      "+BUF"
  39+ 7CD6             >len_NFA         defl    $ - temp_NFA
  39+ 7CD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CD2             >
  39+ 7CD2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CD3 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CD7             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CD6 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CD7             >
  39+ 7CD7 A1 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CD9             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CD9 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CDC             >
  39+ 7CDC             >
  39+ 7CDC             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CDC             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CDC             >
  39+ 7CDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CDC A5 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CE0 92 69
  41+ 7CE2 5A 6A 1E 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CE6 DB 6A
  42+ 7CE8 95 6E                        dw      EQUALS                  // =
  43+ 7CEA                                                              // if
  44+ 7CEA D8 63                        dw      ZBRANCH
  45+ 7CEC 08 00                        dw      PBuf_Endif - $
  46+ 7CEE 2D 6A                        dw          DROP                //      drop
  47+ 7CF0 12 6D DB 6A                  dw          FIRST, FETCH        //      first @
  48+ 7CF4              PBuf_Endif:                                     // endif
  49+ 7CF4 5A 6A E2 6D                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CF8 DB 6A
  50+ 7CFA 89 6E                        dw      SUBTRACT                // -
  51+ 7CFC F7 68                        dw      EXIT                    // ;
  52+ 7CFE
  53+ 7CFE              //  ______________________________________________________________________
  54+ 7CFE              //
  55+ 7CFE              // update       --
  56+ 7CFE              // mark the last used block to be written to disk
  57+ 7CFE                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CFE             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CFE             >
  57+ 7CFE             >                // dummy db directives used to calculate length of namec
  57+ 7CFE 55 50 44 41 >                db      "UPDATE"
  57+ 7D02 54 45       >
  57+ 7D04             >len_NFA         defl    $ - temp_NFA
  57+ 7D04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CFE             >
  57+ 7CFE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CFF 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7D03 54 45       >
  57+ 7D05             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7D04 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7D05             >
  57+ 7D05 D2 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7D07             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7D07 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7D0A             >
  57+ 7D0A             >
  57+ 7D0A             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7D0A             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7D0A             >
  57+ 7D0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7D0A E2 6D DB 6A                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7D0E DB 6A
  59+ 7D10 A5 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7D14 A5 68
  60+ 7D16 E2 6D DB 6A                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7D1A E6 6A
  61+ 7D1C F7 68                        dw      EXIT                    // ;
  62+ 7D1E
  63+ 7D1E
  64+ 7D1E              //  ______________________________________________________________________
  65+ 7D1E              //
  66+ 7D1E              // empty-buffers --
  67+ 7D1E                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7D1E             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7D1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7D1E             >
  67+ 7D1E             >                // dummy db directives used to calculate length of namec
  67+ 7D1E 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7D22 59 2D 42 55 >
  67+ 7D26 46 46 45 52 >
  67+ 7D2A 53          >
  67+ 7D2B             >len_NFA         defl    $ - temp_NFA
  67+ 7D2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7D1E             >
  67+ 7D1E 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7D1F 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7D23 59 2D 42 55 >
  67+ 7D27 46 46 45 52 >
  67+ 7D2B 53          >
  67+ 7D2C             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D2B D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D2C             >
  67+ 7D2C FE 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D2E             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D2E CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D31             >
  67+ 7D31             >
  67+ 7D31             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D31             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D31             >
  67+ 7D31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D31 12 6D DB 6A                  dw      FIRST, FETCH            // first @
  69+ 7D35 1E 6D DB 6A                  dw      LIMIT, FETCH            // limit @
  70+ 7D39 1F 6A 89 6E                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D3D 6A 73
  71+ 7D3F F7 68                        dw      EXIT                    // ;
  72+ 7D41
  73+ 7D41              //  ______________________________________________________________________
  74+ 7D41              //
  75+ 7D41              // buffer       n -- a
  76+ 7D41              // read block n and gives the address to a buffer
  77+ 7D41              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D41              // disk before reading the block n.
  79+ 7D41
  80+ 7D41                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D41             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D41             >
  80+ 7D41             >                // dummy db directives used to calculate length of namec
  80+ 7D41 42 55 46 46 >                db      "BUFFER"
  80+ 7D45 45 52       >
  80+ 7D47             >len_NFA         defl    $ - temp_NFA
  80+ 7D47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D41             >
  80+ 7D41 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D42 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D46 45 52       >
  80+ 7D48             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D47 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D48             >
  80+ 7D48 1E 7D       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D4A             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D4A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D4D             >
  80+ 7D4D             >
  80+ 7D4D             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D4D             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D4D             >
  80+ 7D4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D4D D7 6D DB 6A                  dw      USE, FETCH              // use @
  82+ 7D51 5A 6A 21 69                  dw      DUP, TO_R               // dup >r
  83+ 7D55                                                              // begin
  84+ 7D55              Buffer_Begin:
  85+ 7D55 D9 7C                        dw          PBUF                //      +buf
  86+ 7D57                                                              // until
  87+ 7D57 D8 63                        dw      ZBRANCH
  88+ 7D59 FC FF                        dw      Buffer_Begin - $
  89+ 7D5B D7 6D E6 6A                  dw      USE, STORE              // use !
  90+ 7D5F 45 69 DB 6A                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D63 6E 69
  91+ 7D65                                                              // if
  92+ 7D65 D8 63                        dw      ZBRANCH
  93+ 7D67 14 00                        dw      Buffer_Endif - $
  94+ 7D69 45 69 D1 69                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D6D 45 69 DB 6A                  dw          R_OP, FETCH         //      r fetch
  96+ 7D71 A5 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D75 95 68                        dw          AND_OP              //      and
  98+ 7D77 2A 6C A7 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D7B              Buffer_Endif:                                   // endif
 100+ 7D7B 45 69 E6 6A                  dw      R_OP, STORE             // r !
 101+ 7D7F 45 69 E2 6D                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D83 E6 6A
 102+ 7D85 33 69 D1 69                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D89 F7 68                        dw      EXIT                    // ;
 104+ 7D8B
 105+ 7D8B              //  ______________________________________________________________________
 106+ 7D8B              //
 107+ 7D8B              // block        n -- a
 108+ 7D8B              // Leaves the buffer address that contains the block n.
 109+ 7D8B              // If the block is not already present, it will be loaded from disk
 110+ 7D8B              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D8B              // disk before reading the block n.
 112+ 7D8B              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D8B
 114+ 7D8B                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D8B             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D8B             >
 114+ 7D8B             >                // dummy db directives used to calculate length of namec
 114+ 7D8B 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D8F 4B          >
 114+ 7D90             >len_NFA         defl    $ - temp_NFA
 114+ 7D90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D8B             >
 114+ 7D8B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D8C 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D90 4B          >
 114+ 7D91             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D90 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D91             >
 114+ 7D91 41 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D93             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D93 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D96             >
 114+ 7D96             >
 114+ 7D96             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D96             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D96             >
 114+ 7D96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D96 69 6D DB 6A                  dw      OFFSET, FETCH           // offset @
 116+ 7D9A 92 69 21 69                  dw      PLUS, TO_R              // + >r
 117+ 7D9E E2 6D DB 6A                  dw      PREV, FETCH             // prev @
 118+ 7DA2 5A 6A DB 6A                  dw      DUP, FETCH              // dup @
 119+ 7DA6 45 69 89 6E                  dw      R_OP, SUBTRACT          // r -
 120+ 7DAA 5A 6A 92 69                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7DAE                                                              // if
 122+ 7DAE D8 63                        dw        ZBRANCH
 123+ 7DB0 32 00                        dw        Block_Endif_1 - $
 124+ 7DB2              Block_Begin:                                    //      begin
 125+ 7DB2 D9 7C 54 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7DB6                                                              //          if
 127+ 7DB6 D8 63                        dw          ZBRANCH
 128+ 7DB8 12 00                        dw          Block_Endif_2 - $
 129+ 7DBA 2D 6A                        dw              DROP            //              drop
 130+ 7DBC 45 69 4A 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7DC0 5A 6A                        dw              DUP             //              dup
 132+ 7DC2 45 69 33 6C                  dw              R_OP, ONE       //              r 1
 133+ 7DC6 A7 7C                        dw              READ_WRITE      //              r/w
 134+ 7DC8 E7 69                        dw              TWO_MINUS       //              2-
 135+ 7DCA              Block_Endif_2:                                  //          endif
 136+ 7DCA 5A 6A DB 6A                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DCE 45 69
 137+ 7DD0 89 6E 5A 6A                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DD4 92 69 54 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DD8                                                              //      until
 140+ 7DD8 D8 63                        dw        ZBRANCH
 141+ 7DDA D8 FF                        dw        Block_Begin - $
 142+ 7DDC 5A 6A E2 6D                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DE0 E6 6A
 143+ 7DE2              Block_Endif_1:                                  // endif
 144+ 7DE2 33 69 2D 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DE6 D1 69
 145+ 7DE8 F7 68                        dw      EXIT                    // ;
 146+ 7DEA
 147+ 7DEA              //  ______________________________________________________________________
 148+ 7DEA              //
 149+ 7DEA              // #buff        -- n
 150+ 7DEA              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DEA                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DEA             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DEA             >
 151+ 7DEA             >                // dummy db directives used to calculate length of namec
 151+ 7DEA 23 42 55 46 >                db      "#BUFF"
 151+ 7DEE 46          >
 151+ 7DEF             >len_NFA         defl    $ - temp_NFA
 151+ 7DEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DEA             >
 151+ 7DEA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DEB 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DEF 46          >
 151+ 7DF0             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DEF C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DF0             >
 151+ 7DF0 8B 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DF2             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DF2 CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DF5             >
 151+ 7DF5             >
 151+ 7DF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DF5             >
 151+ 7DF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DF5 07 00       >                dw      7
 152+ 7DF7
 153+ 7DF7              //  ______________________________________________________________________
 154+ 7DF7              //
 155+ 7DF7              // flush        --
 156+ 7DF7                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DF7             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DF7             >
 156+ 7DF7             >                // dummy db directives used to calculate length of namec
 156+ 7DF7 46 4C 55 53 >                db      "FLUSH"
 156+ 7DFB 48          >
 156+ 7DFC             >len_NFA         defl    $ - temp_NFA
 156+ 7DFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DF7             >
 156+ 7DF7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DF8 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DFC 48          >
 156+ 7DFD             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DFC C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DFD             >
 156+ 7DFD EA 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DFF             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DFF CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7E02             >
 156+ 7E02             >
 156+ 7E02             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7E02             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7E02             >
 156+ 7E02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7E02 F2 7D AF 69                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7E06 2A 6C
 158+ 7E08              Flush_Do:                                       // do
 159+ 7E08 5D 64                        dw      C_DO
 160+ 7E0A 2A 6C 4A 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7E0E 2D 6A
 161+ 7E10                                                              // loop
 162+ 7E10 22 64 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7E14 C8 7B DB 6A                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7E18 43 67 2D 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7E1C F7 68                        dw      EXIT                    // exit
 166+ 7E1E
 167+ 7E1E              //  ______________________________________________________________________
 168+ 7E1E              //
 169+ 7E1E              // f_getline    a m fh -- n
 170+ 7E1E              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7E1E              // Address a is left for subsequent processing
 172+ 7E1E              // and n as the actual number of byte read, that is the length of line
 173+ 7E1E                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7E1E             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7E1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7E1E             >
 173+ 7E1E             >                // dummy db directives used to calculate length of namec
 173+ 7E1E 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7E22 54 4C 49 4E >
 173+ 7E26 45          >
 173+ 7E27             >len_NFA         defl    $ - temp_NFA
 173+ 7E27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7E1E             >
 173+ 7E1E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7E1F 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7E23 54 4C 49 4E >
 173+ 7E27 45          >
 173+ 7E28             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7E27 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7E28             >
 173+ 7E28 F7 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E2A             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E2A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E2D             >
 173+ 7E2D             >
 173+ 7E2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E2D             >
 173+ 7E2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E2D 21 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E2F 41 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E31 45 69 58 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E35 A5 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E39 0E 70
 178+ 7E3B
 179+ 7E3B 9F 6A 1F 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E3F AF 69 4F 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E43
 182+ 7E43 45 69 74 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E47 A5 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E4B 0E 70
 184+ 7E4D                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E4D D8 63                        dw      ZBRANCH
 186+ 7E4F 3C 00                        dw      FGetline_Else - $
 187+ 7E51 A5 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E55 46 65
 188+ 7E57 2D 6A 36 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E5B 4F 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E5D A5 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E61 46 65
 191+ 7E63 2D 6A 36 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E67 65 6A DE 6E                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E6B 5A 6A 12 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E6F E6 6A
 194+ 7E71 5A 6A 21 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E75 9F 6A 33 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E79 2A 6C 9D 69                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E7D 33 69 10 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E81 A5 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E85 0E 70
 199+ 7E87                                                              // else
 200+ 7E87 C3 63                        dw      BRANCH
 201+ 7E89 0C 00                        dw      FGetline_Endif - $
 202+ 7E8B              FGetline_Else:
 203+ 7E8B 33 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E8D 9F 6A 93 6A                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E91 2D 6A 2A 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E95              FGetline_Endif:                                 // endif
 207+ 7E95 21 69 5A 6A                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E99 5A 6A
 208+ 7E9B AF 69 4F 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E9F 45 69 FD 67                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7EA3 AF 6A 92 69                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7EA7 2A 6C 4F 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7EAB DC 69 E6 6A                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7EAF 45 69 92 69                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7EB3 B9 69
 214+ 7EB5 4F 6A 45 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7EB9 89 6E
 215+ 7EBB 7C 73                        dw      BLANKS                  // blanks
 216+ 7EBD 33 69                        dw      R_TO                    // r>                   ( n )
 217+ 7EBF F7 68                        dw      EXIT                    // ;
 218+ 7EC1
 219+ 7EC1              //  ______________________________________________________________________
 220+ 7EC1              //
 221+ 7EC1              // f_include    fh --
 222+ 7EC1              // Given a filehandle includes the source from file
 223+ 7EC1                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7EC1             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7EC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7EC1             >
 223+ 7EC1             >                // dummy db directives used to calculate length of namec
 223+ 7EC1 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7EC5 43 4C 55 44 >
 223+ 7EC9 45          >
 223+ 7ECA             >len_NFA         defl    $ - temp_NFA
 223+ 7ECA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7EC1             >
 223+ 7EC1 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7EC2 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7EC6 43 4C 55 44 >
 223+ 7ECA 45          >
 223+ 7ECB             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7ECA C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7ECB             >
 223+ 7ECB 1E 7E       >                dw      last_NFA            // Link to previous definition Name
 223+ 7ECD             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7ECD CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7ED0             >
 223+ 7ED0             >
 223+ 7ED0             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7ED0             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7ED0             >
 223+ 7ED0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7ED0 3E 6D DB 6A                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7ED4 21 69
 225+ 7ED6 48 6D DB 6A                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7EDA 21 69
 226+ 7EDC 07 6E DB 6A                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7EE0 21 69
 227+ 7EE2 45 69                        dw      R_OP                    // r
 228+ 7EE4                                                              // if
 229+ 7EE4 D8 63                        dw      ZBRANCH
 230+ 7EE6 20 00                        dw      FInclude_Else_1 - $
 231+ 7EE8 45 69 58 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7EEC A5 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7EF0 0E 70
 233+ 7EF2 48 6D DB 6A                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7EF6 E7 69                        dw          TWO_MINUS
 235+ 7EF8 12 6E DB 6A                  dw          SPAN, FETCH         //      span @ -
 236+ 7EFC 89 6E                        dw          SUBTRACT
 237+ 7EFE 77 6E 9D 69                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7F02                                                              // else
 239+ 7F02 C3 63                        dw      BRANCH
 240+ 7F04 06 00                        dw      FInclude_Endif_1 - $
 241+ 7F06              FInclude_Else_1:
 242+ 7F06 2A 6C 2A 6C                  dw          ZERO, ZERO          //      0 0
 243+ 7F0A                                                              // endif
 244+ 7F0A              FInclude_Endif_1:
 245+ 7F0A 21 69 21 69                  dw      TO_R, TO_R              // >r >r
 246+ 7F0E 07 6E E6 6A                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7F12              FInclude_Begin:                                 // begin
 248+ 7F12 33 6C 93 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7F16 71 6C
 249+ 7F18 AF 6A 7C 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 250+ 7F1C 4F 6A AF 69                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7F20 4F 6A DC 69                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7F24 07 6E DB 6A                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7F28 2A 7E                        dw          F_GETLINE           //      f_getline
 254+ 7F2A                                                              // while
 255+ 7F2A D8 63                        dw      ZBRANCH
 256+ 7F2C 14 00                        dw      FInclude_Repeat - $
 257+ 7F2E 33 6C 3E 6D                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7F32 E6 6A
 258+ 7F34 2A 6C 48 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7F38 E6 6A
 259+ 7F3A 71 77                        dw          INTERPRET           //      interpret
 260+ 7F3C C3 63                        dw      BRANCH
 261+ 7F3E D4 FF                        dw      FInclude_Begin - $
 262+ 7F40              FInclude_Repeat:                                // repeat
 263+ 7F40 07 6E DB 6A                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F44 2A 6C 07 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F48 E6 6A
 265+ 7F4A 31 67                        dw      F_CLOSE                 // f_close
 266+ 7F4C A5 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F50 0E 70
 267+ 7F52 33 69 33 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F56 33 69
 268+ 7F58 5A 6A 07 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F5C E6 6A
 269+ 7F5E                                                              // if
 270+ 7F5E D8 63                        dw      ZBRANCH
 271+ 7F60 12 00                        dw      FInclude_Else_2 - $
 272+ 7F62 07 6E DB 6A                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F66 10 67                        dw          F_SEEK              //      f_seek
 274+ 7F68 A5 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F6C 0E 70
 275+ 7F6E                                                              // else
 276+ 7F6E C3 63                        dw      BRANCH
 277+ 7F70 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F72              FInclude_Else_2:
 279+ 7F72 93 6A                        dw          TWO_DROP            //      2drop
 280+ 7F74              FInclude_Endif_2:                               // endif
 281+ 7F74 33 69 48 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F78 E6 6A
 282+ 7F7A 33 69 3E 6D                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F7E E6 6A
 283+ 7F80 F7 68                        dw      EXIT                    // ;
 284+ 7F82
 285+ 7F82              //  ______________________________________________________________________
 286+ 7F82              //
 287+ 7F82              // open<         -- fh
 288+ 7F82              // Open the following filename and return it file-handle
 289+ 7F82              // Used in the form OPEN CCCC
 290+ 7F82                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F82             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F82             >
 290+ 7F82             >                // dummy db directives used to calculate length of namec
 290+ 7F82 4F 50 45 4E >                db      "OPEN<"
 290+ 7F86 3C          >
 290+ 7F87             >len_NFA         defl    $ - temp_NFA
 290+ 7F87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F82             >
 290+ 7F82 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F83 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F87 3C          >
 290+ 7F88             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F87 BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F88             >
 290+ 7F88 C1 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F8A             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F8A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F8D             >
 290+ 7F8D             >
 290+ 7F8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F8D             >
 290+ 7F8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F8D 59 6C                        dw      BL
 292+ 7F8F B7 73 C3 71                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F93 1F 6A
 293+ 7F95 92 69 2A 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F99 4F 6A E6 6A
 294+ 7F9D A3 73 33 6C                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7FA1 A6 67
 295+ 7FA3 A5 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7FA7 0E 70                        dw      QERROR                  // ?error
 297+ 7FA9 F7 68                        dw      EXIT                    // ;
 298+ 7FAB
 299+ 7FAB              //  ______________________________________________________________________
 300+ 7FAB              //
 301+ 7FAB              // include      -- cccc
 302+ 7FAB              // Include the following filename
 303+ 7FAB                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7FAB             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7FAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7FAB             >
 303+ 7FAB             >                // dummy db directives used to calculate length of namec
 303+ 7FAB 49 4E 43 4C >                db      "INCLUDE"
 303+ 7FAF 55 44 45    >
 303+ 7FB2             >len_NFA         defl    $ - temp_NFA
 303+ 7FB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7FAB             >
 303+ 7FAB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7FAC 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7FB0 55 44 45    >
 303+ 7FB3             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7FB2 C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7FB3             >
 303+ 7FB3 82 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7FB5             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7FB5 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7FB8             >
 303+ 7FB8             >
 303+ 7FB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7FB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7FB8             >
 303+ 7FB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7FB8 8A 7F                        dw      OPEN_FH                 // open
 305+ 7FBA 5A 6A CD 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7FBE 31 67 2D 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7FC2 F7 68                        dw      EXIT                    // ;
 308+ 7FC4
 309+ 7FC4              //  ______________________________________________________________________
 310+ 7FC4              //
 311+ 7FC4              // needs
 312+ 7FC4              // check for cccc exists in vocabulary
 313+ 7FC4              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7FC4
 315+ 7FC4              // temp filename cccc.f as counted string zero-padded
 316+ 7FC4                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7FC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7FC4             >
 316+ 7FC4             >                // dummy db directives used to calculate length of namec
 316+ 7FC4 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7FC8 53 2D 57    >
 316+ 7FCB             >len_NFA         defl    $ - temp_NFA
 316+ 7FCB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7FC4             >
 316+ 7FC4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7FC5 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7FC9 53 2D 57    >
 316+ 7FCC             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7FCB D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7FCC             >
 316+ 7FCC AB 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7FCE             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7FCE CD 80 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7FD1             >
 316+ 7FD1             >
 316+ 7FD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7FD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7FD1             >
 316+ 7FD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7FD1 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FF4              // temp complete path+filename
 319+ 7FF4                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FF4             >
 319+ 7FF4             >                // dummy db directives used to calculate length of namec
 319+ 7FF4 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FF8 53 2D 46 4E >
 319+ 7FFC             >len_NFA         defl    $ - temp_NFA
 319+ 7FFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FF4             >
 319+ 7FF4 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FF5 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FF9 53 2D 46 4E >
 319+ 7FFD             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FFC CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FFD             >
 319+ 7FFD C4 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FFF             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FFF CD 80 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 8002             >
 319+ 8002             >
 319+ 8002             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 8002             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 8002             >
 319+ 8002             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 8002 00 00 00...                  ds      40
 321+ 802A              // constant path
 322+ 802A                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 802A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 802A             >
 322+ 802A             >                // dummy db directives used to calculate length of namec
 322+ 802A 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 802E 53 2D 49 4E >
 322+ 8032 43          >
 322+ 8033             >len_NFA         defl    $ - temp_NFA
 322+ 8033             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 802A             >
 322+ 802A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 802B 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 802F 53 2D 49 4E >
 322+ 8033 43          >
 322+ 8034             >                org     $-1                 // alter last byte of Name just above to set
 322+ 8033 C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 8034             >
 322+ 8034 F4 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 8036             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 8036 CD 80 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 8039             >
 322+ 8039             >
 322+ 8039             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 8039             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 8039             >
 322+ 8039             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 8039 04 69 6E 63                  db      4, "inc/", 0
 323+ 803D 2F 00
 324+ 803F                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 803F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 803F             >
 324+ 803F             >                // dummy db directives used to calculate length of namec
 324+ 803F 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 8043 53 2D 4C 49 >
 324+ 8047 42          >
 324+ 8048             >len_NFA         defl    $ - temp_NFA
 324+ 8048             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 803F             >
 324+ 803F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 8040 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 8044 53 2D 4C 49 >
 324+ 8048 42          >
 324+ 8049             >                org     $-1                 // alter last byte of Name just above to set
 324+ 8048 C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 8049             >
 324+ 8049 2A 80       >                dw      last_NFA            // Link to previous definition Name
 324+ 804B             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 804B CD 80 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 804E             >
 324+ 804E             >
 324+ 804E             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 804E             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 804E             >
 324+ 804E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 804E 04 6C 69 62                  db      4, "lib/", 0
 325+ 8052 2F 00
 326+ 8054
 327+ 8054              // Concatenate path at a and filename and include it
 328+ 8054              // No error is issued if filename doesn't exist.
 329+ 8054                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 8054             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 8054             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 8054             >
 329+ 8054             >                // dummy db directives used to calculate length of namec
 329+ 8054 4E 45 45 44 >                db      "NEEDS/"
 329+ 8058 53 2F       >
 329+ 805A             >len_NFA         defl    $ - temp_NFA
 329+ 805A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 8054             >
 329+ 8054 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 8055 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 8059 53 2F       >
 329+ 805B             >                org     $-1                 // alter last byte of Name just above to set
 329+ 805A AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 805B             >
 329+ 805B 3F 80       >                dw      last_NFA            // Link to previous definition Name
 329+ 805D             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 805D CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 8060             >
 329+ 8060             >
 329+ 8060             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 8060             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 8060             >
 329+ 8060             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 8060 C3 71 41 6A                  dw      COUNT, TUCK             // n a n
 331+ 8064 FF 7F 4F 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 8068 FD 67
 332+ 806A FF 7F 92 69                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 806E CE 7F AF 69                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 8072 4F 6A
 334+ 8074 A5 63 23 00                  dw      LIT, 35
 335+ 8078 FD 67                        dw      CMOVE
 336+ 807A FF 7F                        dw      NEEDS_FN
 337+ 807C A3 73 33 6C                  dw      PAD, ONE, F_OPEN
 337+ 8080 A6 67
 338+ 8082 54 69                        dw      ZEQUAL
 339+ 8084 D8 63                        dw      ZBRANCH
 340+ 8086 08 00                        dw      Needs_1 - $
 341+ 8088 CD 7E                        dw          F_INCLUDE
 342+ 808A C3 63                        dw      BRANCH
 343+ 808C 04 00                        dw      Needs_2 - $
 344+ 808E              Needs_1:
 345+ 808E              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 808E              //              dw          LIT, 43, MESSAGE
 347+ 808E 2D 6A                        dw          DROP
 348+ 8090              Needs_2:
 349+ 8090 F7 68                        dw      EXIT                    // ;
 350+ 8092
 351+ 8092
 352+ 8092                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 352+ 8092             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 8092             >
 352+ 8092             >                // dummy db directives used to calculate length of namec
 352+ 8092 4E 43 44 4D >                db      "NCDM"
 352+ 8096             >len_NFA         defl    $ - temp_NFA
 352+ 8096             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 8092             >
 352+ 8092 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 8093 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 352+ 8097             >                org     $-1                 // alter last byte of Name just above to set
 352+ 8096 CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 8097             >
 352+ 8097 54 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 8099             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 8099 CD 80 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 809C             >
 352+ 809C             >
 352+ 809C             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 809C             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 809C             >
 352+ 809C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 809C 25 5E 25 26                  db $25, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 353+ 80A0 24 5F 7B 7D
 353+ 80A4 7E
 354+ 80A5
 355+ 80A5                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 355+ 80A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 80A5             >
 355+ 80A5             >                // dummy db directives used to calculate length of namec
 355+ 80A5 4E 44 4F 4D >                db      "NDOM"
 355+ 80A9             >len_NFA         defl    $ - temp_NFA
 355+ 80A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 80A5             >
 355+ 80A5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 80A6 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 355+ 80AA             >                org     $-1                 // alter last byte of Name just above to set
 355+ 80A9 CD          >                db      {b $} | END_BIT     // msb as name end
 355+ 80AA             >
 355+ 80AA 92 80       >                dw      last_NFA            // Link to previous definition Name
 355+ 80AC             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 80AC CD 80 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 355+ 80AF             >
 355+ 80AF             >
 355+ 80AF             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 80AF             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 80AF             >
 355+ 80AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 80AF 3A 3F 2F 2A                  db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 356+ 80B3 7C 5C 3C 3E
 356+ 80B7 22
 357+ 80B8
 358+ 80B8
 359+ 80B8              // Replace illegal character in filename using the map here above
 360+ 80B8              // at the moment we need only  "
 361+ 80B8                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 361+ 80B8             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 361+ 80B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 361+ 80B8             >
 361+ 80B8             >                // dummy db directives used to calculate length of namec
 361+ 80B8 4E 45 45 44 >                db      "NEEDS-CH"
 361+ 80BC 53 2D 43 48 >
 361+ 80C0             >len_NFA         defl    $ - temp_NFA
 361+ 80C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 361+ 80B8             >
 361+ 80B8 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 361+ 80B9 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 361+ 80BD 53 2D 43 48 >
 361+ 80C1             >                org     $-1                 // alter last byte of Name just above to set
 361+ 80C0 C8          >                db      {b $} | END_BIT     // msb as name end
 361+ 80C1             >
 361+ 80C1 A5 80       >                dw      last_NFA            // Link to previous definition Name
 361+ 80C3             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 361+ 80C3 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 361+ 80C6             >
 361+ 80C6             >
 361+ 80C6             >                endif           ; ok        // for other definitions it "points" the correct handler
 361+ 80C6             >                // Use of "; ok" to suppress "warning[fwdref]"
 361+ 80C6             >
 361+ 80C6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 362+ 80C6 C3 71 D9 71                  dw      COUNT, BOUNDS
 363+ 80CA 5D 64                        dw      C_DO
 364+ 80CC              Needs_3:
 365+ 80CC 99 80 AC 80                  dw          NCDM, NDOM, LIT, 9
 365+ 80D0 A5 63 09 00
 366+ 80D4 66 64 F2 6A                  dw          I, CFETCH
 367+ 80D8 7E 65                        dw          C_MAP
 368+ 80DA 66 64 FE 6A                  dw          I, CSTORE
 369+ 80DE              Needs_4:
 370+ 80DE 22 64                        dw      C_LOOP
 371+ 80E0 EC FF                        dw      Needs_3 - $
 372+ 80E2 F7 68                        dw      EXIT
 373+ 80E4
 374+ 80E4
 375+ 80E4              // include  "path/cccc.f" if cccc is not defined
 376+ 80E4              // filename cccc.f is temporary stored at NEEDS-W
 377+ 80E4                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 377+ 80E4             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 377+ 80E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 80E4             >
 377+ 80E4             >                // dummy db directives used to calculate length of namec
 377+ 80E4 4E 45 45 44 >                db      "NEEDS-F"
 377+ 80E8 53 2D 46    >
 377+ 80EB             >len_NFA         defl    $ - temp_NFA
 377+ 80EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 80E4             >
 377+ 80E4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 80E5 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 377+ 80E9 53 2D 46    >
 377+ 80EC             >                org     $-1                 // alter last byte of Name just above to set
 377+ 80EB C6          >                db      {b $} | END_BIT     // msb as name end
 377+ 80EC             >
 377+ 80EC B8 80       >                dw      last_NFA            // Link to previous definition Name
 377+ 80EE             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 80EE CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 80F1             >
 377+ 80F1             >
 377+ 80F1             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 80F1             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 80F1             >
 377+ 80F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 80F1 73 75                        dw      LFIND
 379+ 80F3 D8 63                        dw      ZBRANCH
 380+ 80F5 0A 00                        dw      Needs_5 - $
 381+ 80F7
 382+ 80F7 2D 6A 93 6A                  dw          DROP, TWO_DROP
 383+ 80FB C3 63                        dw      BRANCH
 384+ 80FD 2C 00                        dw      Needs_6 - $
 385+ 80FF              Needs_5:
 386+ 80FF CE 7F                        dw          NEEDS_W
 387+ 8101 A5 63 23 00                  dw          LIT, 35
 388+ 8105 6A 73                        dw          ERASE                   // a
 389+ 8107 34 6E F2 6A                  dw          HERE, CFETCH, ONE_PLUS  // a n
 389+ 810B AF 69
 390+ 810D 34 6E 1F 6A                  dw          HERE, OVER              // a n here n
 391+ 8111 CE 7F 4F 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 391+ 8115 FD 67
 392+ 8117 CE 7F C3 80                  dw          NEEDS_W, NEEDS_CHECK
 393+ 811B CE 7F 92 69                  dw          NEEDS_W, PLUS           // a a1+1
 394+ 811F A5 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 395+ 8123 4F 6A E6 6A                  dw          SWAP, STORE             // a
 396+ 8127 5D 80                        dw          NEEDS_SLASH
 397+ 8129              Needs_6:
 398+ 8129 F7 68                        dw      EXIT
 399+ 812B
 400+ 812B
 401+ 812B              // check for cccc exists in vocabulary
 402+ 812B              // if it doesn't then  INCLUDE  inc/cccc.F
 403+ 812B              // search in inc subdirectory
 404+ 812B                              Colon_Def NEEDS, "NEEDS", is_normal
 404+ 812B             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 404+ 812B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 812B             >
 404+ 812B             >                // dummy db directives used to calculate length of namec
 404+ 812B 4E 45 45 44 >                db      "NEEDS"
 404+ 812F 53          >
 404+ 8130             >len_NFA         defl    $ - temp_NFA
 404+ 8130             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 812B             >
 404+ 812B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 812C 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 404+ 8130 53          >
 404+ 8131             >                org     $-1                 // alter last byte of Name just above to set
 404+ 8130 D3          >                db      {b $} | END_BIT     // msb as name end
 404+ 8131             >
 404+ 8131 E4 80       >                dw      last_NFA            // Link to previous definition Name
 404+ 8133             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 8133 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 404+ 8136             >
 404+ 8136             >
 404+ 8136             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 8136             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 8136             >
 404+ 8136             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 8136 48 6D DB 6A                  dw      TO_IN, FETCH
 406+ 813A 5A 6A                        dw      DUP
 407+ 813C 36 80 EE 80                  dw      NEEDS_INC, NEEDS_PATH
 408+ 8140 48 6D E6 6A                  dw      TO_IN, STORE
 409+ 8144 4B 80 EE 80                  dw      NEEDS_LIB, NEEDS_PATH
 410+ 8148 48 6D E6 6A                  dw      TO_IN, STORE
 411+ 814C 73 75                        dw      LFIND
 412+ 814E D8 63                        dw      ZBRANCH
 413+ 8150 08 00                        dw      Needs_10 - $
 414+ 8152 93 6A                        dw          TWO_DROP
 415+ 8154 C3 63                        dw      BRANCH
 416+ 8156 10 00                        dw      Needs_11 - $
 417+ 8158              Needs_10:
 418+ 8158 CE 7F C3 71                  dw      NEEDS_W, COUNT, TYPE, SPACE
 418+ 815C EB 71 44 6F
 419+ 8160 A5 63 2B 00                  dw      LIT, 43, MESSAGE
 419+ 8164 BB 7A
 420+ 8166              Needs_11:
 421+ 8166 F7 68                        dw      EXIT
 422+ 8168
 423+ 8168
 424+ 8168              //  ______________________________________________________________________
 425+ 8168              //
 426+ 8168              // load+        n --
 427+ 8168                              Colon_Def LOAD_P, "LOAD+", is_normal
 427+ 8168             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 427+ 8168             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ 8168             >
 427+ 8168             >                // dummy db directives used to calculate length of namec
 427+ 8168 4C 4F 41 44 >                db      "LOAD+"
 427+ 816C 2B          >
 427+ 816D             >len_NFA         defl    $ - temp_NFA
 427+ 816D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ 8168             >
 427+ 8168 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ 8169 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 427+ 816D 2B          >
 427+ 816E             >                org     $-1                 // alter last byte of Name just above to set
 427+ 816D AB          >                db      {b $} | END_BIT     // msb as name end
 427+ 816E             >
 427+ 816E 2B 81       >                dw      last_NFA            // Link to previous definition Name
 427+ 8170             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 8170 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 427+ 8173             >
 427+ 8173             >
 427+ 8173             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 8173             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 8173             >
 427+ 8173             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 8173 3E 6D DB 6A                  dw      BLK, FETCH, TO_R        // blk @ >r
 428+ 8177 21 69
 429+ 8179 48 6D DB 6A                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 429+ 817D 21 69
 430+ 817F
 431+ 817F 2A 6C 48 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 431+ 8183 E6 6A
 432+ 8185 7E 6C 1A 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 432+ 8189 3E 6D E6 6A
 433+ 818D 71 77                        dw      INTERPRET               // interpret
 434+ 818F
 435+ 818F 33 69 48 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 435+ 8193 E6 6A
 436+ 8195 33 69 3E 6D                  dw      R_TO, BLK, STORE        // r> blk !
 436+ 8199 E6 6A
 437+ 819B F7 68                        dw      EXIT                    // ;
 438+ 819D
 439+ 819D              //  ______________________________________________________________________
 440+ 819D              //
 441+ 819D              // -->          --
 442+ 819D                              Colon_Def LOAD_NEXT, "-->", is_immediate
 442+ 819D             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 442+ 819D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ 819D             >
 442+ 819D             >                // dummy db directives used to calculate length of namec
 442+ 819D 2D 2D 3E    >                db      "-->"
 442+ 81A0             >len_NFA         defl    $ - temp_NFA
 442+ 81A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ 819D             >
 442+ 819D C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ 819E 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 442+ 81A1             >                org     $-1                 // alter last byte of Name just above to set
 442+ 81A0 BE          >                db      {b $} | END_BIT     // msb as name end
 442+ 81A1             >
 442+ 81A1 68 81       >                dw      last_NFA            // Link to previous definition Name
 442+ 81A3             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 81A3 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 442+ 81A6             >
 442+ 81A6             >
 442+ 81A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 81A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 81A6             >
 442+ 81A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 81A6 8C 70                        dw      QLOADING                // ?loading
 444+ 81A8 2A 6C 48 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 444+ 81AC E6 6A
 445+ 81AE 7E 6C                        dw      BSCR                    // b/scr
 446+ 81B0 3E 6D DB 6A                  dw      BLK, FETCH              // blk @
 447+ 81B4 1F 6A                        dw      OVER                    // over
 448+ 81B6 4A 7A                        dw      MOD                     // mod
 449+ 81B8 89 6E                        dw      SUBTRACT                // -
 450+ 81BA 3E 6D BC 6A                  dw      BLK, PLUSSTORE          // +!
 451+ 81BE F7 68                        dw      EXIT                    // ;
 452+ 81C0
 453+ 81C0              //  ______________________________________________________________________
 454+ 81C0              //
 455+ 81C0              // '            -- xt
 456+ 81C0                              Colon_Def TICK, "'", is_normal
 456+ 81C0             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 456+ 81C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 456+ 81C0             >
 456+ 81C0             >                // dummy db directives used to calculate length of namec
 456+ 81C0 27          >                db      "'"
 456+ 81C1             >len_NFA         defl    $ - temp_NFA
 456+ 81C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 456+ 81C0             >
 456+ 81C0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 456+ 81C1 27          >                db      "'"               // name string in 7-bit ascii, but
 456+ 81C2             >                org     $-1                 // alter last byte of Name just above to set
 456+ 81C1 A7          >                db      {b $} | END_BIT     // msb as name end
 456+ 81C2             >
 456+ 81C2 9D 81       >                dw      last_NFA            // Link to previous definition Name
 456+ 81C4             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 456+ 81C4 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 456+ 81C7             >
 456+ 81C7             >
 456+ 81C7             >                endif           ; ok        // for other definitions it "points" the correct handler
 456+ 81C7             >                // Use of "; ok" to suppress "warning[fwdref]"
 456+ 81C7             >
 456+ 81C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 457+ 81C7 73 75                        dw      LFIND                   // -find
 458+ 81C9 54 69                        dw      ZEQUAL                  // 0=
 459+ 81CB 2A 6C 0E 70                  dw      ZERO, QERROR            // 0 ?error
 460+ 81CF 2D 6A                        dw      DROP                    // drop
 461+ 81D1 F7 68                        dw      EXIT                    // ;
 462+ 81D3
 463+ 81D3              //  ______________________________________________________________________
 464+ 81D3              //
 465+ 81D3              // forget       -- cccc
 466+ 81D3                              Colon_Def FORGET, "FORGET", is_normal
 466+ 81D3             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 466+ 81D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 466+ 81D3             >
 466+ 81D3             >                // dummy db directives used to calculate length of namec
 466+ 81D3 46 4F 52 47 >                db      "FORGET"
 466+ 81D7 45 54       >
 466+ 81D9             >len_NFA         defl    $ - temp_NFA
 466+ 81D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 466+ 81D3             >
 466+ 81D3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 466+ 81D4 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 466+ 81D8 45 54       >
 466+ 81DA             >                org     $-1                 // alter last byte of Name just above to set
 466+ 81D9 D4          >                db      {b $} | END_BIT     // msb as name end
 466+ 81DA             >
 466+ 81DA C0 81       >                dw      last_NFA            // Link to previous definition Name
 466+ 81DC             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 466+ 81DC CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 466+ 81DF             >
 466+ 81DF             >
 466+ 81DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 466+ 81DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 466+ 81DF             >
 466+ 81DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 467+ 81DF 85 6D DB 6A                  dw      CURRENT, FETCH          // current @
 468+ 81E3 77 6D DB 6A                  dw      CONTEXT, FETCH          // context @
 469+ 81E7 89 6E A5 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 469+ 81EB 17 00 0E 70
 470+ 81EF C4 81 D9 6F                  dw      TICK, TO_BODY           // ' >body
 471+ 81F3 5A 6A EE 6C                  dw      DUP, FENCE, FETCH       // dup fence @
 471+ 81F7 DB 6A
 472+ 81F9 A3 6E A5 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 472+ 81FD 15 00 0E 70
 473+ 8201 5A 6A AD 6F                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 473+ 8205 F7 6C E6 6A
 474+ 8209 8D 6F DB 6A                  dw      LFA, FETCH              // lfa @
 475+ 820D 77 6D DB 6A                  dw      CONTEXT, FETCH, STORE   // context @ !
 475+ 8211 E6 6A
 476+ 8213 F7 68                        dw      EXIT                    // ;
 477+ 8215
 478+ 8215              //  ______________________________________________________________________
 479+ 8215              //
 480+ 8215              // marker       -- cccc
 481+ 8215                              Colon_Def MARKER, "MARKER", is_immediate
 481+ 8215             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 481+ 8215             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ 8215             >
 481+ 8215             >                // dummy db directives used to calculate length of namec
 481+ 8215 4D 41 52 4B >                db      "MARKER"
 481+ 8219 45 52       >
 481+ 821B             >len_NFA         defl    $ - temp_NFA
 481+ 821B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ 8215             >
 481+ 8215 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ 8216 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 481+ 821A 45 52       >
 481+ 821C             >                org     $-1                 // alter last byte of Name just above to set
 481+ 821B D2          >                db      {b $} | END_BIT     // msb as name end
 481+ 821C             >
 481+ 821C D3 81       >                dw      last_NFA            // Link to previous definition Name
 481+ 821E             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 821E CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 8221             >
 481+ 8221             >
 481+ 8221             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 8221             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 8221             >
 481+ 8221             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 8221 8B 71                        dw      CBUILDS
 483+ 8223 06 6D DB 6A                  dw      VOC_LINK, FETCH, COMMA
 483+ 8227 52 6E
 484+ 8229 85 6D DB 6A                  dw      CURRENT, FETCH, COMMA
 484+ 822D 52 6E
 485+ 822F 77 6D DB 6A                  dw      CONTEXT, FETCH, COMMA
 485+ 8233 52 6E
 486+ 8235 7C 6F 52 6E                  dw      LATEST, COMMA
 487+ 8239 7C 6F C2 6F                  dw      LATEST, PFA, LFA, FETCH, COMMA
 487+ 823D 8D 6F DB 6A
 487+ 8241 52 6E
 488+ 8243 9C 71                        dw      DOES_TO
 489+ 8245 5A 6A DB 6A                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 489+ 8249 06 6D E6 6A
 489+ 824D D1 69
 490+ 824F 5A 6A DB 6A                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 490+ 8253 85 6D E6 6A
 490+ 8257 D1 69
 491+ 8259 5A 6A DB 6A                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 491+ 825D 77 6D E6 6A
 491+ 8261 D1 69
 492+ 8263 5A 6A DB 6A                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 492+ 8267 F7 6C E6 6A
 492+ 826B D1 69
 493+ 826D DB 6A 85 6D                  dw           FETCH, CURRENT, FETCH, STORE
 493+ 8271 DB 6A E6 6A
 494+ 8275 F7 68                        dw      EXIT
 495+ 8277
 496+ 8277              //  ______________________________________________________________________
 497+ 8277              //
 498+ 8277              // spaces       n --
 499+ 8277                              Colon_Def SPACES, "SPACES", is_normal
 499+ 8277             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 499+ 8277             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 499+ 8277             >
 499+ 8277             >                // dummy db directives used to calculate length of namec
 499+ 8277 53 50 41 43 >                db      "SPACES"
 499+ 827B 45 53       >
 499+ 827D             >len_NFA         defl    $ - temp_NFA
 499+ 827D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 499+ 8277             >
 499+ 8277 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 499+ 8278 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 499+ 827C 45 53       >
 499+ 827E             >                org     $-1                 // alter last byte of Name just above to set
 499+ 827D D3          >                db      {b $} | END_BIT     // msb as name end
 499+ 827E             >
 499+ 827E 15 82       >                dw      last_NFA            // Link to previous definition Name
 499+ 8280             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 499+ 8280 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 499+ 8283             >
 499+ 8283             >
 499+ 8283             >                endif           ; ok        // for other definitions it "points" the correct handler
 499+ 8283             >                // Use of "; ok" to suppress "warning[fwdref]"
 499+ 8283             >
 499+ 8283             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 500+ 8283 2A 6C F5 6E                  dw      ZERO, MAX
 501+ 8287 2A 6C 31 64                  dw      ZERO, C_Q_DO
 502+ 828B 08 00                        dw      Spaces_Leave - $
 503+ 828D              Spaces_Loop:
 504+ 828D 44 6F                        dw          SPACE
 505+ 828F 22 64                        dw      C_LOOP
 506+ 8291 FC FF                        dw      Spaces_Loop - $
 507+ 8293              Spaces_Leave:
 508+ 8293 F7 68                        dw      EXIT                    // ;
 509+ 8295
 510+ 8295              //  ______________________________________________________________________
 511+ 8295              //
 512+ 8295              // <#           --
 513+ 8295                              Colon_Def BEGIN_DASH, "<#", is_normal
 513+ 8295             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 513+ 8295             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 513+ 8295             >
 513+ 8295             >                // dummy db directives used to calculate length of namec
 513+ 8295 3C 23       >                db      "<#"
 513+ 8297             >len_NFA         defl    $ - temp_NFA
 513+ 8297             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 513+ 8295             >
 513+ 8295 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 513+ 8296 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 513+ 8298             >                org     $-1                 // alter last byte of Name just above to set
 513+ 8297 A3          >                db      {b $} | END_BIT     // msb as name end
 513+ 8298             >
 513+ 8298 77 82       >                dw      last_NFA            // Link to previous definition Name
 513+ 829A             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 513+ 829A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 513+ 829D             >
 513+ 829D             >
 513+ 829D             >                endif           ; ok        // for other definitions it "points" the correct handler
 513+ 829D             >                // Use of "; ok" to suppress "warning[fwdref]"
 513+ 829D             >
 513+ 829D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 514+ 829D A3 73 CD 6D                  dw      PAD, HLD, STORE
 514+ 82A1 E6 6A
 515+ 82A3 F7 68                        dw      EXIT
 516+ 82A5
 517+ 82A5              //  ______________________________________________________________________
 518+ 82A5              //
 519+ 82A5              // #>           --
 520+ 82A5                              Colon_Def DASH_END, "#>", is_normal
 520+ 82A5             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 520+ 82A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 520+ 82A5             >
 520+ 82A5             >                // dummy db directives used to calculate length of namec
 520+ 82A5 23 3E       >                db      "#>"
 520+ 82A7             >len_NFA         defl    $ - temp_NFA
 520+ 82A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 520+ 82A5             >
 520+ 82A5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 520+ 82A6 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 520+ 82A8             >                org     $-1                 // alter last byte of Name just above to set
 520+ 82A7 BE          >                db      {b $} | END_BIT     // msb as name end
 520+ 82A8             >
 520+ 82A8 95 82       >                dw      last_NFA            // Link to previous definition Name
 520+ 82AA             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 520+ 82AA CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 520+ 82AD             >
 520+ 82AD             >
 520+ 82AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 520+ 82AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 520+ 82AD             >
 520+ 82AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 521+ 82AD 93 6A                        dw      TWO_DROP
 522+ 82AF CD 6D DB 6A                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 522+ 82B3 A3 73 1F 6A
 522+ 82B7 89 6E
 523+ 82B9 F7 68                        dw      EXIT
 524+ 82BB
 525+ 82BB              //  ______________________________________________________________________
 526+ 82BB              //
 527+ 82BB              // sign         n d -- d
 528+ 82BB                              Colon_Def SIGN, "SIGN", is_normal
 528+ 82BB             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 528+ 82BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 528+ 82BB             >
 528+ 82BB             >                // dummy db directives used to calculate length of namec
 528+ 82BB 53 49 47 4E >                db      "SIGN"
 528+ 82BF             >len_NFA         defl    $ - temp_NFA
 528+ 82BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 528+ 82BB             >
 528+ 82BB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 528+ 82BC 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 528+ 82C0             >                org     $-1                 // alter last byte of Name just above to set
 528+ 82BF CE          >                db      {b $} | END_BIT     // msb as name end
 528+ 82C0             >
 528+ 82C0 A5 82       >                dw      last_NFA            // Link to previous definition Name
 528+ 82C2             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 528+ 82C2 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 528+ 82C5             >
 528+ 82C5             >
 528+ 82C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 528+ 82C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 528+ 82C5             >
 528+ 82C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 529+ 82C5 65 6A 6E 69                  dw      ROT, ZLESS
 530+ 82C9 D8 63                        dw      ZBRANCH
 531+ 82CB 08 00                        dw      Sign_Endif - $
 532+ 82CD A5 63 2D 00                  dw          LIT, 45, HOLD
 532+ 82D1 8C 73
 533+ 82D3              Sign_Endif:
 534+ 82D3 F7 68                        dw      EXIT
 535+ 82D5
 536+ 82D5              //  ______________________________________________________________________
 537+ 82D5              //
 538+ 82D5              // #           d1 -- d2
 539+ 82D5                              Colon_Def DASH, "#", is_normal
 539+ 82D5             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 539+ 82D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 539+ 82D5             >
 539+ 82D5             >                // dummy db directives used to calculate length of namec
 539+ 82D5 23          >                db      "#"
 539+ 82D6             >len_NFA         defl    $ - temp_NFA
 539+ 82D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 539+ 82D5             >
 539+ 82D5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 539+ 82D6 23          >                db      "#"               // name string in 7-bit ascii, but
 539+ 82D7             >                org     $-1                 // alter last byte of Name just above to set
 539+ 82D6 A3          >                db      {b $} | END_BIT     // msb as name end
 539+ 82D7             >
 539+ 82D7 BB 82       >                dw      last_NFA            // Link to previous definition Name
 539+ 82D9             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 539+ 82D9 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 539+ 82DC             >
 539+ 82DC             >
 539+ 82DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 539+ 82DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 539+ 82DC             >
 539+ 82DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 540+ 82DC 9C 6D DB 6A                  dw      BASE, FETCH
 541+ 82E0
 542+ 82E0 21 69                        dw      TO_R                    // >r           ( ud1 )
 543+ 82E2 2A 6C 45 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 543+ 82E6 5B 68
 544+ 82E8 33 69 4F 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 544+ 82EC 21 69
 545+ 82EE 5B 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 546+ 82F0 33 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 547+ 82F2
 548+ 82F2 65 6A                        dw      ROT
 549+ 82F4 A5 63 09 00                  dw      LIT, 9, OVER, LESS
 549+ 82F8 1F 6A B5 6E
 550+ 82FC D8 63                        dw      ZBRANCH
 551+ 82FE 08 00                        dw      Dash_Endif - $
 552+ 8300 A5 63 07 00                  dw          LIT, 7, PLUS
 552+ 8304 92 69
 553+ 8306              Dash_Endif:
 554+ 8306
 555+ 8306 A5 63 30 00                  dw      LIT, 48, PLUS, HOLD
 555+ 830A 92 69 8C 73
 556+ 830E F7 68                        dw      EXIT
 557+ 8310
 558+ 8310              //  ______________________________________________________________________
 559+ 8310              //
 560+ 8310              // #s           d1 -- d2
 561+ 8310                              Colon_Def DASHES, "#S", is_normal
 561+ 8310             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 561+ 8310             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 561+ 8310             >
 561+ 8310             >                // dummy db directives used to calculate length of namec
 561+ 8310 23 53       >                db      "#S"
 561+ 8312             >len_NFA         defl    $ - temp_NFA
 561+ 8312             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 561+ 8310             >
 561+ 8310 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 561+ 8311 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 561+ 8313             >                org     $-1                 // alter last byte of Name just above to set
 561+ 8312 D3          >                db      {b $} | END_BIT     // msb as name end
 561+ 8313             >
 561+ 8313 D5 82       >                dw      last_NFA            // Link to previous definition Name
 561+ 8315             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 561+ 8315 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 561+ 8318             >
 561+ 8318             >
 561+ 8318             >                endif           ; ok        // for other definitions it "points" the correct handler
 561+ 8318             >                // Use of "; ok" to suppress "warning[fwdref]"
 561+ 8318             >
 561+ 8318             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 562+ 8318              Dashes_Begin:
 563+ 8318 D9 82 AF 6A                  dw      DASH, TWO_DUP
 564+ 831C A5 68 54 69                  dw          OR_OP, ZEQUAL
 565+ 8320 D8 63                        dw      ZBRANCH
 566+ 8322 F6 FF                        dw      Dashes_Begin - $
 567+ 8324 F7 68                        dw      EXIT
 568+ 8326
 569+ 8326              //  ______________________________________________________________________
 570+ 8326              //
 571+ 8326              // d.r          d n --
 572+ 8326                              Colon_Def D_DOT_R, "D.R", is_normal
 572+ 8326             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 572+ 8326             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 572+ 8326             >
 572+ 8326             >                // dummy db directives used to calculate length of namec
 572+ 8326 44 2E 52    >                db      "D.R"
 572+ 8329             >len_NFA         defl    $ - temp_NFA
 572+ 8329             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 572+ 8326             >
 572+ 8326 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 572+ 8327 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 572+ 832A             >                org     $-1                 // alter last byte of Name just above to set
 572+ 8329 D2          >                db      {b $} | END_BIT     // msb as name end
 572+ 832A             >
 572+ 832A 10 83       >                dw      last_NFA            // Link to previous definition Name
 572+ 832C             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 572+ 832C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 572+ 832F             >
 572+ 832F             >
 572+ 832F             >                endif           ; ok        // for other definitions it "points" the correct handler
 572+ 832F             >                // Use of "; ok" to suppress "warning[fwdref]"
 572+ 832F             >
 572+ 832F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 573+ 832F 21 69                        dw      TO_R
 574+ 8331 41 6A 6A 79                  dw      TUCK, DABS
 575+ 8335 9A 82 15 83                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 575+ 8339 C2 82 AA 82
 576+ 833D 33 69                        dw      R_TO
 577+ 833F 1F 6A 89 6E                  dw      OVER, SUBTRACT, SPACES, TYPE
 577+ 8343 80 82 EB 71
 578+ 8347 F7 68                        dw      EXIT
 579+ 8349
 580+ 8349              //  ______________________________________________________________________
 581+ 8349              //
 582+ 8349              // .r           n1 n2 --
 583+ 8349                              Colon_Def DOT_R, ".R", is_normal
 583+ 8349             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 583+ 8349             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 583+ 8349             >
 583+ 8349             >                // dummy db directives used to calculate length of namec
 583+ 8349 2E 52       >                db      ".R"
 583+ 834B             >len_NFA         defl    $ - temp_NFA
 583+ 834B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 583+ 8349             >
 583+ 8349 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 583+ 834A 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 583+ 834C             >                org     $-1                 // alter last byte of Name just above to set
 583+ 834B D2          >                db      {b $} | END_BIT     // msb as name end
 583+ 834C             >
 583+ 834C 26 83       >                dw      last_NFA            // Link to previous definition Name
 583+ 834E             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 583+ 834E CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 583+ 8351             >
 583+ 8351             >
 583+ 8351             >                endif           ; ok        // for other definitions it "points" the correct handler
 583+ 8351             >                // Use of "; ok" to suppress "warning[fwdref]"
 583+ 8351             >
 583+ 8351             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 584+ 8351 21 69                        dw      TO_R
 585+ 8353 77 6E 33 69                  dw      S_TO_D, R_TO
 586+ 8357 2C 83                        dw      D_DOT_R
 587+ 8359 F7 68                        dw      EXIT
 588+ 835B
 589+ 835B              //  ______________________________________________________________________
 590+ 835B              //
 591+ 835B              // d.           d --
 592+ 835B                              Colon_Def D_DOT, "D.", is_normal
 592+ 835B             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 592+ 835B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 592+ 835B             >
 592+ 835B             >                // dummy db directives used to calculate length of namec
 592+ 835B 44 2E       >                db      "D."
 592+ 835D             >len_NFA         defl    $ - temp_NFA
 592+ 835D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 592+ 835B             >
 592+ 835B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 592+ 835C 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 592+ 835E             >                org     $-1                 // alter last byte of Name just above to set
 592+ 835D AE          >                db      {b $} | END_BIT     // msb as name end
 592+ 835E             >
 592+ 835E 49 83       >                dw      last_NFA            // Link to previous definition Name
 592+ 8360             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 592+ 8360 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 592+ 8363             >
 592+ 8363             >
 592+ 8363             >                endif           ; ok        // for other definitions it "points" the correct handler
 592+ 8363             >                // Use of "; ok" to suppress "warning[fwdref]"
 592+ 8363             >
 592+ 8363             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 593+ 8363 2A 6C 2C 83                  dw      ZERO, D_DOT_R, SPACE
 593+ 8367 44 6F
 594+ 8369 F7 68                        dw      EXIT
 595+ 836B
 596+ 836B              //  ______________________________________________________________________
 597+ 836B              //
 598+ 836B              // .            n --
 599+ 836B                              Colon_Def DOT, ".", is_normal
 599+ 836B             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 599+ 836B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 599+ 836B             >
 599+ 836B             >                // dummy db directives used to calculate length of namec
 599+ 836B 2E          >                db      "."
 599+ 836C             >len_NFA         defl    $ - temp_NFA
 599+ 836C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 599+ 836B             >
 599+ 836B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 599+ 836C 2E          >                db      "."               // name string in 7-bit ascii, but
 599+ 836D             >                org     $-1                 // alter last byte of Name just above to set
 599+ 836C AE          >                db      {b $} | END_BIT     // msb as name end
 599+ 836D             >
 599+ 836D 5B 83       >                dw      last_NFA            // Link to previous definition Name
 599+ 836F             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 599+ 836F CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 599+ 8372             >
 599+ 8372             >
 599+ 8372             >                endif           ; ok        // for other definitions it "points" the correct handler
 599+ 8372             >                // Use of "; ok" to suppress "warning[fwdref]"
 599+ 8372             >
 599+ 8372             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 600+ 8372 77 6E 60 83                  dw      S_TO_D, D_DOT
 601+ 8376 F7 68                        dw      EXIT
 602+ 8378
 603+ 8378              //  ______________________________________________________________________
 604+ 8378              //
 605+ 8378              // ?            n --
 606+ 8378                              Colon_Def QUESTION, "?", is_normal
 606+ 8378             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 606+ 8378             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 606+ 8378             >
 606+ 8378             >                // dummy db directives used to calculate length of namec
 606+ 8378 3F          >                db      "?"
 606+ 8379             >len_NFA         defl    $ - temp_NFA
 606+ 8379             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 606+ 8378             >
 606+ 8378 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 606+ 8379 3F          >                db      "?"               // name string in 7-bit ascii, but
 606+ 837A             >                org     $-1                 // alter last byte of Name just above to set
 606+ 8379 BF          >                db      {b $} | END_BIT     // msb as name end
 606+ 837A             >
 606+ 837A 6B 83       >                dw      last_NFA            // Link to previous definition Name
 606+ 837C             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 606+ 837C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 606+ 837F             >
 606+ 837F             >
 606+ 837F             >                endif           ; ok        // for other definitions it "points" the correct handler
 606+ 837F             >                // Use of "; ok" to suppress "warning[fwdref]"
 606+ 837F             >
 606+ 837F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 607+ 837F DB 6A 6F 83                  dw      FETCH, DOT
 608+ 8383 F7 68                        dw      EXIT
 609+ 8385
 610+ 8385              //  ______________________________________________________________________
 611+ 8385              //
 612+ 8385              // u.           u --
 613+ 8385                              Colon_Def U_DOT, "U.", is_normal
 613+ 8385             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 613+ 8385             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 613+ 8385             >
 613+ 8385             >                // dummy db directives used to calculate length of namec
 613+ 8385 55 2E       >                db      "U."
 613+ 8387             >len_NFA         defl    $ - temp_NFA
 613+ 8387             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 613+ 8385             >
 613+ 8385 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 613+ 8386 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 613+ 8388             >                org     $-1                 // alter last byte of Name just above to set
 613+ 8387 AE          >                db      {b $} | END_BIT     // msb as name end
 613+ 8388             >
 613+ 8388 78 83       >                dw      last_NFA            // Link to previous definition Name
 613+ 838A             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 613+ 838A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 613+ 838D             >
 613+ 838D             >
 613+ 838D             >                endif           ; ok        // for other definitions it "points" the correct handler
 613+ 838D             >                // Use of "; ok" to suppress "warning[fwdref]"
 613+ 838D             >
 613+ 838D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 614+ 838D 2A 6C 60 83                  dw      ZERO, D_DOT
 615+ 8391 F7 68                        dw      EXIT
 616+ 8393
 617+ 8393              //  ______________________________________________________________________
 618+ 8393              //
 619+ 8393              // words        --
 620+ 8393                              Colon_Def WORDS, "WORDS", is_normal
 620+ 8393             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 620+ 8393             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 620+ 8393             >
 620+ 8393             >                // dummy db directives used to calculate length of namec
 620+ 8393 57 4F 52 44 >                db      "WORDS"
 620+ 8397 53          >
 620+ 8398             >len_NFA         defl    $ - temp_NFA
 620+ 8398             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 620+ 8393             >
 620+ 8393 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 620+ 8394 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 620+ 8398 53          >
 620+ 8399             >                org     $-1                 // alter last byte of Name just above to set
 620+ 8398 D3          >                db      {b $} | END_BIT     // msb as name end
 620+ 8399             >
 620+ 8399 85 83       >                dw      last_NFA            // Link to previous definition Name
 620+ 839B             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 620+ 839B CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 620+ 839E             >
 620+ 839E             >
 620+ 839E             >                endif           ; ok        // for other definitions it "points" the correct handler
 620+ 839E             >                // Use of "; ok" to suppress "warning[fwdref]"
 620+ 839E             >
 620+ 839E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 621+ 839E A5 63 80 00                  dw      LIT, 128, OUT, STORE
 621+ 83A2 52 6D E6 6A
 622+ 83A6 77 6D DB 6A                  dw      CONTEXT, FETCH, FETCH
 622+ 83AA DB 6A
 623+ 83AC              Words_Begin:
 624+ 83AC 5A 6A F2 6A                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 624+ 83B0 A5 63 1F 00
 624+ 83B4 95 68
 625+ 83B6 52 6D DB 6A                  dw          OUT, FETCH, PLUS
 625+ 83BA 92 69
 626+ 83BC 64 6C B5 6E                  dw          CL, LESS, ZEQUAL
 626+ 83C0 54 69
 627+ 83C2 D8 63                        dw          ZBRANCH
 628+ 83C4 0A 00                        dw          Words_Endif - $
 629+ 83C6 F0 67 2A 6C                  dw              CR, ZERO, OUT, STORE
 629+ 83CA 52 6D E6 6A
 630+ 83CE              Words_Endif:
 631+ 83CE 5A 6A E7 75                  dw          DUP, ID_DOT
 632+ 83D2 C2 6F 8D 6F                  dw          PFA, LFA, FETCH
 632+ 83D6 DB 6A
 633+ 83D8 5A 6A 54 69                  dw          DUP, ZEQUAL
 634+ 83DC F0 66 A5 68                  dw          QTERMINAL, OR_OP
 635+ 83E0 D8 63                        dw      ZBRANCH
 636+ 83E2 CA FF                        dw      Words_Begin - $
 637+ 83E4 2D 6A                        dw      DROP
 638+ 83E6 F7 68                        dw      EXIT
 639+ 83E8
 640+ 83E8              //  ______________________________________________________________________
 641+ 83E8              //
 642+ 83E8              // list         n --
 643+ 83E8                              Colon_Def LIST, "LIST", is_normal
 643+ 83E8             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 643+ 83E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ 83E8             >
 643+ 83E8             >                // dummy db directives used to calculate length of namec
 643+ 83E8 4C 49 53 54 >                db      "LIST"
 643+ 83EC             >len_NFA         defl    $ - temp_NFA
 643+ 83EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ 83E8             >
 643+ 83E8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ 83E9 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 643+ 83ED             >                org     $-1                 // alter last byte of Name just above to set
 643+ 83EC D4          >                db      {b $} | END_BIT     // msb as name end
 643+ 83ED             >
 643+ 83ED 93 83       >                dw      last_NFA            // Link to previous definition Name
 643+ 83EF             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 83EF CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 83F2             >
 643+ 83F2             >
 643+ 83F2             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 83F2             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 83F2             >
 643+ 83F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 83F2 3A 71 F0 67                  dw      DECIMAL, CR
 645+ 83F6 5A 6A 5C 6D                  dw      DUP, SCR, STORE
 645+ 83FA E6 6A
 646+ 83FC 07 74                        dw      C_DOT_QUOTE
 647+ 83FE 05 53 63 72                  db      5, "Scr# "
 647+ 8402 23 20
 648+ 8404 6F 83                        dw      DOT
 649+ 8406 8B 6C 2A 6C                  dw      LSCR, ZERO, C_DO
 649+ 840A 5D 64
 650+ 840C              List_Loop:
 651+ 840C F0 67                        dw          CR
 652+ 840E 66 64 45 6C                  dw          I, THREE
 653+ 8412 4E 83 44 6F                  dw          DOT_R, SPACE
 654+ 8416 66 64 5C 6D                  dw          I, SCR, FETCH, DOT_LINE
 654+ 841A DB 6A A6 7A
 655+ 841E F0 66                        dw          QTERMINAL
 656+ 8420 D8 63                        dw          ZBRANCH
 657+ 8422 06 00                        dw          List_Endif - $
 658+ 8424 0D 69                        dw              C_LEAVE
 659+ 8426 06 00                        dw              List_Leave - $
 660+ 8428              List_Endif:
 661+ 8428 22 64                        dw      C_LOOP
 662+ 842A E2 FF                        dw      List_Loop - $
 663+ 842C              List_Leave:
 664+ 842C F0 67                        dw      CR
 665+ 842E F7 68                        dw      EXIT
 666+ 8430
 667+ 8430              //  ______________________________________________________________________
 668+ 8430              //
 669+ 8430              // index        n1 n2 --
 670+ 8430                              Colon_Def INDEX, "INDEX", is_normal
 670+ 8430             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 670+ 8430             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 670+ 8430             >
 670+ 8430             >                // dummy db directives used to calculate length of namec
 670+ 8430 49 4E 44 45 >                db      "INDEX"
 670+ 8434 58          >
 670+ 8435             >len_NFA         defl    $ - temp_NFA
 670+ 8435             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 670+ 8430             >
 670+ 8430 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 670+ 8431 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 670+ 8435 58          >
 670+ 8436             >                org     $-1                 // alter last byte of Name just above to set
 670+ 8435 D8          >                db      {b $} | END_BIT     // msb as name end
 670+ 8436             >
 670+ 8436 E8 83       >                dw      last_NFA            // Link to previous definition Name
 670+ 8438             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 670+ 8438 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 670+ 843B             >
 670+ 843B             >
 670+ 843B             >                endif           ; ok        // for other definitions it "points" the correct handler
 670+ 843B             >                // Use of "; ok" to suppress "warning[fwdref]"
 670+ 843B             >
 670+ 843B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 671+ 843B AF 69 4F 6A                  dw      ONE_PLUS, SWAP, C_DO
 671+ 843F 5D 64
 672+ 8441              Index_Loop:
 673+ 8441 F0 67 66 64                  dw          CR, I, THREE
 673+ 8445 45 6C
 674+ 8447 4E 83 44 6F                  dw          DOT_R, SPACE
 675+ 844B 2A 6C 66 64                  dw          ZERO, I, DOT_LINE
 675+ 844F A6 7A
 676+ 8451 F0 66                        dw          QTERMINAL
 677+ 8453 D8 63                        dw          ZBRANCH
 678+ 8455 06 00                        dw          Index_Endif - $
 679+ 8457 0D 69                        dw              C_LEAVE
 680+ 8459 06 00                        dw              Index_Leave - $
 681+ 845B              Index_Endif:
 682+ 845B 22 64                        dw      C_LOOP
 683+ 845D E4 FF                        dw      Index_Loop - $
 684+ 845F              Index_Leave:
 685+ 845F F0 67                        dw      CR
 686+ 8461 F7 68                        dw      EXIT
 687+ 8463
 688+ 8463              //  ______________________________________________________________________
 689+ 8463              //
 690+ 8463              // cls          --
 691+ 8463                              Colon_Def CLS, "CLS", is_normal
 691+ 8463             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 691+ 8463             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 691+ 8463             >
 691+ 8463             >                // dummy db directives used to calculate length of namec
 691+ 8463 43 4C 53    >                db      "CLS"
 691+ 8466             >len_NFA         defl    $ - temp_NFA
 691+ 8466             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 691+ 8463             >
 691+ 8463 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 691+ 8464 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 691+ 8467             >                org     $-1                 // alter last byte of Name just above to set
 691+ 8466 D3          >                db      {b $} | END_BIT     // msb as name end
 691+ 8467             >
 691+ 8467 30 84       >                dw      last_NFA            // Link to previous definition Name
 691+ 8469             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 691+ 8469 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 691+ 846C             >
 691+ 846C             >
 691+ 846C             >                endif           ; ok        // for other definitions it "points" the correct handler
 691+ 846C             >                // Use of "; ok" to suppress "warning[fwdref]"
 691+ 846C             >
 691+ 846C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 692+ 846C A5 63 0E 00                  dw      LIT, $0E, EMITC
 692+ 8470 D5 65
 693+ 8472 F7 68                        dw      EXIT
 694+ 8474
 695+ 8474              //  ______________________________________________________________________
 696+ 8474              //
 697+ 8474              // splash       --
 698+ 8474                              Colon_Def SPLASH, "SPLASH", is_normal
 698+ 8474             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 698+ 8474             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 698+ 8474             >
 698+ 8474             >                // dummy db directives used to calculate length of namec
 698+ 8474 53 50 4C 41 >                db      "SPLASH"
 698+ 8478 53 48       >
 698+ 847A             >len_NFA         defl    $ - temp_NFA
 698+ 847A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 698+ 8474             >
 698+ 8474 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 698+ 8475 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 698+ 8479 53 48       >
 698+ 847B             >                org     $-1                 // alter last byte of Name just above to set
 698+ 847A C8          >                db      {b $} | END_BIT     // msb as name end
 698+ 847B             >
 698+ 847B 63 84       >                dw      last_NFA            // Link to previous definition Name
 698+ 847D             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 698+ 847D CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 698+ 8480             >
 698+ 8480             >
 698+ 8480             >                endif           ; ok        // for other definitions it "points" the correct handler
 698+ 8480             >                // Use of "; ok" to suppress "warning[fwdref]"
 698+ 8480             >
 698+ 8480             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 699+ 8480 69 84                        dw      CLS
 700+ 8482 07 74                        dw      C_DOT_QUOTE
 701+ 8484 56                           db      86
 702+ 8485 76 2D 46 6F                  db      "v-Forth 1.51 NextZXOS version", 13    // 29
 702+ 8489 72 74 68 20
 702+ 848D 31 2E 35 31
 702+ 8491 20 4E 65 78
 702+ 8495 74 5A 58 4F
 702+ 8499 53 20 76 65
 702+ 849D 72 73 69 6F
 702+ 84A1 6E 0D
 703+ 84A3 44 69 72 65                  db      "Direct Thread - build 20211205", 13  // 31
 703+ 84A7 63 74 20 54
 703+ 84AB 68 72 65 61
 703+ 84AF 64 20 2D 20
 703+ 84B3 62 75 69 6C
 703+ 84B7 64 20 32 30
 703+ 84BB 32 31 31 32
 703+ 84BF 30 35 0D
 704+ 84C2 31 39 39 30                  db      "1990-2021 Matteo Vitturi", 13        // 25
 704+ 84C6 2D 32 30 32
 704+ 84CA 31 20 4D 61
 704+ 84CE 74 74 65 6F
 704+ 84D2 20 56 69 74
 704+ 84D6 74 75 72 69
 704+ 84DA 0D
 705+ 84DB F7 68                        dw      EXIT
 706+ 84DD
 707+ 84DD              //  ______________________________________________________________________
 708+ 84DD              //
 709+ 84DD              // video        --
 710+ 84DD                              Colon_Def VIDEO, "VIDEO", is_normal
 710+ 84DD             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 710+ 84DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 710+ 84DD             >
 710+ 84DD             >                // dummy db directives used to calculate length of namec
 710+ 84DD 56 49 44 45 >                db      "VIDEO"
 710+ 84E1 4F          >
 710+ 84E2             >len_NFA         defl    $ - temp_NFA
 710+ 84E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 710+ 84DD             >
 710+ 84DD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 710+ 84DE 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 710+ 84E2 4F          >
 710+ 84E3             >                org     $-1                 // alter last byte of Name just above to set
 710+ 84E2 CF          >                db      {b $} | END_BIT     // msb as name end
 710+ 84E3             >
 710+ 84E3 74 84       >                dw      last_NFA            // Link to previous definition Name
 710+ 84E5             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 710+ 84E5 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 710+ 84E8             >
 710+ 84E8             >
 710+ 84E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 710+ 84E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 710+ 84E8             >
 710+ 84E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 711+ 84E8 3C 6C 5A 6A                  dw      TWO, DUP, DEVICE, STORE
 711+ 84EC F0 7A E6 6A
 712+ 84F0 20 7B                        dw      SELECT
 713+ 84F2 F7 68                        dw      EXIT
 714+ 84F4
 715+ 84F4              //  ______________________________________________________________________
 716+ 84F4              //
 717+ 84F4              // accept-      a n1 -- n2
 718+ 84F4                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 718+ 84F4             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 718+ 84F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 718+ 84F4             >
 718+ 84F4             >                // dummy db directives used to calculate length of namec
 718+ 84F4 41 43 43 45 >                db      "ACCEPT-"
 718+ 84F8 50 54 2D    >
 718+ 84FB             >len_NFA         defl    $ - temp_NFA
 718+ 84FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 718+ 84F4             >
 718+ 84F4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 718+ 84F5 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 718+ 84F9 50 54 2D    >
 718+ 84FC             >                org     $-1                 // alter last byte of Name just above to set
 718+ 84FB AD          >                db      {b $} | END_BIT     // msb as name end
 718+ 84FC             >
 718+ 84FC DD 84       >                dw      last_NFA            // Link to previous definition Name
 718+ 84FE             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 718+ 84FE CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 718+ 8501             >
 718+ 8501             >
 718+ 8501             >                endif           ; ok        // for other definitions it "points" the correct handler
 718+ 8501             >                // Use of "; ok" to suppress "warning[fwdref]"
 718+ 8501             >
 718+ 8501             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 719+ 8501 21 69                        dw      TO_R
 720+ 8503 2A 6C                        dw      ZERO
 721+ 8505 4F 6A                        dw      SWAP
 722+ 8507 5A 6A                        dw      DUP
 723+ 8509 33 69                        dw      R_TO
 724+ 850B 92 69                        dw      PLUS
 725+ 850D 4F 6A                        dw      SWAP
 726+ 850F 5D 64                        dw      C_DO
 727+ 8511              AcceptN_Loop:
 728+ 8511 6A 7B                        dw          MMU7_FETCH
 729+ 8513 FD 7A                        dw          INKEY
 730+ 8515 4F 6A 7D 7B                  dw          SWAP, MMU7_STORE
 731+ 8519 5A 6A 54 69                  dw          DUP, ZEQUAL
 732+ 851D D8 63                        dw          ZBRANCH
 733+ 851F 06 00                        dw          AcceptN_Endif_1 - $
 734+ 8521 E5 84 36 78                  dw              VIDEO, QUIT
 735+ 8525              AcceptN_Endif_1:
 736+ 8525 5A 6A A5 63                  dw          DUP, LIT, 13, EQUALS
 736+ 8529 0D 00 95 6E
 737+ 852D D8 63                        dw          ZBRANCH
 738+ 852F 06 00                        dw          AcceptN_Endif_2 - $
 739+ 8531 2D 6A 2A 6C                  dw              DROP, ZERO
 740+ 8535              AcceptN_Endif_2:
 741+ 8535 5A 6A A5 63                  dw          DUP, LIT, 10, EQUALS
 741+ 8539 0A 00 95 6E
 742+ 853D D8 63                        dw          ZBRANCH
 743+ 853F 06 00                        dw          AcceptN_Endif_3 - $
 744+ 8541 2D 6A 2A 6C                  dw              DROP, ZERO
 745+ 8545              AcceptN_Endif_3:
 746+ 8545 66 64 FE 6A                  dw          I, CSTORE, ONE_PLUS
 746+ 8549 AF 69
 747+ 854B
 748+ 854B 66 64 F2 6A                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 748+ 854F 54 69
 749+ 8551 D8 63                        dw          ZBRANCH
 750+ 8553 06 00                        dw              AcceptN_Endif_4 - $
 751+ 8555 0D 69                        dw                  C_LEAVE     //              leave
 752+ 8557 06 00                        dw                  AcceptN_Leave - $
 753+ 8559              AcceptN_Endif_4:                                 //      endif
 754+ 8559
 755+ 8559 22 64                        dw      C_LOOP
 756+ 855B B6 FF                        dw      AcceptN_Loop -$
 757+ 855D              AcceptN_Leave:
 758+ 855D F7 68                        dw      EXIT
 759+ 855F
 760+ 855F              //  ______________________________________________________________________
 761+ 855F              //
 762+ 855F              // load-        n --
 763+ 855F              // Provided that a stream n is OPEN# via the standart BASIC
 764+ 855F              // it accepts text from stream #n to the normal INTERPRET
 765+ 855F              // up to now, text-file must end with QUIT
 766+ 855F                              Colon_Def LOAD_N, "LOAD-", is_normal
 766+ 855F             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 766+ 855F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 766+ 855F             >
 766+ 855F             >                // dummy db directives used to calculate length of namec
 766+ 855F 4C 4F 41 44 >                db      "LOAD-"
 766+ 8563 2D          >
 766+ 8564             >len_NFA         defl    $ - temp_NFA
 766+ 8564             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 766+ 855F             >
 766+ 855F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 766+ 8560 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 766+ 8564 2D          >
 766+ 8565             >                org     $-1                 // alter last byte of Name just above to set
 766+ 8564 AD          >                db      {b $} | END_BIT     // msb as name end
 766+ 8565             >
 766+ 8565 F4 84       >                dw      last_NFA            // Link to previous definition Name
 766+ 8567             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 766+ 8567 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 766+ 856A             >
 766+ 856A             >
 766+ 856A             >                endif           ; ok        // for other definitions it "points" the correct handler
 766+ 856A             >                // Use of "; ok" to suppress "warning[fwdref]"
 766+ 856A             >
 766+ 856A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 767+ 856A 07 6E E6 6A                  dw      SOURCE_ID, STORE
 768+ 856E              Load_N_Begin:
 769+ 856E C8 6C DB 6A                  dw          TIB, FETCH
 770+ 8572 5A 6A A5 63                  dw          DUP, LIT, 80
 770+ 8576 50 00
 771+ 8578 AF 6A 7C 73                  dw          TWO_DUP, BLANKS
 772+ 857C 07 6E DB 6A                  dw          SOURCE_ID, FETCH
 773+ 8580 5A 79 5A 6A                  dw          ABS_OP, DUP, DEVICE, STORE
 773+ 8584 F0 7A E6 6A
 774+ 8588 20 7B                        dw          SELECT
 775+ 858A FE 84                        dw          ACCEPT_N
 776+ 858C E5 84                        dw          VIDEO
 777+ 858E 93 6A                        dw          TWO_DROP
 778+ 8590 2A 6C 3E 6D                  dw          ZERO, BLK, STORE
 778+ 8594 E6 6A
 779+ 8596 2A 6C 48 6D                  dw          ZERO, TO_IN, STORE
 779+ 859A E6 6A
 780+ 859C 71 77                        dw          INTERPRET
 781+ 859E F0 66                        dw          QTERMINAL
 782+ 85A0 D8 63                        dw      ZBRANCH
 783+ 85A2 CC FF                        dw      Load_N_Begin - $
 784+ 85A4 F7 68                        dw      EXIT
 785+ 85A6
 786+ 85A6              //  ______________________________________________________________________
 787+ 85A6              //
 788+ 85A6              // load         n --
 789+ 85A6              // if n is positive, it loads screen #n (as usual)
 790+ 85A6              // if n is negative, it connects stream #n to the normal INTERPRET
 791+ 85A6              // this second way is useful if you want to load any kind of file
 792+ 85A6              // provied that it is OPEN# the usual BASIC way.
 793+ 85A6                              Colon_Def LOAD, "LOAD", is_normal
 793+ 85A6             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 793+ 85A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 793+ 85A6             >
 793+ 85A6             >                // dummy db directives used to calculate length of namec
 793+ 85A6 4C 4F 41 44 >                db      "LOAD"
 793+ 85AA             >len_NFA         defl    $ - temp_NFA
 793+ 85AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 793+ 85A6             >
 793+ 85A6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 793+ 85A7 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 793+ 85AB             >                org     $-1                 // alter last byte of Name just above to set
 793+ 85AA C4          >                db      {b $} | END_BIT     // msb as name end
 793+ 85AB             >
 793+ 85AB 5F 85       >                dw      last_NFA            // Link to previous definition Name
 793+ 85AD             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 793+ 85AD CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 793+ 85B0             >
 793+ 85B0             >
 793+ 85B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 793+ 85B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 793+ 85B0             >
 793+ 85B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 794+ 85B0 5A 6A 6E 69                  dw      DUP, ZLESS
 795+ 85B4 D8 63                        dw      ZBRANCH
 796+ 85B6 08 00                        dw      Load_Else - $
 797+ 85B8 67 85                        dw          LOAD_N
 798+ 85BA C3 63                        dw      BRANCH
 799+ 85BC 04 00                        dw      Load_Endif - $
 800+ 85BE              Load_Else:
 801+ 85BE 70 81                        dw          LOAD_P
 802+ 85C0              Load_Endif:
 803+ 85C0 F7 68                        dw      EXIT
 804+ 85C2
 805+ 85C2
 806+ 85C2              //  ______________________________________________________________________
 807+ 85C2              //
 808+ 85C2              // autoexec     --
 809+ 85C2              // this word is called the first time the Forth system boot to
 810+ 85C2              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 811+ 85C2                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 811+ 85C2             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 811+ 85C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 811+ 85C2             >
 811+ 85C2             >                // dummy db directives used to calculate length of namec
 811+ 85C2 41 55 54 4F >                db      "AUTOEXEC"
 811+ 85C6 45 58 45 43 >
 811+ 85CA             >len_NFA         defl    $ - temp_NFA
 811+ 85CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 811+ 85C2             >
 811+ 85C2 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 811+ 85C3 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 811+ 85C7 45 58 45 43 >
 811+ 85CB             >                org     $-1                 // alter last byte of Name just above to set
 811+ 85CA C3          >                db      {b $} | END_BIT     // msb as name end
 811+ 85CB             >
 811+ 85CB A6 85       >                dw      last_NFA            // Link to previous definition Name
 811+ 85CD             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 811+ 85CD CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 811+ 85D0             >
 811+ 85D0             >
 811+ 85D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 811+ 85D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 811+ 85D0             >
 811+ 85D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 812+ 85D0 A5 63 0B 00                  dw      LIT, 11
 813+ 85D4 A5 63 D7 6B                  dw      LIT, NOOP
 814+ 85D8 A5 63 87 78                  dw      LIT, Autoexec_Ptr
 815+ 85DC E6 6A                        dw      STORE
 816+ 85DE AD 85                        dw      LOAD
 817+ 85E0 36 78                        dw      QUIT
 818+ 85E2 F7 68                        dw      EXIT
 819+ 85E4
 820+ 85E4
 821+ 85E4              //  ______________________________________________________________________
 822+ 85E4              //
 823+ 85E4              // bye     --
 824+ 85E4              //
 825+ 85E4                              Colon_Def BYE, "BYE", is_normal
 825+ 85E4             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 825+ 85E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 825+ 85E4             >
 825+ 85E4             >                // dummy db directives used to calculate length of namec
 825+ 85E4 42 59 45    >                db      "BYE"
 825+ 85E7             >len_NFA         defl    $ - temp_NFA
 825+ 85E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 825+ 85E4             >
 825+ 85E4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 825+ 85E5 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 825+ 85E8             >                org     $-1                 // alter last byte of Name just above to set
 825+ 85E7 C5          >                db      {b $} | END_BIT     // msb as name end
 825+ 85E8             >
 825+ 85E8 C2 85       >                dw      last_NFA            // Link to previous definition Name
 825+ 85EA             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 825+ 85EA CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 825+ 85ED             >
 825+ 85ED             >
 825+ 85ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 825+ 85ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 825+ 85ED             >
 825+ 85ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 826+ 85ED FF 7D                        dw      FLUSH
 827+ 85EF 2E 7D                        dw      EMPTY_BUFFERS
 828+ 85F1 C8 7B DB 6A                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 828+ 85F5 31 67 2D 6A
 829+ 85F9 2A 6C 9A 6C                  dw      ZERO, PLUS_ORIGIN
 830+ 85FD 1F 79                        dw      BASIC
 831+ 85FF
 832+ 85FF              //  ______________________________________________________________________
 833+ 85FF              //
 834+ 85FF              // invv     --
 835+ 85FF              //
 836+ 85FF              //              Colon_Def INVV, "INVV", is_normal
 837+ 85FF              //              dw      LIT, 20, EMITC, ONE, EMITC
 838+ 85FF              //              dw      EXIT
 839+ 85FF
 840+ 85FF              //  ______________________________________________________________________
 841+ 85FF              //
 842+ 85FF              // truv     --
 843+ 85FF              //
 844+ 85FF              //              Colon_Def TRUV, "TRUV", is_normal
 845+ 85FF              //              dw      LIT, 20, EMITC, ZERO, EMITC
 846+ 85FF              //              dw      EXIT
 847+ 85FF
 848+ 85FF              //  ______________________________________________________________________
 849+ 85FF              //
 850+ 85FF              // mark     --
 851+ 85FF              //
 852+ 85FF              //              Colon_Def MARK, "MARK", is_normal
 853+ 85FF              //              dw      INVV, TYPE, TRUV
 854+ 85FF              //              dw      EXIT
 855+ 85FF
 856+ 85FF              //  ______________________________________________________________________
 857+ 85FF              //
 858+ 85FF              // back     --
 859+ 85FF              //
 860+ 85FF                              Colon_Def BACK, "BACK", is_normal
 860+ 85FF             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 860+ 85FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 860+ 85FF             >
 860+ 85FF             >                // dummy db directives used to calculate length of namec
 860+ 85FF 42 41 43 4B >                db      "BACK"
 860+ 8603             >len_NFA         defl    $ - temp_NFA
 860+ 8603             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 860+ 85FF             >
 860+ 85FF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 860+ 8600 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 860+ 8604             >                org     $-1                 // alter last byte of Name just above to set
 860+ 8603 CB          >                db      {b $} | END_BIT     // msb as name end
 860+ 8604             >
 860+ 8604 E4 85       >                dw      last_NFA            // Link to previous definition Name
 860+ 8606             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 860+ 8606 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 860+ 8609             >
 860+ 8609             >
 860+ 8609             >                endif           ; ok        // for other definitions it "points" the correct handler
 860+ 8609             >                // Use of "; ok" to suppress "warning[fwdref]"
 860+ 8609             >
 860+ 8609             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 861+ 8609 34 6E 89 6E                  dw      HERE, SUBTRACT, COMMA
 861+ 860D 52 6E
 862+ 860F F7 68                        dw      EXIT
 863+ 8611
 864+ 8611              //  ______________________________________________________________________
 865+ 8611              //
 866+ 8611              // if          ( -- a 2 ) \ compile-time
 867+ 8611              // IF ... THEN
 868+ 8611              // IF ... ELSE ... ENDIF
 869+ 8611                              Colon_Def IF, "IF", is_immediate
 869+ 8611             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 869+ 8611             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 869+ 8611             >
 869+ 8611             >                // dummy db directives used to calculate length of namec
 869+ 8611 49 46       >                db      "IF"
 869+ 8613             >len_NFA         defl    $ - temp_NFA
 869+ 8613             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 869+ 8611             >
 869+ 8611 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 869+ 8612 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 869+ 8614             >                org     $-1                 // alter last byte of Name just above to set
 869+ 8613 C6          >                db      {b $} | END_BIT     // msb as name end
 869+ 8614             >
 869+ 8614 FF 85       >                dw      last_NFA            // Link to previous definition Name
 869+ 8616             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 869+ 8616 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 869+ 8619             >
 869+ 8619             >
 869+ 8619             >                endif           ; ok        // for other definitions it "points" the correct handler
 869+ 8619             >                // Use of "; ok" to suppress "warning[fwdref]"
 869+ 8619             >
 869+ 8619             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 870+ 8619 A7 70 D8 63                  dw      COMPILE, ZBRANCH
 871+ 861D 34 6E 2A 6C                  dw      HERE, ZERO, COMMA
 871+ 8621 52 6E
 872+ 8623 3C 6C                        dw      TWO
 873+ 8625 F7 68                        dw      EXIT
 874+ 8627
 875+ 8627              //  ______________________________________________________________________
 876+ 8627              //
 877+ 8627              // endif        ( a 2 -- ) \ compile-time
 878+ 8627              //
 879+ 8627                              Colon_Def ENDIF, "ENDIF", is_immediate
 879+ 8627             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 879+ 8627             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 879+ 8627             >
 879+ 8627             >                // dummy db directives used to calculate length of namec
 879+ 8627 45 4E 44 49 >                db      "ENDIF"
 879+ 862B 46          >
 879+ 862C             >len_NFA         defl    $ - temp_NFA
 879+ 862C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 879+ 8627             >
 879+ 8627 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 879+ 8628 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 879+ 862C 46          >
 879+ 862D             >                org     $-1                 // alter last byte of Name just above to set
 879+ 862C C6          >                db      {b $} | END_BIT     // msb as name end
 879+ 862D             >
 879+ 862D 11 86       >                dw      last_NFA            // Link to previous definition Name
 879+ 862F             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 879+ 862F CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 879+ 8632             >
 879+ 8632             >
 879+ 8632             >                endif           ; ok        // for other definitions it "points" the correct handler
 879+ 8632             >                // Use of "; ok" to suppress "warning[fwdref]"
 879+ 8632             >
 879+ 8632             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 880+ 8632 29 70                        dw      QCOMP
 881+ 8634 3C 6C 5A 70                  dw      TWO, QPAIRS
 882+ 8638 34 6E 1F 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 882+ 863C 89 6E 4F 6A
 882+ 8640 E6 6A
 883+ 8642 F7 68                        dw      EXIT
 884+ 8644
 885+ 8644              //  ______________________________________________________________________
 886+ 8644              //
 887+ 8644              // then        ( a 2 -- ) \ compile-time
 888+ 8644              //
 889+ 8644                              Colon_Def THEN, "THEN", is_immediate
 889+ 8644             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 889+ 8644             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 889+ 8644             >
 889+ 8644             >                // dummy db directives used to calculate length of namec
 889+ 8644 54 48 45 4E >                db      "THEN"
 889+ 8648             >len_NFA         defl    $ - temp_NFA
 889+ 8648             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 889+ 8644             >
 889+ 8644 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 889+ 8645 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 889+ 8649             >                org     $-1                 // alter last byte of Name just above to set
 889+ 8648 CE          >                db      {b $} | END_BIT     // msb as name end
 889+ 8649             >
 889+ 8649 27 86       >                dw      last_NFA            // Link to previous definition Name
 889+ 864B             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 889+ 864B CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 889+ 864E             >
 889+ 864E             >
 889+ 864E             >                endif           ; ok        // for other definitions it "points" the correct handler
 889+ 864E             >                // Use of "; ok" to suppress "warning[fwdref]"
 889+ 864E             >
 889+ 864E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 890+ 864E 2F 86                        dw      ENDIF
 891+ 8650 F7 68                        dw      EXIT
 892+ 8652
 893+ 8652              //  ______________________________________________________________________
 894+ 8652              //
 895+ 8652              // else        ( a1 2 -- a2 2 ) \ compile-time
 896+ 8652              //
 897+ 8652                              Colon_Def ELSE, "ELSE", is_immediate
 897+ 8652             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 897+ 8652             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ 8652             >
 897+ 8652             >                // dummy db directives used to calculate length of namec
 897+ 8652 45 4C 53 45 >                db      "ELSE"
 897+ 8656             >len_NFA         defl    $ - temp_NFA
 897+ 8656             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ 8652             >
 897+ 8652 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ 8653 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 897+ 8657             >                org     $-1                 // alter last byte of Name just above to set
 897+ 8656 C5          >                db      {b $} | END_BIT     // msb as name end
 897+ 8657             >
 897+ 8657 44 86       >                dw      last_NFA            // Link to previous definition Name
 897+ 8659             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 8659 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 897+ 865C             >
 897+ 865C             >
 897+ 865C             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 865C             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 865C             >
 897+ 865C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 865C 29 70                        dw      QCOMP
 899+ 865E 3C 6C 5A 70                  dw      TWO, QPAIRS
 900+ 8662 A7 70 C3 63                  dw      COMPILE, BRANCH
 901+ 8666 34 6E 2A 6C                  dw      HERE, ZERO, COMMA
 901+ 866A 52 6E
 902+ 866C 4F 6A 3C 6C                  dw      SWAP, TWO, ENDIF
 902+ 8670 2F 86
 903+ 8672 3C 6C                        dw      TWO
 904+ 8674 F7 68                        dw      EXIT
 905+ 8676
 906+ 8676              //  ______________________________________________________________________
 907+ 8676              //
 908+ 8676              // begin        ( -- a 1 ) \ compile-time
 909+ 8676              // BEGIN ... AGAIN
 910+ 8676              // BEGIN ... f UNTIL
 911+ 8676              // BEGIN ... f WHILE ... REPEAT
 912+ 8676                              Colon_Def BEGIN, "BEGIN", is_immediate
 912+ 8676             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 912+ 8676             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 912+ 8676             >
 912+ 8676             >                // dummy db directives used to calculate length of namec
 912+ 8676 42 45 47 49 >                db      "BEGIN"
 912+ 867A 4E          >
 912+ 867B             >len_NFA         defl    $ - temp_NFA
 912+ 867B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 912+ 8676             >
 912+ 8676 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 912+ 8677 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 912+ 867B 4E          >
 912+ 867C             >                org     $-1                 // alter last byte of Name just above to set
 912+ 867B CE          >                db      {b $} | END_BIT     // msb as name end
 912+ 867C             >
 912+ 867C 52 86       >                dw      last_NFA            // Link to previous definition Name
 912+ 867E             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 912+ 867E CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 912+ 8681             >
 912+ 8681             >
 912+ 8681             >                endif           ; ok        // for other definitions it "points" the correct handler
 912+ 8681             >                // Use of "; ok" to suppress "warning[fwdref]"
 912+ 8681             >
 912+ 8681             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 913+ 8681 29 70                        dw      QCOMP
 914+ 8683 34 6E                        dw      HERE
 915+ 8685 3C 6C                        dw      TWO
 916+ 8687 F7 68                        dw      EXIT
 917+ 8689
 918+ 8689              //  ______________________________________________________________________
 919+ 8689              //
 920+ 8689              // again        ( a 1 -- ) \ compile-time
 921+ 8689                              Colon_Def AGAIN, "AGAIN", is_immediate
 921+ 8689             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 921+ 8689             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 921+ 8689             >
 921+ 8689             >                // dummy db directives used to calculate length of namec
 921+ 8689 41 47 41 49 >                db      "AGAIN"
 921+ 868D 4E          >
 921+ 868E             >len_NFA         defl    $ - temp_NFA
 921+ 868E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 921+ 8689             >
 921+ 8689 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 921+ 868A 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 921+ 868E 4E          >
 921+ 868F             >                org     $-1                 // alter last byte of Name just above to set
 921+ 868E CE          >                db      {b $} | END_BIT     // msb as name end
 921+ 868F             >
 921+ 868F 76 86       >                dw      last_NFA            // Link to previous definition Name
 921+ 8691             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 921+ 8691 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 921+ 8694             >
 921+ 8694             >
 921+ 8694             >                endif           ; ok        // for other definitions it "points" the correct handler
 921+ 8694             >                // Use of "; ok" to suppress "warning[fwdref]"
 921+ 8694             >
 921+ 8694             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 922+ 8694 29 70                        dw      QCOMP
 923+ 8696 3C 6C 5A 70                  dw      TWO, QPAIRS
 924+ 869A A7 70 C3 63                  dw      COMPILE, BRANCH
 925+ 869E 06 86                        dw      BACK
 926+ 86A0 F7 68                        dw      EXIT
 927+ 86A2
 928+ 86A2              //  ______________________________________________________________________
 929+ 86A2              //
 930+ 86A2              // until        ( a 1 -- ) \ compile-time
 931+ 86A2                              Colon_Def UNTIL, "UNTIL", is_immediate
 931+ 86A2             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 931+ 86A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 931+ 86A2             >
 931+ 86A2             >                // dummy db directives used to calculate length of namec
 931+ 86A2 55 4E 54 49 >                db      "UNTIL"
 931+ 86A6 4C          >
 931+ 86A7             >len_NFA         defl    $ - temp_NFA
 931+ 86A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 931+ 86A2             >
 931+ 86A2 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 931+ 86A3 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 931+ 86A7 4C          >
 931+ 86A8             >                org     $-1                 // alter last byte of Name just above to set
 931+ 86A7 CC          >                db      {b $} | END_BIT     // msb as name end
 931+ 86A8             >
 931+ 86A8 89 86       >                dw      last_NFA            // Link to previous definition Name
 931+ 86AA             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 931+ 86AA CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 931+ 86AD             >
 931+ 86AD             >
 931+ 86AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 931+ 86AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 931+ 86AD             >
 931+ 86AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 932+ 86AD 29 70                        dw      QCOMP
 933+ 86AF 3C 6C 5A 70                  dw      TWO, QPAIRS
 934+ 86B3 A7 70 D8 63                  dw      COMPILE, ZBRANCH
 935+ 86B7 06 86                        dw      BACK
 936+ 86B9 F7 68                        dw      EXIT
 937+ 86BB
 938+ 86BB              //  ______________________________________________________________________
 939+ 86BB              //
 940+ 86BB              // end          ( a 1 -- ) \ compile-time
 941+ 86BB                              Colon_Def END, "END", is_immediate
 941+ 86BB             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 941+ 86BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 941+ 86BB             >
 941+ 86BB             >                // dummy db directives used to calculate length of namec
 941+ 86BB 45 4E 44    >                db      "END"
 941+ 86BE             >len_NFA         defl    $ - temp_NFA
 941+ 86BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 941+ 86BB             >
 941+ 86BB C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 941+ 86BC 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 941+ 86BF             >                org     $-1                 // alter last byte of Name just above to set
 941+ 86BE C4          >                db      {b $} | END_BIT     // msb as name end
 941+ 86BF             >
 941+ 86BF A2 86       >                dw      last_NFA            // Link to previous definition Name
 941+ 86C1             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 941+ 86C1 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 941+ 86C4             >
 941+ 86C4             >
 941+ 86C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 941+ 86C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 941+ 86C4             >
 941+ 86C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 942+ 86C4 AA 86                        dw      UNTIL
 943+ 86C6 F7 68                        dw      EXIT
 944+ 86C8
 945+ 86C8              //  ______________________________________________________________________
 946+ 86C8              //
 947+ 86C8              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 948+ 86C8                              Colon_Def WHILE, "WHILE", is_immediate
 948+ 86C8             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 948+ 86C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ 86C8             >
 948+ 86C8             >                // dummy db directives used to calculate length of namec
 948+ 86C8 57 48 49 4C >                db      "WHILE"
 948+ 86CC 45          >
 948+ 86CD             >len_NFA         defl    $ - temp_NFA
 948+ 86CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ 86C8             >
 948+ 86C8 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ 86C9 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 948+ 86CD 45          >
 948+ 86CE             >                org     $-1                 // alter last byte of Name just above to set
 948+ 86CD C5          >                db      {b $} | END_BIT     // msb as name end
 948+ 86CE             >
 948+ 86CE BB 86       >                dw      last_NFA            // Link to previous definition Name
 948+ 86D0             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 86D0 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 948+ 86D3             >
 948+ 86D3             >
 948+ 86D3             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 86D3             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 86D3             >
 948+ 86D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 86D3 16 86                        dw      IF
 950+ 86D5              //              dw      TWO_PLUS // ( that is 4 )
 951+ 86D5 9F 6A                        dw      TWO_SWAP
 952+ 86D7 F7 68                        dw      EXIT
 953+ 86D9
 954+ 86D9              //  ______________________________________________________________________
 955+ 86D9              //
 956+ 86D9              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 957+ 86D9                              Colon_Def REPEAT, "REPEAT", is_immediate
 957+ 86D9             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 957+ 86D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 957+ 86D9             >
 957+ 86D9             >                // dummy db directives used to calculate length of namec
 957+ 86D9 52 45 50 45 >                db      "REPEAT"
 957+ 86DD 41 54       >
 957+ 86DF             >len_NFA         defl    $ - temp_NFA
 957+ 86DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 957+ 86D9             >
 957+ 86D9 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 957+ 86DA 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 957+ 86DE 41 54       >
 957+ 86E0             >                org     $-1                 // alter last byte of Name just above to set
 957+ 86DF D4          >                db      {b $} | END_BIT     // msb as name end
 957+ 86E0             >
 957+ 86E0 C8 86       >                dw      last_NFA            // Link to previous definition Name
 957+ 86E2             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 957+ 86E2 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 957+ 86E5             >
 957+ 86E5             >
 957+ 86E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 957+ 86E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 957+ 86E5             >
 957+ 86E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 958+ 86E5 91 86                        dw      AGAIN
 959+ 86E7              //              dw      TWO_MINUS
 960+ 86E7 2F 86                        dw      ENDIF
 961+ 86E9 F7 68                        dw      EXIT
 962+ 86EB
 963+ 86EB              //  ______________________________________________________________________
 964+ 86EB              //
 965+ 86EB              // ?do-
 966+ 86EB              // special version of "BACK" used by ?DO and LOOP
 967+ 86EB                              Colon_Def C_DO_BACK, "?DO-", is_normal
 967+ 86EB             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 967+ 86EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 967+ 86EB             >
 967+ 86EB             >                // dummy db directives used to calculate length of namec
 967+ 86EB 3F 44 4F 2D >                db      "?DO-"
 967+ 86EF             >len_NFA         defl    $ - temp_NFA
 967+ 86EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 967+ 86EB             >
 967+ 86EB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 967+ 86EC 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 967+ 86F0             >                org     $-1                 // alter last byte of Name just above to set
 967+ 86EF AD          >                db      {b $} | END_BIT     // msb as name end
 967+ 86F0             >
 967+ 86F0 D9 86       >                dw      last_NFA            // Link to previous definition Name
 967+ 86F2             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 967+ 86F2 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 967+ 86F5             >
 967+ 86F5             >
 967+ 86F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 967+ 86F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 967+ 86F5             >
 967+ 86F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 968+ 86F5 06 86                        dw      BACK
 969+ 86F7              CDoBack_Begin:
 970+ 86F7 C7 68 BA 6D                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 970+ 86FB DB 6A 89 6E
 971+ 86FF D8 63                        dw      ZBRANCH
 972+ 8701 0A 00                        dw      CDoBack_While - $
 973+ 8703 C3 69 2F 86                  dw          TWO_PLUS, ENDIF
 974+ 8707 C3 63                        dw      BRANCH
 975+ 8709 EE FF                        dw      CDoBack_Begin - $
 976+ 870B              CDoBack_While:
 977+ 870B 6E 70 BA 6D                  dw      QCSP, CSP, STORE
 977+ 870F E6 6A
 978+ 8711 F7 68                        dw      EXIT
 979+ 8713
 980+ 8713              //  ______________________________________________________________________
 981+ 8713              //
 982+ 8713              // do
 983+ 8713              // DO  ... LOOP
 984+ 8713              // DO  ... n +LOOP
 985+ 8713              // ?DO ... LOOP
 986+ 8713              // ?DO ... n +LOOP
 987+ 8713                              Colon_Def DO, "DO", is_immediate
 987+ 8713             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 987+ 8713             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 987+ 8713             >
 987+ 8713             >                // dummy db directives used to calculate length of namec
 987+ 8713 44 4F       >                db      "DO"
 987+ 8715             >len_NFA         defl    $ - temp_NFA
 987+ 8715             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 987+ 8713             >
 987+ 8713 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 987+ 8714 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 987+ 8716             >                org     $-1                 // alter last byte of Name just above to set
 987+ 8715 CF          >                db      {b $} | END_BIT     // msb as name end
 987+ 8716             >
 987+ 8716 EB 86       >                dw      last_NFA            // Link to previous definition Name
 987+ 8718             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 987+ 8718 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 987+ 871B             >
 987+ 871B             >
 987+ 871B             >                endif           ; ok        // for other definitions it "points" the correct handler
 987+ 871B             >                // Use of "; ok" to suppress "warning[fwdref]"
 987+ 871B             >
 987+ 871B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 988+ 871B A7 70 5D 64                  dw      COMPILE, C_DO
 989+ 871F BA 6D DB 6A                  dw      CSP, FETCH, STORE_CSP
 989+ 8723 FA 6F
 990+ 8725 34 6E 45 6C                  dw      HERE, THREE
 991+ 8729 F7 68                        dw      EXIT
 992+ 872B
 993+ 872B              //  ______________________________________________________________________
 994+ 872B              //
 995+ 872B              // loop
 996+ 872B                              Colon_Def LOOP, "LOOP", is_immediate
 996+ 872B             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 996+ 872B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 996+ 872B             >
 996+ 872B             >                // dummy db directives used to calculate length of namec
 996+ 872B 4C 4F 4F 50 >                db      "LOOP"
 996+ 872F             >len_NFA         defl    $ - temp_NFA
 996+ 872F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 996+ 872B             >
 996+ 872B C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 996+ 872C 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 996+ 8730             >                org     $-1                 // alter last byte of Name just above to set
 996+ 872F D0          >                db      {b $} | END_BIT     // msb as name end
 996+ 8730             >
 996+ 8730 13 87       >                dw      last_NFA            // Link to previous definition Name
 996+ 8732             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 996+ 8732 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 996+ 8735             >
 996+ 8735             >
 996+ 8735             >                endif           ; ok        // for other definitions it "points" the correct handler
 996+ 8735             >                // Use of "; ok" to suppress "warning[fwdref]"
 996+ 8735             >
 996+ 8735             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 997+ 8735 45 6C 5A 70                  dw      THREE, QPAIRS
 998+ 8739 A7 70 22 64                  dw      COMPILE, C_LOOP
 999+ 873D F2 86                        dw      C_DO_BACK
1000+ 873F F7 68                        dw      EXIT
1001+ 8741
1002+ 8741              //  ______________________________________________________________________
1003+ 8741              //
1004+ 8741              // +loop
1005+ 8741                              Colon_Def PLOOP, "+LOOP", is_immediate
1005+ 8741             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1005+ 8741             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1005+ 8741             >
1005+ 8741             >                // dummy db directives used to calculate length of namec
1005+ 8741 2B 4C 4F 4F >                db      "+LOOP"
1005+ 8745 50          >
1005+ 8746             >len_NFA         defl    $ - temp_NFA
1005+ 8746             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1005+ 8741             >
1005+ 8741 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1005+ 8742 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1005+ 8746 50          >
1005+ 8747             >                org     $-1                 // alter last byte of Name just above to set
1005+ 8746 D0          >                db      {b $} | END_BIT     // msb as name end
1005+ 8747             >
1005+ 8747 2B 87       >                dw      last_NFA            // Link to previous definition Name
1005+ 8749             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1005+ 8749 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1005+ 874C             >
1005+ 874C             >
1005+ 874C             >                endif           ; ok        // for other definitions it "points" the correct handler
1005+ 874C             >                // Use of "; ok" to suppress "warning[fwdref]"
1005+ 874C             >
1005+ 874C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1006+ 874C 45 6C 5A 70                  dw      THREE, QPAIRS
1007+ 8750 A7 70 EC 63                  dw      COMPILE, C_PLOOP
1008+ 8754 F2 86                        dw      C_DO_BACK
1009+ 8756 F7 68                        dw      EXIT
1010+ 8758
1011+ 8758              //  ______________________________________________________________________
1012+ 8758              //
1013+ 8758              // ?do
1014+ 8758                              Colon_Def QDO, "?DO", is_immediate
1014+ 8758             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1014+ 8758             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1014+ 8758             >
1014+ 8758             >                // dummy db directives used to calculate length of namec
1014+ 8758 3F 44 4F    >                db      "?DO"
1014+ 875B             >len_NFA         defl    $ - temp_NFA
1014+ 875B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1014+ 8758             >
1014+ 8758 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1014+ 8759 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1014+ 875C             >                org     $-1                 // alter last byte of Name just above to set
1014+ 875B CF          >                db      {b $} | END_BIT     // msb as name end
1014+ 875C             >
1014+ 875C 41 87       >                dw      last_NFA            // Link to previous definition Name
1014+ 875E             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1014+ 875E CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1014+ 8761             >
1014+ 8761             >
1014+ 8761             >                endif           ; ok        // for other definitions it "points" the correct handler
1014+ 8761             >                // Use of "; ok" to suppress "warning[fwdref]"
1014+ 8761             >
1014+ 8761             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1015+ 8761 A7 70 31 64                  dw      COMPILE, C_Q_DO
1016+ 8765 BA 6D DB 6A                  dw      CSP, FETCH, STORE_CSP
1016+ 8769 FA 6F
1017+ 876B 34 6E 2A 6C                  dw      HERE, ZERO, COMMA, ZERO
1017+ 876F 52 6E 2A 6C
1018+ 8773 34 6E 45 6C                  dw      HERE, THREE
1019+ 8777 F7 68                        dw      EXIT
1020+ 8779
1021+ 8779              Latest_Definition:
1022+ 8779              //  ______________________________________________________________________
1023+ 8779              //
1024+ 8779              // \
1025+ 8779                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1025+ 8779             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1025+ 8779             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1025+ 8779             >
1025+ 8779             >                // dummy db directives used to calculate length of namec
1025+ 8779 5C          >                db      "\\"
1025+ 877A             >len_NFA         defl    $ - temp_NFA
1025+ 877A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1025+ 8779             >
1025+ 8779 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1025+ 877A 5C          >                db      "\\"               // name string in 7-bit ascii, but
1025+ 877B             >                org     $-1                 // alter last byte of Name just above to set
1025+ 877A DC          >                db      {b $} | END_BIT     // msb as name end
1025+ 877B             >
1025+ 877B 58 87       >                dw      last_NFA            // Link to previous definition Name
1025+ 877D             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1025+ 877D CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1025+ 8780             >
1025+ 8780             >
1025+ 8780             >                endif           ; ok        // for other definitions it "points" the correct handler
1025+ 8780             >                // Use of "; ok" to suppress "warning[fwdref]"
1025+ 8780             >
1025+ 8780             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1026+ 8780 3E 6D DB 6A                  dw      BLK, FETCH
1027+ 8784 D8 63                        dw      ZBRANCH
1028+ 8786 30 00                        dw      Backslash_Else_1 - $
1029+ 8788 3E 6D DB 6A                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1029+ 878C 33 6C CF 6E
1030+ 8790 D8 63                        dw          ZBRANCH
1031+ 8792 18 00                        dw          Backslash_Else_2 - $
1032+ 8794 48 6D DB 6A                  dw              TO_IN, FETCH, CL, MOD, CL
1032+ 8798 64 6C 4A 7A
1032+ 879C 64 6C
1033+ 879E 4F 6A 89 6E                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1033+ 87A2 48 6D BC 6A
1034+ 87A6 C3 63                        dw          BRANCH
1035+ 87A8 0A 00                        dw          Backslash_Endif_2 - $
1036+ 87AA              Backslash_Else_2:
1037+ 87AA 71 6C DC 69                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1037+ 87AE 48 6D E6 6A
1038+ 87B2              Backslash_Endif_2:
1039+ 87B2 C3 63                        dw      BRANCH
1040+ 87B4 0A 00                        dw      Backslash_Endif_1 - $
1041+ 87B6              Backslash_Else_1:
1042+ 87B6 A5 63 50 00                  dw          LIT, 80, TO_IN, STORE
1042+ 87BA 48 6D E6 6A
1043+ 87BE              Backslash_Endif_1:
1044+ 87BE F7 68                        dw      EXIT
1045+ 87C0
1046+ 87C0              Fence_Word:
1047+ 87C0              //  ______________________________________________________________________
1048+ 87C0              //
1049+ 87C0
1050+ 87C0 00           Here_Dictionary db      0
1051+ 87C1
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
 115  87C1
 116  87C1              // now we save the compiled file so we can either run it or debug it
 117  87C1                              SAVENEX OPEN "output/main.nex", ORIGIN
 118  87C1                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 119  87C1                              SAVENEX CFG  0
 120  87C1                              SAVENEX BANK 2, 0
 121  87C1                              SAVENEX AUTO
 122  87C1                              SAVENEX CLOSE
 123  87C1
 124  87C1              //              PAGE 7 ;set 7 page to current slot
 125  87C1              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 126  87C1              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 127  87C1
 128  87C1                              SAVETAP "output/F15f.tap", CODE, "forth15f", ORIGIN, 10000
 129  87C1
 130  87C1                              SAVEBIN "output/forth15f.bin", ORIGIN, 10000
 131  87C1
 132  87C1                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
