# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.6 NextZXOS version
   7  0000              //  build 20220227
   8  0000              //
   9  0000              //  Direct-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2022
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000              //ORIGIN          equ     $8CC1                   // for binary comparison
  69  0000                              endif
  70  0000              //  ______________________________________________________________________
  71  0000
  72  0000                              if (  0 == DEBUGGING )
  73  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  74  0000                              endif
  75  0000              //  ______________________________________________________________________
  76  0000
  77  0000                              if (  1 == DEBUGGING )
  78  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  79  0000                              endif
  80  0000              //  ______________________________________________________________________
  81  0000
  82  0000                              DEVICE  ZXSPECTRUMNEXT
  83  0000
  84  0000                              ORG     ORIGIN
  85  62E6
  86  62E6                              if ( -1 == DEBUGGING )
  87  62E6 00 00 00...                  ds 128                            // for binary comparison
  88  62EA                              endif
  89  6366
  90  6366              //  ______________________________________________________________________
  91  6366              //
  92  6366              //  Naming convention for Label vs Forth correspondance
  93  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  94  6366              //    - Leading "0" is converted into "Z_"
  95  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  96  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  97  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  98  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  99  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 100  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 101  6366              //    - Equal sign "=" is converted in EQUAL
 102  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 103  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 104  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 105  6366              //    - Exclamation mark "!" is converted in STORE
 106  6366              //    - At-Sign "@" is converted in FETCH
 107  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 108  6366
 109  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~
 125+ 6366 ~
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
 110  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 12 79                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 12 79                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 44 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 8B 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 8B 87        DP_origin       dw      Fence_Word
  39+ 6386 1A 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E
 100+ 639E
 101+ 639E
 102+ 639E
 103+ 639E E9                           jp      (hl)                // and jump to it
 104+ 639F                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 639F
 106+ 639F              //  ______________________________________________________________________
 107+ 639F              //
 108+ 639F              // lit          -- x
 109+ 639F              // puts on top of stack the value of the following word.
 110+ 639F              // it is compiled in colon definition before a literal number
 111+ 639F
 112+ 639F                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 639F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 639F             >
 112+ 639F             >                // dummy db directives used to calculate length of namec
 112+ 639F 4C 49 54    >                db      "LIT"
 112+ 63A2             >len_NFA         defl    $ - temp_NFA
 112+ 63A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 639F             >
 112+ 639F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A0 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A3             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A2 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A3             >
 112+ 63A3 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A5             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 112+ 63A5 ~           >
 112+ 63A5 ~           >
 112+ 63A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63A5             >
 112+ 63A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63A5
 114+ 63A5 0A                           ld      a, (bc)
 115+ 63A6 03                           inc     bc
 116+ 63A7 6F                           ld      l, a
 117+ 63A8 0A                           ld      a, (bc)
 118+ 63A9 03                           inc     bc
 119+ 63AA 67                           ld      h, a
 120+ 63AB                              psh1
 120+ 63AB E5          >                push    hl
 120+ 63AC DD E9       >                jp      (ix)
 121+ 63AE
 122+ 63AE              //  ______________________________________________________________________
 123+ 63AE              //
 124+ 63AE              // execute      i*x xt -- j*x
 125+ 63AE              // execution token. usually xt is given by CFA
 126+ 63AE
 127+ 63AE                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63AE             >
 127+ 63AE             >                // dummy db directives used to calculate length of namec
 127+ 63AE 45 58 45 43 >                db      "EXECUTE"
 127+ 63B2 55 54 45    >
 127+ 63B5             >len_NFA         defl    $ - temp_NFA
 127+ 63B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63AE             >
 127+ 63AE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63AF 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B3 55 54 45    >
 127+ 63B6             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63B5 C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63B6             >
 127+ 63B6 9F 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63B8             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 127+ 63B8 ~           >
 127+ 63B8 ~           >
 127+ 63B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63B8             >
 127+ 63B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63B8 C9                           ret
 129+ 63B9              //              pop     hl
 130+ 63B9              //              jp      (hl)
 131+ 63B9              //              jr      Exec_Ptr
 132+ 63B9
 133+ 63B9
 134+ 63B9              //  ______________________________________________________________________
 135+ 63B9              //
 136+ 63B9              // (+loop)       --
 137+ 63B9              // compiled by +LOOP. it uses the top two values of return-stack to
 138+ 63B9              // keep track of index and limit, they are accessed via I and I'
 139+ 63B9                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 139+ 63B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 63B9             >
 139+ 63B9             >                // dummy db directives used to calculate length of namec
 139+ 63B9 28 2B 4C 4F >                db      "(+LOOP)"
 139+ 63BD 4F 50 29    >
 139+ 63C0             >len_NFA         defl    $ - temp_NFA
 139+ 63C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 63B9             >
 139+ 63B9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 63BA 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 139+ 63BE 4F 50 29    >
 139+ 63C1             >                org     $-1                 // alter last byte of Name just above to set
 139+ 63C0 A9          >                db      {b $} | END_BIT     // msb as name end
 139+ 63C1             >
 139+ 63C1 AE 63       >                dw      last_NFA            // Link to previous definition Name
 139+ 63C3             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 63C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 139+ 63C3 ~           >
 139+ 63C3 ~           >
 139+ 63C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 63C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 63C3             >
 139+ 63C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 140+ 63C3
 141+ 63C3              Loop_Ptr:
 142+ 63C3 D9                           exx
 143+ 63C4                              ldhlrp                      // ld hl,rp macro 30h +Origin
 143+ 63C4 2A 96 63    >                ld      hl,(RP_Pointer)
 144+ 63C7
 145+ 63C7 C1                           pop     bc                  // bc is increment
 146+ 63C8
 147+ 63C8 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 148+ 63C9 7B                           ld      a, e                // de keeps index before increment.
 149+ 63CA 81                           add     c
 150+ 63CB 77                           ld      (hl), a
 151+ 63CC 23                           inc     hl
 152+ 63CD 56                           ld      d, (hl)
 153+ 63CE 7A                           ld      a, d
 154+ 63CF 88                           adc     b
 155+ 63D0 77                           ld      (hl),a
 156+ 63D1 23                           inc     hl
 157+ 63D2
 158+ 63D2 7B                           ld      a, e
 159+ 63D3 96                           sub     (hl)
 160+ 63D4 5F                           ld      e, a
 161+ 63D5 23                           inc     hl
 162+ 63D6 7A                           ld      a, d
 163+ 63D7 9E                           sbc     (hl)
 164+ 63D8 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 165+ 63D9
 166+ 63D9 EB                           ex      de, hl
 167+ 63DA 09                           add     hl, bc
 168+ 63DB
 169+ 63DB CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 170+ 63DD 28 01                        jr      z, Loop_NegativeIncrement
 171+ 63DF 3F                               ccf
 172+ 63E0              Loop_NegativeIncrement:
 173+ 63E0 38 03                        jr      c, Loop_Endif
 174+ 63E2 D9                               exx
 175+ 63E3 18 22                            jr      Branch_Ptr      // perform branch consuming following cell
 176+ 63E5              Loop_Endif:
 177+ 63E5 EB                           ex      de, hl
 178+ 63E6 23                           inc     hl
 179+ 63E7                              ldrphl                      // ld rp,hl macro 30h +Origin
 179+ 63E7 22 96 63    >                ld      (RP_Pointer),hl
 180+ 63EA D9                           exx
 181+ 63EB 03                           inc     bc                  // skip branch-style offset
 182+ 63EC 03                           inc     bc
 183+ 63ED                              next
 183+ 63ED DD E9       >                jp      (ix)
 184+ 63EF
 185+ 63EF              //  ______________________________________________________________________
 186+ 63EF              //
 187+ 63EF              // (loop)       n --
 188+ 63EF              // same as (LOOP) but index is incremented by 1
 189+ 63EF              // compiled by LOOP.
 190+ 63EF                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 190+ 63EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 63EF             >
 190+ 63EF             >                // dummy db directives used to calculate length of namec
 190+ 63EF 28 4C 4F 4F >                db      "(LOOP)"
 190+ 63F3 50 29       >
 190+ 63F5             >len_NFA         defl    $ - temp_NFA
 190+ 63F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 63EF             >
 190+ 63EF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 63F0 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 190+ 63F4 50 29       >
 190+ 63F6             >                org     $-1                 // alter last byte of Name just above to set
 190+ 63F5 A9          >                db      {b $} | END_BIT     // msb as name end
 190+ 63F6             >
 190+ 63F6 B9 63       >                dw      last_NFA            // Link to previous definition Name
 190+ 63F8             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 63F8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190+ 63F8 ~           >
 190+ 63F8 ~           >
 190+ 63F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 63F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 63F8             >
 190+ 63F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 63F8 ED 8A 00 01                  push    1
 192+ 63FC 18 C5                        jr      Loop_Ptr
 193+ 63FE
 194+ 63FE              //  ______________________________________________________________________
 195+ 63FE              //
 196+ 63FE              // branch       --
 197+ 63FE              // unconditional branch in colon definition using the following cell as an offset from current IP value
 198+ 63FE              // compiled by ELSE, AGAIN and some other immediate words
 199+ 63FE
 200+ 63FE                              New_Def BRANCH, "BRANCH", is_code, is_normal
 200+ 63FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ 63FE             >
 200+ 63FE             >                // dummy db directives used to calculate length of namec
 200+ 63FE 42 52 41 4E >                db      "BRANCH"
 200+ 6402 43 48       >
 200+ 6404             >len_NFA         defl    $ - temp_NFA
 200+ 6404             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ 63FE             >
 200+ 63FE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ 63FF 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 200+ 6403 43 48       >
 200+ 6405             >                org     $-1                 // alter last byte of Name just above to set
 200+ 6404 C8          >                db      {b $} | END_BIT     // msb as name end
 200+ 6405             >
 200+ 6405 EF 63       >                dw      last_NFA            // Link to previous definition Name
 200+ 6407             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 6407 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 200+ 6407 ~           >
 200+ 6407 ~           >
 200+ 6407             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 6407             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 6407             >
 200+ 6407             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 6407              Branch_Ptr:
 202+ 6407 60                           ld      h, b
 203+ 6408 69                           ld      l, c
 204+ 6409 5E                           ld      e, (hl)
 205+ 640A 23                           inc     hl
 206+ 640B 56                           ld      d, (hl)
 207+ 640C 2B                           dec     hl                  // offset is calculated from current IP
 208+ 640D 19                           add     hl, de
 209+ 640E 4D                           ld      c, l
 210+ 640F 44                           ld      b, h
 211+ 6410                              next
 211+ 6410 DD E9       >                jp      (ix)
 212+ 6412
 213+ 6412
 214+ 6412              //  ______________________________________________________________________
 215+ 6412              //
 216+ 6412              // 0branch      f --
 217+ 6412              // conditional branch if the top-of-stack is ZERO or FALSE.
 218+ 6412              // compiled by IF, UNTIL and some other immediate words
 219+ 6412
 220+ 6412                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 220+ 6412             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 6412             >
 220+ 6412             >                // dummy db directives used to calculate length of namec
 220+ 6412 30 42 52 41 >                db      "0BRANCH"
 220+ 6416 4E 43 48    >
 220+ 6419             >len_NFA         defl    $ - temp_NFA
 220+ 6419             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 6412             >
 220+ 6412 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 6413 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 220+ 6417 4E 43 48    >
 220+ 641A             >                org     $-1                 // alter last byte of Name just above to set
 220+ 6419 C8          >                db      {b $} | END_BIT     // msb as name end
 220+ 641A             >
 220+ 641A FE 63       >                dw      last_NFA            // Link to previous definition Name
 220+ 641C             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 641C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 220+ 641C ~           >
 220+ 641C ~           >
 220+ 641C             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 641C             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 641C             >
 220+ 641C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 641C              ZBranch_Ptr:
 222+ 641C E1                           pop     hl
 223+ 641D 7D                           ld      a, l
 224+ 641E B4                           or      h
 225+ 641F 28 E6                        jr      z, Branch_Ptr
 226+ 6421 03                           inc     bc                  // if not branch, skip offset cell.
 227+ 6422 03                           inc     bc
 228+ 6423                              next
 228+ 6423 DD E9       >                jp      (ix)
 229+ 6425
 230+ 6425              //  ______________________________________________________________________
 231+ 6425              //
 232+ 6425              // (leave)        --
 233+ 6425              // compiled by LEAVE
 234+ 6425              // this forces to exit from loop and jump past
 235+ 6425                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 235+ 6425             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 235+ 6425             >
 235+ 6425             >                // dummy db directives used to calculate length of namec
 235+ 6425 28 4C 45 41 >                db      "(LEAVE)"
 235+ 6429 56 45 29    >
 235+ 642C             >len_NFA         defl    $ - temp_NFA
 235+ 642C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 235+ 6425             >
 235+ 6425 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 235+ 6426 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 235+ 642A 56 45 29    >
 235+ 642D             >                org     $-1                 // alter last byte of Name just above to set
 235+ 642C A9          >                db      {b $} | END_BIT     // msb as name end
 235+ 642D             >
 235+ 642D 12 64       >                dw      last_NFA            // Link to previous definition Name
 235+ 642F             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 235+ 642F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 235+ 642F ~           >
 235+ 642F ~           >
 235+ 642F             >                endif           ; ok        // for other definitions it "points" the correct handler
 235+ 642F             >                // Use of "; ok" to suppress "warning[fwdref]"
 235+ 642F             >
 235+ 642F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 642F
 237+ 642F                              ldhlrp
 237+ 642F 2A 96 63    >                ld      hl,(RP_Pointer)
 238+ 6432 11 04 00                     ld      de, 4
 239+ 6435 19                           add     hl, de
 240+ 6436                              ldrphl
 240+ 6436 22 96 63    >                ld      (RP_Pointer),hl
 241+ 6439
 242+ 6439 18 CC                        jr      Branch_Ptr       // perform branch consuming following cell
 243+ 643B                              next
 243+ 643B DD E9       >                jp      (ix)
 244+ 643D
 245+ 643D              //  ______________________________________________________________________
 246+ 643D              //
 247+ 643D              // (?do)        lim ind --
 248+ 643D              // compiled by ?DO to make a loop checking for lim == ind first
 249+ 643D              // at run-time (?DO) must be followed by a BRANCH offset
 250+ 643D              // used to skip the loop if lim == ind
 251+ 643D                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 251+ 643D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 251+ 643D             >
 251+ 643D             >                // dummy db directives used to calculate length of namec
 251+ 643D 28 3F 44 4F >                db      "(?DO)"
 251+ 6441 29          >
 251+ 6442             >len_NFA         defl    $ - temp_NFA
 251+ 6442             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 251+ 643D             >
 251+ 643D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 251+ 643E 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 251+ 6442 29          >
 251+ 6443             >                org     $-1                 // alter last byte of Name just above to set
 251+ 6442 A9          >                db      {b $} | END_BIT     // msb as name end
 251+ 6443             >
 251+ 6443 25 64       >                dw      last_NFA            // Link to previous definition Name
 251+ 6445             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 251+ 6445 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 251+ 6445 ~           >
 251+ 6445 ~           >
 251+ 6445             >                endif           ; ok        // for other definitions it "points" the correct handler
 251+ 6445             >                // Use of "; ok" to suppress "warning[fwdref]"
 251+ 6445             >
 251+ 6445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 252+ 6445 D1                           pop     de                  // de has the index
 253+ 6446 E1                           pop     hl                  // hl has the limit
 254+ 6447 E5                           push    hl
 255+ 6448 D5                           push    de
 256+ 6449 A7                           and     a                   // reset carry flag
 257+ 644A ED 52                        sbc     hl, de              // compute limit - index
 258+ 644C 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 259+ 644E D1                               pop     de
 260+ 644F E1                               pop     hl
 261+ 6450
 262+ 6450 18 B5                            jr      Branch_Ptr          // perform branch consuming following cell
 263+ 6452              Do_Ptr:
 264+ 6452                              ldhlrp                      // prepare RP
 264+ 6452 2A 96 63    >                ld      hl,(RP_Pointer)
 265+ 6455 2B                           dec     hl
 266+ 6456 2B                           dec     hl
 267+ 6457 2B                           dec     hl
 268+ 6458 2B                           dec     hl
 269+ 6459                              ldrphl
 269+ 6459 22 96 63    >                ld      (RP_Pointer),hl
 270+ 645C
 271+ 645C                              // store index as top RP
 272+ 645C D1                           pop     de
 273+ 645D 73                           ld      (hl), e
 274+ 645E 23                           inc     hl
 275+ 645F 72                           ld      (hl), d
 276+ 6460 23                           inc     hl
 277+ 6461                              // stores lim as second from top RP
 278+ 6461 D1                           pop     de
 279+ 6462 73                           ld      (hl), e
 280+ 6463 23                           inc     hl
 281+ 6464 72                           ld      (hl), d
 282+ 6465
 283+ 6465                              // skip branch-style offseet
 284+ 6465 03                           inc     bc
 285+ 6466 03                           inc     bc
 286+ 6467                              next
 286+ 6467 DD E9       >                jp      (ix)
 287+ 6469
 288+ 6469              //  ______________________________________________________________________
 289+ 6469              //
 290+ 6469              // (do)        lim ind --
 291+ 6469              // compiled by DO to make a loop checking for lim == ind first
 292+ 6469              // this is a simpler version of (?DO)
 293+ 6469                              New_Def C_DO, "(DO)", is_code, is_normal
 293+ 6469             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 6469             >
 293+ 6469             >                // dummy db directives used to calculate length of namec
 293+ 6469 28 44 4F 29 >                db      "(DO)"
 293+ 646D             >len_NFA         defl    $ - temp_NFA
 293+ 646D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 6469             >
 293+ 6469 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 646A 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 293+ 646E             >                org     $-1                 // alter last byte of Name just above to set
 293+ 646D A9          >                db      {b $} | END_BIT     // msb as name end
 293+ 646E             >
 293+ 646E 3D 64       >                dw      last_NFA            // Link to previous definition Name
 293+ 6470             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 6470 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 293+ 6470 ~           >
 293+ 6470 ~           >
 293+ 6470             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 6470             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 6470             >
 293+ 6470             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 6470 0B                           dec     bc                  // prepare IP beforehand
 295+ 6471 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 296+ 6472 18 DE                        jr      Do_Ptr
 297+ 6474
 298+ 6474              //  ______________________________________________________________________
 299+ 6474              //
 300+ 6474              // i            -- n
 301+ 6474              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 302+ 6474              // the current value of the index-loop
 303+ 6474                              New_Def I, "I", is_code, is_normal
 303+ 6474             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 6474             >
 303+ 6474             >                // dummy db directives used to calculate length of namec
 303+ 6474 49          >                db      "I"
 303+ 6475             >len_NFA         defl    $ - temp_NFA
 303+ 6475             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 6474             >
 303+ 6474 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 6475 49          >                db      "I"               // name string in 7-bit ascii, but
 303+ 6476             >                org     $-1                 // alter last byte of Name just above to set
 303+ 6475 C9          >                db      {b $} | END_BIT     // msb as name end
 303+ 6476             >
 303+ 6476 69 64       >                dw      last_NFA            // Link to previous definition Name
 303+ 6478             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 6478 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 303+ 6478 ~           >
 303+ 6478 ~           >
 303+ 6478             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 6478             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 6478             >
 303+ 6478             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 6478              I_Ptr:
 305+ 6478
 306+ 6478                              ldhlrp
 306+ 6478 2A 96 63    >                ld      hl,(RP_Pointer)
 307+ 647B              I_Ptr_prime
 308+ 647B 5E                           ld      e, (hl)
 309+ 647C 23                           inc     hl
 310+ 647D 56                           ld      d, (hl)
 311+ 647E D5                           push    de
 312+ 647F                              next
 312+ 647F DD E9       >                jp      (ix)
 313+ 6481
 314+ 6481
 315+ 6481              //  ______________________________________________________________________
 316+ 6481              //
 317+ 6481              // i'            -- n
 318+ 6481              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 319+ 6481              // the limit of the index-loop
 320+ 6481
 321+ 6481                              New_Def II, "I'", is_code, is_normal
 321+ 6481             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 6481             >
 321+ 6481             >                // dummy db directives used to calculate length of namec
 321+ 6481 49 27       >                db      "I'"
 321+ 6483             >len_NFA         defl    $ - temp_NFA
 321+ 6483             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 6481             >
 321+ 6481 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 6482 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 321+ 6484             >                org     $-1                 // alter last byte of Name just above to set
 321+ 6483 A7          >                db      {b $} | END_BIT     // msb as name end
 321+ 6484             >
 321+ 6484 74 64       >                dw      last_NFA            // Link to previous definition Name
 321+ 6486             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 6486 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 321+ 6486 ~           >
 321+ 6486 ~           >
 321+ 6486             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 6486             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 6486             >
 321+ 6486             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 6486                              ldhlrp
 322+ 6486 2A 96 63    >                ld      hl,(RP_Pointer)
 323+ 6489 23                           inc     hl
 324+ 648A 23                           inc     hl
 325+ 648B 18 EE                        jr      I_Ptr_prime
 326+ 648D
 327+ 648D
 328+ 648D              //  ______________________________________________________________________
 329+ 648D              //
 330+ 648D              // digit        c n -- u 1  |  0
 331+ 648D              // convert a character c using base n
 332+ 648D              // returns a unsigned number and a true flag
 333+ 648D              // or just a false flag if the conversion fails
 334+ 648D                              New_Def DIGIT, "DIGIT", is_code, is_normal
 334+ 648D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 334+ 648D             >
 334+ 648D             >                // dummy db directives used to calculate length of namec
 334+ 648D 44 49 47 49 >                db      "DIGIT"
 334+ 6491 54          >
 334+ 6492             >len_NFA         defl    $ - temp_NFA
 334+ 6492             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 334+ 648D             >
 334+ 648D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 334+ 648E 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 334+ 6492 54          >
 334+ 6493             >                org     $-1                 // alter last byte of Name just above to set
 334+ 6492 D4          >                db      {b $} | END_BIT     // msb as name end
 334+ 6493             >
 334+ 6493 81 64       >                dw      last_NFA            // Link to previous definition Name
 334+ 6495             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 334+ 6495 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 334+ 6495 ~           >
 334+ 6495 ~           >
 334+ 6495             >                endif           ; ok        // for other definitions it "points" the correct handler
 334+ 6495             >                // Use of "; ok" to suppress "warning[fwdref]"
 334+ 6495             >
 334+ 6495             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 335+ 6495 E1                           pop     hl                  // l has the base
 336+ 6496 D1                           pop     de                  // e has the digit
 337+ 6497 7B                           ld      a, e
 338+ 6498 FE 60                        cp      $60                 // check if lowercase
 339+ 649A 38 02                        jr      c, Digit_Uppercase
 340+ 649C D6 20                            sub     $20                 // quick'n'dirty uppercase
 341+ 649E              Digit_Uppercase:
 342+ 649E D6 30                        sub     $30
 343+ 64A0 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 344+ 64A2 FE 0A                            cp      $0A
 345+ 64A4 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 346+ 64A6 D6 07                                sub     7                   // try hex and subtract 7
 347+ 64A8 FE 0A                                cp      $0A
 348+ 64AA 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 349+ 64AC
 350+ 64AC              Digit_Decimal:
 351+ 64AC                              // compare digit
 352+ 64AC BD                           cp      l                   // compare with base
 353+ 64AD
 354+ 64AD 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 355+ 64AF 5F                               ld      e, a                // digit is returned as second from TOS
 356+ 64B0 21 01 00                         ld      hl, 1
 357+ 64B3
 358+ 64B3                                  psh2
 358+ 64B3 D5          >                push    de
 358+ 64B4 E5          >                push    hl
 358+ 64B5 DD E9       >                jp      (ix)
 359+ 64B7              Digit_Fail:
 360+ 64B7 21 00 00                     ld      hl, 0
 361+ 64BA                              psh1
 361+ 64BA E5          >                push    hl
 361+ 64BB DD E9       >                jp      (ix)
 362+ 64BD
 363+ 64BD              //  ______________________________________________________________________
 364+ 64BD              //
 365+ 64BD              //  parametric uppercase routine
 366+ 64BD              //  depending on the following op-code the routine can be by-passed
 367+ 64BD              //  changing the behaviour of some callers.
 368+ 64BD              //  If it is "ret" then the system is Case-Sensitive
 369+ 64BD              //  If it is "Nop" then the system is Case-Insensitive
 370+ 64BD              //  Only A register is touched.
 371+ 64BD 00           Case_Sensitive: nop                         // Default is case-insensitive.
 372+ 64BE              Case_Upper:
 373+ 64BE FE 61                        cp      LC_A_CHAR           // lower-case "a"
 374+ 64C0 D8                           ret     c                   // no change if A < "a"
 375+ 64C1 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 376+ 64C3 D0                           ret     nc                  // no change if A > "z"
 377+ 64C4 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 378+ 64C6 C9                           ret
 379+ 64C7
 380+ 64C7              //  ______________________________________________________________________
 381+ 64C7              //
 382+ 64C7              //  caseon      --
 383+ 64C7              // set system case-sensitivity on
 384+ 64C7              // it patches a RET/NOP at the beginning of the uppercase-routine
 385+ 64C7                              New_Def CASEON, "CASEON", is_code, is_normal
 385+ 64C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 64C7             >
 385+ 64C7             >                // dummy db directives used to calculate length of namec
 385+ 64C7 43 41 53 45 >                db      "CASEON"
 385+ 64CB 4F 4E       >
 385+ 64CD             >len_NFA         defl    $ - temp_NFA
 385+ 64CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 64C7             >
 385+ 64C7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 64C8 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 385+ 64CC 4F 4E       >
 385+ 64CE             >                org     $-1                 // alter last byte of Name just above to set
 385+ 64CD CE          >                db      {b $} | END_BIT     // msb as name end
 385+ 64CE             >
 385+ 64CE 8D 64       >                dw      last_NFA            // Link to previous definition Name
 385+ 64D0             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 64D0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 385+ 64D0 ~           >
 385+ 64D0 ~           >
 385+ 64D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 64D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 64D0             >
 385+ 64D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 64D0 3E C9                        ld      a, $C9              // "ret"
 387+ 64D2 32 BD 64                     ld      (Case_Sensitive), a
 388+ 64D5                              next
 388+ 64D5 DD E9       >                jp      (ix)
 389+ 64D7
 390+ 64D7              //  ______________________________________________________________________
 391+ 64D7              //
 392+ 64D7              //  caseoff     --
 393+ 64D7              // set system case-sensitivity on
 394+ 64D7              // it patches a RET/NOP at the beginning of the uppercase-routine
 395+ 64D7                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 395+ 64D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 395+ 64D7             >
 395+ 64D7             >                // dummy db directives used to calculate length of namec
 395+ 64D7 43 41 53 45 >                db      "CASEOFF"
 395+ 64DB 4F 46 46    >
 395+ 64DE             >len_NFA         defl    $ - temp_NFA
 395+ 64DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 395+ 64D7             >
 395+ 64D7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 395+ 64D8 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 395+ 64DC 4F 46 46    >
 395+ 64DF             >                org     $-1                 // alter last byte of Name just above to set
 395+ 64DE C6          >                db      {b $} | END_BIT     // msb as name end
 395+ 64DF             >
 395+ 64DF C7 64       >                dw      last_NFA            // Link to previous definition Name
 395+ 64E1             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 395+ 64E1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 395+ 64E1 ~           >
 395+ 64E1 ~           >
 395+ 64E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 395+ 64E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 395+ 64E1             >
 395+ 64E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 396+ 64E1 3E 00                        ld      a, $00              // "nop"
 397+ 64E3 32 BD 64                     ld      (Case_Sensitive), a
 398+ 64E6                              next
 398+ 64E6 DD E9       >                jp      (ix)
 399+ 64E8
 400+ 64E8              //  ______________________________________________________________________
 401+ 64E8              //
 402+ 64E8              //  upper       c1 -- c1 | c2
 403+ 64E8              // character on top of stack is forced to Uppercase.
 404+ 64E8                              New_Def UPPER, "UPPER", is_code, is_normal
 404+ 64E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 64E8             >
 404+ 64E8             >                // dummy db directives used to calculate length of namec
 404+ 64E8 55 50 50 45 >                db      "UPPER"
 404+ 64EC 52          >
 404+ 64ED             >len_NFA         defl    $ - temp_NFA
 404+ 64ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 64E8             >
 404+ 64E8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 64E9 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 404+ 64ED 52          >
 404+ 64EE             >                org     $-1                 // alter last byte of Name just above to set
 404+ 64ED D2          >                db      {b $} | END_BIT     // msb as name end
 404+ 64EE             >
 404+ 64EE D7 64       >                dw      last_NFA            // Link to previous definition Name
 404+ 64F0             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 64F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 404+ 64F0 ~           >
 404+ 64F0 ~           >
 404+ 64F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 64F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 64F0             >
 404+ 64F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 64F0 E1                           pop     hl
 406+ 64F1 7D                           ld      a, l
 407+ 64F2 CD BE 64                     call    Case_Upper
 408+ 64F5 6F                           ld      l, a
 409+ 64F6
 410+ 64F6                              psh1
 410+ 64F6 E5          >                push    hl
 410+ 64F7 DD E9       >                jp      (ix)
 411+ 64F9
 412+ 64F9              //  ______________________________________________________________________
 413+ 64F9              //
 414+ 64F9              // (find)       addr voc -- addr 0 | cfa b 1
 415+ 64F9              // vocabulary search,
 416+ 64F9              // - voc is starting word's NFA
 417+ 64F9              // - addr is the string to be searched for
 418+ 64F9              // On success, it returns the CFA of found word, the first NFA byte
 419+ 64F9              // (which contains length and some flags) and a true flag.
 420+ 64F9              // On fail, a false flag  (no more: leaves addr unchanged)
 421+ 64F9                              New_Def C_FIND, "(FIND)", is_code, is_normal
 421+ 64F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 64F9             >
 421+ 64F9             >                // dummy db directives used to calculate length of namec
 421+ 64F9 28 46 49 4E >                db      "(FIND)"
 421+ 64FD 44 29       >
 421+ 64FF             >len_NFA         defl    $ - temp_NFA
 421+ 64FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 64F9             >
 421+ 64F9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 64FA 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 421+ 64FE 44 29       >
 421+ 6500             >                org     $-1                 // alter last byte of Name just above to set
 421+ 64FF A9          >                db      {b $} | END_BIT     // msb as name end
 421+ 6500             >
 421+ 6500 E8 64       >                dw      last_NFA            // Link to previous definition Name
 421+ 6502             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6502 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 6502 ~           >
 421+ 6502 ~           >
 421+ 6502             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6502             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6502             >
 421+ 6502             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6502                                                              // de has dictionary pointer
 423+ 6502 D1                               pop     de
 424+ 6503              Find_VocabularyLoop:
 425+ 6503 E1                               pop     hl                  // string pointer to search for
 426+ 6504 E5                               push    hl                  // keep it on stack too for the end.
 427+ 6505 1A                               ld      a, (de)             // save NFA length byte
 428+ 6506 08                               ex      af,af'              // for later use (!)
 429+ 6507 1A                               ld      a, (de)             // reload NFA length byte
 430+ 6508 AE                               xor     (hl)                // check if same length
 431+ 6509 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 432+ 650B                                  // word an text haven't the same length, skip to next vocabulary entry
 433+ 650B 20 2C                            jr      nz, Find_DifferentLenght
 434+ 650D
 435+ 650D              Find_ThisWord:  // begin loop
 436+ 650D 23                                   inc     hl
 437+ 650E 13                                   inc     de
 438+ 650F 1A                                   ld      a, (de)
 439+ 6510                                      // case insensitive option - begin
 440+ 6510 C5                                   push    bc
 441+ 6511 E6 80                                and     $80                 // split A in msb and the rest
 442+ 6513 47                                   ld      b, a
 443+ 6514 1A                                   ld      a, (de)
 444+ 6515 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 445+ 6517 CD BD 64                             call    Case_Sensitive      // uppercase routine
 446+ 651A 4F                                   ld      c, a
 447+ 651B 7E                                   ld      a, (hl)
 448+ 651C CD BD 64                             call    Case_Sensitive      // uppercase routine
 449+ 651F A9                                   xor     c
 450+ 6520 A8                                   xor     b
 451+ 6521 C1                                   pop     bc
 452+ 6522                                      // case insensitive option - end
 453+ 6522 87                                   add     a                   // ignore msb during compare
 454+ 6523 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 455+ 6525
 456+ 6525                                  // loop back until last byte msb is found set
 457+ 6525                                  // that bit marks the ending char of this word
 458+ 6525 30 E6                            jr      nc, Find_ThisWord
 459+ 6527
 460+ 6527                                  // match found !
 461+ 6527 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 462+ 652A 19                                   add     hl, de
 463+ 652B E3                                   ex      (sp), hl            // CFA on stack and drop addr
 464+ 652C 08                                   ex      af, af'             // retrieve NFA byte (!)
 465+ 652D 5F                                   ld      e, a
 466+ 652E 16 00                                ld      d, 0
 467+ 6530
 468+ 6530
 469+ 6530 21 01 00                             ld      hl, 1
 470+ 6533                                      psh2
 470+ 6533 D5          >                push    de
 470+ 6534 E5          >                push    hl
 470+ 6535 DD E9       >                jp      (ix)
 471+ 6537
 472+ 6537              Find_DidntMatch: // didn't match (*)
 473+ 6537 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 474+ 6539
 475+ 6539              Find_DifferentLenght:
 476+ 6539                              // consume chars until the end of the word
 477+ 6539                              // that is last byte msb is found set
 478+ 6539 13                               inc     de
 479+ 653A 1A                               ld      a, (de)
 480+ 653B 87                               add     a, a
 481+ 653C 30 FB                        jr      nc, Find_DifferentLenght
 482+ 653E
 483+ 653E              Find_WordEnd:   // word-end  found (**)
 484+ 653E                              // take LFA and use it
 485+ 653E 13                           inc     de
 486+ 653F EB                           ex      de, hl
 487+ 6540 5E                           ld      e, (hl)
 488+ 6541 23                           inc     hl
 489+ 6542 56                           ld      d, (hl)
 490+ 6543 7A                           ld      a, d
 491+ 6544 B3                           or      e
 492+ 6545
 493+ 6545                          // loop until end of vocabulary
 494+ 6545 20 BC                    jr      nz, Find_VocabularyLoop
 495+ 6547
 496+ 6547 E1                       pop     hl              // with this, it leaves addr unchanged
 497+ 6548 21 00 00                 ld      hl, FALSE_FLAG
 498+ 654B
 499+ 654B                          psh1
 499+ 654B E5          >                push    hl
 499+ 654C DD E9       >                jp      (ix)
 500+ 654E
 501+ 654E              //  ______________________________________________________________________
 502+ 654E              //
 503+ 654E              // enclose      a c -- a  n1 n2 n3
 504+ 654E              // starting from a, using delimiter c, determines the offsets:
 505+ 654E              //   n1   the first character non-delimiter
 506+ 654E              //   n2   the first delimiter after the text
 507+ 654E              //   n3   the first character non enclosed.
 508+ 654E              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 509+ 654E              // an uncoditional delimiter.
 510+ 654E              // Examples:
 511+ 654E              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 512+ 654E              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 513+ 654E              // iii:	c  c  'nul'          -- 2  3  2
 514+ 654E                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 514+ 654E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 514+ 654E             >
 514+ 654E             >                // dummy db directives used to calculate length of namec
 514+ 654E 45 4E 43 4C >                db      "ENCLOSE"
 514+ 6552 4F 53 45    >
 514+ 6555             >len_NFA         defl    $ - temp_NFA
 514+ 6555             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 514+ 654E             >
 514+ 654E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 514+ 654F 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 514+ 6553 4F 53 45    >
 514+ 6556             >                org     $-1                 // alter last byte of Name just above to set
 514+ 6555 C5          >                db      {b $} | END_BIT     // msb as name end
 514+ 6556             >
 514+ 6556 F9 64       >                dw      last_NFA            // Link to previous definition Name
 514+ 6558             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 514+ 6558 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 514+ 6558 ~           >
 514+ 6558 ~           >
 514+ 6558             >                endif           ; ok        // for other definitions it "points" the correct handler
 514+ 6558             >                // Use of "; ok" to suppress "warning[fwdref]"
 514+ 6558             >
 514+ 6558             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 6558 D1                           pop     de                  //  e has the character
 516+ 6559 E1                           pop     hl                  // hl has the string address
 517+ 655A E5                           push    hl
 518+ 655B 7B                           ld      a, e
 519+ 655C 11 FF FF                     ld      de, -1              // let's start from -1
 520+ 655F 2B                           dec     hl
 521+ 6560              Enclose_NonDelimiter:
 522+ 6560                              // find first non delimiter
 523+ 6560 23                               inc     hl
 524+ 6561 13                               inc     de
 525+ 6562 BE                               cp      (hl)
 526+ 6563 28 FB                        jr      z, Enclose_NonDelimiter
 527+ 6565 D5                           push    de
 528+ 6566
 529+ 6566 C5                           push    bc                  // save Instruction Pointer
 530+ 6567
 531+ 6567 4F                           ld      c, a                // save char
 532+ 6568 7E                           ld      a, (hl)
 533+ 6569 A7                           and     a                   // stop if 0x00
 534+ 656A 20 07                        jr      nz, Enclose_NextChar
 535+ 656C
 536+ 656C                              /// case iii. no more character in string
 537+ 656C C1                               pop     bc                  // restore Instruction Pointer
 538+ 656D 13                               inc     de
 539+ 656E D5                               push    de
 540+ 656F 1B                               dec     de
 541+ 6570 D5                               push    de
 542+ 6571                                  next
 542+ 6571 DD E9       >                jp      (ix)
 543+ 6573              Enclose_NextChar:
 544+ 6573 79                               ld      a, c
 545+ 6574 23                               inc     hl
 546+ 6575 13                               inc     de
 547+ 6576 BE                               cp      (hl)
 548+ 6577 20 06                            jr      nz, Enclose_NonSeparator
 549+ 6579
 550+ 6579                                      // case i. first non enclosed
 551+ 6579 C1                                   pop     bc                  // restore Instruction Pointer
 552+ 657A D5                                   push    de
 553+ 657B 13                                   inc     de
 554+ 657C D5                                   push    de
 555+ 657D                                      next
 555+ 657D DD E9       >                jp      (ix)
 556+ 657F              Enclose_NonSeparator:
 557+ 657F 7E                               ld      a, (hl)
 558+ 6580 A7                               and     a
 559+ 6581 20 F0                        jr      nz, Enclose_NextChar
 560+ 6583
 561+ 6583                              // case ii. separator & terminator
 562+ 6583 C1                           pop     bc                  // restore Instruction Pointer
 563+ 6584 D5                           push    de
 564+ 6585 D5                           push    de
 565+ 6586                              next
 565+ 6586 DD E9       >                jp      (ix)
 566+ 6588
 567+ 6588              //  ______________________________________________________________________
 568+ 6588              //
 569+ 6588              // (map)        a2 a1 n c1 -- c2
 570+ 6588              // translate character c1 using mapping string a2 and a2
 571+ 6588              // if c1 is not present within string a1 then
 572+ 6588              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 573+ 6588                              New_Def C_MAP, "(MAP)", is_code, is_normal
 573+ 6588             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 573+ 6588             >
 573+ 6588             >                // dummy db directives used to calculate length of namec
 573+ 6588 28 4D 41 50 >                db      "(MAP)"
 573+ 658C 29          >
 573+ 658D             >len_NFA         defl    $ - temp_NFA
 573+ 658D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 573+ 6588             >
 573+ 6588 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 573+ 6589 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 573+ 658D 29          >
 573+ 658E             >                org     $-1                 // alter last byte of Name just above to set
 573+ 658D A9          >                db      {b $} | END_BIT     // msb as name end
 573+ 658E             >
 573+ 658E 4E 65       >                dw      last_NFA            // Link to previous definition Name
 573+ 6590             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 573+ 6590 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 573+ 6590 ~           >
 573+ 6590 ~           >
 573+ 6590             >                endif           ; ok        // for other definitions it "points" the correct handler
 573+ 6590             >                // Use of "; ok" to suppress "warning[fwdref]"
 573+ 6590             >
 573+ 6590             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 574+ 6590 D9                           exx
 575+ 6591 E1                           pop     hl
 576+ 6592 7D                           ld      a, l
 577+ 6593 C1                           pop     bc
 578+ 6594 E1                           pop     hl
 579+ 6595 50                           ld      d, b
 580+ 6596 59                           ld      e, c
 581+ 6597 ED B1                        cpir
 582+ 6599 E1                           pop     hl
 583+ 659A 20 05                        jr      nz, C_Map_Then
 583+ 659C
 584+ 659C 19                               add     hl, de
 585+ 659D 2B                               dec     hl
 586+ 659E ED 42                            sbc     hl, bc
 587+ 65A0 7E                               ld      a, (hl)
 588+ 65A1              C_Map_Then:
 589+ 65A1 6F                           ld      l, a
 590+ 65A2 26 00                        ld      h, 0
 591+ 65A4 E5                           push    hl
 592+ 65A5 D9                           exx
 593+ 65A6                              next
 593+ 65A6 DD E9       >                jp      (ix)
 594+ 65A8
 595+ 65A8              //  ______________________________________________________________________
 596+ 65A8              //
 597+ 65A8              // (compare)    a1 a2 n -- b
 598+ 65A8              // this word performs a lexicographic compare of n bytes of text at address a1
 599+ 65A8              // with n bytes of text at address a2. It returns numeric a value:
 600+ 65A8              //  0 : if strings are equal
 601+ 65A8              // +1 : if string at a1 greater than string at a2
 602+ 65A8              // -1 : if string at a1 less than string at a2
 603+ 65A8              // strings can be 256 bytes in length at most.
 604+ 65A8                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 604+ 65A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 604+ 65A8             >
 604+ 65A8             >                // dummy db directives used to calculate length of namec
 604+ 65A8 28 43 4F 4D >                db      "(COMPARE)"
 604+ 65AC 50 41 52 45 >
 604+ 65B0 29          >
 604+ 65B1             >len_NFA         defl    $ - temp_NFA
 604+ 65B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 604+ 65A8             >
 604+ 65A8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 604+ 65A9 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 604+ 65AD 50 41 52 45 >
 604+ 65B1 29          >
 604+ 65B2             >                org     $-1                 // alter last byte of Name just above to set
 604+ 65B1 A9          >                db      {b $} | END_BIT     // msb as name end
 604+ 65B2             >
 604+ 65B2 88 65       >                dw      last_NFA            // Link to previous definition Name
 604+ 65B4             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 604+ 65B4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 604+ 65B4 ~           >
 604+ 65B4 ~           >
 604+ 65B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 604+ 65B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 604+ 65B4             >
 604+ 65B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 605+ 65B4 D9                           exx
 606+ 65B5 E1                           pop     hl                  // Number of bytes
 607+ 65B6 7D                           ld      a, l
 608+ 65B7 E1                           pop     hl                  // hl points string a2
 609+ 65B8 D1                           pop     de                  // hl points string a1
 610+ 65B9              //              push    bc                  // Instruction pointer on stack
 611+ 65B9 47                           ld      b, a
 612+ 65BA              C_Compare_Loop:
 613+ 65BA 7E                               ld      a, (hl)
 614+ 65BB CD BD 64                         call    Case_Sensitive
 615+ 65BE 4F                               ld      c, a
 616+ 65BF 1A                               ld      a, (de)
 617+ 65C0 CD BD 64                         call    Case_Sensitive
 618+ 65C3 B9                               cp      c
 619+ 65C4 13                               inc     de
 620+ 65C5 23                               inc     hl
 621+ 65C6 28 0E                            jr      z, C_Compare_Equal
 622+ 65C8 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 623+ 65CA 21 01 00                                 ld      hl, 1               // a1 gt a2
 624+ 65CD 18 03                                jr      C_Compare_Then      // Else
 625+ 65CF              C_Compare_NotLessThan:
 626+ 65CF 21 FF FF                                 ld      hl, -1              // a1 lt a2
 627+ 65D2              C_Compare_Then:                                 // Endif
 628+ 65D2              //                      pop     bc              // restore Instruction Pointer
 629+ 65D2 E5                                   push    hl
 630+ 65D3 D9                                   exx
 631+ 65D4
 632+ 65D4                                      next
 632+ 65D4 DD E9       >                jp      (ix)
 633+ 65D6
 634+ 65D6              C_Compare_Equal:
 635+ 65D6 10 E2                        djnz    C_Compare_Loop
 636+ 65D8 21 00 00                     ld      hl, 0               // a1 eq a2
 637+ 65DB              //              pop     bc                  // restore Instruction Pointer
 638+ 65DB E5                           push    hl
 639+ 65DC D9                           exx
 640+ 65DD
 641+ 65DD                              next
 641+ 65DD DD E9       >                jp      (ix)
 642+ 65DF
 643+ 65DF              //  ______________________________________________________________________
 644+ 65DF              //
 645+ 65DF              // emitc        c --
 646+ 65DF              // low level emit, calls ROM routine at #10 to send a character to
 647+ 65DF              // the the current channel (see SELECT to change stream-channel)
 648+ 65DF                              New_Def EMITC, "EMITC", is_code, is_normal
 648+ 65DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 648+ 65DF             >
 648+ 65DF             >                // dummy db directives used to calculate length of namec
 648+ 65DF 45 4D 49 54 >                db      "EMITC"
 648+ 65E3 43          >
 648+ 65E4             >len_NFA         defl    $ - temp_NFA
 648+ 65E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 648+ 65DF             >
 648+ 65DF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 648+ 65E0 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 648+ 65E4 43          >
 648+ 65E5             >                org     $-1                 // alter last byte of Name just above to set
 648+ 65E4 C3          >                db      {b $} | END_BIT     // msb as name end
 648+ 65E5             >
 648+ 65E5 A8 65       >                dw      last_NFA            // Link to previous definition Name
 648+ 65E7             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 648+ 65E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 648+ 65E7 ~           >
 648+ 65E7 ~           >
 648+ 65E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 648+ 65E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 648+ 65E7             >
 648+ 65E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 649+ 65E7 E1                           pop     hl
 650+ 65E8 7D                           ld      a, l
 651+ 65E9              Emitc_Ptr:
 652+ 65E9 C5                           push    bc
 653+ 65EA DD E5                        push    ix
 654+ 65EC D7                           rst     $10
 655+ 65ED DD E1                        pop     ix
 656+ 65EF C1                           pop     bc
 657+ 65F0 3E FF                        ld      a, 255            // max possible
 658+ 65F2 32 8C 5C                     ld      (SCR_CT), a
 659+ 65F5
 660+ 65F5                              next
 660+ 65F5 DD E9       >                jp      (ix)
 661+ 65F7
 662+ 65F7              //  ______________________________________________________________________
 663+ 65F7              //
 664+ 65F7              // cr           --
 665+ 65F7              // send a CR via EMITC
 666+ 65F7                              New_Def CR, "CR", is_code, is_normal
 666+ 65F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 666+ 65F7             >
 666+ 65F7             >                // dummy db directives used to calculate length of namec
 666+ 65F7 43 52       >                db      "CR"
 666+ 65F9             >len_NFA         defl    $ - temp_NFA
 666+ 65F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 666+ 65F7             >
 666+ 65F7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 666+ 65F8 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 666+ 65FA             >                org     $-1                 // alter last byte of Name just above to set
 666+ 65F9 D2          >                db      {b $} | END_BIT     // msb as name end
 666+ 65FA             >
 666+ 65FA DF 65       >                dw      last_NFA            // Link to previous definition Name
 666+ 65FC             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 666+ 65FC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 666+ 65FC ~           >
 666+ 65FC ~           >
 666+ 65FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 666+ 65FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 666+ 65FC             >
 666+ 65FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 667+ 65FC
 668+ 65FC 3E 0D                        ld      a, CR_CHAR
 669+ 65FE 18 E9                        jr      Emitc_Ptr
 670+ 6600
 671+ 6600              Emitc_Vec:
 672+ 6600 43 66                        dw      C_Emit_Printable  // comma
 673+ 6602 49 66                        dw      C_Emit_Bel        // bel
 674+ 6604 43 66                        dw      C_Emit_Printable  // bs
 675+ 6606 5E 66                        dw      C_Emit_Tab        // tab
 676+ 6608 43 66                        dw      C_Emit_Printable  // cr
 677+ 660A 64 66                        dw      C_Emit_NL         // lf (unix newline)
 678+ 660C 43 66                        dw      C_Emit_Printable  // blank
 679+ 660E 43 66                        dw      C_Emit_Printable  // blank
 680+ 6610
 681+ 6610              Emit_Selector_Start:
 682+ 6610 06                           db      $06                 // comma
 683+ 6611 07                           db      $07                 // bel
 684+ 6612 08                           db      $08                 // bs
 685+ 6613 09                           db      $09                 // tab
 686+ 6614 0D                           db      $0D                 // cr
 687+ 6615 0A                           db      $0A                 // lf (unix newline)
 688+ 6616 20                           db      $20
 689+ 6617              Emit_Selector_End:
 690+ 6617 20                           db      $20
 691+ 6618
 692+ 6618              //  ______________________________________________________________________
 693+ 6618              //
 694+ 6618              // (?emit)      c1 -- c2 | c1
 695+ 6618              // decode a character to be sent via EMIT
 696+ 6618              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 697+ 6618              // the routine should resolve anything and convert the character anyway.
 698+ 6618                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 698+ 6618             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 698+ 6618             >
 698+ 6618             >                // dummy db directives used to calculate length of namec
 698+ 6618 28 3F 45 4D >                db      "(?EMIT)"
 698+ 661C 49 54 29    >
 698+ 661F             >len_NFA         defl    $ - temp_NFA
 698+ 661F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 698+ 6618             >
 698+ 6618 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 698+ 6619 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 698+ 661D 49 54 29    >
 698+ 6620             >                org     $-1                 // alter last byte of Name just above to set
 698+ 661F A9          >                db      {b $} | END_BIT     // msb as name end
 698+ 6620             >
 698+ 6620 F7 65       >                dw      last_NFA            // Link to previous definition Name
 698+ 6622             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 698+ 6622 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 698+ 6622 ~           >
 698+ 6622 ~           >
 698+ 6622             >                endif           ; ok        // for other definitions it "points" the correct handler
 698+ 6622             >                // Use of "; ok" to suppress "warning[fwdref]"
 698+ 6622             >
 698+ 6622             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 699+ 6622 D1                           pop     de
 700+ 6623 7B                           ld      a, e                //  de has c1
 701+ 6624 E6 7F                        and     $7F                 // 7-bit ascii only
 702+ 6626 C5                           push    bc                  // save Instruction Pointer
 703+ 6627 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 704+ 662A 21 17 66                     ld      hl, Emit_Selector_End
 705+ 662D ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 706+ 662F 20 0B                        jr      nz, C_Emit_Not_Found
 707+ 6631                                  // Found then decode it
 708+ 6631 21 00 66                         ld      hl, Emitc_Vec
 709+ 6634 09                               add     hl, bc
 710+ 6635 09                               add     hl, bc
 711+ 6636 5E                               ld      e, (hl)
 712+ 6637 23                               inc     hl
 713+ 6638 56                               ld      d, (hl)
 714+ 6639 EB                               ex      de, hl
 715+ 663A C1                               pop     bc                  // restore Instruction Pointer
 716+ 663B E9                               jp      (hl)                // one of the following labels
 717+ 663C              C_Emit_Not_Found:
 718+ 663C C1                           pop     bc                  // restore Instruction Pointer
 719+ 663D FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 720+ 663F 30 02                        jr      nc, C_Emit_Printable
 721+ 6641 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 722+ 6643              C_Emit_Printable:
 723+ 6643 6F                           ld      l, a
 724+ 6644 26 00                        ld      h, 0
 725+ 6646
 726+ 6646                              psh1
 726+ 6646 E5          >                push    hl
 726+ 6647 DD E9       >                jp      (ix)
 727+ 6649
 728+ 6649              C_Emit_Bel:
 729+ 6649 C5                           push    bc                  // save Instruction Pointer
 730+ 664A 11 00 01                     ld      de, $0100
 731+ 664D 21 00 02                     ld      hl, $0200
 732+ 6650 DD E5                        push    ix                  // save Next Pointer
 733+ 6652 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 734+ 6655 DD E1                        pop     ix                  // restore Next Pointer
 735+ 6657 C1                           pop     bc                  // restore Instruction Pointer
 736+ 6658 21 00 00                     ld      hl, NUL_CHAR
 737+ 665B
 738+ 665B                              psh1
 738+ 665B E5          >                push    hl
 738+ 665C DD E9       >                jp      (ix)
 739+ 665E
 740+ 665E 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 741+ 6661
 742+ 6661                              psh1
 742+ 6661 E5          >                push    hl
 742+ 6662 DD E9       >                jp      (ix)
 743+ 6664
 744+ 6664 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 745+ 6667
 746+ 6667                              psh1
 746+ 6667 E5          >                push    hl
 746+ 6668 DD E9       >                jp      (ix)
 747+ 666A
 748+ 666A              //  ______________________________________________________________________
 749+ 666A
 750+ 666A              Key_Table:
 751+ 666A E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 752+ 666B C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 753+ 666C CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 754+ 666D CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 755+ 666E CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 756+ 666F C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 757+ 6670 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 758+ 6671 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 759+ 6672 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 760+ 6673 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 761+ 6674 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 762+ 6675              Key_MapTo:
 763+ 6675 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 764+ 6676 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 765+ 6677 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 766+ 6678 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 767+ 6679 5D                           db      $5D                 //  6: SYMBOL+U : ]
 768+ 667A 5B                           db      $5B                 //  5: SYMBOL+Y : [
 769+ 667B 7D                           db      $7D                 //  4: SYMBOL+G : }
 770+ 667C 7B                           db      $7B                 //  3: SYMBOL+F : {
 771+ 667D 5C                           db      $5C                 //  2: SYMBOl+D : //
 772+ 667E 7C                           db      $7C                 //  1: SYMBOL+S : |
 773+ 667F 7E                           db      $7E                 //  0: SYMBOL+A : ~
 774+ 6680
 775+ 6680              //  ______________________________________________________________________
 776+ 6680              //
 777+ 6680              // curs         -- c
 778+ 6680              // wait for a keypress
 779+ 6680              // This definition need Standard ROM Interrupt to be served
 780+ 6680
 781+ 6680                              New_Def CUR, "CURS", is_code, is_normal
 781+ 6680             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 781+ 6680             >
 781+ 6680             >                // dummy db directives used to calculate length of namec
 781+ 6680 43 55 52 53 >                db      "CURS"
 781+ 6684             >len_NFA         defl    $ - temp_NFA
 781+ 6684             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 781+ 6680             >
 781+ 6680 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 781+ 6681 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 781+ 6685             >                org     $-1                 // alter last byte of Name just above to set
 781+ 6684 D3          >                db      {b $} | END_BIT     // msb as name end
 781+ 6685             >
 781+ 6685 18 66       >                dw      last_NFA            // Link to previous definition Name
 781+ 6687             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 781+ 6687 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 781+ 6687 ~           >
 781+ 6687 ~           >
 781+ 6687             >                endif           ; ok        // for other definitions it "points" the correct handler
 781+ 6687             >                // Use of "; ok" to suppress "warning[fwdref]"
 781+ 6687             >
 781+ 6687             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 782+ 6687
 783+ 6687 C5                           push    bc                  // save Instruction Pointer
 784+ 6688 DD E5                        push    ix
 785+ 668A
 786+ 668A ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 787+ 668E 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 788+ 6691 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 789+ 6695
 790+ 6695              Cur_Wait:
 791+ 6695 76                               halt
 792+ 6696 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 793+ 6698 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 794+ 669B
 795+ 669B                                  // software-flash: flips face every 320 ms
 796+ 669B 3E 10                            ld      a, $10              // Timing based
 797+ 669D FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 798+ 66A0
 799+ 66A0 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 800+ 66A3 20 0C                            jr      nz, Cur_Cursor
 801+ 66A5 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 802+ 66A8 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 803+ 66AC 28 03                                jr      z, Cur_Cursor
 804+ 66AE 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 805+ 66B1              Cur_Cursor:
 806+ 66B1 D7                               rst     $10
 807+ 66B2 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 808+ 66B4 D7                               rst     $10
 809+ 66B5
 810+ 66B5 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 811+ 66B9 28 DA                        jr      z, Cur_Wait
 812+ 66BB
 813+ 66BB 76                           halt    // this is to sync flashing cursor.
 814+ 66BC
 815+ 66BC 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 816+ 66BE D7                           rst     $10
 817+ 66BF 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 818+ 66C1 D7                           rst     $10
 819+ 66C2
 820+ 66C2 ED 7B 92 63                  ld      sp, (SP_Saved)
 821+ 66C6
 822+ 66C6 DD E1                        pop     ix
 823+ 66C8 C1                           pop     bc                  // Restore Instruction Pointer
 824+ 66C9
 825+ 66C9                              next
 825+ 66C9 DD E9       >                jp      (ix)
 826+ 66CB
 827+ 66CB
 828+ 66CB              //  ______________________________________________________________________
 829+ 66CB              //
 830+ 66CB              // key          -- c
 831+ 66CB              // This definition need Standard ROM Interrupt to be served
 832+ 66CB
 833+ 66CB                              New_Def KEY, "KEY", is_code, is_normal
 833+ 66CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 833+ 66CB             >
 833+ 66CB             >                // dummy db directives used to calculate length of namec
 833+ 66CB 4B 45 59    >                db      "KEY"
 833+ 66CE             >len_NFA         defl    $ - temp_NFA
 833+ 66CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 833+ 66CB             >
 833+ 66CB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 833+ 66CC 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 833+ 66CF             >                org     $-1                 // alter last byte of Name just above to set
 833+ 66CE D9          >                db      {b $} | END_BIT     // msb as name end
 833+ 66CF             >
 833+ 66CF 80 66       >                dw      last_NFA            // Link to previous definition Name
 833+ 66D1             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 833+ 66D1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 833+ 66D1 ~           >
 833+ 66D1 ~           >
 833+ 66D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 833+ 66D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 833+ 66D1             >
 833+ 66D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 834+ 66D1
 835+ 66D1 C5                           push    bc
 836+ 66D2
 837+ 66D2              Key_Wait:
 838+ 66D2 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 839+ 66D6 28 FA                        jr      z, Key_Wait
 840+ 66D8
 841+ 66D8 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 842+ 66DB
 843+ 66DB                              // decode character from above table
 844+ 66DB 21 6A 66                     ld      hl, Key_Table
 845+ 66DE 01 0B 00                     ld      bc, $000B
 846+ 66E1 ED B1                        cpir
 847+ 66E3 20 05                        jr      nz, Key_DontMap
 848+ 66E5 21 75 66                         ld      hl, Key_MapTo
 849+ 66E8 09                               add     hl, bc
 850+ 66E9 7E                               ld      a, (hl)
 851+ 66EA FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 852+ 66EC 20 09                        jr      nz, Key_NoCapsLock
 853+ 66EE 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 854+ 66F1 7E                               ld      a, (hl)
 855+ 66F2 EE 08                            xor     $08
 856+ 66F4 77                               ld      (hl), a
 857+ 66F5 3E 00                            ld      a, NUL_CHAR
 858+ 66F7 6F           Key_NoCapsLock: ld      l, a
 859+ 66F8 26 00                        ld      h, 0                // Prepare TOS
 860+ 66FA
 861+ 66FA FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 862+ 66FE
 863+ 66FE C1                           pop     bc                  // Restore Instruction Pointer
 864+ 66FF
 865+ 66FF                              psh1
 865+ 66FF E5          >                push    hl
 865+ 6700 DD E9       >                jp      (ix)
 866+ 6702
 867+ 6702
 868+ 6702              //  ______________________________________________________________________
 869+ 6702              //
 870+ 6702              // click        --
 871+ 6702              // This definition need Standard ROM Interrupt to be served
 872+ 6702              //
 873+ 6702              //              New_Def CLICK, "CLICK", is_code, is_normal
 874+ 6702              //
 875+ 6702              //                push    bc
 876+ 6702              //              ld      a, ($5C48)          // BORDCR system variable
 877+ 6702              //              rra
 878+ 6702              //              rra
 879+ 6702              //              rra
 880+ 6702              //              or      $18                 // quick'n'dirty click
 881+ 6702              //              out     ($fe), a
 882+ 6702              //              ld      b, 0
 883+ 6702              //              djnz    $                   // wait loop
 884+ 6702              //              xor     $18
 885+ 6702              //              out     ($fe), a
 886+ 6702              //                pop     bc
 887+ 6702
 888+ 6702              //              next
 889+ 6702
 890+ 6702              //  ______________________________________________________________________
 891+ 6702              //
 892+ 6702              // key?         -- f
 893+ 6702              // key available
 894+ 6702              //
 895+ 6702              //              New_Def KEY_Q, "KEY?", is_code, is_normal
 896+ 6702              //
 897+ 6702              //              ld      hl, 0000
 898+ 6702              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
 899+ 6702              //              jr      z, Key_Q
 900+ 6702              //                  dec     hl
 901+ 6702              // Key_Q:
 902+ 6702              //                psh1
 903+ 6702              //              next
 904+ 6702
 905+ 6702              //  ______________________________________________________________________
 906+ 6702              //
 907+ 6702              // ?terminal    -- FALSE | TRUE
 908+ 6702              // test for BREAK keypress
 909+ 6702                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 909+ 6702             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 909+ 6702             >
 909+ 6702             >                // dummy db directives used to calculate length of namec
 909+ 6702 3F 54 45 52 >                db      "?TERMINAL"
 909+ 6706 4D 49 4E 41 >
 909+ 670A 4C          >
 909+ 670B             >len_NFA         defl    $ - temp_NFA
 909+ 670B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 909+ 6702             >
 909+ 6702 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 909+ 6703 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 909+ 6707 4D 49 4E 41 >
 909+ 670B 4C          >
 909+ 670C             >                org     $-1                 // alter last byte of Name just above to set
 909+ 670B CC          >                db      {b $} | END_BIT     // msb as name end
 909+ 670C             >
 909+ 670C CB 66       >                dw      last_NFA            // Link to previous definition Name
 909+ 670E             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 909+ 670E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 909+ 670E ~           >
 909+ 670E ~           >
 909+ 670E             >                endif           ; ok        // for other definitions it "points" the correct handler
 909+ 670E             >                // Use of "; ok" to suppress "warning[fwdref]"
 909+ 670E             >
 909+ 670E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 910+ 670E D9                           exx
 911+ 670F 01 FE 7F                     ld      bc, $7ffe
 912+ 6712 ED 50                        in      d, (c)
 913+ 6714 41                           ld      b, c
 914+ 6715 ED 78                        in      a, (c)
 915+ 6717 B2                           or       d
 916+ 6718 1F                           rra
 917+ 6719 3F                           ccf
 918+ 671A ED 62                        sbc     hl, hl
 919+ 671C E5                           push    hl
 920+ 671D D9                           exx
 921+ 671E                              next
 921+ 671E DD E9       >                jp      (ix)
 922+ 6720
 923+ 6720
 924+ 6720              //  ______________________________________________________________________
 925+ 6720              //
 926+ 6720              // inkey        -- c | 0
 927+ 6720              // call ROM inkey$ routine, returns c or "zero".
 928+ 6720
 929+ 6720                              New_Def INKEY, "INKEY", is_code, is_normal
 929+ 6720             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 929+ 6720             >
 929+ 6720             >                // dummy db directives used to calculate length of namec
 929+ 6720 49 4E 4B 45 >                db      "INKEY"
 929+ 6724 59          >
 929+ 6725             >len_NFA         defl    $ - temp_NFA
 929+ 6725             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 929+ 6720             >
 929+ 6720 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 929+ 6721 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 929+ 6725 59          >
 929+ 6726             >                org     $-1                 // alter last byte of Name just above to set
 929+ 6725 D9          >                db      {b $} | END_BIT     // msb as name end
 929+ 6726             >
 929+ 6726 02 67       >                dw      last_NFA            // Link to previous definition Name
 929+ 6728             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 929+ 6728 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 929+ 6728 ~           >
 929+ 6728 ~           >
 929+ 6728             >                endif           ; ok        // for other definitions it "points" the correct handler
 929+ 6728             >                // Use of "; ok" to suppress "warning[fwdref]"
 929+ 6728             >
 929+ 6728             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 930+ 6728
 931+ 6728 C5                           push    bc
 932+ 6729 ED 73 92 63                  ld      (SP_Saved), sp
 933+ 672D 31 61 63                     ld      sp, Cold_origin - 5
 934+ 6730 DD E5                        push    ix
 935+ 6732 CD E6 15                     call    $15E6                   // instead of 15E9
 936+ 6735 DD E1                        pop     ix
 937+ 6737 ED 7B 92 63                  ld      sp, (SP_Saved)
 938+ 673B 6F                           ld      l, a
 939+ 673C 26 00                        ld      h, 0
 940+ 673E C1                           pop     bc
 941+ 673F                              psh1
 941+ 673F E5          >                push    hl
 941+ 6740 DD E9       >                jp      (ix)
 942+ 6742
 943+ 6742              //  ______________________________________________________________________
 944+ 6742              //
 945+ 6742              // select      n --
 946+ 6742              // selects the given channel number
 947+ 6742
 948+ 6742                              New_Def SELECT, "SELECT", is_code, is_normal
 948+ 6742             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ 6742             >
 948+ 6742             >                // dummy db directives used to calculate length of namec
 948+ 6742 53 45 4C 45 >                db      "SELECT"
 948+ 6746 43 54       >
 948+ 6748             >len_NFA         defl    $ - temp_NFA
 948+ 6748             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ 6742             >
 948+ 6742 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ 6743 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 948+ 6747 43 54       >
 948+ 6749             >                org     $-1                 // alter last byte of Name just above to set
 948+ 6748 D4          >                db      {b $} | END_BIT     // msb as name end
 948+ 6749             >
 948+ 6749 20 67       >                dw      last_NFA            // Link to previous definition Name
 948+ 674B             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 674B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 948+ 674B ~           >
 948+ 674B ~           >
 948+ 674B             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 674B             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 674B             >
 948+ 674B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 674B E1                           pop     hl
 950+ 674C C5                           push    bc
 951+ 674D 7D                           ld      a, l
 952+ 674E ED 73 92 63                  ld      (SP_Saved), sp
 953+ 6752 31 61 63                     ld      sp, Cold_origin - 5
 954+ 6755 DD E5                        push    ix
 955+ 6757 CD 01 16                     call    $1601
 956+ 675A DD E1                        pop     ix
 957+ 675C ED 7B 92 63                  ld      sp, (SP_Saved)
 958+ 6760 C1                           pop     bc
 959+ 6761
 960+ 6761                              next
 960+ 6761 DD E9       >                jp      (ix)
 961+ 6763
 962+ 6763              //  ______________________________________________________________________
 963+ 6763              //
 964+ 6763              // ZX Spectrum Next - Low Level disk primitives.
 965+ 6763              // this include is "here" for backward compatibility
 966+ 6763
 967+ 6763                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
   1++6763              //  ______________________________________________________________________
   2++6763              //
   3++6763              //  next-opt.asm
   4++6763              //
   5++6763              //  ZX Spectrum Next - peculiar definitions
   6++6763              //  ______________________________________________________________________
   7++6763
   8++6763              //  ______________________________________________________________________
   9++6763              //
  10++6763              // f_seek       d u -- f
  11++6763              // Seek to position d in file-handle u.
  12++6763              // Return a false-flag 0 on success, True flag on error
  13++6763                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++6763             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++6763             >
  13++6763             >                // dummy db directives used to calculate length of namec
  13++6763 46 5F 53 45 >                db      "F_SEEK"
  13++6767 45 4B       >
  13++6769             >len_NFA         defl    $ - temp_NFA
  13++6769             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++6763             >
  13++6763 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++6764 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++6768 45 4B       >
  13++676A             >                org     $-1                 // alter last byte of Name just above to set
  13++6769 CB          >                db      {b $} | END_BIT     // msb as name end
  13++676A             >
  13++676A 42 67       >                dw      last_NFA            // Link to previous definition Name
  13++676C             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++676C ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++676C ~           >
  13++676C ~           >
  13++676C             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++676C             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++676C             >
  13++676C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++676C E1                           pop     hl                  // file-handle
  15++676D 7D                           ld      a, l                // file-handle
  16++676E 60                           ld      h, b                // save Intruction Pointer
  17++676F 69                           ld      l, c
  18++6770 C1                           pop     bc                  // bc has high-word of d
  19++6771 D1                           pop     de
  20++6772 DD E5                        push    ix
  21++6774 E5                           push    hl                  // save Instruction Pointer
  22++6775 DD 21 00 00                  ld      ix, 0
  23++6779 CF                           rst     $08
  24++677A 9F                           db      $9F
  25++677B              F_Seek_Exit:
  26++677B C1                           pop     bc                  // restore Instruction Pointer
  27++677C DD E1                        pop     ix
  28++677E ED 62                        sbc     hl, hl              // to get 0 or -1
  29++6780
  30++6780                              psh1
  30++6780 E5          >                push    hl
  30++6781 DD E9       >                jp      (ix)
  31++6783
  32++6783              //  ______________________________________________________________________
  33++6783              //
  34++6783              // f_close      u -- f
  35++6783              // Close file-handle u.
  36++6783              // Return 0 on success, True flag on error
  37++6783
  38++6783                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++6783             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++6783             >
  38++6783             >                // dummy db directives used to calculate length of namec
  38++6783 46 5F 43 4C >                db      "F_CLOSE"
  38++6787 4F 53 45    >
  38++678A             >len_NFA         defl    $ - temp_NFA
  38++678A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++6783             >
  38++6783 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++6784 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++6788 4F 53 45    >
  38++678B             >                org     $-1                 // alter last byte of Name just above to set
  38++678A C5          >                db      {b $} | END_BIT     // msb as name end
  38++678B             >
  38++678B 63 67       >                dw      last_NFA            // Link to previous definition Name
  38++678D             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++678D ~           >                call    runcode ; ok        // for primitive definitions  actual code
  38++678D ~           >
  38++678D ~           >
  38++678D             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++678D             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++678D             >
  38++678D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++678D
  40++678D E1                           pop     hl
  41++678E 7D                           ld      a, l                // file-handle
  42++678F DD E5                        push    ix
  43++6791 C5                           push    bc                  // Save Instruction pointer
  44++6792 CF                           rst     $08
  45++6793 9B                           db      $9B
  46++6794 18 E5                        jr      F_Seek_Exit
  47++6796              //              pop     bc
  48++6796              //              pop     ix
  49++6796              //              sbc     hl, hl
  50++6796              //              psh1
  51++6796
  52++6796              //  ______________________________________________________________________
  53++6796              //
  54++6796              // f_sync      u -- f
  55++6796              // Close file-handle u.
  56++6796              // Return 0 on success, True flag on error
  57++6796
  58++6796                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++6796             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++6796             >
  58++6796             >                // dummy db directives used to calculate length of namec
  58++6796 46 5F 53 59 >                db      "F_SYNC"
  58++679A 4E 43       >
  58++679C             >len_NFA         defl    $ - temp_NFA
  58++679C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++6796             >
  58++6796 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++6797 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++679B 4E 43       >
  58++679D             >                org     $-1                 // alter last byte of Name just above to set
  58++679C C3          >                db      {b $} | END_BIT     // msb as name end
  58++679D             >
  58++679D 83 67       >                dw      last_NFA            // Link to previous definition Name
  58++679F             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++679F ~           >                call    runcode ; ok        // for primitive definitions  actual code
  58++679F ~           >
  58++679F ~           >
  58++679F             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++679F             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++679F             >
  58++679F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++679F E1                           pop     hl
  60++67A0 7D                           ld      a, l                // file-handle
  61++67A1 DD E5                        push    ix
  62++67A3 C5                           push    bc
  63++67A4 CF                           rst     $08
  64++67A5 9C                           db      $9C
  65++67A6 18 D3                        jr      F_Seek_Exit
  66++67A8              //              pop     bc
  67++67A8              //              pop     ix
  68++67A8              //              sbc     hl, hl
  69++67A8              //              psh1
  70++67A8
  71++67A8              //  ______________________________________________________________________
  72++67A8              //
  73++67A8              // f_fgetpos    u -- d f
  74++67A8              // Seek to position d in file-handle u.
  75++67A8              // Return a false-flag 0 on success, True flag on error
  76++67A8                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++67A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++67A8             >
  76++67A8             >                // dummy db directives used to calculate length of namec
  76++67A8 46 5F 46 47 >                db      "F_FGETPOS"
  76++67AC 45 54 50 4F >
  76++67B0 53          >
  76++67B1             >len_NFA         defl    $ - temp_NFA
  76++67B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++67A8             >
  76++67A8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++67A9 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++67AD 45 54 50 4F >
  76++67B1 53          >
  76++67B2             >                org     $-1                 // alter last byte of Name just above to set
  76++67B1 D3          >                db      {b $} | END_BIT     // msb as name end
  76++67B2             >
  76++67B2 96 67       >                dw      last_NFA            // Link to previous definition Name
  76++67B4             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++67B4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  76++67B4 ~           >
  76++67B4 ~           >
  76++67B4             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++67B4             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++67B4             >
  76++67B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++67B4 E1                           pop     hl
  78++67B5 7D                           ld      a, l                // file-handle
  79++67B6 DD E5                        push    ix
  80++67B8 C5                           push    bc
  81++67B9 CF                           rst     $08
  82++67BA A0                           db      $A0
  83++67BB E1                           pop     hl                  // restore Instruction Pointer
  84++67BC DD E1                        pop     ix
  85++67BE D5                           push    de
  86++67BF C5                           push    bc
  87++67C0 44                           ld      b, h                // restore Instruction Pointer
  88++67C1 4D                           ld      c, l
  89++67C2 ED 62                        sbc     hl, hl
  90++67C4
  91++67C4                              psh1
  91++67C4 E5          >                push    hl
  91++67C5 DD E9       >                jp      (ix)
  92++67C7
  93++67C7              //  ______________________________________________________________________
  94++67C7              //
  95++67C7              // f_read       a b u -- n f
  96++67C7              // Read b bytes from file-handle u to address a
  97++67C7              // Return the actual number n of bytes read
  98++67C7              // Return 0 on success, True flag on error
  99++67C7                              New_Def F_READ, "F_READ", is_code, is_normal
  99++67C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++67C7             >
  99++67C7             >                // dummy db directives used to calculate length of namec
  99++67C7 46 5F 52 45 >                db      "F_READ"
  99++67CB 41 44       >
  99++67CD             >len_NFA         defl    $ - temp_NFA
  99++67CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++67C7             >
  99++67C7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++67C8 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++67CC 41 44       >
  99++67CE             >                org     $-1                 // alter last byte of Name just above to set
  99++67CD C4          >                db      {b $} | END_BIT     // msb as name end
  99++67CE             >
  99++67CE A8 67       >                dw      last_NFA            // Link to previous definition Name
  99++67D0             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++67D0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  99++67D0 ~           >
  99++67D0 ~           >
  99++67D0             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++67D0             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++67D0             >
  99++67D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++67D0
 101++67D0 50                           ld      d, b
 102++67D1 59                           ld      e, c
 103++67D2 E1                           pop     hl
 104++67D3 7D                           ld      a, l                // file-handle
 105++67D4 C1                           pop     bc                  // bc has bytes to read
 106++67D5 DD E3                        ex      (sp), ix            // ix has address
 107++67D7 D5                           push    de                  // Save Instruction pointer
 108++67D8 CF                           rst     $08
 109++67D9 9D                           db      $9D
 110++67DA              F_Read_Exit:
 111++67DA C1                           pop     bc                  // Restore Instruction pointer
 112++67DB DD E1                        pop     ix                  // Restore ix
 113++67DD D5                           push    de                  // bytes written
 114++67DE ED 62                        sbc     hl, hl
 115++67E0
 116++67E0                              psh1
 116++67E0 E5          >                push    hl
 116++67E1 DD E9       >                jp      (ix)
 117++67E3
 118++67E3              //  ______________________________________________________________________
 119++67E3              //
 120++67E3              // f_write      a b u -- n f
 121++67E3              // Write bytes currently stored at address a to file-handle u.
 122++67E3              // Return the actual n bytes written and 0 on success, True flag on error.
 123++67E3                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++67E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++67E3             >
 123++67E3             >                // dummy db directives used to calculate length of namec
 123++67E3 46 5F 57 52 >                db      "F_WRITE"
 123++67E7 49 54 45    >
 123++67EA             >len_NFA         defl    $ - temp_NFA
 123++67EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++67E3             >
 123++67E3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++67E4 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++67E8 49 54 45    >
 123++67EB             >                org     $-1                 // alter last byte of Name just above to set
 123++67EA C5          >                db      {b $} | END_BIT     // msb as name end
 123++67EB             >
 123++67EB C7 67       >                dw      last_NFA            // Link to previous definition Name
 123++67ED             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++67ED ~           >                call    runcode ; ok        // for primitive definitions  actual code
 123++67ED ~           >
 123++67ED ~           >
 123++67ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++67ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++67ED             >
 123++67ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++67ED
 125++67ED 50                           ld      d, b
 126++67EE 59                           ld      e, c
 127++67EF E1                           pop     hl
 128++67F0 7D                           ld      a, l                // file-handle
 129++67F1 C1                           pop     bc                  // bc has bytes to read
 130++67F2 DD E3                        ex      (sp), ix            // ix has address
 131++67F4 D5                           push    de                  // Save Instruction pointer
 132++67F5 CF                           rst     $08
 133++67F6 9E                           db      $9E
 134++67F7 18 E1                        jr F_Read_Exit
 135++67F9              //              pop     bc                  // Restore Instruction pointer
 136++67F9              //              pop     ix                  // Restore ix
 137++67F9              //              push    de                  // bytes written
 138++67F9              //              sbc     hl, hl
 139++67F9              //
 140++67F9              //              psh1
 141++67F9
 142++67F9              //  ______________________________________________________________________
 143++67F9              //
 144++67F9              // f_open       a1 a2 b -- u f
 145++67F9              // open a file
 146++67F9              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++67F9              // a2 is address to an 8-byte header data used in some cases.
 148++67F9              // b is access mode-byte, that is a combination of:
 149++67F9              // any/all of:
 150++67F9              //   esx_mode_read          $01 request read access
 151++67F9              //   esx_mode_write         $02 request write access
 152++67F9              //   esx_mode_use_header    $40 read/write +3DOS header
 153++67F9              // plus one of:
 154++67F9              //   esx_mode_open_exist    $00 only open existing file
 155++67F9              //   esx_mode_open_creat    $08 open existing or create file
 156++67F9              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++67F9              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++67F9              // Return file-handle u and 0 on success, True flag on error
 159++67F9                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++67F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++67F9             >
 159++67F9             >                // dummy db directives used to calculate length of namec
 159++67F9 46 5F 4F 50 >                db      "F_OPEN"
 159++67FD 45 4E       >
 159++67FF             >len_NFA         defl    $ - temp_NFA
 159++67FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++67F9             >
 159++67F9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++67FA 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++67FE 45 4E       >
 159++6800             >                org     $-1                 // alter last byte of Name just above to set
 159++67FF CE          >                db      {b $} | END_BIT     // msb as name end
 159++6800             >
 159++6800 E3 67       >                dw      last_NFA            // Link to previous definition Name
 159++6802             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++6802 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 159++6802 ~           >
 159++6802 ~           >
 159++6802             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++6802             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++6802             >
 159++6802             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++6802 60                           ld      h, b                // Save Instruction pointer
 161++6803 69                           ld      l, c
 162++6804 C1                           pop     bc                  // file-mode
 163++6805 41                           ld      b, c                // file-mode
 164++6806 D1                           pop     de                  // 8-bytes buffer if any
 165++6807 DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++6809 E5                           push    hl                  // Save Instruction pointer
 167++680A 3E 2A                        ld      a, "*"
 168++680C CF                           rst     $08
 169++680D 9A                           db      $9A
 170++680E              F_Open_Exit:
 171++680E 5F                           ld      e, a
 172++680F 16 00                        ld      d, 0
 173++6811 18 C7                        jr F_Read_Exit
 174++6813
 175++6813              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 176++6813              //   \ FILENAME 1+ PAD 1 F_OPEN
 177++6813              //   \ DROP
 178++6813              //   \ F_CLOSE
 179++6813
 180++6813
 181++6813              //  ______________________________________________________________________
 182++6813              //
 183++6813              // f_opendir    a1 a2 b -- u f
 184++6813              // open a file
 185++6813                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 185++6813             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185++6813             >
 185++6813             >                // dummy db directives used to calculate length of namec
 185++6813 46 5F 4F 50 >                db      "F_OPENDIR"
 185++6817 45 4E 44 49 >
 185++681B 52          >
 185++681C             >len_NFA         defl    $ - temp_NFA
 185++681C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185++6813             >
 185++6813 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185++6814 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 185++6818 45 4E 44 49 >
 185++681C 52          >
 185++681D             >                org     $-1                 // alter last byte of Name just above to set
 185++681C D2          >                db      {b $} | END_BIT     // msb as name end
 185++681D             >
 185++681D F9 67       >                dw      last_NFA            // Link to previous definition Name
 185++681F             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 185++681F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 185++681F ~           >
 185++681F ~           >
 185++681F             >                endif           ; ok        // for other definitions it "points" the correct handler
 185++681F             >                // Use of "; ok" to suppress "warning[fwdref]"
 185++681F             >
 185++681F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186++681F DD E3                        ex      (sp), ix            // filespec nul-terminated
 187++6821 C5                           push    bc                  // Save Instruction pointer
 188++6822 06 10                        ld      b, $10              // file-mode
 189++6824 3E 43                        ld      a, "C"
 190++6826 CF                           rst     $08
 191++6827 A3                           db      $A3
 192++6828 18 E4                        jr      F_Open_Exit
 193++682A
 194++682A
 195++682A              //  ______________________________________________________________________
 196++682A              //
 197++682A              // f_readdir    a1 a2 b -- u f
 198++682A              // open a file
 199++682A                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 199++682A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 199++682A             >
 199++682A             >                // dummy db directives used to calculate length of namec
 199++682A 46 5F 52 45 >                db      "F_READDIR"
 199++682E 41 44 44 49 >
 199++6832 52          >
 199++6833             >len_NFA         defl    $ - temp_NFA
 199++6833             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 199++682A             >
 199++682A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 199++682B 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 199++682F 41 44 44 49 >
 199++6833 52          >
 199++6834             >                org     $-1                 // alter last byte of Name just above to set
 199++6833 D2          >                db      {b $} | END_BIT     // msb as name end
 199++6834             >
 199++6834 13 68       >                dw      last_NFA            // Link to previous definition Name
 199++6836             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 199++6836 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 199++6836 ~           >
 199++6836 ~           >
 199++6836             >                endif           ; ok        // for other definitions it "points" the correct handler
 199++6836             >                // Use of "; ok" to suppress "warning[fwdref]"
 199++6836             >
 199++6836             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 200++6836 E1                           pop     hl
 201++6837 7D                           ld      a, l
 202++6838 D1                           pop     de
 203++6839 DD E3                        ex      (sp), ix            // filespec nul-terminated
 204++683B C5                           push    bc                  // Save Instruction pointer
 205++683C CF                           rst     $08
 206++683D A4                           db      $A4
 207++683E 18 CE                        jr      F_Open_Exit
 208++6840
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
 968+ 6840
 969+ 6840
 970+ 6840              //  ______________________________________________________________________
 971+ 6840              //
 972+ 6840              // cmove    a1 a2 u --
 973+ 6840              // If u > 0, moves memory content starting at address a1 for n bytes long
 974+ 6840              // storing then starting at address addr2.
 975+ 6840              // The content of a1 is moved first. See CMOVE> also.
 976+ 6840                              New_Def CMOVE, "CMOVE", is_code, is_normal
 976+ 6840             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 976+ 6840             >
 976+ 6840             >                // dummy db directives used to calculate length of namec
 976+ 6840 43 4D 4F 56 >                db      "CMOVE"
 976+ 6844 45          >
 976+ 6845             >len_NFA         defl    $ - temp_NFA
 976+ 6845             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 976+ 6840             >
 976+ 6840 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 976+ 6841 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 976+ 6845 45          >
 976+ 6846             >                org     $-1                 // alter last byte of Name just above to set
 976+ 6845 C5          >                db      {b $} | END_BIT     // msb as name end
 976+ 6846             >
 976+ 6846 2A 68       >                dw      last_NFA            // Link to previous definition Name
 976+ 6848             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 976+ 6848 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 976+ 6848 ~           >
 976+ 6848 ~           >
 976+ 6848             >                endif           ; ok        // for other definitions it "points" the correct handler
 976+ 6848             >                // Use of "; ok" to suppress "warning[fwdref]"
 976+ 6848             >
 976+ 6848             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 977+ 6848 D9                           exx
 978+ 6849
 979+ 6849 C1                           pop     bc                  // bc has counter
 980+ 684A D1                           pop     de                  // de now has dest
 981+ 684B E1                           pop     hl                 // hl has source, save Instruction Pointer
 982+ 684C 78                           ld      a, b
 983+ 684D B1                           or      c
 984+ 684E 28 02                        jr      z, Cmove_NoMove
 985+ 6850 ED B0                            ldir
 986+ 6852              Cmove_NoMove:
 987+ 6852 D9                           exx
 988+ 6853
 989+ 6853                              next
 989+ 6853 DD E9       >                jp      (ix)
 990+ 6855
 991+ 6855              //  ______________________________________________________________________
 992+ 6855              //
 993+ 6855              // cmove>    a1 a2 u --
 994+ 6855              // If u > 0, moves memory content starting at address a1 for n bytes long
 995+ 6855              // storing then starting at address addr2.
 996+ 6855              // The content of a1 is moved last. See cmove.
 997+ 6855                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 997+ 6855             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 997+ 6855             >
 997+ 6855             >                // dummy db directives used to calculate length of namec
 997+ 6855 43 4D 4F 56 >                db      "CMOVE>"
 997+ 6859 45 3E       >
 997+ 685B             >len_NFA         defl    $ - temp_NFA
 997+ 685B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 997+ 6855             >
 997+ 6855 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 997+ 6856 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 997+ 685A 45 3E       >
 997+ 685C             >                org     $-1                 // alter last byte of Name just above to set
 997+ 685B BE          >                db      {b $} | END_BIT     // msb as name end
 997+ 685C             >
 997+ 685C 40 68       >                dw      last_NFA            // Link to previous definition Name
 997+ 685E             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 997+ 685E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 997+ 685E ~           >
 997+ 685E ~           >
 997+ 685E             >                endif           ; ok        // for other definitions it "points" the correct handler
 997+ 685E             >                // Use of "; ok" to suppress "warning[fwdref]"
 997+ 685E             >
 997+ 685E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 998+ 685E D9                           exx
 999+ 685F
1000+ 685F C1                           pop     bc                  // bc has counter
1001+ 6860 D1                           pop     de                  // de has dest
1002+ 6861 E1                           pop     hl                  // hl has source, save Instruction Pointer
1003+ 6862 78                           ld      a, b
1004+ 6863 B1                           or      c
1005+ 6864 28 08                        jr      z, CmoveV_NoMove
1006+ 6866 EB                               ex      de, hl              // compute address to
1007+ 6867 09                               add     hl, bc              // operate backward
1008+ 6868 2B                               dec     hl
1009+ 6869 EB                               ex      de, hl
1010+ 686A 09                               add     hl, bc
1011+ 686B 2B                               dec     hl
1012+ 686C ED B8                            lddr                        // backward
1013+ 686E              CmoveV_NoMove:
1014+ 686E D9                           exx
1015+ 686F
1016+ 686F                              next
1016+ 686F DD E9       >                jp      (ix)
1017+ 6871
1018+ 6871              //  ______________________________________________________________________
1019+ 6871              //
1020+ 6871              // um*      u1 u2 -- ud
1021+ 6871              // Unsigned multiplication
1022+ 6871              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1023+ 6871              // On the stack a double number is treated as two single numbers
1024+ 6871              // where DE is on the top of the stack and HL is the second from top,
1025+ 6871              // Instead, in 2VARIABLE a double number is stored as EDLH.
1026+ 6871              // this definition could use "MUL" Z80N new op-code.
1027+ 6871                              New_Def UM_MUL, "UM*", is_code, is_normal
1027+ 6871             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1027+ 6871             >
1027+ 6871             >                // dummy db directives used to calculate length of namec
1027+ 6871 55 4D 2A    >                db      "UM*"
1027+ 6874             >len_NFA         defl    $ - temp_NFA
1027+ 6874             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1027+ 6871             >
1027+ 6871 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1027+ 6872 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1027+ 6875             >                org     $-1                 // alter last byte of Name just above to set
1027+ 6874 AA          >                db      {b $} | END_BIT     // msb as name end
1027+ 6875             >
1027+ 6875 55 68       >                dw      last_NFA            // Link to previous definition Name
1027+ 6877             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1027+ 6877 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1027+ 6877 ~           >
1027+ 6877 ~           >
1027+ 6877             >                endif           ; ok        // for other definitions it "points" the correct handler
1027+ 6877             >                // Use of "; ok" to suppress "warning[fwdref]"
1027+ 6877             >
1027+ 6877             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1028+ 6877 D9                           exx
1029+ 6878 D1                           pop     de                    // de has u2 operand
1030+ 6879 E1                           pop     hl                    // hl has u1 operand
1031+ 687A 45                           ld      b, l
1032+ 687B 4B                           ld      c, e
1033+ 687C 5D                           ld      e, l
1034+ 687D 6A                           ld      l, d
1035+ 687E E5                           push    hl
1036+ 687F 69                           ld      l, c
1037+ 6880 ED 30                        mul
1038+ 6882 EB                           ex      de, hl
1039+ 6883 ED 30                        mul
1040+ 6885 AF                           xor     a
1041+ 6886 19                           add     hl, de
1042+ 6887 8F                           adc     a
1043+ 6888 59                           ld      e, c
1044+ 6889 50                           ld      d, b
1045+ 688A ED 30                        mul
1046+ 688C 47                           ld      b, a
1047+ 688D 4C                           ld      c, h
1048+ 688E 7A                           ld      a, d
1049+ 688F 85                           add     l
1050+ 6890 67                           ld      h, a
1051+ 6891 6B                           ld      l, e
1052+ 6892 D1                           pop     de
1053+ 6893 ED 30                        mul
1054+ 6895 EB                           ex      de, hl
1055+ 6896 ED 4A                        adc     hl, bc
1056+ 6898 D5                           push    de
1057+ 6899 E5                           push    hl
1058+ 689A D9                           exx
1059+ 689B                              next
1059+ 689B DD E9       >                jp      (ix)
1060+ 689D
1061+ 689D              //  ______________________________________________________________________
1062+ 689D              //
1063+ 689D              // um/mod      ud u1 -- q r
1064+ 689D              // divides ud into u1 giving quotient q and remainder r
1065+ 689D              // algorithm takes 16 bit at a time starting from msb
1066+ 689D              // DE grows from lsb upward with quotient result
1067+ 689D              // HL keeps the remainder at each stage of division
1068+ 689D              // each loop 'lowers' the next binary digit to form the current dividend
1069+ 689D                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1069+ 689D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1069+ 689D             >
1069+ 689D             >                // dummy db directives used to calculate length of namec
1069+ 689D 55 4D 2F 4D >                db      "UM/MOD"
1069+ 68A1 4F 44       >
1069+ 68A3             >len_NFA         defl    $ - temp_NFA
1069+ 68A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1069+ 689D             >
1069+ 689D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1069+ 689E 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1069+ 68A2 4F 44       >
1069+ 68A4             >                org     $-1                 // alter last byte of Name just above to set
1069+ 68A3 C4          >                db      {b $} | END_BIT     // msb as name end
1069+ 68A4             >
1069+ 68A4 71 68       >                dw      last_NFA            // Link to previous definition Name
1069+ 68A6             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1069+ 68A6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1069+ 68A6 ~           >
1069+ 68A6 ~           >
1069+ 68A6             >                endif           ; ok        // for other definitions it "points" the correct handler
1069+ 68A6             >                // Use of "; ok" to suppress "warning[fwdref]"
1069+ 68A6             >
1069+ 68A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1070+ 68A6 D9                           exx
1071+ 68A7 C1                           pop     bc                      // divisor
1072+ 68A8
1073+ 68A8 E1                           pop     hl                      // < high part
1074+ 68A9 D1                           pop     de                      // < low part and
1075+ 68AA
1076+ 68AA 7D                           ld      a, l                    // check without changing arguments
1077+ 68AB 91                           sub     c                       // if divisor is greater than high part
1078+ 68AC 7C                           ld      a, h                    // so quotient will be in range
1079+ 68AD 98                           sbc     a, b
1080+ 68AE 30 20                        jr      nc, Um_DivMod_OutOfRange
1081+ 68B0 3E 10                            ld      a, 16
1082+ 68B2              Um_DivMod_Loop:
1083+ 68B2 CB 23                                sla     e
1084+ 68B4 CB 12                                rl      d
1085+ 68B6 ED 6A                                adc     hl, hl
1086+ 68B8 30 05                                jr      nc, Um_DivMod_Carry
1087+ 68BA A7                                       and     a
1088+ 68BB ED 42                                    sbc     hl, bc
1089+ 68BD 18 07                                jr      Um_DivMod_Endif    // else
1090+ 68BF              Um_DivMod_Carry:
1091+ 68BF A7                                       and     a
1092+ 68C0 ED 42                                    sbc     hl, bc
1093+ 68C2 30 02                                    jr      nc, Um_DivMod_Endif
1094+ 68C4 09                                           add     hl, bc
1095+ 68C5 1B                                           dec     de
1096+ 68C6              Um_DivMod_Endif:                                   // endif
1097+ 68C6 13                                   inc     de
1098+ 68C7 3D                                   dec     a
1099+ 68C8 20 E8                            jr      nz, Um_DivMod_Loop
1100+ 68CA EB                               ex      de, hl
1101+ 68CB              Um_DivMod_Bailout:
1102+ 68CB D5                               push    de                  // de := remanider
1103+ 68CC E5                               push    hl                  // hl := quotient
1104+ 68CD D9                               exx
1105+ 68CE                                  next
1105+ 68CE DD E9       >                jp      (ix)
1106+ 68D0
1107+ 68D0              Um_DivMod_OutOfRange:
1108+ 68D0 21 FF FF                     ld      hl, -1
1109+ 68D3 54                           ld      d, h
1110+ 68D4 5D                           ld      e, l
1111+ 68D5 18 F4                        jr      Um_DivMod_Bailout
1112+ 68D7
1113+ 68D7              //  ______________________________________________________________________
1114+ 68D7              //
1115+ 68D7              // and          n1 n2 -- n3
1116+ 68D7              // bit logical AND. Returns n3 as n1 & n2
1117+ 68D7                              New_Def AND_OP, "AND", is_code, is_normal
1117+ 68D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1117+ 68D7             >
1117+ 68D7             >                // dummy db directives used to calculate length of namec
1117+ 68D7 41 4E 44    >                db      "AND"
1117+ 68DA             >len_NFA         defl    $ - temp_NFA
1117+ 68DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1117+ 68D7             >
1117+ 68D7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1117+ 68D8 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1117+ 68DB             >                org     $-1                 // alter last byte of Name just above to set
1117+ 68DA C4          >                db      {b $} | END_BIT     // msb as name end
1117+ 68DB             >
1117+ 68DB 9D 68       >                dw      last_NFA            // Link to previous definition Name
1117+ 68DD             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1117+ 68DD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1117+ 68DD ~           >
1117+ 68DD ~           >
1117+ 68DD             >                endif           ; ok        // for other definitions it "points" the correct handler
1117+ 68DD             >                // Use of "; ok" to suppress "warning[fwdref]"
1117+ 68DD             >
1117+ 68DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1118+ 68DD D1                           pop     de
1119+ 68DE E1                           pop     hl
1120+ 68DF 7B                           ld      a, e
1121+ 68E0 A5                           and     l
1122+ 68E1 6F                           ld      l, a
1123+ 68E2 7A                           ld      a, d
1124+ 68E3 A4                           and     h
1125+ 68E4 67                           ld      h, a
1126+ 68E5
1127+ 68E5                              psh1
1127+ 68E5 E5          >                push    hl
1127+ 68E6 DD E9       >                jp      (ix)
1128+ 68E8
1129+ 68E8              //  ______________________________________________________________________
1130+ 68E8              //
1131+ 68E8              // or           n1 n2 -- n3
1132+ 68E8              // bit logical OR. Returns n3 as n1 | n2
1133+ 68E8                              New_Def OR_OP, "OR", is_code, is_normal
1133+ 68E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1133+ 68E8             >
1133+ 68E8             >                // dummy db directives used to calculate length of namec
1133+ 68E8 4F 52       >                db      "OR"
1133+ 68EA             >len_NFA         defl    $ - temp_NFA
1133+ 68EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1133+ 68E8             >
1133+ 68E8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1133+ 68E9 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1133+ 68EB             >                org     $-1                 // alter last byte of Name just above to set
1133+ 68EA D2          >                db      {b $} | END_BIT     // msb as name end
1133+ 68EB             >
1133+ 68EB D7 68       >                dw      last_NFA            // Link to previous definition Name
1133+ 68ED             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1133+ 68ED ~           >                call    runcode ; ok        // for primitive definitions  actual code
1133+ 68ED ~           >
1133+ 68ED ~           >
1133+ 68ED             >                endif           ; ok        // for other definitions it "points" the correct handler
1133+ 68ED             >                // Use of "; ok" to suppress "warning[fwdref]"
1133+ 68ED             >
1133+ 68ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1134+ 68ED D1                           pop     de
1135+ 68EE E1                           pop     hl
1136+ 68EF 7B                           ld      a, e
1137+ 68F0 B5                           or      l
1138+ 68F1 6F                           ld      l, a
1139+ 68F2 7A                           ld      a, d
1140+ 68F3 B4                           or      h
1141+ 68F4 67                           ld      h, a
1142+ 68F5
1143+ 68F5                              psh1
1143+ 68F5 E5          >                push    hl
1143+ 68F6 DD E9       >                jp      (ix)
1144+ 68F8
1145+ 68F8              //  ______________________________________________________________________
1146+ 68F8              //
1147+ 68F8              // xor          n1 n2 -- n3
1148+ 68F8              // bit logical OR. Returns n3 as n1 ^ n2
1149+ 68F8                              New_Def XOR_OP, "XOR", is_code, is_normal
1149+ 68F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1149+ 68F8             >
1149+ 68F8             >                // dummy db directives used to calculate length of namec
1149+ 68F8 58 4F 52    >                db      "XOR"
1149+ 68FB             >len_NFA         defl    $ - temp_NFA
1149+ 68FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1149+ 68F8             >
1149+ 68F8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1149+ 68F9 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1149+ 68FC             >                org     $-1                 // alter last byte of Name just above to set
1149+ 68FB D2          >                db      {b $} | END_BIT     // msb as name end
1149+ 68FC             >
1149+ 68FC E8 68       >                dw      last_NFA            // Link to previous definition Name
1149+ 68FE             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1149+ 68FE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1149+ 68FE ~           >
1149+ 68FE ~           >
1149+ 68FE             >                endif           ; ok        // for other definitions it "points" the correct handler
1149+ 68FE             >                // Use of "; ok" to suppress "warning[fwdref]"
1149+ 68FE             >
1149+ 68FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1150+ 68FE D1                           pop     de
1151+ 68FF E1                           pop     hl
1152+ 6900 7B                           ld      a, e
1153+ 6901 AD                           xor     l
1154+ 6902 6F                           ld      l, a
1155+ 6903 7A                           ld      a, d
1156+ 6904 AC                           xor     h
1157+ 6905 67                           ld      h, a
1158+ 6906
1159+ 6906                              psh1
1159+ 6906 E5          >                push    hl
1159+ 6907 DD E9       >                jp      (ix)
1160+ 6909
1161+ 6909              //  ______________________________________________________________________
1162+ 6909              //
1163+ 6909              // sp@      -- a
1164+ 6909              // returns on top of stack the value of SP before execution
1165+ 6909                              New_Def SPFETCH, "SP@", is_code, is_normal
1165+ 6909             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1165+ 6909             >
1165+ 6909             >                // dummy db directives used to calculate length of namec
1165+ 6909 53 50 40    >                db      "SP@"
1165+ 690C             >len_NFA         defl    $ - temp_NFA
1165+ 690C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1165+ 6909             >
1165+ 6909 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1165+ 690A 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1165+ 690D             >                org     $-1                 // alter last byte of Name just above to set
1165+ 690C C0          >                db      {b $} | END_BIT     // msb as name end
1165+ 690D             >
1165+ 690D F8 68       >                dw      last_NFA            // Link to previous definition Name
1165+ 690F             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1165+ 690F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1165+ 690F ~           >
1165+ 690F ~           >
1165+ 690F             >                endif           ; ok        // for other definitions it "points" the correct handler
1165+ 690F             >                // Use of "; ok" to suppress "warning[fwdref]"
1165+ 690F             >
1165+ 690F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1166+ 690F
1167+ 690F 21 00 00                     ld      hl, 0
1168+ 6912 39                           add     hl, sp
1169+ 6913
1170+ 6913                              psh1
1170+ 6913 E5          >                push    hl
1170+ 6914 DD E9       >                jp      (ix)
1171+ 6916
1172+ 6916              //  ______________________________________________________________________
1173+ 6916              //
1174+ 6916              // sp!      a --
1175+ 6916              // restore SP to the initial value passed
1176+ 6916              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1177+ 6916                              New_Def SPSTORE, "SP!", is_code, is_normal
1177+ 6916             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1177+ 6916             >
1177+ 6916             >                // dummy db directives used to calculate length of namec
1177+ 6916 53 50 21    >                db      "SP!"
1177+ 6919             >len_NFA         defl    $ - temp_NFA
1177+ 6919             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1177+ 6916             >
1177+ 6916 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1177+ 6917 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1177+ 691A             >                org     $-1                 // alter last byte of Name just above to set
1177+ 6919 A1          >                db      {b $} | END_BIT     // msb as name end
1177+ 691A             >
1177+ 691A 09 69       >                dw      last_NFA            // Link to previous definition Name
1177+ 691C             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1177+ 691C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1177+ 691C ~           >
1177+ 691C ~           >
1177+ 691C             >                endif           ; ok        // for other definitions it "points" the correct handler
1177+ 691C             >                // Use of "; ok" to suppress "warning[fwdref]"
1177+ 691C             >
1177+ 691C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1178+ 691C E1                           pop     hl
1179+ 691D F9                           ld      sp, hl
1180+ 691E
1181+ 691E                              next
1181+ 691E DD E9       >                jp      (ix)
1182+ 6920
1183+ 6920              //  ______________________________________________________________________
1184+ 6920              //
1185+ 6920              // rp@      -- a
1186+ 6920              // returns on top of stack the value of Return-Pointer
1187+ 6920                              New_Def RPFETCH, "RP@", is_code, is_normal
1187+ 6920             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1187+ 6920             >
1187+ 6920             >                // dummy db directives used to calculate length of namec
1187+ 6920 52 50 40    >                db      "RP@"
1187+ 6923             >len_NFA         defl    $ - temp_NFA
1187+ 6923             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1187+ 6920             >
1187+ 6920 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1187+ 6921 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1187+ 6924             >                org     $-1                 // alter last byte of Name just above to set
1187+ 6923 C0          >                db      {b $} | END_BIT     // msb as name end
1187+ 6924             >
1187+ 6924 16 69       >                dw      last_NFA            // Link to previous definition Name
1187+ 6926             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1187+ 6926 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1187+ 6926 ~           >
1187+ 6926 ~           >
1187+ 6926             >                endif           ; ok        // for other definitions it "points" the correct handler
1187+ 6926             >                // Use of "; ok" to suppress "warning[fwdref]"
1187+ 6926             >
1187+ 6926             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1188+ 6926
1189+ 6926                              ldhlrp
1189+ 6926 2A 96 63    >                ld      hl,(RP_Pointer)
1190+ 6929
1191+ 6929                              psh1
1191+ 6929 E5          >                push    hl
1191+ 692A DD E9       >                jp      (ix)
1192+ 692C
1193+ 692C              //  ______________________________________________________________________
1194+ 692C              //
1195+ 692C              // rp!      a --
1196+ 692C              // restore RP to the initial value passed
1197+ 692C              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1198+ 692C                              New_Def RPSTORE, "RP!", is_code, is_normal
1198+ 692C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1198+ 692C             >
1198+ 692C             >                // dummy db directives used to calculate length of namec
1198+ 692C 52 50 21    >                db      "RP!"
1198+ 692F             >len_NFA         defl    $ - temp_NFA
1198+ 692F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1198+ 692C             >
1198+ 692C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1198+ 692D 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1198+ 6930             >                org     $-1                 // alter last byte of Name just above to set
1198+ 692F A1          >                db      {b $} | END_BIT     // msb as name end
1198+ 6930             >
1198+ 6930 20 69       >                dw      last_NFA            // Link to previous definition Name
1198+ 6932             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1198+ 6932 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1198+ 6932 ~           >
1198+ 6932 ~           >
1198+ 6932             >                endif           ; ok        // for other definitions it "points" the correct handler
1198+ 6932             >                // Use of "; ok" to suppress "warning[fwdref]"
1198+ 6932             >
1198+ 6932             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1199+ 6932 E1                           pop     hl
1200+ 6933                              ldrphl
1200+ 6933 22 96 63    >                ld      (RP_Pointer),hl
1201+ 6936
1202+ 6936                              next
1202+ 6936 DD E9       >                jp      (ix)
1203+ 6938
1204+ 6938              //  ______________________________________________________________________
1205+ 6938              //
1206+ 6938              // exit       --
1207+ 6938              // exits back to the caller word
1208+ 6938                              New_Def EXIT, "EXIT", is_code, is_normal
1208+ 6938             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1208+ 6938             >
1208+ 6938             >                // dummy db directives used to calculate length of namec
1208+ 6938 45 58 49 54 >                db      "EXIT"
1208+ 693C             >len_NFA         defl    $ - temp_NFA
1208+ 693C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1208+ 6938             >
1208+ 6938 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1208+ 6939 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1208+ 693D             >                org     $-1                 // alter last byte of Name just above to set
1208+ 693C D4          >                db      {b $} | END_BIT     // msb as name end
1208+ 693D             >
1208+ 693D 2C 69       >                dw      last_NFA            // Link to previous definition Name
1208+ 693F             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1208+ 693F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1208+ 693F ~           >
1208+ 693F ~           >
1208+ 693F             >                endif           ; ok        // for other definitions it "points" the correct handler
1208+ 693F             >                // Use of "; ok" to suppress "warning[fwdref]"
1208+ 693F             >
1208+ 693F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1209+ 693F                              ldhlrp                      // Get Return Stack Pointer
1209+ 693F 2A 96 63    >                ld      hl,(RP_Pointer)
1210+ 6942 4E                           ld      c, (hl)             // pop Instruction Pointer
1211+ 6943 23                           inc     hl                  // from Return Stack
1212+ 6944 46                           ld      b, (hl)
1213+ 6945 23                           inc     hl
1214+ 6946                              ldrphl                      // Set Return Stack Pointer
1214+ 6946 22 96 63    >                ld      (RP_Pointer),hl
1215+ 6949                              next
1215+ 6949 DD E9       >                jp      (ix)
1216+ 694B
1217+ 694B              //  ______________________________________________________________________
1218+ 694B              //
1219+ 694B              // lastl      --
1220+ 694B              // exits back to the caller word
1221+ 694B              //              New_Def EXIT, "LASTL", is_code, is_normal
1222+ 694B              //              ldhlrp                      // Get Return Stack Pointer
1223+ 694B              //              ld      e, (hl)             // pop Instruction Pointer
1224+ 694B              //              inc     hl                  // from Return Stack
1225+ 694B              //              ld      d, (hl)
1226+ 694B              //              inc     hl
1227+ 694B              //              ld      (hl), e
1228+ 694B              //              inc     hl
1229+ 694B              //              ld      (hl), d
1230+ 694B              //              next
1231+ 694B
1232+ 694B              //  ______________________________________________________________________
1233+ 694B              //
1234+ 694B              // >r      n --
1235+ 694B              // pop from calculator-stack and push into return-stack
1236+ 694B                              New_Def TO_R, ">R", is_code, is_normal
1236+ 694B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1236+ 694B             >
1236+ 694B             >                // dummy db directives used to calculate length of namec
1236+ 694B 3E 52       >                db      ">R"
1236+ 694D             >len_NFA         defl    $ - temp_NFA
1236+ 694D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1236+ 694B             >
1236+ 694B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1236+ 694C 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1236+ 694E             >                org     $-1                 // alter last byte of Name just above to set
1236+ 694D D2          >                db      {b $} | END_BIT     // msb as name end
1236+ 694E             >
1236+ 694E 38 69       >                dw      last_NFA            // Link to previous definition Name
1236+ 6950             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1236+ 6950 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1236+ 6950 ~           >
1236+ 6950 ~           >
1236+ 6950             >                endif           ; ok        // for other definitions it "points" the correct handler
1236+ 6950             >                // Use of "; ok" to suppress "warning[fwdref]"
1236+ 6950             >
1236+ 6950             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1237+ 6950 D1                           pop     de
1238+ 6951                              ldhlrp
1238+ 6951 2A 96 63    >                ld      hl,(RP_Pointer)
1239+ 6954 2B                           dec     hl
1240+ 6955 72                           ld      (hl), d             // store current TOS
1241+ 6956 2B                           dec     hl                  // to Return Stack
1242+ 6957 73                           ld      (hl), e
1243+ 6958                              ldrphl
1243+ 6958 22 96 63    >                ld      (RP_Pointer),hl
1244+ 695B
1245+ 695B                              next
1245+ 695B DD E9       >                jp      (ix)
1246+ 695D
1247+ 695D              //  ______________________________________________________________________
1248+ 695D              //
1249+ 695D              // r>      -- n
1250+ 695D              // pop from return-stack and push into calculator-stack
1251+ 695D                              New_Def R_TO, "R>", is_code, is_normal
1251+ 695D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1251+ 695D             >
1251+ 695D             >                // dummy db directives used to calculate length of namec
1251+ 695D 52 3E       >                db      "R>"
1251+ 695F             >len_NFA         defl    $ - temp_NFA
1251+ 695F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1251+ 695D             >
1251+ 695D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1251+ 695E 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1251+ 6960             >                org     $-1                 // alter last byte of Name just above to set
1251+ 695F BE          >                db      {b $} | END_BIT     // msb as name end
1251+ 6960             >
1251+ 6960 4B 69       >                dw      last_NFA            // Link to previous definition Name
1251+ 6962             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1251+ 6962 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1251+ 6962 ~           >
1251+ 6962 ~           >
1251+ 6962             >                endif           ; ok        // for other definitions it "points" the correct handler
1251+ 6962             >                // Use of "; ok" to suppress "warning[fwdref]"
1251+ 6962             >
1251+ 6962             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1252+ 6962
1253+ 6962                              ldhlrp
1253+ 6962 2A 96 63    >                ld      hl,(RP_Pointer)
1254+ 6965 5E                           ld      e, (hl)             // retrieve from Return Stack
1255+ 6966 23                           inc     hl
1256+ 6967 56                           ld      d, (hl)
1257+ 6968 23                           inc     hl
1258+ 6969                              ldrphl
1258+ 6969 22 96 63    >                ld      (RP_Pointer),hl
1259+ 696C D5                           push    de
1260+ 696D                              next
1260+ 696D DD E9       >                jp      (ix)
1261+ 696F
1262+ 696F              //  ______________________________________________________________________
1263+ 696F              //
1264+ 696F              // r@           -- n
1265+ 696F              // return on top of stack the value of top of return-stack
1266+ 696F              // Since this is the same as I, we alter R's CFA to jump there
1267+ 696F                              New_Def R_OP, "R@", is_code, is_normal
1267+ 696F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1267+ 696F             >
1267+ 696F             >                // dummy db directives used to calculate length of namec
1267+ 696F 52 40       >                db      "R@"
1267+ 6971             >len_NFA         defl    $ - temp_NFA
1267+ 6971             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1267+ 696F             >
1267+ 696F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1267+ 6970 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1267+ 6972             >                org     $-1                 // alter last byte of Name just above to set
1267+ 6971 C0          >                db      {b $} | END_BIT     // msb as name end
1267+ 6972             >
1267+ 6972 5D 69       >                dw      last_NFA            // Link to previous definition Name
1267+ 6974             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1267+ 6974 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1267+ 6974 ~           >
1267+ 6974 ~           >
1267+ 6974             >                endif           ; ok        // for other definitions it "points" the correct handler
1267+ 6974             >                // Use of "; ok" to suppress "warning[fwdref]"
1267+ 6974             >
1267+ 6974             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1268+ 6974 C3 78 64                     jp      I_Ptr
1269+ 6977
1270+ 6977              //  ______________________________________________________________________
1271+ 6977              //
1272+ 6977              // r            -- n
1273+ 6977              // return on top of stack the value of top of return-stack
1274+ 6977              // Since this is the same as I, we alter R's CFA to jump there
1275+ 6977              //              New_Def R_OLD, "R", is_code, is_normal
1276+ 6977              //              jp      I_Ptr
1277+ 6977
1278+ 6977              //  ______________________________________________________________________
1279+ 6977              //
1280+ 6977              // 0=           n -- f
1281+ 6977              // true (non zero) if n is zero, false (0) elsewere
1282+ 6977                              New_Def ZEQUAL, "0=", is_code, is_normal
1282+ 6977             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1282+ 6977             >
1282+ 6977             >                // dummy db directives used to calculate length of namec
1282+ 6977 30 3D       >                db      "0="
1282+ 6979             >len_NFA         defl    $ - temp_NFA
1282+ 6979             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1282+ 6977             >
1282+ 6977 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1282+ 6978 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1282+ 697A             >                org     $-1                 // alter last byte of Name just above to set
1282+ 6979 BD          >                db      {b $} | END_BIT     // msb as name end
1282+ 697A             >
1282+ 697A 6F 69       >                dw      last_NFA            // Link to previous definition Name
1282+ 697C             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1282+ 697C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1282+ 697C ~           >
1282+ 697C ~           >
1282+ 697C             >                endif           ; ok        // for other definitions it "points" the correct handler
1282+ 697C             >                // Use of "; ok" to suppress "warning[fwdref]"
1282+ 697C             >
1282+ 697C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1283+ 697C              Zero_Equal:
1284+ 697C E1                           pop     hl
1285+ 697D 7D                           ld      a, l
1286+ 697E B4                           or      h
1287+ 697F 21 00 00                     ld      hl, FALSE_FLAG
1288+ 6982 20 01                        jr      nz, ZEqual_Skip
1289+ 6984 2B                               dec     hl
1290+ 6985              ZEqual_Skip:
1291+ 6985                              psh1
1291+ 6985 E5          >                push    hl
1291+ 6986 DD E9       >                jp      (ix)
1292+ 6988
1293+ 6988              //  ______________________________________________________________________
1294+ 6988              //
1295+ 6988              // not         a1 -- a2
1296+ 6988              // increment by 2 top of stack
1297+ 6988                              New_Def NOT_OP, "NOT", is_code, is_normal
1297+ 6988             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1297+ 6988             >
1297+ 6988             >                // dummy db directives used to calculate length of namec
1297+ 6988 4E 4F 54    >                db      "NOT"
1297+ 698B             >len_NFA         defl    $ - temp_NFA
1297+ 698B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1297+ 6988             >
1297+ 6988 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1297+ 6989 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1297+ 698C             >                org     $-1                 // alter last byte of Name just above to set
1297+ 698B D4          >                db      {b $} | END_BIT     // msb as name end
1297+ 698C             >
1297+ 698C 77 69       >                dw      last_NFA            // Link to previous definition Name
1297+ 698E             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1297+ 698E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1297+ 698E ~           >
1297+ 698E ~           >
1297+ 698E             >                endif           ; ok        // for other definitions it "points" the correct handler
1297+ 698E             >                // Use of "; ok" to suppress "warning[fwdref]"
1297+ 698E             >
1297+ 698E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1298+ 698E C3 7C 69                     jp      Zero_Equal
1299+ 6991
1300+ 6991              //  ______________________________________________________________________
1301+ 6991              //
1302+ 6991              // 0<           n -- f
1303+ 6991              // true (non zero) if n is less than zero, false (0) elsewere
1304+ 6991                              New_Def ZLESS, "0<", is_code, is_normal
1304+ 6991             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1304+ 6991             >
1304+ 6991             >                // dummy db directives used to calculate length of namec
1304+ 6991 30 3C       >                db      "0<"
1304+ 6993             >len_NFA         defl    $ - temp_NFA
1304+ 6993             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1304+ 6991             >
1304+ 6991 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1304+ 6992 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1304+ 6994             >                org     $-1                 // alter last byte of Name just above to set
1304+ 6993 BC          >                db      {b $} | END_BIT     // msb as name end
1304+ 6994             >
1304+ 6994 88 69       >                dw      last_NFA            // Link to previous definition Name
1304+ 6996             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1304+ 6996 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1304+ 6996 ~           >
1304+ 6996 ~           >
1304+ 6996             >                endif           ; ok        // for other definitions it "points" the correct handler
1304+ 6996             >                // Use of "; ok" to suppress "warning[fwdref]"
1304+ 6996             >
1304+ 6996             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1305+ 6996 E1                           pop     hl
1306+ 6997 29                           add     hl, hl
1307+ 6998 21 00 00                     ld      hl, 0
1308+ 699B 30 01                        jr      nc, ZLess_Skip
1309+ 699D 2B                               dec     hl
1310+ 699E              ZLess_Skip:
1311+ 699E                              psh1
1311+ 699E E5          >                push    hl
1311+ 699F DD E9       >                jp      (ix)
1312+ 69A1
1313+ 69A1              //  ______________________________________________________________________
1314+ 69A1              //
1315+ 69A1              // 0>           n -- f
1316+ 69A1              // true (non zero) if n is less than zero, false (0) elsewere
1317+ 69A1                              New_Def ZGREATER, "0>", is_code, is_normal
1317+ 69A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1317+ 69A1             >
1317+ 69A1             >                // dummy db directives used to calculate length of namec
1317+ 69A1 30 3E       >                db      "0>"
1317+ 69A3             >len_NFA         defl    $ - temp_NFA
1317+ 69A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1317+ 69A1             >
1317+ 69A1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1317+ 69A2 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1317+ 69A4             >                org     $-1                 // alter last byte of Name just above to set
1317+ 69A3 BE          >                db      {b $} | END_BIT     // msb as name end
1317+ 69A4             >
1317+ 69A4 91 69       >                dw      last_NFA            // Link to previous definition Name
1317+ 69A6             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1317+ 69A6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1317+ 69A6 ~           >
1317+ 69A6 ~           >
1317+ 69A6             >                endif           ; ok        // for other definitions it "points" the correct handler
1317+ 69A6             >                // Use of "; ok" to suppress "warning[fwdref]"
1317+ 69A6             >
1317+ 69A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1318+ 69A6 E1                           pop     hl
1319+ 69A7 7D                           ld      a, l
1320+ 69A8 B4                           or      h
1321+ 69A9 29                           add     hl, hl
1322+ 69AA 21 00 00                     ld      hl, FALSE_FLAG
1323+ 69AD 38 04                        jr      c, ZGreater_Skip
1324+ 69AF A7                               and     a
1325+ 69B0 28 01                            jr      z, ZGreater_Skip
1326+ 69B2 2B                                   dec     hl
1327+ 69B3              ZGreater_Skip:
1328+ 69B3                              psh1
1328+ 69B3 E5          >                push    hl
1328+ 69B4 DD E9       >                jp      (ix)
1329+ 69B6
1330+ 69B6              //  ______________________________________________________________________
1331+ 69B6              //
1332+ 69B6              // +            n1 n2 -- n3
1333+ 69B6              // returns the unsigned sum of two top values
1334+ 69B6                              New_Def PLUS, "+", is_code, is_normal
1334+ 69B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1334+ 69B6             >
1334+ 69B6             >                // dummy db directives used to calculate length of namec
1334+ 69B6 2B          >                db      "+"
1334+ 69B7             >len_NFA         defl    $ - temp_NFA
1334+ 69B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1334+ 69B6             >
1334+ 69B6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1334+ 69B7 2B          >                db      "+"               // name string in 7-bit ascii, but
1334+ 69B8             >                org     $-1                 // alter last byte of Name just above to set
1334+ 69B7 AB          >                db      {b $} | END_BIT     // msb as name end
1334+ 69B8             >
1334+ 69B8 A1 69       >                dw      last_NFA            // Link to previous definition Name
1334+ 69BA             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1334+ 69BA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1334+ 69BA ~           >
1334+ 69BA ~           >
1334+ 69BA             >                endif           ; ok        // for other definitions it "points" the correct handler
1334+ 69BA             >                // Use of "; ok" to suppress "warning[fwdref]"
1334+ 69BA             >
1334+ 69BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1335+ 69BA E1                           pop     hl
1336+ 69BB D1                           pop     de
1337+ 69BC 19                           add     hl, de
1338+ 69BD
1339+ 69BD                              psh1
1339+ 69BD E5          >                push    hl
1339+ 69BE DD E9       >                jp      (ix)
1340+ 69C0
1341+ 69C0
1342+ 69C0              //  ______________________________________________________________________
1343+ 69C0              //
1344+ 69C0              // d+           d1 d2 -- d3
1345+ 69C0              // returns the unsigned sum of two top double-numbers
1346+ 69C0              //      d2  d1
1347+ 69C0              //      h l h l
1348+ 69C0              // SP   LHEDLHED
1349+ 69C0              // SP  +01234567
1350+ 69C0                              New_Def DPLUS, "D+", is_code, is_normal
1350+ 69C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1350+ 69C0             >
1350+ 69C0             >                // dummy db directives used to calculate length of namec
1350+ 69C0 44 2B       >                db      "D+"
1350+ 69C2             >len_NFA         defl    $ - temp_NFA
1350+ 69C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1350+ 69C0             >
1350+ 69C0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1350+ 69C1 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1350+ 69C3             >                org     $-1                 // alter last byte of Name just above to set
1350+ 69C2 AB          >                db      {b $} | END_BIT     // msb as name end
1350+ 69C3             >
1350+ 69C3 B6 69       >                dw      last_NFA            // Link to previous definition Name
1350+ 69C5             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1350+ 69C5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1350+ 69C5 ~           >
1350+ 69C5 ~           >
1350+ 69C5             >                endif           ; ok        // for other definitions it "points" the correct handler
1350+ 69C5             >                // Use of "; ok" to suppress "warning[fwdref]"
1350+ 69C5             >
1350+ 69C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1351+ 69C5
1352+ 69C5 D9                           exx
1353+ 69C6 C1                           pop     bc                  // bc := d2.H
1354+ 69C7 D1                           pop     de                  // hl := d2.L
1355+ 69C8 E1                           pop     hl                  // d1.H
1356+ 69C9 E3                           ex      (sp), hl            // d1.L
1357+ 69CA 19                           add     hl, de              // hl := d2.L + d1.L
1358+ 69CB E3                           ex      (sp), hl            // d1.H
1359+ 69CC ED 4A                        adc     hl, bc              // d1.H + d2.H
1360+ 69CE E5                           push    hl
1361+ 69CF D9                           exx
1362+ 69D0                              next
1362+ 69D0 DD E9       >                jp      (ix)
1363+ 69D2
1364+ 69D2              //  ______________________________________________________________________
1365+ 69D2              //
1366+ 69D2              // 1+           n1 -- n2
1367+ 69D2              // increment by 1 top of stack
1368+ 69D2                              New_Def ONE_PLUS, "1+", is_code, is_normal
1368+ 69D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1368+ 69D2             >
1368+ 69D2             >                // dummy db directives used to calculate length of namec
1368+ 69D2 31 2B       >                db      "1+"
1368+ 69D4             >len_NFA         defl    $ - temp_NFA
1368+ 69D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1368+ 69D2             >
1368+ 69D2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1368+ 69D3 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1368+ 69D5             >                org     $-1                 // alter last byte of Name just above to set
1368+ 69D4 AB          >                db      {b $} | END_BIT     // msb as name end
1368+ 69D5             >
1368+ 69D5 C0 69       >                dw      last_NFA            // Link to previous definition Name
1368+ 69D7             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1368+ 69D7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1368+ 69D7 ~           >
1368+ 69D7 ~           >
1368+ 69D7             >                endif           ; ok        // for other definitions it "points" the correct handler
1368+ 69D7             >                // Use of "; ok" to suppress "warning[fwdref]"
1368+ 69D7             >
1368+ 69D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1369+ 69D7 E1                           pop     hl
1370+ 69D8 23                           inc     hl
1371+ 69D9
1372+ 69D9                              psh1
1372+ 69D9 E5          >                push    hl
1372+ 69DA DD E9       >                jp      (ix)
1373+ 69DC
1374+ 69DC              //  ______________________________________________________________________
1375+ 69DC              //
1376+ 69DC              // 1-           n1 -- n2
1377+ 69DC              // decrement by 1 top of stack
1378+ 69DC                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1378+ 69DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1378+ 69DC             >
1378+ 69DC             >                // dummy db directives used to calculate length of namec
1378+ 69DC 31 2D       >                db      "1-"
1378+ 69DE             >len_NFA         defl    $ - temp_NFA
1378+ 69DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1378+ 69DC             >
1378+ 69DC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1378+ 69DD 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1378+ 69DF             >                org     $-1                 // alter last byte of Name just above to set
1378+ 69DE AD          >                db      {b $} | END_BIT     // msb as name end
1378+ 69DF             >
1378+ 69DF D2 69       >                dw      last_NFA            // Link to previous definition Name
1378+ 69E1             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1378+ 69E1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1378+ 69E1 ~           >
1378+ 69E1 ~           >
1378+ 69E1             >                endif           ; ok        // for other definitions it "points" the correct handler
1378+ 69E1             >                // Use of "; ok" to suppress "warning[fwdref]"
1378+ 69E1             >
1378+ 69E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1379+ 69E1 E1                           pop     hl
1380+ 69E2 2B                           dec     hl
1381+ 69E3
1382+ 69E3                              psh1
1382+ 69E3 E5          >                push    hl
1382+ 69E4 DD E9       >                jp      (ix)
1383+ 69E6
1384+ 69E6              //  ______________________________________________________________________
1385+ 69E6              //
1386+ 69E6              // 2+           n1 -- n2
1387+ 69E6              // increment by 2 top of stack
1388+ 69E6                              New_Def TWO_PLUS, "2+", is_code, is_normal
1388+ 69E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1388+ 69E6             >
1388+ 69E6             >                // dummy db directives used to calculate length of namec
1388+ 69E6 32 2B       >                db      "2+"
1388+ 69E8             >len_NFA         defl    $ - temp_NFA
1388+ 69E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1388+ 69E6             >
1388+ 69E6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1388+ 69E7 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1388+ 69E9             >                org     $-1                 // alter last byte of Name just above to set
1388+ 69E8 AB          >                db      {b $} | END_BIT     // msb as name end
1388+ 69E9             >
1388+ 69E9 DC 69       >                dw      last_NFA            // Link to previous definition Name
1388+ 69EB             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1388+ 69EB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1388+ 69EB ~           >
1388+ 69EB ~           >
1388+ 69EB             >                endif           ; ok        // for other definitions it "points" the correct handler
1388+ 69EB             >                // Use of "; ok" to suppress "warning[fwdref]"
1388+ 69EB             >
1388+ 69EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1389+ 69EB              Two_Plus:
1390+ 69EB E1                           pop     hl
1391+ 69EC 23                           inc     hl
1392+ 69ED 23                           inc     hl
1393+ 69EE
1394+ 69EE                              psh1
1394+ 69EE E5          >                push    hl
1394+ 69EF DD E9       >                jp      (ix)
1395+ 69F1
1396+ 69F1              //  ______________________________________________________________________
1397+ 69F1              //
1398+ 69F1              // cell+        a1 -- a2
1399+ 69F1              // increment by 2 top of stack
1400+ 69F1                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1400+ 69F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1400+ 69F1             >
1400+ 69F1             >                // dummy db directives used to calculate length of namec
1400+ 69F1 43 45 4C 4C >                db      "CELL+"
1400+ 69F5 2B          >
1400+ 69F6             >len_NFA         defl    $ - temp_NFA
1400+ 69F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1400+ 69F1             >
1400+ 69F1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1400+ 69F2 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1400+ 69F6 2B          >
1400+ 69F7             >                org     $-1                 // alter last byte of Name just above to set
1400+ 69F6 AB          >                db      {b $} | END_BIT     // msb as name end
1400+ 69F7             >
1400+ 69F7 E6 69       >                dw      last_NFA            // Link to previous definition Name
1400+ 69F9             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1400+ 69F9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1400+ 69F9 ~           >
1400+ 69F9 ~           >
1400+ 69F9             >                endif           ; ok        // for other definitions it "points" the correct handler
1400+ 69F9             >                // Use of "; ok" to suppress "warning[fwdref]"
1400+ 69F9             >
1400+ 69F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1401+ 69F9 C3 EB 69                     jp      Two_Plus
1402+ 69FC
1403+ 69FC              //  ______________________________________________________________________
1404+ 69FC              //
1405+ 69FC              // align        a1 -- a2
1406+ 69FC              // align memory : not used
1407+ 69FC              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1408+ 69FC              //            next
1409+ 69FC
1410+ 69FC              //  ______________________________________________________________________
1411+ 69FC              //
1412+ 69FC              // cell-        a1 -- a2
1413+ 69FC              // decrement by 2 top of stack
1414+ 69FC                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1414+ 69FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1414+ 69FC             >
1414+ 69FC             >                // dummy db directives used to calculate length of namec
1414+ 69FC 43 45 4C 4C >                db      "CELL-"
1414+ 6A00 2D          >
1414+ 6A01             >len_NFA         defl    $ - temp_NFA
1414+ 6A01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1414+ 69FC             >
1414+ 69FC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1414+ 69FD 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1414+ 6A01 2D          >
1414+ 6A02             >                org     $-1                 // alter last byte of Name just above to set
1414+ 6A01 AD          >                db      {b $} | END_BIT     // msb as name end
1414+ 6A02             >
1414+ 6A02 F1 69       >                dw      last_NFA            // Link to previous definition Name
1414+ 6A04             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1414+ 6A04 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1414+ 6A04 ~           >
1414+ 6A04 ~           >
1414+ 6A04             >                endif           ; ok        // for other definitions it "points" the correct handler
1414+ 6A04             >                // Use of "; ok" to suppress "warning[fwdref]"
1414+ 6A04             >
1414+ 6A04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1415+ 6A04              CellMinus:
1416+ 6A04 E1                           pop     hl
1417+ 6A05 2B                           dec     hl
1418+ 6A06 2B                           dec     hl
1419+ 6A07
1420+ 6A07                              psh1
1420+ 6A07 E5          >                push    hl
1420+ 6A08 DD E9       >                jp      (ix)
1421+ 6A0A
1422+ 6A0A              //  ______________________________________________________________________
1423+ 6A0A              //
1424+ 6A0A              // 2-           a1 -- a2
1425+ 6A0A              // decrement by 2 top of stack
1426+ 6A0A                              New_Def TWO_MINUS, "2-", is_code, is_normal
1426+ 6A0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1426+ 6A0A             >
1426+ 6A0A             >                // dummy db directives used to calculate length of namec
1426+ 6A0A 32 2D       >                db      "2-"
1426+ 6A0C             >len_NFA         defl    $ - temp_NFA
1426+ 6A0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1426+ 6A0A             >
1426+ 6A0A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1426+ 6A0B 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1426+ 6A0D             >                org     $-1                 // alter last byte of Name just above to set
1426+ 6A0C AD          >                db      {b $} | END_BIT     // msb as name end
1426+ 6A0D             >
1426+ 6A0D FC 69       >                dw      last_NFA            // Link to previous definition Name
1426+ 6A0F             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1426+ 6A0F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1426+ 6A0F ~           >
1426+ 6A0F ~           >
1426+ 6A0F             >                endif           ; ok        // for other definitions it "points" the correct handler
1426+ 6A0F             >                // Use of "; ok" to suppress "warning[fwdref]"
1426+ 6A0F             >
1426+ 6A0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1427+ 6A0F C3 04 6A                     jp      CellMinus
1428+ 6A12
1429+ 6A12              //  ______________________________________________________________________
1430+ 6A12              //
1431+ 6A12              // negate       n1 -- n2
1432+ 6A12              // change the sign of number
1433+ 6A12                              New_Def MINUS, "NEGATE", is_code, is_normal
1433+ 6A12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1433+ 6A12             >
1433+ 6A12             >                // dummy db directives used to calculate length of namec
1433+ 6A12 4E 45 47 41 >                db      "NEGATE"
1433+ 6A16 54 45       >
1433+ 6A18             >len_NFA         defl    $ - temp_NFA
1433+ 6A18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1433+ 6A12             >
1433+ 6A12 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1433+ 6A13 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1433+ 6A17 54 45       >
1433+ 6A19             >                org     $-1                 // alter last byte of Name just above to set
1433+ 6A18 C5          >                db      {b $} | END_BIT     // msb as name end
1433+ 6A19             >
1433+ 6A19 0A 6A       >                dw      last_NFA            // Link to previous definition Name
1433+ 6A1B             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1433+ 6A1B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1433+ 6A1B ~           >
1433+ 6A1B ~           >
1433+ 6A1B             >                endif           ; ok        // for other definitions it "points" the correct handler
1433+ 6A1B             >                // Use of "; ok" to suppress "warning[fwdref]"
1433+ 6A1B             >
1433+ 6A1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1434+ 6A1B 21 00 00                     ld      hl, 0               // subtract from 0
1435+ 6A1E D1                           pop     de
1436+ 6A1F B7                           or      a
1437+ 6A20 ED 52                        sbc     hl, de
1438+ 6A22
1439+ 6A22                              psh1
1439+ 6A22 E5          >                push    hl
1439+ 6A23 DD E9       >                jp      (ix)
1440+ 6A25
1441+ 6A25              //  ______________________________________________________________________
1442+ 6A25              //
1443+ 6A25              // dnegate      d1 -- d2
1444+ 6A25              // change the sign of a double number
1445+ 6A25                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1445+ 6A25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1445+ 6A25             >
1445+ 6A25             >                // dummy db directives used to calculate length of namec
1445+ 6A25 44 4E 45 47 >                db      "DNEGATE"
1445+ 6A29 41 54 45    >
1445+ 6A2C             >len_NFA         defl    $ - temp_NFA
1445+ 6A2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1445+ 6A25             >
1445+ 6A25 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1445+ 6A26 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1445+ 6A2A 41 54 45    >
1445+ 6A2D             >                org     $-1                 // alter last byte of Name just above to set
1445+ 6A2C C5          >                db      {b $} | END_BIT     // msb as name end
1445+ 6A2D             >
1445+ 6A2D 12 6A       >                dw      last_NFA            // Link to previous definition Name
1445+ 6A2F             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1445+ 6A2F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1445+ 6A2F ~           >
1445+ 6A2F ~           >
1445+ 6A2F             >                endif           ; ok        // for other definitions it "points" the correct handler
1445+ 6A2F             >                // Use of "; ok" to suppress "warning[fwdref]"
1445+ 6A2F             >
1445+ 6A2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1446+ 6A2F D9                           exx
1447+ 6A30 C1                           pop     bc                  // d1.H
1448+ 6A31 D1                           pop     de                  // d1.L
1449+ 6A32 AF                           xor     a
1450+ 6A33 67                           ld      h, a
1451+ 6A34 6F                           ld      l, a
1452+ 6A35 ED 52                        sbc     hl, de              // subtact from zero
1453+ 6A37 E5                           push    hl                  // > d2-L
1454+ 6A38 67                           ld      h, a
1455+ 6A39 6F                           ld      l, a
1456+ 6A3A ED 42                        sbc     hl, bc              // subtract from zero with carry
1457+ 6A3C                                                          // > d2-H
1458+ 6A3C E5                           push    hl
1459+ 6A3D D9                           exx
1460+ 6A3E                              next
1460+ 6A3E DD E9       >                jp      (ix)
1461+ 6A40
1462+ 6A40              //  ______________________________________________________________________
1463+ 6A40              //
1464+ 6A40              // over         n1 n2 -- n1 n2 n1
1465+ 6A40              // copy the second value of stack and put it on top.
1466+ 6A40                              New_Def OVER, "OVER", is_code, is_normal
1466+ 6A40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1466+ 6A40             >
1466+ 6A40             >                // dummy db directives used to calculate length of namec
1466+ 6A40 4F 56 45 52 >                db      "OVER"
1466+ 6A44             >len_NFA         defl    $ - temp_NFA
1466+ 6A44             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1466+ 6A40             >
1466+ 6A40 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1466+ 6A41 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1466+ 6A45             >                org     $-1                 // alter last byte of Name just above to set
1466+ 6A44 D2          >                db      {b $} | END_BIT     // msb as name end
1466+ 6A45             >
1466+ 6A45 25 6A       >                dw      last_NFA            // Link to previous definition Name
1466+ 6A47             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1466+ 6A47 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1466+ 6A47 ~           >
1466+ 6A47 ~           >
1466+ 6A47             >                endif           ; ok        // for other definitions it "points" the correct handler
1466+ 6A47             >                // Use of "; ok" to suppress "warning[fwdref]"
1466+ 6A47             >
1466+ 6A47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1467+ 6A47 D1                           pop     de                  //   n2
1468+ 6A48 E1                           pop     hl                  // < n1
1469+ 6A49 E5                           push    hl                  // > n1
1470+ 6A4A D5                           push    de                  // > n2
1471+ 6A4B E5                           push    hl                  // > n1
1472+ 6A4C                              next
1472+ 6A4C DD E9       >                jp      (ix)
1473+ 6A4E
1474+ 6A4E              //  ______________________________________________________________________
1475+ 6A4E              //
1476+ 6A4E              // drop         n1 --
1477+ 6A4E              // drops the top of stack
1478+ 6A4E                              New_Def DROP, "DROP", is_code, is_normal
1478+ 6A4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1478+ 6A4E             >
1478+ 6A4E             >                // dummy db directives used to calculate length of namec
1478+ 6A4E 44 52 4F 50 >                db      "DROP"
1478+ 6A52             >len_NFA         defl    $ - temp_NFA
1478+ 6A52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1478+ 6A4E             >
1478+ 6A4E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1478+ 6A4F 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1478+ 6A53             >                org     $-1                 // alter last byte of Name just above to set
1478+ 6A52 D0          >                db      {b $} | END_BIT     // msb as name end
1478+ 6A53             >
1478+ 6A53 40 6A       >                dw      last_NFA            // Link to previous definition Name
1478+ 6A55             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1478+ 6A55 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1478+ 6A55 ~           >
1478+ 6A55 ~           >
1478+ 6A55             >                endif           ; ok        // for other definitions it "points" the correct handler
1478+ 6A55             >                // Use of "; ok" to suppress "warning[fwdref]"
1478+ 6A55             >
1478+ 6A55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1479+ 6A55 E1                           pop     hl                  // < n1 and discard previous TOS
1480+ 6A56                              next
1480+ 6A56 DD E9       >                jp      (ix)
1481+ 6A58
1482+ 6A58              //  ______________________________________________________________________
1483+ 6A58              //
1484+ 6A58              // nip          n1 n2 -- n2
1485+ 6A58              // drops the second elemento on the stack
1486+ 6A58                              New_Def NIP, "NIP", is_code, is_normal
1486+ 6A58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1486+ 6A58             >
1486+ 6A58             >                // dummy db directives used to calculate length of namec
1486+ 6A58 4E 49 50    >                db      "NIP"
1486+ 6A5B             >len_NFA         defl    $ - temp_NFA
1486+ 6A5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1486+ 6A58             >
1486+ 6A58 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1486+ 6A59 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1486+ 6A5C             >                org     $-1                 // alter last byte of Name just above to set
1486+ 6A5B D0          >                db      {b $} | END_BIT     // msb as name end
1486+ 6A5C             >
1486+ 6A5C 4E 6A       >                dw      last_NFA            // Link to previous definition Name
1486+ 6A5E             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1486+ 6A5E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1486+ 6A5E ~           >
1486+ 6A5E ~           >
1486+ 6A5E             >                endif           ; ok        // for other definitions it "points" the correct handler
1486+ 6A5E             >                // Use of "; ok" to suppress "warning[fwdref]"
1486+ 6A5E             >
1486+ 6A5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1487+ 6A5E
1488+ 6A5E E1                           pop     hl                  // < n1 discarded
1489+ 6A5F E3                           ex      (sp), hl
1490+ 6A60                              next
1490+ 6A60 DD E9       >                jp      (ix)
1491+ 6A62
1492+ 6A62              //  ______________________________________________________________________
1493+ 6A62              //
1494+ 6A62              // tuck         n1 n2 -- n2 n1 n2
1495+ 6A62              // copy the top element after the second.
1496+ 6A62                              New_Def TUCK, "TUCK", is_code, is_normal
1496+ 6A62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1496+ 6A62             >
1496+ 6A62             >                // dummy db directives used to calculate length of namec
1496+ 6A62 54 55 43 4B >                db      "TUCK"
1496+ 6A66             >len_NFA         defl    $ - temp_NFA
1496+ 6A66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1496+ 6A62             >
1496+ 6A62 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1496+ 6A63 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1496+ 6A67             >                org     $-1                 // alter last byte of Name just above to set
1496+ 6A66 CB          >                db      {b $} | END_BIT     // msb as name end
1496+ 6A67             >
1496+ 6A67 58 6A       >                dw      last_NFA            // Link to previous definition Name
1496+ 6A69             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1496+ 6A69 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1496+ 6A69 ~           >
1496+ 6A69 ~           >
1496+ 6A69             >                endif           ; ok        // for other definitions it "points" the correct handler
1496+ 6A69             >                // Use of "; ok" to suppress "warning[fwdref]"
1496+ 6A69             >
1496+ 6A69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1497+ 6A69 E1                           pop     hl
1498+ 6A6A D1                           pop     de                  // < n1
1499+ 6A6B E5                           push    hl                  // > n2  and TOS
1500+ 6A6C D5                           push    de                  // > n1
1501+ 6A6D E5                           push    hl
1502+ 6A6E                              next
1502+ 6A6E DD E9       >                jp      (ix)
1503+ 6A70
1504+ 6A70              //  ______________________________________________________________________
1505+ 6A70              //
1506+ 6A70              // swap         n1 n2 -- n2 n1
1507+ 6A70              // swaps the two values on top of stack
1508+ 6A70                              New_Def SWAP, "SWAP", is_code, is_normal
1508+ 6A70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1508+ 6A70             >
1508+ 6A70             >                // dummy db directives used to calculate length of namec
1508+ 6A70 53 57 41 50 >                db      "SWAP"
1508+ 6A74             >len_NFA         defl    $ - temp_NFA
1508+ 6A74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1508+ 6A70             >
1508+ 6A70 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1508+ 6A71 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1508+ 6A75             >                org     $-1                 // alter last byte of Name just above to set
1508+ 6A74 D0          >                db      {b $} | END_BIT     // msb as name end
1508+ 6A75             >
1508+ 6A75 62 6A       >                dw      last_NFA            // Link to previous definition Name
1508+ 6A77             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1508+ 6A77 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1508+ 6A77 ~           >
1508+ 6A77 ~           >
1508+ 6A77             >                endif           ; ok        // for other definitions it "points" the correct handler
1508+ 6A77             >                // Use of "; ok" to suppress "warning[fwdref]"
1508+ 6A77             >
1508+ 6A77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1509+ 6A77 E1                           pop     hl                  // < n1
1510+ 6A78 E3                           ex      (sp),hl             // > n2
1511+ 6A79 E5                           push    hl                  // copy n1 to TOS
1512+ 6A7A                              next
1512+ 6A7A DD E9       >                jp      (ix)
1513+ 6A7C
1514+ 6A7C              //  ______________________________________________________________________
1515+ 6A7C              //
1516+ 6A7C              // dup         n -- n n
1517+ 6A7C              // duplicates the top value of stack
1518+ 6A7C                              New_Def DUP, "DUP", is_code, is_normal
1518+ 6A7C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1518+ 6A7C             >
1518+ 6A7C             >                // dummy db directives used to calculate length of namec
1518+ 6A7C 44 55 50    >                db      "DUP"
1518+ 6A7F             >len_NFA         defl    $ - temp_NFA
1518+ 6A7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1518+ 6A7C             >
1518+ 6A7C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1518+ 6A7D 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1518+ 6A80             >                org     $-1                 // alter last byte of Name just above to set
1518+ 6A7F D0          >                db      {b $} | END_BIT     // msb as name end
1518+ 6A80             >
1518+ 6A80 70 6A       >                dw      last_NFA            // Link to previous definition Name
1518+ 6A82             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1518+ 6A82 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1518+ 6A82 ~           >
1518+ 6A82 ~           >
1518+ 6A82             >                endif           ; ok        // for other definitions it "points" the correct handler
1518+ 6A82             >                // Use of "; ok" to suppress "warning[fwdref]"
1518+ 6A82             >
1518+ 6A82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1519+ 6A82 E1                           pop     hl
1520+ 6A83 E5                           push    hl                  // > n duplicate TOS
1521+ 6A84 E5                           push    hl
1522+ 6A85                              next
1522+ 6A85 DD E9       >                jp      (ix)
1523+ 6A87
1524+ 6A87              //  ______________________________________________________________________
1525+ 6A87              //
1526+ 6A87              // rot         n1 n2 n3 -- n2 n3 n1
1527+ 6A87              // Rotates the 3 top values of stack by picking the 3rd in access-order
1528+ 6A87              // and putting it on top. The other two are shifted down one place.
1529+ 6A87                              New_Def ROT, "ROT", is_code, is_normal
1529+ 6A87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1529+ 6A87             >
1529+ 6A87             >                // dummy db directives used to calculate length of namec
1529+ 6A87 52 4F 54    >                db      "ROT"
1529+ 6A8A             >len_NFA         defl    $ - temp_NFA
1529+ 6A8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1529+ 6A87             >
1529+ 6A87 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1529+ 6A88 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1529+ 6A8B             >                org     $-1                 // alter last byte of Name just above to set
1529+ 6A8A D4          >                db      {b $} | END_BIT     // msb as name end
1529+ 6A8B             >
1529+ 6A8B 7C 6A       >                dw      last_NFA            // Link to previous definition Name
1529+ 6A8D             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1529+ 6A8D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1529+ 6A8D ~           >
1529+ 6A8D ~           >
1529+ 6A8D             >                endif           ; ok        // for other definitions it "points" the correct handler
1529+ 6A8D             >                // Use of "; ok" to suppress "warning[fwdref]"
1529+ 6A8D             >
1529+ 6A8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1530+ 6A8D D1                           pop     de                  // < n3
1531+ 6A8E E1                           pop     hl                  // < n2
1532+ 6A8F E3                           ex      (sp),hl             // > n2 < n1
1533+ 6A90 D5                           push    de                  // > n3
1534+ 6A91 E5                           push    hl                  // copy n1 to TOS
1535+ 6A92                              next
1535+ 6A92 DD E9       >                jp      (ix)
1536+ 6A94
1537+ 6A94              //  ______________________________________________________________________
1538+ 6A94              //
1539+ 6A94              // -rot         n1 n2 n3 -- n3 n1 n2
1540+ 6A94              // Rotates the 3 top values of stack by picking the 1st in access-order
1541+ 6A94              // and putting back to 3rd place. The other two are shifted down one place.
1542+ 6A94                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1542+ 6A94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1542+ 6A94             >
1542+ 6A94             >                // dummy db directives used to calculate length of namec
1542+ 6A94 2D 52 4F 54 >                db      "-ROT"
1542+ 6A98             >len_NFA         defl    $ - temp_NFA
1542+ 6A98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1542+ 6A94             >
1542+ 6A94 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1542+ 6A95 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1542+ 6A99             >                org     $-1                 // alter last byte of Name just above to set
1542+ 6A98 D4          >                db      {b $} | END_BIT     // msb as name end
1542+ 6A99             >
1542+ 6A99 87 6A       >                dw      last_NFA            // Link to previous definition Name
1542+ 6A9B             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1542+ 6A9B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1542+ 6A9B ~           >
1542+ 6A9B ~           >
1542+ 6A9B             >                endif           ; ok        // for other definitions it "points" the correct handler
1542+ 6A9B             >                // Use of "; ok" to suppress "warning[fwdref]"
1542+ 6A9B             >
1542+ 6A9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1543+ 6A9B E1                           pop     hl                  // < n3
1544+ 6A9C D1                           pop     de                  // < n2
1545+ 6A9D E3                           ex      (sp),hl             // > n3 < n1
1546+ 6A9E E5                           push    hl                  // > n1
1547+ 6A9F D5                           push    de                  // copy n3 to TOS
1548+ 6AA0                              next
1548+ 6AA0 DD E9       >                jp      (ix)
1549+ 6AA2
1550+ 6AA2              //  ______________________________________________________________________
1551+ 6AA2              //
1552+ 6AA2              // pick        n1 -- nx
1553+ 6AA2              // picks the nth element from TOS
1554+ 6AA2                              New_Def PICK, "PICK", is_code, is_normal
1554+ 6AA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1554+ 6AA2             >
1554+ 6AA2             >                // dummy db directives used to calculate length of namec
1554+ 6AA2 50 49 43 4B >                db      "PICK"
1554+ 6AA6             >len_NFA         defl    $ - temp_NFA
1554+ 6AA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1554+ 6AA2             >
1554+ 6AA2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1554+ 6AA3 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1554+ 6AA7             >                org     $-1                 // alter last byte of Name just above to set
1554+ 6AA6 CB          >                db      {b $} | END_BIT     // msb as name end
1554+ 6AA7             >
1554+ 6AA7 94 6A       >                dw      last_NFA            // Link to previous definition Name
1554+ 6AA9             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1554+ 6AA9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1554+ 6AA9 ~           >
1554+ 6AA9 ~           >
1554+ 6AA9             >                endif           ; ok        // for other definitions it "points" the correct handler
1554+ 6AA9             >                // Use of "; ok" to suppress "warning[fwdref]"
1554+ 6AA9             >
1554+ 6AA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1555+ 6AA9 E1                           pop     hl                  // take TOS as index
1556+ 6AAA 29                           add     hl, hl              // as cells
1557+ 6AAB 39                           add     hl, sp              // from Stack Pointer
1558+ 6AAC 7E                           ld      a, (hl)             // replace TOS
1559+ 6AAD 23                           inc     hl
1560+ 6AAE 66                           ld      h, (hl)
1561+ 6AAF 6F                           ld      l, a
1562+ 6AB0
1563+ 6AB0                              psh1
1563+ 6AB0 E5          >                push    hl
1563+ 6AB1 DD E9       >                jp      (ix)
1564+ 6AB3
1565+ 6AB3
1566+ 6AB3              //  ______________________________________________________________________
1567+ 6AB3              //
1568+ 6AB3              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1569+ 6AB3              // picks the nth element from TOS
1570+ 6AB3              //              New_Def ROLL, "ROLL", is_code, is_normal
1571+ 6AB3              //              exx                     // we need all registers free
1572+ 6AB3              //              pop     hl              // number of cells to roll
1573+ 6AB3              //              ld      a, h
1574+ 6AB3              //              or       l
1575+ 6AB3              //              jr      z, Roll_Zero
1576+ 6AB3              //                  add     hl, hl              // number of bytes to move
1577+ 6AB3              //                  ld      b, h
1578+ 6AB3              //                  ld      c, l
1579+ 6AB3              //                  add     hl, sp          // address of n1
1580+ 6AB3              //                  ld      a, (hl)         // take n1 into a and a,
1581+ 6AB3              //                  inc     hl
1582+ 6AB3              //                  ex      af, af'
1583+ 6AB3              //                  ld      a, (hl)         // take n1 into a and a,
1584+ 6AB3              //                  ld      d, h
1585+ 6AB3              //                  ld      e, l
1586+ 6AB3              //                  dec     hl
1587+ 6AB3              //                  dec     hl
1588+ 6AB3              //                  lddr
1589+ 6AB3              //                  ex      de, hl
1590+ 6AB3              //                  ld      (hl), a
1591+ 6AB3              //                  dec     hl
1592+ 6AB3              //                  ex      af, af'
1593+ 6AB3              //                  ld      (hl), a
1594+ 6AB3              //Roll_Zero:
1595+ 6AB3              //              exx
1596+ 6AB3              //              next
1597+ 6AB3
1598+ 6AB3
1599+ 6AB3              //  ______________________________________________________________________
1600+ 6AB3              //
1601+ 6AB3              // 2over        d1 d2 -- d1 d2 d1
1602+ 6AB3              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1603+ 6AB3              // copy the second double of stack and put on top.
1604+ 6AB3              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1605+ 6AB3              //
1606+ 6AB3              //              ld      hl, 7
1607+ 6AB3              //              add     hl, sp
1608+ 6AB3              //              ld      d, (hl)
1609+ 6AB3              //              dec     hl
1610+ 6AB3              //              ld      e, (hl)             // d1-L
1611+ 6AB3              //              push    de
1612+ 6AB3              //              dec     hl
1613+ 6AB3              //              ld      d, (hl)
1614+ 6AB3              //              dec     hl
1615+ 6AB3              //              ld      e, (hl)             // d1-H
1616+ 6AB3              //              push    de
1617+ 6AB3              //              next
1618+ 6AB3
1619+ 6AB3              //  ______________________________________________________________________
1620+ 6AB3              //
1621+ 6AB3              // 2drop        d --
1622+ 6AB3              //              n1 n2 --
1623+ 6AB3              // drops the top double from stack
1624+ 6AB3                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1624+ 6AB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1624+ 6AB3             >
1624+ 6AB3             >                // dummy db directives used to calculate length of namec
1624+ 6AB3 32 44 52 4F >                db      "2DROP"
1624+ 6AB7 50          >
1624+ 6AB8             >len_NFA         defl    $ - temp_NFA
1624+ 6AB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1624+ 6AB3             >
1624+ 6AB3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1624+ 6AB4 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1624+ 6AB8 50          >
1624+ 6AB9             >                org     $-1                 // alter last byte of Name just above to set
1624+ 6AB8 D0          >                db      {b $} | END_BIT     // msb as name end
1624+ 6AB9             >
1624+ 6AB9 A2 6A       >                dw      last_NFA            // Link to previous definition Name
1624+ 6ABB             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1624+ 6ABB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1624+ 6ABB ~           >
1624+ 6ABB ~           >
1624+ 6ABB             >                endif           ; ok        // for other definitions it "points" the correct handler
1624+ 6ABB             >                // Use of "; ok" to suppress "warning[fwdref]"
1624+ 6ABB             >
1624+ 6ABB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1625+ 6ABB E1                           pop     hl
1626+ 6ABC E1                           pop     hl
1627+ 6ABD                              next
1627+ 6ABD DD E9       >                jp      (ix)
1628+ 6ABF
1629+ 6ABF              //  ______________________________________________________________________
1630+ 6ABF              //
1631+ 6ABF              // 2nip         d1 d2 -- d2
1632+ 6ABF              //              n1 n2 n3 n4 -- n3 n4
1633+ 6ABF              // drops the second double on the stack
1634+ 6ABF              //              New_Def TWO_NIP, 4, "2nip"
1635+ 6ABF              //              ...
1636+ 6ABF
1637+ 6ABF              //  ______________________________________________________________________
1638+ 6ABF              //
1639+ 6ABF              // 2tuck         d1 d2 -- d2 d1 d2
1640+ 6ABF              // copy the top element after the second.
1641+ 6ABF              //              New_Def TWO_TUCK, 5, "2tuck"
1642+ 6ABF              //              ...
1643+ 6ABF
1644+ 6ABF              //  ______________________________________________________________________
1645+ 6ABF              //
1646+ 6ABF              // 2swap         d1 d2 -- d2 d1
1647+ 6ABF              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1648+ 6ABF              // swaps the two doubles on top of stack
1649+ 6ABF                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1649+ 6ABF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1649+ 6ABF             >
1649+ 6ABF             >                // dummy db directives used to calculate length of namec
1649+ 6ABF 32 53 57 41 >                db      "2SWAP"
1649+ 6AC3 50          >
1649+ 6AC4             >len_NFA         defl    $ - temp_NFA
1649+ 6AC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1649+ 6ABF             >
1649+ 6ABF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1649+ 6AC0 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1649+ 6AC4 50          >
1649+ 6AC5             >                org     $-1                 // alter last byte of Name just above to set
1649+ 6AC4 D0          >                db      {b $} | END_BIT     // msb as name end
1649+ 6AC5             >
1649+ 6AC5 B3 6A       >                dw      last_NFA            // Link to previous definition Name
1649+ 6AC7             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1649+ 6AC7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1649+ 6AC7 ~           >
1649+ 6AC7 ~           >
1649+ 6AC7             >                endif           ; ok        // for other definitions it "points" the correct handler
1649+ 6AC7             >                // Use of "; ok" to suppress "warning[fwdref]"
1649+ 6AC7             >
1649+ 6AC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1650+ 6AC7 F1                           pop     af                  //   d2-H
1651+ 6AC8 E1                           pop     hl                  // < d2-L
1652+ 6AC9 D1                           pop     de                  // < d1-H
1653+ 6ACA E3                           ex      (sp), hl            // < d1-L > d2-L
1654+ 6ACB F5                           push    af                  // > d2-H
1655+ 6ACC E5                           push    hl                  // > d1-L
1656+ 6ACD D5                           push    de
1657+ 6ACE
1658+ 6ACE                              next
1658+ 6ACE DD E9       >                jp      (ix)
1659+ 6AD0
1660+ 6AD0              //  ______________________________________________________________________
1661+ 6AD0              //
1662+ 6AD0              // 2dup         d -- d d
1663+ 6AD0              //              n1 n2 -- n1 n2 n1 n2
1664+ 6AD0              // duplicates the top double of stack
1665+ 6AD0                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1665+ 6AD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1665+ 6AD0             >
1665+ 6AD0             >                // dummy db directives used to calculate length of namec
1665+ 6AD0 32 44 55 50 >                db      "2DUP"
1665+ 6AD4             >len_NFA         defl    $ - temp_NFA
1665+ 6AD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1665+ 6AD0             >
1665+ 6AD0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1665+ 6AD1 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1665+ 6AD5             >                org     $-1                 // alter last byte of Name just above to set
1665+ 6AD4 D0          >                db      {b $} | END_BIT     // msb as name end
1665+ 6AD5             >
1665+ 6AD5 BF 6A       >                dw      last_NFA            // Link to previous definition Name
1665+ 6AD7             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1665+ 6AD7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1665+ 6AD7 ~           >
1665+ 6AD7 ~           >
1665+ 6AD7             >                endif           ; ok        // for other definitions it "points" the correct handler
1665+ 6AD7             >                // Use of "; ok" to suppress "warning[fwdref]"
1665+ 6AD7             >
1665+ 6AD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1666+ 6AD7 E1                           pop     hl                  // < d-H
1667+ 6AD8 D1                           pop     de                  // < d-L
1668+ 6AD9 D5                           push    de                  // < d-L
1669+ 6ADA E5                           push    hl                  // > d-H
1670+ 6ADB D5                           push    de                  // > d-L
1671+ 6ADC E5                           push    hl                  // > d-H
1672+ 6ADD                              next
1672+ 6ADD DD E9       >                jp      (ix)
1673+ 6ADF
1674+ 6ADF              //  ______________________________________________________________________
1675+ 6ADF              //
1676+ 6ADF              // 2rot         d1 d2 d3 -- d2 d3 d1
1677+ 6ADF              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1678+ 6ADF              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1679+ 6ADF              // and putting it on top. The other two are shifted down one place.
1680+ 6ADF              //              New_Def TWO?ROT, 4, "2rot"
1681+ 6ADF              //              ...
1682+ 6ADF              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1683+ 6ADF              //
1684+ 6ADF              //      d3  |d2  |d1  |
1685+ 6ADF              //      h l |h l |h l |
1686+ 6ADF              // SP   LHED|LHED|LHED|
1687+ 6ADF              // SP  +0123|4567|89ab|
1688+ 6ADF              //              ld      hl, $000B
1689+ 6ADF              //              add     hl, sp
1690+ 6ADF              //              ld      d, (hl)
1691+ 6ADF              //              dec     hl
1692+ 6ADF              //              ld      e, (hl)
1693+ 6ADF              //              dec     hl
1694+ 6ADF              //              push    de
1695+ 6ADF              //              ld      d, (hl)
1696+ 6ADF              //              dec     hl
1697+ 6ADF              //              ld      e, (hl)
1698+ 6ADF              //              dec     hl
1699+ 6ADF              //              push    de
1700+ 6ADF
1701+ 6ADF              //      d1  |d3  |d2  |d1  |
1702+ 6ADF              //      h l |h l |h l |h l |
1703+ 6ADF              // SP   LHED|LHED|LHED|LHED|
1704+ 6ADF              // SP       +0123|4567|89ab|
1705+ 6ADF
1706+ 6ADF              //              ld      d, h
1707+ 6ADF              //              ld      e, l
1708+ 6ADF              //              inc     de
1709+ 6ADF              //              inc     de
1710+ 6ADF              //              inc     de
1711+ 6ADF              //              inc     de
1712+ 6ADF              //              push    bc
1713+ 6ADF              //              ld      bc, $000C
1714+ 6ADF              //              lddr
1715+ 6ADF              //              pop     bc
1716+ 6ADF              //              pop     de
1717+ 6ADF              //              pop     de
1718+ 6ADF              //
1719+ 6ADF              //              next
1720+ 6ADF
1721+ 6ADF
1722+ 6ADF              //  ______________________________________________________________________
1723+ 6ADF              //
1724+ 6ADF              // +!           n a --
1725+ 6ADF              // Sums to the content of address a the number n.
1726+ 6ADF              // It is the same of  a @ n + a !
1727+ 6ADF                              New_Def PLUSSTORE, "+!", is_code, is_normal
1727+ 6ADF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1727+ 6ADF             >
1727+ 6ADF             >                // dummy db directives used to calculate length of namec
1727+ 6ADF 2B 21       >                db      "+!"
1727+ 6AE1             >len_NFA         defl    $ - temp_NFA
1727+ 6AE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1727+ 6ADF             >
1727+ 6ADF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1727+ 6AE0 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1727+ 6AE2             >                org     $-1                 // alter last byte of Name just above to set
1727+ 6AE1 A1          >                db      {b $} | END_BIT     // msb as name end
1727+ 6AE2             >
1727+ 6AE2 D0 6A       >                dw      last_NFA            // Link to previous definition Name
1727+ 6AE4             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1727+ 6AE4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1727+ 6AE4 ~           >
1727+ 6AE4 ~           >
1727+ 6AE4             >                endif           ; ok        // for other definitions it "points" the correct handler
1727+ 6AE4             >                // Use of "; ok" to suppress "warning[fwdref]"
1727+ 6AE4             >
1727+ 6AE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1728+ 6AE4 E1                           pop     hl                  // hl is the address
1729+ 6AE5 D1                           pop     de                  // de is the number
1730+ 6AE6 7E                           ld      a, (hl)
1731+ 6AE7 83                           add     e
1732+ 6AE8 77                           ld      (hl), a
1733+ 6AE9 23                           inc     hl
1734+ 6AEA 7E                           ld      a, (hl)
1735+ 6AEB 8A                           adc     d
1736+ 6AEC 77                           ld      (hl), a
1737+ 6AED
1738+ 6AED                              next
1738+ 6AED DD E9       >                jp      (ix)
1739+ 6AEF
1740+ 6AEF              //  ______________________________________________________________________
1741+ 6AEF              //
1742+ 6AEF              // toggle       a n --
1743+ 6AEF              // Complements (xor) the byte at addrress  a  with the model n.
1744+ 6AEF                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1744+ 6AEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1744+ 6AEF             >
1744+ 6AEF             >                // dummy db directives used to calculate length of namec
1744+ 6AEF 54 4F 47 47 >                db      "TOGGLE"
1744+ 6AF3 4C 45       >
1744+ 6AF5             >len_NFA         defl    $ - temp_NFA
1744+ 6AF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1744+ 6AEF             >
1744+ 6AEF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1744+ 6AF0 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1744+ 6AF4 4C 45       >
1744+ 6AF6             >                org     $-1                 // alter last byte of Name just above to set
1744+ 6AF5 C5          >                db      {b $} | END_BIT     // msb as name end
1744+ 6AF6             >
1744+ 6AF6 DF 6A       >                dw      last_NFA            // Link to previous definition Name
1744+ 6AF8             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1744+ 6AF8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1744+ 6AF8 ~           >
1744+ 6AF8 ~           >
1744+ 6AF8             >                endif           ; ok        // for other definitions it "points" the correct handler
1744+ 6AF8             >                // Use of "; ok" to suppress "warning[fwdref]"
1744+ 6AF8             >
1744+ 6AF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1745+ 6AF8 D1                           pop     de
1746+ 6AF9 E1                           pop     hl
1747+ 6AFA 7E                           ld      a, (hl)
1748+ 6AFB AB                           xor     e
1749+ 6AFC 77                           ld      (hl), a
1750+ 6AFD
1751+ 6AFD                              next
1751+ 6AFD DD E9       >                jp      (ix)
1752+ 6AFF
1753+ 6AFF              //  ______________________________________________________________________
1754+ 6AFF              //
1755+ 6AFF              // @            a -- n
1756+ 6AFF              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1757+ 6AFF                              New_Def FETCH, "@", is_code, is_normal
1757+ 6AFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1757+ 6AFF             >
1757+ 6AFF             >                // dummy db directives used to calculate length of namec
1757+ 6AFF 40          >                db      "@"
1757+ 6B00             >len_NFA         defl    $ - temp_NFA
1757+ 6B00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1757+ 6AFF             >
1757+ 6AFF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1757+ 6B00 40          >                db      "@"               // name string in 7-bit ascii, but
1757+ 6B01             >                org     $-1                 // alter last byte of Name just above to set
1757+ 6B00 C0          >                db      {b $} | END_BIT     // msb as name end
1757+ 6B01             >
1757+ 6B01 EF 6A       >                dw      last_NFA            // Link to previous definition Name
1757+ 6B03             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1757+ 6B03 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1757+ 6B03 ~           >
1757+ 6B03 ~           >
1757+ 6B03             >                endif           ; ok        // for other definitions it "points" the correct handler
1757+ 6B03             >                // Use of "; ok" to suppress "warning[fwdref]"
1757+ 6B03             >
1757+ 6B03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1758+ 6B03 E1                           pop     hl
1759+ 6B04 5E                           ld      e, (hl)             // low-byte
1760+ 6B05 23                           inc     hl
1761+ 6B06 56                           ld      d, (hl)             // high-byte
1762+ 6B07 D5                           push    de
1763+ 6B08                              next
1763+ 6B08 DD E9       >                jp      (ix)
1764+ 6B0A
1765+ 6B0A              //  ______________________________________________________________________
1766+ 6B0A              //
1767+ 6B0A              // !            n a --
1768+ 6B0A              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1769+ 6B0A                              New_Def STORE, "!", is_code, is_normal
1769+ 6B0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1769+ 6B0A             >
1769+ 6B0A             >                // dummy db directives used to calculate length of namec
1769+ 6B0A 21          >                db      "!"
1769+ 6B0B             >len_NFA         defl    $ - temp_NFA
1769+ 6B0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1769+ 6B0A             >
1769+ 6B0A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1769+ 6B0B 21          >                db      "!"               // name string in 7-bit ascii, but
1769+ 6B0C             >                org     $-1                 // alter last byte of Name just above to set
1769+ 6B0B A1          >                db      {b $} | END_BIT     // msb as name end
1769+ 6B0C             >
1769+ 6B0C FF 6A       >                dw      last_NFA            // Link to previous definition Name
1769+ 6B0E             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1769+ 6B0E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1769+ 6B0E ~           >
1769+ 6B0E ~           >
1769+ 6B0E             >                endif           ; ok        // for other definitions it "points" the correct handler
1769+ 6B0E             >                // Use of "; ok" to suppress "warning[fwdref]"
1769+ 6B0E             >
1769+ 6B0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1770+ 6B0E E1                           pop     hl                  // address
1771+ 6B0F D1                           pop     de                  // < n
1772+ 6B10 73                           ld      (hl), e             // low-byte
1773+ 6B11 23                           inc     hl
1774+ 6B12 72                           ld      (hl), d             // high-byte
1775+ 6B13
1776+ 6B13                              next
1776+ 6B13 DD E9       >                jp      (ix)
1777+ 6B15
1778+ 6B15              //  ______________________________________________________________________
1779+ 6B15              //
1780+ 6B15              // c@           a -- c
1781+ 6B15              // fetch a character n from address a
1782+ 6B15                              New_Def CFETCH, "C@", is_code, is_normal
1782+ 6B15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1782+ 6B15             >
1782+ 6B15             >                // dummy db directives used to calculate length of namec
1782+ 6B15 43 40       >                db      "C@"
1782+ 6B17             >len_NFA         defl    $ - temp_NFA
1782+ 6B17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1782+ 6B15             >
1782+ 6B15 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1782+ 6B16 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1782+ 6B18             >                org     $-1                 // alter last byte of Name just above to set
1782+ 6B17 C0          >                db      {b $} | END_BIT     // msb as name end
1782+ 6B18             >
1782+ 6B18 0A 6B       >                dw      last_NFA            // Link to previous definition Name
1782+ 6B1A             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1782+ 6B1A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1782+ 6B1A ~           >
1782+ 6B1A ~           >
1782+ 6B1A             >                endif           ; ok        // for other definitions it "points" the correct handler
1782+ 6B1A             >                // Use of "; ok" to suppress "warning[fwdref]"
1782+ 6B1A             >
1782+ 6B1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1783+ 6B1A E1                           pop     hl
1784+ 6B1B 6E                           ld      l, (hl)             // low-byte
1785+ 6B1C 26 00                        ld      h, 0
1786+ 6B1E
1787+ 6B1E                              psh1
1787+ 6B1E E5          >                push    hl
1787+ 6B1F DD E9       >                jp      (ix)
1788+ 6B21
1789+ 6B21              //  ______________________________________________________________________
1790+ 6B21              //
1791+ 6B21              // c!           c a --
1792+ 6B21              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1793+ 6B21                              New_Def CSTORE, "C!", is_code, is_normal
1793+ 6B21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1793+ 6B21             >
1793+ 6B21             >                // dummy db directives used to calculate length of namec
1793+ 6B21 43 21       >                db      "C!"
1793+ 6B23             >len_NFA         defl    $ - temp_NFA
1793+ 6B23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1793+ 6B21             >
1793+ 6B21 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1793+ 6B22 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1793+ 6B24             >                org     $-1                 // alter last byte of Name just above to set
1793+ 6B23 A1          >                db      {b $} | END_BIT     // msb as name end
1793+ 6B24             >
1793+ 6B24 15 6B       >                dw      last_NFA            // Link to previous definition Name
1793+ 6B26             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1793+ 6B26 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1793+ 6B26 ~           >
1793+ 6B26 ~           >
1793+ 6B26             >                endif           ; ok        // for other definitions it "points" the correct handler
1793+ 6B26             >                // Use of "; ok" to suppress "warning[fwdref]"
1793+ 6B26             >
1793+ 6B26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1794+ 6B26 E1                           pop     hl                  // < address
1795+ 6B27 D1                           pop     de
1796+ 6B28 73                           ld      (hl), e             // low-byte
1797+ 6B29
1798+ 6B29                              next
1798+ 6B29 DD E9       >                jp      (ix)
1799+ 6B2B
1800+ 6B2B              //  ______________________________________________________________________
1801+ 6B2B              //
1802+ 6B2B              // 2@           a -- d
1803+ 6B2B              // fetch a 32 bits number d from address a and leaves it on top of the
1804+ 6B2B              // stack as two single numbers, high part as top of the stack.
1805+ 6B2B              // A double number is normally kept in CPU registers as HLDE.
1806+ 6B2B              // On stack a double number is treated as two single numbers
1807+ 6B2B              // where BC is on the top of the stack and HL is the second from top,
1808+ 6B2B              // so the sign of the number can be checked on top of stack
1809+ 6B2B              // and in the stack memory it appears as LHED.
1810+ 6B2B                              New_Def TWO_FETCH, "2@", is_code, is_normal
1810+ 6B2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1810+ 6B2B             >
1810+ 6B2B             >                // dummy db directives used to calculate length of namec
1810+ 6B2B 32 40       >                db      "2@"
1810+ 6B2D             >len_NFA         defl    $ - temp_NFA
1810+ 6B2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1810+ 6B2B             >
1810+ 6B2B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1810+ 6B2C 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1810+ 6B2E             >                org     $-1                 // alter last byte of Name just above to set
1810+ 6B2D C0          >                db      {b $} | END_BIT     // msb as name end
1810+ 6B2E             >
1810+ 6B2E 21 6B       >                dw      last_NFA            // Link to previous definition Name
1810+ 6B30             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1810+ 6B30 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1810+ 6B30 ~           >
1810+ 6B30 ~           >
1810+ 6B30             >                endif           ; ok        // for other definitions it "points" the correct handler
1810+ 6B30             >                // Use of "; ok" to suppress "warning[fwdref]"
1810+ 6B30             >
1810+ 6B30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1811+ 6B30 E1                           pop     hl                  // address
1812+ 6B31 5E                           ld      e, (hl)             // low-byte
1813+ 6B32 23                           inc     hl
1814+ 6B33 56                           ld      d, (hl)             // high-byte
1815+ 6B34 23                           inc     hl
1816+ 6B35 7E                           ld      a, (hl)             // low-byte
1817+ 6B36 23                           inc     hl
1818+ 6B37 66                           ld      h, (hl)             // high-byte
1819+ 6B38 6F                           ld      l, a
1820+ 6B39 E5                           push    hl
1821+ 6B3A D5                           push    de
1822+ 6B3B                              next
1822+ 6B3B DD E9       >                jp      (ix)
1823+ 6B3D
1824+ 6B3D              //  ______________________________________________________________________
1825+ 6B3D              //
1826+ 6B3D              // 2!           d a --
1827+ 6B3D              // stores a 32 bits number d from address a and leaves it on top of the
1828+ 6B3D              // stack as two single numbers, high part as top of the stack.
1829+ 6B3D              // A double number is normally kept in CPU registers as HLDE.
1830+ 6B3D              // On stack a double number is treated as two single numbers
1831+ 6B3D              // where BC is on the top of the stack and HL is the second from top,
1832+ 6B3D              // so the sign of the number can be checked on top of stack
1833+ 6B3D              // and in the stack memory it appears as LHED.
1834+ 6B3D                              New_Def TWO_STORE, "2!", is_code, is_normal
1834+ 6B3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1834+ 6B3D             >
1834+ 6B3D             >                // dummy db directives used to calculate length of namec
1834+ 6B3D 32 21       >                db      "2!"
1834+ 6B3F             >len_NFA         defl    $ - temp_NFA
1834+ 6B3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1834+ 6B3D             >
1834+ 6B3D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1834+ 6B3E 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1834+ 6B40             >                org     $-1                 // alter last byte of Name just above to set
1834+ 6B3F A1          >                db      {b $} | END_BIT     // msb as name end
1834+ 6B40             >
1834+ 6B40 2B 6B       >                dw      last_NFA            // Link to previous definition Name
1834+ 6B42             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1834+ 6B42 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1834+ 6B42 ~           >
1834+ 6B42 ~           >
1834+ 6B42             >                endif           ; ok        // for other definitions it "points" the correct handler
1834+ 6B42             >                // Use of "; ok" to suppress "warning[fwdref]"
1834+ 6B42             >
1834+ 6B42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1835+ 6B42 D9                           exx
1836+ 6B43 E1                           pop     hl                  // address
1837+ 6B44 C1                           pop     bc                  // < high-part
1838+ 6B45 D1                           pop     de                  // < low-part > Instruction Pointer
1839+ 6B46 71                           ld      (hl), c
1840+ 6B47 23                           inc     hl
1841+ 6B48 70                           ld      (hl), b
1842+ 6B49 23                           inc     hl
1843+ 6B4A 73                           ld      (hl), e
1844+ 6B4B 23                           inc     hl
1845+ 6B4C 72                           ld      (hl), d
1846+ 6B4D D9                           exx
1847+ 6B4E                              next
1847+ 6B4E DD E9       >                jp      (ix)
1848+ 6B50
1849+ 6B50              //  ______________________________________________________________________
1850+ 6B50              //
1851+ 6B50              // p@           a -- c
1852+ 6B50              // Read one byte from port a and leave the result on top of stack
1853+ 6B50                              New_Def PFETCH, "P@", is_code, is_normal
1853+ 6B50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1853+ 6B50             >
1853+ 6B50             >                // dummy db directives used to calculate length of namec
1853+ 6B50 50 40       >                db      "P@"
1853+ 6B52             >len_NFA         defl    $ - temp_NFA
1853+ 6B52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1853+ 6B50             >
1853+ 6B50 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1853+ 6B51 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1853+ 6B53             >                org     $-1                 // alter last byte of Name just above to set
1853+ 6B52 C0          >                db      {b $} | END_BIT     // msb as name end
1853+ 6B53             >
1853+ 6B53 3D 6B       >                dw      last_NFA            // Link to previous definition Name
1853+ 6B55             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1853+ 6B55 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1853+ 6B55 ~           >
1853+ 6B55 ~           >
1853+ 6B55             >                endif           ; ok        // for other definitions it "points" the correct handler
1853+ 6B55             >                // Use of "; ok" to suppress "warning[fwdref]"
1853+ 6B55             >
1853+ 6B55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1854+ 6B55 D9                           exx
1855+ 6B56 C1                           pop     bc
1856+ 6B57 26 00                        ld      h, 0
1857+ 6B59 ED 68                        in      l, (c)
1858+ 6B5B E5                           push    hl
1859+ 6B5C D9                           exx
1860+ 6B5D                              next
1860+ 6B5D DD E9       >                jp      (ix)
1861+ 6B5F
1862+ 6B5F              //  ______________________________________________________________________
1863+ 6B5F              //
1864+ 6B5F              // p!           c a --
1865+ 6B5F              // Send one byte (top of stack) to port a
1866+ 6B5F                              New_Def PSTORE, "P!", is_code, is_normal
1866+ 6B5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1866+ 6B5F             >
1866+ 6B5F             >                // dummy db directives used to calculate length of namec
1866+ 6B5F 50 21       >                db      "P!"
1866+ 6B61             >len_NFA         defl    $ - temp_NFA
1866+ 6B61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1866+ 6B5F             >
1866+ 6B5F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1866+ 6B60 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1866+ 6B62             >                org     $-1                 // alter last byte of Name just above to set
1866+ 6B61 A1          >                db      {b $} | END_BIT     // msb as name end
1866+ 6B62             >
1866+ 6B62 50 6B       >                dw      last_NFA            // Link to previous definition Name
1866+ 6B64             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1866+ 6B64 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1866+ 6B64 ~           >
1866+ 6B64 ~           >
1866+ 6B64             >                endif           ; ok        // for other definitions it "points" the correct handler
1866+ 6B64             >                // Use of "; ok" to suppress "warning[fwdref]"
1866+ 6B64             >
1866+ 6B64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1867+ 6B64 D9                           exx
1868+ 6B65 C1                           pop     bc
1869+ 6B66 E1                           pop     hl                  // < c
1870+ 6B67 ED 69                        out     (c), l              // low-byte
1871+ 6B69 D9                           exx
1872+ 6B6A                              next
1872+ 6B6A DD E9       >                jp      (ix)
1873+ 6B6C
1874+ 6B6C
1875+ 6B6C              //  ______________________________________________________________________
1876+ 6B6C              //
1877+ 6B6C              // 2*           n1 -- n2
1878+ 6B6C              // doubles the number at top of stack
1879+ 6B6C                              New_Def TWO_MUL, "2*", is_code, is_normal
1879+ 6B6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1879+ 6B6C             >
1879+ 6B6C             >                // dummy db directives used to calculate length of namec
1879+ 6B6C 32 2A       >                db      "2*"
1879+ 6B6E             >len_NFA         defl    $ - temp_NFA
1879+ 6B6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1879+ 6B6C             >
1879+ 6B6C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1879+ 6B6D 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1879+ 6B6F             >                org     $-1                 // alter last byte of Name just above to set
1879+ 6B6E AA          >                db      {b $} | END_BIT     // msb as name end
1879+ 6B6F             >
1879+ 6B6F 5F 6B       >                dw      last_NFA            // Link to previous definition Name
1879+ 6B71             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1879+ 6B71 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1879+ 6B71 ~           >
1879+ 6B71 ~           >
1879+ 6B71             >                endif           ; ok        // for other definitions it "points" the correct handler
1879+ 6B71             >                // Use of "; ok" to suppress "warning[fwdref]"
1879+ 6B71             >
1879+ 6B71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1880+ 6B71              Two_Mul_Ptr:
1881+ 6B71 E1                           pop     hl
1882+ 6B72 29                           add     hl, hl
1883+ 6B73
1884+ 6B73                              psh1
1884+ 6B73 E5          >                push    hl
1884+ 6B74 DD E9       >                jp      (ix)
1885+ 6B76
1886+ 6B76              //  ______________________________________________________________________
1887+ 6B76              //
1888+ 6B76              // 2/           n1 -- n2
1889+ 6B76              // halves the top of stack, sign is unchanged
1890+ 6B76                              New_Def TWO_DIV, "2/", is_code, is_normal
1890+ 6B76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1890+ 6B76             >
1890+ 6B76             >                // dummy db directives used to calculate length of namec
1890+ 6B76 32 2F       >                db      "2/"
1890+ 6B78             >len_NFA         defl    $ - temp_NFA
1890+ 6B78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1890+ 6B76             >
1890+ 6B76 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1890+ 6B77 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1890+ 6B79             >                org     $-1                 // alter last byte of Name just above to set
1890+ 6B78 AF          >                db      {b $} | END_BIT     // msb as name end
1890+ 6B79             >
1890+ 6B79 6C 6B       >                dw      last_NFA            // Link to previous definition Name
1890+ 6B7B             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1890+ 6B7B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1890+ 6B7B ~           >
1890+ 6B7B ~           >
1890+ 6B7B             >                endif           ; ok        // for other definitions it "points" the correct handler
1890+ 6B7B             >                // Use of "; ok" to suppress "warning[fwdref]"
1890+ 6B7B             >
1890+ 6B7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1891+ 6B7B E1                           pop     hl
1892+ 6B7C CB 2C                        sra     h
1893+ 6B7E CB 1D                        rr      l
1894+ 6B80
1895+ 6B80                              psh1
1895+ 6B80 E5          >                push    hl
1895+ 6B81 DD E9       >                jp      (ix)
1896+ 6B83
1897+ 6B83              //  ______________________________________________________________________
1898+ 6B83              //
1899+ 6B83              // lshift       n1 u -- n2
1900+ 6B83              // bit left shift of u bits
1901+ 6B83                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1901+ 6B83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1901+ 6B83             >
1901+ 6B83             >                // dummy db directives used to calculate length of namec
1901+ 6B83 4C 53 48 49 >                db      "LSHIFT"
1901+ 6B87 46 54       >
1901+ 6B89             >len_NFA         defl    $ - temp_NFA
1901+ 6B89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1901+ 6B83             >
1901+ 6B83 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1901+ 6B84 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1901+ 6B88 46 54       >
1901+ 6B8A             >                org     $-1                 // alter last byte of Name just above to set
1901+ 6B89 D4          >                db      {b $} | END_BIT     // msb as name end
1901+ 6B8A             >
1901+ 6B8A 76 6B       >                dw      last_NFA            // Link to previous definition Name
1901+ 6B8C             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1901+ 6B8C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1901+ 6B8C ~           >
1901+ 6B8C ~           >
1901+ 6B8C             >                endif           ; ok        // for other definitions it "points" the correct handler
1901+ 6B8C             >                // Use of "; ok" to suppress "warning[fwdref]"
1901+ 6B8C             >
1901+ 6B8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1902+ 6B8C D1                           pop     de
1903+ 6B8D
1904+ 6B8D E1                           pop     hl
1905+ 6B8E 7B                           ld      a, e
1906+ 6B8F B7                           or      a
1907+ 6B90 28 04                        jr      z, Lshift_Zero
1908+ 6B92              Lshift_Loop:
1909+ 6B92 29                                   add     hl, hl
1910+ 6B93 3D                                   dec     a
1911+ 6B94 20 FC                            jr      nz, Lshift_Loop
1912+ 6B96              Lshift_Zero:
1913+ 6B96
1914+ 6B96
1915+ 6B96                              psh1
1915+ 6B96 E5          >                push    hl
1915+ 6B97 DD E9       >                jp      (ix)
1916+ 6B99
1917+ 6B99              //  ______________________________________________________________________
1918+ 6B99              //
1919+ 6B99              // rshift       n1 u -- n2
1920+ 6B99              // bit right shift of u bits
1921+ 6B99                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1921+ 6B99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1921+ 6B99             >
1921+ 6B99             >                // dummy db directives used to calculate length of namec
1921+ 6B99 52 53 48 49 >                db      "RSHIFT"
1921+ 6B9D 46 54       >
1921+ 6B9F             >len_NFA         defl    $ - temp_NFA
1921+ 6B9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1921+ 6B99             >
1921+ 6B99 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1921+ 6B9A 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1921+ 6B9E 46 54       >
1921+ 6BA0             >                org     $-1                 // alter last byte of Name just above to set
1921+ 6B9F D4          >                db      {b $} | END_BIT     // msb as name end
1921+ 6BA0             >
1921+ 6BA0 83 6B       >                dw      last_NFA            // Link to previous definition Name
1921+ 6BA2             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1921+ 6BA2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1921+ 6BA2 ~           >
1921+ 6BA2 ~           >
1921+ 6BA2             >                endif           ; ok        // for other definitions it "points" the correct handler
1921+ 6BA2             >                // Use of "; ok" to suppress "warning[fwdref]"
1921+ 6BA2             >
1921+ 6BA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1922+ 6BA2 D1                           pop     de
1923+ 6BA3
1924+ 6BA3 E1                           pop     hl
1925+ 6BA4 7B                           ld      a, e
1926+ 6BA5 B7                           or      a
1927+ 6BA6 28 07                        jr      z, Rshift_Zero
1928+ 6BA8              Rshift_Loop:
1929+ 6BA8 CB 3C                                srl     h
1930+ 6BAA CB 1D                                rr      l
1931+ 6BAC 3D                                   dec     a
1932+ 6BAD 20 F9                            jr      nz, Rshift_Loop
1933+ 6BAF              Rshift_Zero:
1934+ 6BAF
1935+ 6BAF
1936+ 6BAF                              psh1
1936+ 6BAF E5          >                push    hl
1936+ 6BB0 DD E9       >                jp      (ix)
1937+ 6BB2
1938+ 6BB2              //  ______________________________________________________________________
1939+ 6BB2              //
1940+ 6BB2              // cells        n1 -- n2
1941+ 6BB2              // decrement by 2 top of stack
1942+ 6BB2                              New_Def CELLS, "CELLS", is_code, is_normal
1942+ 6BB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1942+ 6BB2             >
1942+ 6BB2             >                // dummy db directives used to calculate length of namec
1942+ 6BB2 43 45 4C 4C >                db      "CELLS"
1942+ 6BB6 53          >
1942+ 6BB7             >len_NFA         defl    $ - temp_NFA
1942+ 6BB7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1942+ 6BB2             >
1942+ 6BB2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1942+ 6BB3 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1942+ 6BB7 53          >
1942+ 6BB8             >                org     $-1                 // alter last byte of Name just above to set
1942+ 6BB7 D3          >                db      {b $} | END_BIT     // msb as name end
1942+ 6BB8             >
1942+ 6BB8 99 6B       >                dw      last_NFA            // Link to previous definition Name
1942+ 6BBA             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1942+ 6BBA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1942+ 6BBA ~           >
1942+ 6BBA ~           >
1942+ 6BBA             >                endif           ; ok        // for other definitions it "points" the correct handler
1942+ 6BBA             >                // Use of "; ok" to suppress "warning[fwdref]"
1942+ 6BBA             >
1942+ 6BBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1943+ 6BBA C3 71 6B                     jp      Two_Mul_Ptr
1944+ 6BBD
1945+ 6BBD
1946+ 6BBD              //  ______________________________________________________________________
1947+ 6BBD
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
 111  6BBD                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
   1+ 6BBD              //  ______________________________________________________________________
   2+ 6BBD              //
   3+ 6BBD              //  L1.asm
   4+ 6BBD              //
   5+ 6BBD              //  Level-1 definitions and derivate
   6+ 6BBD              //  ______________________________________________________________________
   7+ 6BBD
   8+ 6BBD              //  ______________________________________________________________________
   9+ 6BBD              //
  10+ 6BBD              // :            -- cccc     ( compile time )
  11+ 6BBD              //              i*x -- j*x  ( run time )
  12+ 6BBD              // Colon Definition
  13+ 6BBD                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6BBD             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6BBD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6BBD             >
  13+ 6BBD             >                // dummy db directives used to calculate length of namec
  13+ 6BBD 3A          >                db      ":"
  13+ 6BBE             >len_NFA         defl    $ - temp_NFA
  13+ 6BBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6BBD             >
  13+ 6BBD C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6BBE 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6BBF             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6BBE BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6BBF             >
  13+ 6BBF B2 6B       >                dw      last_NFA            // Link to previous definition Name
  13+ 6BC1             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6BC1 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6BC4             >
  13+ 6BC4             >
  13+ 6BC4             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6BC4             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6BC4             >
  13+ 6BC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6BC4
  15+ 6BC4 64 70                        dw      QEXEC                   // ?exec
  16+ 6BC6 1C 70                        dw      STORE_CSP               // !csp
  17+ 6BC8 AC 6D 03 6B                  dw      CURRENT, FETCH          // current @
  18+ 6BCC 9E 6D 0E 6B                  dw      CONTEXT, STORE          // context !
  19+ 6BD0 84 76                        dw      CREATE                  // create  ( forward )
  20+ 6BD2 19 71                        dw      SMUDGE                  // dmudge
  21+ 6BD4 03 71                        dw      SQUARED_CLOSE           // ]
  22+ 6BD6 73 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6BD8                                                              // ... immediate
  24+ 6BD8              Enter_Ptr:
  25+ 6BD8                              // via call coded in CFA
  26+ 6BD8                              ldhlrp
  26+ 6BD8 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6BDB 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6BDC 70                           ld      (hl), b
  29+ 6BDD 2B                           dec     hl
  30+ 6BDE 71                           ld      (hl), c
  31+ 6BDF                              ldrphl
  31+ 6BDF 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6BE2
  33+ 6BE2
  34+ 6BE2 C1                           pop     bc                  // points to PFA of "this" word
  35+ 6BE3                              next
  35+ 6BE3 DD E9       >                jp      (ix)
  36+ 6BE5
  37+ 6BE5              //  ______________________________________________________________________
  38+ 6BE5              //
  39+ 6BE5              // ;            --
  40+ 6BE5              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6BE5                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6BE5             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6BE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6BE5             >
  41+ 6BE5             >                // dummy db directives used to calculate length of namec
  41+ 6BE5 3B          >                db      ";"
  41+ 6BE6             >len_NFA         defl    $ - temp_NFA
  41+ 6BE6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6BE5             >
  41+ 6BE5 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6BE6 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6BE7             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6BE6 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6BE7             >
  41+ 6BE7 BD 6B       >                dw      last_NFA            // Link to previous definition Name
  41+ 6BE9             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6BE9 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6BEC             >
  41+ 6BEC             >
  41+ 6BEC             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6BEC             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6BEC             >
  41+ 6BEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6BEC
  43+ 6BEC 90 70                        dw      QCSP                    // ?csp
  44+ 6BEE C9 70 3F 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6BF2 19 71                        dw      SMUDGE                  // smudge
  46+ 6BF4 F4 70                        dw      SQUARED_OPEN            // [
  47+ 6BF6 3F 69                        dw      EXIT                    // ; immediate
  48+ 6BF8
  49+ 6BF8              //  ______________________________________________________________________
  50+ 6BF8              //
  51+ 6BF8              // noop         --
  52+ 6BF8
  53+ 6BF8                              New_Def NOOP, "NOOP", is_code, is_normal
  53+ 6BF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6BF8             >
  53+ 6BF8             >                // dummy db directives used to calculate length of namec
  53+ 6BF8 4E 4F 4F 50 >                db      "NOOP"
  53+ 6BFC             >len_NFA         defl    $ - temp_NFA
  53+ 6BFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6BF8             >
  53+ 6BF8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6BF9 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6BFD             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6BFC D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6BFD             >
  53+ 6BFD E5 6B       >                dw      last_NFA            // Link to previous definition Name
  53+ 6BFF             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6BFF ~           >                call    runcode ; ok        // for primitive definitions  actual code
  53+ 6BFF ~           >
  53+ 6BFF ~           >
  53+ 6BFF             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6BFF             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6BFF             >
  53+ 6BFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6BFF                              next
  54+ 6BFF DD E9       >                jp      (ix)
  55+ 6C01
  56+ 6C01              //  ______________________________________________________________________
  57+ 6C01              //
  58+ 6C01              // constant     n -- cccc     ( compile time )
  59+ 6C01              //              -- n          ( run time )
  60+ 6C01              // Constant definition.
  61+ 6C01                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6C01             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6C01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6C01             >
  61+ 6C01             >                // dummy db directives used to calculate length of namec
  61+ 6C01 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6C05 54 41 4E 54 >
  61+ 6C09             >len_NFA         defl    $ - temp_NFA
  61+ 6C09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6C01             >
  61+ 6C01 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6C02 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6C06 54 41 4E 54 >
  61+ 6C0A             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6C09 D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6C0A             >
  61+ 6C0A F8 6B       >                dw      last_NFA            // Link to previous definition Name
  61+ 6C0C             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6C0C CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6C0F             >
  61+ 6C0F             >
  61+ 6C0F             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6C0F             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6C0F             >
  61+ 6C0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6C0F
  63+ 6C0F 84 76                        dw      CREATE                  // create
  64+ 6C11 79 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6C13 73 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6C15              Constant_Ptr:
  67+ 6C15
  68+ 6C15
  69+ 6C15 E1                           pop     hl
  70+ 6C16
  71+ 6C16 5E                           ld      e, (hl)
  72+ 6C17 23                           inc     hl
  73+ 6C18 56                           ld      d, (hl)
  74+ 6C19 D5                           push    de
  75+ 6C1A                              next
  75+ 6C1A DD E9       >                jp      (ix)
  76+ 6C1C
  77+ 6C1C              //  ______________________________________________________________________
  78+ 6C1C              //
  79+ 6C1C              // variable     n -- cccc     ( compile time )
  80+ 6C1C              //              -- a          ( run time )
  81+ 6C1C              // Variable definition, n is the initial value.
  82+ 6C1C                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6C1C             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6C1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6C1C             >
  82+ 6C1C             >                // dummy db directives used to calculate length of namec
  82+ 6C1C 56 41 52 49 >                db      "VARIABLE"
  82+ 6C20 41 42 4C 45 >
  82+ 6C24             >len_NFA         defl    $ - temp_NFA
  82+ 6C24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6C1C             >
  82+ 6C1C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6C1D 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6C21 41 42 4C 45 >
  82+ 6C25             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6C24 C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6C25             >
  82+ 6C25 01 6C       >                dw      last_NFA            // Link to previous definition Name
  82+ 6C27             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6C27 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6C2A             >
  82+ 6C2A             >
  82+ 6C2A             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6C2A             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6C2A             >
  82+ 6C2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6C2A
  84+ 6C2A 51 6C                        dw      ZERO
  85+ 6C2C 0C 6C                        dw      CONSTANT                // constant
  86+ 6C2E 73 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  87+ 6C30              Variable_Ptr:
  88+ 6C30
  89+ 6C30
  90+ 6C30
  91+ 6C30
  92+ 6C30                              next
  92+ 6C30 DD E9       >                jp      (ix)
  93+ 6C32
  94+ 6C32              //  ______________________________________________________________________
  95+ 6C32              //
  96+ 6C32              // user         b -- cccc     ( compile time )
  97+ 6C32              //              -- a          ( run time )
  98+ 6C32              // User variable definition
  99+ 6C32                              Colon_Def USER, "USER", is_normal
  99+ 6C32             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  99+ 6C32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99+ 6C32             >
  99+ 6C32             >                // dummy db directives used to calculate length of namec
  99+ 6C32 55 53 45 52 >                db      "USER"
  99+ 6C36             >len_NFA         defl    $ - temp_NFA
  99+ 6C36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99+ 6C32             >
  99+ 6C32 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99+ 6C33 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  99+ 6C37             >                org     $-1                 // alter last byte of Name just above to set
  99+ 6C36 D2          >                db      {b $} | END_BIT     // msb as name end
  99+ 6C37             >
  99+ 6C37 1C 6C       >                dw      last_NFA            // Link to previous definition Name
  99+ 6C39             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  99+ 6C39 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  99+ 6C3C             >
  99+ 6C3C             >
  99+ 6C3C             >                endif           ; ok        // for other definitions it "points" the correct handler
  99+ 6C3C             >                // Use of "; ok" to suppress "warning[fwdref]"
  99+ 6C3C             >
  99+ 6C3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100+ 6C3C
 101+ 6C3C 84 76                        dw      CREATE                  // create
 102+ 6C3E 8B 6E                        dw      CCOMMA                  // c,
 103+ 6C40 73 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 104+ 6C42
 105+ 6C42
 106+ 6C42              User_Ptr:
 107+ 6C42                              // via call coded in CFA
 108+ 6C42 E1                           pop     hl
 109+ 6C43
 110+ 6C43 5E                           ld      e, (hl)
 111+ 6C44 16 00                        ld      d, 0
 112+ 6C46 2A 94 63                     ld      hl, (USER_Pointer)
 113+ 6C49 19                           add     hl, de
 114+ 6C4A
 115+ 6C4A                              psh1
 115+ 6C4A E5          >                push    hl
 115+ 6C4B DD E9       >                jp      (ix)
 116+ 6C4D
 117+ 6C4D              //  ______________________________________________________________________
 118+ 6C4D              //
 119+ 6C4D                              Constant_Def ZERO       ,   "0"     ,   0
 119+ 6C4D             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 119+ 6C4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6C4D             >
 119+ 6C4D             >                // dummy db directives used to calculate length of namec
 119+ 6C4D 30          >                db      "0"
 119+ 6C4E             >len_NFA         defl    $ - temp_NFA
 119+ 6C4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6C4D             >
 119+ 6C4D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6C4E 30          >                db      "0"               // name string in 7-bit ascii, but
 119+ 6C4F             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6C4E B0          >                db      {b $} | END_BIT     // msb as name end
 119+ 6C4F             >
 119+ 6C4F 32 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6C51             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6C51 CD 15 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6C54             >
 119+ 6C54             >
 119+ 6C54             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6C54             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6C54             >
 119+ 6C54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6C54 00 00       >                dw      0
 120+ 6C56                              Constant_Def ONE        ,   "1"     ,   1
 120+ 6C56             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 120+ 6C56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6C56             >
 120+ 6C56             >                // dummy db directives used to calculate length of namec
 120+ 6C56 31          >                db      "1"
 120+ 6C57             >len_NFA         defl    $ - temp_NFA
 120+ 6C57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6C56             >
 120+ 6C56 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6C57 31          >                db      "1"               // name string in 7-bit ascii, but
 120+ 6C58             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6C57 B1          >                db      {b $} | END_BIT     // msb as name end
 120+ 6C58             >
 120+ 6C58 4D 6C       >                dw      last_NFA            // Link to previous definition Name
 120+ 6C5A             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6C5A CD 15 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6C5D             >
 120+ 6C5D             >
 120+ 6C5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6C5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6C5D             >
 120+ 6C5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6C5D 01 00       >                dw      1
 121+ 6C5F                              Constant_Def TWO        ,   "2"     ,   2
 121+ 6C5F             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 121+ 6C5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6C5F             >
 121+ 6C5F             >                // dummy db directives used to calculate length of namec
 121+ 6C5F 32          >                db      "2"
 121+ 6C60             >len_NFA         defl    $ - temp_NFA
 121+ 6C60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6C5F             >
 121+ 6C5F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6C60 32          >                db      "2"               // name string in 7-bit ascii, but
 121+ 6C61             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6C60 B2          >                db      {b $} | END_BIT     // msb as name end
 121+ 6C61             >
 121+ 6C61 56 6C       >                dw      last_NFA            // Link to previous definition Name
 121+ 6C63             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6C63 CD 15 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6C66             >
 121+ 6C66             >
 121+ 6C66             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6C66             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6C66             >
 121+ 6C66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6C66 02 00       >                dw      2
 122+ 6C68                              Constant_Def THREE      ,   "3"     ,   3
 122+ 6C68             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 122+ 6C68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6C68             >
 122+ 6C68             >                // dummy db directives used to calculate length of namec
 122+ 6C68 33          >                db      "3"
 122+ 6C69             >len_NFA         defl    $ - temp_NFA
 122+ 6C69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6C68             >
 122+ 6C68 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6C69 33          >                db      "3"               // name string in 7-bit ascii, but
 122+ 6C6A             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6C69 B3          >                db      {b $} | END_BIT     // msb as name end
 122+ 6C6A             >
 122+ 6C6A 5F 6C       >                dw      last_NFA            // Link to previous definition Name
 122+ 6C6C             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6C6C CD 15 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6C6F             >
 122+ 6C6F             >
 122+ 6C6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6C6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6C6F             >
 122+ 6C6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6C6F 03 00       >                dw      3
 123+ 6C71                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 123+ 6C71             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 123+ 6C71             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6C71             >
 123+ 6C71             >                // dummy db directives used to calculate length of namec
 123+ 6C71 2D 31       >                db      "-1"
 123+ 6C73             >len_NFA         defl    $ - temp_NFA
 123+ 6C73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6C71             >
 123+ 6C71 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6C72 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 123+ 6C74             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6C73 B1          >                db      {b $} | END_BIT     // msb as name end
 123+ 6C74             >
 123+ 6C74 68 6C       >                dw      last_NFA            // Link to previous definition Name
 123+ 6C76             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6C76 CD 15 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6C79             >
 123+ 6C79             >
 123+ 6C79             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6C79             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6C79             >
 123+ 6C79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6C79 FF FF       >                dw      -1
 124+ 6C7B                              Constant_Def BL         ,   "BL"    , $20
 124+ 6C7B             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 124+ 6C7B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6C7B             >
 124+ 6C7B             >                // dummy db directives used to calculate length of namec
 124+ 6C7B 42 4C       >                db      "BL"
 124+ 6C7D             >len_NFA         defl    $ - temp_NFA
 124+ 6C7D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6C7B             >
 124+ 6C7B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6C7C 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 124+ 6C7E             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6C7D CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6C7E             >
 124+ 6C7E 71 6C       >                dw      last_NFA            // Link to previous definition Name
 124+ 6C80             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6C80 CD 15 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6C83             >
 124+ 6C83             >
 124+ 6C83             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6C83             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6C83             >
 124+ 6C83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6C83 20 00       >                dw      $20
 125+ 6C85                              Constant_Def CL         ,   "C/L"   ,  64
 125+ 6C85             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 125+ 6C85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6C85             >
 125+ 6C85             >                // dummy db directives used to calculate length of namec
 125+ 6C85 43 2F 4C    >                db      "C/L"
 125+ 6C88             >len_NFA         defl    $ - temp_NFA
 125+ 6C88             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6C85             >
 125+ 6C85 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6C86 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 125+ 6C89             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6C88 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ 6C89             >
 125+ 6C89 7B 6C       >                dw      last_NFA            // Link to previous definition Name
 125+ 6C8B             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6C8B CD 15 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6C8E             >
 125+ 6C8E             >
 125+ 6C8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6C8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6C8E             >
 125+ 6C8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6C8E 40 00       >                dw      64
 126+ 6C90                              Constant_Def BBUF       ,   "B/BUF" , 512
 126+ 6C90             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 126+ 6C90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6C90             >
 126+ 6C90             >                // dummy db directives used to calculate length of namec
 126+ 6C90 42 2F 42 55 >                db      "B/BUF"
 126+ 6C94 46          >
 126+ 6C95             >len_NFA         defl    $ - temp_NFA
 126+ 6C95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6C90             >
 126+ 6C90 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6C91 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 126+ 6C95 46          >
 126+ 6C96             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6C95 C6          >                db      {b $} | END_BIT     // msb as name end
 126+ 6C96             >
 126+ 6C96 85 6C       >                dw      last_NFA            // Link to previous definition Name
 126+ 6C98             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6C98 CD 15 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6C9B             >
 126+ 6C9B             >
 126+ 6C9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6C9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6C9B             >
 126+ 6C9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6C9B 00 02       >                dw      512
 127+ 6C9D                              Constant_Def BSCR       ,   "B/SCR" ,   2
 127+ 6C9D             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 127+ 6C9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6C9D             >
 127+ 6C9D             >                // dummy db directives used to calculate length of namec
 127+ 6C9D 42 2F 53 43 >                db      "B/SCR"
 127+ 6CA1 52          >
 127+ 6CA2             >len_NFA         defl    $ - temp_NFA
 127+ 6CA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6C9D             >
 127+ 6C9D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6C9E 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 127+ 6CA2 52          >
 127+ 6CA3             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6CA2 D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6CA3             >
 127+ 6CA3 90 6C       >                dw      last_NFA            // Link to previous definition Name
 127+ 6CA5             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6CA5 CD 15 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6CA8             >
 127+ 6CA8             >
 127+ 6CA8             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6CA8             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6CA8             >
 127+ 6CA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6CA8 02 00       >                dw      2
 128+ 6CAA                              Constant_Def LSCR       ,   "L/SCR" ,  16
 128+ 6CAA             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 128+ 6CAA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ 6CAA             >
 128+ 6CAA             >                // dummy db directives used to calculate length of namec
 128+ 6CAA 4C 2F 53 43 >                db      "L/SCR"
 128+ 6CAE 52          >
 128+ 6CAF             >len_NFA         defl    $ - temp_NFA
 128+ 6CAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ 6CAA             >
 128+ 6CAA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ 6CAB 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 128+ 6CAF 52          >
 128+ 6CB0             >                org     $-1                 // alter last byte of Name just above to set
 128+ 6CAF D2          >                db      {b $} | END_BIT     // msb as name end
 128+ 6CB0             >
 128+ 6CB0 9D 6C       >                dw      last_NFA            // Link to previous definition Name
 128+ 6CB2             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6CB2 CD 15 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6CB5             >
 128+ 6CB5             >
 128+ 6CB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6CB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6CB5             >
 128+ 6CB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6CB5 10 00       >                dw      16
 129+ 6CB7
 130+ 6CB7              //  ______________________________________________________________________
 131+ 6CB7              //
 132+ 6CB7              // +origin         --
 133+ 6CB7              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 134+ 6CB7              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 135+ 6CB7              //              dw      PLUS                    // +
 136+ 6CB7              //              dw      EXIT                    // ;
 137+ 6CB7                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 137+ 6CB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ 6CB7             >
 137+ 6CB7             >                // dummy db directives used to calculate length of namec
 137+ 6CB7 2B 4F 52 49 >                db      "+ORIGIN"
 137+ 6CBB 47 49 4E    >
 137+ 6CBE             >len_NFA         defl    $ - temp_NFA
 137+ 6CBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ 6CB7             >
 137+ 6CB7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ 6CB8 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 137+ 6CBC 47 49 4E    >
 137+ 6CBF             >                org     $-1                 // alter last byte of Name just above to set
 137+ 6CBE CE          >                db      {b $} | END_BIT     // msb as name end
 137+ 6CBF             >
 137+ 6CBF AA 6C       >                dw      last_NFA            // Link to previous definition Name
 137+ 6CC1             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 6CC1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 137+ 6CC1 ~           >
 137+ 6CC1 ~           >
 137+ 6CC1             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 6CC1             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 6CC1             >
 137+ 6CC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 6CC1 E1                           pop     hl
 139+ 6CC2 11 66 63                     ld      de, Cold_origin
 140+ 6CC5 19                           add     hl, de
 141+ 6CC6 E5                           push    hl
 142+ 6CC7                              next
 142+ 6CC7 DD E9       >                jp      (ix)
 143+ 6CC9
 144+ 6CC9
 145+ 6CC9              //  ______________________________________________________________________
 146+ 6CC9              //
 147+ 6CC9                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 147+ 6CC9             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 147+ 6CC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147+ 6CC9             >
 147+ 6CC9             >                // dummy db directives used to calculate length of namec
 147+ 6CC9 28 4E 45 58 >                db      "(NEXT)"
 147+ 6CCD 54 29       >
 147+ 6CCF             >len_NFA         defl    $ - temp_NFA
 147+ 6CCF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147+ 6CC9             >
 147+ 6CC9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147+ 6CCA 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 147+ 6CCE 54 29       >
 147+ 6CD0             >                org     $-1                 // alter last byte of Name just above to set
 147+ 6CCF A9          >                db      {b $} | END_BIT     // msb as name end
 147+ 6CD0             >
 147+ 6CD0 B7 6C       >                dw      last_NFA            // Link to previous definition Name
 147+ 6CD2             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 147+ 6CD2 CD 15 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 147+ 6CD5             >
 147+ 6CD5             >
 147+ 6CD5             >                endif           ; ok        // for other definitions it "points" the correct handler
 147+ 6CD5             >                // Use of "; ok" to suppress "warning[fwdref]"
 147+ 6CD5             >
 147+ 6CD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 147+ 6CD5 98 63       >                dw      Next_Ptr
 148+ 6CD7
 149+ 6CD7              //  ______________________________________________________________________
 150+ 6CD7              //
 151+ 6CD7
 152+ 6CD7                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 152+ 6CD7             >                New_Def  S0, "S0", User_Ptr, is_normal
 152+ 6CD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6CD7             >
 152+ 6CD7             >                // dummy db directives used to calculate length of namec
 152+ 6CD7 53 30       >                db      "S0"
 152+ 6CD9             >len_NFA         defl    $ - temp_NFA
 152+ 6CD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6CD7             >
 152+ 6CD7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6CD8 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 152+ 6CDA             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6CD9 B0          >                db      {b $} | END_BIT     // msb as name end
 152+ 6CDA             >
 152+ 6CDA C9 6C       >                dw      last_NFA            // Link to previous definition Name
 152+ 6CDC             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6CDC CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6CDF             >
 152+ 6CDF             >
 152+ 6CDF             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6CDF             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6CDF             >
 152+ 6CDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6CDF 06          >                db      06
 153+ 6CE0                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 153+ 6CE0             >                New_Def  R0, "R0", User_Ptr, is_normal
 153+ 6CE0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6CE0             >
 153+ 6CE0             >                // dummy db directives used to calculate length of namec
 153+ 6CE0 52 30       >                db      "R0"
 153+ 6CE2             >len_NFA         defl    $ - temp_NFA
 153+ 6CE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6CE0             >
 153+ 6CE0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6CE1 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 153+ 6CE3             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6CE2 B0          >                db      {b $} | END_BIT     // msb as name end
 153+ 6CE3             >
 153+ 6CE3 D7 6C       >                dw      last_NFA            // Link to previous definition Name
 153+ 6CE5             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6CE5 CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6CE8             >
 153+ 6CE8             >
 153+ 6CE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6CE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6CE8             >
 153+ 6CE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6CE8 08          >                db      08
 154+ 6CE9                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 154+ 6CE9             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 154+ 6CE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6CE9             >
 154+ 6CE9             >                // dummy db directives used to calculate length of namec
 154+ 6CE9 54 49 42    >                db      "TIB"
 154+ 6CEC             >len_NFA         defl    $ - temp_NFA
 154+ 6CEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6CE9             >
 154+ 6CE9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6CEA 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 154+ 6CED             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6CEC C2          >                db      {b $} | END_BIT     // msb as name end
 154+ 6CED             >
 154+ 6CED E0 6C       >                dw      last_NFA            // Link to previous definition Name
 154+ 6CEF             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6CEF CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6CF2             >
 154+ 6CF2             >
 154+ 6CF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6CF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6CF2             >
 154+ 6CF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6CF2 0A          >                db      10
 155+ 6CF3                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 155+ 6CF3             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 155+ 6CF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6CF3             >
 155+ 6CF3             >                // dummy db directives used to calculate length of namec
 155+ 6CF3 57 49 44 54 >                db      "WIDTH"
 155+ 6CF7 48          >
 155+ 6CF8             >len_NFA         defl    $ - temp_NFA
 155+ 6CF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6CF3             >
 155+ 6CF3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6CF4 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 155+ 6CF8 48          >
 155+ 6CF9             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6CF8 C8          >                db      {b $} | END_BIT     // msb as name end
 155+ 6CF9             >
 155+ 6CF9 E9 6C       >                dw      last_NFA            // Link to previous definition Name
 155+ 6CFB             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6CFB CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6CFE             >
 155+ 6CFE             >
 155+ 6CFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6CFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6CFE             >
 155+ 6CFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6CFE 0C          >                db      12
 156+ 6CFF                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 156+ 6CFF             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 156+ 6CFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6CFF             >
 156+ 6CFF             >                // dummy db directives used to calculate length of namec
 156+ 6CFF 57 41 52 4E >                db      "WARNING"
 156+ 6D03 49 4E 47    >
 156+ 6D06             >len_NFA         defl    $ - temp_NFA
 156+ 6D06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6CFF             >
 156+ 6CFF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6D00 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 156+ 6D04 49 4E 47    >
 156+ 6D07             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6D06 C7          >                db      {b $} | END_BIT     // msb as name end
 156+ 6D07             >
 156+ 6D07 F3 6C       >                dw      last_NFA            // Link to previous definition Name
 156+ 6D09             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6D09 CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6D0C             >
 156+ 6D0C             >
 156+ 6D0C             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6D0C             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6D0C             >
 156+ 6D0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6D0C 0E          >                db      14
 157+ 6D0D                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 157+ 6D0D             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 157+ 6D0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6D0D             >
 157+ 6D0D             >                // dummy db directives used to calculate length of namec
 157+ 6D0D 46 45 4E 43 >                db      "FENCE"
 157+ 6D11 45          >
 157+ 6D12             >len_NFA         defl    $ - temp_NFA
 157+ 6D12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6D0D             >
 157+ 6D0D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6D0E 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 157+ 6D12 45          >
 157+ 6D13             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6D12 C5          >                db      {b $} | END_BIT     // msb as name end
 157+ 6D13             >
 157+ 6D13 FF 6C       >                dw      last_NFA            // Link to previous definition Name
 157+ 6D15             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6D15 CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6D18             >
 157+ 6D18             >
 157+ 6D18             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6D18             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6D18             >
 157+ 6D18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6D18 10          >                db      16
 158+ 6D19                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 158+ 6D19             >                New_Def  DP, "DP", User_Ptr, is_normal
 158+ 6D19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6D19             >
 158+ 6D19             >                // dummy db directives used to calculate length of namec
 158+ 6D19 44 50       >                db      "DP"
 158+ 6D1B             >len_NFA         defl    $ - temp_NFA
 158+ 6D1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6D19             >
 158+ 6D19 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6D1A 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 158+ 6D1C             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6D1B D0          >                db      {b $} | END_BIT     // msb as name end
 158+ 6D1C             >
 158+ 6D1C 0D 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6D1E             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6D1E CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6D21             >
 158+ 6D21             >
 158+ 6D21             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6D21             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6D21             >
 158+ 6D21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6D21 12          >                db      18
 159+ 6D22                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 159+ 6D22             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 159+ 6D22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6D22             >
 159+ 6D22             >                // dummy db directives used to calculate length of namec
 159+ 6D22 56 4F 43 2D >                db      "VOC-LINK"
 159+ 6D26 4C 49 4E 4B >
 159+ 6D2A             >len_NFA         defl    $ - temp_NFA
 159+ 6D2A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6D22             >
 159+ 6D22 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6D23 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 159+ 6D27 4C 49 4E 4B >
 159+ 6D2B             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6D2A CB          >                db      {b $} | END_BIT     // msb as name end
 159+ 6D2B             >
 159+ 6D2B 19 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6D2D             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6D2D CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6D30             >
 159+ 6D30             >
 159+ 6D30             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6D30             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6D30             >
 159+ 6D30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6D30 14          >                db      20
 160+ 6D31                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 160+ 6D31             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 160+ 6D31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6D31             >
 160+ 6D31             >                // dummy db directives used to calculate length of namec
 160+ 6D31 46 49 52 53 >                db      "FIRST"
 160+ 6D35 54          >
 160+ 6D36             >len_NFA         defl    $ - temp_NFA
 160+ 6D36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6D31             >
 160+ 6D31 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6D32 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 160+ 6D36 54          >
 160+ 6D37             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6D36 D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6D37             >
 160+ 6D37 22 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6D39             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6D39 CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6D3C             >
 160+ 6D3C             >
 160+ 6D3C             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6D3C             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6D3C             >
 160+ 6D3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6D3C 16          >                db      22
 161+ 6D3D                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 161+ 6D3D             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 161+ 6D3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6D3D             >
 161+ 6D3D             >                // dummy db directives used to calculate length of namec
 161+ 6D3D 4C 49 4D 49 >                db      "LIMIT"
 161+ 6D41 54          >
 161+ 6D42             >len_NFA         defl    $ - temp_NFA
 161+ 6D42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6D3D             >
 161+ 6D3D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6D3E 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 161+ 6D42 54          >
 161+ 6D43             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6D42 D4          >                db      {b $} | END_BIT     // msb as name end
 161+ 6D43             >
 161+ 6D43 31 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6D45             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6D45 CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6D48             >
 161+ 6D48             >
 161+ 6D48             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6D48             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6D48             >
 161+ 6D48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6D48 18          >                db      24
 162+ 6D49                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 162+ 6D49             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 162+ 6D49             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6D49             >
 162+ 6D49             >                // dummy db directives used to calculate length of namec
 162+ 6D49 45 58 50    >                db      "EXP"
 162+ 6D4C             >len_NFA         defl    $ - temp_NFA
 162+ 6D4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6D49             >
 162+ 6D49 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6D4A 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 162+ 6D4D             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6D4C D0          >                db      {b $} | END_BIT     // msb as name end
 162+ 6D4D             >
 162+ 6D4D 3D 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6D4F             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6D4F CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6D52             >
 162+ 6D52             >
 162+ 6D52             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6D52             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6D52             >
 162+ 6D52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6D52 1A          >                db      26
 163+ 6D53                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 163+ 6D53             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 163+ 6D53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6D53             >
 163+ 6D53             >                // dummy db directives used to calculate length of namec
 163+ 6D53 4E 4D 4F 44 >                db      "NMODE"
 163+ 6D57 45          >
 163+ 6D58             >len_NFA         defl    $ - temp_NFA
 163+ 6D58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6D53             >
 163+ 6D53 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6D54 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 163+ 6D58 45          >
 163+ 6D59             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6D58 C5          >                db      {b $} | END_BIT     // msb as name end
 163+ 6D59             >
 163+ 6D59 49 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6D5B             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6D5B CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6D5E             >
 163+ 6D5E             >
 163+ 6D5E             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6D5E             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6D5E             >
 163+ 6D5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6D5E 1C          >                db      28
 164+ 6D5F                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 164+ 6D5F             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 164+ 6D5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6D5F             >
 164+ 6D5F             >                // dummy db directives used to calculate length of namec
 164+ 6D5F 42 4C 4B    >                db      "BLK"
 164+ 6D62             >len_NFA         defl    $ - temp_NFA
 164+ 6D62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6D5F             >
 164+ 6D5F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6D60 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 164+ 6D63             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6D62 CB          >                db      {b $} | END_BIT     // msb as name end
 164+ 6D63             >
 164+ 6D63 53 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6D65             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6D65 CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6D68             >
 164+ 6D68             >
 164+ 6D68             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6D68             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6D68             >
 164+ 6D68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6D68 1E          >                db      30
 165+ 6D69                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 165+ 6D69             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 165+ 6D69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6D69             >
 165+ 6D69             >                // dummy db directives used to calculate length of namec
 165+ 6D69 3E 49 4E    >                db      ">IN"
 165+ 6D6C             >len_NFA         defl    $ - temp_NFA
 165+ 6D6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6D69             >
 165+ 6D69 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6D6A 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 165+ 6D6D             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6D6C CE          >                db      {b $} | END_BIT     // msb as name end
 165+ 6D6D             >
 165+ 6D6D 5F 6D       >                dw      last_NFA            // Link to previous definition Name
 165+ 6D6F             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6D6F CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6D72             >
 165+ 6D72             >
 165+ 6D72             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6D72             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6D72             >
 165+ 6D72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6D72 20          >                db      32
 166+ 6D73                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 166+ 6D73             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 166+ 6D73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6D73             >
 166+ 6D73             >                // dummy db directives used to calculate length of namec
 166+ 6D73 4F 55 54    >                db      "OUT"
 166+ 6D76             >len_NFA         defl    $ - temp_NFA
 166+ 6D76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6D73             >
 166+ 6D73 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6D74 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 166+ 6D77             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6D76 D4          >                db      {b $} | END_BIT     // msb as name end
 166+ 6D77             >
 166+ 6D77 69 6D       >                dw      last_NFA            // Link to previous definition Name
 166+ 6D79             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6D79 CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6D7C             >
 166+ 6D7C             >
 166+ 6D7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6D7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6D7C             >
 166+ 6D7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6D7C 22          >                db      34
 167+ 6D7D                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 167+ 6D7D             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 167+ 6D7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6D7D             >
 167+ 6D7D             >                // dummy db directives used to calculate length of namec
 167+ 6D7D 53 43 52    >                db      "SCR"
 167+ 6D80             >len_NFA         defl    $ - temp_NFA
 167+ 6D80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6D7D             >
 167+ 6D7D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6D7E 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 167+ 6D81             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6D80 D2          >                db      {b $} | END_BIT     // msb as name end
 167+ 6D81             >
 167+ 6D81 73 6D       >                dw      last_NFA            // Link to previous definition Name
 167+ 6D83             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6D83 CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6D86             >
 167+ 6D86             >
 167+ 6D86             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6D86             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6D86             >
 167+ 6D86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6D86 24          >                db      36
 168+ 6D87                              User_Def OFFSET     , "OFFSET"    , 38 //
 168+ 6D87             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 168+ 6D87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6D87             >
 168+ 6D87             >                // dummy db directives used to calculate length of namec
 168+ 6D87 4F 46 46 53 >                db      "OFFSET"
 168+ 6D8B 45 54       >
 168+ 6D8D             >len_NFA         defl    $ - temp_NFA
 168+ 6D8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6D87             >
 168+ 6D87 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6D88 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 168+ 6D8C 45 54       >
 168+ 6D8E             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6D8D D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6D8E             >
 168+ 6D8E 7D 6D       >                dw      last_NFA            // Link to previous definition Name
 168+ 6D90             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6D90 CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6D93             >
 168+ 6D93             >
 168+ 6D93             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6D93             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6D93             >
 168+ 6D93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6D93 26          >                db      38
 169+ 6D94                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 169+ 6D94             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 169+ 6D94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6D94             >
 169+ 6D94             >                // dummy db directives used to calculate length of namec
 169+ 6D94 43 4F 4E 54 >                db      "CONTEXT"
 169+ 6D98 45 58 54    >
 169+ 6D9B             >len_NFA         defl    $ - temp_NFA
 169+ 6D9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6D94             >
 169+ 6D94 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6D95 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 169+ 6D99 45 58 54    >
 169+ 6D9C             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6D9B D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6D9C             >
 169+ 6D9C 87 6D       >                dw      last_NFA            // Link to previous definition Name
 169+ 6D9E             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6D9E CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6DA1             >
 169+ 6DA1             >
 169+ 6DA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6DA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6DA1             >
 169+ 6DA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6DA1 28          >                db      40
 170+ 6DA2                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 170+ 6DA2             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 170+ 6DA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6DA2             >
 170+ 6DA2             >                // dummy db directives used to calculate length of namec
 170+ 6DA2 43 55 52 52 >                db      "CURRENT"
 170+ 6DA6 45 4E 54    >
 170+ 6DA9             >len_NFA         defl    $ - temp_NFA
 170+ 6DA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6DA2             >
 170+ 6DA2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6DA3 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 170+ 6DA7 45 4E 54    >
 170+ 6DAA             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6DA9 D4          >                db      {b $} | END_BIT     // msb as name end
 170+ 6DAA             >
 170+ 6DAA 94 6D       >                dw      last_NFA            // Link to previous definition Name
 170+ 6DAC             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6DAC CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6DAF             >
 170+ 6DAF             >
 170+ 6DAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6DAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6DAF             >
 170+ 6DAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6DAF 2A          >                db      42
 171+ 6DB0                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 171+ 6DB0             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 171+ 6DB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6DB0             >
 171+ 6DB0             >                // dummy db directives used to calculate length of namec
 171+ 6DB0 53 54 41 54 >                db      "STATE"
 171+ 6DB4 45          >
 171+ 6DB5             >len_NFA         defl    $ - temp_NFA
 171+ 6DB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6DB0             >
 171+ 6DB0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6DB1 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 171+ 6DB5 45          >
 171+ 6DB6             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6DB5 C5          >                db      {b $} | END_BIT     // msb as name end
 171+ 6DB6             >
 171+ 6DB6 A2 6D       >                dw      last_NFA            // Link to previous definition Name
 171+ 6DB8             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6DB8 CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6DBB             >
 171+ 6DBB             >
 171+ 6DBB             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6DBB             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6DBB             >
 171+ 6DBB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6DBB 2C          >                db      44
 172+ 6DBC                              User_Def BASE       , "BASE"      , 46 //
 172+ 6DBC             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 172+ 6DBC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6DBC             >
 172+ 6DBC             >                // dummy db directives used to calculate length of namec
 172+ 6DBC 42 41 53 45 >                db      "BASE"
 172+ 6DC0             >len_NFA         defl    $ - temp_NFA
 172+ 6DC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6DBC             >
 172+ 6DBC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6DBD 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 172+ 6DC1             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6DC0 C5          >                db      {b $} | END_BIT     // msb as name end
 172+ 6DC1             >
 172+ 6DC1 B0 6D       >                dw      last_NFA            // Link to previous definition Name
 172+ 6DC3             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6DC3 CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6DC6             >
 172+ 6DC6             >
 172+ 6DC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6DC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6DC6             >
 172+ 6DC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6DC6 2E          >                db      46
 173+ 6DC7                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 173+ 6DC7             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 173+ 6DC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6DC7             >
 173+ 6DC7             >                // dummy db directives used to calculate length of namec
 173+ 6DC7 44 50 4C    >                db      "DPL"
 173+ 6DCA             >len_NFA         defl    $ - temp_NFA
 173+ 6DCA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6DC7             >
 173+ 6DC7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6DC8 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 173+ 6DCB             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6DCA CC          >                db      {b $} | END_BIT     // msb as name end
 173+ 6DCB             >
 173+ 6DCB BC 6D       >                dw      last_NFA            // Link to previous definition Name
 173+ 6DCD             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6DCD CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6DD0             >
 173+ 6DD0             >
 173+ 6DD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6DD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6DD0             >
 173+ 6DD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6DD0 30          >                db      48
 174+ 6DD1                              User_Def FLD        , "FLD"       , 50 // output field width
 174+ 6DD1             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 174+ 6DD1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6DD1             >
 174+ 6DD1             >                // dummy db directives used to calculate length of namec
 174+ 6DD1 46 4C 44    >                db      "FLD"
 174+ 6DD4             >len_NFA         defl    $ - temp_NFA
 174+ 6DD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6DD1             >
 174+ 6DD1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6DD2 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 174+ 6DD5             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6DD4 C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6DD5             >
 174+ 6DD5 C7 6D       >                dw      last_NFA            // Link to previous definition Name
 174+ 6DD7             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6DD7 CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6DDA             >
 174+ 6DDA             >
 174+ 6DDA             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6DDA             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6DDA             >
 174+ 6DDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6DDA 32          >                db      50
 175+ 6DDB                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 175+ 6DDB             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 175+ 6DDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6DDB             >
 175+ 6DDB             >                // dummy db directives used to calculate length of namec
 175+ 6DDB 43 53 50    >                db      "CSP"
 175+ 6DDE             >len_NFA         defl    $ - temp_NFA
 175+ 6DDE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6DDB             >
 175+ 6DDB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6DDC 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 175+ 6DDF             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6DDE D0          >                db      {b $} | END_BIT     // msb as name end
 175+ 6DDF             >
 175+ 6DDF D1 6D       >                dw      last_NFA            // Link to previous definition Name
 175+ 6DE1             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6DE1 CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6DE4             >
 175+ 6DE4             >
 175+ 6DE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6DE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6DE4             >
 175+ 6DE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6DE4 34          >                db      52
 176+ 6DE5                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 176+ 6DE5             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 176+ 6DE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6DE5             >
 176+ 6DE5             >                // dummy db directives used to calculate length of namec
 176+ 6DE5 52 23       >                db      "R#"
 176+ 6DE7             >len_NFA         defl    $ - temp_NFA
 176+ 6DE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6DE5             >
 176+ 6DE5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6DE6 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 176+ 6DE8             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6DE7 A3          >                db      {b $} | END_BIT     // msb as name end
 176+ 6DE8             >
 176+ 6DE8 DB 6D       >                dw      last_NFA            // Link to previous definition Name
 176+ 6DEA             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6DEA CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6DED             >
 176+ 6DED             >
 176+ 6DED             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6DED             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6DED             >
 176+ 6DED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6DED 36          >                db      54
 177+ 6DEE                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 177+ 6DEE             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 177+ 6DEE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6DEE             >
 177+ 6DEE             >                // dummy db directives used to calculate length of namec
 177+ 6DEE 48 4C 44    >                db      "HLD"
 177+ 6DF1             >len_NFA         defl    $ - temp_NFA
 177+ 6DF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6DEE             >
 177+ 6DEE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6DEF 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 177+ 6DF2             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6DF1 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ 6DF2             >
 177+ 6DF2 E5 6D       >                dw      last_NFA            // Link to previous definition Name
 177+ 6DF4             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6DF4 CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6DF7             >
 177+ 6DF7             >
 177+ 6DF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6DF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6DF7             >
 177+ 6DF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6DF7 38          >                db      56
 178+ 6DF8                              User_Def USE        , "USE"       , 58 // address of last used block
 178+ 6DF8             >                New_Def  USE, "USE", User_Ptr, is_normal
 178+ 6DF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6DF8             >
 178+ 6DF8             >                // dummy db directives used to calculate length of namec
 178+ 6DF8 55 53 45    >                db      "USE"
 178+ 6DFB             >len_NFA         defl    $ - temp_NFA
 178+ 6DFB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6DF8             >
 178+ 6DF8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6DF9 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 178+ 6DFC             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6DFB C5          >                db      {b $} | END_BIT     // msb as name end
 178+ 6DFC             >
 178+ 6DFC EE 6D       >                dw      last_NFA            // Link to previous definition Name
 178+ 6DFE             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6DFE CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6E01             >
 178+ 6E01             >
 178+ 6E01             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6E01             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6E01             >
 178+ 6E01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6E01 3A          >                db      58
 179+ 6E02                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 179+ 6E02             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 179+ 6E02             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6E02             >
 179+ 6E02             >                // dummy db directives used to calculate length of namec
 179+ 6E02 50 52 45 56 >                db      "PREV"
 179+ 6E06             >len_NFA         defl    $ - temp_NFA
 179+ 6E06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6E02             >
 179+ 6E02 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6E03 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 179+ 6E07             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6E06 D6          >                db      {b $} | END_BIT     // msb as name end
 179+ 6E07             >
 179+ 6E07 F8 6D       >                dw      last_NFA            // Link to previous definition Name
 179+ 6E09             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6E09 CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6E0C             >
 179+ 6E0C             >
 179+ 6E0C             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6E0C             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6E0C             >
 179+ 6E0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6E0C 3C          >                db      60
 180+ 6E0D                              User_Def LP         , "LP"        , 62 // line printer (not used)
 180+ 6E0D             >                New_Def  LP, "LP", User_Ptr, is_normal
 180+ 6E0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6E0D             >
 180+ 6E0D             >                // dummy db directives used to calculate length of namec
 180+ 6E0D 4C 50       >                db      "LP"
 180+ 6E0F             >len_NFA         defl    $ - temp_NFA
 180+ 6E0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6E0D             >
 180+ 6E0D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6E0E 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 180+ 6E10             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6E0F D0          >                db      {b $} | END_BIT     // msb as name end
 180+ 6E10             >
 180+ 6E10 02 6E       >                dw      last_NFA            // Link to previous definition Name
 180+ 6E12             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6E12 CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6E15             >
 180+ 6E15             >
 180+ 6E15             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6E15             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6E15             >
 180+ 6E15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6E15 3E          >                db      62
 181+ 6E16                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 181+ 6E16             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 181+ 6E16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6E16             >
 181+ 6E16             >                // dummy db directives used to calculate length of namec
 181+ 6E16 50 4C 41 43 >                db      "PLACE"
 181+ 6E1A 45          >
 181+ 6E1B             >len_NFA         defl    $ - temp_NFA
 181+ 6E1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6E16             >
 181+ 6E16 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6E17 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 181+ 6E1B 45          >
 181+ 6E1C             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6E1B C5          >                db      {b $} | END_BIT     // msb as name end
 181+ 6E1C             >
 181+ 6E1C 0D 6E       >                dw      last_NFA            // Link to previous definition Name
 181+ 6E1E             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6E1E CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6E21             >
 181+ 6E21             >
 181+ 6E21             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6E21             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6E21             >
 181+ 6E21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6E21 40          >                db      64
 182+ 6E22                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 182+ 6E22             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 182+ 6E22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6E22             >
 182+ 6E22             >                // dummy db directives used to calculate length of namec
 182+ 6E22 53 4F 55 52 >                db      "SOURCE-ID"
 182+ 6E26 43 45 2D 49 >
 182+ 6E2A 44          >
 182+ 6E2B             >len_NFA         defl    $ - temp_NFA
 182+ 6E2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6E22             >
 182+ 6E22 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6E23 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 182+ 6E27 43 45 2D 49 >
 182+ 6E2B 44          >
 182+ 6E2C             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6E2B C4          >                db      {b $} | END_BIT     // msb as name end
 182+ 6E2C             >
 182+ 6E2C 16 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6E2E             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6E2E CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6E31             >
 182+ 6E31             >
 182+ 6E31             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6E31             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6E31             >
 182+ 6E31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6E31 42          >                db      66
 183+ 6E32                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 183+ 6E32             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 183+ 6E32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6E32             >
 183+ 6E32             >                // dummy db directives used to calculate length of namec
 183+ 6E32 53 50 41 4E >                db      "SPAN"
 183+ 6E36             >len_NFA         defl    $ - temp_NFA
 183+ 6E36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6E32             >
 183+ 6E32 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6E33 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 183+ 6E37             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6E36 CE          >                db      {b $} | END_BIT     // msb as name end
 183+ 6E37             >
 183+ 6E37 22 6E       >                dw      last_NFA            // Link to previous definition Name
 183+ 6E39             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6E39 CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6E3C             >
 183+ 6E3C             >
 183+ 6E3C             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6E3C             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6E3C             >
 183+ 6E3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6E3C 44          >                db      68
 184+ 6E3D                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 184+ 6E3D             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 184+ 6E3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6E3D             >
 184+ 6E3D             >                // dummy db directives used to calculate length of namec
 184+ 6E3D 48 41 4E 44 >                db      "HANDLER"
 184+ 6E41 4C 45 52    >
 184+ 6E44             >len_NFA         defl    $ - temp_NFA
 184+ 6E44             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6E3D             >
 184+ 6E3D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6E3E 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 184+ 6E42 4C 45 52    >
 184+ 6E45             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6E44 D2          >                db      {b $} | END_BIT     // msb as name end
 184+ 6E45             >
 184+ 6E45 32 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6E47             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6E47 CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6E4A             >
 184+ 6E4A             >
 184+ 6E4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6E4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6E4A             >
 184+ 6E4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6E4A 46          >                db      70
 185+ 6E4B                              User_Def HP         , "HP"        , 72 // heap-pointer address
 185+ 6E4B             >                New_Def  HP, "HP", User_Ptr, is_normal
 185+ 6E4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ 6E4B             >
 185+ 6E4B             >                // dummy db directives used to calculate length of namec
 185+ 6E4B 48 50       >                db      "HP"
 185+ 6E4D             >len_NFA         defl    $ - temp_NFA
 185+ 6E4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ 6E4B             >
 185+ 6E4B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ 6E4C 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 185+ 6E4E             >                org     $-1                 // alter last byte of Name just above to set
 185+ 6E4D D0          >                db      {b $} | END_BIT     // msb as name end
 185+ 6E4E             >
 185+ 6E4E 3D 6E       >                dw      last_NFA            // Link to previous definition Name
 185+ 6E50             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6E50 CD 42 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6E53             >
 185+ 6E53             >
 185+ 6E53             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6E53             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6E53             >
 185+ 6E53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6E53 48          >                db      72
 186+ 6E54
 187+ 6E54              //  ______________________________________________________________________
 188+ 6E54              //
 189+ 6E54              // here         -- a
 190+ 6E54                              Colon_Def HERE, "HERE", is_normal
 190+ 6E54             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 190+ 6E54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 6E54             >
 190+ 6E54             >                // dummy db directives used to calculate length of namec
 190+ 6E54 48 45 52 45 >                db      "HERE"
 190+ 6E58             >len_NFA         defl    $ - temp_NFA
 190+ 6E58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 6E54             >
 190+ 6E54 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 6E55 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 190+ 6E59             >                org     $-1                 // alter last byte of Name just above to set
 190+ 6E58 C5          >                db      {b $} | END_BIT     // msb as name end
 190+ 6E59             >
 190+ 6E59 4B 6E       >                dw      last_NFA            // Link to previous definition Name
 190+ 6E5B             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 6E5B CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 190+ 6E5E             >
 190+ 6E5E             >
 190+ 6E5E             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 6E5E             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 6E5E             >
 190+ 6E5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 6E5E 1E 6D 03 6B                  dw      DP, FETCH               // dp @
 192+ 6E62 3F 69                        dw      EXIT                    // ;
 193+ 6E64
 194+ 6E64              //  ______________________________________________________________________
 195+ 6E64              //
 196+ 6E64              // allot        n --
 197+ 6E64                              Colon_Def ALLOT, "ALLOT", is_normal
 197+ 6E64             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 197+ 6E64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 6E64             >
 197+ 6E64             >                // dummy db directives used to calculate length of namec
 197+ 6E64 41 4C 4C 4F >                db      "ALLOT"
 197+ 6E68 54          >
 197+ 6E69             >len_NFA         defl    $ - temp_NFA
 197+ 6E69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 6E64             >
 197+ 6E64 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 6E65 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 197+ 6E69 54          >
 197+ 6E6A             >                org     $-1                 // alter last byte of Name just above to set
 197+ 6E69 D4          >                db      {b $} | END_BIT     // msb as name end
 197+ 6E6A             >
 197+ 6E6A 54 6E       >                dw      last_NFA            // Link to previous definition Name
 197+ 6E6C             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 6E6C CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 6E6F             >
 197+ 6E6F             >
 197+ 6E6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 6E6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 6E6F             >
 197+ 6E6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 6E6F 1E 6D E4 6A                  dw      DP,  PLUSSTORE          // dp +!
 199+ 6E73 3F 69                        dw      EXIT                    // ;
 200+ 6E75
 201+ 6E75              //  ______________________________________________________________________
 202+ 6E75              //
 203+ 6E75              // comma        n --
 204+ 6E75                              Colon_Def COMMA, ",", is_normal
 204+ 6E75             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 204+ 6E75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204+ 6E75             >
 204+ 6E75             >                // dummy db directives used to calculate length of namec
 204+ 6E75 2C          >                db      ","
 204+ 6E76             >len_NFA         defl    $ - temp_NFA
 204+ 6E76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204+ 6E75             >
 204+ 6E75 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204+ 6E76 2C          >                db      ","               // name string in 7-bit ascii, but
 204+ 6E77             >                org     $-1                 // alter last byte of Name just above to set
 204+ 6E76 AC          >                db      {b $} | END_BIT     // msb as name end
 204+ 6E77             >
 204+ 6E77 64 6E       >                dw      last_NFA            // Link to previous definition Name
 204+ 6E79             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 204+ 6E79 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 204+ 6E7C             >
 204+ 6E7C             >
 204+ 6E7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 204+ 6E7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 204+ 6E7C             >
 204+ 6E7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205+ 6E7C 5B 6E 0E 6B                  dw      HERE, STORE             // here !
 206+ 6E80 63 6C 6C 6E                  dw      TWO, ALLOT              // 2 allot
 207+ 6E84 3F 69                        dw      EXIT                    // ;
 208+ 6E86
 209+ 6E86              //  ______________________________________________________________________
 210+ 6E86              //
 211+ 6E86              // ccomma       c --
 212+ 6E86                              Colon_Def CCOMMA, "C,", is_normal
 212+ 6E86             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 212+ 6E86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 6E86             >
 212+ 6E86             >                // dummy db directives used to calculate length of namec
 212+ 6E86 43 2C       >                db      "C,"
 212+ 6E88             >len_NFA         defl    $ - temp_NFA
 212+ 6E88             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 6E86             >
 212+ 6E86 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 6E87 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 212+ 6E89             >                org     $-1                 // alter last byte of Name just above to set
 212+ 6E88 AC          >                db      {b $} | END_BIT     // msb as name end
 212+ 6E89             >
 212+ 6E89 75 6E       >                dw      last_NFA            // Link to previous definition Name
 212+ 6E8B             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 6E8B CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 212+ 6E8E             >
 212+ 6E8E             >
 212+ 6E8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 6E8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 6E8E             >
 212+ 6E8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 6E8E 5B 6E 26 6B                  dw      HERE, CSTORE            // here c!
 214+ 6E92 5A 6C 6C 6E                  dw      ONE, ALLOT              // 1 allot
 215+ 6E96 3F 69                        dw      EXIT                    // ;
 216+ 6E98
 217+ 6E98              //  ______________________________________________________________________
 218+ 6E98              //
 219+ 6E98              // s>d          n -- d
 220+ 6E98              // converts a single precision integer in a double precision
 221+ 6E98                              New_Def S_TO_D, "S>D", is_code, is_normal
 221+ 6E98             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 221+ 6E98             >
 221+ 6E98             >                // dummy db directives used to calculate length of namec
 221+ 6E98 53 3E 44    >                db      "S>D"
 221+ 6E9B             >len_NFA         defl    $ - temp_NFA
 221+ 6E9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 221+ 6E98             >
 221+ 6E98 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 221+ 6E99 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 221+ 6E9C             >                org     $-1                 // alter last byte of Name just above to set
 221+ 6E9B C4          >                db      {b $} | END_BIT     // msb as name end
 221+ 6E9C             >
 221+ 6E9C 86 6E       >                dw      last_NFA            // Link to previous definition Name
 221+ 6E9E             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 221+ 6E9E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 221+ 6E9E ~           >
 221+ 6E9E ~           >
 221+ 6E9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 221+ 6E9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 221+ 6E9E             >
 221+ 6E9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 222+ 6E9E D1                           pop     de
 223+ 6E9F 21 00 00                     ld      hl, 0
 224+ 6EA2 7A                           ld      a, d
 225+ 6EA3 E6 80                        and     $80
 226+ 6EA5 28 01                        jr      z, S_to_D_Skip
 227+ 6EA7 2B                           dec     hl                  // $FFFF
 228+ 6EA8              S_to_D_Skip:
 229+ 6EA8 D5                           push    de
 230+ 6EA9 E5                           push    hl
 231+ 6EAA                              next
 231+ 6EAA DD E9       >                jp      (ix)
 232+ 6EAC
 233+ 6EAC              //  ______________________________________________________________________
 234+ 6EAC              //
 235+ 6EAC              // -            n1 n2 -- n3
 236+ 6EAC              // subtraction
 237+ 6EAC                              New_Def SUBTRACT, "-", is_code, is_normal
 237+ 6EAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 237+ 6EAC             >
 237+ 6EAC             >                // dummy db directives used to calculate length of namec
 237+ 6EAC 2D          >                db      "-"
 237+ 6EAD             >len_NFA         defl    $ - temp_NFA
 237+ 6EAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 237+ 6EAC             >
 237+ 6EAC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 237+ 6EAD 2D          >                db      "-"               // name string in 7-bit ascii, but
 237+ 6EAE             >                org     $-1                 // alter last byte of Name just above to set
 237+ 6EAD AD          >                db      {b $} | END_BIT     // msb as name end
 237+ 6EAE             >
 237+ 6EAE 98 6E       >                dw      last_NFA            // Link to previous definition Name
 237+ 6EB0             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 237+ 6EB0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 237+ 6EB0 ~           >
 237+ 6EB0 ~           >
 237+ 6EB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 237+ 6EB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 237+ 6EB0             >
 237+ 6EB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 238+ 6EB0 D1                           pop     de
 239+ 6EB1 E1                           pop     hl
 240+ 6EB2 A7                           and     a
 241+ 6EB3 ED 52                        sbc     hl, de
 242+ 6EB5
 243+ 6EB5                              psh1
 243+ 6EB5 E5          >                push    hl
 243+ 6EB6 DD E9       >                jp      (ix)
 244+ 6EB8
 245+ 6EB8              //  ______________________________________________________________________
 246+ 6EB8              //
 247+ 6EB8              // =            n1 n2 -- n3
 248+ 6EB8              // equals
 249+ 6EB8                              Colon_Def EQUALS, "=", is_normal
 249+ 6EB8             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 249+ 6EB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 6EB8             >
 249+ 6EB8             >                // dummy db directives used to calculate length of namec
 249+ 6EB8 3D          >                db      "="
 249+ 6EB9             >len_NFA         defl    $ - temp_NFA
 249+ 6EB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 6EB8             >
 249+ 6EB8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 6EB9 3D          >                db      "="               // name string in 7-bit ascii, but
 249+ 6EBA             >                org     $-1                 // alter last byte of Name just above to set
 249+ 6EB9 BD          >                db      {b $} | END_BIT     // msb as name end
 249+ 6EBA             >
 249+ 6EBA AC 6E       >                dw      last_NFA            // Link to previous definition Name
 249+ 6EBC             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 6EBC CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 249+ 6EBF             >
 249+ 6EBF             >
 249+ 6EBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 6EBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 6EBF             >
 249+ 6EBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 250+ 6EBF B0 6E 7C 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 251+ 6EC3 3F 69                        dw      EXIT                    // ;
 252+ 6EC5
 253+ 6EC5              //  ______________________________________________________________________
 254+ 6EC5              //
 255+ 6EC5              // u<           u1 u2 -- u3
 256+ 6EC5              // unsigned less-than
 257+ 6EC5                              New_Def ULESS, "U<", is_code, is_normal
 257+ 6EC5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 257+ 6EC5             >
 257+ 6EC5             >                // dummy db directives used to calculate length of namec
 257+ 6EC5 55 3C       >                db      "U<"
 257+ 6EC7             >len_NFA         defl    $ - temp_NFA
 257+ 6EC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 257+ 6EC5             >
 257+ 6EC5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 257+ 6EC6 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 257+ 6EC8             >                org     $-1                 // alter last byte of Name just above to set
 257+ 6EC7 BC          >                db      {b $} | END_BIT     // msb as name end
 257+ 6EC8             >
 257+ 6EC8 B8 6E       >                dw      last_NFA            // Link to previous definition Name
 257+ 6ECA             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 257+ 6ECA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 257+ 6ECA ~           >
 257+ 6ECA ~           >
 257+ 6ECA             >                endif           ; ok        // for other definitions it "points" the correct handler
 257+ 6ECA             >                // Use of "; ok" to suppress "warning[fwdref]"
 257+ 6ECA             >
 257+ 6ECA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 258+ 6ECA D1                           pop     de
 259+ 6ECB E1                           pop     hl
 260+ 6ECC A7                           and     a
 261+ 6ECD ED 52                        sbc     hl, de
 262+ 6ECF 21 FF FF                     ld      hl, -1
 263+ 6ED2 38 01                        jr      c, ULess_Skip
 264+ 6ED4 23                               inc     hl
 265+ 6ED5              ULess_Skip:
 266+ 6ED5
 267+ 6ED5                              psh1
 267+ 6ED5 E5          >                push    hl
 267+ 6ED6 DD E9       >                jp      (ix)
 268+ 6ED8
 269+ 6ED8              //  ______________________________________________________________________
 270+ 6ED8              //
 271+ 6ED8              // <           n1 n2 -- n3
 272+ 6ED8              // less-than
 273+ 6ED8                              New_Def LESS, "<", is_code, is_normal
 273+ 6ED8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 273+ 6ED8             >
 273+ 6ED8             >                // dummy db directives used to calculate length of namec
 273+ 6ED8 3C          >                db      "<"
 273+ 6ED9             >len_NFA         defl    $ - temp_NFA
 273+ 6ED9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 273+ 6ED8             >
 273+ 6ED8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 273+ 6ED9 3C          >                db      "<"               // name string in 7-bit ascii, but
 273+ 6EDA             >                org     $-1                 // alter last byte of Name just above to set
 273+ 6ED9 BC          >                db      {b $} | END_BIT     // msb as name end
 273+ 6EDA             >
 273+ 6EDA C5 6E       >                dw      last_NFA            // Link to previous definition Name
 273+ 6EDC             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 273+ 6EDC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 273+ 6EDC ~           >
 273+ 6EDC ~           >
 273+ 6EDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 273+ 6EDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 273+ 6EDC             >
 273+ 6EDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 274+ 6EDC D1                           pop     de
 275+ 6EDD E1                           pop     hl
 276+ 6EDE 7C                           ld      a, h
 277+ 6EDF EE 80                        xor     $80
 278+ 6EE1 67                           ld      h, a
 279+ 6EE2 7A                           ld      a, d
 280+ 6EE3 EE 80                        xor     $80
 281+ 6EE5 57                           ld      d, a
 282+ 6EE6              //              and     a
 283+ 6EE6 ED 52                        sbc     hl, de
 284+ 6EE8 ED 62                        sbc     hl, hl
 285+ 6EEA                              psh1
 285+ 6EEA E5          >                push    hl
 285+ 6EEB DD E9       >                jp      (ix)
 286+ 6EED
 287+ 6EED              //  ______________________________________________________________________
 288+ 6EED              //
 289+ 6EED              // >            n1 n2 -- n3
 290+ 6EED              // greater than
 291+ 6EED                              Colon_Def GREATER, ">", is_normal
 291+ 6EED             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 291+ 6EED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ 6EED             >
 291+ 6EED             >                // dummy db directives used to calculate length of namec
 291+ 6EED 3E          >                db      ">"
 291+ 6EEE             >len_NFA         defl    $ - temp_NFA
 291+ 6EEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ 6EED             >
 291+ 6EED 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ 6EEE 3E          >                db      ">"               // name string in 7-bit ascii, but
 291+ 6EEF             >                org     $-1                 // alter last byte of Name just above to set
 291+ 6EEE BE          >                db      {b $} | END_BIT     // msb as name end
 291+ 6EEF             >
 291+ 6EEF D8 6E       >                dw      last_NFA            // Link to previous definition Name
 291+ 6EF1             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 6EF1 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 291+ 6EF4             >
 291+ 6EF4             >
 291+ 6EF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 6EF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 6EF4             >
 291+ 6EF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 6EF4 77 6A DC 6E                  dw      SWAP, LESS              // swap <
 293+ 6EF8 3F 69                        dw      EXIT                    // ;
 294+ 6EFA              //  ______________________________________________________________________
 295+ 6EFA              //
 296+ 6EFA              // min          n1 n2 -- n3
 297+ 6EFA              // minimum between n1 and n2
 298+ 6EFA                              Colon_Def MIN, "MIN" , is_normal
 298+ 6EFA             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 298+ 6EFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 298+ 6EFA             >
 298+ 6EFA             >                // dummy db directives used to calculate length of namec
 298+ 6EFA 4D 49 4E    >                db      "MIN"
 298+ 6EFD             >len_NFA         defl    $ - temp_NFA
 298+ 6EFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 298+ 6EFA             >
 298+ 6EFA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 298+ 6EFB 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 298+ 6EFE             >                org     $-1                 // alter last byte of Name just above to set
 298+ 6EFD CE          >                db      {b $} | END_BIT     // msb as name end
 298+ 6EFE             >
 298+ 6EFE ED 6E       >                dw      last_NFA            // Link to previous definition Name
 298+ 6F00             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 298+ 6F00 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 298+ 6F03             >
 298+ 6F03             >
 298+ 6F03             >                endif           ; ok        // for other definitions it "points" the correct handler
 298+ 6F03             >                // Use of "; ok" to suppress "warning[fwdref]"
 298+ 6F03             >
 298+ 6F03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 299+ 6F03 D7 6A                        dw      TWO_DUP                 // 2dup
 300+ 6F05 F1 6E                        dw      GREATER                 // >
 301+ 6F07 1C 64                        dw      ZBRANCH
 302+ 6F09 04 00                        dw      Min_Skip - $   // if
 303+ 6F0B 77 6A                        dw          SWAP                //      swap
 304+ 6F0D              Min_Skip:                                       // endif
 305+ 6F0D 55 6A                        dw      DROP                    // drop
 306+ 6F0F 3F 69                        dw      EXIT                    // ;
 307+ 6F11
 308+ 6F11              //  ______________________________________________________________________
 309+ 6F11              //
 310+ 6F11              // max          n1 n2 -- n3
 311+ 6F11              // maximum between n1 and n2
 312+ 6F11                              Colon_Def MAX, "MAX", is_normal
 312+ 6F11             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 312+ 6F11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 312+ 6F11             >
 312+ 6F11             >                // dummy db directives used to calculate length of namec
 312+ 6F11 4D 41 58    >                db      "MAX"
 312+ 6F14             >len_NFA         defl    $ - temp_NFA
 312+ 6F14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 312+ 6F11             >
 312+ 6F11 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 312+ 6F12 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 312+ 6F15             >                org     $-1                 // alter last byte of Name just above to set
 312+ 6F14 D8          >                db      {b $} | END_BIT     // msb as name end
 312+ 6F15             >
 312+ 6F15 FA 6E       >                dw      last_NFA            // Link to previous definition Name
 312+ 6F17             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 312+ 6F17 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 312+ 6F1A             >
 312+ 6F1A             >
 312+ 6F1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 312+ 6F1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 312+ 6F1A             >
 312+ 6F1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 313+ 6F1A D7 6A                        dw      TWO_DUP                 // 2dup
 314+ 6F1C DC 6E                        dw      LESS                    // <
 315+ 6F1E 1C 64                        dw      ZBRANCH
 316+ 6F20 04 00                        dw      Max_Skip - $   // if
 317+ 6F22 77 6A                        dw          SWAP                //      swap
 318+ 6F24              Max_Skip:                                       // endif
 319+ 6F24 55 6A                        dw      DROP                    // drop
 320+ 6F26 3F 69                        dw      EXIT                    // ;
 321+ 6F28
 322+ 6F28              //  ______________________________________________________________________
 323+ 6F28              //
 324+ 6F28              // ?dup         n -- 0 | n n
 325+ 6F28              // duplicate if not zero
 326+ 6F28                              New_Def QDUP, "?DUP", is_code, is_normal
 326+ 6F28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 326+ 6F28             >
 326+ 6F28             >                // dummy db directives used to calculate length of namec
 326+ 6F28 3F 44 55 50 >                db      "?DUP"
 326+ 6F2C             >len_NFA         defl    $ - temp_NFA
 326+ 6F2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 326+ 6F28             >
 326+ 6F28 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 326+ 6F29 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 326+ 6F2D             >                org     $-1                 // alter last byte of Name just above to set
 326+ 6F2C D0          >                db      {b $} | END_BIT     // msb as name end
 326+ 6F2D             >
 326+ 6F2D 11 6F       >                dw      last_NFA            // Link to previous definition Name
 326+ 6F2F             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 326+ 6F2F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 326+ 6F2F ~           >
 326+ 6F2F ~           >
 326+ 6F2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 326+ 6F2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 326+ 6F2F             >
 326+ 6F2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 327+ 6F2F              QDup_Ptr:
 328+ 6F2F E1                           pop     hl
 329+ 6F30 7C                           ld      a, h
 330+ 6F31 B5                           or      l
 331+ 6F32 28 01                        jr      z, QDup_Skip
 332+ 6F34 E5                               push    hl
 333+ 6F35              QDup_Skip:
 334+ 6F35                              psh1
 334+ 6F35 E5          >                push    hl
 334+ 6F36 DD E9       >                jp      (ix)
 335+ 6F38
 336+ 6F38              //  ______________________________________________________________________
 337+ 6F38              //
 338+ 6F38              // -dup         n -- 0 | n n
 339+ 6F38              // duplicate if not zero
 340+ 6F38                              New_Def LDUP, "-DUP", is_code, is_normal
 340+ 6F38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 340+ 6F38             >
 340+ 6F38             >                // dummy db directives used to calculate length of namec
 340+ 6F38 2D 44 55 50 >                db      "-DUP"
 340+ 6F3C             >len_NFA         defl    $ - temp_NFA
 340+ 6F3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 340+ 6F38             >
 340+ 6F38 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 340+ 6F39 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 340+ 6F3D             >                org     $-1                 // alter last byte of Name just above to set
 340+ 6F3C D0          >                db      {b $} | END_BIT     // msb as name end
 340+ 6F3D             >
 340+ 6F3D 28 6F       >                dw      last_NFA            // Link to previous definition Name
 340+ 6F3F             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 340+ 6F3F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 340+ 6F3F ~           >
 340+ 6F3F ~           >
 340+ 6F3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 340+ 6F3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 340+ 6F3F             >
 340+ 6F3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 341+ 6F3F C3 2F 6F                     jp      QDup_Ptr
 342+ 6F42
 343+ 6F42              //  ______________________________________________________________________
 344+ 6F42              //
 345+ 6F42              // emit         c --
 346+ 6F42                              Colon_Def EMIT, "EMIT", is_normal
 346+ 6F42             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 346+ 6F42             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 346+ 6F42             >
 346+ 6F42             >                // dummy db directives used to calculate length of namec
 346+ 6F42 45 4D 49 54 >                db      "EMIT"
 346+ 6F46             >len_NFA         defl    $ - temp_NFA
 346+ 6F46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 346+ 6F42             >
 346+ 6F42 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 346+ 6F43 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 346+ 6F47             >                org     $-1                 // alter last byte of Name just above to set
 346+ 6F46 D4          >                db      {b $} | END_BIT     // msb as name end
 346+ 6F47             >
 346+ 6F47 38 6F       >                dw      last_NFA            // Link to previous definition Name
 346+ 6F49             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 346+ 6F49 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 346+ 6F4C             >
 346+ 6F4C             >
 346+ 6F4C             >                endif           ; ok        // for other definitions it "points" the correct handler
 346+ 6F4C             >                // Use of "; ok" to suppress "warning[fwdref]"
 346+ 6F4C             >
 346+ 6F4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 347+ 6F4C 22 66                        dw      C_EMIT                      // (?emit)
 348+ 6F4E 2F 6F                        dw      QDUP                        // ?dup
 349+ 6F50                                                                  // if
 350+ 6F50 1C 64                        dw      ZBRANCH
 351+ 6F52 0A 00                        dw      Emit_Skip - $
 352+ 6F54 E7 65                        dw          EMITC                   //      emitc
 353+ 6F56 5A 6C                        dw          ONE                     //      1
 354+ 6F58 79 6D E4 6A                  dw          OUT, PLUSSTORE        //      out +!
 355+ 6F5C              Emit_Skip:                                          // endif
 356+ 6F5C 3F 69                        dw      EXIT                        // ;
 357+ 6F5E
 358+ 6F5E              //  ______________________________________________________________________
 359+ 6F5E              //
 360+ 6F5E              // space        --
 361+ 6F5E                              Colon_Def SPACE, "SPACE", is_normal
 361+ 6F5E             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 361+ 6F5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 361+ 6F5E             >
 361+ 6F5E             >                // dummy db directives used to calculate length of namec
 361+ 6F5E 53 50 41 43 >                db      "SPACE"
 361+ 6F62 45          >
 361+ 6F63             >len_NFA         defl    $ - temp_NFA
 361+ 6F63             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 361+ 6F5E             >
 361+ 6F5E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 361+ 6F5F 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 361+ 6F63 45          >
 361+ 6F64             >                org     $-1                 // alter last byte of Name just above to set
 361+ 6F63 C5          >                db      {b $} | END_BIT     // msb as name end
 361+ 6F64             >
 361+ 6F64 42 6F       >                dw      last_NFA            // Link to previous definition Name
 361+ 6F66             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 361+ 6F66 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 361+ 6F69             >
 361+ 6F69             >
 361+ 6F69             >                endif           ; ok        // for other definitions it "points" the correct handler
 361+ 6F69             >                // Use of "; ok" to suppress "warning[fwdref]"
 361+ 6F69             >
 361+ 6F69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 362+ 6F69 80 6C 49 6F                  dw      BL, EMIT                // bl emit
 363+ 6F6D 3F 69                        dw      EXIT                    // ;
 364+ 6F6F
 365+ 6F6F              //  ______________________________________________________________________
 366+ 6F6F              //
 367+ 6F6F              // traverse     a n -- a
 368+ 6F6F              // A dictionary entry is structured as follows
 369+ 6F6F              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 370+ 6F6F              //      +1   word name, last character is toggled with $80
 371+ 6F6F              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 372+ 6F6F              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 373+ 6F6F              // PFA: +6+n "is_code", definitions have no PFA. // +5
 374+ 6F6F              //
 375+ 6F6F                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 375+ 6F6F             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 375+ 6F6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 375+ 6F6F             >
 375+ 6F6F             >                // dummy db directives used to calculate length of namec
 375+ 6F6F 54 52 41 56 >                db      "TRAVERSE"
 375+ 6F73 45 52 53 45 >
 375+ 6F77             >len_NFA         defl    $ - temp_NFA
 375+ 6F77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 375+ 6F6F             >
 375+ 6F6F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 375+ 6F70 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 375+ 6F74 45 52 53 45 >
 375+ 6F78             >                org     $-1                 // alter last byte of Name just above to set
 375+ 6F77 C5          >                db      {b $} | END_BIT     // msb as name end
 375+ 6F78             >
 375+ 6F78 5E 6F       >                dw      last_NFA            // Link to previous definition Name
 375+ 6F7A             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 375+ 6F7A CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 375+ 6F7D             >
 375+ 6F7D             >
 375+ 6F7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 375+ 6F7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 375+ 6F7D             >
 375+ 6F7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 376+ 6F7D 77 6A                        dw      SWAP                    // swap
 377+ 6F7F              Traverse_Begin:                                 // begin
 378+ 6F7F 47 6A BA 69                  dw          OVER, PLUS          //      over +
 379+ 6F83 A5 63 7F 00                  dw          LIT, 127            //      127
 380+ 6F87 47 6A 1A 6B                  dw          OVER, CFETCH        //      over @
 381+ 6F8B DC 6E                        dw          LESS                //      <
 382+ 6F8D                                                              // until
 383+ 6F8D 1C 64                        dw      ZBRANCH
 384+ 6F8F F0 FF                        dw      Traverse_Begin - $
 385+ 6F91 5E 6A                        dw      NIP                     //  nip
 386+ 6F93 3F 69                        dw      EXIT                    //  ;
 387+ 6F95
 388+ 6F95              //  ______________________________________________________________________
 389+ 6F95              //
 390+ 6F95              // latest       -- nfa
 391+ 6F95                              Colon_Def LATEST, "LATEST", is_normal
 391+ 6F95             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 391+ 6F95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 391+ 6F95             >
 391+ 6F95             >                // dummy db directives used to calculate length of namec
 391+ 6F95 4C 41 54 45 >                db      "LATEST"
 391+ 6F99 53 54       >
 391+ 6F9B             >len_NFA         defl    $ - temp_NFA
 391+ 6F9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 391+ 6F95             >
 391+ 6F95 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 391+ 6F96 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 391+ 6F9A 53 54       >
 391+ 6F9C             >                org     $-1                 // alter last byte of Name just above to set
 391+ 6F9B D4          >                db      {b $} | END_BIT     // msb as name end
 391+ 6F9C             >
 391+ 6F9C 6F 6F       >                dw      last_NFA            // Link to previous definition Name
 391+ 6F9E             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 391+ 6F9E CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 391+ 6FA1             >
 391+ 6FA1             >
 391+ 6FA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 391+ 6FA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 391+ 6FA1             >
 391+ 6FA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 392+ 6FA1 AC 6D                        dw      CURRENT                 // current
 393+ 6FA3 03 6B 03 6B                  dw      FETCH, FETCH            // @ @
 394+ 6FA7 3F 69                        dw      EXIT                    // ;
 395+ 6FA9
 396+ 6FA9              //  ______________________________________________________________________
 397+ 6FA9              //
 398+ 6FA9              // lfa          pfa -- lfa
 399+ 6FA9                              Colon_Def LFA, "LFA", is_normal
 399+ 6FA9             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 399+ 6FA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 399+ 6FA9             >
 399+ 6FA9             >                // dummy db directives used to calculate length of namec
 399+ 6FA9 4C 46 41    >                db      "LFA"
 399+ 6FAC             >len_NFA         defl    $ - temp_NFA
 399+ 6FAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 399+ 6FA9             >
 399+ 6FA9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 399+ 6FAA 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 399+ 6FAD             >                org     $-1                 // alter last byte of Name just above to set
 399+ 6FAC C1          >                db      {b $} | END_BIT     // msb as name end
 399+ 6FAD             >
 399+ 6FAD 95 6F       >                dw      last_NFA            // Link to previous definition Name
 399+ 6FAF             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 399+ 6FAF CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 399+ 6FB2             >
 399+ 6FB2             >
 399+ 6FB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 399+ 6FB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 399+ 6FB2             >
 399+ 6FB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 400+ 6FB2 A5 63 05 00                  dw      LIT, 5                  // cell- --> 5
 401+ 6FB6 B0 6E                        dw      SUBTRACT                // cell- --> -
 402+ 6FB8 3F 69                        dw      EXIT                    // ;
 403+ 6FBA
 404+ 6FBA              //  ______________________________________________________________________
 405+ 6FBA              //
 406+ 6FBA              // cfa          pfa -- cfa
 407+ 6FBA                              Colon_Def CFA, "CFA", is_normal
 407+ 6FBA             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 407+ 6FBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 407+ 6FBA             >
 407+ 6FBA             >                // dummy db directives used to calculate length of namec
 407+ 6FBA 43 46 41    >                db      "CFA"
 407+ 6FBD             >len_NFA         defl    $ - temp_NFA
 407+ 6FBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 407+ 6FBA             >
 407+ 6FBA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 407+ 6FBB 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 407+ 6FBE             >                org     $-1                 // alter last byte of Name just above to set
 407+ 6FBD C1          >                db      {b $} | END_BIT     // msb as name end
 407+ 6FBE             >
 407+ 6FBE A9 6F       >                dw      last_NFA            // Link to previous definition Name
 407+ 6FC0             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 407+ 6FC0 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 407+ 6FC3             >
 407+ 6FC3             >
 407+ 6FC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 407+ 6FC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 407+ 6FC3             >
 407+ 6FC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 408+ 6FC3              //              dw      CELL_MINUS              // cell-
 409+ 6FC3 6C 6C B0 6E                  dw      THREE, SUBTRACT         // 3 -
 410+ 6FC7 3F 69                        dw      EXIT                    // ;
 411+ 6FC9
 412+ 6FC9              //  ______________________________________________________________________
 413+ 6FC9              //
 414+ 6FC9              // nfa          pfa -- nfa
 415+ 6FC9                              Colon_Def NFA, "NFA", is_normal
 415+ 6FC9             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 415+ 6FC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 415+ 6FC9             >
 415+ 6FC9             >                // dummy db directives used to calculate length of namec
 415+ 6FC9 4E 46 41    >                db      "NFA"
 415+ 6FCC             >len_NFA         defl    $ - temp_NFA
 415+ 6FCC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 415+ 6FC9             >
 415+ 6FC9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 415+ 6FCA 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 415+ 6FCD             >                org     $-1                 // alter last byte of Name just above to set
 415+ 6FCC C1          >                db      {b $} | END_BIT     // msb as name end
 415+ 6FCD             >
 415+ 6FCD BA 6F       >                dw      last_NFA            // Link to previous definition Name
 415+ 6FCF             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 415+ 6FCF CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 415+ 6FD2             >
 415+ 6FD2             >
 415+ 6FD2             >                endif           ; ok        // for other definitions it "points" the correct handler
 415+ 6FD2             >                // Use of "; ok" to suppress "warning[fwdref]"
 415+ 6FD2             >
 415+ 6FD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 416+ 6FD2 A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 417+ 6FD6 B0 6E                        dw      SUBTRACT                // -
 418+ 6FD8 76 6C                        dw      NEG_ONE                 // -1
 419+ 6FDA 7A 6F                        dw      TRAVERSE                // traverse
 420+ 6FDC 3F 69                        dw      EXIT                    // ;
 421+ 6FDE
 422+ 6FDE              //  ______________________________________________________________________
 423+ 6FDE              //
 424+ 6FDE              // pfa          nfa -- pfa
 425+ 6FDE                              Colon_Def PFA, "PFA", is_normal
 425+ 6FDE             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 425+ 6FDE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 425+ 6FDE             >
 425+ 6FDE             >                // dummy db directives used to calculate length of namec
 425+ 6FDE 50 46 41    >                db      "PFA"
 425+ 6FE1             >len_NFA         defl    $ - temp_NFA
 425+ 6FE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 425+ 6FDE             >
 425+ 6FDE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 425+ 6FDF 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 425+ 6FE2             >                org     $-1                 // alter last byte of Name just above to set
 425+ 6FE1 C1          >                db      {b $} | END_BIT     // msb as name end
 425+ 6FE2             >
 425+ 6FE2 C9 6F       >                dw      last_NFA            // Link to previous definition Name
 425+ 6FE4             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 425+ 6FE4 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 425+ 6FE7             >
 425+ 6FE7             >
 425+ 6FE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 425+ 6FE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 425+ 6FE7             >
 425+ 6FE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 426+ 6FE7 5A 6C                        dw      ONE                     // 1
 427+ 6FE9 7A 6F                        dw      TRAVERSE                // traverse
 428+ 6FEB A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 429+ 6FEF BA 69                        dw      PLUS                    // +
 430+ 6FF1 3F 69                        dw      EXIT                    // ;
 431+ 6FF3
 432+ 6FF3              //  ______________________________________________________________________
 433+ 6FF3              //
 434+ 6FF3              // >body        cfa -- pfa
 435+ 6FF3                              Colon_Def TO_BODY, ">BODY", is_normal
 435+ 6FF3             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 435+ 6FF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 435+ 6FF3             >
 435+ 6FF3             >                // dummy db directives used to calculate length of namec
 435+ 6FF3 3E 42 4F 44 >                db      ">BODY"
 435+ 6FF7 59          >
 435+ 6FF8             >len_NFA         defl    $ - temp_NFA
 435+ 6FF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 435+ 6FF3             >
 435+ 6FF3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 435+ 6FF4 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 435+ 6FF8 59          >
 435+ 6FF9             >                org     $-1                 // alter last byte of Name just above to set
 435+ 6FF8 D9          >                db      {b $} | END_BIT     // msb as name end
 435+ 6FF9             >
 435+ 6FF9 DE 6F       >                dw      last_NFA            // Link to previous definition Name
 435+ 6FFB             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 435+ 6FFB CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 435+ 6FFE             >
 435+ 6FFE             >
 435+ 6FFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 435+ 6FFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 435+ 6FFE             >
 435+ 6FFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 436+ 6FFE 6C 6C BA 69                  dw      THREE, PLUS             // cell+ --> 3 +
 437+ 7002 3F 69                        dw      EXIT                    // ;
 438+ 7004
 439+ 7004              //  ______________________________________________________________________
 440+ 7004              //
 441+ 7004              // <name        cfa -- nfa
 442+ 7004                              Colon_Def TO_NAME, "<NAME", is_normal
 442+ 7004             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 442+ 7004             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ 7004             >
 442+ 7004             >                // dummy db directives used to calculate length of namec
 442+ 7004 3C 4E 41 4D >                db      "<NAME"
 442+ 7008 45          >
 442+ 7009             >len_NFA         defl    $ - temp_NFA
 442+ 7009             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ 7004             >
 442+ 7004 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ 7005 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 442+ 7009 45          >
 442+ 700A             >                org     $-1                 // alter last byte of Name just above to set
 442+ 7009 C5          >                db      {b $} | END_BIT     // msb as name end
 442+ 700A             >
 442+ 700A F3 6F       >                dw      last_NFA            // Link to previous definition Name
 442+ 700C             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 700C CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 442+ 700F             >
 442+ 700F             >
 442+ 700F             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 700F             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 700F             >
 442+ 700F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 700F FB 6F                        dw      TO_BODY                 // >body
 444+ 7011 CF 6F                        dw      NFA                     // nfa
 445+ 7013 3F 69                        dw      EXIT                    // ;
 446+ 7015
 447+ 7015              //  ______________________________________________________________________
 448+ 7015              //
 449+ 7015              // !csp         --
 450+ 7015              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 451+ 7015                              Colon_Def STORE_CSP, "!CSP", is_normal
 451+ 7015             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 451+ 7015             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 451+ 7015             >
 451+ 7015             >                // dummy db directives used to calculate length of namec
 451+ 7015 21 43 53 50 >                db      "!CSP"
 451+ 7019             >len_NFA         defl    $ - temp_NFA
 451+ 7019             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 451+ 7015             >
 451+ 7015 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 451+ 7016 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 451+ 701A             >                org     $-1                 // alter last byte of Name just above to set
 451+ 7019 D0          >                db      {b $} | END_BIT     // msb as name end
 451+ 701A             >
 451+ 701A 04 70       >                dw      last_NFA            // Link to previous definition Name
 451+ 701C             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 451+ 701C CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 451+ 701F             >
 451+ 701F             >
 451+ 701F             >                endif           ; ok        // for other definitions it "points" the correct handler
 451+ 701F             >                // Use of "; ok" to suppress "warning[fwdref]"
 451+ 701F             >
 451+ 701F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 452+ 701F 0F 69                        dw      SPFETCH                 // sp@
 453+ 7021 E1 6D 0E 6B                  dw      CSP, STORE              // csp !
 454+ 7025 3F 69                        dw      EXIT                    // ;
 455+ 7027
 456+ 7027              //  ______________________________________________________________________
 457+ 7027              //
 458+ 7027              // ?error       f n --
 459+ 7027              // rase error n if flag f it true
 460+ 7027                              Colon_Def QERROR, "?ERROR", is_normal
 460+ 7027             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 460+ 7027             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 460+ 7027             >
 460+ 7027             >                // dummy db directives used to calculate length of namec
 460+ 7027 3F 45 52 52 >                db      "?ERROR"
 460+ 702B 4F 52       >
 460+ 702D             >len_NFA         defl    $ - temp_NFA
 460+ 702D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 460+ 7027             >
 460+ 7027 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 460+ 7028 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 460+ 702C 4F 52       >
 460+ 702E             >                org     $-1                 // alter last byte of Name just above to set
 460+ 702D D2          >                db      {b $} | END_BIT     // msb as name end
 460+ 702E             >
 460+ 702E 15 70       >                dw      last_NFA            // Link to previous definition Name
 460+ 7030             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 460+ 7030 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 460+ 7033             >
 460+ 7033             >
 460+ 7033             >                endif           ; ok        // for other definitions it "points" the correct handler
 460+ 7033             >                // Use of "; ok" to suppress "warning[fwdref]"
 460+ 7033             >
 460+ 7033             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 461+ 7033 77 6A                        dw      SWAP                    // swap
 462+ 7035                                                              // if
 463+ 7035 1C 64                        dw      ZBRANCH
 464+ 7037 08 00                        dw      QError_Else - $
 465+ 7039 C4 75                        dw          ERROR               //      error  ( is a forward-ref )
 466+ 703B                                                              // else
 467+ 703B 07 64                        dw      BRANCH
 468+ 703D 04 00                        dw      QError_Endif - $
 469+ 703F              QError_Else:
 470+ 703F 55 6A                        dw          DROP                //      drop
 471+ 7041              QError_Endif:                                   // endif
 472+ 7041 3F 69                        dw      EXIT                    // ;
 473+ 7043
 474+ 7043              //  ______________________________________________________________________
 475+ 7043              //
 476+ 7043              // ?comp       --
 477+ 7043              // raise msg #17 if not compiling
 478+ 7043                              Colon_Def QCOMP, "?COMP", is_normal
 478+ 7043             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 478+ 7043             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7043             >
 478+ 7043             >                // dummy db directives used to calculate length of namec
 478+ 7043 3F 43 4F 4D >                db      "?COMP"
 478+ 7047 50          >
 478+ 7048             >len_NFA         defl    $ - temp_NFA
 478+ 7048             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7043             >
 478+ 7043 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7044 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 478+ 7048 50          >
 478+ 7049             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7048 D0          >                db      {b $} | END_BIT     // msb as name end
 478+ 7049             >
 478+ 7049 27 70       >                dw      last_NFA            // Link to previous definition Name
 478+ 704B             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 704B CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 704E             >
 478+ 704E             >
 478+ 704E             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 704E             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 704E             >
 478+ 704E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 704E B8 6D 03 6B                  dw      STATE, FETCH            // state @
 480+ 7052 7C 69                        dw      ZEQUAL                  // 0=
 481+ 7054 A5 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 482+ 7058 30 70                        dw      QERROR                  // ?error
 483+ 705A 3F 69                        dw      EXIT                    // ;
 484+ 705C
 485+ 705C              //  ______________________________________________________________________
 486+ 705C              //
 487+ 705C              // ?exec       --
 488+ 705C              // raise msg #18 if compiling
 489+ 705C                              Colon_Def QEXEC, "?EXEC", is_normal
 489+ 705C             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 489+ 705C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 489+ 705C             >
 489+ 705C             >                // dummy db directives used to calculate length of namec
 489+ 705C 3F 45 58 45 >                db      "?EXEC"
 489+ 7060 43          >
 489+ 7061             >len_NFA         defl    $ - temp_NFA
 489+ 7061             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 489+ 705C             >
 489+ 705C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 489+ 705D 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 489+ 7061 43          >
 489+ 7062             >                org     $-1                 // alter last byte of Name just above to set
 489+ 7061 C3          >                db      {b $} | END_BIT     // msb as name end
 489+ 7062             >
 489+ 7062 43 70       >                dw      last_NFA            // Link to previous definition Name
 489+ 7064             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 489+ 7064 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 489+ 7067             >
 489+ 7067             >
 489+ 7067             >                endif           ; ok        // for other definitions it "points" the correct handler
 489+ 7067             >                // Use of "; ok" to suppress "warning[fwdref]"
 489+ 7067             >
 489+ 7067             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 490+ 7067 B8 6D 03 6B                  dw      STATE, FETCH            // state @
 491+ 706B A5 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 492+ 706F 30 70                        dw      QERROR                  // ?error
 493+ 7071 3F 69                        dw      EXIT                    // ;
 494+ 7073
 495+ 7073              //  ______________________________________________________________________
 496+ 7073              //
 497+ 7073              // ?pairs       n1 n2 --
 498+ 7073              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 499+ 7073                              Colon_Def QPAIRS, "?PAIRS", is_normal
 499+ 7073             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 499+ 7073             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 499+ 7073             >
 499+ 7073             >                // dummy db directives used to calculate length of namec
 499+ 7073 3F 50 41 49 >                db      "?PAIRS"
 499+ 7077 52 53       >
 499+ 7079             >len_NFA         defl    $ - temp_NFA
 499+ 7079             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 499+ 7073             >
 499+ 7073 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 499+ 7074 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 499+ 7078 52 53       >
 499+ 707A             >                org     $-1                 // alter last byte of Name just above to set
 499+ 7079 D3          >                db      {b $} | END_BIT     // msb as name end
 499+ 707A             >
 499+ 707A 5C 70       >                dw      last_NFA            // Link to previous definition Name
 499+ 707C             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 499+ 707C CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 499+ 707F             >
 499+ 707F             >
 499+ 707F             >                endif           ; ok        // for other definitions it "points" the correct handler
 499+ 707F             >                // Use of "; ok" to suppress "warning[fwdref]"
 499+ 707F             >
 499+ 707F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 500+ 707F B0 6E                        dw      SUBTRACT                // -
 501+ 7081 A5 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 502+ 7085 30 70                        dw      QERROR                  // ?error
 503+ 7087 3F 69                        dw      EXIT                    // ;
 504+ 7089
 505+ 7089              //  ______________________________________________________________________
 506+ 7089              //
 507+ 7089              // ?csp       --
 508+ 7089              // raise msg #20 if surrent SP in not what previously saved in CSP.
 509+ 7089              // Compiler relies on that for  syntax checking of structures
 510+ 7089                              Colon_Def QCSP, "?CSP", is_normal
 510+ 7089             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 510+ 7089             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 510+ 7089             >
 510+ 7089             >                // dummy db directives used to calculate length of namec
 510+ 7089 3F 43 53 50 >                db      "?CSP"
 510+ 708D             >len_NFA         defl    $ - temp_NFA
 510+ 708D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 510+ 7089             >
 510+ 7089 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 510+ 708A 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 510+ 708E             >                org     $-1                 // alter last byte of Name just above to set
 510+ 708D D0          >                db      {b $} | END_BIT     // msb as name end
 510+ 708E             >
 510+ 708E 73 70       >                dw      last_NFA            // Link to previous definition Name
 510+ 7090             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 510+ 7090 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 510+ 7093             >
 510+ 7093             >
 510+ 7093             >                endif           ; ok        // for other definitions it "points" the correct handler
 510+ 7093             >                // Use of "; ok" to suppress "warning[fwdref]"
 510+ 7093             >
 510+ 7093             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 511+ 7093 0F 69                        dw      SPFETCH                 // sp@
 512+ 7095 E1 6D 03 6B                  dw      CSP, FETCH              // csp @
 513+ 7099 B0 6E                        dw      SUBTRACT                // -
 514+ 709B A5 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 515+ 709F 30 70                        dw      QERROR                  // ?error
 516+ 70A1 3F 69                        dw      EXIT                    // ;
 517+ 70A3
 518+ 70A3              //  ______________________________________________________________________
 519+ 70A3              //
 520+ 70A3              // ?loading      --
 521+ 70A3              // raise msg #22 if not loading
 522+ 70A3                              Colon_Def QLOADING, "?LOADING", is_normal
 522+ 70A3             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 522+ 70A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 70A3             >
 522+ 70A3             >                // dummy db directives used to calculate length of namec
 522+ 70A3 3F 4C 4F 41 >                db      "?LOADING"
 522+ 70A7 44 49 4E 47 >
 522+ 70AB             >len_NFA         defl    $ - temp_NFA
 522+ 70AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 70A3             >
 522+ 70A3 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 70A4 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 522+ 70A8 44 49 4E 47 >
 522+ 70AC             >                org     $-1                 // alter last byte of Name just above to set
 522+ 70AB C7          >                db      {b $} | END_BIT     // msb as name end
 522+ 70AC             >
 522+ 70AC 89 70       >                dw      last_NFA            // Link to previous definition Name
 522+ 70AE             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 70AE CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 522+ 70B1             >
 522+ 70B1             >
 522+ 70B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 70B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 70B1             >
 522+ 70B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 70B1 65 6D 03 6B                  dw      BLK, FETCH              // blk @
 524+ 70B5 7C 69                        dw      ZEQUAL                  // 0=
 525+ 70B7 A5 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 526+ 70BB 30 70                        dw      QERROR                  // ?error
 527+ 70BD 3F 69                        dw      EXIT                    // ;
 528+ 70BF
 529+ 70BF              //  ______________________________________________________________________
 530+ 70BF              //
 531+ 70BF              // compile      --
 532+ 70BF              // compiles the following word
 533+ 70BF                              Colon_Def COMPILE, "COMPILE", is_normal
 533+ 70BF             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 533+ 70BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 533+ 70BF             >
 533+ 70BF             >                // dummy db directives used to calculate length of namec
 533+ 70BF 43 4F 4D 50 >                db      "COMPILE"
 533+ 70C3 49 4C 45    >
 533+ 70C6             >len_NFA         defl    $ - temp_NFA
 533+ 70C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 533+ 70BF             >
 533+ 70BF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 533+ 70C0 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 533+ 70C4 49 4C 45    >
 533+ 70C7             >                org     $-1                 // alter last byte of Name just above to set
 533+ 70C6 C5          >                db      {b $} | END_BIT     // msb as name end
 533+ 70C7             >
 533+ 70C7 A3 70       >                dw      last_NFA            // Link to previous definition Name
 533+ 70C9             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 533+ 70C9 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 533+ 70CC             >
 533+ 70CC             >
 533+ 70CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 533+ 70CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 533+ 70CC             >
 533+ 70CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 534+ 70CC 4B 70                        dw      QCOMP                   // ?comp
 535+ 70CE 62 69                        dw      R_TO                    // r>
 536+ 70D0 82 6A F9 69                  dw      DUP, CELL_PLUS          // dup, cell+
 537+ 70D4 50 69                        dw      TO_R                    // >r
 538+ 70D6 03 6B 79 6E                  dw      FETCH, COMMA            // @ ,
 539+ 70DA 3F 69                        dw      EXIT                    // ;
 540+ 70DC
 541+ 70DC              //  ______________________________________________________________________
 542+ 70DC              //
 543+ 70DC              // compile,     --
 544+ 70DC              // compiles the following word
 545+ 70DC                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 545+ 70DC             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 545+ 70DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 545+ 70DC             >
 545+ 70DC             >                // dummy db directives used to calculate length of namec
 545+ 70DC 43 4F 4D 50 >                db      "COMPILE,"
 545+ 70E0 49 4C 45 2C >
 545+ 70E4             >len_NFA         defl    $ - temp_NFA
 545+ 70E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 545+ 70DC             >
 545+ 70DC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 545+ 70DD 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 545+ 70E1 49 4C 45 2C >
 545+ 70E5             >                org     $-1                 // alter last byte of Name just above to set
 545+ 70E4 AC          >                db      {b $} | END_BIT     // msb as name end
 545+ 70E5             >
 545+ 70E5 BF 70       >                dw      last_NFA            // Link to previous definition Name
 545+ 70E7             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 545+ 70E7 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 545+ 70EA             >
 545+ 70EA             >
 545+ 70EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 545+ 70EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 545+ 70EA             >
 545+ 70EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 546+ 70EA 4B 70                        dw      QCOMP                   // ?comp
 547+ 70EC 79 6E                        dw      COMMA                   // ,
 548+ 70EE 3F 69                        dw      EXIT                    // ;
 549+ 70F0
 550+ 70F0              //  ______________________________________________________________________
 551+ 70F0              //
 552+ 70F0              // [            --
 553+ 70F0              // stop compilation
 554+ 70F0                              Colon_Def SQUARED_OPEN, "[", is_immediate
 554+ 70F0             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 554+ 70F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 554+ 70F0             >
 554+ 70F0             >                // dummy db directives used to calculate length of namec
 554+ 70F0 5B          >                db      "["
 554+ 70F1             >len_NFA         defl    $ - temp_NFA
 554+ 70F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 554+ 70F0             >
 554+ 70F0 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 554+ 70F1 5B          >                db      "["               // name string in 7-bit ascii, but
 554+ 70F2             >                org     $-1                 // alter last byte of Name just above to set
 554+ 70F1 DB          >                db      {b $} | END_BIT     // msb as name end
 554+ 70F2             >
 554+ 70F2 DC 70       >                dw      last_NFA            // Link to previous definition Name
 554+ 70F4             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 554+ 70F4 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 554+ 70F7             >
 554+ 70F7             >
 554+ 70F7             >                endif           ; ok        // for other definitions it "points" the correct handler
 554+ 70F7             >                // Use of "; ok" to suppress "warning[fwdref]"
 554+ 70F7             >
 554+ 70F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 555+ 70F7 51 6C                        dw      ZERO                    // 0
 556+ 70F9 B8 6D 0E 6B                  dw      STATE, STORE            // state !
 557+ 70FD 3F 69                        dw      EXIT                    // ; immediate
 558+ 70FF
 559+ 70FF              //  ______________________________________________________________________
 560+ 70FF              //
 561+ 70FF              // ]            --
 562+ 70FF              // start compilation
 563+ 70FF                              Colon_Def SQUARED_CLOSE, "]", is_normal
 563+ 70FF             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 563+ 70FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 563+ 70FF             >
 563+ 70FF             >                // dummy db directives used to calculate length of namec
 563+ 70FF 5D          >                db      "]"
 563+ 7100             >len_NFA         defl    $ - temp_NFA
 563+ 7100             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 563+ 70FF             >
 563+ 70FF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 563+ 7100 5D          >                db      "]"               // name string in 7-bit ascii, but
 563+ 7101             >                org     $-1                 // alter last byte of Name just above to set
 563+ 7100 DD          >                db      {b $} | END_BIT     // msb as name end
 563+ 7101             >
 563+ 7101 F0 70       >                dw      last_NFA            // Link to previous definition Name
 563+ 7103             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 563+ 7103 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 563+ 7106             >
 563+ 7106             >
 563+ 7106             >                endif           ; ok        // for other definitions it "points" the correct handler
 563+ 7106             >                // Use of "; ok" to suppress "warning[fwdref]"
 563+ 7106             >
 563+ 7106             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 564+ 7106 A5 63 C0 00                  dw      LIT, $C0                // 192
 565+ 710A B8 6D 0E 6B                  dw      STATE, STORE            // state !
 566+ 710E 3F 69                        dw      EXIT                    // ;
 567+ 7110
 568+ 7110              //  ______________________________________________________________________
 569+ 7110              //
 570+ 7110              // smudge       --
 571+ 7110              // toggle smudge bit of latest definition
 572+ 7110                              Colon_Def SMUDGE, "SMUDGE", is_normal
 572+ 7110             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 572+ 7110             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 572+ 7110             >
 572+ 7110             >                // dummy db directives used to calculate length of namec
 572+ 7110 53 4D 55 44 >                db      "SMUDGE"
 572+ 7114 47 45       >
 572+ 7116             >len_NFA         defl    $ - temp_NFA
 572+ 7116             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 572+ 7110             >
 572+ 7110 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 572+ 7111 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 572+ 7115 47 45       >
 572+ 7117             >                org     $-1                 // alter last byte of Name just above to set
 572+ 7116 C5          >                db      {b $} | END_BIT     // msb as name end
 572+ 7117             >
 572+ 7117 FF 70       >                dw      last_NFA            // Link to previous definition Name
 572+ 7119             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 572+ 7119 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 572+ 711C             >
 572+ 711C             >
 572+ 711C             >                endif           ; ok        // for other definitions it "points" the correct handler
 572+ 711C             >                // Use of "; ok" to suppress "warning[fwdref]"
 572+ 711C             >
 572+ 711C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 573+ 711C 9E 6F                        dw      LATEST                  // latest
 574+ 711E A5 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 575+ 7122 F8 6A                        dw      TOGGLE                  // toggle
 576+ 7124 3F 69                        dw      EXIT                    // ;
 577+ 7126
 578+ 7126              //  ______________________________________________________________________
 579+ 7126              //
 580+ 7126              // immediate    --
 581+ 7126              // make immediate the latest definition
 582+ 7126                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 582+ 7126             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 582+ 7126             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 582+ 7126             >
 582+ 7126             >                // dummy db directives used to calculate length of namec
 582+ 7126 49 4D 4D 45 >                db      "IMMEDIATE"
 582+ 712A 44 49 41 54 >
 582+ 712E 45          >
 582+ 712F             >len_NFA         defl    $ - temp_NFA
 582+ 712F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 582+ 7126             >
 582+ 7126 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 582+ 7127 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 582+ 712B 44 49 41 54 >
 582+ 712F 45          >
 582+ 7130             >                org     $-1                 // alter last byte of Name just above to set
 582+ 712F C5          >                db      {b $} | END_BIT     // msb as name end
 582+ 7130             >
 582+ 7130 10 71       >                dw      last_NFA            // Link to previous definition Name
 582+ 7132             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 582+ 7132 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 582+ 7135             >
 582+ 7135             >
 582+ 7135             >                endif           ; ok        // for other definitions it "points" the correct handler
 582+ 7135             >                // Use of "; ok" to suppress "warning[fwdref]"
 582+ 7135             >
 582+ 7135             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 583+ 7135 9E 6F                        dw      LATEST                  // latest
 584+ 7137 A5 63 40 00                  dw      LIT, $40                // 64
 585+ 713B F8 6A                        dw      TOGGLE                  // toggle
 586+ 713D 3F 69                        dw      EXIT                    // ;
 587+ 713F
 588+ 713F              //  ______________________________________________________________________
 589+ 713F              //
 590+ 713F              // hex          --
 591+ 713F              // change numeration base
 592+ 713F                              Colon_Def HEX, "HEX", is_normal
 592+ 713F             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 592+ 713F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 592+ 713F             >
 592+ 713F             >                // dummy db directives used to calculate length of namec
 592+ 713F 48 45 58    >                db      "HEX"
 592+ 7142             >len_NFA         defl    $ - temp_NFA
 592+ 7142             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 592+ 713F             >
 592+ 713F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 592+ 7140 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 592+ 7143             >                org     $-1                 // alter last byte of Name just above to set
 592+ 7142 D8          >                db      {b $} | END_BIT     // msb as name end
 592+ 7143             >
 592+ 7143 26 71       >                dw      last_NFA            // Link to previous definition Name
 592+ 7145             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 592+ 7145 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 592+ 7148             >
 592+ 7148             >
 592+ 7148             >                endif           ; ok        // for other definitions it "points" the correct handler
 592+ 7148             >                // Use of "; ok" to suppress "warning[fwdref]"
 592+ 7148             >
 592+ 7148             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 593+ 7148 A5 63 10 00                  dw      LIT, 16                 // 16
 594+ 714C C3 6D 0E 6B                  dw      BASE, STORE             // base !
 595+ 7150 3F 69                        dw      EXIT                    // ;
 596+ 7152
 597+ 7152              //  ______________________________________________________________________
 598+ 7152              //
 599+ 7152              // decimal      --
 600+ 7152              // change numeration base
 601+ 7152                              Colon_Def DECIMAL, "DECIMAL", is_normal
 601+ 7152             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 601+ 7152             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ 7152             >
 601+ 7152             >                // dummy db directives used to calculate length of namec
 601+ 7152 44 45 43 49 >                db      "DECIMAL"
 601+ 7156 4D 41 4C    >
 601+ 7159             >len_NFA         defl    $ - temp_NFA
 601+ 7159             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ 7152             >
 601+ 7152 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ 7153 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 601+ 7157 4D 41 4C    >
 601+ 715A             >                org     $-1                 // alter last byte of Name just above to set
 601+ 7159 CC          >                db      {b $} | END_BIT     // msb as name end
 601+ 715A             >
 601+ 715A 3F 71       >                dw      last_NFA            // Link to previous definition Name
 601+ 715C             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 715C CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 601+ 715F             >
 601+ 715F             >
 601+ 715F             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 715F             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 715F             >
 601+ 715F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 715F A5 63 0A 00                  dw      LIT, 10                 // 10
 603+ 7163 C3 6D 0E 6B                  dw      BASE, STORE             // base !
 604+ 7167 3F 69                        dw      EXIT                    // ;
 605+ 7169
 606+ 7169              //  ______________________________________________________________________
 607+ 7169              //
 608+ 7169              // (;code)       --
 609+ 7169              // patch to CFA to call/jump to the "following code"
 610+ 7169                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 610+ 7169             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 610+ 7169             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 610+ 7169             >
 610+ 7169             >                // dummy db directives used to calculate length of namec
 610+ 7169 28 3B 43 4F >                db      "(;CODE)"
 610+ 716D 44 45 29    >
 610+ 7170             >len_NFA         defl    $ - temp_NFA
 610+ 7170             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 610+ 7169             >
 610+ 7169 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 610+ 716A 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 610+ 716E 44 45 29    >
 610+ 7171             >                org     $-1                 // alter last byte of Name just above to set
 610+ 7170 A9          >                db      {b $} | END_BIT     // msb as name end
 610+ 7171             >
 610+ 7171 52 71       >                dw      last_NFA            // Link to previous definition Name
 610+ 7173             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 610+ 7173 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 610+ 7176             >
 610+ 7176             >
 610+ 7176             >                endif           ; ok        // for other definitions it "points" the correct handler
 610+ 7176             >                // Use of "; ok" to suppress "warning[fwdref]"
 610+ 7176             >
 610+ 7176             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 611+ 7176 62 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 612+ 7178 9E 6F                        dw      LATEST                  // latest   ( Word being defined in this moment )
 613+ 717A E4 6F C0 6F                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 614+ 717E
 615+ 717E A5 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 616+ 7182 47 6A 26 6B                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 617+ 7186 D7 69                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 618+ 7188
 619+ 7188 0E 6B                        dw      STORE                   // !
 620+ 718A 3F 69                        dw      EXIT                    // ;
 621+ 718C
 622+ 718C              //  ______________________________________________________________________
 623+ 718C              //
 624+ 718C              // ;code        --
 625+ 718C                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 625+ 718C             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 625+ 718C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 625+ 718C             >
 625+ 718C             >                // dummy db directives used to calculate length of namec
 625+ 718C 3B 43 4F 44 >                db      ";CODE"
 625+ 7190 45          >
 625+ 7191             >len_NFA         defl    $ - temp_NFA
 625+ 7191             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 625+ 718C             >
 625+ 718C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 625+ 718D 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 625+ 7191 45          >
 625+ 7192             >                org     $-1                 // alter last byte of Name just above to set
 625+ 7191 C5          >                db      {b $} | END_BIT     // msb as name end
 625+ 7192             >
 625+ 7192 69 71       >                dw      last_NFA            // Link to previous definition Name
 625+ 7194             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 625+ 7194 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 625+ 7197             >
 625+ 7197             >
 625+ 7197             >                endif           ; ok        // for other definitions it "points" the correct handler
 625+ 7197             >                // Use of "; ok" to suppress "warning[fwdref]"
 625+ 7197             >
 625+ 7197             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 626+ 7197 90 70                        dw      QCSP                    // ?csp
 627+ 7199 C9 70                        dw      COMPILE                 // compile
 628+ 719B 73 71                        dw      C_SEMICOLON_CODE        // (;code)
 629+ 719D F4 70                        dw      SQUARED_OPEN            // [
 630+ 719F FF 6B                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 631+ 71A1 3F 69                        dw      EXIT                    // ; immediate
 632+ 71A3
 633+ 71A3              //  ______________________________________________________________________
 634+ 71A3              //
 635+ 71A3              // <builds      --
 636+ 71A3                              Colon_Def CBUILDS, "<BUILDS", is_normal
 636+ 71A3             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 636+ 71A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 636+ 71A3             >
 636+ 71A3             >                // dummy db directives used to calculate length of namec
 636+ 71A3 3C 42 55 49 >                db      "<BUILDS"
 636+ 71A7 4C 44 53    >
 636+ 71AA             >len_NFA         defl    $ - temp_NFA
 636+ 71AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 636+ 71A3             >
 636+ 71A3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 636+ 71A4 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 636+ 71A8 4C 44 53    >
 636+ 71AB             >                org     $-1                 // alter last byte of Name just above to set
 636+ 71AA D3          >                db      {b $} | END_BIT     // msb as name end
 636+ 71AB             >
 636+ 71AB 8C 71       >                dw      last_NFA            // Link to previous definition Name
 636+ 71AD             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 636+ 71AD CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 636+ 71B0             >
 636+ 71B0             >
 636+ 71B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 636+ 71B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 636+ 71B0             >
 636+ 71B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 637+ 71B0 51 6C                        dw      ZERO                    // 0
 638+ 71B2 0C 6C                        dw      CONSTANT                // constant
 639+ 71B4 3F 69                        dw      EXIT                    // ;
 640+ 71B6
 641+ 71B6              //  ______________________________________________________________________
 642+ 71B6              //
 643+ 71B6              // recurse      --
 644+ 71B6              //              Colon_Def RECURSE, "RECURSE", is_immediate
 645+ 71B6              //              dw      QCOMP                   // ?comp
 646+ 71B6              //              dw      LATEST                  // latest
 647+ 71B6              //              dw      PFA, CFA                // pfa cfa
 648+ 71B6              //              dw      COMMA                   // ,
 649+ 71B6              //              dw      EXIT                    // ; immediate
 650+ 71B6
 651+ 71B6              //  ______________________________________________________________________
 652+ 71B6              //
 653+ 71B6              // does>     --
 654+ 71B6                              Colon_Def DOES_TO, "DOES>", is_normal
 654+ 71B6             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 654+ 71B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 654+ 71B6             >
 654+ 71B6             >                // dummy db directives used to calculate length of namec
 654+ 71B6 44 4F 45 53 >                db      "DOES>"
 654+ 71BA 3E          >
 654+ 71BB             >len_NFA         defl    $ - temp_NFA
 654+ 71BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 654+ 71B6             >
 654+ 71B6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 654+ 71B7 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 654+ 71BB 3E          >
 654+ 71BC             >                org     $-1                 // alter last byte of Name just above to set
 654+ 71BB BE          >                db      {b $} | END_BIT     // msb as name end
 654+ 71BC             >
 654+ 71BC A3 71       >                dw      last_NFA            // Link to previous definition Name
 654+ 71BE             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 654+ 71BE CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 654+ 71C1             >
 654+ 71C1             >
 654+ 71C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 654+ 71C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 654+ 71C1             >
 654+ 71C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 655+ 71C1 62 69                        dw      R_TO                    // r>
 656+ 71C3 9E 6F                        dw      LATEST                  // latest
 657+ 71C5 E4 6F                        dw      PFA                     // pfa
 658+ 71C7 0E 6B                        dw      STORE                   // !
 659+ 71C9 73 71                        dw      C_SEMICOLON_CODE        // ;code
 660+ 71CB              Does_Ptr:
 661+ 71CB                              // via call coded in CFA
 662+ 71CB                              ldhlrp
 662+ 71CB 2A 96 63    >                ld      hl,(RP_Pointer)
 663+ 71CE 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 664+ 71CF 70                           ld      (hl), b
 665+ 71D0 2B                           dec     hl
 666+ 71D1 71                           ld      (hl), c
 667+ 71D2                              ldrphl
 667+ 71D2 22 96 63    >                ld      (RP_Pointer),hl
 668+ 71D5 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 669+ 71D6
 670+ 71D6 4E                           ld      c, (hl)
 671+ 71D7 23                           inc     hl
 672+ 71D8 46                           ld      b, (hl)
 673+ 71D9 23                           inc     hl
 674+ 71DA
 675+ 71DA                              psh1
 675+ 71DA E5          >                push    hl
 675+ 71DB DD E9       >                jp      (ix)
 676+ 71DD                              // SMUDGE !
 677+ 71DD
 678+ 71DD              //  ______________________________________________________________________
 679+ 71DD              //
 680+ 71DD              // count        a -- a2 n
 681+ 71DD              // expects a counted string at address a, returns string address and counter
 682+ 71DD                              New_Def COUNT, "COUNT", is_code, is_normal
 682+ 71DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 682+ 71DD             >
 682+ 71DD             >                // dummy db directives used to calculate length of namec
 682+ 71DD 43 4F 55 4E >                db      "COUNT"
 682+ 71E1 54          >
 682+ 71E2             >len_NFA         defl    $ - temp_NFA
 682+ 71E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 682+ 71DD             >
 682+ 71DD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 682+ 71DE 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 682+ 71E2 54          >
 682+ 71E3             >                org     $-1                 // alter last byte of Name just above to set
 682+ 71E2 D4          >                db      {b $} | END_BIT     // msb as name end
 682+ 71E3             >
 682+ 71E3 B6 71       >                dw      last_NFA            // Link to previous definition Name
 682+ 71E5             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 682+ 71E5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 682+ 71E5 ~           >
 682+ 71E5 ~           >
 682+ 71E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 682+ 71E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 682+ 71E5             >
 682+ 71E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 683+ 71E5 E1                           pop     hl
 684+ 71E6 5E                           ld      e, (hl)
 685+ 71E7 16 00                        ld      d, 0
 686+ 71E9 23                           inc     hl
 687+ 71EA              Count_Ptr:
 688+ 71EA E5                           push    hl
 689+ 71EB D5                           push    de
 690+ 71EC                              next
 690+ 71EC DD E9       >                jp      (ix)
 691+ 71EE
 692+ 71EE              //  ______________________________________________________________________
 693+ 71EE              //
 694+ 71EE              // bounds       a n -- a+n n
 695+ 71EE              // given an address and a length ( a n ) calculate the bound addresses
 696+ 71EE              // suitable for DO-LOOP
 697+ 71EE                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 697+ 71EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 697+ 71EE             >
 697+ 71EE             >                // dummy db directives used to calculate length of namec
 697+ 71EE 42 4F 55 4E >                db      "BOUNDS"
 697+ 71F2 44 53       >
 697+ 71F4             >len_NFA         defl    $ - temp_NFA
 697+ 71F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 697+ 71EE             >
 697+ 71EE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 697+ 71EF 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 697+ 71F3 44 53       >
 697+ 71F5             >                org     $-1                 // alter last byte of Name just above to set
 697+ 71F4 D3          >                db      {b $} | END_BIT     // msb as name end
 697+ 71F5             >
 697+ 71F5 DD 71       >                dw      last_NFA            // Link to previous definition Name
 697+ 71F7             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 697+ 71F7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 697+ 71F7 ~           >
 697+ 71F7 ~           >
 697+ 71F7             >                endif           ; ok        // for other definitions it "points" the correct handler
 697+ 71F7             >                // Use of "; ok" to suppress "warning[fwdref]"
 697+ 71F7             >
 697+ 71F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 698+ 71F7 E1                           pop     hl
 699+ 71F8 D1                           pop     de
 700+ 71F9 19                           add     hl, de
 701+ 71FA 18 EE                        jr      Count_Ptr
 702+ 71FC
 703+ 71FC              //  ______________________________________________________________________
 704+ 71FC              //
 705+ 71FC              // leave        --
 706+ 71FC              // Compile (leave) to leave current LOOP and jump just after it
 707+ 71FC                              Colon_Def LEAVE, "LEAVE", is_immediate
 707+ 71FC             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 707+ 71FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 707+ 71FC             >
 707+ 71FC             >                // dummy db directives used to calculate length of namec
 707+ 71FC 4C 45 41 56 >                db      "LEAVE"
 707+ 7200 45          >
 707+ 7201             >len_NFA         defl    $ - temp_NFA
 707+ 7201             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 707+ 71FC             >
 707+ 71FC C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 707+ 71FD 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 707+ 7201 45          >
 707+ 7202             >                org     $-1                 // alter last byte of Name just above to set
 707+ 7201 C5          >                db      {b $} | END_BIT     // msb as name end
 707+ 7202             >
 707+ 7202 EE 71       >                dw      last_NFA            // Link to previous definition Name
 707+ 7204             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 707+ 7204 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 707+ 7207             >
 707+ 7207             >
 707+ 7207             >                endif           ; ok        // for other definitions it "points" the correct handler
 707+ 7207             >                // Use of "; ok" to suppress "warning[fwdref]"
 707+ 7207             >
 707+ 7207             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 708+ 7207 C9 70 2F 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 709+ 720B 5B 6E 50 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 709+ 720F 51 6C 79 6E
 710+ 7213 51 6C 51 6C                  dw      ZERO, ZERO
 711+ 7217 0F 69 82 6A                  dw      SPFETCH, DUP
 712+ 721B F9 69 F9 69                  dw      CELL_PLUS, CELL_PLUS
 713+ 721F 69 6A                        dw      TUCK
 714+ 7221 E1 6D 03 6B                  dw      CSP, FETCH
 715+ 7225 77 6A B0 6E                  dw      SWAP, SUBTRACT
 716+ 7229 48 68                        dw      CMOVE
 717+ 722B E1 6D 03 6B                  dw      CSP, FETCH, CELL_MINUS
 717+ 722F 04 6A
 718+ 7231 62 69 47 6A                  dw      R_TO, OVER, STORE
 718+ 7235 0E 6B
 719+ 7237 04 6A 51 6C                  dw      CELL_MINUS, ZERO
 720+ 723B 77 6A 0E 6B                  dw      SWAP, STORE
 721+ 723F 3F 69                        dw      EXIT                    // ;
 722+ 7241
 723+ 7241              //  ______________________________________________________________________
 724+ 7241              //
 725+ 7241              // type         a n --
 726+ 7241              // Sends to current output channel n characters starting at address a.
 727+ 7241                              Colon_Def TYPE, "TYPE", is_normal
 727+ 7241             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 727+ 7241             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 727+ 7241             >
 727+ 7241             >                // dummy db directives used to calculate length of namec
 727+ 7241 54 59 50 45 >                db      "TYPE"
 727+ 7245             >len_NFA         defl    $ - temp_NFA
 727+ 7245             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 727+ 7241             >
 727+ 7241 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 727+ 7242 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 727+ 7246             >                org     $-1                 // alter last byte of Name just above to set
 727+ 7245 C5          >                db      {b $} | END_BIT     // msb as name end
 727+ 7246             >
 727+ 7246 FC 71       >                dw      last_NFA            // Link to previous definition Name
 727+ 7248             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 727+ 7248 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 727+ 724B             >
 727+ 724B             >
 727+ 724B             >                endif           ; ok        // for other definitions it "points" the correct handler
 727+ 724B             >                // Use of "; ok" to suppress "warning[fwdref]"
 727+ 724B             >
 727+ 724B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 728+ 724B F7 71                        dw      BOUNDS                  // bounds
 729+ 724D 45 64                        dw      C_Q_DO                  // ?do
 730+ 724F 0C 00                        dw      Type_Skip - $
 731+ 7251              Type_Loop:
 732+ 7251 78 64 1A 6B                  dw          I, CFETCH           //      i c@
 733+ 7255 49 6F                        dw          EMIT                //      emit
 734+ 7257 F8 63                        dw      C_LOOP                  // loop
 735+ 7259 F8 FF                        dw      Type_Loop - $
 736+ 725B              Type_Skip:
 737+ 725B 3F 69                        dw      EXIT                    // ;
 738+ 725D
 739+ 725D              //  ______________________________________________________________________
 740+ 725D              //
 741+ 725D              // -trailing    a n1 -- a n2
 742+ 725D              // Assumes that an n1 bytes-long string is stored at address a
 743+ 725D              // and the string contains a space delimited word,
 744+ 725D              // Finds n2 as the position of the first character after the word.
 745+ 725D                              Colon_Def LTRAILING, "-TRAILING", is_normal
 745+ 725D             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 745+ 725D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 745+ 725D             >
 745+ 725D             >                // dummy db directives used to calculate length of namec
 745+ 725D 2D 54 52 41 >                db      "-TRAILING"
 745+ 7261 49 4C 49 4E >
 745+ 7265 47          >
 745+ 7266             >len_NFA         defl    $ - temp_NFA
 745+ 7266             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 745+ 725D             >
 745+ 725D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 745+ 725E 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 745+ 7262 49 4C 49 4E >
 745+ 7266 47          >
 745+ 7267             >                org     $-1                 // alter last byte of Name just above to set
 745+ 7266 C7          >                db      {b $} | END_BIT     // msb as name end
 745+ 7267             >
 745+ 7267 41 72       >                dw      last_NFA            // Link to previous definition Name
 745+ 7269             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 745+ 7269 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 745+ 726C             >
 745+ 726C             >
 745+ 726C             >                endif           ; ok        // for other definitions it "points" the correct handler
 745+ 726C             >                // Use of "; ok" to suppress "warning[fwdref]"
 745+ 726C             >
 745+ 726C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 746+ 726C 82 6A 51 6C                  dw      DUP, ZERO               // dup 0
 747+ 7270                                                              // do
 748+ 7270 45 64                        dw      C_Q_DO
 749+ 7272 20 00                        dw      LTrailing_Leave - $
 750+ 7274              LTrailing_Loop:
 751+ 7274 D7 6A BA 69                  dw          TWO_DUP, PLUS       //      2dup +
 752+ 7278 E1 69                        dw          ONE_SUBTRACT        //      1-
 753+ 727A 1A 6B                        dw          CFETCH              //      c@
 754+ 727C 80 6C B0 6E                  dw          BL, SUBTRACT        //      bl -
 755+ 7280                                                              //      if
 756+ 7280 1C 64                        dw          ZBRANCH
 757+ 7282 0A 00                        dw          LTrailing_Else - $
 758+ 7284 2F 64                        dw              C_LEAVE         //          leave
 759+ 7286 0C 00                        dw              LTrailing_Leave - $
 760+ 7288 07 64                        dw          BRANCH              //      else
 761+ 728A 04 00                        dw          LTrailing_Endif - $
 762+ 728C              LTrailing_Else:
 763+ 728C E1 69                        dw              ONE_SUBTRACT    //          1-
 764+ 728E              LTrailing_Endif:                                //      endif
 765+ 728E                                                              // loop
 766+ 728E F8 63                        dw      C_LOOP
 767+ 7290 E4 FF                        dw      LTrailing_Loop - $
 768+ 7292              LTrailing_Leave:
 769+ 7292 3F 69                        dw      EXIT                    // ;
 770+ 7294
 771+ 7294              //  ______________________________________________________________________
 772+ 7294              //
 773+ 7294              // accept       a n1 -- n2
 774+ 7294              // Accepts at most n1 characters from terminal and stores them at address a
 775+ 7294              // CR stops input. A 'nul' is added as trailer.
 776+ 7294              // n2 is the string length. n2 is kept in span user variable also.
 777+ 7294                              Colon_Def ACCEPT, "ACCEPT", is_normal
 777+ 7294             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 777+ 7294             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 777+ 7294             >
 777+ 7294             >                // dummy db directives used to calculate length of namec
 777+ 7294 41 43 43 45 >                db      "ACCEPT"
 777+ 7298 50 54       >
 777+ 729A             >len_NFA         defl    $ - temp_NFA
 777+ 729A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 777+ 7294             >
 777+ 7294 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 777+ 7295 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 777+ 7299 50 54       >
 777+ 729B             >                org     $-1                 // alter last byte of Name just above to set
 777+ 729A D4          >                db      {b $} | END_BIT     // msb as name end
 777+ 729B             >
 777+ 729B 5D 72       >                dw      last_NFA            // Link to previous definition Name
 777+ 729D             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 777+ 729D CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 777+ 72A0             >
 777+ 72A0             >
 777+ 72A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 777+ 72A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 777+ 72A0             >
 777+ 72A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 778+ 72A0 47 6A BA 69                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 778+ 72A4 47 6A
 779+ 72A6 51 6C 9B 6A                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 780+ 72AA                                                              // do
 781+ 72AA 45 64                        dw      C_Q_DO
 782+ 72AC 8C 00                        dw      Accept_Leave - $
 783+ 72AE              Accept_Loop:
 784+ 72AE 87 66                        dw          CUR
 785+ 72B0 55 6A D1 66                  dw          DROP, KEY           //      drop key        ( a  c )
 786+ 72B4 82 6A                        dw          DUP                 //      dup             ( a  c  c )
 787+ 72B6 A5 63 0E 00                  dw          LIT, $0E            //      0E
 788+ 72BA C1 6C                        dw          PLUS_ORIGIN         //      +origin
 789+ 72BC 03 6B                        dw          FETCH               //      @               ( a  c  c  del )
 790+ 72BE BC 6E                        dw          EQUALS              //      =               ( a  c  c==del )
 791+ 72C0                                                              //      if
 792+ 72C0 1C 64                        dw          ZBRANCH
 793+ 72C2 2C 00                        dw          Accept_Else_0 - $
 794+ 72C4 55 6A                        dw              DROP            //          drop        ( a  )
 795+ 72C6 82 6A 78 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 795+ 72CA BC 6E
 796+ 72CC 5A 6C DD 68                  dw              ONE, AND_OP     //          1 and
 797+ 72D0 82 6A                        dw              DUP             //          dup         ( a  a==i  a==i )
 798+ 72D2 62 69                        dw              R_TO            //          r> 2 - + r>
 799+ 72D4 0F 6A BA 69                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 800+ 72D8 50 69                        dw              TO_R            //
 801+ 72DA                                                              //          if
 802+ 72DA 1C 64                        dw              ZBRANCH
 803+ 72DC 0A 00                        dw              Accept_Else_1 - $
 804+ 72DE A5 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 805+ 72E2                                                              //          else
 806+ 72E2 07 64                        dw              BRANCH
 807+ 72E4 06 00                        dw              Accept_Endif_1 - $
 808+ 72E6              Accept_Else_1:
 809+ 72E6 A5 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 810+ 72EA              Accept_Endif_1:                                 //          endif
 811+ 72EA 07 64                        dw          BRANCH
 812+ 72EC 2E 00                        dw          Accept_Endif_0 - $
 813+ 72EE              Accept_Else_0:                                  //      else
 814+ 72EE 82 6A                        dw              DUP             //          dup         ( a  c  c )
 815+ 72F0 A5 63 0D 00                  dw              LIT, 13         //          13
 816+ 72F4 BC 6E                        dw              EQUALS          //          =           ( a  c  c==CR )
 817+ 72F6                                                              //          if
 818+ 72F6 1C 64                        dw              ZBRANCH
 819+ 72F8 0C 00                        dw              Accept_Else_2 - $
 820+ 72FA 55 6A 80 6C                  dw                  DROP, BL    //              drop bl ( a  bl )
 821+ 72FE 51 6C                        dw                  ZERO        //              0       ( a  c  0 )
 822+ 7300                                                              //          else
 823+ 7300 07 64                        dw              BRANCH
 824+ 7302 04 00                        dw              Accept_Endif_2 - $
 825+ 7304              Accept_Else_2:
 826+ 7304 82 6A                        dw                  DUP         //              dup     ( a  c  c )
 827+ 7306                                                              //          endif
 828+ 7306              Accept_Endif_2:
 829+ 7306 78 64 26 6B                  dw              I, CSTORE       //          i           ( a  c )
 830+ 730A 82 6A 80 6C                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 830+ 730E DC 6E
 831+ 7310                                                              //          if
 832+ 7310 1C 64                        dw              ZBRANCH
 833+ 7312 08 00                        dw              Accept_Endif_3 - $
 834+ 7314 62 69                        dw                  R_TO        //              r>
 835+ 7316 E1 69                        dw                  ONE_SUBTRACT//              1-
 836+ 7318 50 69                        dw                  TO_R        //              >r
 837+ 731A                                                              //          endif
 838+ 731A              Accept_Endif_3:
 839+ 731A              Accept_Endif_0:                                 //      endif
 840+ 731A 49 6F                        dw          EMIT                //      emit
 841+ 731C 51 6C 78 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 841+ 7320 D7 69
 842+ 7322 0E 6B                        dw          STORE               //          ( zero pad )
 843+ 7324 78 64                        dw          I                   //      i
 844+ 7326 78 64 1A 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 844+ 732A 7C 69
 845+ 732C 1C 64                        dw          ZBRANCH             //
 846+ 732E 06 00                        dw              Accept_Endif_4 - $
 847+ 7330 2F 64                        dw                  C_LEAVE     //              leave
 848+ 7332 06 00                        dw                  Accept_Leave - $
 849+ 7334              Accept_Endif_4:                                 //      endif
 850+ 7334                                                              // loop
 851+ 7334 F8 63                        dw      C_LOOP
 852+ 7336 78 FF                        dw      Accept_Loop - $
 853+ 7338              Accept_Leave:
 854+ 7338 77 6A B0 6E                  dw      SWAP, SUBTRACT          // swap -
 855+ 733C D7 69                        dw      ONE_PLUS                // 1+
 856+ 733E 82 6A 39 6E                  dw      DUP, SPAN, STORE        // dup span !
 856+ 7342 0E 6B
 857+ 7344 3F 69                        dw      EXIT                    // ;
 858+ 7346
 859+ 7346              //  ______________________________________________________________________
 860+ 7346              //
 861+ 7346              // expect      a n --
 862+ 7346              // Accepts at most n1 characters from terminal and stores them at address a
 863+ 7346              // CR stops input. A 'nul' is added as trailer.
 864+ 7346              // n2 is the string length. n2 is kept in span user variable also.
 865+ 7346              //              Colon_Def EXPECT, "EXPECT", is_normal
 866+ 7346              //              dw      ACCEPT, DROP            // accept drop
 867+ 7346              //              dw      EXIT                    // ;
 868+ 7346
 869+ 7346              //  ______________________________________________________________________
 870+ 7346              //
 871+ 7346              // query        --
 872+ 7346              // Accept at most 80 character from console. CR stops.
 873+ 7346              // Text is stored in TIB. Variable IN is zeroed.
 874+ 7346                              Colon_Def QUERY, "QUERY", is_normal
 874+ 7346             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 874+ 7346             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 874+ 7346             >
 874+ 7346             >                // dummy db directives used to calculate length of namec
 874+ 7346 51 55 45 52 >                db      "QUERY"
 874+ 734A 59          >
 874+ 734B             >len_NFA         defl    $ - temp_NFA
 874+ 734B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 874+ 7346             >
 874+ 7346 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 874+ 7347 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 874+ 734B 59          >
 874+ 734C             >                org     $-1                 // alter last byte of Name just above to set
 874+ 734B D9          >                db      {b $} | END_BIT     // msb as name end
 874+ 734C             >
 874+ 734C 94 72       >                dw      last_NFA            // Link to previous definition Name
 874+ 734E             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 874+ 734E CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 874+ 7351             >
 874+ 7351             >
 874+ 7351             >                endif           ; ok        // for other definitions it "points" the correct handler
 874+ 7351             >                // Use of "; ok" to suppress "warning[fwdref]"
 874+ 7351             >
 874+ 7351             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 875+ 7351 EF 6C 03 6B                  dw      TIB, FETCH              // tib @
 876+ 7355 A5 63 50 00                  dw      LIT, 80                 // 80
 877+ 7359 9D 72 55 6A                  dw      ACCEPT, DROP            // accept drop
 878+ 735D 51 6C 6F 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 878+ 7361 0E 6B
 879+ 7363 3F 69                        dw      EXIT                    // ;
 880+ 7365
 881+ 7365              //  ______________________________________________________________________
 882+ 7365              //
 883+ 7365              // fill        a n c --
 884+ 7365              // If n > 0, fills n locations starting from address a with the value c.
 885+ 7365                              New_Def FILL, "FILL", is_code, is_normal
 885+ 7365             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 885+ 7365             >
 885+ 7365             >                // dummy db directives used to calculate length of namec
 885+ 7365 46 49 4C 4C >                db      "FILL"
 885+ 7369             >len_NFA         defl    $ - temp_NFA
 885+ 7369             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 885+ 7365             >
 885+ 7365 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 885+ 7366 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 885+ 736A             >                org     $-1                 // alter last byte of Name just above to set
 885+ 7369 CC          >                db      {b $} | END_BIT     // msb as name end
 885+ 736A             >
 885+ 736A 46 73       >                dw      last_NFA            // Link to previous definition Name
 885+ 736C             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 885+ 736C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 885+ 736C ~           >
 885+ 736C ~           >
 885+ 736C             >                endif           ; ok        // for other definitions it "points" the correct handler
 885+ 736C             >                // Use of "; ok" to suppress "warning[fwdref]"
 885+ 736C             >
 885+ 736C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 886+ 736C D9                           exx
 887+ 736D D1                           pop     de                  // de has character
 888+ 736E C1                           pop     bc                  // bc has counter
 889+ 736F E1                           pop     hl                  // hl has address, save Instruction Pointer
 890+ 7370              Fill_Loop:
 891+ 7370 78                               ld      a, b
 892+ 7371 B1                               or      c
 893+ 7372 28 05                        jr      z, Fill_While_End
 894+ 7374 73                               ld      (hl), e
 895+ 7375 0B                               dec     bc
 896+ 7376 23                               inc     hl
 897+ 7377 18 F7                        jr      Fill_Loop
 898+ 7379              Fill_While_End:
 899+ 7379 D9                           exx
 900+ 737A                              next
 900+ 737A DD E9       >                jp      (ix)
 901+ 737C
 902+ 737C              //  ______________________________________________________________________
 903+ 737C              //
 904+ 737C              // erase        a n --
 905+ 737C              // If n > 0, fills n locations starting from address a with 'nul' characters.
 906+ 737C                              Colon_Def ERASE, "ERASE", is_normal
 906+ 737C             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 906+ 737C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 906+ 737C             >
 906+ 737C             >                // dummy db directives used to calculate length of namec
 906+ 737C 45 52 41 53 >                db      "ERASE"
 906+ 7380 45          >
 906+ 7381             >len_NFA         defl    $ - temp_NFA
 906+ 7381             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 906+ 737C             >
 906+ 737C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 906+ 737D 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 906+ 7381 45          >
 906+ 7382             >                org     $-1                 // alter last byte of Name just above to set
 906+ 7381 C5          >                db      {b $} | END_BIT     // msb as name end
 906+ 7382             >
 906+ 7382 65 73       >                dw      last_NFA            // Link to previous definition Name
 906+ 7384             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 906+ 7384 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 906+ 7387             >
 906+ 7387             >
 906+ 7387             >                endif           ; ok        // for other definitions it "points" the correct handler
 906+ 7387             >                // Use of "; ok" to suppress "warning[fwdref]"
 906+ 7387             >
 906+ 7387             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 907+ 7387 51 6C 6C 73                  dw      ZERO, FILL              // 0 fill
 908+ 738B 3F 69                        dw      EXIT                    // ;
 909+ 738D
 910+ 738D              //  ______________________________________________________________________
 911+ 738D              //
 912+ 738D              // blank        a n --
 913+ 738D              // If n > 0, fills n locations starting from address a with 'nul' characters.
 914+ 738D                              Colon_Def BLANK, "BLANK", is_normal
 914+ 738D             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
 914+ 738D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 914+ 738D             >
 914+ 738D             >                // dummy db directives used to calculate length of namec
 914+ 738D 42 4C 41 4E >                db      "BLANK"
 914+ 7391 4B          >
 914+ 7392             >len_NFA         defl    $ - temp_NFA
 914+ 7392             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 914+ 738D             >
 914+ 738D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 914+ 738E 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
 914+ 7392 4B          >
 914+ 7393             >                org     $-1                 // alter last byte of Name just above to set
 914+ 7392 CB          >                db      {b $} | END_BIT     // msb as name end
 914+ 7393             >
 914+ 7393 7C 73       >                dw      last_NFA            // Link to previous definition Name
 914+ 7395             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 914+ 7395 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 914+ 7398             >
 914+ 7398             >
 914+ 7398             >                endif           ; ok        // for other definitions it "points" the correct handler
 914+ 7398             >                // Use of "; ok" to suppress "warning[fwdref]"
 914+ 7398             >
 914+ 7398             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 915+ 7398 80 6C 6C 73                  dw      BL, FILL                // bl fill
 916+ 739C 3F 69                        dw      EXIT                    // ;
 917+ 739E
 918+ 739E              //  ______________________________________________________________________
 919+ 739E              //
 920+ 739E              // hold         c --
 921+ 739E              // Used between <# and #> to insert a character c in numeric formatting.
 922+ 739E                              Colon_Def HOLD, "HOLD", is_normal
 922+ 739E             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 922+ 739E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 922+ 739E             >
 922+ 739E             >                // dummy db directives used to calculate length of namec
 922+ 739E 48 4F 4C 44 >                db      "HOLD"
 922+ 73A2             >len_NFA         defl    $ - temp_NFA
 922+ 73A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 922+ 739E             >
 922+ 739E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 922+ 739F 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 922+ 73A3             >                org     $-1                 // alter last byte of Name just above to set
 922+ 73A2 C4          >                db      {b $} | END_BIT     // msb as name end
 922+ 73A3             >
 922+ 73A3 8D 73       >                dw      last_NFA            // Link to previous definition Name
 922+ 73A5             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 922+ 73A5 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 922+ 73A8             >
 922+ 73A8             >
 922+ 73A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 922+ 73A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 922+ 73A8             >
 922+ 73A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 923+ 73A8 76 6C                        dw      NEG_ONE                 // -1
 924+ 73AA F4 6D E4 6A                  dw      HLD, PLUSSTORE          // hld +!
 925+ 73AE F4 6D 03 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 925+ 73B2 26 6B
 926+ 73B4 3F 69                        dw      EXIT                    // ;
 927+ 73B6
 928+ 73B6              //  ______________________________________________________________________
 929+ 73B6              //
 930+ 73B6              // pad         -- a
 931+ 73B6              // leaves the buffer text address. This is at a fixed distance over HERE.
 932+ 73B6                              Colon_Def PAD, "PAD", is_normal
 932+ 73B6             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 932+ 73B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 932+ 73B6             >
 932+ 73B6             >                // dummy db directives used to calculate length of namec
 932+ 73B6 50 41 44    >                db      "PAD"
 932+ 73B9             >len_NFA         defl    $ - temp_NFA
 932+ 73B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 932+ 73B6             >
 932+ 73B6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 932+ 73B7 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 932+ 73BA             >                org     $-1                 // alter last byte of Name just above to set
 932+ 73B9 C4          >                db      {b $} | END_BIT     // msb as name end
 932+ 73BA             >
 932+ 73BA 9E 73       >                dw      last_NFA            // Link to previous definition Name
 932+ 73BC             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 932+ 73BC CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 932+ 73BF             >
 932+ 73BF             >
 932+ 73BF             >                endif           ; ok        // for other definitions it "points" the correct handler
 932+ 73BF             >                // Use of "; ok" to suppress "warning[fwdref]"
 932+ 73BF             >
 932+ 73BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 933+ 73BF 5B 6E                        dw      HERE                    // here
 934+ 73C1 A5 63 44 00                  dw      LIT, 68                 // 68
 935+ 73C5 BA 69                        dw      PLUS                    // +
 936+ 73C7 3F 69                        dw      EXIT                    // ;
 937+ 73C9
 938+ 73C9              //  ______________________________________________________________________
 939+ 73C9              //
 940+ 73C9              // word         c -- a
 941+ 73C9              // reads characters from input streams until it encouners a c delimiter.
 942+ 73C9              // Stores that packet so it starts from HERE
 943+ 73C9              // WORD leaves a counter as first byte and ends the packet with two spaces.
 944+ 73C9              // Other occurrences of c are ignored.
 945+ 73C9              // If BLK is zero, text is taken from terminal buffer TIB.
 946+ 73C9              // Otherwise text is taken from the disk-block given by BLK.
 947+ 73C9              // "in" variable is incremented of the number of character read.
 948+ 73C9              // The number of characters read is given by ENCLOSE.
 949+ 73C9                              Colon_Def WORD, "WORD", is_normal
 949+ 73C9             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 949+ 73C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 949+ 73C9             >
 949+ 73C9             >                // dummy db directives used to calculate length of namec
 949+ 73C9 57 4F 52 44 >                db      "WORD"
 949+ 73CD             >len_NFA         defl    $ - temp_NFA
 949+ 73CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 949+ 73C9             >
 949+ 73C9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 949+ 73CA 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 949+ 73CE             >                org     $-1                 // alter last byte of Name just above to set
 949+ 73CD C4          >                db      {b $} | END_BIT     // msb as name end
 949+ 73CE             >
 949+ 73CE B6 73       >                dw      last_NFA            // Link to previous definition Name
 949+ 73D0             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 949+ 73D0 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 949+ 73D3             >
 949+ 73D3             >
 949+ 73D3             >                endif           ; ok        // for other definitions it "points" the correct handler
 949+ 73D3             >                // Use of "; ok" to suppress "warning[fwdref]"
 949+ 73D3             >
 949+ 73D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 950+ 73D3 65 6D 03 6B                  dw      BLK, FETCH              // blk @
 951+ 73D7                                                              // if
 952+ 73D7 1C 64                        dw      ZBRANCH
 953+ 73D9 0C 00                        dw      Word_Else - $
 954+ 73DB 65 6D 03 6B                  dw          BLK, FETCH          //      blk @
 955+ 73DF 5C 7D                        dw          BLOCK               //      block ( forward )
 956+ 73E1                                                              // else
 957+ 73E1 07 64                        dw      BRANCH
 958+ 73E3 06 00                        dw      Word_Endif - $
 959+ 73E5              Word_Else:
 960+ 73E5 EF 6C 03 6B                  dw         TIB, FETCH           //      tib @
 961+ 73E9              Word_Endif:                                     // endif
 962+ 73E9 6F 6D 03 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 962+ 73ED BA 69
 963+ 73EF 77 6A 58 65                  dw      SWAP, ENCLOSE           // swap enclose
 964+ 73F3 5B 6E A5 63                  dw      HERE, LIT, 34, BLANK    // here 34 blank
 964+ 73F7 22 00 95 73
 965+ 73FB 6F 6D E4 6A                  dw      TO_IN, PLUSSTORE        // >in @ +
 966+ 73FF 47 6A B0 6E                  dw      OVER, SUBTRACT, TO_R    // over - >r
 966+ 7403 50 69
 967+ 7405 74 69 5B 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 967+ 7409 26 6B
 968+ 740B BA 69                        dw      PLUS                    // +
 969+ 740D 5B 6E D7 69                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 969+ 7411 62 69
 970+ 7413 48 68                        dw      CMOVE                   // cmove
 971+ 7415 5B 6E                        dw      HERE                    // here
 972+ 7417 3F 69                        dw      EXIT                    // ;
 973+ 7419
 974+ 7419              //  ______________________________________________________________________
 975+ 7419              //
 976+ 7419              // (.")         --
 977+ 7419              // Direct procedure compiled by ." and  .(  It executes TYPE.
 978+ 7419                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 978+ 7419             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 978+ 7419             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ 7419             >
 978+ 7419             >                // dummy db directives used to calculate length of namec
 978+ 7419 28 2E 22 29 >                db      '(.")'
 978+ 741D             >len_NFA         defl    $ - temp_NFA
 978+ 741D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ 7419             >
 978+ 7419 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ 741A 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 978+ 741E             >                org     $-1                 // alter last byte of Name just above to set
 978+ 741D A9          >                db      {b $} | END_BIT     // msb as name end
 978+ 741E             >
 978+ 741E C9 73       >                dw      last_NFA            // Link to previous definition Name
 978+ 7420             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 7420 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 978+ 7423             >
 978+ 7423             >
 978+ 7423             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 7423             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 7423             >
 978+ 7423             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 7423 74 69 E5 71                  dw      R_OP, COUNT             // r count
 980+ 7427 82 6A D7 69                  dw      DUP, ONE_PLUS           // dup 1+
 981+ 742B 62 69 BA 69                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 981+ 742F 50 69
 982+ 7431 48 72                        dw      TYPE                    // type
 983+ 7433 3F 69                        dw      EXIT                    // ;
 984+ 7435
 985+ 7435              //  ______________________________________________________________________
 986+ 7435              //
 987+ 7435              // char         -- c
 988+ 7435              // get first character from next input word
 989+ 7435                              Colon_Def CHAR,  "CHAR", is_normal
 989+ 7435             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 989+ 7435             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 989+ 7435             >
 989+ 7435             >                // dummy db directives used to calculate length of namec
 989+ 7435 43 48 41 52 >                db      "CHAR"
 989+ 7439             >len_NFA         defl    $ - temp_NFA
 989+ 7439             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 989+ 7435             >
 989+ 7435 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 989+ 7436 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 989+ 743A             >                org     $-1                 // alter last byte of Name just above to set
 989+ 7439 D2          >                db      {b $} | END_BIT     // msb as name end
 989+ 743A             >
 989+ 743A 19 74       >                dw      last_NFA            // Link to previous definition Name
 989+ 743C             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 989+ 743C CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 989+ 743F             >
 989+ 743F             >
 989+ 743F             >                endif           ; ok        // for other definitions it "points" the correct handler
 989+ 743F             >                // Use of "; ok" to suppress "warning[fwdref]"
 989+ 743F             >
 989+ 743F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 990+ 743F 80 6C D0 73                  dw      BL, WORD                // bl word
 991+ 7443 D7 69 1A 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 992+ 7447 3F 69                        dw      EXIT                    // ;
 993+ 7449
 994+ 7449              //  ______________________________________________________________________
 995+ 7449              //
 996+ 7449              // ,"           --
 997+ 7449              // compiles a string terminated by " as a counted string from next input stream
 998+ 7449                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 998+ 7449             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 998+ 7449             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 998+ 7449             >
 998+ 7449             >                // dummy db directives used to calculate length of namec
 998+ 7449 2C 22       >                db      ',"'
 998+ 744B             >len_NFA         defl    $ - temp_NFA
 998+ 744B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 998+ 7449             >
 998+ 7449 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 998+ 744A 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 998+ 744C             >                org     $-1                 // alter last byte of Name just above to set
 998+ 744B A2          >                db      {b $} | END_BIT     // msb as name end
 998+ 744C             >
 998+ 744C 35 74       >                dw      last_NFA            // Link to previous definition Name
 998+ 744E             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 998+ 744E CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 998+ 7451             >
 998+ 7451             >
 998+ 7451             >                endif           ; ok        // for other definitions it "points" the correct handler
 998+ 7451             >                // Use of "; ok" to suppress "warning[fwdref]"
 998+ 7451             >
 998+ 7451             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 999+ 7451 A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1000+ 7455 D0 73                        dw      WORD                    // word
1001+ 7457 1A 6B D7 69                  dw      CFETCH, ONE_PLUS        // c@ 1+
1002+ 745B 6C 6E                        dw      ALLOT                   // allot
1003+ 745D 51 6C 8B 6E                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1004+ 7461 3F 69                        dw      EXIT
1005+ 7463
1006+ 7463              //  ______________________________________________________________________
1007+ 7463              //
1008+ 7463              // .c           c --
1009+ 7463              // intermediate general purpose string builder, used by ." and .(
1010+ 7463                              Colon_Def DOT_C,  ".C", is_immediate
1010+ 7463             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1010+ 7463             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1010+ 7463             >
1010+ 7463             >                // dummy db directives used to calculate length of namec
1010+ 7463 2E 43       >                db      ".C"
1010+ 7465             >len_NFA         defl    $ - temp_NFA
1010+ 7465             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1010+ 7463             >
1010+ 7463 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1010+ 7464 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1010+ 7466             >                org     $-1                 // alter last byte of Name just above to set
1010+ 7465 C3          >                db      {b $} | END_BIT     // msb as name end
1010+ 7466             >
1010+ 7466 49 74       >                dw      last_NFA            // Link to previous definition Name
1010+ 7468             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1010+ 7468 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1010+ 746B             >
1010+ 746B             >
1010+ 746B             >                endif           ; ok        // for other definitions it "points" the correct handler
1010+ 746B             >                // Use of "; ok" to suppress "warning[fwdref]"
1010+ 746B             >
1010+ 746B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1011+ 746B B8 6D 03 6B                  dw      STATE, FETCH            // state @
1012+ 746F                                                              // if
1013+ 746F 1C 64                        dw      ZBRANCH
1014+ 7471 12 00                        dw      Dot_C_Else - $
1015+ 7473 C9 70 20 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1016+ 7477 D0 73 1A 6B                  dw          WORD, CFETCH        //      word c@
1017+ 747B D7 69 6C 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1018+ 747F                                                              // else
1019+ 747F 07 64                        dw      BRANCH
1020+ 7481 08 00                        dw      Dot_C_Endif - $
1021+ 7483              Dot_C_Else:
1022+ 7483 D0 73 E5 71                  dw          WORD, COUNT, TYPE   //      word count type
1022+ 7487 48 72
1023+ 7489              Dot_C_Endif:                                    // endif
1024+ 7489 3F 69                        dw      EXIT                    ;
1025+ 748B
1026+ 748B              //  ______________________________________________________________________
1027+ 748B              //
1028+ 748B              // ."           c --
1029+ 748B                              Colon_Def DOT_QUOTE,  '."', is_immediate
1029+ 748B             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1029+ 748B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1029+ 748B             >
1029+ 748B             >                // dummy db directives used to calculate length of namec
1029+ 748B 2E 22       >                db      '."'
1029+ 748D             >len_NFA         defl    $ - temp_NFA
1029+ 748D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1029+ 748B             >
1029+ 748B C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1029+ 748C 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1029+ 748E             >                org     $-1                 // alter last byte of Name just above to set
1029+ 748D A2          >                db      {b $} | END_BIT     // msb as name end
1029+ 748E             >
1029+ 748E 63 74       >                dw      last_NFA            // Link to previous definition Name
1029+ 7490             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1029+ 7490 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1029+ 7493             >
1029+ 7493             >
1029+ 7493             >                endif           ; ok        // for other definitions it "points" the correct handler
1029+ 7493             >                // Use of "; ok" to suppress "warning[fwdref]"
1029+ 7493             >
1029+ 7493             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1030+ 7493 A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1031+ 7497 68 74                        dw      DOT_C                   // [compile] .c
1032+ 7499 3F 69                        dw      EXIT                    // ; immediate
1033+ 749B
1034+ 749B              //  ______________________________________________________________________
1035+ 749B              //
1036+ 749B              // .(           c --
1037+ 749B                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1037+ 749B             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1037+ 749B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1037+ 749B             >
1037+ 749B             >                // dummy db directives used to calculate length of namec
1037+ 749B 2E 28       >                db      ".("
1037+ 749D             >len_NFA         defl    $ - temp_NFA
1037+ 749D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1037+ 749B             >
1037+ 749B C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1037+ 749C 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1037+ 749E             >                org     $-1                 // alter last byte of Name just above to set
1037+ 749D A8          >                db      {b $} | END_BIT     // msb as name end
1037+ 749E             >
1037+ 749E 8B 74       >                dw      last_NFA            // Link to previous definition Name
1037+ 74A0             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1037+ 74A0 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1037+ 74A3             >
1037+ 74A3             >
1037+ 74A3             >                endif           ; ok        // for other definitions it "points" the correct handler
1037+ 74A3             >                // Use of "; ok" to suppress "warning[fwdref]"
1037+ 74A3             >
1037+ 74A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1038+ 74A3 A5 63 29 00                  dw      LIT, ")"                // [char] )
1039+ 74A7 68 74                        dw      DOT_C                   // [compile] .c
1040+ 74A9 3F 69                        dw      EXIT                    // ; immediate
1041+ 74AB
1042+ 74AB              //  ______________________________________________________________________
1043+ 74AB              //
1044+ 74AB              // (sgn)        a -- a f
1045+ 74AB              // determines if char in addr a is a sign (+ or -), and in that case increments
1046+ 74AB              // a flag. Returns f as the sign, true for negative, false for positive.
1047+ 74AB              // called by NUMBER and (EXP)
1048+ 74AB                              Colon_Def CSGN,  "(SGN)", is_normal
1048+ 74AB             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1048+ 74AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1048+ 74AB             >
1048+ 74AB             >                // dummy db directives used to calculate length of namec
1048+ 74AB 28 53 47 4E >                db      "(SGN)"
1048+ 74AF 29          >
1048+ 74B0             >len_NFA         defl    $ - temp_NFA
1048+ 74B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1048+ 74AB             >
1048+ 74AB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1048+ 74AC 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1048+ 74B0 29          >
1048+ 74B1             >                org     $-1                 // alter last byte of Name just above to set
1048+ 74B0 A9          >                db      {b $} | END_BIT     // msb as name end
1048+ 74B1             >
1048+ 74B1 9B 74       >                dw      last_NFA            // Link to previous definition Name
1048+ 74B3             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1048+ 74B3 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1048+ 74B6             >
1048+ 74B6             >
1048+ 74B6             >                endif           ; ok        // for other definitions it "points" the correct handler
1048+ 74B6             >                // Use of "; ok" to suppress "warning[fwdref]"
1048+ 74B6             >
1048+ 74B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1049+ 74B6 82 6A D7 69                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1049+ 74BA 1A 6B
1050+ 74BC 82 6A A5 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1050+ 74C0 2D 00 BC 6E
1051+ 74C4                                                              // if
1052+ 74C4 1C 64                        dw      ZBRANCH
1053+ 74C6 12 00                        dw      CSgn_Else_0 - $
1054+ 74C8 55 6A                        dw          DROP                //      drop
1055+ 74CA D7 69                        dw          ONE_PLUS            //      1+
1056+ 74CC 5A 6C CD 6D                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1056+ 74D0 E4 6A
1057+ 74D2 5A 6C                        dw          ONE                 //      1
1058+ 74D4                                                              // else
1059+ 74D4 07 64                        dw      BRANCH
1060+ 74D6 16 00                        dw      CSgn_Endif_0 - $
1061+ 74D8              CSgn_Else_0:
1062+ 74D8 A5 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1062+ 74DC BC 6E
1063+ 74DE                                                              //      if
1064+ 74DE 1C 64                        dw          ZBRANCH
1065+ 74E0 0A 00                        dw          CSgn_Endif_1 - $
1066+ 74E2 D7 69                        dw              ONE_PLUS        //          1+
1067+ 74E4 5A 6C CD 6D                  dw              ONE, DPL        //          1 dpl
1068+ 74E8 E4 6A                        dw              PLUSSTORE       //          +!
1069+ 74EA              CSgn_Endif_1                                    //      endif
1070+ 74EA 51 6C                        dw          ZERO                //      0
1071+ 74EC              CSgn_Endif_0:                                   // endif
1072+ 74EC 3F 69                        dw      EXIT
1073+ 74EE
1074+ 74EE              //  ______________________________________________________________________
1075+ 74EE              //
1076+ 74EE              // (number)     d a -- d1 a1
1077+ 74EE              // using the current BASE parse characters stored in address a
1078+ 74EE              // accumulating a double precision integer d
1079+ 74EE              // the process stops at the first not-convertible character
1080+ 74EE              // A double-number is kept in CPU registers as HLDE.
1081+ 74EE              // On the stack a double number is treated as two single numbers
1082+ 74EE              // where HL is on the top of the stack and DE is the second from top,
1083+ 74EE              // so in the stack memory it appears as LHED.
1084+ 74EE              // Instead, in 2VARIABLE a double number is stored as EDLH.
1085+ 74EE                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1085+ 74EE             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1085+ 74EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1085+ 74EE             >
1085+ 74EE             >                // dummy db directives used to calculate length of namec
1085+ 74EE 28 4E 55 4D >                db      "(NUMBER)"
1085+ 74F2 42 45 52 29 >
1085+ 74F6             >len_NFA         defl    $ - temp_NFA
1085+ 74F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1085+ 74EE             >
1085+ 74EE 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1085+ 74EF 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1085+ 74F3 42 45 52 29 >
1085+ 74F7             >                org     $-1                 // alter last byte of Name just above to set
1085+ 74F6 A9          >                db      {b $} | END_BIT     // msb as name end
1085+ 74F7             >
1085+ 74F7 AB 74       >                dw      last_NFA            // Link to previous definition Name
1085+ 74F9             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1085+ 74F9 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1085+ 74FC             >
1085+ 74FC             >
1085+ 74FC             >                endif           ; ok        // for other definitions it "points" the correct handler
1085+ 74FC             >                // Use of "; ok" to suppress "warning[fwdref]"
1085+ 74FC             >
1085+ 74FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1086+ 74FC                                                              // begin
1087+ 74FC              CNumber_Begin:
1088+ 74FC D7 69                        dw          ONE_PLUS            //      1+
1089+ 74FE 82 6A 50 69                  dw          DUP, TO_R           //      dup >r
1090+ 7502 1A 6B                        dw          CFETCH              //      @
1091+ 7504 C3 6D 03 6B                  dw          BASE, FETCH         //      base @
1092+ 7508 95 64                        dw          DIGIT               //      digit
1093+ 750A                                                              // while
1094+ 750A 1C 64                        dw      ZBRANCH
1095+ 750C 2C 00                        dw      CNumber_While_end - $
1096+ 750E 77 6A                        dw          SWAP                //      swap
1097+ 7510 C3 6D 03 6B                  dw          BASE, FETCH         //      base @
1098+ 7514 77 68                        dw          UM_MUL              //      um*
1099+ 7516 55 6A 8D 6A                  dw          DROP, ROT           //      drop rot
1100+ 751A C3 6D 03 6B                  dw          BASE, FETCH         //      base @
1101+ 751E 77 68                        dw          UM_MUL              //      um*
1102+ 7520 C5 69                        dw          DPLUS               //      d+
1103+ 7522 CD 6D 03 6B                  dw          DPL, FETCH          //      dpl @
1104+ 7526 D7 69                        dw          ONE_PLUS            //      1+
1105+ 7528                                                              //      if
1106+ 7528 1C 64                        dw          ZBRANCH
1107+ 752A 08 00                        dw          CNumber_Endif - $
1108+ 752C 5A 6C CD 6D                  dw              ONE, DPL        //          1 dpl
1109+ 7530 E4 6A                        dw              PLUSSTORE       //          +!
1110+ 7532              CNumber_Endif:                                  //      endif
1111+ 7532 62 69                        dw             R_TO             //      r>  ( balance rp )
1112+ 7534 07 64                        dw      BRANCH
1113+ 7536 C6 FF                        dw      CNumber_Begin - $
1114+ 7538              CNumber_While_end:                              // repeat
1115+ 7538 62 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1116+ 753A 3F 69                        dw      EXIT                    // ;
1117+ 753C
1118+ 753C              //  ______________________________________________________________________
1119+ 753C              //
1120+ 753C              // number       a -- d
1121+ 753C                              Colon_Def NUMBER,  "NUMBER", is_normal
1121+ 753C             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1121+ 753C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1121+ 753C             >
1121+ 753C             >                // dummy db directives used to calculate length of namec
1121+ 753C 4E 55 4D 42 >                db      "NUMBER"
1121+ 7540 45 52       >
1121+ 7542             >len_NFA         defl    $ - temp_NFA
1121+ 7542             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1121+ 753C             >
1121+ 753C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1121+ 753D 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1121+ 7541 45 52       >
1121+ 7543             >                org     $-1                 // alter last byte of Name just above to set
1121+ 7542 D2          >                db      {b $} | END_BIT     // msb as name end
1121+ 7543             >
1121+ 7543 EE 74       >                dw      last_NFA            // Link to previous definition Name
1121+ 7545             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1121+ 7545 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1121+ 7548             >
1121+ 7548             >
1121+ 7548             >                endif           ; ok        // for other definitions it "points" the correct handler
1121+ 7548             >                // Use of "; ok" to suppress "warning[fwdref]"
1121+ 7548             >
1121+ 7548             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1122+ 7548 51 6C 51 6C                  dw      ZERO, ZERO              // 0 0
1123+ 754C 8D 6A                        dw      ROT                     // rot
1124+ 754E B3 74 50 69                  dw      CSGN, TO_R              // (sgn) >r
1125+ 7552 76 6C CD 6D                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1125+ 7556 0E 6B
1126+ 7558 F9 74                        dw      CNUMBER                 // (number)
1127+ 755A 82 6A 1A 6B                  dw      DUP, CFETCH             // dup c@
1128+ 755E A5 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1128+ 7562 BC 6E
1129+ 7564                                                              // if
1130+ 7564 1C 64                        dw      ZBRANCH
1131+ 7566 0A 00                        dw      Number_Endif_1 - $
1132+ 7568 51 6C CD 6D                  dw          ZERO, DPL, STORE    //      0 dpl !
1132+ 756C 0E 6B
1133+ 756E F9 74                        dw          CNUMBER             //      (number)
1134+ 7570              Number_Endif_1:                                 // endif
1135+ 7570 1A 6B 80 6C                  dw      CFETCH, BL              // c@ bl
1136+ 7574 B0 6E 51 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1136+ 7578 30 70
1137+ 757A 62 69                        dw      R_TO                    // r>
1138+ 757C                                                              // if
1139+ 757C 1C 64                        dw      ZBRANCH
1140+ 757E 04 00                        dw      Number_Endif_2 - $
1141+ 7580 2F 6A                        dw          DMINUS              //      dminus
1142+ 7582              Number_Endif_2:                                 // endif
1143+ 7582 3F 69                        dw      EXIT                    // ;
1144+ 7584
1145+ 7584              //  ______________________________________________________________________
1146+ 7584              //
1147+ 7584              // -find        a -- d
1148+ 7584                              Colon_Def LFIND,  "-FIND", is_normal
1148+ 7584             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1148+ 7584             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1148+ 7584             >
1148+ 7584             >                // dummy db directives used to calculate length of namec
1148+ 7584 2D 46 49 4E >                db      "-FIND"
1148+ 7588 44          >
1148+ 7589             >len_NFA         defl    $ - temp_NFA
1148+ 7589             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1148+ 7584             >
1148+ 7584 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1148+ 7585 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1148+ 7589 44          >
1148+ 758A             >                org     $-1                 // alter last byte of Name just above to set
1148+ 7589 C4          >                db      {b $} | END_BIT     // msb as name end
1148+ 758A             >
1148+ 758A 3C 75       >                dw      last_NFA            // Link to previous definition Name
1148+ 758C             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1148+ 758C CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1148+ 758F             >
1148+ 758F             >
1148+ 758F             >                endif           ; ok        // for other definitions it "points" the correct handler
1148+ 758F             >                // Use of "; ok" to suppress "warning[fwdref]"
1148+ 758F             >
1148+ 758F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1149+ 758F 80 6C D0 73                  dw      BL, WORD                // bl word
1150+ 7593 9E 6D 03 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1150+ 7597 03 6B
1151+ 7599 02 65                        dw      C_FIND                  // (find)
1152+ 759B 2F 6F                        dw      QDUP                    // ?dup
1153+ 759D 7C 69                        dw      ZEQUAL                  // 0=
1154+ 759F                                                              // if
1155+ 759F 1C 64                        dw      ZBRANCH
1156+ 75A1 08 00                        dw      LFind_Endif - $
1157+ 75A3 5B 6E                        dw          HERE                //      here
1158+ 75A5 9E 6F                        dw          LATEST              //      latest
1159+ 75A7 02 65                        dw          C_FIND              //      (find)
1160+ 75A9              LFind_Endif:                                    // endif
1161+ 75A9 3F 69                        dw      EXIT                    // ;
1162+ 75AB
1163+ 75AB              //  ______________________________________________________________________
1164+ 75AB              //
1165+ 75AB              // (abort)      --
1166+ 75AB                              Colon_Def CABORT,  "(ABORT)", is_normal
1166+ 75AB             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1166+ 75AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1166+ 75AB             >
1166+ 75AB             >                // dummy db directives used to calculate length of namec
1166+ 75AB 28 41 42 4F >                db      "(ABORT)"
1166+ 75AF 52 54 29    >
1166+ 75B2             >len_NFA         defl    $ - temp_NFA
1166+ 75B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1166+ 75AB             >
1166+ 75AB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1166+ 75AC 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1166+ 75B0 52 54 29    >
1166+ 75B3             >                org     $-1                 // alter last byte of Name just above to set
1166+ 75B2 A9          >                db      {b $} | END_BIT     // msb as name end
1166+ 75B3             >
1166+ 75B3 84 75       >                dw      last_NFA            // Link to previous definition Name
1166+ 75B5             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1166+ 75B5 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1166+ 75B8             >
1166+ 75B8             >
1166+ 75B8             >                endif           ; ok        // for other definitions it "points" the correct handler
1166+ 75B8             >                // Use of "; ok" to suppress "warning[fwdref]"
1166+ 75B8             >
1166+ 75B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1167+ 75B8 91 78                        dw      ABORT                   // abort
1168+ 75BA 3F 69                        dw      EXIT                    // ;
1169+ 75BC
1170+ 75BC              //  ______________________________________________________________________
1171+ 75BC              //
1172+ 75BC              // error        n --
1173+ 75BC              // raise an error
1174+ 75BC              // if WARNING is 0, prints "MSG#n".
1175+ 75BC              // if WARNING is 1, prints line n of screen 4.
1176+ 75BC              // if WARNING is -1 does (ABORT) that normally does ABORT
1177+ 75BC              // value can be negative or beyond block 4.
1178+ 75BC                              Colon_Def ERROR,  "ERROR", is_normal
1178+ 75BC             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1178+ 75BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1178+ 75BC             >
1178+ 75BC             >                // dummy db directives used to calculate length of namec
1178+ 75BC 45 52 52 4F >                db      "ERROR"
1178+ 75C0 52          >
1178+ 75C1             >len_NFA         defl    $ - temp_NFA
1178+ 75C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1178+ 75BC             >
1178+ 75BC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1178+ 75BD 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1178+ 75C1 52          >
1178+ 75C2             >                org     $-1                 // alter last byte of Name just above to set
1178+ 75C1 D2          >                db      {b $} | END_BIT     // msb as name end
1178+ 75C2             >
1178+ 75C2 AB 75       >                dw      last_NFA            // Link to previous definition Name
1178+ 75C4             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1178+ 75C4 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1178+ 75C7             >
1178+ 75C7             >
1178+ 75C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1178+ 75C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1178+ 75C7             >
1178+ 75C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1179+ 75C7 09 6D 03 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1179+ 75CB 96 69
1180+ 75CD                                                              // if
1181+ 75CD 1C 64                        dw      ZBRANCH
1182+ 75CF 04 00                        dw      Error_Endif_1 - $
1183+ 75D1 B5 75                        dw          CABORT              //      (abort)
1184+ 75D3              Error_Endif_1:                                  // endif
1185+ 75D3 5B 6E E5 71                  dw      HERE, COUNT, TYPE       // here count type
1185+ 75D7 48 72
1186+ 75D9 20 74                        dw      C_DOT_QUOTE             // .( ? )
1187+ 75DB 02 3F 20                     db      2, "? "
1188+ 75DE D4 7A                        dw      MESSAGE                 // message  ( forward )
1189+ 75E0 DC 6C 03 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1189+ 75E4 1C 69
1190+ 75E6 65 6D 03 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1190+ 75EA 2F 6F
1191+ 75EC                                                              // if
1192+ 75EC 1C 64                        dw      ZBRANCH
1193+ 75EE 08 00                        dw      Error_Endif_2 - $
1194+ 75F0 6F 6D 03 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1194+ 75F4 77 6A
1195+ 75F6              Error_Endif_2:                                  // endif
1196+ 75F6 4F 78                        dw      QUIT                    // quit ( forward )
1197+ 75F8 3F 69                        dw      EXIT                    // ;
1198+ 75FA              //  ______________________________________________________________________
1199+ 75FA              //
1200+ 75FA              // id.          nfa --
1201+ 75FA                              Colon_Def ID_DOT,  "ID.", is_normal
1201+ 75FA             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1201+ 75FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1201+ 75FA             >
1201+ 75FA             >                // dummy db directives used to calculate length of namec
1201+ 75FA 49 44 2E    >                db      "ID."
1201+ 75FD             >len_NFA         defl    $ - temp_NFA
1201+ 75FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1201+ 75FA             >
1201+ 75FA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1201+ 75FB 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1201+ 75FE             >                org     $-1                 // alter last byte of Name just above to set
1201+ 75FD AE          >                db      {b $} | END_BIT     // msb as name end
1201+ 75FE             >
1201+ 75FE BC 75       >                dw      last_NFA            // Link to previous definition Name
1201+ 7600             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1201+ 7600 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1201+ 7603             >
1201+ 7603             >
1201+ 7603             >                endif           ; ok        // for other definitions it "points" the correct handler
1201+ 7603             >                // Use of "; ok" to suppress "warning[fwdref]"
1201+ 7603             >
1201+ 7603             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1202+ 7603 BC 73 A5 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1202+ 7607 20 00 A5 63
1202+ 760B 60 00
1203+ 760D 6C 73                        dw      FILL                    // fill
1204+ 760F 82 6A E4 6F                  dw      DUP, PFA, LFA           // dup pfa lfa
1204+ 7613 AF 6F
1205+ 7615 47 6A B0 6E                  dw      OVER, SUBTRACT          // over -
1206+ 7619 BC 73 77 6A                  dw      PAD, SWAP               // pad swap
1207+ 761D 48 68                        dw      CMOVE                   // cmove
1208+ 761F BC 73 E5 71                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1208+ 7623 A5 63 1F 00
1209+ 7627 DD 68                        dw      AND_OP                  // and  ( use only lower bits )
1210+ 7629 48 72 66 6F                  dw      TYPE, SPACE             // type
1211+ 762D 3F 69                        dw      EXIT                    // ;
1212+ 762F
1213+ 762F              //  ______________________________________________________________________
1214+ 762F              //
1215+ 762F              // code         -- cccc
1216+ 762F                              Colon_Def CODE,  "CODE", is_normal
1216+ 762F             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1216+ 762F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1216+ 762F             >
1216+ 762F             >                // dummy db directives used to calculate length of namec
1216+ 762F 43 4F 44 45 >                db      "CODE"
1216+ 7633             >len_NFA         defl    $ - temp_NFA
1216+ 7633             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1216+ 762F             >
1216+ 762F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1216+ 7630 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1216+ 7634             >                org     $-1                 // alter last byte of Name just above to set
1216+ 7633 C5          >                db      {b $} | END_BIT     // msb as name end
1216+ 7634             >
1216+ 7634 FA 75       >                dw      last_NFA            // Link to previous definition Name
1216+ 7636             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1216+ 7636 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1216+ 7639             >
1216+ 7639             >
1216+ 7639             >                endif           ; ok        // for other definitions it "points" the correct handler
1216+ 7639             >                // Use of "; ok" to suppress "warning[fwdref]"
1216+ 7639             >
1216+ 7639             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1217+ 7639 8C 75                        dw      LFIND                   // -find
1218+ 763B                                                              // if
1219+ 763B 1C 64                        dw      ZBRANCH
1220+ 763D 10 00                        dw      Code_Endif - $
1221+ 763F 55 6A                        dw          DROP                //      drop
1222+ 7641 0C 70 00 76                  dw          TO_NAME, ID_DOT     //      >name id.
1223+ 7645 A5 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1223+ 7649 D4 7A
1224+ 764B 66 6F                        dw          SPACE               //      space
1225+ 764D              Code_Endif:                                     // endif
1226+ 764D 5B 6E                        dw      HERE                    // here
1227+ 764F                                                              // ( ---- here begins NFA ---- )
1228+ 764F 82 6A 1A 6B                  dw      DUP, CFETCH             // dup c@
1229+ 7653 FB 6C 03 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1229+ 7657 00 6F
1230+ 7659 D7 69 6C 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1231+ 765D 82 6A                        dw      DUP                     // dup
1232+ 765F A5 63                        dw      LIT
1233+ 7661 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1234+ 7663 F8 6A                        dw      TOGGLE                  // toggle
1235+ 7665 5B 6E E1 69                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1236+ 7669 A5 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1236+ 766D F8 6A
1237+ 766F                                                              // ( ---- here is LFA ---- )
1238+ 766F 9E 6F 79 6E                  dw      LATEST, COMMA           // latest ,
1239+ 7673 AC 6D 03 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1239+ 7677 0E 6B
1240+ 7679                                                              // ( ---- here is LFA ---- )
1241+ 7679              //              dw      HERE, CELL_PLUS, COMMA  // ( CFA is empty and PFA yet to exist )
1242+ 7679 3F 69                        dw      EXIT                    // ;
1243+ 767B
1244+ 767B              //  ______________________________________________________________________
1245+ 767B              //
1246+ 767B              // create       -- cccc     ( compile time )
1247+ 767B              //              -- a        ( run time )
1248+ 767B                              Colon_Def CREATE,  "CREATE", is_normal
1248+ 767B             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1248+ 767B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1248+ 767B             >
1248+ 767B             >                // dummy db directives used to calculate length of namec
1248+ 767B 43 52 45 41 >                db      "CREATE"
1248+ 767F 54 45       >
1248+ 7681             >len_NFA         defl    $ - temp_NFA
1248+ 7681             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1248+ 767B             >
1248+ 767B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1248+ 767C 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1248+ 7680 54 45       >
1248+ 7682             >                org     $-1                 // alter last byte of Name just above to set
1248+ 7681 C5          >                db      {b $} | END_BIT     // msb as name end
1248+ 7682             >
1248+ 7682 2F 76       >                dw      last_NFA            // Link to previous definition Name
1248+ 7684             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1248+ 7684 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1248+ 7687             >
1248+ 7687             >
1248+ 7687             >                endif           ; ok        // for other definitions it "points" the correct handler
1248+ 7687             >                // Use of "; ok" to suppress "warning[fwdref]"
1248+ 7687             >
1248+ 7687             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1249+ 7687 36 76 19 71                  dw      CODE, SMUDGE            // code smudge
1250+ 768B A5 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1250+ 768F 8B 6E
1251+ 7691 A5 63 30 6C                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1251+ 7695 79 6E
1252+ 7697 73 71                        dw      C_SEMICOLON_CODE
1253+ 7699                              // this routine is called from the call coded in CFA
1254+ 7699              Create_Ptr:
1255+ 7699
1256+ 7699
1257+ 7699
1258+ 7699                              next
1258+ 7699 DD E9       >                jp      (ix)
1259+ 769B
1260+ 769B              //  ______________________________________________________________________
1261+ 769B              //
1262+ 769B              // [compile]    -- cccc     ( compile time )
1263+ 769B                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1263+ 769B             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1263+ 769B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1263+ 769B             >
1263+ 769B             >                // dummy db directives used to calculate length of namec
1263+ 769B 5B 43 4F 4D >                db      "[COMPILE]"
1263+ 769F 50 49 4C 45 >
1263+ 76A3 5D          >
1263+ 76A4             >len_NFA         defl    $ - temp_NFA
1263+ 76A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1263+ 769B             >
1263+ 769B C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1263+ 769C 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1263+ 76A0 50 49 4C 45 >
1263+ 76A4 5D          >
1263+ 76A5             >                org     $-1                 // alter last byte of Name just above to set
1263+ 76A4 DD          >                db      {b $} | END_BIT     // msb as name end
1263+ 76A5             >
1263+ 76A5 7B 76       >                dw      last_NFA            // Link to previous definition Name
1263+ 76A7             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1263+ 76A7 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1263+ 76AA             >
1263+ 76AA             >
1263+ 76AA             >                endif           ; ok        // for other definitions it "points" the correct handler
1263+ 76AA             >                // Use of "; ok" to suppress "warning[fwdref]"
1263+ 76AA             >
1263+ 76AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1264+ 76AA 8C 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1265+ 76AC 7C 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1266+ 76AE 51 6C 30 70                  dw      ZERO, QERROR            // 0 ?error
1267+ 76B2 55 6A                        dw      DROP                    // drop       (  cfa  )
1268+ 76B4 79 6E                        dw      COMMA                   // ,
1269+ 76B6 3F 69                        dw      EXIT                    // ; immediate
1270+ 76B8
1271+ 76B8              //  ______________________________________________________________________
1272+ 76B8              //
1273+ 76B8              // literal      n --      ( compile time )
1274+ 76B8                              Colon_Def LITERAL,  "LITERAL", is_immediate
1274+ 76B8             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1274+ 76B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1274+ 76B8             >
1274+ 76B8             >                // dummy db directives used to calculate length of namec
1274+ 76B8 4C 49 54 45 >                db      "LITERAL"
1274+ 76BC 52 41 4C    >
1274+ 76BF             >len_NFA         defl    $ - temp_NFA
1274+ 76BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1274+ 76B8             >
1274+ 76B8 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1274+ 76B9 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1274+ 76BD 52 41 4C    >
1274+ 76C0             >                org     $-1                 // alter last byte of Name just above to set
1274+ 76BF CC          >                db      {b $} | END_BIT     // msb as name end
1274+ 76C0             >
1274+ 76C0 9B 76       >                dw      last_NFA            // Link to previous definition Name
1274+ 76C2             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1274+ 76C2 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1274+ 76C5             >
1274+ 76C5             >
1274+ 76C5             >                endif           ; ok        // for other definitions it "points" the correct handler
1274+ 76C5             >                // Use of "; ok" to suppress "warning[fwdref]"
1274+ 76C5             >
1274+ 76C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1275+ 76C5 B8 6D 03 6B                  dw      STATE, FETCH            // state @
1276+ 76C9                                                              // if
1277+ 76C9 1C 64                        dw      ZBRANCH
1278+ 76CB 08 00                        dw      Literal_Endif - $
1279+ 76CD C9 70 A5 63                  dw          COMPILE, LIT        //      compile lit
1280+ 76D1 79 6E                        dw          COMMA               //      ,
1281+ 76D3              Literal_Endif:                                  // endif
1282+ 76D3 3F 69                        dw      EXIT                    // ; immediate
1283+ 76D5
1284+ 76D5              //  ______________________________________________________________________
1285+ 76D5              //
1286+ 76D5              // dliteral     n --      ( compile time )
1287+ 76D5                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1287+ 76D5             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1287+ 76D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1287+ 76D5             >
1287+ 76D5             >                // dummy db directives used to calculate length of namec
1287+ 76D5 44 4C 49 54 >                db      "DLITERAL"
1287+ 76D9 45 52 41 4C >
1287+ 76DD             >len_NFA         defl    $ - temp_NFA
1287+ 76DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1287+ 76D5             >
1287+ 76D5 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1287+ 76D6 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1287+ 76DA 45 52 41 4C >
1287+ 76DE             >                org     $-1                 // alter last byte of Name just above to set
1287+ 76DD CC          >                db      {b $} | END_BIT     // msb as name end
1287+ 76DE             >
1287+ 76DE B8 76       >                dw      last_NFA            // Link to previous definition Name
1287+ 76E0             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1287+ 76E0 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1287+ 76E3             >
1287+ 76E3             >
1287+ 76E3             >                endif           ; ok        // for other definitions it "points" the correct handler
1287+ 76E3             >                // Use of "; ok" to suppress "warning[fwdref]"
1287+ 76E3             >
1287+ 76E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1288+ 76E3 B8 6D 03 6B                  dw      STATE, FETCH            // state @
1289+ 76E7                                                              // if
1290+ 76E7 1C 64                        dw      ZBRANCH
1291+ 76E9 08 00                        dw      DLiteral_Endif - $
1292+ 76EB 77 6A                        dw          SWAP                //      swap
1293+ 76ED C2 76 C2 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1294+ 76F1              DLiteral_Endif:                                 // endif
1295+ 76F1 3F 69                        dw      EXIT                    // ; immediate
1296+ 76F3
1297+ 76F3              //  ______________________________________________________________________
1298+ 76F3              //
1299+ 76F3              // [char]       n --      ( compile time )
1300+ 76F3              // inside colon definition, gets first character from next input word
1301+ 76F3              // and compiles it as literal.
1302+ 76F3                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1302+ 76F3             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1302+ 76F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1302+ 76F3             >
1302+ 76F3             >                // dummy db directives used to calculate length of namec
1302+ 76F3 5B 43 48 41 >                db      "[CHAR]"
1302+ 76F7 52 5D       >
1302+ 76F9             >len_NFA         defl    $ - temp_NFA
1302+ 76F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1302+ 76F3             >
1302+ 76F3 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1302+ 76F4 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1302+ 76F8 52 5D       >
1302+ 76FA             >                org     $-1                 // alter last byte of Name just above to set
1302+ 76F9 DD          >                db      {b $} | END_BIT     // msb as name end
1302+ 76FA             >
1302+ 76FA D5 76       >                dw      last_NFA            // Link to previous definition Name
1302+ 76FC             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1302+ 76FC CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1302+ 76FF             >
1302+ 76FF             >
1302+ 76FF             >                endif           ; ok        // for other definitions it "points" the correct handler
1302+ 76FF             >                // Use of "; ok" to suppress "warning[fwdref]"
1302+ 76FF             >
1302+ 76FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1303+ 76FF 3C 74 C2 76                  dw      CHAR, LITERAL           // char [compile] literal
1304+ 7703 3F 69                        dw      EXIT                    // ; immediate
1305+ 7705
1306+ 7705              //  ______________________________________________________________________
1307+ 7705              //
1308+ 7705              // 0x00         n --      ( compile time )
1309+ 7705                              Colon_Def NUL_WORD,  $00, is_immediate
1309+ 7705             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1309+ 7705             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1309+ 7705             >
1309+ 7705             >                // dummy db directives used to calculate length of namec
1309+ 7705 00          >                db      $00
1309+ 7706             >len_NFA         defl    $ - temp_NFA
1309+ 7706             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1309+ 7705             >
1309+ 7705 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1309+ 7706 00          >                db      $00               // name string in 7-bit ascii, but
1309+ 7707             >                org     $-1                 // alter last byte of Name just above to set
1309+ 7706 80          >                db      {b $} | END_BIT     // msb as name end
1309+ 7707             >
1309+ 7707 F3 76       >                dw      last_NFA            // Link to previous definition Name
1309+ 7709             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1309+ 7709 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1309+ 770C             >
1309+ 770C             >
1309+ 770C             >                endif           ; ok        // for other definitions it "points" the correct handler
1309+ 770C             >                // Use of "; ok" to suppress "warning[fwdref]"
1309+ 770C             >
1309+ 770C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1310+ 770C 65 6D 03 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1310+ 7710 5A 6C
1311+ 7712 F1 6E                        dw      GREATER                 // > if
1312+ 7714                                                              // if
1313+ 7714 1C 64                        dw      ZBRANCH
1314+ 7716 28 00                        dw      Nul_Else_1 - $
1315+ 7718 5A 6C 65 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1315+ 771C E4 6A
1316+ 771E 51 6C 6F 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
1316+ 7722 0E 6B
1317+ 7724 65 6D 03 6B                  dw          BLK, FETCH          //      blk @
1318+ 7728 A5 6C                        dw          BSCR                //      b/scr
1319+ 772A E1 69                        dw          ONE_SUBTRACT        //      1 -
1320+ 772C DD 68                        dw          AND_OP              //      and  ( this is tricky )
1321+ 772E 7C 69                        dw          ZEQUAL              //      0=
1322+ 7730                                                              //      if
1323+ 7730 1C 64                        dw          ZBRANCH
1324+ 7732 08 00                        dw          Nul_Endif_2 - $
1325+ 7734 64 70                        dw              QEXEC           //          ?exec
1326+ 7736 62 69 55 6A                  dw              R_TO, DROP      //          r> drop
1327+ 773A              Nul_Endif_2:                                    //      endif
1328+ 773A 07 64                        dw      BRANCH
1329+ 773C 06 00                        dw      Nul_Endif_1 - $
1330+ 773E              Nul_Else_1:                                     // else
1331+ 773E 62 69 55 6A                  dw          R_TO, DROP          //      r> drop
1332+ 7742              Nul_Endif_1:                                    // endif
1333+ 7742 3F 69                        dw      EXIT                    // ;
1334+ 7744
1335+ 7744              //  ______________________________________________________________________
1336+ 7744              //
1337+ 7744              // ?stack       --
1338+ 7744              // Raise error #1 if stack is empty and you pop it
1339+ 7744              // Raise error #7 if stack is full.
1340+ 7744              // This means SP must always stay between HERE and FFFF
1341+ 7744              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1342+ 7744              // for Next 8K MMU paging this is $DOE8
1343+ 7744                              Colon_Def QSTACK, "?STACK", is_normal
1343+ 7744             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1343+ 7744             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1343+ 7744             >
1343+ 7744             >                // dummy db directives used to calculate length of namec
1343+ 7744 3F 53 54 41 >                db      "?STACK"
1343+ 7748 43 4B       >
1343+ 774A             >len_NFA         defl    $ - temp_NFA
1343+ 774A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1343+ 7744             >
1343+ 7744 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1343+ 7745 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1343+ 7749 43 4B       >
1343+ 774B             >                org     $-1                 // alter last byte of Name just above to set
1343+ 774A CB          >                db      {b $} | END_BIT     // msb as name end
1343+ 774B             >
1343+ 774B 05 77       >                dw      last_NFA            // Link to previous definition Name
1343+ 774D             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1343+ 774D CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1343+ 7750             >
1343+ 7750             >
1343+ 7750             >                endif           ; ok        // for other definitions it "points" the correct handler
1343+ 7750             >                // Use of "; ok" to suppress "warning[fwdref]"
1343+ 7750             >
1343+ 7750             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1344+ 7750 0F 69                        dw      SPFETCH                 // sp@
1345+ 7752 DC 6C 03 6B                  dw      S0, FETCH               // s0 @
1346+ 7756 77 6A CA 6E                  dw      SWAP, ULESS             // swap u<
1347+ 775A 5A 6C 30 70                  dw      ONE, QERROR             // 1 ?error
1348+ 775E 5B 6E                        dw      HERE                    // here
1349+ 7760 DC 6C 03 6B                  dw      S0, FETCH, LESS         // s0 @ <
1349+ 7764 DC 6E
1350+ 7766                                                              // if
1351+ 7766 1C 64                        dw      ZBRANCH
1352+ 7768 14 00                        dw      QStack_Endif - $
1353+ 776A 0F 69                        dw          SPFETCH             //      sp@
1354+ 776C 5B 6E A5 63                  dw          HERE, LIT, 128      //      here 128
1354+ 7770 80 00
1355+ 7772 BA 69 CA 6E                  dw          PLUS, ULESS         //      plus u<
1356+ 7776 A5 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1356+ 777A 30 70
1357+ 777C              QStack_Endif:                                   // endif
1358+ 777C 3F 69                        dw      EXIT                    // ;
1359+ 777E
1360+ 777E
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
 112  777E                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
   1+ 777E              //  ______________________________________________________________________
   2+ 777E              //
   3+ 777E              //  L2.asm
   4+ 777E              //
   5+ 777E              //  Level-2
   6+ 777E              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 777E              //  ______________________________________________________________________
   8+ 777E
   9+ 777E
  10+ 777E              //  ______________________________________________________________________
  11+ 777E              //
  12+ 777E              // interpret    --
  13+ 777E              // This is the text interpreter.
  14+ 777E              // It executes or compiles, depending on STATE, the text coming from
  15+ 777E              // current input stream.
  16+ 777E              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 777E              // the word is interpreted as numeric and converted, using current BASE,
  18+ 777E              // leaving on top of stack a single or double precision number, depending
  19+ 777E              // on the presence of a decimal point.
  20+ 777E              // If the number conversion fails, the terminal is notified with ? followed
  21+ 777E              // by the offending word.
  22+ 777E                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 777E             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 777E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 777E             >
  22+ 777E             >                // dummy db directives used to calculate length of namec
  22+ 777E 49 4E 54 45 >                db      "INTERPRET"
  22+ 7782 52 50 52 45 >
  22+ 7786 54          >
  22+ 7787             >len_NFA         defl    $ - temp_NFA
  22+ 7787             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 777E             >
  22+ 777E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 777F 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 7783 52 50 52 45 >
  22+ 7787 54          >
  22+ 7788             >                org     $-1                 // alter last byte of Name just above to set
  22+ 7787 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 7788             >
  22+ 7788 44 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 778A             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 778A CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 778D             >
  22+ 778D             >
  22+ 778D             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 778D             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 778D             >
  22+ 778D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 778D
  24+ 778D              Interpret_Begin:                                        // begin
  25+ 778D 8C 75                        dw          LFIND                       //      -find
  26+ 778F                                                                      //      if
  27+ 778F 1C 64                        dw          ZBRANCH
  28+ 7791 1A 00                        dw          Interpret_Else_1 - $
  29+ 7793 B8 6D 03 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 7797 DC 6E
  30+ 7799                                                                      //          if
  31+ 7799 1C 64                        dw              ZBRANCH
  32+ 779B 08 00                        dw              Interpret_Else_2 - $
  33+ 779D E7 70                        dw                  COMPILE_XT          //              compile,
  34+ 779F                                                                      //          else
  35+ 779F 07 64                        dw              BRANCH
  36+ 77A1 06 00                        dw              Interpret_Endif_2 - $
  37+ 77A3              Interpret_Else_2:
  38+ 77A3 B8 63 FF 6B                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77A7              Interpret_Endif_2:                                      //          endif
  40+ 77A7                                                                      //      else
  41+ 77A7 07 64                        dw          BRANCH
  42+ 77A9 1A 00                        dw          Interpret_Endif_1 - $
  43+ 77AB              Interpret_Else_1:
  44+ 77AB 5B 6E 45 75                  dw              HERE, NUMBER            //          here number
  45+ 77AF CD 6D 03 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77B3 D7 69
  46+ 77B5                                                                      //          if
  47+ 77B5 1C 64                        dw              ZBRANCH
  48+ 77B7 08 00                        dw              Interpret_Else_3 - $
  49+ 77B9              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77B9              //                                                      //              if
  51+ 77B9              //              dw                  ZBRANCH
  52+ 77B9              //              dw                  Interpret_Endif_4 - $
  53+ 77B9              //              dw                      ONE, ZERO       //                  1 0
  54+ 77B9              //              dw                      TWO_DROP        //                  2drop
  55+ 77B9              //Interpret_Endif_4:                                      //              endif
  56+ 77B9 E0 76                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77BB                                                                      //          else
  58+ 77BB 07 64                        dw              BRANCH
  59+ 77BD 06 00                        dw              Interpret_Endif_3 - $
  60+ 77BF              Interpret_Else_3:
  61+ 77BF 55 6A                        dw                  DROP                //              drop
  62+ 77C1 C2 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77C3              Interpret_Endif_3:                                      //          endif
  64+ 77C3              Interpret_Endif_1:                                      //      endif
  65+ 77C3 4D 77                        dw          QSTACK                      //      ?stack
  66+ 77C5 0E 67                        dw          QTERMINAL                   //      ?terminal
  67+ 77C7                                                                      //      if
  68+ 77C7 1C 64                        dw          ZBRANCH
  69+ 77C9 04 00                        dw          Interpret_Endif_5 - $
  70+ 77CB B5 75                        dw              CABORT                  //          (abort)
  71+ 77CD              Interpret_Endif_5:                                      //      endif
  72+ 77CD 07 64                        dw      BRANCH
  73+ 77CF BE FF                        dw      Interpret_Begin - $
  74+ 77D1 3F 69                        dw      EXIT                            // ;
  75+ 77D3
  76+ 77D3              //  ______________________________________________________________________
  77+ 77D3              //
  78+ 77D3              // vocabulary   -- cccc     ( compile time )
  79+ 77D3              // Defining word used in the form   VOCABULARY cccc
  80+ 77D3              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 77D3              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 77D3              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 77D3              // so new definitions can be inserted in that vocabulary.
  84+ 77D3                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 77D3             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 77D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 77D3             >
  84+ 77D3             >                // dummy db directives used to calculate length of namec
  84+ 77D3 56 4F 43 41 >                db      "VOCABULARY"
  84+ 77D7 42 55 4C 41 >
  84+ 77DB 52 59       >
  84+ 77DD             >len_NFA         defl    $ - temp_NFA
  84+ 77DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 77D3             >
  84+ 77D3 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 77D4 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 77D8 42 55 4C 41 >
  84+ 77DC 52 59       >
  84+ 77DE             >                org     $-1                 // alter last byte of Name just above to set
  84+ 77DD D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 77DE             >
  84+ 77DE 7E 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 77E0             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 77E0 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 77E3             >
  84+ 77E3             >
  84+ 77E3             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 77E3             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 77E3             >
  84+ 77E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 77E3
  86+ 77E3 AD 71                        dw      CBUILDS
  87+ 77E5
  88+ 77E5 A5 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 77E9 79 6E
  89+ 77EB AC 6D 03 6B                  dw      CURRENT, FETCH          // current @
  90+ 77EF 04 6A 79 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 77F3 5B 6E                        dw      HERE                    // here
  92+ 77F5 2D 6D 03 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 77F9 79 6E
  93+ 77FB 2D 6D 0E 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 77FF
  95+ 77FF BE 71                        dw      DOES_TO                 // does>
  96+ 7801              Vocabulary_Does:
  97+ 7801 F9 69                        dw      CELL_PLUS               // cell+
  98+ 7803 9E 6D 0E 6B                  dw      CONTEXT, STORE          // context !
  99+ 7807 3F 69                        dw      EXIT                    // ;
 100+ 7809
 101+ 7809              //  ______________________________________________________________________
 102+ 7809              //
 103+ 7809              // forth        --
 104+ 7809              // Name of the first vocabulary.
 105+ 7809              // It makes FORTH the CONTEXT vocabulary.
 106+ 7809              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7809              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7809              // of a colon definition to be able to select the vocabulary.
 109+ 7809
 110+ 7809                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7809             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7809             >
 110+ 7809             >                // dummy db directives used to calculate length of namec
 110+ 7809 46 4F 52 54 >                db      "FORTH"
 110+ 780D 48          >
 110+ 780E             >len_NFA         defl    $ - temp_NFA
 110+ 780E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7809             >
 110+ 7809 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 780A 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 780E 48          >
 110+ 780F             >                org     $-1                 // alter last byte of Name just above to set
 110+ 780E C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 780F             >
 110+ 780F D3 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 7811             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 7811 CD CB 71    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 7814             >
 110+ 7814             >
 110+ 7814             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 7814             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 7814             >
 110+ 7814             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 7814 01 78                        dw      Vocabulary_Does
 112+ 7816 81 A0                        db      $81, $A0
 113+ 7818              Forth_Latest_Ptr:
 114+ 7818 8B 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 781A              Voclink_Ptr:
 116+ 781A 00 00                        dw      0
 117+ 781C              // Any new vocabulary is structured as follow:
 118+ 781C              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 781C              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 781C              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 781C              //       at creations it points to the null-word of its parent vocabulary
 122+ 781C              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 781C              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 781C              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 781C              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 781C              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 781C              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 781C
 129+ 781C              //  ______________________________________________________________________
 130+ 781C              //
 131+ 781C              // definitions  --
 132+ 781C              // Used in the form  cccc DEFINITIONS
 133+ 781C              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 781C              // vocabulary cccc.
 135+ 781C                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 781C             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 781C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 781C             >
 135+ 781C             >                // dummy db directives used to calculate length of namec
 135+ 781C 44 45 46 49 >                db      "DEFINITIONS"
 135+ 7820 4E 49 54 49 >
 135+ 7824 4F 4E 53    >
 135+ 7827             >len_NFA         defl    $ - temp_NFA
 135+ 7827             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 781C             >
 135+ 781C 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 781D 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 7821 4E 49 54 49 >
 135+ 7825 4F 4E 53    >
 135+ 7828             >                org     $-1                 // alter last byte of Name just above to set
 135+ 7827 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7828             >
 135+ 7828 09 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 782A             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 782A CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 782D             >
 135+ 782D             >
 135+ 782D             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 782D             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 782D             >
 135+ 782D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 782D 9E 6D 03 6B                  dw      CONTEXT, FETCH          // context @
 137+ 7831 AC 6D 0E 6B                  dw      CURRENT, STORE          // current !
 138+ 7835 3F 69                        dw      EXIT                    // ;
 139+ 7837
 140+ 7837              //  ______________________________________________________________________
 141+ 7837              //
 142+ 7837              // (            -- cccc )
 143+ 7837              // the following text is interpreted as a comment until a closing )
 144+ 7837                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7837             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7837             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7837             >
 144+ 7837             >                // dummy db directives used to calculate length of namec
 144+ 7837 28          >                db      "("
 144+ 7838             >len_NFA         defl    $ - temp_NFA
 144+ 7838             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7837             >
 144+ 7837 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7838 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 7839             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7838 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 7839             >
 144+ 7839 1C 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 783B             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 783B CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 783E             >
 144+ 783E             >
 144+ 783E             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 783E             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 783E             >
 144+ 783E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 783E A5 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 7842 D0 73 55 6A                  dw      WORD, DROP              // word drop
 147+ 7846 3F 69                        dw      EXIT                    // ;
 148+ 7848
 149+ 7848              //  ______________________________________________________________________
 150+ 7848              //
 151+ 7848              // quit         --
 152+ 7848              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7848                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7848             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7848             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7848             >
 153+ 7848             >                // dummy db directives used to calculate length of namec
 153+ 7848 51 55 49 54 >                db      "QUIT"
 153+ 784C             >len_NFA         defl    $ - temp_NFA
 153+ 784C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7848             >
 153+ 7848 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7849 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 784D             >                org     $-1                 // alter last byte of Name just above to set
 153+ 784C D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 784D             >
 153+ 784D 37 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 784F             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 784F CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 7852             >
 153+ 7852             >
 153+ 7852             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 7852             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 7852             >
 153+ 7852             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 7852
 155+ 7852 2E 6E 03 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7856 8D 67 55 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 785A 51 6C 2E 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 785E 0E 6B
 158+ 7860 51 6C 65 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 7864 0E 6B
 159+ 7866 F4 70                        dw      SQUARED_OPEN            // [compile] [
 160+ 7868                                                              // begin
 161+ 7868              Quit_Begin:
 162+ 7868 E5 6C 03 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 786C 32 69
 163+ 786E FC 65                        dw      CR                      //      cr
 164+ 7870 4E 73                        dw      QUERY                   //      query
 165+ 7872              Next_Breakpoint_1:
 166+ 7872 8A 77                        dw      INTERPRET               //      interpret
 167+ 7874 B8 6D 03 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 7878 7C 69
 168+ 787A                                                              //      if
 169+ 787A 1C 64                        dw      ZBRANCH
 170+ 787C 07 00                        dw      Quit_Endif - $
 171+ 787E 20 74                        dw          C_DOT_QUOTE
 172+ 7880 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 7883              Quit_Endif:                                     //      else
 174+ 7883                                                              // again
 175+ 7883 07 64                        dw      BRANCH
 176+ 7885 E3 FF                        dw      Quit_Begin - $
 177+ 7887 3F 69                        dw      EXIT                    // ;
 178+ 7889
 179+ 7889              //  ______________________________________________________________________
 180+ 7889              //
 181+ 7889              // abort        --
 182+ 7889                              Colon_Def ABORT, "ABORT", is_normal
 182+ 7889             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 7889             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 7889             >
 182+ 7889             >                // dummy db directives used to calculate length of namec
 182+ 7889 41 42 4F 52 >                db      "ABORT"
 182+ 788D 54          >
 182+ 788E             >len_NFA         defl    $ - temp_NFA
 182+ 788E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 7889             >
 182+ 7889 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 788A 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 788E 54          >
 182+ 788F             >                org     $-1                 // alter last byte of Name just above to set
 182+ 788E D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 788F             >
 182+ 788F 48 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 7891             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 7891 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 7894             >
 182+ 7894             >
 182+ 7894             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 7894             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 7894             >
 182+ 7894             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 7894 DC 6C 03 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 7898 1C 69
 184+ 789A 5C 71                        dw      DECIMAL                 // decimal
 185+ 789C 11 78                        dw      FORTH                   // [compile] forth
 186+ 789E 2A 78                        dw      DEFINITIONS             // definitions
 187+ 78A0              Autoexec_Ptr:
 188+ 78A0 98 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78A2 4F 78                        dw      QUIT                    // quit
 190+ 78A4 3F 69                        dw      EXIT                    // ;
 191+ 78A6
 192+ 78A6              //  ______________________________________________________________________
 193+ 78A6              //
 194+ 78A6              // warm         --
 195+ 78A6                              Colon_Def WARM, "WARM", is_normal
 195+ 78A6             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78A6             >
 195+ 78A6             >                // dummy db directives used to calculate length of namec
 195+ 78A6 57 41 52 4D >                db      "WARM"
 195+ 78AA             >len_NFA         defl    $ - temp_NFA
 195+ 78AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78A6             >
 195+ 78A6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78A7 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78AB             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78AA CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78AB             >
 195+ 78AB 89 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78AD             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78AD CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78B0             >
 195+ 78B0             >
 195+ 78B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78B0             >
 195+ 78B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78B0 3D 7C                        dw      BLK_INIT                // blk-init
 197+ 78B2 46 84                        dw      SPLASH                  // splash
 198+ 78B4 A5 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78B8 49 6F
 199+ 78BA 91 78                        dw      ABORT                   // abort
 200+ 78BC 3F 69                        dw      EXIT                    // exit
 201+ 78BE
 202+ 78BE              //  ______________________________________________________________________
 203+ 78BE              //
 204+ 78BE              // cold         --
 205+ 78BE                              Colon_Def COLD, "COLD", is_normal
 205+ 78BE             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78BE             >
 205+ 78BE             >                // dummy db directives used to calculate length of namec
 205+ 78BE 43 4F 4C 44 >                db      "COLD"
 205+ 78C2             >len_NFA         defl    $ - temp_NFA
 205+ 78C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78BE             >
 205+ 78BE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78BF 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78C3             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78C2 C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78C3             >
 205+ 78C3 A6 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78C5             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78C5 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78C8             >
 205+ 78C8             >
 205+ 78C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78C8             >
 205+ 78C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78C8 A5 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78CC A5 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78D0 03 6B                        dw      FETCH                   // @
 209+ 78D2 A5 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78D6 BA 69
 210+ 78D8 A5 63 14 00                  dw      LIT, 20                 // 20
 211+ 78DC 48 68                        dw      CMOVE
 212+ 78DE A5 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 78E2 03 6B                        dw      FETCH                   // @
 214+ 78E4 A5 63 18 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 78E8 0E 6B                        dw      STORE                   // !
 216+ 78EA 51 6C 5B 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 78EE 0E 6B
 217+ 78F0 39 6D 03 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 78F4 82 6A
 218+ 78F6 FE 6D 0E 6B                  dw      USE, STORE              // use !
 219+ 78FA 09 6E 0E 6B                  dw      PREV, STORE             // prev !
 220+ 78FE A5 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 7902 1E 6E 0E 6B
 221+ 7906              //              dw      LIT, 8
 222+ 7906              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 7906 63 6C 50 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 790A 0E 6B
 224+ 790C AD 78        Warm_Start:     dw      WARM
 225+ 790E C5 78        Cold_Start:     dw      COLD
 226+ 7910 3F 69                        dw      EXIT
 227+ 7912
 228+ 7912              //  ______________________________________________________________________
 229+ 7912              WarmRoutine:
 230+ 7912              ColdRoutine:
 231+ 7912 DD 21 98 63                  ld      ix, Next_Ptr
 232+ 7916 D9                           exx
 233+ 7917 E5                           push    hl
 234+ 7918 D9                           exx
 235+ 7919
 236+ 7919 ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 791D ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 7921              //              nop
 239+ 7921 2A 7A 63                     ld      hl, (R0_origin)
 240+ 7924              //              nop
 241+ 7924                              ldrphl
 241+ 7924 22 96 63    >                ld      (RP_Pointer),hl
 242+ 7927 01 0C 79                     ld      bc, Warm_Start
 243+ 792A 38 02                        jr      c, Warm_Skip
 244+ 792C 03                           inc     bc
 245+ 792D 03                           inc     bc
 246+ 792E              Warm_Skip:
 247+ 792E                              next
 247+ 792E DD E9       >                jp      (ix)
 248+ 7930
 249+ 7930              //  ______________________________________________________________________
 250+ 7930              //
 251+ 7930              // basic        --
 252+ 7930                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7930             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7930             >
 252+ 7930             >                // dummy db directives used to calculate length of namec
 252+ 7930 42 41 53 49 >                db      "BASIC"
 252+ 7934 43          >
 252+ 7935             >len_NFA         defl    $ - temp_NFA
 252+ 7935             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7930             >
 252+ 7930 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7931 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 7935 43          >
 252+ 7936             >                org     $-1                 // alter last byte of Name just above to set
 252+ 7935 C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 7936             >
 252+ 7936 BE 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 7938             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 7938 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 252+ 7938 ~           >
 252+ 7938 ~           >
 252+ 7938             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 7938             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 7938             >
 252+ 7938             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 7938 C1                           pop     bc
 254+ 7939 21 00 00                     ld      hl, 0
 255+ 793C 39                           add     hl, sp
 256+ 793D ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 7941              //              nop
 258+ 7941 22 6E 63                     ld      (SP_Basic),hl
 259+ 7944 D9                           exx
 260+ 7945 E1                           pop     hl
 261+ 7946 D9                           exx
 262+ 7947 C9                           ret     // to Basic
 263+ 7948
 264+ 7948              //  ______________________________________________________________________
 265+ 7948              //
 266+ 7948              // +-           n1 n2 -- n3
 267+ 7948              // leaves n1 with the sign of n2 as n3.
 268+ 7948                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 7948             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 7948             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 7948             >
 268+ 7948             >                // dummy db directives used to calculate length of namec
 268+ 7948 2B 2D       >                db      "+-"
 268+ 794A             >len_NFA         defl    $ - temp_NFA
 268+ 794A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 7948             >
 268+ 7948 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 7949 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 794B             >                org     $-1                 // alter last byte of Name just above to set
 268+ 794A AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 794B             >
 268+ 794B 30 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 794D             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 794D CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7950             >
 268+ 7950             >
 268+ 7950             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7950             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7950             >
 268+ 7950             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7950 96 69                        dw      ZLESS                   // 0<
 270+ 7952                                                              // if
 271+ 7952 1C 64                        dw      ZBRANCH
 272+ 7954 04 00                        dw      Plus_Minus_Endif - $
 273+ 7956 1B 6A                        dw          MINUS               //      minus
 274+ 7958              Plus_Minus_Endif:                               // endif
 275+ 7958 3F 69                        dw      EXIT                    // ;
 276+ 795A
 277+ 795A              //  ______________________________________________________________________
 278+ 795A              //
 279+ 795A              // d+-          d1 n -- d2
 280+ 795A              // leaves d1 with the sign of n as d2.
 281+ 795A                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 795A             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 795A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 795A             >
 281+ 795A             >                // dummy db directives used to calculate length of namec
 281+ 795A 44 2B 2D    >                db      "D+-"
 281+ 795D             >len_NFA         defl    $ - temp_NFA
 281+ 795D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 795A             >
 281+ 795A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 795B 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 795E             >                org     $-1                 // alter last byte of Name just above to set
 281+ 795D AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 795E             >
 281+ 795E 48 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7960             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7960 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 7963             >
 281+ 7963             >
 281+ 7963             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 7963             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 7963             >
 281+ 7963             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 7963 96 69                        dw      ZLESS                   // 0<
 283+ 7965                                                              // if
 284+ 7965 1C 64                        dw      ZBRANCH
 285+ 7967 04 00                        dw      DPlus_Minus_Endif - $
 286+ 7969 2F 6A                        dw          DMINUS              //      dminus
 287+ 796B              DPlus_Minus_Endif:                              // endif
 288+ 796B 3F 69                        dw      EXIT                    // ;
 289+ 796D
 290+ 796D              //  ______________________________________________________________________
 291+ 796D              //
 292+ 796D              // abs          n1 -- n2
 293+ 796D                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 796D             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 796D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 796D             >
 293+ 796D             >                // dummy db directives used to calculate length of namec
 293+ 796D 41 42 53    >                db      "ABS"
 293+ 7970             >len_NFA         defl    $ - temp_NFA
 293+ 7970             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 796D             >
 293+ 796D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 796E 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 7971             >                org     $-1                 // alter last byte of Name just above to set
 293+ 7970 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 7971             >
 293+ 7971 5A 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 7973             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 7973 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 7976             >
 293+ 7976             >
 293+ 7976             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 7976             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 7976             >
 293+ 7976             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 7976 82 6A                        dw      DUP                     // dup
 295+ 7978 4D 79                        dw      PLUS_MINUS              // +-
 296+ 797A 3F 69                        dw      EXIT                    // ;
 297+ 797C
 298+ 797C              //  ______________________________________________________________________
 299+ 797C              //
 300+ 797C              // dabs         d1 -- d2
 301+ 797C                              Colon_Def DABS, "DABS", is_normal
 301+ 797C             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 797C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 797C             >
 301+ 797C             >                // dummy db directives used to calculate length of namec
 301+ 797C 44 41 42 53 >                db      "DABS"
 301+ 7980             >len_NFA         defl    $ - temp_NFA
 301+ 7980             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 797C             >
 301+ 797C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 797D 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 7981             >                org     $-1                 // alter last byte of Name just above to set
 301+ 7980 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 7981             >
 301+ 7981 6D 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 7983             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 7983 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 7986             >
 301+ 7986             >
 301+ 7986             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 7986             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 7986             >
 301+ 7986             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 7986 82 6A                        dw      DUP                     // dup
 303+ 7988 60 79                        dw      DPLUS_MINUS             // d+-
 304+ 798A 3F 69                        dw      EXIT                    // ;
 305+ 798C
 306+ 798C              //  ______________________________________________________________________
 307+ 798C              //
 308+ 798C              // m*           n1 n2 -- d
 309+ 798C              // multiply two integer giving a double
 310+ 798C                              Colon_Def MMUL, "M*", is_normal
 310+ 798C             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 798C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 798C             >
 310+ 798C             >                // dummy db directives used to calculate length of namec
 310+ 798C 4D 2A       >                db      "M*"
 310+ 798E             >len_NFA         defl    $ - temp_NFA
 310+ 798E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 798C             >
 310+ 798C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 798D 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 798F             >                org     $-1                 // alter last byte of Name just above to set
 310+ 798E AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 798F             >
 310+ 798F 7C 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 7991             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 7991 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 7994             >
 310+ 7994             >
 310+ 7994             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 7994             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 7994             >
 310+ 7994             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 7994 D7 6A FE 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 7998 50 69
 312+ 799A 73 79 77 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 799E 73 79 77 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79A2 62 69 60 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79A6 3F 69                        dw      EXIT                    // ;
 316+ 79A8
 317+ 79A8              //  ______________________________________________________________________
 318+ 79A8              //
 319+ 79A8              // sm/rem       d n -- q r
 320+ 79A8              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 79A8              // the remainder has the sign of d.
 322+ 79A8                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 79A8             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 79A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 79A8             >
 322+ 79A8             >                // dummy db directives used to calculate length of namec
 322+ 79A8 53 4D 2F 52 >                db      "SM/REM"
 322+ 79AC 45 4D       >
 322+ 79AE             >len_NFA         defl    $ - temp_NFA
 322+ 79AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 79A8             >
 322+ 79A8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 79A9 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 79AD 45 4D       >
 322+ 79AF             >                org     $-1                 // alter last byte of Name just above to set
 322+ 79AE CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 79AF             >
 322+ 79AF 8C 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 79B1             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 79B1 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 79B4             >
 322+ 79B4             >
 322+ 79B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 79B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 79B4             >
 322+ 79B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 79B4 47 6A 50 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 79B8 50 69
 324+ 79BA 83 79 74 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 79BE 73 79
 325+ 79C0 A6 68                        dw      UMDIVMOD                // um/mod
 326+ 79C2 62 69                        dw      R_TO                    // r>
 327+ 79C4 74 69 FE 68                  dw      R_OP, XOR_OP            // r xor
 328+ 79C8 4D 79 77 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 79CC 62 69                        dw      R_TO                    // r>
 330+ 79CE 4D 79 77 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 79D2 3F 69                        dw      EXIT                    // ;
 332+ 79D4
 333+ 79D4              //  ______________________________________________________________________
 334+ 79D4              //
 335+ 79D4              // fm/mod       d n -- q r
 336+ 79D4              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 79D4              // the remainder has the sign of d.
 338+ 79D4                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 79D4             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 79D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 79D4             >
 338+ 79D4             >                // dummy db directives used to calculate length of namec
 338+ 79D4 46 4D 2F 4D >                db      "FM/MOD"
 338+ 79D8 4F 44       >
 338+ 79DA             >len_NFA         defl    $ - temp_NFA
 338+ 79DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 79D4             >
 338+ 79D4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 79D5 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 79D9 4F 44       >
 338+ 79DB             >                org     $-1                 // alter last byte of Name just above to set
 338+ 79DA C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 79DB             >
 338+ 79DB A8 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 79DD             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 79DD CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 79E0             >
 338+ 79E0             >
 338+ 79E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 79E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 79E0             >
 338+ 79E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 79E0 82 6A 50 69                  dw      DUP, TO_R               // dup >r
 340+ 79E4 B1 79                        dw      SMDIVM
 341+ 79E6 47 6A 82 6A                  dw      OVER, DUP
 342+ 79EA 7C 69 7C 69                  dw      ZEQUAL, ZEQUAL
 343+ 79EE 77 6A 96 69                  dw      SWAP, ZLESS
 344+ 79F2 74 69 96 69                  dw      R_OP, ZLESS
 345+ 79F6 FE 68 DD 68                  dw      XOR_OP, AND_OP
 346+ 79FA 1C 64                        dw      ZBRANCH
 347+ 79FC 10 00                        dw      Fm_Mod_Else - $
 348+ 79FE E1 69                        dw          ONE_SUBTRACT
 349+ 7A00 77 6A 62 69                  dw          SWAP, R_TO
 350+ 7A04 BA 69 77 6A                  dw          PLUS, SWAP
 351+ 7A08 07 64                        dw      BRANCH
 352+ 7A0A 06 00                        dw      Fm_Mod_Endif - $
 353+ 7A0C              Fm_Mod_Else:
 354+ 7A0C 62 69 55 6A                  dw          R_TO, DROP
 355+ 7A10              Fm_Mod_Endif:
 356+ 7A10 3F 69                        dw      EXIT
 357+ 7A12              //              dw      TWO_DUP                 // 2dup
 358+ 7A12              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 7A12              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 7A12              //              dw      UMDIVMOD                // um/mod
 361+ 7A12              //              dw      SWAP                    // swap
 362+ 7A12              //              dw      II, ZLESS               // i'
 363+ 7A12              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 7A12              //              dw      R_TO                    // r>
 365+ 7A12              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 7A12              //              dw      R_OP                    // r@
 367+ 7A12              //              dw      ZLESS                   // i'
 368+ 7A12              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 7A12              //              dw      R_TO                    // r>
 370+ 7A12              //              dw      PLUS_MINUS              // +- swap
 371+ 7A12              //              dw      EXIT                    // ;
 372+ 7A12
 373+ 7A12              //  ______________________________________________________________________
 374+ 7A12              //
 375+ 7A12              // m/mod        d n -- q r
 376+ 7A12              // multiply two integer giving a double
 377+ 7A12                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 7A12             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 7A12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 7A12             >
 377+ 7A12             >                // dummy db directives used to calculate length of namec
 377+ 7A12 4D 2F 4D 4F >                db      "M/MOD"
 377+ 7A16 44          >
 377+ 7A17             >len_NFA         defl    $ - temp_NFA
 377+ 7A17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 7A12             >
 377+ 7A12 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 7A13 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 7A17 44          >
 377+ 7A18             >                org     $-1                 // alter last byte of Name just above to set
 377+ 7A17 C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 7A18             >
 377+ 7A18 D4 79       >                dw      last_NFA            // Link to previous definition Name
 377+ 7A1A             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 7A1A CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A1D             >
 377+ 7A1D             >
 377+ 7A1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A1D             >
 377+ 7A1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A1D B1 79                        dw      SMDIVM
 379+ 7A1F 3F 69                        dw      EXIT                    // ;
 380+ 7A21
 381+ 7A21              //  ______________________________________________________________________
 382+ 7A21              //
 383+ 7A21              // m/           d n -- q
 384+ 7A21              // multiply two integer giving a double
 385+ 7A21                              Colon_Def MDIV, "M/", is_normal
 385+ 7A21             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A21             >
 385+ 7A21             >                // dummy db directives used to calculate length of namec
 385+ 7A21 4D 2F       >                db      "M/"
 385+ 7A23             >len_NFA         defl    $ - temp_NFA
 385+ 7A23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A21             >
 385+ 7A21 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A22 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A24             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A23 AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A24             >
 385+ 7A24 12 7A       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A26             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A26 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A29             >
 385+ 7A29             >
 385+ 7A29             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A29             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A29             >
 385+ 7A29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A29 1A 7A 5E 6A                  dw      MDIVM, NIP
 387+ 7A2D 3F 69                        dw      EXIT                    // ;
 388+ 7A2F
 389+ 7A2F              //  ______________________________________________________________________
 390+ 7A2F              //
 391+ 7A2F              // *            n1 n2 -- n3
 392+ 7A2F              // multiply two integer
 393+ 7A2F                              Colon_Def MUL, "*", is_normal
 393+ 7A2F             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A2F             >
 393+ 7A2F             >                // dummy db directives used to calculate length of namec
 393+ 7A2F 2A          >                db      "*"
 393+ 7A30             >len_NFA         defl    $ - temp_NFA
 393+ 7A30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A2F             >
 393+ 7A2F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A30 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A31             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A30 AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A31             >
 393+ 7A31 21 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A33             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A33 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A36             >
 393+ 7A36             >
 393+ 7A36             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A36             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A36             >
 393+ 7A36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A36 91 79 55 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A3A 3F 69                        dw      EXIT                    // ;
 396+ 7A3C
 397+ 7A3C              //  ______________________________________________________________________
 398+ 7A3C              //
 399+ 7A3C              // /mod         n1 n2 -- n3 n4
 400+ 7A3C              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A3C              // The remainder has the sign of n1
 402+ 7A3C                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A3C             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A3C             >
 402+ 7A3C             >                // dummy db directives used to calculate length of namec
 402+ 7A3C 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A40             >len_NFA         defl    $ - temp_NFA
 402+ 7A40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A3C             >
 402+ 7A3C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A3D 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A41             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A40 C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A41             >
 402+ 7A41 2F 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A43             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A43 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A46             >
 402+ 7A46             >
 402+ 7A46             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A46             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A46             >
 402+ 7A46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A46 50 69 9E 6E                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A4A 62 69
 404+ 7A4C 1A 7A                        dw      MDIVM                   // m/mod
 405+ 7A4E 3F 69                        dw      EXIT                    // ;
 406+ 7A50
 407+ 7A50              //  ______________________________________________________________________
 408+ 7A50              //
 409+ 7A50              // /            n1 n2 -- n3
 410+ 7A50              // division
 411+ 7A50                              Colon_Def DIV, "/", is_normal
 411+ 7A50             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A50             >
 411+ 7A50             >                // dummy db directives used to calculate length of namec
 411+ 7A50 2F          >                db      "/"
 411+ 7A51             >len_NFA         defl    $ - temp_NFA
 411+ 7A51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A50             >
 411+ 7A50 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A51 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A52             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A51 AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A52             >
 411+ 7A52 3C 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A54             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A54 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A57             >
 411+ 7A57             >
 411+ 7A57             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A57             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A57             >
 411+ 7A57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A57 43 7A 5E 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A5B 3F 69                        dw      EXIT                    // ;
 414+ 7A5D
 415+ 7A5D              //  ______________________________________________________________________
 416+ 7A5D              //
 417+ 7A5D              // mod          n1 n2 -- n3
 418+ 7A5D                              Colon_Def MOD, "MOD", is_normal
 418+ 7A5D             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A5D             >
 418+ 7A5D             >                // dummy db directives used to calculate length of namec
 418+ 7A5D 4D 4F 44    >                db      "MOD"
 418+ 7A60             >len_NFA         defl    $ - temp_NFA
 418+ 7A60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A5D             >
 418+ 7A5D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A5E 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A61             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A60 C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A61             >
 418+ 7A61 50 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A63             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A63 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A66             >
 418+ 7A66             >
 418+ 7A66             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A66             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A66             >
 418+ 7A66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A66 43 7A 55 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7A6A 3F 69                        dw      EXIT                    // ;
 421+ 7A6C
 422+ 7A6C              //  ______________________________________________________________________
 423+ 7A6C              //
 424+ 7A6C              // */mod        n1 n2 n3 -- n4 n5
 425+ 7A6C              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7A6C              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7A6C              // avoids loss of precision
 428+ 7A6C                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7A6C             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7A6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7A6C             >
 428+ 7A6C             >                // dummy db directives used to calculate length of namec
 428+ 7A6C 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7A70 44          >
 428+ 7A71             >len_NFA         defl    $ - temp_NFA
 428+ 7A71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7A6C             >
 428+ 7A6C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7A6D 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7A71 44          >
 428+ 7A72             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7A71 C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7A72             >
 428+ 7A72 5D 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7A74             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7A74 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7A77             >
 428+ 7A77             >
 428+ 7A77             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7A77             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7A77             >
 428+ 7A77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7A77 50 69 91 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7A7B 62 69 1A 7A                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7A7F 3F 69                        dw      EXIT                    // ;
 432+ 7A81
 433+ 7A81              //  ______________________________________________________________________
 434+ 7A81              //
 435+ 7A81              // */          n1 n2 n3 -- n4
 436+ 7A81              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7A81                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7A81             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7A81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7A81             >
 437+ 7A81             >                // dummy db directives used to calculate length of namec
 437+ 7A81 2A 2F       >                db      "*/"
 437+ 7A83             >len_NFA         defl    $ - temp_NFA
 437+ 7A83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7A81             >
 437+ 7A81 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7A82 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7A84             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7A83 AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7A84             >
 437+ 7A84 6C 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7A86             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7A86 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7A89             >
 437+ 7A89             >
 437+ 7A89             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7A89             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7A89             >
 437+ 7A89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7A89 74 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7A8B 5E 6A                        dw     NIP                      // nip
 440+ 7A8D 3F 69                        dw     EXIT                     // ;
 441+ 7A8F
 442+ 7A8F
 443+ 7A8F              //  ______________________________________________________________________
 444+ 7A8F              //
 445+ 7A8F              // m/mod        ud1 u2 -- u3 ud4
 446+ 7A8F              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7A8F              // All terms are unsigned.
 448+ 7A8F              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7A8F              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7A8F              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7A8F              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7A8F              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7A8F              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7A8F              //              dw      EXIT                    // ;
 455+ 7A8F
 456+ 7A8F              //  ______________________________________________________________________
 457+ 7A8F              //
 458+ 7A8F              // (line)       n1 n2 -- a b
 459+ 7A8F              // sends the line n1 of block n2 to the disk buffer.
 460+ 7A8F              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7A8F                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7A8F             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7A8F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7A8F             >
 461+ 7A8F             >                // dummy db directives used to calculate length of namec
 461+ 7A8F 28 4C 49 4E >                db      "(LINE)"
 461+ 7A93 45 29       >
 461+ 7A95             >len_NFA         defl    $ - temp_NFA
 461+ 7A95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7A8F             >
 461+ 7A8F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7A90 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7A94 45 29       >
 461+ 7A96             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7A95 A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7A96             >
 461+ 7A96 81 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7A98             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7A98 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7A9B             >
 461+ 7A9B             >
 461+ 7A9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7A9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7A9B             >
 461+ 7A9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7A9B 50 69                        dw      TO_R                    // >r
 463+ 7A9D FF 6B                        dw      NOOP                    // noop
 464+ 7A9F 8B 6C                        dw      CL                      // c/l
 465+ 7AA1 98 6C 74 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7AA5 62 69                        dw      R_TO                    // r>
 467+ 7AA7 A5 6C 33 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7AAB BA 69
 468+ 7AAD 5C 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7AAF BA 69                        dw      PLUS                    // +
 470+ 7AB1 FF 6B                        dw      NOOP                    // noop
 471+ 7AB3 8B 6C                        dw      CL                      // c/l
 472+ 7AB5 3F 69                        dw      EXIT                    // ;
 473+ 7AB7
 474+ 7AB7              //  ______________________________________________________________________
 475+ 7AB7              //
 476+ 7AB7              // .line        n1 n2 --
 477+ 7AB7              // Sends to output line  n1  of screen n2.
 478+ 7AB7                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7AB7             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7AB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7AB7             >
 478+ 7AB7             >                // dummy db directives used to calculate length of namec
 478+ 7AB7 2E 4C 49 4E >                db      ".LINE"
 478+ 7ABB 45          >
 478+ 7ABC             >len_NFA         defl    $ - temp_NFA
 478+ 7ABC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7AB7             >
 478+ 7AB7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7AB8 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7ABC 45          >
 478+ 7ABD             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7ABC C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7ABD             >
 478+ 7ABD 8F 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7ABF             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7ABF CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7AC2             >
 478+ 7AC2             >
 478+ 7AC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7AC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7AC2             >
 478+ 7AC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7AC2 98 7A 69 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7AC6 48 72
 480+ 7AC8 3F 69                        dw      EXIT                    // ;
 481+ 7ACA
 482+ 7ACA              //  ______________________________________________________________________
 483+ 7ACA              //
 484+ 7ACA              // message       n1 n2 --
 485+ 7ACA              // prints error message to current channel.
 486+ 7ACA              // if WARNING is 0, prints "MSG#n".
 487+ 7ACA              // if WARNING is 1, prints line n of screen 4.
 488+ 7ACA              // if WARNING is -1, see ERROR
 489+ 7ACA              // value can be negative or beyond block 4.
 490+ 7ACA                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7ACA             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7ACA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7ACA             >
 490+ 7ACA             >                // dummy db directives used to calculate length of namec
 490+ 7ACA 4D 45 53 53 >                db      "MESSAGE"
 490+ 7ACE 41 47 45    >
 490+ 7AD1             >len_NFA         defl    $ - temp_NFA
 490+ 7AD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7ACA             >
 490+ 7ACA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7ACB 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7ACF 41 47 45    >
 490+ 7AD2             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7AD1 C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7AD2             >
 490+ 7AD2 B7 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7AD4             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7AD4 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7AD7             >
 490+ 7AD7             >
 490+ 7AD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7AD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7AD7             >
 490+ 7AD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7AD7 09 6D 03 6B                  dw      WARNING, FETCH          // warning @
 492+ 7ADB                                                              // if
 493+ 7ADB 1C 64                        dw      ZBRANCH
 494+ 7ADD 18 00                        dw      Message_Else - $
 495+ 7ADF A5 63 04 00                  dw          LIT, 4              //      4
 496+ 7AE3 90 6D 03 6B                  dw          OFFSET, FETCH       //      offset @
 497+ 7AE7 A5 6C 54 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7AEB B0 6E
 498+ 7AED BF 7A                        dw          DOT_LINE            //      .line
 499+ 7AEF 66 6F                        dw          SPACE               //      space
 500+ 7AF1                                                              // else
 501+ 7AF1
 502+ 7AF1 07 64                        dw      BRANCH
 503+ 7AF3 0B 00                        dw      Message_ENdif - $
 504+ 7AF5              Message_Else:
 505+ 7AF5 20 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7AF7 04 6D 73 67                  db          4, "msg#"
 506+ 7AFB 23
 507+ 7AFC 38 83                        dw          DOT                 //      .  ( forward )
 508+ 7AFE              Message_ENdif:                                  // endif
 509+ 7AFE 3F 69                        dw      EXIT                    // ;
 510+ 7B00
 511+ 7B00
 512+ 7B00              //  ______________________________________________________________________
 513+ 7B00              //
 514+ 7B00              // device
 515+ 7B00                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7B00             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7B00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7B00             >
 515+ 7B00             >                // dummy db directives used to calculate length of namec
 515+ 7B00 44 45 56 49 >                db      "DEVICE"
 515+ 7B04 43 45       >
 515+ 7B06             >len_NFA         defl    $ - temp_NFA
 515+ 7B06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7B00             >
 515+ 7B00 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7B01 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7B05 43 45       >
 515+ 7B07             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7B06 C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7B07             >
 515+ 7B07 CA 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7B09             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7B09 CD 30 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7B0C             >
 515+ 7B0C             >
 515+ 7B0C             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7B0C             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7B0C             >
 515+ 7B0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7B0C 02 00       >                dw      2
 516+ 7B0E
 517+ 7B0E              //  ______________________________________________________________________
 518+ 7B0E
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
 113  7B0E                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
   1+ 7B0E              //  ______________________________________________________________________
   2+ 7B0E              //
   3+ 7B0E              //  next-opt.asm
   4+ 7B0E              //
   5+ 7B0E              //  ZX Spectrum Next - peculiar definitions
   6+ 7B0E              //  ______________________________________________________________________
   7+ 7B0E
   8+ 7B0E              //  ______________________________________________________________________
   9+ 7B0E              //
  10+ 7B0E              // reg@         n -- b
  11+ 7B0E              // read Next REGister n giving byte b
  12+ 7B0E              //
  13+ 7B0E              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 7B0E              //              dw      LIT, $243B
  15+ 7B0E              //              dw      PSTORE
  16+ 7B0E              //              dw      LIT, $253B
  17+ 7B0E              //              dw      PFETCH
  18+ 7B0E              //              dw      EXIT
  19+ 7B0E                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 7B0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ 7B0E             >
  19+ 7B0E             >                // dummy db directives used to calculate length of namec
  19+ 7B0E 52 45 47 40 >                db      "REG@"
  19+ 7B12             >len_NFA         defl    $ - temp_NFA
  19+ 7B12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ 7B0E             >
  19+ 7B0E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ 7B0F 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ 7B13             >                org     $-1                 // alter last byte of Name just above to set
  19+ 7B12 C0          >                db      {b $} | END_BIT     // msb as name end
  19+ 7B13             >
  19+ 7B13 00 7B       >                dw      last_NFA            // Link to previous definition Name
  19+ 7B15             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 7B15 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 7B15 ~           >
  19+ 7B15 ~           >
  19+ 7B15             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 7B15             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 7B15             >
  19+ 7B15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 7B15 D9                           exx
  21+ 7B16 01 3B 24                     ld      bc, $243B
  22+ 7B19 E1                           pop     hl
  23+ 7B1A ED 69                        out     (c), l
  24+ 7B1C 04                           inc     b
  25+ 7B1D ED 68                        in      l, (c)
  26+ 7B1F E5                           push    hl
  27+ 7B20 D9                           exx
  28+ 7B21                              next
  28+ 7B21 DD E9       >                jp      (ix)
  29+ 7B23
  30+ 7B23
  31+ 7B23              //  ______________________________________________________________________
  32+ 7B23              //
  33+ 7B23              // reg!         b n --
  34+ 7B23              // write value b to Next REGister n
  35+ 7B23              //
  36+ 7B23              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 7B23              //              dw      LIT, $243B
  38+ 7B23              //              dw      PSTORE
  39+ 7B23              //              dw      LIT, $253B
  40+ 7B23              //              dw      PSTORE
  41+ 7B23              //              dw      EXIT
  42+ 7B23                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 7B23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ 7B23             >
  42+ 7B23             >                // dummy db directives used to calculate length of namec
  42+ 7B23 52 45 47 21 >                db      "REG!"
  42+ 7B27             >len_NFA         defl    $ - temp_NFA
  42+ 7B27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ 7B23             >
  42+ 7B23 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ 7B24 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ 7B28             >                org     $-1                 // alter last byte of Name just above to set
  42+ 7B27 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ 7B28             >
  42+ 7B28 0E 7B       >                dw      last_NFA            // Link to previous definition Name
  42+ 7B2A             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 7B2A ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 7B2A ~           >
  42+ 7B2A ~           >
  42+ 7B2A             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 7B2A             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 7B2A             >
  42+ 7B2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 7B2A D9                           exx
  44+ 7B2B 01 3B 24                     ld      bc, $243B
  45+ 7B2E E1                           pop     hl
  46+ 7B2F ED 69                        out     (c), l
  47+ 7B31 04                           inc     b
  48+ 7B32 E1                           pop     hl
  49+ 7B33 ED 69                        out     (c), l
  50+ 7B35 D9                           exx
  51+ 7B36                              next
  51+ 7B36 DD E9       >                jp      (ix)
  52+ 7B38
  53+ 7B38
  54+ 7B38              //  ______________________________________________________________________
  55+ 7B38              //
  56+ 7B38              // mmu7@        -- n
  57+ 7B38              // query current page in MMU7 8K-RAM : 0 and 223
  58+ 7B38
  59+ 7B38                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  59+ 7B38             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  59+ 7B38             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59+ 7B38             >
  59+ 7B38             >                // dummy db directives used to calculate length of namec
  59+ 7B38 4D 4D 55 37 >                db      "MMU7@"
  59+ 7B3C 40          >
  59+ 7B3D             >len_NFA         defl    $ - temp_NFA
  59+ 7B3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59+ 7B38             >
  59+ 7B38 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59+ 7B39 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  59+ 7B3D 40          >
  59+ 7B3E             >                org     $-1                 // alter last byte of Name just above to set
  59+ 7B3D C0          >                db      {b $} | END_BIT     // msb as name end
  59+ 7B3E             >
  59+ 7B3E 23 7B       >                dw      last_NFA            // Link to previous definition Name
  59+ 7B40             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  59+ 7B40 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  59+ 7B43             >
  59+ 7B43             >
  59+ 7B43             >                endif           ; ok        // for other definitions it "points" the correct handler
  59+ 7B43             >                // Use of "; ok" to suppress "warning[fwdref]"
  59+ 7B43             >
  59+ 7B43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60+ 7B43 A5 63 57 00                  dw      LIT, 87, REG_FETCH
  60+ 7B47 15 7B
  61+ 7B49 3F 69                        dw      EXIT
  62+ 7B4B
  63+ 7B4B              //  ______________________________________________________________________
  64+ 7B4B              //
  65+ 7B4B              // mmu7!        n --
  66+ 7B4B              // set MMU7 8K-RAM page to n given between 0 and 223
  67+ 7B4B              // optimized version that uses NEXTREG n,A Z80n op-code.
  68+ 7B4B
  69+ 7B4B                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  69+ 7B4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ 7B4B             >
  69+ 7B4B             >                // dummy db directives used to calculate length of namec
  69+ 7B4B 4D 4D 55 37 >                db      "MMU7!"
  69+ 7B4F 21          >
  69+ 7B50             >len_NFA         defl    $ - temp_NFA
  69+ 7B50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ 7B4B             >
  69+ 7B4B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ 7B4C 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  69+ 7B50 21          >
  69+ 7B51             >                org     $-1                 // alter last byte of Name just above to set
  69+ 7B50 A1          >                db      {b $} | END_BIT     // msb as name end
  69+ 7B51             >
  69+ 7B51 38 7B       >                dw      last_NFA            // Link to previous definition Name
  69+ 7B53             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 7B53 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 7B53 ~           >
  69+ 7B53 ~           >
  69+ 7B53             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 7B53             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 7B53             >
  69+ 7B53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 7B53 E1                           pop     hl
  71+ 7B54 7D                           ld      a, l
  72+ 7B55 ED 92 57                     nextreg 87, a
  73+ 7B58
  74+ 7B58                              next
  74+ 7B58 DD E9       >                jp      (ix)
  75+ 7B5A
  76+ 7B5A              //  ______________________________________________________________________
  77+ 7B5A              //
  78+ 7B5A              // >far         ha -- a n
  79+ 7B5A              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  80+ 7B5A              // take lower bits of H and L as an offset from E000h
  81+ 7B5A              // then return address  a  between E000h-FFFFh
  82+ 7B5A              // and page number n  between 64-71 (40h-47h)
  83+ 7B5A              // For example, in hex:
  84+ 7B5A              //   0000 >FAR  gives  40.E000
  85+ 7B5A              //   1FFF >FAR  gives  40.FFFF
  86+ 7B5A              //   2000 >FAR  gives  41.E000
  87+ 7B5A              //   3FFF >FAR  gives  41.FFFF
  88+ 7B5A              //   EFFF >FAR  gives  47.EFFF
  89+ 7B5A              //   FFFF >FAR  gives  47.FFFF
  90+ 7B5A              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  91+ 7B5A              //                pop     de
  92+ 7B5A              //                ld      a, d
  93+ 7B5A              //                and     $E0
  94+ 7B5A              //                rlca
  95+ 7B5A              //                rlca
  96+ 7B5A              //                rlca
  97+ 7B5A              //                add     $40
  98+ 7B5A              //                ld      l, a
  99+ 7B5A              //                ld      h, 0
 100+ 7B5A              //                ld      a, d
 101+ 7B5A              //                or      $E0
 102+ 7B5A              //                ld      d, a
 103+ 7B5A              //                push    hl
 104+ 7B5A              //                push    de
 105+ 7B5A              //                next
 106+ 7B5A
 107+ 7B5A              //  ______________________________________________________________________
 108+ 7B5A              //
 109+ 7B5A              // <far         a n  -- ha
 110+ 7B5A              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 111+ 7B5A              // reverse of >FAR: encodes a FAR address compressing
 112+ 7B5A              // to bits 765 of H, lower bits of HL address offset from E000h
 113+ 7B5A              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 114+ 7B5A              //                pop     de                  // page number in e
 115+ 7B5A              //                pop     hl                  // address in hl
 116+ 7B5A              //                ld      a, e
 117+ 7B5A              //                sub     $40                 // reduced to 0-7
 118+ 7B5A              //                rrca
 119+ 7B5A              //                rrca
 120+ 7B5A              //                rrca
 121+ 7B5A              //                ld      d, a                // save to d bits 765
 122+ 7B5A              //                ld      a, h                // drops
 123+ 7B5A              //                and     $1F
 124+ 7B5A              //                or      d
 125+ 7B5A              //                ld      h, a
 126+ 7B5A              //
 127+ 7B5A              //                psh1
 128+ 7B5A
 129+ 7B5A              //  ______________________________________________________________________
 130+ 7B5A              //
 131+ 7B5A              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 132+ 7B5A              // NextZXOS call wrapper.
 133+ 7B5A              //  n1 = hl register parameter value
 134+ 7B5A              //  n2 = de register parameter value
 135+ 7B5A              //  n3 = bc register parameter value
 136+ 7B5A              //  n4 =  a register parameter value
 137+ 7B5A              //   a = routine address in ROM 3
 138+ 7B5A              // ----
 139+ 7B5A              //  n5 = hl returned value
 140+ 7B5A              //  n6 = de returned value
 141+ 7B5A              //  n7 = bc returned value
 142+ 7B5A              //  n8 =  a returned value
 143+ 7B5A              //   f
 144+ 7B5A                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 144+ 7B5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7B5A             >
 144+ 7B5A             >                // dummy db directives used to calculate length of namec
 144+ 7B5A 4D 5F 50 33 >                db      "M_P3DOS"
 144+ 7B5E 44 4F 53    >
 144+ 7B61             >len_NFA         defl    $ - temp_NFA
 144+ 7B61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7B5A             >
 144+ 7B5A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7B5B 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 144+ 7B5F 44 4F 53    >
 144+ 7B62             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7B61 D3          >                db      {b $} | END_BIT     // msb as name end
 144+ 7B62             >
 144+ 7B62 4B 7B       >                dw      last_NFA            // Link to previous definition Name
 144+ 7B64             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7B64 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 144+ 7B64 ~           >
 144+ 7B64 ~           >
 144+ 7B64             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7B64             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7B64             >
 144+ 7B64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7B64 D1                           pop     de                  // dos call entry address in de
 146+ 7B65 E1                           pop     hl                  // a register
 147+ 7B66 7D                           ld      a, l
 148+ 7B67 D9                           exx
 149+ 7B68 C1                           pop     bc
 150+ 7B69 D1                           pop     de
 151+ 7B6A E1                           pop     hl
 152+ 7B6B D9                           exx
 153+ 7B6C
 154+ 7B6C C5                           push    bc
 155+ 7B6D DD E5                        push    ix
 156+ 7B6F
 157+ 7B6F              //              ld      (SP_Saved), sp
 158+ 7B6F              //              ld      sp, Cold_origin - 5
 159+ 7B6F 0E 07                        ld      c, 7                // use 7 RAM Bank
 160+ 7B71
 161+ 7B71 CF                           rst     08
 162+ 7B72 94                           db      $94
 163+ 7B73
 164+ 7B73              //              ld      sp, (SP_Saved)
 165+ 7B73              //              push    ix
 166+ 7B73              //              pop     hl
 167+ 7B73              //              ld      (IX_Echo), hl
 168+ 7B73 DD 22 90 63                  ld      (IX_Echo), ix
 169+ 7B77              //              nop
 170+ 7B77 DD E1                        pop     ix
 171+ 7B79 E3                           ex      (sp), hl            // hl argument and retrieve bc
 172+ 7B7A D5                           push    de
 173+ 7B7B C5                           push    bc
 174+ 7B7C 4D                           ld      c, l
 175+ 7B7D 44                           ld      b, h
 176+ 7B7E
 177+ 7B7E 26 00                        ld      h, 0
 178+ 7B80 6F                           ld      l, a
 179+ 7B81 E5                           push    hl
 180+ 7B82 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 181+ 7B84 23                           inc     hl                  //  0 for OK ; 1 for ko
 182+ 7B85
 183+ 7B85                              psh1
 183+ 7B85 E5          >                push    hl
 183+ 7B86 DD E9       >                jp      (ix)
 184+ 7B88
 185+ 7B88              //  ______________________________________________________________________
 186+ 7B88              //
 187+ 7B88              // blk-fh
 188+ 7B88                              Variable_Def BLK_FH,   "BLK-FH",   1
 188+ 7B88             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 188+ 7B88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 7B88             >
 188+ 7B88             >                // dummy db directives used to calculate length of namec
 188+ 7B88 42 4C 4B 2D >                db      "BLK-FH"
 188+ 7B8C 46 48       >
 188+ 7B8E             >len_NFA         defl    $ - temp_NFA
 188+ 7B8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 7B88             >
 188+ 7B88 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 7B89 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 188+ 7B8D 46 48       >
 188+ 7B8F             >                org     $-1                 // alter last byte of Name just above to set
 188+ 7B8E C8          >                db      {b $} | END_BIT     // msb as name end
 188+ 7B8F             >
 188+ 7B8F 5A 7B       >                dw      last_NFA            // Link to previous definition Name
 188+ 7B91             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 7B91 CD 30 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 188+ 7B94             >
 188+ 7B94             >
 188+ 7B94             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 7B94             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 7B94             >
 188+ 7B94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 7B94 01 00       >                dw      1
 189+ 7B96
 190+ 7B96                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 190+ 7B96             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 7B96             >
 190+ 7B96             >                // dummy db directives used to calculate length of namec
 190+ 7B96 42 4C 4B 2D >                db      "BLK-FNAME"
 190+ 7B9A 46 4E 41 4D >
 190+ 7B9E 45          >
 190+ 7B9F             >len_NFA         defl    $ - temp_NFA
 190+ 7B9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 7B96             >
 190+ 7B96 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 7B97 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 190+ 7B9B 46 4E 41 4D >
 190+ 7B9F 45          >
 190+ 7BA0             >                org     $-1                 // alter last byte of Name just above to set
 190+ 7B9F C5          >                db      {b $} | END_BIT     // msb as name end
 190+ 7BA0             >
 190+ 7BA0 88 7B       >                dw      last_NFA            // Link to previous definition Name
 190+ 7BA2             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 7BA2 CD 99 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 190+ 7BA5             >
 190+ 7BA5             >
 190+ 7BA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 7BA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 7BA5             >
 190+ 7BA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 7BA5 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 191+ 7BA9 6F 63 6B 73
 191+ 7BAD 2D 36 34 2E
 191+ 7BB1 62 69 6E 00
 192+ 7BB5 00 00 00...                  ds      24
 193+ 7BCD
 194+ 7BCD              //  ______________________________________________________________________
 195+ 7BCD              //
 196+ 7BCD              // blk-seek     n --
 197+ 7BCD              // seek block n  within blocks!.bin  file
 198+ 7BCD                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 198+ 7BCD             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 198+ 7BCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 7BCD             >
 198+ 7BCD             >                // dummy db directives used to calculate length of namec
 198+ 7BCD 42 4C 4B 2D >                db      "BLK-SEEK"
 198+ 7BD1 53 45 45 4B >
 198+ 7BD5             >len_NFA         defl    $ - temp_NFA
 198+ 7BD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 7BCD             >
 198+ 7BCD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 7BCE 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 198+ 7BD2 53 45 45 4B >
 198+ 7BD6             >                org     $-1                 // alter last byte of Name just above to set
 198+ 7BD5 CB          >                db      {b $} | END_BIT     // msb as name end
 198+ 7BD6             >
 198+ 7BD6 96 7B       >                dw      last_NFA            // Link to previous definition Name
 198+ 7BD8             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 7BD8 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 198+ 7BDB             >
 198+ 7BDB             >
 198+ 7BDB             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 7BDB             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 7BDB             >
 198+ 7BDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 7BDB 98 6C 91 79                  dw  BBUF, MMUL
 200+ 7BDF 91 7B 03 6B                  dw  BLK_FH, FETCH
 201+ 7BE3 6C 67                        dw  F_SEEK
 202+ 7BE5 A5 63 2D 00                  dw  LIT, $2D, QERROR
 202+ 7BE9 30 70
 203+ 7BEB 3F 69                        dw  EXIT
 204+ 7BED
 205+ 7BED              //  ______________________________________________________________________
 206+ 7BED              //
 207+ 7BED              // blk-read     n --
 208+ 7BED              // seek block n  within blocks!.bin  file
 209+ 7BED                              Colon_Def BLK_READ, "BLK-READ", is_normal
 209+ 7BED             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 209+ 7BED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 209+ 7BED             >
 209+ 7BED             >                // dummy db directives used to calculate length of namec
 209+ 7BED 42 4C 4B 2D >                db      "BLK-READ"
 209+ 7BF1 52 45 41 44 >
 209+ 7BF5             >len_NFA         defl    $ - temp_NFA
 209+ 7BF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 209+ 7BED             >
 209+ 7BED 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 209+ 7BEE 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 209+ 7BF2 52 45 41 44 >
 209+ 7BF6             >                org     $-1                 // alter last byte of Name just above to set
 209+ 7BF5 C4          >                db      {b $} | END_BIT     // msb as name end
 209+ 7BF6             >
 209+ 7BF6 CD 7B       >                dw      last_NFA            // Link to previous definition Name
 209+ 7BF8             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 209+ 7BF8 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 209+ 7BFB             >
 209+ 7BFB             >
 209+ 7BFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 209+ 7BFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 209+ 7BFB             >
 209+ 7BFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 210+ 7BFB D8 7B                        dw  BLK_SEEK
 211+ 7BFD 98 6C                        dw  BBUF
 212+ 7BFF 91 7B 03 6B                  dw  BLK_FH, FETCH
 213+ 7C03 D0 67                        dw  F_READ
 214+ 7C05 A5 63 2E 00                  dw  LIT, $2E, QERROR
 214+ 7C09 30 70
 215+ 7C0B 55 6A                        dw  DROP
 216+ 7C0D 3F 69                        dw  EXIT
 217+ 7C0F
 218+ 7C0F              //  ______________________________________________________________________
 219+ 7C0F              //
 220+ 7C0F              // blk-write     n --
 221+ 7C0F              // seek block n  within blocks!.bin  file
 222+ 7C0F                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 222+ 7C0F             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 222+ 7C0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 7C0F             >
 222+ 7C0F             >                // dummy db directives used to calculate length of namec
 222+ 7C0F 42 4C 4B 2D >                db      "BLK-WRITE"
 222+ 7C13 57 52 49 54 >
 222+ 7C17 45          >
 222+ 7C18             >len_NFA         defl    $ - temp_NFA
 222+ 7C18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 7C0F             >
 222+ 7C0F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 7C10 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 222+ 7C14 57 52 49 54 >
 222+ 7C18 45          >
 222+ 7C19             >                org     $-1                 // alter last byte of Name just above to set
 222+ 7C18 C5          >                db      {b $} | END_BIT     // msb as name end
 222+ 7C19             >
 222+ 7C19 ED 7B       >                dw      last_NFA            // Link to previous definition Name
 222+ 7C1B             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 7C1B CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 7C1E             >
 222+ 7C1E             >
 222+ 7C1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 7C1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 7C1E             >
 222+ 7C1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 7C1E D8 7B                        dw  BLK_SEEK
 224+ 7C20 98 6C                        dw  BBUF
 225+ 7C22 91 7B 03 6B                  dw  BLK_FH, FETCH
 226+ 7C26 ED 67                        dw  F_WRITE
 227+ 7C28 A5 63 2F 00                  dw  LIT, $2F, QERROR
 227+ 7C2C 30 70
 228+ 7C2E 55 6A                        dw  DROP
 229+ 7C30 3F 69                        dw  EXIT
 230+ 7C32
 231+ 7C32              //  ______________________________________________________________________
 232+ 7C32              //
 233+ 7C32              // blk-init     n --
 234+ 7C32              // seek block n  within blocks!.bin  file
 235+ 7C32                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 235+ 7C32             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 235+ 7C32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 235+ 7C32             >
 235+ 7C32             >                // dummy db directives used to calculate length of namec
 235+ 7C32 42 4C 4B 2D >                db      "BLK-INIT"
 235+ 7C36 49 4E 49 54 >
 235+ 7C3A             >len_NFA         defl    $ - temp_NFA
 235+ 7C3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 235+ 7C32             >
 235+ 7C32 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 235+ 7C33 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 235+ 7C37 49 4E 49 54 >
 235+ 7C3B             >                org     $-1                 // alter last byte of Name just above to set
 235+ 7C3A D4          >                db      {b $} | END_BIT     // msb as name end
 235+ 7C3B             >
 235+ 7C3B 0F 7C       >                dw      last_NFA            // Link to previous definition Name
 235+ 7C3D             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 235+ 7C3D CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 235+ 7C40             >
 235+ 7C40             >
 235+ 7C40             >                endif           ; ok        // for other definitions it "points" the correct handler
 235+ 7C40             >                // Use of "; ok" to suppress "warning[fwdref]"
 235+ 7C40             >
 235+ 7C40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 7C40 91 7B 03 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 236+ 7C44 8D 67 55 6A
 237+ 7C48 A2 7B D7 69                  dw  BLK_FNAME, ONE_PLUS
 238+ 7C4C 5B 6E 6C 6C                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 238+ 7C50 02 68
 239+ 7C52 A5 63 2C 00                  dw  LIT, $2C, QERROR
 239+ 7C56 30 70
 240+ 7C58 91 7B 0E 6B                  dw  BLK_FH, STORE
 241+ 7C5C 3F 69                        dw  EXIT
 242+ 7C5E
 243+ 7C5E              //  ______________________________________________________________________
 244+ 7C5E              //
 245+ 7C5E              // #sec
 246+ 7C5E              // number of 512-Byte "sectors" available on thie sysstem.
 247+ 7C5E              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 248+ 7C5E
 249+ 7C5E                              Constant_Def NSEC , "#SEC", 32767
 249+ 7C5E             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 249+ 7C5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 7C5E             >
 249+ 7C5E             >                // dummy db directives used to calculate length of namec
 249+ 7C5E 23 53 45 43 >                db      "#SEC"
 249+ 7C62             >len_NFA         defl    $ - temp_NFA
 249+ 7C62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 7C5E             >
 249+ 7C5E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 7C5F 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 249+ 7C63             >                org     $-1                 // alter last byte of Name just above to set
 249+ 7C62 C3          >                db      {b $} | END_BIT     // msb as name end
 249+ 7C63             >
 249+ 7C63 32 7C       >                dw      last_NFA            // Link to previous definition Name
 249+ 7C65             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 7C65 CD 15 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 249+ 7C68             >
 249+ 7C68             >
 249+ 7C68             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 7C68             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 7C68             >
 249+ 7C68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 7C68 FF 7F       >                dw      32767
 250+ 7C6A
 251+ 7C6A              //  ______________________________________________________________________
 252+ 7C6A
 253+ 7C6A
 254+ 7C6A
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
 114  7C6A                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
   1+ 7C6A              //  ______________________________________________________________________
   2+ 7C6A              //
   3+ 7C6A              //  L3.asm
   4+ 7C6A              //
   5+ 7C6A              //  Continuation of L2.asm
   6+ 7C6A              //  I/O Block definitions
   7+ 7C6A              //  ______________________________________________________________________
   8+ 7C6A
   9+ 7C6A
  10+ 7C6A              //  ______________________________________________________________________
  11+ 7C6A              //
  12+ 7C6A              // r/w          a n f --
  13+ 7C6A              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C6A                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C6A             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C6A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C6A             >
  14+ 7C6A             >                // dummy db directives used to calculate length of namec
  14+ 7C6A 52 2F 57    >                db      "R/W"
  14+ 7C6D             >len_NFA         defl    $ - temp_NFA
  14+ 7C6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C6A             >
  14+ 7C6A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C6B 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C6E             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C6D D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C6E             >
  14+ 7C6E 5E 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C70             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C70 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C73             >
  14+ 7C73             >
  14+ 7C73             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C73             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C73             >
  14+ 7C73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C73 50 69                        dw      TO_R                    // >r
  16+ 7C75 E1 69                        dw      ONE_SUBTRACT            // 1-
  17+ 7C77 82 6A 96 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7C7B 47 6A 65 7C                  dw      OVER, NSEC              // over #sec
  19+ 7C7F E1 69 F1 6E                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7C83 ED 68                        dw      OR_OP                   // or
  21+ 7C85 A5 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7C89 30 70
  22+ 7C8B 62 69                        dw      R_TO                    // r>
  23+ 7C8D                                                              // if
  24+ 7C8D 1C 64                        dw      ZBRANCH
  25+ 7C8F 08 00                        dw      Read_Write_Else - $
  26+ 7C91 F8 7B                        dw          BLK_READ            //      blk-read
  27+ 7C93 07 64                        dw      BRANCH
  28+ 7C95 04 00                        dw      Read_Write_Endif - $
  29+ 7C97              Read_Write_Else:                                // else
  30+ 7C97 1B 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7C99              Read_Write_Endif:                               // endif
  32+ 7C99 3F 69                        dw      EXIT                    // ;
  33+ 7C9B
  34+ 7C9B
  35+ 7C9B              //  ______________________________________________________________________
  36+ 7C9B              //
  37+ 7C9B              // +buf        a1 -- a2 f
  38+ 7C9B              // advences to next buffer, cyclically rotating along them
  39+ 7C9B                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7C9B             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7C9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7C9B             >
  39+ 7C9B             >                // dummy db directives used to calculate length of namec
  39+ 7C9B 2B 42 55 46 >                db      "+BUF"
  39+ 7C9F             >len_NFA         defl    $ - temp_NFA
  39+ 7C9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7C9B             >
  39+ 7C9B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7C9C 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CA0             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7C9F C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CA0             >
  39+ 7CA0 6A 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CA2             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CA2 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CA5             >
  39+ 7CA5             >
  39+ 7CA5             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CA5             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CA5             >
  39+ 7CA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CA5 A5 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CA9 BA 69
  41+ 7CAB 82 6A 45 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CAF 03 6B
  42+ 7CB1 BC 6E                        dw      EQUALS                  // =
  43+ 7CB3                                                              // if
  44+ 7CB3 1C 64                        dw      ZBRANCH
  45+ 7CB5 08 00                        dw      PBuf_Endif - $
  46+ 7CB7 55 6A                        dw          DROP                //      drop
  47+ 7CB9 39 6D 03 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CBD              PBuf_Endif:                                     // endif
  49+ 7CBD 82 6A 09 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CC1 03 6B
  50+ 7CC3 B0 6E                        dw      SUBTRACT                // -
  51+ 7CC5 3F 69                        dw      EXIT                    // ;
  52+ 7CC7
  53+ 7CC7              //  ______________________________________________________________________
  54+ 7CC7              //
  55+ 7CC7              // update       --
  56+ 7CC7              // mark the last used block to be written to disk
  57+ 7CC7                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CC7             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CC7             >
  57+ 7CC7             >                // dummy db directives used to calculate length of namec
  57+ 7CC7 55 50 44 41 >                db      "UPDATE"
  57+ 7CCB 54 45       >
  57+ 7CCD             >len_NFA         defl    $ - temp_NFA
  57+ 7CCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CC7             >
  57+ 7CC7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CC8 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CCC 54 45       >
  57+ 7CCE             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CCD C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CCE             >
  57+ 7CCE 9B 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CD0             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CD0 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CD3             >
  57+ 7CD3             >
  57+ 7CD3             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CD3             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CD3             >
  57+ 7CD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CD3 09 6E 03 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7CD7 03 6B
  59+ 7CD9 A5 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7CDD ED 68
  60+ 7CDF 09 6E 03 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7CE3 0E 6B
  61+ 7CE5 3F 69                        dw      EXIT                    // ;
  62+ 7CE7
  63+ 7CE7
  64+ 7CE7              //  ______________________________________________________________________
  65+ 7CE7              //
  66+ 7CE7              // empty-buffers --
  67+ 7CE7                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7CE7             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7CE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7CE7             >
  67+ 7CE7             >                // dummy db directives used to calculate length of namec
  67+ 7CE7 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7CEB 59 2D 42 55 >
  67+ 7CEF 46 46 45 52 >
  67+ 7CF3 53          >
  67+ 7CF4             >len_NFA         defl    $ - temp_NFA
  67+ 7CF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7CE7             >
  67+ 7CE7 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7CE8 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7CEC 59 2D 42 55 >
  67+ 7CF0 46 46 45 52 >
  67+ 7CF4 53          >
  67+ 7CF5             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7CF4 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7CF5             >
  67+ 7CF5 C7 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7CF7             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7CF7 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7CFA             >
  67+ 7CFA             >
  67+ 7CFA             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7CFA             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7CFA             >
  67+ 7CFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7CFA 39 6D 03 6B                  dw      FIRST, FETCH            // first @
  69+ 7CFE 45 6D 03 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D02 47 6A B0 6E                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D06 84 73
  71+ 7D08 3F 69                        dw      EXIT                    // ;
  72+ 7D0A
  73+ 7D0A              //  ______________________________________________________________________
  74+ 7D0A              //
  75+ 7D0A              // buffer       n -- a
  76+ 7D0A              // read block n and gives the address to a buffer
  77+ 7D0A              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D0A              // disk before reading the block n.
  79+ 7D0A
  80+ 7D0A                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D0A             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D0A             >
  80+ 7D0A             >                // dummy db directives used to calculate length of namec
  80+ 7D0A 42 55 46 46 >                db      "BUFFER"
  80+ 7D0E 45 52       >
  80+ 7D10             >len_NFA         defl    $ - temp_NFA
  80+ 7D10             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D0A             >
  80+ 7D0A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D0B 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D0F 45 52       >
  80+ 7D11             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D10 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D11             >
  80+ 7D11 E7 7C       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D13             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D13 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D16             >
  80+ 7D16             >
  80+ 7D16             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D16             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D16             >
  80+ 7D16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D16 FE 6D 03 6B                  dw      USE, FETCH              // use @
  82+ 7D1A 82 6A 50 69                  dw      DUP, TO_R               // dup >r
  83+ 7D1E                                                              // begin
  84+ 7D1E              Buffer_Begin:
  85+ 7D1E A2 7C                        dw          PBUF                //      +buf
  86+ 7D20                                                              // until
  87+ 7D20 1C 64                        dw      ZBRANCH
  88+ 7D22 FC FF                        dw      Buffer_Begin - $
  89+ 7D24 FE 6D 0E 6B                  dw      USE, STORE              // use !
  90+ 7D28 74 69 03 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D2C 96 69
  91+ 7D2E                                                              // if
  92+ 7D2E 1C 64                        dw      ZBRANCH
  93+ 7D30 14 00                        dw      Buffer_Endif - $
  94+ 7D32 74 69 F9 69                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D36 74 69 03 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D3A A5 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D3E DD 68                        dw          AND_OP              //      and
  98+ 7D40 51 6C 70 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D44              Buffer_Endif:                                   // endif
 100+ 7D44 74 69 0E 6B                  dw      R_OP, STORE             // r !
 101+ 7D48 74 69 09 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D4C 0E 6B
 102+ 7D4E 62 69 F9 69                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D52 3F 69                        dw      EXIT                    // ;
 104+ 7D54
 105+ 7D54              //  ______________________________________________________________________
 106+ 7D54              //
 107+ 7D54              // block        n -- a
 108+ 7D54              // Leaves the buffer address that contains the block n.
 109+ 7D54              // If the block is not already present, it will be loaded from disk
 110+ 7D54              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D54              // disk before reading the block n.
 112+ 7D54              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D54
 114+ 7D54                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D54             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D54             >
 114+ 7D54             >                // dummy db directives used to calculate length of namec
 114+ 7D54 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D58 4B          >
 114+ 7D59             >len_NFA         defl    $ - temp_NFA
 114+ 7D59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D54             >
 114+ 7D54 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D55 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D59 4B          >
 114+ 7D5A             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D59 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D5A             >
 114+ 7D5A 0A 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D5C             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D5C CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D5F             >
 114+ 7D5F             >
 114+ 7D5F             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D5F             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D5F             >
 114+ 7D5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D5F 90 6D 03 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D63 BA 69 50 69                  dw      PLUS, TO_R              // + >r
 117+ 7D67 09 6E 03 6B                  dw      PREV, FETCH             // prev @
 118+ 7D6B 82 6A 03 6B                  dw      DUP, FETCH              // dup @
 119+ 7D6F 74 69 B0 6E                  dw      R_OP, SUBTRACT          // r -
 120+ 7D73 82 6A BA 69                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7D77                                                              // if
 122+ 7D77 1C 64                        dw        ZBRANCH
 123+ 7D79 32 00                        dw        Block_Endif_1 - $
 124+ 7D7B              Block_Begin:                                    //      begin
 125+ 7D7B A2 7C 7C 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7D7F                                                              //          if
 127+ 7D7F 1C 64                        dw          ZBRANCH
 128+ 7D81 12 00                        dw          Block_Endif_2 - $
 129+ 7D83 55 6A                        dw              DROP            //              drop
 130+ 7D85 74 69 13 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7D89 82 6A                        dw              DUP             //              dup
 132+ 7D8B 74 69 5A 6C                  dw              R_OP, ONE       //              r 1
 133+ 7D8F 70 7C                        dw              READ_WRITE      //              r/w
 134+ 7D91 0F 6A                        dw              TWO_MINUS       //              2-
 135+ 7D93              Block_Endif_2:                                  //          endif
 136+ 7D93 82 6A 03 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7D97 74 69
 137+ 7D99 B0 6E 82 6A                  dw          SUBTRACT, DUP       //          - dup
 138+ 7D9D BA 69 7C 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DA1                                                              //      until
 140+ 7DA1 1C 64                        dw        ZBRANCH
 141+ 7DA3 D8 FF                        dw        Block_Begin - $
 142+ 7DA5 82 6A 09 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DA9 0E 6B
 143+ 7DAB              Block_Endif_1:                                  // endif
 144+ 7DAB 62 69 55 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DAF F9 69
 145+ 7DB1 3F 69                        dw      EXIT                    // ;
 146+ 7DB3
 147+ 7DB3              //  ______________________________________________________________________
 148+ 7DB3              //
 149+ 7DB3              // #buff        -- n
 150+ 7DB3              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DB3                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DB3             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DB3             >
 151+ 7DB3             >                // dummy db directives used to calculate length of namec
 151+ 7DB3 23 42 55 46 >                db      "#BUFF"
 151+ 7DB7 46          >
 151+ 7DB8             >len_NFA         defl    $ - temp_NFA
 151+ 7DB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DB3             >
 151+ 7DB3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DB4 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DB8 46          >
 151+ 7DB9             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DB8 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DB9             >
 151+ 7DB9 54 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DBB             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DBB CD 15 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DBE             >
 151+ 7DBE             >
 151+ 7DBE             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DBE             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DBE             >
 151+ 7DBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DBE 07 00       >                dw      7
 152+ 7DC0
 153+ 7DC0              //  ______________________________________________________________________
 154+ 7DC0              //
 155+ 7DC0              // flush        --
 156+ 7DC0                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DC0             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DC0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DC0             >
 156+ 7DC0             >                // dummy db directives used to calculate length of namec
 156+ 7DC0 46 4C 55 53 >                db      "FLUSH"
 156+ 7DC4 48          >
 156+ 7DC5             >len_NFA         defl    $ - temp_NFA
 156+ 7DC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DC0             >
 156+ 7DC0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DC1 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DC5 48          >
 156+ 7DC6             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DC5 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DC6             >
 156+ 7DC6 B3 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DC8             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DC8 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DCB             >
 156+ 7DCB             >
 156+ 7DCB             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DCB             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DCB             >
 156+ 7DCB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DCB BB 7D D7 69                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DCF 51 6C
 158+ 7DD1              Flush_Do:                                       // do
 159+ 7DD1 70 64                        dw      C_DO
 160+ 7DD3 51 6C 13 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7DD7 55 6A
 161+ 7DD9                                                              // loop
 162+ 7DD9 F8 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7DDD 91 7B 03 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7DE1 9F 67 55 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7DE5 3F 69                        dw      EXIT                    // exit
 166+ 7DE7
 167+ 7DE7              //  ______________________________________________________________________
 168+ 7DE7              //
 169+ 7DE7              // f_getline    a m fh -- n
 170+ 7DE7              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7DE7              // Address a is left for subsequent processing
 172+ 7DE7              // and n as the actual number of byte read, that is the length of line
 173+ 7DE7                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7DE7             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7DE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7DE7             >
 173+ 7DE7             >                // dummy db directives used to calculate length of namec
 173+ 7DE7 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7DEB 54 4C 49 4E >
 173+ 7DEF 45          >
 173+ 7DF0             >len_NFA         defl    $ - temp_NFA
 173+ 7DF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7DE7             >
 173+ 7DE7 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7DE8 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7DEC 54 4C 49 4E >
 173+ 7DF0 45          >
 173+ 7DF1             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7DF0 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7DF1             >
 173+ 7DF1 C0 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7DF3             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7DF3 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7DF6             >
 173+ 7DF6             >
 173+ 7DF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7DF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7DF6             >
 173+ 7DF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7DF6 50 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7DF8 69 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7DFA 74 69 B4 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7DFE A5 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E02 30 70
 178+ 7E04
 179+ 7E04 C7 6A 47 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E08 D7 69 77 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E0C
 182+ 7E0C 74 69 D0 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E10 A5 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E14 30 70
 184+ 7E16                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E16 1C 64                        dw      ZBRANCH
 186+ 7E18 3C 00                        dw      FGetline_Else - $
 187+ 7E1A A5 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E1E 58 65
 188+ 7E20 55 6A 5E 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E24 77 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E26 A5 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E2A 58 65
 191+ 7E2C 55 6A 5E 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E30 8D 6A 00 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E34 82 6A 39 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E38 0E 6B
 194+ 7E3A 82 6A 50 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E3E C7 6A 62 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E42 51 6C C5 69                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E46 62 69 6C 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E4A A5 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E4E 30 70
 199+ 7E50                                                              // else
 200+ 7E50 07 64                        dw      BRANCH
 201+ 7E52 0C 00                        dw      FGetline_Endif - $
 202+ 7E54              FGetline_Else:
 203+ 7E54 62 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E56 C7 6A BB 6A                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E5A 55 6A 51 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E5E              FGetline_Endif:                                 // endif
 207+ 7E5E 50 69 82 6A                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E62 82 6A
 208+ 7E64 D7 69 77 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E68 74 69 48 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7E6C D7 6A BA 69                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7E70 51 6C 77 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7E74 04 6A 0E 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7E78 74 69 BA 69                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7E7C E1 69
 214+ 7E7E 77 6A 74 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7E82 B0 6E
 215+ 7E84 95 73                        dw      BLANK                   // blank
 216+ 7E86 62 69                        dw      R_TO                    // r>                   ( n )
 217+ 7E88 3F 69                        dw      EXIT                    // ;
 218+ 7E8A
 219+ 7E8A              //  ______________________________________________________________________
 220+ 7E8A              //
 221+ 7E8A              // f_include    fh --
 222+ 7E8A              // Given a filehandle includes the source from file
 223+ 7E8A                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7E8A             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7E8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7E8A             >
 223+ 7E8A             >                // dummy db directives used to calculate length of namec
 223+ 7E8A 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7E8E 43 4C 55 44 >
 223+ 7E92 45          >
 223+ 7E93             >len_NFA         defl    $ - temp_NFA
 223+ 7E93             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7E8A             >
 223+ 7E8A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7E8B 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7E8F 43 4C 55 44 >
 223+ 7E93 45          >
 223+ 7E94             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7E93 C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7E94             >
 223+ 7E94 E7 7D       >                dw      last_NFA            // Link to previous definition Name
 223+ 7E96             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7E96 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7E99             >
 223+ 7E99             >
 223+ 7E99             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7E99             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7E99             >
 223+ 7E99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7E99 65 6D 03 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7E9D 50 69
 225+ 7E9F 6F 6D 03 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7EA3 50 69
 226+ 7EA5 2E 6E 03 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7EA9 50 69
 227+ 7EAB 74 69                        dw      R_OP                    // r
 228+ 7EAD                                                              // if
 229+ 7EAD 1C 64                        dw      ZBRANCH
 230+ 7EAF 20 00                        dw      FInclude_Else_1 - $
 231+ 7EB1 74 69 B4 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7EB5 A5 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7EB9 30 70
 233+ 7EBB 6F 6D 03 6B                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7EBF 0F 6A                        dw          TWO_MINUS
 235+ 7EC1 39 6E 03 6B                  dw          SPAN, FETCH         //      span @ -
 236+ 7EC5 B0 6E                        dw          SUBTRACT
 237+ 7EC7 9E 6E C5 69                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7ECB                                                              // else
 239+ 7ECB 07 64                        dw      BRANCH
 240+ 7ECD 06 00                        dw      FInclude_Endif_1 - $
 241+ 7ECF              FInclude_Else_1:
 242+ 7ECF 51 6C 51 6C                  dw          ZERO, ZERO          //      0 0
 243+ 7ED3                                                              // endif
 244+ 7ED3              FInclude_Endif_1:
 245+ 7ED3 50 69 50 69                  dw      TO_R, TO_R              // >r >r
 246+ 7ED7 2E 6E 0E 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7EDB              FInclude_Begin:                                 // begin
 248+ 7EDB 5A 6C 5C 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7EDF 98 6C
 249+ 7EE1 D7 6A 95 73                  dw          TWO_DUP, BLANK      //      2dup blank
 250+ 7EE5 77 6A D7 69                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7EE9 77 6A 04 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7EED 2E 6E 03 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7EF1 F3 7D                        dw          F_GETLINE           //      f_getline
 254+ 7EF3                                                              // while
 255+ 7EF3 1C 64                        dw      ZBRANCH
 256+ 7EF5 14 00                        dw      FInclude_Repeat - $
 257+ 7EF7 5A 6C 65 6D                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7EFB 0E 6B
 258+ 7EFD 51 6C 6F 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7F01 0E 6B
 259+ 7F03 8A 77                        dw          INTERPRET           //      interpret
 260+ 7F05 07 64                        dw      BRANCH
 261+ 7F07 D4 FF                        dw      FInclude_Begin - $
 262+ 7F09              FInclude_Repeat:                                // repeat
 263+ 7F09 2E 6E 03 6B                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F0D 51 6C 2E 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F11 0E 6B
 265+ 7F13 8D 67                        dw      F_CLOSE                 // f_close
 266+ 7F15 A5 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F19 30 70
 267+ 7F1B 62 69 62 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F1F 62 69
 268+ 7F21 82 6A 2E 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F25 0E 6B
 269+ 7F27                                                              // if
 270+ 7F27 1C 64                        dw      ZBRANCH
 271+ 7F29 12 00                        dw      FInclude_Else_2 - $
 272+ 7F2B 2E 6E 03 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F2F 6C 67                        dw          F_SEEK              //      f_seek
 274+ 7F31 A5 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F35 30 70
 275+ 7F37                                                              // else
 276+ 7F37 07 64                        dw      BRANCH
 277+ 7F39 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F3B              FInclude_Else_2:
 279+ 7F3B BB 6A                        dw          TWO_DROP            //      2drop
 280+ 7F3D              FInclude_Endif_2:                               // endif
 281+ 7F3D 62 69 6F 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F41 0E 6B
 282+ 7F43 62 69 65 6D                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F47 0E 6B
 283+ 7F49 3F 69                        dw      EXIT                    // ;
 284+ 7F4B
 285+ 7F4B              //  ______________________________________________________________________
 286+ 7F4B              //
 287+ 7F4B              // open<         -- fh
 288+ 7F4B              // Open the following filename and return it file-handle
 289+ 7F4B              // Used in the form OPEN CCCC
 290+ 7F4B                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F4B             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F4B             >
 290+ 7F4B             >                // dummy db directives used to calculate length of namec
 290+ 7F4B 4F 50 45 4E >                db      "OPEN<"
 290+ 7F4F 3C          >
 290+ 7F50             >len_NFA         defl    $ - temp_NFA
 290+ 7F50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F4B             >
 290+ 7F4B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F4C 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F50 3C          >
 290+ 7F51             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F50 BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F51             >
 290+ 7F51 8A 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F53             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F53 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F56             >
 290+ 7F56             >
 290+ 7F56             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F56             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F56             >
 290+ 7F56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F56 80 6C                        dw      BL
 292+ 7F58 D0 73 E5 71                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F5C 47 6A
 293+ 7F5E BA 69 51 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F62 77 6A 0E 6B
 294+ 7F66 BC 73 5A 6C                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7F6A 02 68
 295+ 7F6C A5 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7F70 30 70                        dw      QERROR                  // ?error
 297+ 7F72 3F 69                        dw      EXIT                    // ;
 298+ 7F74
 299+ 7F74              //  ______________________________________________________________________
 300+ 7F74              //
 301+ 7F74              // include      -- cccc
 302+ 7F74              // Include the following filename
 303+ 7F74                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7F74             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7F74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7F74             >
 303+ 7F74             >                // dummy db directives used to calculate length of namec
 303+ 7F74 49 4E 43 4C >                db      "INCLUDE"
 303+ 7F78 55 44 45    >
 303+ 7F7B             >len_NFA         defl    $ - temp_NFA
 303+ 7F7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7F74             >
 303+ 7F74 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7F75 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7F79 55 44 45    >
 303+ 7F7C             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7F7B C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7F7C             >
 303+ 7F7C 4B 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7F7E             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7F7E CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7F81             >
 303+ 7F81             >
 303+ 7F81             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7F81             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7F81             >
 303+ 7F81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7F81 53 7F                        dw      OPEN_FH                 // open
 305+ 7F83 82 6A 96 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7F87 8D 67 55 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7F8B 3F 69                        dw      EXIT                    // ;
 308+ 7F8D
 309+ 7F8D              //  ______________________________________________________________________
 310+ 7F8D              //
 311+ 7F8D              // needs
 312+ 7F8D              // check for cccc exists in vocabulary
 313+ 7F8D              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7F8D
 315+ 7F8D              // temp filename cccc.f as counted string zero-padded
 316+ 7F8D                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7F8D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7F8D             >
 316+ 7F8D             >                // dummy db directives used to calculate length of namec
 316+ 7F8D 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7F91 53 2D 57    >
 316+ 7F94             >len_NFA         defl    $ - temp_NFA
 316+ 7F94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7F8D             >
 316+ 7F8D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7F8E 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7F92 53 2D 57    >
 316+ 7F95             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7F94 D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7F95             >
 316+ 7F95 74 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7F97             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7F97 CD 99 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7F9A             >
 316+ 7F9A             >
 316+ 7F9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7F9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7F9A             >
 316+ 7F9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7F9A 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FBD              // temp complete path+filename
 319+ 7FBD                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FBD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FBD             >
 319+ 7FBD             >                // dummy db directives used to calculate length of namec
 319+ 7FBD 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FC1 53 2D 46 4E >
 319+ 7FC5             >len_NFA         defl    $ - temp_NFA
 319+ 7FC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FBD             >
 319+ 7FBD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FBE 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FC2 53 2D 46 4E >
 319+ 7FC6             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FC5 CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FC6             >
 319+ 7FC6 8D 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FC8             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FC8 CD 99 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7FCB             >
 319+ 7FCB             >
 319+ 7FCB             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7FCB             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7FCB             >
 319+ 7FCB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7FCB 00 00 00...                  ds      40
 321+ 7FF3              // constant path
 322+ 7FF3                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 7FF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 7FF3             >
 322+ 7FF3             >                // dummy db directives used to calculate length of namec
 322+ 7FF3 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 7FF7 53 2D 49 4E >
 322+ 7FFB 43          >
 322+ 7FFC             >len_NFA         defl    $ - temp_NFA
 322+ 7FFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 7FF3             >
 322+ 7FF3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 7FF4 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 7FF8 53 2D 49 4E >
 322+ 7FFC 43          >
 322+ 7FFD             >                org     $-1                 // alter last byte of Name just above to set
 322+ 7FFC C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 7FFD             >
 322+ 7FFD BD 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 7FFF             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 7FFF CD 99 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 8002             >
 322+ 8002             >
 322+ 8002             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 8002             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 8002             >
 322+ 8002             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 8002 04 69 6E 63                  db      4, "inc/", 0
 323+ 8006 2F 00
 324+ 8008                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 8008             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 8008             >
 324+ 8008             >                // dummy db directives used to calculate length of namec
 324+ 8008 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 800C 53 2D 4C 49 >
 324+ 8010 42          >
 324+ 8011             >len_NFA         defl    $ - temp_NFA
 324+ 8011             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 8008             >
 324+ 8008 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 8009 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 800D 53 2D 4C 49 >
 324+ 8011 42          >
 324+ 8012             >                org     $-1                 // alter last byte of Name just above to set
 324+ 8011 C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 8012             >
 324+ 8012 F3 7F       >                dw      last_NFA            // Link to previous definition Name
 324+ 8014             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 8014 CD 99 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 8017             >
 324+ 8017             >
 324+ 8017             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 8017             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 8017             >
 324+ 8017             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 8017 04 6C 69 62                  db      4, "lib/", 0
 325+ 801B 2F 00
 326+ 801D
 327+ 801D              // Concatenate path at a and filename and include it
 328+ 801D              // No error is issued if filename doesn't exist.
 329+ 801D                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 801D             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 801D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 801D             >
 329+ 801D             >                // dummy db directives used to calculate length of namec
 329+ 801D 4E 45 45 44 >                db      "NEEDS/"
 329+ 8021 53 2F       >
 329+ 8023             >len_NFA         defl    $ - temp_NFA
 329+ 8023             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 801D             >
 329+ 801D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 801E 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 8022 53 2F       >
 329+ 8024             >                org     $-1                 // alter last byte of Name just above to set
 329+ 8023 AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 8024             >
 329+ 8024 08 80       >                dw      last_NFA            // Link to previous definition Name
 329+ 8026             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 8026 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 8029             >
 329+ 8029             >
 329+ 8029             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 8029             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 8029             >
 329+ 8029             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 8029 E5 71 69 6A                  dw      COUNT, TUCK             // n a n
 331+ 802D C8 7F 77 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 8031 48 68
 332+ 8033 C8 7F BA 69                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 8037 97 7F D7 69                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 803B 77 6A
 334+ 803D A5 63 23 00                  dw      LIT, 35
 335+ 8041 48 68                        dw      CMOVE
 336+ 8043 C8 7F                        dw      NEEDS_FN
 337+ 8045 BC 73 5A 6C                  dw      PAD, ONE, F_OPEN
 337+ 8049 02 68
 338+ 804B 7C 69                        dw      ZEQUAL
 339+ 804D 1C 64                        dw      ZBRANCH
 340+ 804F 08 00                        dw      Needs_1 - $
 341+ 8051 96 7E                        dw          F_INCLUDE
 342+ 8053 07 64                        dw      BRANCH
 343+ 8055 04 00                        dw      Needs_2 - $
 344+ 8057              Needs_1:
 345+ 8057              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 8057              //              dw          LIT, 43, MESSAGE
 347+ 8057 55 6A                        dw          DROP
 348+ 8059              Needs_2:
 349+ 8059 3F 69                        dw      EXIT                    // ;
 350+ 805B
 351+ 805B
 352+ 805B                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 352+ 805B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 805B             >
 352+ 805B             >                // dummy db directives used to calculate length of namec
 352+ 805B 4E 44 4F 4D >                db      "NDOM"
 352+ 805F             >len_NFA         defl    $ - temp_NFA
 352+ 805F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 805B             >
 352+ 805B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 805C 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 352+ 8060             >                org     $-1                 // alter last byte of Name just above to set
 352+ 805F CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 8060             >
 352+ 8060 1D 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 8062             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 8062 CD 99 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 8065             >
 352+ 8065             >
 352+ 8065             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 8065             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 8065             >
 352+ 8065             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 8065              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 354+ 8065 3A 3F 2F 2A                  db ':?/*|\<>"'
 354+ 8069 7C 5C 3C 3E
 354+ 806D 22
 355+ 806E 00                           db 0
 356+ 806F
 357+ 806F                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 357+ 806F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ 806F             >
 357+ 806F             >                // dummy db directives used to calculate length of namec
 357+ 806F 4E 43 44 4D >                db      "NCDM"
 357+ 8073             >len_NFA         defl    $ - temp_NFA
 357+ 8073             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ 806F             >
 357+ 806F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ 8070 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 357+ 8074             >                org     $-1                 // alter last byte of Name just above to set
 357+ 8073 CD          >                db      {b $} | END_BIT     // msb as name end
 357+ 8074             >
 357+ 8074 5B 80       >                dw      last_NFA            // Link to previous definition Name
 357+ 8076             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 8076 CD 99 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 357+ 8079             >
 357+ 8079             >
 357+ 8079             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 8079             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 8079             >
 357+ 8079             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 8079              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 359+ 8079 5F 5E 25 26                  db '_^%&$_{}~'
 359+ 807D 24 5F 7B 7D
 359+ 8081 7E
 360+ 8082 00                           db 0
 361+ 8083
 362+ 8083              // Replace illegal character in filename using the map here above
 363+ 8083              // at the moment we need only  "
 364+ 8083                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 364+ 8083             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 364+ 8083             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ 8083             >
 364+ 8083             >                // dummy db directives used to calculate length of namec
 364+ 8083 4D 41 50 2D >                db      "MAP-FN"
 364+ 8087 46 4E       >
 364+ 8089             >len_NFA         defl    $ - temp_NFA
 364+ 8089             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ 8083             >
 364+ 8083 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ 8084 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 364+ 8088 46 4E       >
 364+ 808A             >                org     $-1                 // alter last byte of Name just above to set
 364+ 8089 CE          >                db      {b $} | END_BIT     // msb as name end
 364+ 808A             >
 364+ 808A 6F 80       >                dw      last_NFA            // Link to previous definition Name
 364+ 808C             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 808C CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 364+ 808F             >
 364+ 808F             >
 364+ 808F             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 808F             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 808F             >
 364+ 808F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 808F E5 71 F7 71                  dw      COUNT, BOUNDS
 366+ 8093 70 64                        dw      C_DO
 367+ 8095              Needs_3:
 368+ 8095 76 80 62 80                  dw          NCDM, NDOM, LIT, 10
 368+ 8099 A5 63 0A 00
 369+ 809D 78 64 1A 6B                  dw          I, CFETCH
 370+ 80A1 90 65                        dw          C_MAP
 371+ 80A3 78 64 26 6B                  dw          I, CSTORE
 372+ 80A7              Needs_4:
 373+ 80A7 F8 63                        dw      C_LOOP
 374+ 80A9 EC FF                        dw      Needs_3 - $
 375+ 80AB 3F 69                        dw      EXIT
 376+ 80AD
 377+ 80AD
 378+ 80AD              // include  "path/cccc.f" if cccc is not defined
 379+ 80AD              // filename cccc.f is temporary stored at NEEDS-W
 380+ 80AD                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 380+ 80AD             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 380+ 80AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ 80AD             >
 380+ 80AD             >                // dummy db directives used to calculate length of namec
 380+ 80AD 4E 45 45 44 >                db      "NEEDS-F"
 380+ 80B1 53 2D 46    >
 380+ 80B4             >len_NFA         defl    $ - temp_NFA
 380+ 80B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ 80AD             >
 380+ 80AD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ 80AE 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 380+ 80B2 53 2D 46    >
 380+ 80B5             >                org     $-1                 // alter last byte of Name just above to set
 380+ 80B4 C6          >                db      {b $} | END_BIT     // msb as name end
 380+ 80B5             >
 380+ 80B5 83 80       >                dw      last_NFA            // Link to previous definition Name
 380+ 80B7             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 80B7 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 80BA             >
 380+ 80BA             >
 380+ 80BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 80BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 80BA             >
 380+ 80BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 80BA 8C 75                        dw      LFIND
 382+ 80BC 1C 64                        dw      ZBRANCH
 383+ 80BE 0A 00                        dw      Needs_5 - $
 384+ 80C0
 385+ 80C0 55 6A BB 6A                  dw          DROP, TWO_DROP
 386+ 80C4 07 64                        dw      BRANCH
 387+ 80C6 2C 00                        dw      Needs_6 - $
 388+ 80C8              Needs_5:
 389+ 80C8 97 7F                        dw          NEEDS_W
 390+ 80CA A5 63 23 00                  dw          LIT, 35
 391+ 80CE 84 73                        dw          ERASE                   // a
 392+ 80D0 5B 6E 1A 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 392+ 80D4 D7 69
 393+ 80D6 5B 6E 47 6A                  dw          HERE, OVER              // a n here n
 394+ 80DA 97 7F 77 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 394+ 80DE 48 68
 395+ 80E0 97 7F 8C 80                  dw          NEEDS_W, NEEDS_CHECK
 396+ 80E4 97 7F BA 69                  dw          NEEDS_W, PLUS           // a a1+1
 397+ 80E8 A5 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 398+ 80EC 77 6A 0E 6B                  dw          SWAP, STORE             // a
 399+ 80F0 26 80                        dw          NEEDS_SLASH
 400+ 80F2              Needs_6:
 401+ 80F2 3F 69                        dw      EXIT
 402+ 80F4
 403+ 80F4
 404+ 80F4              // check for cccc exists in vocabulary
 405+ 80F4              // if it doesn't then  INCLUDE  inc/cccc.F
 406+ 80F4              // search in inc subdirectory
 407+ 80F4                              Colon_Def NEEDS, "NEEDS", is_normal
 407+ 80F4             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 407+ 80F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 407+ 80F4             >
 407+ 80F4             >                // dummy db directives used to calculate length of namec
 407+ 80F4 4E 45 45 44 >                db      "NEEDS"
 407+ 80F8 53          >
 407+ 80F9             >len_NFA         defl    $ - temp_NFA
 407+ 80F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 407+ 80F4             >
 407+ 80F4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 407+ 80F5 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 407+ 80F9 53          >
 407+ 80FA             >                org     $-1                 // alter last byte of Name just above to set
 407+ 80F9 D3          >                db      {b $} | END_BIT     // msb as name end
 407+ 80FA             >
 407+ 80FA AD 80       >                dw      last_NFA            // Link to previous definition Name
 407+ 80FC             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 407+ 80FC CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 407+ 80FF             >
 407+ 80FF             >
 407+ 80FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 407+ 80FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 407+ 80FF             >
 407+ 80FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 408+ 80FF 6F 6D 03 6B                  dw      TO_IN, FETCH
 409+ 8103 82 6A                        dw      DUP
 410+ 8105 FF 7F B7 80                  dw      NEEDS_INC, NEEDS_PATH
 411+ 8109 6F 6D 0E 6B                  dw      TO_IN, STORE
 412+ 810D 14 80 B7 80                  dw      NEEDS_LIB, NEEDS_PATH
 413+ 8111 6F 6D 0E 6B                  dw      TO_IN, STORE
 414+ 8115 8C 75                        dw      LFIND
 415+ 8117 1C 64                        dw      ZBRANCH
 416+ 8119 08 00                        dw      Needs_10 - $
 417+ 811B BB 6A                        dw          TWO_DROP
 418+ 811D 07 64                        dw      BRANCH
 419+ 811F 10 00                        dw      Needs_11 - $
 420+ 8121              Needs_10:
 421+ 8121 97 7F E5 71                  dw      NEEDS_W, COUNT, TYPE, SPACE
 421+ 8125 48 72 66 6F
 422+ 8129 A5 63 2B 00                  dw      LIT, 43, MESSAGE
 422+ 812D D4 7A
 423+ 812F              Needs_11:
 424+ 812F 3F 69                        dw      EXIT
 425+ 8131
 426+ 8131
 427+ 8131              //  ______________________________________________________________________
 428+ 8131              //
 429+ 8131              // load+        n --
 430+ 8131                              Colon_Def LOAD_P, "LOAD+", is_normal
 430+ 8131             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 430+ 8131             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 430+ 8131             >
 430+ 8131             >                // dummy db directives used to calculate length of namec
 430+ 8131 4C 4F 41 44 >                db      "LOAD+"
 430+ 8135 2B          >
 430+ 8136             >len_NFA         defl    $ - temp_NFA
 430+ 8136             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 430+ 8131             >
 430+ 8131 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 430+ 8132 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 430+ 8136 2B          >
 430+ 8137             >                org     $-1                 // alter last byte of Name just above to set
 430+ 8136 AB          >                db      {b $} | END_BIT     // msb as name end
 430+ 8137             >
 430+ 8137 F4 80       >                dw      last_NFA            // Link to previous definition Name
 430+ 8139             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 430+ 8139 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 430+ 813C             >
 430+ 813C             >
 430+ 813C             >                endif           ; ok        // for other definitions it "points" the correct handler
 430+ 813C             >                // Use of "; ok" to suppress "warning[fwdref]"
 430+ 813C             >
 430+ 813C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 431+ 813C 65 6D 03 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 431+ 8140 50 69
 432+ 8142 6F 6D 03 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 432+ 8146 50 69
 433+ 8148
 434+ 8148 51 6C 6F 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 434+ 814C 0E 6B
 435+ 814E A5 6C 33 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 435+ 8152 65 6D 0E 6B
 436+ 8156 8A 77                        dw      INTERPRET               // interpret
 437+ 8158
 438+ 8158 62 69 6F 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 438+ 815C 0E 6B
 439+ 815E 62 69 65 6D                  dw      R_TO, BLK, STORE        // r> blk !
 439+ 8162 0E 6B
 440+ 8164 3F 69                        dw      EXIT                    // ;
 441+ 8166
 442+ 8166              //  ______________________________________________________________________
 443+ 8166              //
 444+ 8166              // -->          --
 445+ 8166                              Colon_Def LOAD_NEXT, "-->", is_immediate
 445+ 8166             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 445+ 8166             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ 8166             >
 445+ 8166             >                // dummy db directives used to calculate length of namec
 445+ 8166 2D 2D 3E    >                db      "-->"
 445+ 8169             >len_NFA         defl    $ - temp_NFA
 445+ 8169             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ 8166             >
 445+ 8166 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ 8167 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 445+ 816A             >                org     $-1                 // alter last byte of Name just above to set
 445+ 8169 BE          >                db      {b $} | END_BIT     // msb as name end
 445+ 816A             >
 445+ 816A 31 81       >                dw      last_NFA            // Link to previous definition Name
 445+ 816C             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 816C CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 445+ 816F             >
 445+ 816F             >
 445+ 816F             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 816F             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 816F             >
 445+ 816F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 816F AE 70                        dw      QLOADING                // ?loading
 447+ 8171 51 6C 6F 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 447+ 8175 0E 6B
 448+ 8177 A5 6C                        dw      BSCR                    // b/scr
 449+ 8179 65 6D 03 6B                  dw      BLK, FETCH              // blk @
 450+ 817D 47 6A                        dw      OVER                    // over
 451+ 817F 63 7A                        dw      MOD                     // mod
 452+ 8181 B0 6E                        dw      SUBTRACT                // -
 453+ 8183 65 6D E4 6A                  dw      BLK, PLUSSTORE          // +!
 454+ 8187 3F 69                        dw      EXIT                    // ;
 455+ 8189
 456+ 8189              //  ______________________________________________________________________
 457+ 8189              //
 458+ 8189              // '            -- xt
 459+ 8189                              Colon_Def TICK, "'", is_normal
 459+ 8189             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 459+ 8189             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 459+ 8189             >
 459+ 8189             >                // dummy db directives used to calculate length of namec
 459+ 8189 27          >                db      "'"
 459+ 818A             >len_NFA         defl    $ - temp_NFA
 459+ 818A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 459+ 8189             >
 459+ 8189 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 459+ 818A 27          >                db      "'"               // name string in 7-bit ascii, but
 459+ 818B             >                org     $-1                 // alter last byte of Name just above to set
 459+ 818A A7          >                db      {b $} | END_BIT     // msb as name end
 459+ 818B             >
 459+ 818B 66 81       >                dw      last_NFA            // Link to previous definition Name
 459+ 818D             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 459+ 818D CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 459+ 8190             >
 459+ 8190             >
 459+ 8190             >                endif           ; ok        // for other definitions it "points" the correct handler
 459+ 8190             >                // Use of "; ok" to suppress "warning[fwdref]"
 459+ 8190             >
 459+ 8190             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 460+ 8190 8C 75                        dw      LFIND                   // -find
 461+ 8192 7C 69                        dw      ZEQUAL                  // 0=
 462+ 8194 51 6C 30 70                  dw      ZERO, QERROR            // 0 ?error
 463+ 8198 55 6A                        dw      DROP                    // drop
 464+ 819A 3F 69                        dw      EXIT                    // ;
 465+ 819C
 466+ 819C              //  ______________________________________________________________________
 467+ 819C              //
 468+ 819C              // forget       -- cccc
 469+ 819C                              Colon_Def FORGET, "FORGET", is_normal
 469+ 819C             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 469+ 819C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 469+ 819C             >
 469+ 819C             >                // dummy db directives used to calculate length of namec
 469+ 819C 46 4F 52 47 >                db      "FORGET"
 469+ 81A0 45 54       >
 469+ 81A2             >len_NFA         defl    $ - temp_NFA
 469+ 81A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 469+ 819C             >
 469+ 819C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 469+ 819D 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 469+ 81A1 45 54       >
 469+ 81A3             >                org     $-1                 // alter last byte of Name just above to set
 469+ 81A2 D4          >                db      {b $} | END_BIT     // msb as name end
 469+ 81A3             >
 469+ 81A3 89 81       >                dw      last_NFA            // Link to previous definition Name
 469+ 81A5             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 469+ 81A5 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 469+ 81A8             >
 469+ 81A8             >
 469+ 81A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 469+ 81A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 469+ 81A8             >
 469+ 81A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 470+ 81A8 AC 6D 03 6B                  dw      CURRENT, FETCH          // current @
 471+ 81AC 9E 6D 03 6B                  dw      CONTEXT, FETCH          // context @
 472+ 81B0 B0 6E A5 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 472+ 81B4 17 00 30 70
 473+ 81B8 8D 81 FB 6F                  dw      TICK, TO_BODY           // ' >body
 474+ 81BC 82 6A 15 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 474+ 81C0 03 6B
 475+ 81C2 CA 6E A5 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 475+ 81C6 15 00 30 70
 476+ 81CA 82 6A CF 6F                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 476+ 81CE 1E 6D 0E 6B
 477+ 81D2 AF 6F 03 6B                  dw      LFA, FETCH              // lfa @
 478+ 81D6 9E 6D 03 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 478+ 81DA 0E 6B
 479+ 81DC 3F 69                        dw      EXIT                    // ;
 480+ 81DE
 481+ 81DE              //  ______________________________________________________________________
 482+ 81DE              //
 483+ 81DE              // marker       -- cccc
 484+ 81DE                              Colon_Def MARKER, "MARKER", is_immediate
 484+ 81DE             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 484+ 81DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 484+ 81DE             >
 484+ 81DE             >                // dummy db directives used to calculate length of namec
 484+ 81DE 4D 41 52 4B >                db      "MARKER"
 484+ 81E2 45 52       >
 484+ 81E4             >len_NFA         defl    $ - temp_NFA
 484+ 81E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 484+ 81DE             >
 484+ 81DE C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 484+ 81DF 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 484+ 81E3 45 52       >
 484+ 81E5             >                org     $-1                 // alter last byte of Name just above to set
 484+ 81E4 D2          >                db      {b $} | END_BIT     // msb as name end
 484+ 81E5             >
 484+ 81E5 9C 81       >                dw      last_NFA            // Link to previous definition Name
 484+ 81E7             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 484+ 81E7 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 484+ 81EA             >
 484+ 81EA             >
 484+ 81EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 484+ 81EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 484+ 81EA             >
 484+ 81EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 485+ 81EA AD 71                        dw      CBUILDS
 486+ 81EC 2D 6D 03 6B                  dw      VOC_LINK, FETCH, COMMA
 486+ 81F0 79 6E
 487+ 81F2 AC 6D 03 6B                  dw      CURRENT, FETCH, COMMA
 487+ 81F6 79 6E
 488+ 81F8 9E 6D 03 6B                  dw      CONTEXT, FETCH, COMMA
 488+ 81FC 79 6E
 489+ 81FE 9E 6F 79 6E                  dw      LATEST, COMMA
 490+ 8202 9E 6F E4 6F                  dw      LATEST, PFA, LFA, FETCH, COMMA
 490+ 8206 AF 6F 03 6B
 490+ 820A 79 6E
 491+ 820C BE 71                        dw      DOES_TO
 492+ 820E 82 6A 03 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 492+ 8212 2D 6D 0E 6B
 492+ 8216 F9 69
 493+ 8218 82 6A 03 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 493+ 821C AC 6D 0E 6B
 493+ 8220 F9 69
 494+ 8222 82 6A 03 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 494+ 8226 9E 6D 0E 6B
 494+ 822A F9 69
 495+ 822C 82 6A 03 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 495+ 8230 1E 6D 0E 6B
 495+ 8234 F9 69
 496+ 8236 03 6B AC 6D                  dw           FETCH, CURRENT, FETCH, STORE
 496+ 823A 03 6B 0E 6B
 497+ 823E 3F 69                        dw      EXIT
 498+ 8240
 499+ 8240              //  ______________________________________________________________________
 500+ 8240              //
 501+ 8240              // spaces       n --
 502+ 8240                              Colon_Def SPACES, "SPACES", is_normal
 502+ 8240             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 502+ 8240             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 502+ 8240             >
 502+ 8240             >                // dummy db directives used to calculate length of namec
 502+ 8240 53 50 41 43 >                db      "SPACES"
 502+ 8244 45 53       >
 502+ 8246             >len_NFA         defl    $ - temp_NFA
 502+ 8246             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 502+ 8240             >
 502+ 8240 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 502+ 8241 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 502+ 8245 45 53       >
 502+ 8247             >                org     $-1                 // alter last byte of Name just above to set
 502+ 8246 D3          >                db      {b $} | END_BIT     // msb as name end
 502+ 8247             >
 502+ 8247 DE 81       >                dw      last_NFA            // Link to previous definition Name
 502+ 8249             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 502+ 8249 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 502+ 824C             >
 502+ 824C             >
 502+ 824C             >                endif           ; ok        // for other definitions it "points" the correct handler
 502+ 824C             >                // Use of "; ok" to suppress "warning[fwdref]"
 502+ 824C             >
 502+ 824C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 503+ 824C 51 6C 17 6F                  dw      ZERO, MAX
 504+ 8250 51 6C 45 64                  dw      ZERO, C_Q_DO
 505+ 8254 08 00                        dw      Spaces_Leave - $
 506+ 8256              Spaces_Loop:
 507+ 8256 66 6F                        dw          SPACE
 508+ 8258 F8 63                        dw      C_LOOP
 509+ 825A FC FF                        dw      Spaces_Loop - $
 510+ 825C              Spaces_Leave:
 511+ 825C 3F 69                        dw      EXIT                    // ;
 512+ 825E
 513+ 825E              //  ______________________________________________________________________
 514+ 825E              //
 515+ 825E              // <#           --
 516+ 825E                              Colon_Def BEGIN_DASH, "<#", is_normal
 516+ 825E             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 516+ 825E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 516+ 825E             >
 516+ 825E             >                // dummy db directives used to calculate length of namec
 516+ 825E 3C 23       >                db      "<#"
 516+ 8260             >len_NFA         defl    $ - temp_NFA
 516+ 8260             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 516+ 825E             >
 516+ 825E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 516+ 825F 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 516+ 8261             >                org     $-1                 // alter last byte of Name just above to set
 516+ 8260 A3          >                db      {b $} | END_BIT     // msb as name end
 516+ 8261             >
 516+ 8261 40 82       >                dw      last_NFA            // Link to previous definition Name
 516+ 8263             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 516+ 8263 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 516+ 8266             >
 516+ 8266             >
 516+ 8266             >                endif           ; ok        // for other definitions it "points" the correct handler
 516+ 8266             >                // Use of "; ok" to suppress "warning[fwdref]"
 516+ 8266             >
 516+ 8266             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 517+ 8266 BC 73 F4 6D                  dw      PAD, HLD, STORE
 517+ 826A 0E 6B
 518+ 826C 3F 69                        dw      EXIT
 519+ 826E
 520+ 826E              //  ______________________________________________________________________
 521+ 826E              //
 522+ 826E              // #>           --
 523+ 826E                              Colon_Def DASH_END, "#>", is_normal
 523+ 826E             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 523+ 826E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ 826E             >
 523+ 826E             >                // dummy db directives used to calculate length of namec
 523+ 826E 23 3E       >                db      "#>"
 523+ 8270             >len_NFA         defl    $ - temp_NFA
 523+ 8270             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ 826E             >
 523+ 826E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ 826F 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 523+ 8271             >                org     $-1                 // alter last byte of Name just above to set
 523+ 8270 BE          >                db      {b $} | END_BIT     // msb as name end
 523+ 8271             >
 523+ 8271 5E 82       >                dw      last_NFA            // Link to previous definition Name
 523+ 8273             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 8273 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 8276             >
 523+ 8276             >
 523+ 8276             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 8276             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 8276             >
 523+ 8276             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 8276 BB 6A                        dw      TWO_DROP
 525+ 8278 F4 6D 03 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 525+ 827C BC 73 47 6A
 525+ 8280 B0 6E
 526+ 8282 3F 69                        dw      EXIT
 527+ 8284
 528+ 8284              //  ______________________________________________________________________
 529+ 8284              //
 530+ 8284              // sign         n d -- d
 531+ 8284                              Colon_Def SIGN, "SIGN", is_normal
 531+ 8284             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 531+ 8284             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 531+ 8284             >
 531+ 8284             >                // dummy db directives used to calculate length of namec
 531+ 8284 53 49 47 4E >                db      "SIGN"
 531+ 8288             >len_NFA         defl    $ - temp_NFA
 531+ 8288             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 531+ 8284             >
 531+ 8284 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 531+ 8285 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 531+ 8289             >                org     $-1                 // alter last byte of Name just above to set
 531+ 8288 CE          >                db      {b $} | END_BIT     // msb as name end
 531+ 8289             >
 531+ 8289 6E 82       >                dw      last_NFA            // Link to previous definition Name
 531+ 828B             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 531+ 828B CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 531+ 828E             >
 531+ 828E             >
 531+ 828E             >                endif           ; ok        // for other definitions it "points" the correct handler
 531+ 828E             >                // Use of "; ok" to suppress "warning[fwdref]"
 531+ 828E             >
 531+ 828E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 532+ 828E 8D 6A 96 69                  dw      ROT, ZLESS
 533+ 8292 1C 64                        dw      ZBRANCH
 534+ 8294 08 00                        dw      Sign_Endif - $
 535+ 8296 A5 63 2D 00                  dw          LIT, 45, HOLD
 535+ 829A A5 73
 536+ 829C              Sign_Endif:
 537+ 829C 3F 69                        dw      EXIT
 538+ 829E
 539+ 829E              //  ______________________________________________________________________
 540+ 829E              //
 541+ 829E              // #           d1 -- d2
 542+ 829E                              Colon_Def DASH, "#", is_normal
 542+ 829E             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 542+ 829E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 542+ 829E             >
 542+ 829E             >                // dummy db directives used to calculate length of namec
 542+ 829E 23          >                db      "#"
 542+ 829F             >len_NFA         defl    $ - temp_NFA
 542+ 829F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 542+ 829E             >
 542+ 829E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 542+ 829F 23          >                db      "#"               // name string in 7-bit ascii, but
 542+ 82A0             >                org     $-1                 // alter last byte of Name just above to set
 542+ 829F A3          >                db      {b $} | END_BIT     // msb as name end
 542+ 82A0             >
 542+ 82A0 84 82       >                dw      last_NFA            // Link to previous definition Name
 542+ 82A2             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 542+ 82A2 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 542+ 82A5             >
 542+ 82A5             >
 542+ 82A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 542+ 82A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 542+ 82A5             >
 542+ 82A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 543+ 82A5 C3 6D 03 6B                  dw      BASE, FETCH
 544+ 82A9
 545+ 82A9 50 69                        dw      TO_R                    // >r           ( ud1 )
 546+ 82AB 51 6C 74 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 546+ 82AF A6 68
 547+ 82B1 62 69 77 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 547+ 82B5 50 69
 548+ 82B7 A6 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 549+ 82B9 62 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 550+ 82BB
 551+ 82BB 8D 6A                        dw      ROT
 552+ 82BD A5 63 09 00                  dw      LIT, 9, OVER, LESS
 552+ 82C1 47 6A DC 6E
 553+ 82C5 1C 64                        dw      ZBRANCH
 554+ 82C7 08 00                        dw      Dash_Endif - $
 555+ 82C9 A5 63 07 00                  dw          LIT, 7, PLUS
 555+ 82CD BA 69
 556+ 82CF              Dash_Endif:
 557+ 82CF
 558+ 82CF A5 63 30 00                  dw      LIT, 48, PLUS, HOLD
 558+ 82D3 BA 69 A5 73
 559+ 82D7 3F 69                        dw      EXIT
 560+ 82D9
 561+ 82D9              //  ______________________________________________________________________
 562+ 82D9              //
 563+ 82D9              // #s           d1 -- d2
 564+ 82D9                              Colon_Def DASHES, "#S", is_normal
 564+ 82D9             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 564+ 82D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 564+ 82D9             >
 564+ 82D9             >                // dummy db directives used to calculate length of namec
 564+ 82D9 23 53       >                db      "#S"
 564+ 82DB             >len_NFA         defl    $ - temp_NFA
 564+ 82DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 564+ 82D9             >
 564+ 82D9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 564+ 82DA 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 564+ 82DC             >                org     $-1                 // alter last byte of Name just above to set
 564+ 82DB D3          >                db      {b $} | END_BIT     // msb as name end
 564+ 82DC             >
 564+ 82DC 9E 82       >                dw      last_NFA            // Link to previous definition Name
 564+ 82DE             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 564+ 82DE CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 564+ 82E1             >
 564+ 82E1             >
 564+ 82E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 564+ 82E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 564+ 82E1             >
 564+ 82E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 565+ 82E1              Dashes_Begin:
 566+ 82E1 A2 82 D7 6A                  dw      DASH, TWO_DUP
 567+ 82E5 ED 68 7C 69                  dw          OR_OP, ZEQUAL
 568+ 82E9 1C 64                        dw      ZBRANCH
 569+ 82EB F6 FF                        dw      Dashes_Begin - $
 570+ 82ED 3F 69                        dw      EXIT
 571+ 82EF
 572+ 82EF              //  ______________________________________________________________________
 573+ 82EF              //
 574+ 82EF              // d.r          d n --
 575+ 82EF                              Colon_Def D_DOT_R, "D.R", is_normal
 575+ 82EF             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 575+ 82EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ 82EF             >
 575+ 82EF             >                // dummy db directives used to calculate length of namec
 575+ 82EF 44 2E 52    >                db      "D.R"
 575+ 82F2             >len_NFA         defl    $ - temp_NFA
 575+ 82F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ 82EF             >
 575+ 82EF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ 82F0 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 575+ 82F3             >                org     $-1                 // alter last byte of Name just above to set
 575+ 82F2 D2          >                db      {b $} | END_BIT     // msb as name end
 575+ 82F3             >
 575+ 82F3 D9 82       >                dw      last_NFA            // Link to previous definition Name
 575+ 82F5             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 82F5 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 575+ 82F8             >
 575+ 82F8             >
 575+ 82F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 82F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 82F8             >
 575+ 82F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 82F8 50 69                        dw      TO_R
 577+ 82FA 69 6A 83 79                  dw      TUCK, DABS
 578+ 82FE 63 82 DE 82                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 578+ 8302 8B 82 73 82
 579+ 8306 62 69                        dw      R_TO
 580+ 8308 47 6A B0 6E                  dw      OVER, SUBTRACT, SPACES, TYPE
 580+ 830C 49 82 48 72
 581+ 8310 3F 69                        dw      EXIT
 582+ 8312
 583+ 8312              //  ______________________________________________________________________
 584+ 8312              //
 585+ 8312              // .r           n1 n2 --
 586+ 8312                              Colon_Def DOT_R, ".R", is_normal
 586+ 8312             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 586+ 8312             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ 8312             >
 586+ 8312             >                // dummy db directives used to calculate length of namec
 586+ 8312 2E 52       >                db      ".R"
 586+ 8314             >len_NFA         defl    $ - temp_NFA
 586+ 8314             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ 8312             >
 586+ 8312 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ 8313 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 586+ 8315             >                org     $-1                 // alter last byte of Name just above to set
 586+ 8314 D2          >                db      {b $} | END_BIT     // msb as name end
 586+ 8315             >
 586+ 8315 EF 82       >                dw      last_NFA            // Link to previous definition Name
 586+ 8317             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 8317 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 586+ 831A             >
 586+ 831A             >
 586+ 831A             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 831A             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 831A             >
 586+ 831A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 831A 50 69                        dw      TO_R
 588+ 831C 9E 6E 62 69                  dw      S_TO_D, R_TO
 589+ 8320 F5 82                        dw      D_DOT_R
 590+ 8322 3F 69                        dw      EXIT
 591+ 8324
 592+ 8324              //  ______________________________________________________________________
 593+ 8324              //
 594+ 8324              // d.           d --
 595+ 8324                              Colon_Def D_DOT, "D.", is_normal
 595+ 8324             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 595+ 8324             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 595+ 8324             >
 595+ 8324             >                // dummy db directives used to calculate length of namec
 595+ 8324 44 2E       >                db      "D."
 595+ 8326             >len_NFA         defl    $ - temp_NFA
 595+ 8326             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 595+ 8324             >
 595+ 8324 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 595+ 8325 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 595+ 8327             >                org     $-1                 // alter last byte of Name just above to set
 595+ 8326 AE          >                db      {b $} | END_BIT     // msb as name end
 595+ 8327             >
 595+ 8327 12 83       >                dw      last_NFA            // Link to previous definition Name
 595+ 8329             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 595+ 8329 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 595+ 832C             >
 595+ 832C             >
 595+ 832C             >                endif           ; ok        // for other definitions it "points" the correct handler
 595+ 832C             >                // Use of "; ok" to suppress "warning[fwdref]"
 595+ 832C             >
 595+ 832C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 596+ 832C 51 6C F5 82                  dw      ZERO, D_DOT_R, SPACE
 596+ 8330 66 6F
 597+ 8332 3F 69                        dw      EXIT
 598+ 8334
 599+ 8334              //  ______________________________________________________________________
 600+ 8334              //
 601+ 8334              // .            n --
 602+ 8334                              Colon_Def DOT, ".", is_normal
 602+ 8334             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 602+ 8334             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ 8334             >
 602+ 8334             >                // dummy db directives used to calculate length of namec
 602+ 8334 2E          >                db      "."
 602+ 8335             >len_NFA         defl    $ - temp_NFA
 602+ 8335             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ 8334             >
 602+ 8334 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ 8335 2E          >                db      "."               // name string in 7-bit ascii, but
 602+ 8336             >                org     $-1                 // alter last byte of Name just above to set
 602+ 8335 AE          >                db      {b $} | END_BIT     // msb as name end
 602+ 8336             >
 602+ 8336 24 83       >                dw      last_NFA            // Link to previous definition Name
 602+ 8338             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 8338 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 833B             >
 602+ 833B             >
 602+ 833B             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 833B             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 833B             >
 602+ 833B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 833B 9E 6E 29 83                  dw      S_TO_D, D_DOT
 604+ 833F 3F 69                        dw      EXIT
 605+ 8341
 606+ 8341              //  ______________________________________________________________________
 607+ 8341              //
 608+ 8341              // ?            n --
 609+ 8341                              Colon_Def QUESTION, "?", is_normal
 609+ 8341             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 609+ 8341             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ 8341             >
 609+ 8341             >                // dummy db directives used to calculate length of namec
 609+ 8341 3F          >                db      "?"
 609+ 8342             >len_NFA         defl    $ - temp_NFA
 609+ 8342             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ 8341             >
 609+ 8341 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ 8342 3F          >                db      "?"               // name string in 7-bit ascii, but
 609+ 8343             >                org     $-1                 // alter last byte of Name just above to set
 609+ 8342 BF          >                db      {b $} | END_BIT     // msb as name end
 609+ 8343             >
 609+ 8343 34 83       >                dw      last_NFA            // Link to previous definition Name
 609+ 8345             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 8345 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 8348             >
 609+ 8348             >
 609+ 8348             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 8348             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 8348             >
 609+ 8348             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 8348 03 6B 38 83                  dw      FETCH, DOT
 611+ 834C 3F 69                        dw      EXIT
 612+ 834E
 613+ 834E              //  ______________________________________________________________________
 614+ 834E              //
 615+ 834E              // u.           u --
 616+ 834E                              Colon_Def U_DOT, "U.", is_normal
 616+ 834E             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 616+ 834E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 616+ 834E             >
 616+ 834E             >                // dummy db directives used to calculate length of namec
 616+ 834E 55 2E       >                db      "U."
 616+ 8350             >len_NFA         defl    $ - temp_NFA
 616+ 8350             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 616+ 834E             >
 616+ 834E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 616+ 834F 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 616+ 8351             >                org     $-1                 // alter last byte of Name just above to set
 616+ 8350 AE          >                db      {b $} | END_BIT     // msb as name end
 616+ 8351             >
 616+ 8351 41 83       >                dw      last_NFA            // Link to previous definition Name
 616+ 8353             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 616+ 8353 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 616+ 8356             >
 616+ 8356             >
 616+ 8356             >                endif           ; ok        // for other definitions it "points" the correct handler
 616+ 8356             >                // Use of "; ok" to suppress "warning[fwdref]"
 616+ 8356             >
 616+ 8356             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 617+ 8356 51 6C 29 83                  dw      ZERO, D_DOT
 618+ 835A 3F 69                        dw      EXIT
 619+ 835C
 620+ 835C              //  ______________________________________________________________________
 621+ 835C              //
 622+ 835C              // words        --
 623+ 835C                              Colon_Def WORDS, "WORDS", is_normal
 623+ 835C             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 623+ 835C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 623+ 835C             >
 623+ 835C             >                // dummy db directives used to calculate length of namec
 623+ 835C 57 4F 52 44 >                db      "WORDS"
 623+ 8360 53          >
 623+ 8361             >len_NFA         defl    $ - temp_NFA
 623+ 8361             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 623+ 835C             >
 623+ 835C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 623+ 835D 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 623+ 8361 53          >
 623+ 8362             >                org     $-1                 // alter last byte of Name just above to set
 623+ 8361 D3          >                db      {b $} | END_BIT     // msb as name end
 623+ 8362             >
 623+ 8362 4E 83       >                dw      last_NFA            // Link to previous definition Name
 623+ 8364             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 623+ 8364 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 623+ 8367             >
 623+ 8367             >
 623+ 8367             >                endif           ; ok        // for other definitions it "points" the correct handler
 623+ 8367             >                // Use of "; ok" to suppress "warning[fwdref]"
 623+ 8367             >
 623+ 8367             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 624+ 8367 A5 63 80 00                  dw      LIT, 128, OUT, STORE
 624+ 836B 79 6D 0E 6B
 625+ 836F 9E 6D 03 6B                  dw      CONTEXT, FETCH, FETCH
 625+ 8373 03 6B
 626+ 8375              Words_Begin:
 627+ 8375 82 6A 1A 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 627+ 8379 A5 63 1F 00
 627+ 837D DD 68
 628+ 837F 79 6D 03 6B                  dw          OUT, FETCH, PLUS
 628+ 8383 BA 69
 629+ 8385 8B 6C DC 6E                  dw          CL, LESS, ZEQUAL
 629+ 8389 7C 69
 630+ 838B 1C 64                        dw          ZBRANCH
 631+ 838D 0A 00                        dw          Words_Endif - $
 632+ 838F FC 65 51 6C                  dw              CR, ZERO, OUT, STORE
 632+ 8393 79 6D 0E 6B
 633+ 8397              Words_Endif:
 634+ 8397 82 6A 00 76                  dw          DUP, ID_DOT
 635+ 839B E4 6F AF 6F                  dw          PFA, LFA, FETCH
 635+ 839F 03 6B
 636+ 83A1 82 6A 7C 69                  dw          DUP, ZEQUAL
 637+ 83A5 0E 67 ED 68                  dw          QTERMINAL, OR_OP
 638+ 83A9 1C 64                        dw      ZBRANCH
 639+ 83AB CA FF                        dw      Words_Begin - $
 640+ 83AD 55 6A                        dw      DROP
 641+ 83AF 3F 69                        dw      EXIT
 642+ 83B1
 643+ 83B1              //  ______________________________________________________________________
 644+ 83B1              //
 645+ 83B1              // list         n --
 646+ 83B1                              Colon_Def LIST, "LIST", is_normal
 646+ 83B1             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 646+ 83B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 646+ 83B1             >
 646+ 83B1             >                // dummy db directives used to calculate length of namec
 646+ 83B1 4C 49 53 54 >                db      "LIST"
 646+ 83B5             >len_NFA         defl    $ - temp_NFA
 646+ 83B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 646+ 83B1             >
 646+ 83B1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 646+ 83B2 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 646+ 83B6             >                org     $-1                 // alter last byte of Name just above to set
 646+ 83B5 D4          >                db      {b $} | END_BIT     // msb as name end
 646+ 83B6             >
 646+ 83B6 5C 83       >                dw      last_NFA            // Link to previous definition Name
 646+ 83B8             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 646+ 83B8 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 646+ 83BB             >
 646+ 83BB             >
 646+ 83BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 646+ 83BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 646+ 83BB             >
 646+ 83BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 647+ 83BB 5C 71 FC 65                  dw      DECIMAL, CR
 648+ 83BF 82 6A 83 6D                  dw      DUP, SCR, STORE
 648+ 83C3 0E 6B
 649+ 83C5 20 74                        dw      C_DOT_QUOTE
 650+ 83C7 05 53 63 72                  db      5, "Scr# "
 650+ 83CB 23 20
 651+ 83CD 38 83                        dw      DOT
 652+ 83CF B2 6C 51 6C                  dw      LSCR, ZERO, C_DO
 652+ 83D3 70 64
 653+ 83D5              List_Loop:
 654+ 83D5 FC 65                        dw          CR
 655+ 83D7 78 64 6C 6C                  dw          I, THREE
 656+ 83DB 17 83 66 6F                  dw          DOT_R, SPACE
 657+ 83DF 78 64 83 6D                  dw          I, SCR, FETCH, DOT_LINE
 657+ 83E3 03 6B BF 7A
 658+ 83E7 0E 67                        dw          QTERMINAL
 659+ 83E9 1C 64                        dw          ZBRANCH
 660+ 83EB 06 00                        dw          List_Endif - $
 661+ 83ED 2F 64                        dw              C_LEAVE
 662+ 83EF 06 00                        dw              List_Leave - $
 663+ 83F1              List_Endif:
 664+ 83F1 F8 63                        dw      C_LOOP
 665+ 83F3 E2 FF                        dw      List_Loop - $
 666+ 83F5              List_Leave:
 667+ 83F5 FC 65                        dw      CR
 668+ 83F7 3F 69                        dw      EXIT
 669+ 83F9
 670+ 83F9              //  ______________________________________________________________________
 671+ 83F9              //
 672+ 83F9              // index        n1 n2 --
 673+ 83F9                              Colon_Def INDEX, "INDEX", is_normal
 673+ 83F9             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 673+ 83F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 673+ 83F9             >
 673+ 83F9             >                // dummy db directives used to calculate length of namec
 673+ 83F9 49 4E 44 45 >                db      "INDEX"
 673+ 83FD 58          >
 673+ 83FE             >len_NFA         defl    $ - temp_NFA
 673+ 83FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 673+ 83F9             >
 673+ 83F9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 673+ 83FA 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 673+ 83FE 58          >
 673+ 83FF             >                org     $-1                 // alter last byte of Name just above to set
 673+ 83FE D8          >                db      {b $} | END_BIT     // msb as name end
 673+ 83FF             >
 673+ 83FF B1 83       >                dw      last_NFA            // Link to previous definition Name
 673+ 8401             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 673+ 8401 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 673+ 8404             >
 673+ 8404             >
 673+ 8404             >                endif           ; ok        // for other definitions it "points" the correct handler
 673+ 8404             >                // Use of "; ok" to suppress "warning[fwdref]"
 673+ 8404             >
 673+ 8404             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 674+ 8404 D7 69 77 6A                  dw      ONE_PLUS, SWAP, C_DO
 674+ 8408 70 64
 675+ 840A              Index_Loop:
 676+ 840A FC 65 78 64                  dw          CR, I, THREE
 676+ 840E 6C 6C
 677+ 8410 17 83 66 6F                  dw          DOT_R, SPACE
 678+ 8414 51 6C 78 64                  dw          ZERO, I, DOT_LINE
 678+ 8418 BF 7A
 679+ 841A 0E 67                        dw          QTERMINAL
 680+ 841C 1C 64                        dw          ZBRANCH
 681+ 841E 06 00                        dw          Index_Endif - $
 682+ 8420 2F 64                        dw              C_LEAVE
 683+ 8422 06 00                        dw              Index_Leave - $
 684+ 8424              Index_Endif:
 685+ 8424 F8 63                        dw      C_LOOP
 686+ 8426 E4 FF                        dw      Index_Loop - $
 687+ 8428              Index_Leave:
 688+ 8428 FC 65                        dw      CR
 689+ 842A 3F 69                        dw      EXIT
 690+ 842C
 691+ 842C              //  ______________________________________________________________________
 692+ 842C              //
 693+ 842C              // cls          --
 694+ 842C                              Colon_Def CLS, "CLS", is_normal
 694+ 842C             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 694+ 842C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 694+ 842C             >
 694+ 842C             >                // dummy db directives used to calculate length of namec
 694+ 842C 43 4C 53    >                db      "CLS"
 694+ 842F             >len_NFA         defl    $ - temp_NFA
 694+ 842F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 694+ 842C             >
 694+ 842C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 694+ 842D 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 694+ 8430             >                org     $-1                 // alter last byte of Name just above to set
 694+ 842F D3          >                db      {b $} | END_BIT     // msb as name end
 694+ 8430             >
 694+ 8430 F9 83       >                dw      last_NFA            // Link to previous definition Name
 694+ 8432             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 694+ 8432 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 694+ 8435             >
 694+ 8435             >
 694+ 8435             >                endif           ; ok        // for other definitions it "points" the correct handler
 694+ 8435             >                // Use of "; ok" to suppress "warning[fwdref]"
 694+ 8435             >
 694+ 8435             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 695+ 8435 A5 63 0E 00                  dw      LIT, $0E, EMITC
 695+ 8439 E7 65
 696+ 843B 3F 69                        dw      EXIT
 697+ 843D
 698+ 843D              //  ______________________________________________________________________
 699+ 843D              //
 700+ 843D              // splash       --
 701+ 843D                              Colon_Def SPLASH, "SPLASH", is_normal
 701+ 843D             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 701+ 843D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 701+ 843D             >
 701+ 843D             >                // dummy db directives used to calculate length of namec
 701+ 843D 53 50 4C 41 >                db      "SPLASH"
 701+ 8441 53 48       >
 701+ 8443             >len_NFA         defl    $ - temp_NFA
 701+ 8443             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 701+ 843D             >
 701+ 843D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 701+ 843E 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 701+ 8442 53 48       >
 701+ 8444             >                org     $-1                 // alter last byte of Name just above to set
 701+ 8443 C8          >                db      {b $} | END_BIT     // msb as name end
 701+ 8444             >
 701+ 8444 2C 84       >                dw      last_NFA            // Link to previous definition Name
 701+ 8446             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 701+ 8446 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 701+ 8449             >
 701+ 8449             >
 701+ 8449             >                endif           ; ok        // for other definitions it "points" the correct handler
 701+ 8449             >                // Use of "; ok" to suppress "warning[fwdref]"
 701+ 8449             >
 701+ 8449             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 702+ 8449 32 84                        dw      CLS
 703+ 844B 20 74                        dw      C_DOT_QUOTE
 704+ 844D 58                           db      88
 705+ 844E 76 2D 46 6F                  db      "v-Forth 1.52 NextZXOS version", 13    // 29
 705+ 8452 72 74 68 20
 705+ 8456 31 2E 35 32
 705+ 845A 20 4E 65 78
 705+ 845E 74 5A 58 4F
 705+ 8462 53 20 76 65
 705+ 8466 72 73 69 6F
 705+ 846A 6E 0D
 706+ 846C 44 69 72 65                  db      "Direct Threaded - build 20220730", 13  // 31
 706+ 8470 63 74 20 54
 706+ 8474 68 72 65 61
 706+ 8478 64 65 64 20
 706+ 847C 2D 20 62 75
 706+ 8480 69 6C 64 20
 706+ 8484 32 30 32 32
 706+ 8488 30 37 33 30
 706+ 848C 0D
 707+ 848D 31 39 39 30                  db      "1990-2022 Matteo Vitturi", 13        // 25
 707+ 8491 2D 32 30 32
 707+ 8495 32 20 4D 61
 707+ 8499 74 74 65 6F
 707+ 849D 20 56 69 74
 707+ 84A1 74 75 72 69
 707+ 84A5 0D
 708+ 84A6 3F 69                        dw      EXIT
 709+ 84A8
 710+ 84A8              //  ______________________________________________________________________
 711+ 84A8              //
 712+ 84A8              // video        --
 713+ 84A8                              Colon_Def VIDEO, "VIDEO", is_normal
 713+ 84A8             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 713+ 84A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 713+ 84A8             >
 713+ 84A8             >                // dummy db directives used to calculate length of namec
 713+ 84A8 56 49 44 45 >                db      "VIDEO"
 713+ 84AC 4F          >
 713+ 84AD             >len_NFA         defl    $ - temp_NFA
 713+ 84AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 713+ 84A8             >
 713+ 84A8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 713+ 84A9 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 713+ 84AD 4F          >
 713+ 84AE             >                org     $-1                 // alter last byte of Name just above to set
 713+ 84AD CF          >                db      {b $} | END_BIT     // msb as name end
 713+ 84AE             >
 713+ 84AE 3D 84       >                dw      last_NFA            // Link to previous definition Name
 713+ 84B0             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 713+ 84B0 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 713+ 84B3             >
 713+ 84B3             >
 713+ 84B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 713+ 84B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 713+ 84B3             >
 713+ 84B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 714+ 84B3 63 6C 82 6A                  dw      TWO, DUP, DEVICE, STORE
 714+ 84B7 09 7B 0E 6B
 715+ 84BB 4B 67                        dw      SELECT
 716+ 84BD 3F 69                        dw      EXIT
 717+ 84BF
 718+ 84BF              //  ______________________________________________________________________
 719+ 84BF              //
 720+ 84BF              // accept-      a n1 -- n2
 721+ 84BF                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 721+ 84BF             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 721+ 84BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 721+ 84BF             >
 721+ 84BF             >                // dummy db directives used to calculate length of namec
 721+ 84BF 41 43 43 45 >                db      "ACCEPT-"
 721+ 84C3 50 54 2D    >
 721+ 84C6             >len_NFA         defl    $ - temp_NFA
 721+ 84C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 721+ 84BF             >
 721+ 84BF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 721+ 84C0 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 721+ 84C4 50 54 2D    >
 721+ 84C7             >                org     $-1                 // alter last byte of Name just above to set
 721+ 84C6 AD          >                db      {b $} | END_BIT     // msb as name end
 721+ 84C7             >
 721+ 84C7 A8 84       >                dw      last_NFA            // Link to previous definition Name
 721+ 84C9             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 721+ 84C9 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 721+ 84CC             >
 721+ 84CC             >
 721+ 84CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 721+ 84CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 721+ 84CC             >
 721+ 84CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 722+ 84CC 50 69                        dw      TO_R
 723+ 84CE 51 6C                        dw      ZERO
 724+ 84D0 77 6A                        dw      SWAP
 725+ 84D2 82 6A                        dw      DUP
 726+ 84D4 62 69                        dw      R_TO
 727+ 84D6 BA 69                        dw      PLUS
 728+ 84D8 77 6A                        dw      SWAP
 729+ 84DA 70 64                        dw      C_DO
 730+ 84DC              AcceptN_Loop:
 731+ 84DC 40 7B                        dw          MMU7_FETCH
 732+ 84DE 28 67                        dw          INKEY
 733+ 84E0 77 6A 53 7B                  dw          SWAP, MMU7_STORE
 734+ 84E4 82 6A 7C 69                  dw          DUP, ZEQUAL
 735+ 84E8 1C 64                        dw          ZBRANCH
 736+ 84EA 06 00                        dw          AcceptN_Endif_1 - $
 737+ 84EC              //              dw              VIDEO, QUIT
 738+ 84EC 2F 64                        dw              C_LEAVE
 739+ 84EE 3A 00                        dw              AcceptN_Leave - $
 740+ 84F0
 741+ 84F0              AcceptN_Endif_1:
 742+ 84F0 82 6A A5 63                  dw          DUP, LIT, 13, EQUALS
 742+ 84F4 0D 00 BC 6E
 743+ 84F8 1C 64                        dw          ZBRANCH
 744+ 84FA 06 00                        dw          AcceptN_Endif_2 - $
 745+ 84FC 55 6A 51 6C                  dw              DROP, ZERO
 746+ 8500              AcceptN_Endif_2:
 747+ 8500 82 6A A5 63                  dw          DUP, LIT, 10, EQUALS
 747+ 8504 0A 00 BC 6E
 748+ 8508 1C 64                        dw          ZBRANCH
 749+ 850A 06 00                        dw          AcceptN_Endif_3 - $
 750+ 850C 55 6A 51 6C                  dw              DROP, ZERO
 751+ 8510              AcceptN_Endif_3:
 752+ 8510 78 64 26 6B                  dw          I, CSTORE, ONE_PLUS
 752+ 8514 D7 69
 753+ 8516
 754+ 8516 78 64 1A 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 754+ 851A 7C 69
 755+ 851C 1C 64                        dw          ZBRANCH
 756+ 851E 06 00                        dw              AcceptN_Endif_4 - $
 757+ 8520 2F 64                        dw                  C_LEAVE     //              leave
 758+ 8522 06 00                        dw                  AcceptN_Leave - $
 759+ 8524              AcceptN_Endif_4:                                 //      endif
 760+ 8524
 761+ 8524 F8 63                        dw      C_LOOP
 762+ 8526 B6 FF                        dw      AcceptN_Loop -$
 763+ 8528              AcceptN_Leave:
 764+ 8528 3F 69                        dw      EXIT
 765+ 852A
 766+ 852A              //  ______________________________________________________________________
 767+ 852A              //
 768+ 852A              // load-        n --
 769+ 852A              // Provided that a stream n is OPEN# via the standart BASIC
 770+ 852A              // it accepts text from stream #n to the normal INTERPRET
 771+ 852A              // up to now, text-file must end with QUIT
 772+ 852A                              Colon_Def LOAD_N, "LOAD-", is_normal
 772+ 852A             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 772+ 852A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 772+ 852A             >
 772+ 852A             >                // dummy db directives used to calculate length of namec
 772+ 852A 4C 4F 41 44 >                db      "LOAD-"
 772+ 852E 2D          >
 772+ 852F             >len_NFA         defl    $ - temp_NFA
 772+ 852F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 772+ 852A             >
 772+ 852A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 772+ 852B 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 772+ 852F 2D          >
 772+ 8530             >                org     $-1                 // alter last byte of Name just above to set
 772+ 852F AD          >                db      {b $} | END_BIT     // msb as name end
 772+ 8530             >
 772+ 8530 BF 84       >                dw      last_NFA            // Link to previous definition Name
 772+ 8532             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 772+ 8532 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 772+ 8535             >
 772+ 8535             >
 772+ 8535             >                endif           ; ok        // for other definitions it "points" the correct handler
 772+ 8535             >                // Use of "; ok" to suppress "warning[fwdref]"
 772+ 8535             >
 772+ 8535             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 773+ 8535 2E 6E 0E 6B                  dw      SOURCE_ID, STORE
 774+ 8539              Load_N_Begin:
 775+ 8539 EF 6C 03 6B                  dw          TIB, FETCH
 776+ 853D 82 6A A5 63                  dw          DUP, LIT, 80
 776+ 8541 50 00
 777+ 8543 D7 6A 95 73                  dw          TWO_DUP, BLANK
 778+ 8547 2E 6E 03 6B                  dw          SOURCE_ID, FETCH
 779+ 854B 73 79 82 6A                  dw          ABS_OP, DUP, DEVICE, STORE
 779+ 854F 09 7B 0E 6B
 780+ 8553 4B 67                        dw          SELECT
 781+ 8555 C9 84                        dw          ACCEPT_N
 782+ 8557 B0 84                        dw          VIDEO
 783+ 8559 BB 6A                        dw          TWO_DROP
 784+ 855B 51 6C 65 6D                  dw          ZERO, BLK, STORE
 784+ 855F 0E 6B
 785+ 8561 51 6C 6F 6D                  dw          ZERO, TO_IN, STORE
 785+ 8565 0E 6B
 786+ 8567 8A 77                        dw          INTERPRET
 787+ 8569 0E 67                        dw          QTERMINAL
 788+ 856B 1C 64                        dw      ZBRANCH
 789+ 856D CC FF                        dw      Load_N_Begin - $
 790+ 856F 3F 69                        dw      EXIT
 791+ 8571
 792+ 8571              //  ______________________________________________________________________
 793+ 8571              //
 794+ 8571              // load         n --
 795+ 8571              // if n is positive, it loads screen #n (as usual)
 796+ 8571              // if n is negative, it connects stream #n to the normal INTERPRET
 797+ 8571              // this second way is useful if you want to load any kind of file
 798+ 8571              // provied that it is OPEN# the usual BASIC way.
 799+ 8571                              Colon_Def LOAD, "LOAD", is_normal
 799+ 8571             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 799+ 8571             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 799+ 8571             >
 799+ 8571             >                // dummy db directives used to calculate length of namec
 799+ 8571 4C 4F 41 44 >                db      "LOAD"
 799+ 8575             >len_NFA         defl    $ - temp_NFA
 799+ 8575             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 799+ 8571             >
 799+ 8571 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 799+ 8572 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 799+ 8576             >                org     $-1                 // alter last byte of Name just above to set
 799+ 8575 C4          >                db      {b $} | END_BIT     // msb as name end
 799+ 8576             >
 799+ 8576 2A 85       >                dw      last_NFA            // Link to previous definition Name
 799+ 8578             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 799+ 8578 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 799+ 857B             >
 799+ 857B             >
 799+ 857B             >                endif           ; ok        // for other definitions it "points" the correct handler
 799+ 857B             >                // Use of "; ok" to suppress "warning[fwdref]"
 799+ 857B             >
 799+ 857B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 800+ 857B 82 6A 96 69                  dw      DUP, ZLESS
 801+ 857F 1C 64                        dw      ZBRANCH
 802+ 8581 08 00                        dw      Load_Else - $
 803+ 8583 32 85                        dw          LOAD_N
 804+ 8585 07 64                        dw      BRANCH
 805+ 8587 04 00                        dw      Load_Endif - $
 806+ 8589              Load_Else:
 807+ 8589 39 81                        dw          LOAD_P
 808+ 858B              Load_Endif:
 809+ 858B 3F 69                        dw      EXIT
 810+ 858D
 811+ 858D
 812+ 858D              //  ______________________________________________________________________
 813+ 858D              //
 814+ 858D              // autoexec     --
 815+ 858D              // this word is called the first time the Forth system boot to
 816+ 858D              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 817+ 858D                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 817+ 858D             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 817+ 858D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 817+ 858D             >
 817+ 858D             >                // dummy db directives used to calculate length of namec
 817+ 858D 41 55 54 4F >                db      "AUTOEXEC"
 817+ 8591 45 58 45 43 >
 817+ 8595             >len_NFA         defl    $ - temp_NFA
 817+ 8595             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 817+ 858D             >
 817+ 858D 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 817+ 858E 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 817+ 8592 45 58 45 43 >
 817+ 8596             >                org     $-1                 // alter last byte of Name just above to set
 817+ 8595 C3          >                db      {b $} | END_BIT     // msb as name end
 817+ 8596             >
 817+ 8596 71 85       >                dw      last_NFA            // Link to previous definition Name
 817+ 8598             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 817+ 8598 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 817+ 859B             >
 817+ 859B             >
 817+ 859B             >                endif           ; ok        // for other definitions it "points" the correct handler
 817+ 859B             >                // Use of "; ok" to suppress "warning[fwdref]"
 817+ 859B             >
 817+ 859B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 818+ 859B A5 63 0B 00                  dw      LIT, 11
 819+ 859F A5 63 FF 6B                  dw      LIT, NOOP
 820+ 85A3 A5 63 A0 78                  dw      LIT, Autoexec_Ptr
 821+ 85A7 0E 6B                        dw      STORE
 822+ 85A9 78 85                        dw      LOAD
 823+ 85AB 4F 78                        dw      QUIT
 824+ 85AD 3F 69                        dw      EXIT
 825+ 85AF
 826+ 85AF
 827+ 85AF              //  ______________________________________________________________________
 828+ 85AF              //
 829+ 85AF              // bye     --
 830+ 85AF              //
 831+ 85AF                              Colon_Def BYE, "BYE", is_normal
 831+ 85AF             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 831+ 85AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 831+ 85AF             >
 831+ 85AF             >                // dummy db directives used to calculate length of namec
 831+ 85AF 42 59 45    >                db      "BYE"
 831+ 85B2             >len_NFA         defl    $ - temp_NFA
 831+ 85B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 831+ 85AF             >
 831+ 85AF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 831+ 85B0 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 831+ 85B3             >                org     $-1                 // alter last byte of Name just above to set
 831+ 85B2 C5          >                db      {b $} | END_BIT     // msb as name end
 831+ 85B3             >
 831+ 85B3 8D 85       >                dw      last_NFA            // Link to previous definition Name
 831+ 85B5             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 831+ 85B5 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 831+ 85B8             >
 831+ 85B8             >
 831+ 85B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 831+ 85B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 831+ 85B8             >
 831+ 85B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 832+ 85B8 C8 7D                        dw      FLUSH
 833+ 85BA F7 7C                        dw      EMPTY_BUFFERS
 834+ 85BC 91 7B 03 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 834+ 85C0 8D 67 55 6A
 835+ 85C4 51 6C C1 6C                  dw      ZERO, PLUS_ORIGIN
 836+ 85C8 38 79                        dw      BASIC
 837+ 85CA
 838+ 85CA              //  ______________________________________________________________________
 839+ 85CA              //
 840+ 85CA              // invv     --
 841+ 85CA              //
 842+ 85CA              //              Colon_Def INVV, "INVV", is_normal
 843+ 85CA              //              dw      LIT, 20, EMITC, ONE, EMITC
 844+ 85CA              //              dw      EXIT
 845+ 85CA
 846+ 85CA              //  ______________________________________________________________________
 847+ 85CA              //
 848+ 85CA              // truv     --
 849+ 85CA              //
 850+ 85CA              //              Colon_Def TRUV, "TRUV", is_normal
 851+ 85CA              //              dw      LIT, 20, EMITC, ZERO, EMITC
 852+ 85CA              //              dw      EXIT
 853+ 85CA
 854+ 85CA              //  ______________________________________________________________________
 855+ 85CA              //
 856+ 85CA              // mark     --
 857+ 85CA              //
 858+ 85CA              //              Colon_Def MARK, "MARK", is_normal
 859+ 85CA              //              dw      INVV, TYPE, TRUV
 860+ 85CA              //              dw      EXIT
 861+ 85CA
 862+ 85CA              //  ______________________________________________________________________
 863+ 85CA              //
 864+ 85CA              // back     --
 865+ 85CA              //
 866+ 85CA                              Colon_Def BACK, "BACK", is_normal
 866+ 85CA             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 866+ 85CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 866+ 85CA             >
 866+ 85CA             >                // dummy db directives used to calculate length of namec
 866+ 85CA 42 41 43 4B >                db      "BACK"
 866+ 85CE             >len_NFA         defl    $ - temp_NFA
 866+ 85CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 866+ 85CA             >
 866+ 85CA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 866+ 85CB 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 866+ 85CF             >                org     $-1                 // alter last byte of Name just above to set
 866+ 85CE CB          >                db      {b $} | END_BIT     // msb as name end
 866+ 85CF             >
 866+ 85CF AF 85       >                dw      last_NFA            // Link to previous definition Name
 866+ 85D1             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 866+ 85D1 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 866+ 85D4             >
 866+ 85D4             >
 866+ 85D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 866+ 85D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 866+ 85D4             >
 866+ 85D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 867+ 85D4 5B 6E B0 6E                  dw      HERE, SUBTRACT, COMMA
 867+ 85D8 79 6E
 868+ 85DA 3F 69                        dw      EXIT
 869+ 85DC
 870+ 85DC              //  ______________________________________________________________________
 871+ 85DC              //
 872+ 85DC              // if          ( -- a 2 ) \ compile-time
 873+ 85DC              // IF ... THEN
 874+ 85DC              // IF ... ELSE ... ENDIF
 875+ 85DC                              Colon_Def IF, "IF", is_immediate
 875+ 85DC             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 875+ 85DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 875+ 85DC             >
 875+ 85DC             >                // dummy db directives used to calculate length of namec
 875+ 85DC 49 46       >                db      "IF"
 875+ 85DE             >len_NFA         defl    $ - temp_NFA
 875+ 85DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 875+ 85DC             >
 875+ 85DC C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 875+ 85DD 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 875+ 85DF             >                org     $-1                 // alter last byte of Name just above to set
 875+ 85DE C6          >                db      {b $} | END_BIT     // msb as name end
 875+ 85DF             >
 875+ 85DF CA 85       >                dw      last_NFA            // Link to previous definition Name
 875+ 85E1             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 875+ 85E1 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 875+ 85E4             >
 875+ 85E4             >
 875+ 85E4             >                endif           ; ok        // for other definitions it "points" the correct handler
 875+ 85E4             >                // Use of "; ok" to suppress "warning[fwdref]"
 875+ 85E4             >
 875+ 85E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 876+ 85E4 C9 70 1C 64                  dw      COMPILE, ZBRANCH
 877+ 85E8 5B 6E 51 6C                  dw      HERE, ZERO, COMMA
 877+ 85EC 79 6E
 878+ 85EE 63 6C                        dw      TWO
 879+ 85F0 3F 69                        dw      EXIT
 880+ 85F2
 881+ 85F2              //  ______________________________________________________________________
 882+ 85F2              //
 883+ 85F2              // then        ( a 2 -- ) \ compile-time
 884+ 85F2              //
 885+ 85F2                              Colon_Def THEN, "THEN", is_immediate
 885+ 85F2             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 885+ 85F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 885+ 85F2             >
 885+ 85F2             >                // dummy db directives used to calculate length of namec
 885+ 85F2 54 48 45 4E >                db      "THEN"
 885+ 85F6             >len_NFA         defl    $ - temp_NFA
 885+ 85F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 885+ 85F2             >
 885+ 85F2 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 885+ 85F3 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 885+ 85F7             >                org     $-1                 // alter last byte of Name just above to set
 885+ 85F6 CE          >                db      {b $} | END_BIT     // msb as name end
 885+ 85F7             >
 885+ 85F7 DC 85       >                dw      last_NFA            // Link to previous definition Name
 885+ 85F9             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 885+ 85F9 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 885+ 85FC             >
 885+ 85FC             >
 885+ 85FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 885+ 85FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 885+ 85FC             >
 885+ 85FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 886+ 85FC 4B 70                        dw      QCOMP
 887+ 85FE 63 6C 7C 70                  dw      TWO, QPAIRS
 888+ 8602 5B 6E 47 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 888+ 8606 B0 6E 77 6A
 888+ 860A 0E 6B
 889+ 860C 3F 69                        dw      EXIT
 890+ 860E
 891+ 860E              //  ______________________________________________________________________
 892+ 860E              //
 893+ 860E              // endif       ( a 2 -- ) \ compile-time
 894+ 860E              //
 895+ 860E                              Colon_Def ENDIF, "ENDIF", is_immediate
 895+ 860E             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 895+ 860E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 895+ 860E             >
 895+ 860E             >                // dummy db directives used to calculate length of namec
 895+ 860E 45 4E 44 49 >                db      "ENDIF"
 895+ 8612 46          >
 895+ 8613             >len_NFA         defl    $ - temp_NFA
 895+ 8613             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 895+ 860E             >
 895+ 860E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 895+ 860F 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 895+ 8613 46          >
 895+ 8614             >                org     $-1                 // alter last byte of Name just above to set
 895+ 8613 C6          >                db      {b $} | END_BIT     // msb as name end
 895+ 8614             >
 895+ 8614 F2 85       >                dw      last_NFA            // Link to previous definition Name
 895+ 8616             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 895+ 8616 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 895+ 8619             >
 895+ 8619             >
 895+ 8619             >                endif           ; ok        // for other definitions it "points" the correct handler
 895+ 8619             >                // Use of "; ok" to suppress "warning[fwdref]"
 895+ 8619             >
 895+ 8619             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 896+ 8619 F9 85                        dw      THEN
 897+ 861B 3F 69                        dw      EXIT
 898+ 861D
 899+ 861D              //  ______________________________________________________________________
 900+ 861D              //
 901+ 861D              // else        ( a1 2 -- a2 2 ) \ compile-time
 902+ 861D              //
 903+ 861D                              Colon_Def ELSE, "ELSE", is_immediate
 903+ 861D             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 903+ 861D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ 861D             >
 903+ 861D             >                // dummy db directives used to calculate length of namec
 903+ 861D 45 4C 53 45 >                db      "ELSE"
 903+ 8621             >len_NFA         defl    $ - temp_NFA
 903+ 8621             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ 861D             >
 903+ 861D C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ 861E 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 903+ 8622             >                org     $-1                 // alter last byte of Name just above to set
 903+ 8621 C5          >                db      {b $} | END_BIT     // msb as name end
 903+ 8622             >
 903+ 8622 0E 86       >                dw      last_NFA            // Link to previous definition Name
 903+ 8624             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 8624 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 903+ 8627             >
 903+ 8627             >
 903+ 8627             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 8627             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 8627             >
 903+ 8627             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 8627 4B 70                        dw      QCOMP
 905+ 8629 63 6C 7C 70                  dw      TWO, QPAIRS
 906+ 862D C9 70 07 64                  dw      COMPILE, BRANCH
 907+ 8631 5B 6E 51 6C                  dw      HERE, ZERO, COMMA
 907+ 8635 79 6E
 908+ 8637 77 6A 63 6C                  dw      SWAP, TWO, THEN
 908+ 863B F9 85
 909+ 863D 63 6C                        dw      TWO
 910+ 863F 3F 69                        dw      EXIT
 911+ 8641
 912+ 8641              //  ______________________________________________________________________
 913+ 8641              //
 914+ 8641              // begin        ( -- a 1 ) \ compile-time
 915+ 8641              // BEGIN ... AGAIN
 916+ 8641              // BEGIN ... f UNTIL
 917+ 8641              // BEGIN ... f WHILE ... REPEAT
 918+ 8641                              Colon_Def BEGIN, "BEGIN", is_immediate
 918+ 8641             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 918+ 8641             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 918+ 8641             >
 918+ 8641             >                // dummy db directives used to calculate length of namec
 918+ 8641 42 45 47 49 >                db      "BEGIN"
 918+ 8645 4E          >
 918+ 8646             >len_NFA         defl    $ - temp_NFA
 918+ 8646             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 918+ 8641             >
 918+ 8641 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 918+ 8642 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 918+ 8646 4E          >
 918+ 8647             >                org     $-1                 // alter last byte of Name just above to set
 918+ 8646 CE          >                db      {b $} | END_BIT     // msb as name end
 918+ 8647             >
 918+ 8647 1D 86       >                dw      last_NFA            // Link to previous definition Name
 918+ 8649             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 918+ 8649 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 918+ 864C             >
 918+ 864C             >
 918+ 864C             >                endif           ; ok        // for other definitions it "points" the correct handler
 918+ 864C             >                // Use of "; ok" to suppress "warning[fwdref]"
 918+ 864C             >
 918+ 864C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 919+ 864C 4B 70                        dw      QCOMP
 920+ 864E 5B 6E                        dw      HERE
 921+ 8650 63 6C                        dw      TWO
 922+ 8652 3F 69                        dw      EXIT
 923+ 8654
 924+ 8654              //  ______________________________________________________________________
 925+ 8654              //
 926+ 8654              // again        ( a 1 -- ) \ compile-time
 927+ 8654                              Colon_Def AGAIN, "AGAIN", is_immediate
 927+ 8654             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 927+ 8654             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 927+ 8654             >
 927+ 8654             >                // dummy db directives used to calculate length of namec
 927+ 8654 41 47 41 49 >                db      "AGAIN"
 927+ 8658 4E          >
 927+ 8659             >len_NFA         defl    $ - temp_NFA
 927+ 8659             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 927+ 8654             >
 927+ 8654 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 927+ 8655 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 927+ 8659 4E          >
 927+ 865A             >                org     $-1                 // alter last byte of Name just above to set
 927+ 8659 CE          >                db      {b $} | END_BIT     // msb as name end
 927+ 865A             >
 927+ 865A 41 86       >                dw      last_NFA            // Link to previous definition Name
 927+ 865C             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 927+ 865C CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 927+ 865F             >
 927+ 865F             >
 927+ 865F             >                endif           ; ok        // for other definitions it "points" the correct handler
 927+ 865F             >                // Use of "; ok" to suppress "warning[fwdref]"
 927+ 865F             >
 927+ 865F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 928+ 865F 4B 70                        dw      QCOMP
 929+ 8661 63 6C 7C 70                  dw      TWO, QPAIRS
 930+ 8665 C9 70 07 64                  dw      COMPILE, BRANCH
 931+ 8669 D1 85                        dw      BACK
 932+ 866B 3F 69                        dw      EXIT
 933+ 866D
 934+ 866D              //  ______________________________________________________________________
 935+ 866D              //
 936+ 866D              // until        ( a 1 -- ) \ compile-time
 937+ 866D                              Colon_Def UNTIL, "UNTIL", is_immediate
 937+ 866D             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 937+ 866D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 937+ 866D             >
 937+ 866D             >                // dummy db directives used to calculate length of namec
 937+ 866D 55 4E 54 49 >                db      "UNTIL"
 937+ 8671 4C          >
 937+ 8672             >len_NFA         defl    $ - temp_NFA
 937+ 8672             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 937+ 866D             >
 937+ 866D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 937+ 866E 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 937+ 8672 4C          >
 937+ 8673             >                org     $-1                 // alter last byte of Name just above to set
 937+ 8672 CC          >                db      {b $} | END_BIT     // msb as name end
 937+ 8673             >
 937+ 8673 54 86       >                dw      last_NFA            // Link to previous definition Name
 937+ 8675             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 937+ 8675 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 937+ 8678             >
 937+ 8678             >
 937+ 8678             >                endif           ; ok        // for other definitions it "points" the correct handler
 937+ 8678             >                // Use of "; ok" to suppress "warning[fwdref]"
 937+ 8678             >
 937+ 8678             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 938+ 8678 4B 70                        dw      QCOMP
 939+ 867A 63 6C 7C 70                  dw      TWO, QPAIRS
 940+ 867E C9 70 1C 64                  dw      COMPILE, ZBRANCH
 941+ 8682 D1 85                        dw      BACK
 942+ 8684 3F 69                        dw      EXIT
 943+ 8686
 944+ 8686              //  ______________________________________________________________________
 945+ 8686              //
 946+ 8686              // end          ( a 1 -- ) \ compile-time
 947+ 8686                              Colon_Def END, "END", is_immediate
 947+ 8686             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 947+ 8686             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 947+ 8686             >
 947+ 8686             >                // dummy db directives used to calculate length of namec
 947+ 8686 45 4E 44    >                db      "END"
 947+ 8689             >len_NFA         defl    $ - temp_NFA
 947+ 8689             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 947+ 8686             >
 947+ 8686 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 947+ 8687 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 947+ 868A             >                org     $-1                 // alter last byte of Name just above to set
 947+ 8689 C4          >                db      {b $} | END_BIT     // msb as name end
 947+ 868A             >
 947+ 868A 6D 86       >                dw      last_NFA            // Link to previous definition Name
 947+ 868C             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 947+ 868C CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 947+ 868F             >
 947+ 868F             >
 947+ 868F             >                endif           ; ok        // for other definitions it "points" the correct handler
 947+ 868F             >                // Use of "; ok" to suppress "warning[fwdref]"
 947+ 868F             >
 947+ 868F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 948+ 868F 75 86                        dw      UNTIL
 949+ 8691 3F 69                        dw      EXIT
 950+ 8693
 951+ 8693              //  ______________________________________________________________________
 952+ 8693              //
 953+ 8693              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 954+ 8693                              Colon_Def WHILE, "WHILE", is_immediate
 954+ 8693             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 954+ 8693             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 954+ 8693             >
 954+ 8693             >                // dummy db directives used to calculate length of namec
 954+ 8693 57 48 49 4C >                db      "WHILE"
 954+ 8697 45          >
 954+ 8698             >len_NFA         defl    $ - temp_NFA
 954+ 8698             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 954+ 8693             >
 954+ 8693 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 954+ 8694 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 954+ 8698 45          >
 954+ 8699             >                org     $-1                 // alter last byte of Name just above to set
 954+ 8698 C5          >                db      {b $} | END_BIT     // msb as name end
 954+ 8699             >
 954+ 8699 86 86       >                dw      last_NFA            // Link to previous definition Name
 954+ 869B             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 954+ 869B CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 954+ 869E             >
 954+ 869E             >
 954+ 869E             >                endif           ; ok        // for other definitions it "points" the correct handler
 954+ 869E             >                // Use of "; ok" to suppress "warning[fwdref]"
 954+ 869E             >
 954+ 869E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 955+ 869E E1 85                        dw      IF
 956+ 86A0              //              dw      TWO_PLUS // ( that is 4 )
 957+ 86A0 C7 6A                        dw      TWO_SWAP
 958+ 86A2 3F 69                        dw      EXIT
 959+ 86A4
 960+ 86A4              //  ______________________________________________________________________
 961+ 86A4              //
 962+ 86A4              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 963+ 86A4                              Colon_Def REPEAT, "REPEAT", is_immediate
 963+ 86A4             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 963+ 86A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 963+ 86A4             >
 963+ 86A4             >                // dummy db directives used to calculate length of namec
 963+ 86A4 52 45 50 45 >                db      "REPEAT"
 963+ 86A8 41 54       >
 963+ 86AA             >len_NFA         defl    $ - temp_NFA
 963+ 86AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 963+ 86A4             >
 963+ 86A4 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 963+ 86A5 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 963+ 86A9 41 54       >
 963+ 86AB             >                org     $-1                 // alter last byte of Name just above to set
 963+ 86AA D4          >                db      {b $} | END_BIT     // msb as name end
 963+ 86AB             >
 963+ 86AB 93 86       >                dw      last_NFA            // Link to previous definition Name
 963+ 86AD             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 963+ 86AD CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 963+ 86B0             >
 963+ 86B0             >
 963+ 86B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 963+ 86B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 963+ 86B0             >
 963+ 86B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 964+ 86B0 5C 86                        dw      AGAIN
 965+ 86B2              //              dw      TWO_MINUS
 966+ 86B2 F9 85                        dw      THEN
 967+ 86B4 3F 69                        dw      EXIT
 968+ 86B6
 969+ 86B6              //  ______________________________________________________________________
 970+ 86B6              //
 971+ 86B6              // ?do-
 972+ 86B6              // special version of "BACK" used by ?DO and LOOP
 973+ 86B6                              Colon_Def C_DO_BACK, "?DO-", is_normal
 973+ 86B6             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 973+ 86B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 973+ 86B6             >
 973+ 86B6             >                // dummy db directives used to calculate length of namec
 973+ 86B6 3F 44 4F 2D >                db      "?DO-"
 973+ 86BA             >len_NFA         defl    $ - temp_NFA
 973+ 86BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 973+ 86B6             >
 973+ 86B6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 973+ 86B7 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 973+ 86BB             >                org     $-1                 // alter last byte of Name just above to set
 973+ 86BA AD          >                db      {b $} | END_BIT     // msb as name end
 973+ 86BB             >
 973+ 86BB A4 86       >                dw      last_NFA            // Link to previous definition Name
 973+ 86BD             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 973+ 86BD CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 973+ 86C0             >
 973+ 86C0             >
 973+ 86C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 973+ 86C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 973+ 86C0             >
 973+ 86C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 974+ 86C0 D1 85                        dw      BACK
 975+ 86C2              CDoBack_Begin:
 976+ 86C2 0F 69 E1 6D                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 976+ 86C6 03 6B B0 6E
 977+ 86CA 1C 64                        dw      ZBRANCH
 978+ 86CC 0A 00                        dw      CDoBack_While - $
 979+ 86CE EB 69 F9 85                  dw          TWO_PLUS, THEN
 980+ 86D2 07 64                        dw      BRANCH
 981+ 86D4 EE FF                        dw      CDoBack_Begin - $
 982+ 86D6              CDoBack_While:
 983+ 86D6 90 70 E1 6D                  dw      QCSP, CSP, STORE
 983+ 86DA 0E 6B
 984+ 86DC 3F 69                        dw      EXIT
 985+ 86DE
 986+ 86DE              //  ______________________________________________________________________
 987+ 86DE              //
 988+ 86DE              // do
 989+ 86DE              // DO  ... LOOP
 990+ 86DE              // DO  ... n +LOOP
 991+ 86DE              // ?DO ... LOOP
 992+ 86DE              // ?DO ... n +LOOP
 993+ 86DE                              Colon_Def DO, "DO", is_immediate
 993+ 86DE             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 993+ 86DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 993+ 86DE             >
 993+ 86DE             >                // dummy db directives used to calculate length of namec
 993+ 86DE 44 4F       >                db      "DO"
 993+ 86E0             >len_NFA         defl    $ - temp_NFA
 993+ 86E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 993+ 86DE             >
 993+ 86DE C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 993+ 86DF 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 993+ 86E1             >                org     $-1                 // alter last byte of Name just above to set
 993+ 86E0 CF          >                db      {b $} | END_BIT     // msb as name end
 993+ 86E1             >
 993+ 86E1 B6 86       >                dw      last_NFA            // Link to previous definition Name
 993+ 86E3             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 993+ 86E3 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 993+ 86E6             >
 993+ 86E6             >
 993+ 86E6             >                endif           ; ok        // for other definitions it "points" the correct handler
 993+ 86E6             >                // Use of "; ok" to suppress "warning[fwdref]"
 993+ 86E6             >
 993+ 86E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 994+ 86E6 C9 70 70 64                  dw      COMPILE, C_DO
 995+ 86EA E1 6D 03 6B                  dw      CSP, FETCH, STORE_CSP
 995+ 86EE 1C 70
 996+ 86F0 5B 6E 6C 6C                  dw      HERE, THREE
 997+ 86F4 3F 69                        dw      EXIT
 998+ 86F6
 999+ 86F6              //  ______________________________________________________________________
1000+ 86F6              //
1001+ 86F6              // loop
1002+ 86F6                              Colon_Def LOOP, "LOOP", is_immediate
1002+ 86F6             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
1002+ 86F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1002+ 86F6             >
1002+ 86F6             >                // dummy db directives used to calculate length of namec
1002+ 86F6 4C 4F 4F 50 >                db      "LOOP"
1002+ 86FA             >len_NFA         defl    $ - temp_NFA
1002+ 86FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1002+ 86F6             >
1002+ 86F6 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1002+ 86F7 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
1002+ 86FB             >                org     $-1                 // alter last byte of Name just above to set
1002+ 86FA D0          >                db      {b $} | END_BIT     // msb as name end
1002+ 86FB             >
1002+ 86FB DE 86       >                dw      last_NFA            // Link to previous definition Name
1002+ 86FD             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1002+ 86FD CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1002+ 8700             >
1002+ 8700             >
1002+ 8700             >                endif           ; ok        // for other definitions it "points" the correct handler
1002+ 8700             >                // Use of "; ok" to suppress "warning[fwdref]"
1002+ 8700             >
1002+ 8700             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1003+ 8700 6C 6C 7C 70                  dw      THREE, QPAIRS
1004+ 8704 C9 70 F8 63                  dw      COMPILE, C_LOOP
1005+ 8708 BD 86                        dw      C_DO_BACK
1006+ 870A 3F 69                        dw      EXIT
1007+ 870C
1008+ 870C              //  ______________________________________________________________________
1009+ 870C              //
1010+ 870C              // +loop
1011+ 870C                              Colon_Def PLOOP, "+LOOP", is_immediate
1011+ 870C             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1011+ 870C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1011+ 870C             >
1011+ 870C             >                // dummy db directives used to calculate length of namec
1011+ 870C 2B 4C 4F 4F >                db      "+LOOP"
1011+ 8710 50          >
1011+ 8711             >len_NFA         defl    $ - temp_NFA
1011+ 8711             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1011+ 870C             >
1011+ 870C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1011+ 870D 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1011+ 8711 50          >
1011+ 8712             >                org     $-1                 // alter last byte of Name just above to set
1011+ 8711 D0          >                db      {b $} | END_BIT     // msb as name end
1011+ 8712             >
1011+ 8712 F6 86       >                dw      last_NFA            // Link to previous definition Name
1011+ 8714             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1011+ 8714 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1011+ 8717             >
1011+ 8717             >
1011+ 8717             >                endif           ; ok        // for other definitions it "points" the correct handler
1011+ 8717             >                // Use of "; ok" to suppress "warning[fwdref]"
1011+ 8717             >
1011+ 8717             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1012+ 8717 6C 6C 7C 70                  dw      THREE, QPAIRS
1013+ 871B C9 70 C3 63                  dw      COMPILE, C_PLOOP
1014+ 871F BD 86                        dw      C_DO_BACK
1015+ 8721 3F 69                        dw      EXIT
1016+ 8723
1017+ 8723              //  ______________________________________________________________________
1018+ 8723              //
1019+ 8723              // ?do
1020+ 8723                              Colon_Def QDO, "?DO", is_immediate
1020+ 8723             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1020+ 8723             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1020+ 8723             >
1020+ 8723             >                // dummy db directives used to calculate length of namec
1020+ 8723 3F 44 4F    >                db      "?DO"
1020+ 8726             >len_NFA         defl    $ - temp_NFA
1020+ 8726             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1020+ 8723             >
1020+ 8723 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1020+ 8724 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1020+ 8727             >                org     $-1                 // alter last byte of Name just above to set
1020+ 8726 CF          >                db      {b $} | END_BIT     // msb as name end
1020+ 8727             >
1020+ 8727 0C 87       >                dw      last_NFA            // Link to previous definition Name
1020+ 8729             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1020+ 8729 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1020+ 872C             >
1020+ 872C             >
1020+ 872C             >                endif           ; ok        // for other definitions it "points" the correct handler
1020+ 872C             >                // Use of "; ok" to suppress "warning[fwdref]"
1020+ 872C             >
1020+ 872C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1021+ 872C C9 70 45 64                  dw      COMPILE, C_Q_DO
1022+ 8730 E1 6D 03 6B                  dw      CSP, FETCH, STORE_CSP
1022+ 8734 1C 70
1023+ 8736 5B 6E 51 6C                  dw      HERE, ZERO, COMMA, ZERO
1023+ 873A 79 6E 51 6C
1024+ 873E 5B 6E 6C 6C                  dw      HERE, THREE
1025+ 8742 3F 69                        dw      EXIT
1026+ 8744
1027+ 8744              Latest_Definition:
1028+ 8744              //  ______________________________________________________________________
1029+ 8744              //
1030+ 8744              // \
1031+ 8744                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1031+ 8744             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1031+ 8744             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1031+ 8744             >
1031+ 8744             >                // dummy db directives used to calculate length of namec
1031+ 8744 5C          >                db      "\\"
1031+ 8745             >len_NFA         defl    $ - temp_NFA
1031+ 8745             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1031+ 8744             >
1031+ 8744 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1031+ 8745 5C          >                db      "\\"               // name string in 7-bit ascii, but
1031+ 8746             >                org     $-1                 // alter last byte of Name just above to set
1031+ 8745 DC          >                db      {b $} | END_BIT     // msb as name end
1031+ 8746             >
1031+ 8746 23 87       >                dw      last_NFA            // Link to previous definition Name
1031+ 8748             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1031+ 8748 CD D8 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1031+ 874B             >
1031+ 874B             >
1031+ 874B             >                endif           ; ok        // for other definitions it "points" the correct handler
1031+ 874B             >                // Use of "; ok" to suppress "warning[fwdref]"
1031+ 874B             >
1031+ 874B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1032+ 874B 65 6D 03 6B                  dw      BLK, FETCH
1033+ 874F 1C 64                        dw      ZBRANCH
1034+ 8751 30 00                        dw      Backslash_Else_1 - $
1035+ 8753 65 6D 03 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1035+ 8757 5A 6C F1 6E
1036+ 875B 1C 64                        dw          ZBRANCH
1037+ 875D 18 00                        dw          Backslash_Else_2 - $
1038+ 875F 6F 6D 03 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1038+ 8763 8B 6C 63 7A
1038+ 8767 8B 6C
1039+ 8769 77 6A B0 6E                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1039+ 876D 6F 6D E4 6A
1040+ 8771 07 64                        dw          BRANCH
1041+ 8773 0A 00                        dw          Backslash_Endif_2 - $
1042+ 8775              Backslash_Else_2:
1043+ 8775 98 6C 04 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1043+ 8779 6F 6D 0E 6B
1044+ 877D              Backslash_Endif_2:
1045+ 877D 07 64                        dw      BRANCH
1046+ 877F 0A 00                        dw      Backslash_Endif_1 - $
1047+ 8781              Backslash_Else_1:
1048+ 8781 A5 63 50 00                  dw          LIT, 80, TO_IN, STORE
1048+ 8785 6F 6D 0E 6B
1049+ 8789              Backslash_Endif_1:
1050+ 8789 3F 69                        dw      EXIT
1051+ 878B
1052+ 878B              Fence_Word:
1053+ 878B              //  ______________________________________________________________________
1054+ 878B              //
1055+ 878B
1056+ 878B 00           Here_Dictionary db      0
1057+ 878C
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
 115  878C
 116  878C              // now we save the compiled file so we can either run it or debug it
 117  878C                              SAVENEX OPEN "output/main.nex", ORIGIN
 118  878C                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 119  878C                              SAVENEX CFG  0
 120  878C                              SAVENEX BANK 2, 0
 121  878C                              SAVENEX AUTO
 122  878C                              SAVENEX CLOSE
 123  878C
 124  878C              //              PAGE 7 ;set 7 page to current slot
 125  878C              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 126  878C              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 127  878C
 128  878C                              SAVETAP "output/F15f.tap", CODE, "forth15f", ORIGIN, 10000
 129  878C
 130  878C                              SAVEBIN "output/forth15f.bin", ORIGIN, 10000
 131  878C
 132  878C                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
